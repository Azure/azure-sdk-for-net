// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;
using Azure.ResourceManager.CustomerInsights.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.CustomerInsights
{
    public partial class RoleAssignmentResourceFormatData : IUtf8JsonSerializable, IModelJsonSerializable<RoleAssignmentResourceFormatData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<RoleAssignmentResourceFormatData>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<RoleAssignmentResourceFormatData>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<RoleAssignmentResourceFormatData>(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStartObject();
                foreach (var item in DisplayName)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStartObject();
                foreach (var item in Description)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(Role))
            {
                writer.WritePropertyName("role"u8);
                writer.WriteStringValue(Role.Value.ToSerialString());
            }
            if (Optional.IsCollectionDefined(Principals))
            {
                writer.WritePropertyName("principals"u8);
                writer.WriteStartArray();
                foreach (var item in Principals)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<AssignmentPrincipal>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Profiles))
            {
                writer.WritePropertyName("profiles"u8);
                if (Profiles is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<ResourceSetDescription>)Profiles).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(Interactions))
            {
                writer.WritePropertyName("interactions"u8);
                if (Interactions is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<ResourceSetDescription>)Interactions).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(Links))
            {
                writer.WritePropertyName("links"u8);
                if (Links is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<ResourceSetDescription>)Links).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(Kpis))
            {
                writer.WritePropertyName("kpis"u8);
                if (Kpis is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<ResourceSetDescription>)Kpis).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(SasPolicies))
            {
                writer.WritePropertyName("sasPolicies"u8);
                if (SasPolicies is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<ResourceSetDescription>)SasPolicies).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(Connectors))
            {
                writer.WritePropertyName("connectors"u8);
                if (Connectors is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<ResourceSetDescription>)Connectors).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(Views))
            {
                writer.WritePropertyName("views"u8);
                if (Views is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<ResourceSetDescription>)Views).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(RelationshipLinks))
            {
                writer.WritePropertyName("relationshipLinks"u8);
                if (RelationshipLinks is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<ResourceSetDescription>)RelationshipLinks).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(Relationships))
            {
                writer.WritePropertyName("relationships"u8);
                if (Relationships is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<ResourceSetDescription>)Relationships).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(WidgetTypes))
            {
                writer.WritePropertyName("widgetTypes"u8);
                if (WidgetTypes is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<ResourceSetDescription>)WidgetTypes).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(RoleAssignments))
            {
                writer.WritePropertyName("roleAssignments"u8);
                if (RoleAssignments is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<ResourceSetDescription>)RoleAssignments).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(ConflationPolicies))
            {
                writer.WritePropertyName("conflationPolicies"u8);
                if (ConflationPolicies is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<ResourceSetDescription>)ConflationPolicies).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(Segments))
            {
                writer.WritePropertyName("segments"u8);
                if (Segments is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<ResourceSetDescription>)Segments).Serialize(writer, options);
                }
            }
            writer.WriteEndObject();
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static RoleAssignmentResourceFormatData DeserializeRoleAssignmentResourceFormatData(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<Guid> tenantId = default;
            Optional<string> assignmentName = default;
            Optional<IDictionary<string, string>> displayName = default;
            Optional<IDictionary<string, string>> description = default;
            Optional<ProvisioningState> provisioningState = default;
            Optional<RoleType> role = default;
            Optional<IList<AssignmentPrincipal>> principals = default;
            Optional<ResourceSetDescription> profiles = default;
            Optional<ResourceSetDescription> interactions = default;
            Optional<ResourceSetDescription> links = default;
            Optional<ResourceSetDescription> kpis = default;
            Optional<ResourceSetDescription> sasPolicies = default;
            Optional<ResourceSetDescription> connectors = default;
            Optional<ResourceSetDescription> views = default;
            Optional<ResourceSetDescription> relationshipLinks = default;
            Optional<ResourceSetDescription> relationships = default;
            Optional<ResourceSetDescription> widgetTypes = default;
            Optional<ResourceSetDescription> roleAssignments = default;
            Optional<ResourceSetDescription> conflationPolicies = default;
            Optional<ResourceSetDescription> segments = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("tenantId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            tenantId = property0.Value.GetGuid();
                            continue;
                        }
                        if (property0.NameEquals("assignmentName"u8))
                        {
                            assignmentName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("displayName"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, string> dictionary = new Dictionary<string, string>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetString());
                            }
                            displayName = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("description"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, string> dictionary = new Dictionary<string, string>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetString());
                            }
                            description = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new ProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("role"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            role = property0.Value.GetString().ToRoleType();
                            continue;
                        }
                        if (property0.NameEquals("principals"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<AssignmentPrincipal> array = new List<AssignmentPrincipal>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(AssignmentPrincipal.DeserializeAssignmentPrincipal(item));
                            }
                            principals = array;
                            continue;
                        }
                        if (property0.NameEquals("profiles"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            profiles = ResourceSetDescription.DeserializeResourceSetDescription(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("interactions"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            interactions = ResourceSetDescription.DeserializeResourceSetDescription(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("links"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            links = ResourceSetDescription.DeserializeResourceSetDescription(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("kpis"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            kpis = ResourceSetDescription.DeserializeResourceSetDescription(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("sasPolicies"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            sasPolicies = ResourceSetDescription.DeserializeResourceSetDescription(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("connectors"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            connectors = ResourceSetDescription.DeserializeResourceSetDescription(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("views"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            views = ResourceSetDescription.DeserializeResourceSetDescription(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("relationshipLinks"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            relationshipLinks = ResourceSetDescription.DeserializeResourceSetDescription(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("relationships"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            relationships = ResourceSetDescription.DeserializeResourceSetDescription(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("widgetTypes"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            widgetTypes = ResourceSetDescription.DeserializeResourceSetDescription(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("roleAssignments"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            roleAssignments = ResourceSetDescription.DeserializeResourceSetDescription(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("conflationPolicies"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            conflationPolicies = ResourceSetDescription.DeserializeResourceSetDescription(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("segments"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            segments = ResourceSetDescription.DeserializeResourceSetDescription(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new RoleAssignmentResourceFormatData(id, name, type, systemData.Value, Optional.ToNullable(tenantId), assignmentName.Value, Optional.ToDictionary(displayName), Optional.ToDictionary(description), Optional.ToNullable(provisioningState), Optional.ToNullable(role), Optional.ToList(principals), profiles.Value, interactions.Value, links.Value, kpis.Value, sasPolicies.Value, connectors.Value, views.Value, relationshipLinks.Value, relationships.Value, widgetTypes.Value, roleAssignments.Value, conflationPolicies.Value, segments.Value, rawData);
        }

        RoleAssignmentResourceFormatData IModelJsonSerializable<RoleAssignmentResourceFormatData>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<RoleAssignmentResourceFormatData>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeRoleAssignmentResourceFormatData(doc.RootElement, options);
        }

        BinaryData IModelSerializable<RoleAssignmentResourceFormatData>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<RoleAssignmentResourceFormatData>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        RoleAssignmentResourceFormatData IModelSerializable<RoleAssignmentResourceFormatData>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<RoleAssignmentResourceFormatData>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeRoleAssignmentResourceFormatData(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="RoleAssignmentResourceFormatData"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="RoleAssignmentResourceFormatData"/> to convert. </param>
        public static implicit operator RequestContent(RoleAssignmentResourceFormatData model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="RoleAssignmentResourceFormatData"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator RoleAssignmentResourceFormatData(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeRoleAssignmentResourceFormatData(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
