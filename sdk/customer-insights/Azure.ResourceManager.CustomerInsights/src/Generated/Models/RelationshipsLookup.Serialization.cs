// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CustomerInsights.Models
{
    public partial class RelationshipsLookup : IUtf8JsonSerializable, IJsonModel<RelationshipsLookup>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<RelationshipsLookup>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<RelationshipsLookup>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RelationshipsLookup>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RelationshipsLookup)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(ProfileName))
            {
                writer.WritePropertyName("profileName"u8);
                writer.WriteStringValue(ProfileName);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(ProfilePropertyReferences))
            {
                writer.WritePropertyName("profilePropertyReferences"u8);
                writer.WriteStartArray();
                foreach (var item in ProfilePropertyReferences)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(RelatedProfileName))
            {
                writer.WritePropertyName("relatedProfileName"u8);
                writer.WriteStringValue(RelatedProfileName);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(RelatedProfilePropertyReferences))
            {
                writer.WritePropertyName("relatedProfilePropertyReferences"u8);
                writer.WriteStartArray();
                foreach (var item in RelatedProfilePropertyReferences)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(ExistingRelationshipName))
            {
                writer.WritePropertyName("existingRelationshipName"u8);
                writer.WriteStringValue(ExistingRelationshipName);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        RelationshipsLookup IJsonModel<RelationshipsLookup>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RelationshipsLookup>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RelationshipsLookup)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeRelationshipsLookup(document.RootElement, options);
        }

        internal static RelationshipsLookup DeserializeRelationshipsLookup(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> profileName = default;
            Optional<IReadOnlyList<ParticipantProfilePropertyReference>> profilePropertyReferences = default;
            Optional<string> relatedProfileName = default;
            Optional<IReadOnlyList<ParticipantProfilePropertyReference>> relatedProfilePropertyReferences = default;
            Optional<string> existingRelationshipName = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("profileName"u8))
                {
                    profileName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("profilePropertyReferences"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ParticipantProfilePropertyReference> array = new List<ParticipantProfilePropertyReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ParticipantProfilePropertyReference.DeserializeParticipantProfilePropertyReference(item));
                    }
                    profilePropertyReferences = array;
                    continue;
                }
                if (property.NameEquals("relatedProfileName"u8))
                {
                    relatedProfileName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("relatedProfilePropertyReferences"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ParticipantProfilePropertyReference> array = new List<ParticipantProfilePropertyReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ParticipantProfilePropertyReference.DeserializeParticipantProfilePropertyReference(item));
                    }
                    relatedProfilePropertyReferences = array;
                    continue;
                }
                if (property.NameEquals("existingRelationshipName"u8))
                {
                    existingRelationshipName = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new RelationshipsLookup(profileName.Value, Optional.ToList(profilePropertyReferences), relatedProfileName.Value, Optional.ToList(relatedProfilePropertyReferences), existingRelationshipName.Value, serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(ProfileName))
            {
                builder.Append("  profileName:");
                if (ProfileName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ProfileName}'''");
                }
                else
                {
                    builder.AppendLine($" '{ProfileName}'");
                }
            }

            if (Optional.IsCollectionDefined(ProfilePropertyReferences))
            {
                if (ProfilePropertyReferences.Any())
                {
                    builder.Append("  profilePropertyReferences:");
                    builder.AppendLine(" [");
                    foreach (var item in ProfilePropertyReferences)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsDefined(RelatedProfileName))
            {
                builder.Append("  relatedProfileName:");
                if (RelatedProfileName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{RelatedProfileName}'''");
                }
                else
                {
                    builder.AppendLine($" '{RelatedProfileName}'");
                }
            }

            if (Optional.IsCollectionDefined(RelatedProfilePropertyReferences))
            {
                if (RelatedProfilePropertyReferences.Any())
                {
                    builder.Append("  relatedProfilePropertyReferences:");
                    builder.AppendLine(" [");
                    foreach (var item in RelatedProfilePropertyReferences)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsDefined(ExistingRelationshipName))
            {
                builder.Append("  existingRelationshipName:");
                if (ExistingRelationshipName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ExistingRelationshipName}'''");
                }
                else
                {
                    builder.AppendLine($" '{ExistingRelationshipName}'");
                }
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            bool inMultilineString = false;
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (inMultilineString)
                {
                    if (line.Contains("'''"))
                    {
                        inMultilineString = false;
                    }
                    stringBuilder.AppendLine(line);
                    continue;
                }
                if (line.Contains("'''"))
                {
                    inMultilineString = true;
                    stringBuilder.AppendLine($"{indent}{line}");
                    continue;
                }
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<RelationshipsLookup>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RelationshipsLookup>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(RelationshipsLookup)} does not support '{options.Format}' format.");
            }
        }

        RelationshipsLookup IPersistableModel<RelationshipsLookup>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RelationshipsLookup>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeRelationshipsLookup(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(RelationshipsLookup)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<RelationshipsLookup>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
