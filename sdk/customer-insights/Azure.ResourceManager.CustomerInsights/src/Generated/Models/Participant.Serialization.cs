// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CustomerInsights.Models
{
    public partial class Participant : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("profileTypeName");
            writer.WriteStringValue(ProfileTypeName);
            writer.WritePropertyName("participantPropertyReferences");
            writer.WriteStartArray();
            foreach (var item in ParticipantPropertyReferences)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("participantName");
            writer.WriteStringValue(ParticipantName);
            if (Optional.IsCollectionDefined(DisplayName))
            {
                writer.WritePropertyName("displayName");
                writer.WriteStartObject();
                foreach (var item in DisplayName)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStartObject();
                foreach (var item in Description)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(Role))
            {
                writer.WritePropertyName("role");
                writer.WriteStringValue(Role);
            }
            writer.WriteEndObject();
        }

        internal static Participant DeserializeParticipant(JsonElement element)
        {
            string profileTypeName = default;
            IList<ParticipantPropertyReference> participantPropertyReferences = default;
            string participantName = default;
            Optional<IDictionary<string, string>> displayName = default;
            Optional<IDictionary<string, string>> description = default;
            Optional<string> role = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("profileTypeName"))
                {
                    profileTypeName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("participantPropertyReferences"))
                {
                    List<ParticipantPropertyReference> array = new List<ParticipantPropertyReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ParticipantPropertyReference.DeserializeParticipantPropertyReference(item));
                    }
                    participantPropertyReferences = array;
                    continue;
                }
                if (property.NameEquals("participantName"))
                {
                    participantName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    displayName = dictionary;
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    description = dictionary;
                    continue;
                }
                if (property.NameEquals("role"))
                {
                    role = property.Value.GetString();
                    continue;
                }
            }
            return new Participant(profileTypeName, participantPropertyReferences, participantName, Optional.ToDictionary(displayName), Optional.ToDictionary(description), role.Value);
        }
    }
}
