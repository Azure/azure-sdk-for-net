// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CustomerInsights.Models
{
    public partial class PropertyDefinition : IUtf8JsonSerializable, IJsonModel<PropertyDefinition>, IPersistableModel<PropertyDefinition>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<PropertyDefinition>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<PropertyDefinition>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PropertyDefinition>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(PropertyDefinition)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(ArrayValueSeparator))
            {
                writer.WritePropertyName("arrayValueSeparator"u8);
                writer.WriteStringValue(ArrayValueSeparator);
            }
            if (Optional.IsCollectionDefined(EnumValidValues))
            {
                writer.WritePropertyName("enumValidValues"u8);
                writer.WriteStartArray();
                foreach (var item in EnumValidValues)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("fieldName"u8);
            writer.WriteStringValue(FieldName);
            writer.WritePropertyName("fieldType"u8);
            writer.WriteStringValue(FieldType);
            if (Optional.IsDefined(IsArray))
            {
                writer.WritePropertyName("isArray"u8);
                writer.WriteBooleanValue(IsArray.Value);
            }
            if (Optional.IsDefined(IsEnum))
            {
                writer.WritePropertyName("isEnum"u8);
                writer.WriteBooleanValue(IsEnum.Value);
            }
            if (Optional.IsDefined(IsFlagEnum))
            {
                writer.WritePropertyName("isFlagEnum"u8);
                writer.WriteBooleanValue(IsFlagEnum.Value);
            }
            if (Optional.IsDefined(IsImage))
            {
                writer.WritePropertyName("isImage"u8);
                writer.WriteBooleanValue(IsImage.Value);
            }
            if (Optional.IsDefined(IsLocalizedString))
            {
                writer.WritePropertyName("isLocalizedString"u8);
                writer.WriteBooleanValue(IsLocalizedString.Value);
            }
            if (Optional.IsDefined(IsName))
            {
                writer.WritePropertyName("isName"u8);
                writer.WriteBooleanValue(IsName.Value);
            }
            if (Optional.IsDefined(IsRequired))
            {
                writer.WritePropertyName("isRequired"u8);
                writer.WriteBooleanValue(IsRequired.Value);
            }
            if (Optional.IsDefined(PropertyId))
            {
                writer.WritePropertyName("propertyId"u8);
                writer.WriteStringValue(PropertyId);
            }
            if (Optional.IsDefined(SchemaItemPropLink))
            {
                writer.WritePropertyName("schemaItemPropLink"u8);
                writer.WriteStringValue(SchemaItemPropLink);
            }
            if (Optional.IsDefined(MaxLength))
            {
                writer.WritePropertyName("maxLength"u8);
                writer.WriteNumberValue(MaxLength.Value);
            }
            if (Optional.IsDefined(IsAvailableInGraph))
            {
                writer.WritePropertyName("isAvailableInGraph"u8);
                writer.WriteBooleanValue(IsAvailableInGraph.Value);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(DataSourcePrecedenceRules))
            {
                writer.WritePropertyName("dataSourcePrecedenceRules"u8);
                writer.WriteStartArray();
                foreach (var item in DataSourcePrecedenceRules)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        PropertyDefinition IJsonModel<PropertyDefinition>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PropertyDefinition>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(PropertyDefinition)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializePropertyDefinition(document.RootElement, options);
        }

        internal static PropertyDefinition DeserializePropertyDefinition(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> arrayValueSeparator = default;
            Optional<IList<ProfileEnumValidValuesFormat>> enumValidValues = default;
            string fieldName = default;
            string fieldType = default;
            Optional<bool> isArray = default;
            Optional<bool> isEnum = default;
            Optional<bool> isFlagEnum = default;
            Optional<bool> isImage = default;
            Optional<bool> isLocalizedString = default;
            Optional<bool> isName = default;
            Optional<bool> isRequired = default;
            Optional<string> propertyId = default;
            Optional<string> schemaItemPropLink = default;
            Optional<int> maxLength = default;
            Optional<bool> isAvailableInGraph = default;
            Optional<IReadOnlyList<DataSourcePrecedence>> dataSourcePrecedenceRules = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("arrayValueSeparator"u8))
                {
                    arrayValueSeparator = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enumValidValues"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ProfileEnumValidValuesFormat> array = new List<ProfileEnumValidValuesFormat>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ProfileEnumValidValuesFormat.DeserializeProfileEnumValidValuesFormat(item));
                    }
                    enumValidValues = array;
                    continue;
                }
                if (property.NameEquals("fieldName"u8))
                {
                    fieldName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fieldType"u8))
                {
                    fieldType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isArray"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isArray = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isEnum"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isEnum = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isFlagEnum"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isFlagEnum = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isImage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isImage = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isLocalizedString"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isLocalizedString = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isName = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isRequired"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isRequired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("propertyId"u8))
                {
                    propertyId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("schemaItemPropLink"u8))
                {
                    schemaItemPropLink = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("maxLength"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxLength = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("isAvailableInGraph"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isAvailableInGraph = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("dataSourcePrecedenceRules"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DataSourcePrecedence> array = new List<DataSourcePrecedence>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DataSourcePrecedence.DeserializeDataSourcePrecedence(item));
                    }
                    dataSourcePrecedenceRules = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new PropertyDefinition(arrayValueSeparator.Value, Optional.ToList(enumValidValues), fieldName, fieldType, Optional.ToNullable(isArray), Optional.ToNullable(isEnum), Optional.ToNullable(isFlagEnum), Optional.ToNullable(isImage), Optional.ToNullable(isLocalizedString), Optional.ToNullable(isName), Optional.ToNullable(isRequired), propertyId.Value, schemaItemPropLink.Value, Optional.ToNullable(maxLength), Optional.ToNullable(isAvailableInGraph), Optional.ToList(dataSourcePrecedenceRules), serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(ArrayValueSeparator))
            {
                builder.Append("  arrayValueSeparator:");
                builder.AppendLine($" '{ArrayValueSeparator}'");
            }

            if (Optional.IsCollectionDefined(EnumValidValues))
            {
                builder.Append("  enumValidValues:");
                builder.AppendLine(" [");
                foreach (var item in EnumValidValues)
                {
                    AppendChildObject(builder, item, options, 4);
                }
                builder.AppendLine("  ]");
            }

            if (Optional.IsDefined(FieldName))
            {
                builder.Append("  fieldName:");
                builder.AppendLine($" '{FieldName}'");
            }

            if (Optional.IsDefined(FieldType))
            {
                builder.Append("  fieldType:");
                builder.AppendLine($" '{FieldType}'");
            }

            if (Optional.IsDefined(IsArray))
            {
                builder.Append("  isArray:");
                var boolValue = IsArray.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(IsEnum))
            {
                builder.Append("  isEnum:");
                var boolValue = IsEnum.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(IsFlagEnum))
            {
                builder.Append("  isFlagEnum:");
                var boolValue = IsFlagEnum.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(IsImage))
            {
                builder.Append("  isImage:");
                var boolValue = IsImage.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(IsLocalizedString))
            {
                builder.Append("  isLocalizedString:");
                var boolValue = IsLocalizedString.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(IsName))
            {
                builder.Append("  isName:");
                var boolValue = IsName.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(IsRequired))
            {
                builder.Append("  isRequired:");
                var boolValue = IsRequired.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(PropertyId))
            {
                builder.Append("  propertyId:");
                builder.AppendLine($" '{PropertyId}'");
            }

            if (Optional.IsDefined(SchemaItemPropLink))
            {
                builder.Append("  schemaItemPropLink:");
                builder.AppendLine($" '{SchemaItemPropLink}'");
            }

            if (Optional.IsDefined(MaxLength))
            {
                builder.Append("  maxLength:");
                builder.AppendLine($" '{MaxLength.Value.ToString()}'");
            }

            if (Optional.IsDefined(IsAvailableInGraph))
            {
                builder.Append("  isAvailableInGraph:");
                var boolValue = IsAvailableInGraph.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsCollectionDefined(DataSourcePrecedenceRules))
            {
                builder.Append("  dataSourcePrecedenceRules:");
                builder.AppendLine(" [");
                foreach (var item in DataSourcePrecedenceRules)
                {
                    AppendChildObject(builder, item, options, 4);
                }
                builder.AppendLine("  ]");
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            foreach (var line in lines)
            {
                stringBuilder.AppendLine($"{indent}{line}");
            }
        }

        BinaryData IPersistableModel<PropertyDefinition>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PropertyDefinition>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(PropertyDefinition)} does not support '{options.Format}' format.");
            }
        }

        PropertyDefinition IPersistableModel<PropertyDefinition>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PropertyDefinition>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializePropertyDefinition(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(PropertyDefinition)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<PropertyDefinition>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
