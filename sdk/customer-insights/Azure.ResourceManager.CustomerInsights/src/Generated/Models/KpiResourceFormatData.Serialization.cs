// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.CustomerInsights.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.CustomerInsights
{
    public partial class KpiResourceFormatData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(EntityType))
            {
                writer.WritePropertyName("entityType"u8);
                writer.WriteStringValue(EntityType.Value.ToSerialString());
            }
            if (Optional.IsDefined(EntityTypeName))
            {
                writer.WritePropertyName("entityTypeName"u8);
                writer.WriteStringValue(EntityTypeName);
            }
            if (Optional.IsCollectionDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStartObject();
                foreach (var item in DisplayName)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStartObject();
                foreach (var item in Description)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(CalculationWindow))
            {
                writer.WritePropertyName("calculationWindow"u8);
                writer.WriteStringValue(CalculationWindow.Value.ToSerialString());
            }
            if (Optional.IsDefined(CalculationWindowFieldName))
            {
                writer.WritePropertyName("calculationWindowFieldName"u8);
                writer.WriteStringValue(CalculationWindowFieldName);
            }
            if (Optional.IsDefined(Function))
            {
                writer.WritePropertyName("function"u8);
                writer.WriteStringValue(Function.Value.ToSerialString());
            }
            if (Optional.IsDefined(Expression))
            {
                writer.WritePropertyName("expression"u8);
                writer.WriteStringValue(Expression);
            }
            if (Optional.IsDefined(Unit))
            {
                writer.WritePropertyName("unit"u8);
                writer.WriteStringValue(Unit);
            }
            if (Optional.IsDefined(Filter))
            {
                writer.WritePropertyName("filter"u8);
                writer.WriteStringValue(Filter);
            }
            if (Optional.IsCollectionDefined(GroupBy))
            {
                writer.WritePropertyName("groupBy"u8);
                writer.WriteStartArray();
                foreach (var item in GroupBy)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ThresHolds))
            {
                writer.WritePropertyName("thresHolds"u8);
                writer.WriteObjectValue(ThresHolds);
            }
            if (Optional.IsCollectionDefined(Aliases))
            {
                writer.WritePropertyName("aliases"u8);
                writer.WriteStartArray();
                foreach (var item in Aliases)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Extracts))
            {
                writer.WritePropertyName("extracts"u8);
                writer.WriteStartArray();
                foreach (var item in Extracts)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static KpiResourceFormatData DeserializeKpiResourceFormatData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<EntityType> entityType = default;
            Optional<string> entityTypeName = default;
            Optional<Guid> tenantId = default;
            Optional<string> kpiName = default;
            Optional<IDictionary<string, string>> displayName = default;
            Optional<IDictionary<string, string>> description = default;
            Optional<CalculationWindowType> calculationWindow = default;
            Optional<string> calculationWindowFieldName = default;
            Optional<KpiFunction> function = default;
            Optional<string> expression = default;
            Optional<string> unit = default;
            Optional<string> filter = default;
            Optional<IList<string>> groupBy = default;
            Optional<IReadOnlyList<KpiGroupByMetadata>> groupByMetadata = default;
            Optional<IReadOnlyList<KpiParticipantProfilesMetadata>> participantProfilesMetadata = default;
            Optional<ProvisioningState> provisioningState = default;
            Optional<KpiThresholds> thresHolds = default;
            Optional<IList<KpiAlias>> aliases = default;
            Optional<IList<KpiExtract>> extracts = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("entityType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            entityType = property0.Value.GetString().ToEntityType();
                            continue;
                        }
                        if (property0.NameEquals("entityTypeName"u8))
                        {
                            entityTypeName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("tenantId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            tenantId = property0.Value.GetGuid();
                            continue;
                        }
                        if (property0.NameEquals("kpiName"u8))
                        {
                            kpiName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("displayName"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, string> dictionary = new Dictionary<string, string>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetString());
                            }
                            displayName = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("description"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, string> dictionary = new Dictionary<string, string>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetString());
                            }
                            description = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("calculationWindow"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            calculationWindow = property0.Value.GetString().ToCalculationWindowType();
                            continue;
                        }
                        if (property0.NameEquals("calculationWindowFieldName"u8))
                        {
                            calculationWindowFieldName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("function"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            function = property0.Value.GetString().ToKpiFunction();
                            continue;
                        }
                        if (property0.NameEquals("expression"u8))
                        {
                            expression = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("unit"u8))
                        {
                            unit = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("filter"u8))
                        {
                            filter = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("groupBy"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            groupBy = array;
                            continue;
                        }
                        if (property0.NameEquals("groupByMetadata"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<KpiGroupByMetadata> array = new List<KpiGroupByMetadata>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(KpiGroupByMetadata.DeserializeKpiGroupByMetadata(item));
                            }
                            groupByMetadata = array;
                            continue;
                        }
                        if (property0.NameEquals("participantProfilesMetadata"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<KpiParticipantProfilesMetadata> array = new List<KpiParticipantProfilesMetadata>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(KpiParticipantProfilesMetadata.DeserializeKpiParticipantProfilesMetadata(item));
                            }
                            participantProfilesMetadata = array;
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new ProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("thresHolds"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            thresHolds = KpiThresholds.DeserializeKpiThresholds(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("aliases"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<KpiAlias> array = new List<KpiAlias>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(KpiAlias.DeserializeKpiAlias(item));
                            }
                            aliases = array;
                            continue;
                        }
                        if (property0.NameEquals("extracts"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<KpiExtract> array = new List<KpiExtract>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(KpiExtract.DeserializeKpiExtract(item));
                            }
                            extracts = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new KpiResourceFormatData(id, name, type, systemData.Value, Optional.ToNullable(entityType), entityTypeName.Value, Optional.ToNullable(tenantId), kpiName.Value, Optional.ToDictionary(displayName), Optional.ToDictionary(description), Optional.ToNullable(calculationWindow), calculationWindowFieldName.Value, Optional.ToNullable(function), expression.Value, unit.Value, filter.Value, Optional.ToList(groupBy), Optional.ToList(groupByMetadata), Optional.ToList(participantProfilesMetadata), Optional.ToNullable(provisioningState), thresHolds.Value, Optional.ToList(aliases), Optional.ToList(extracts));
        }
    }
}
