// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CustomerInsights.Models
{
    public partial class ConnectorMappingProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(FolderPath))
            {
                writer.WritePropertyName("folderPath"u8);
                writer.WriteStringValue(FolderPath);
            }
            if (Optional.IsDefined(FileFilter))
            {
                writer.WritePropertyName("fileFilter"u8);
                writer.WriteStringValue(FileFilter);
            }
            if (Optional.IsDefined(HasHeader))
            {
                writer.WritePropertyName("hasHeader"u8);
                writer.WriteBooleanValue(HasHeader.Value);
            }
            writer.WritePropertyName("errorManagement"u8);
            writer.WriteObjectValue(ErrorManagement);
            writer.WritePropertyName("format"u8);
            writer.WriteObjectValue(Format);
            writer.WritePropertyName("availability"u8);
            writer.WriteObjectValue(Availability);
            writer.WritePropertyName("structure"u8);
            writer.WriteStartArray();
            foreach (var item in Structure)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("completeOperation"u8);
            writer.WriteObjectValue(CompleteOperation);
            writer.WriteEndObject();
        }

        internal static ConnectorMappingProperties DeserializeConnectorMappingProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> folderPath = default;
            Optional<string> fileFilter = default;
            Optional<bool> hasHeader = default;
            ConnectorMappingErrorManagement errorManagement = default;
            ConnectorMappingFormat format = default;
            ConnectorMappingAvailability availability = default;
            IList<ConnectorMappingStructure> structure = default;
            ConnectorMappingCompleteOperation completeOperation = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("folderPath"u8))
                {
                    folderPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fileFilter"u8))
                {
                    fileFilter = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hasHeader"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hasHeader = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("errorManagement"u8))
                {
                    errorManagement = ConnectorMappingErrorManagement.DeserializeConnectorMappingErrorManagement(property.Value);
                    continue;
                }
                if (property.NameEquals("format"u8))
                {
                    format = ConnectorMappingFormat.DeserializeConnectorMappingFormat(property.Value);
                    continue;
                }
                if (property.NameEquals("availability"u8))
                {
                    availability = ConnectorMappingAvailability.DeserializeConnectorMappingAvailability(property.Value);
                    continue;
                }
                if (property.NameEquals("structure"u8))
                {
                    List<ConnectorMappingStructure> array = new List<ConnectorMappingStructure>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ConnectorMappingStructure.DeserializeConnectorMappingStructure(item));
                    }
                    structure = array;
                    continue;
                }
                if (property.NameEquals("completeOperation"u8))
                {
                    completeOperation = ConnectorMappingCompleteOperation.DeserializeConnectorMappingCompleteOperation(property.Value);
                    continue;
                }
            }
            return new ConnectorMappingProperties(folderPath.Value, fileFilter.Value, Optional.ToNullable(hasHeader), errorManagement, format, availability, structure, completeOperation);
        }
    }
}
