// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.CustomerInsights.Models
{
    /// <summary> The training results of the prediction. </summary>
    public partial class PredictionTrainingResults
    {
        /// <summary> Initializes a new instance of <see cref="PredictionTrainingResults"/>. </summary>
        internal PredictionTrainingResults()
        {
            CanonicalProfiles = new ChangeTrackingList<CanonicalProfileDefinition>();
        }

        /// <summary> Initializes a new instance of <see cref="PredictionTrainingResults"/>. </summary>
        /// <param name="tenantId"> The hub name. </param>
        /// <param name="scoreName"> Score name. </param>
        /// <param name="predictionDistribution"> Prediction distribution. </param>
        /// <param name="canonicalProfiles"> Canonical profiles. </param>
        /// <param name="primaryProfileInstanceCount"> Instance count of the primary profile. </param>
        internal PredictionTrainingResults(Guid? tenantId, string scoreName, PredictionDistributionDefinition predictionDistribution, IReadOnlyList<CanonicalProfileDefinition> canonicalProfiles, long? primaryProfileInstanceCount)
        {
            TenantId = tenantId;
            ScoreName = scoreName;
            PredictionDistribution = predictionDistribution;
            CanonicalProfiles = canonicalProfiles;
            PrimaryProfileInstanceCount = primaryProfileInstanceCount;
        }

        /// <summary> The hub name. </summary>
        public Guid? TenantId { get; }
        /// <summary> Score name. </summary>
        public string ScoreName { get; }
        /// <summary> Prediction distribution. </summary>
        public PredictionDistributionDefinition PredictionDistribution { get; }
        /// <summary> Canonical profiles. </summary>
        public IReadOnlyList<CanonicalProfileDefinition> CanonicalProfiles { get; }
        /// <summary> Instance count of the primary profile. </summary>
        public long? PrimaryProfileInstanceCount { get; }
    }
}
