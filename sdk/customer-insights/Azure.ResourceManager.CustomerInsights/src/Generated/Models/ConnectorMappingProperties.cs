// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.ResourceManager.CustomerInsights.Models
{
    /// <summary> The connector mapping properties. </summary>
    public partial class ConnectorMappingProperties
    {
        /// <summary> Initializes a new instance of <see cref="ConnectorMappingProperties"/>. </summary>
        /// <param name="errorManagement"> The error management setting for the mapping. </param>
        /// <param name="format"> The format of mapping property. </param>
        /// <param name="availability"> The availability of mapping property. </param>
        /// <param name="structure"> Ingestion mapping information at property level. </param>
        /// <param name="completeOperation"> The operation after import is done. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="errorManagement"/>, <paramref name="format"/>, <paramref name="availability"/>, <paramref name="structure"/> or <paramref name="completeOperation"/> is null. </exception>
        public ConnectorMappingProperties(ConnectorMappingErrorManagement errorManagement, ConnectorMappingFormat format, ConnectorMappingAvailability availability, IEnumerable<ConnectorMappingStructure> structure, ConnectorMappingCompleteOperation completeOperation)
        {
            Argument.AssertNotNull(errorManagement, nameof(errorManagement));
            Argument.AssertNotNull(format, nameof(format));
            Argument.AssertNotNull(availability, nameof(availability));
            Argument.AssertNotNull(structure, nameof(structure));
            Argument.AssertNotNull(completeOperation, nameof(completeOperation));

            ErrorManagement = errorManagement;
            Format = format;
            Availability = availability;
            Structure = structure.ToList();
            CompleteOperation = completeOperation;
        }

        /// <summary> Initializes a new instance of <see cref="ConnectorMappingProperties"/>. </summary>
        /// <param name="folderPath"> The folder path for the mapping. </param>
        /// <param name="fileFilter"> The file filter for the mapping. </param>
        /// <param name="hasHeader"> If the file contains a header or not. </param>
        /// <param name="errorManagement"> The error management setting for the mapping. </param>
        /// <param name="format"> The format of mapping property. </param>
        /// <param name="availability"> The availability of mapping property. </param>
        /// <param name="structure"> Ingestion mapping information at property level. </param>
        /// <param name="completeOperation"> The operation after import is done. </param>
        internal ConnectorMappingProperties(string folderPath, string fileFilter, bool? hasHeader, ConnectorMappingErrorManagement errorManagement, ConnectorMappingFormat format, ConnectorMappingAvailability availability, IList<ConnectorMappingStructure> structure, ConnectorMappingCompleteOperation completeOperation)
        {
            FolderPath = folderPath;
            FileFilter = fileFilter;
            HasHeader = hasHeader;
            ErrorManagement = errorManagement;
            Format = format;
            Availability = availability;
            Structure = structure;
            CompleteOperation = completeOperation;
        }

        /// <summary> The folder path for the mapping. </summary>
        public string FolderPath { get; set; }
        /// <summary> The file filter for the mapping. </summary>
        public string FileFilter { get; set; }
        /// <summary> If the file contains a header or not. </summary>
        public bool? HasHeader { get; set; }
        /// <summary> The error management setting for the mapping. </summary>
        public ConnectorMappingErrorManagement ErrorManagement { get; set; }
        /// <summary> The format of mapping property. </summary>
        public ConnectorMappingFormat Format { get; set; }
        /// <summary> The availability of mapping property. </summary>
        public ConnectorMappingAvailability Availability { get; set; }
        /// <summary> Ingestion mapping information at property level. </summary>
        public IList<ConnectorMappingStructure> Structure { get; }
        /// <summary> The operation after import is done. </summary>
        public ConnectorMappingCompleteOperation CompleteOperation { get; set; }
    }
}
