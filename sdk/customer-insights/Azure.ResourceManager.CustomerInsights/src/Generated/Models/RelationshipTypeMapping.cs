// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.ResourceManager.CustomerInsights.Models
{
    /// <summary> Maps fields in Profile to their corresponding StrongIds in Related Profile. </summary>
    public partial class RelationshipTypeMapping
    {
        /// <summary> Initializes a new instance of <see cref="RelationshipTypeMapping"/>. </summary>
        /// <param name="fieldMappings"> Maps a profile property with the StrongId of related profile. This is an array to support StrongIds that are composite key as well. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fieldMappings"/> is null. </exception>
        public RelationshipTypeMapping(IEnumerable<RelationshipTypeFieldMapping> fieldMappings)
        {
            Argument.AssertNotNull(fieldMappings, nameof(fieldMappings));

            FieldMappings = fieldMappings.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="RelationshipTypeMapping"/>. </summary>
        /// <param name="fieldMappings"> Maps a profile property with the StrongId of related profile. This is an array to support StrongIds that are composite key as well. </param>
        internal RelationshipTypeMapping(IList<RelationshipTypeFieldMapping> fieldMappings)
        {
            FieldMappings = fieldMappings;
        }

        /// <summary> Maps a profile property with the StrongId of related profile. This is an array to support StrongIds that are composite key as well. </summary>
        public IList<RelationshipTypeFieldMapping> FieldMappings { get; }
    }
}
