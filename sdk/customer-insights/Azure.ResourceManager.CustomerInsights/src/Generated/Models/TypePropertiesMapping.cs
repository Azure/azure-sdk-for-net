// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.CustomerInsights.Models
{
    /// <summary> Metadata for a Link's property mapping. </summary>
    public partial class TypePropertiesMapping
    {
        private Dictionary<string, BinaryData> _rawData;

        /// <summary> Initializes a new instance of <see cref="TypePropertiesMapping"/>. </summary>
        /// <param name="sourcePropertyName"> Property name on the source Entity Type. </param>
        /// <param name="targetPropertyName"> Property name on the target Entity Type. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sourcePropertyName"/> or <paramref name="targetPropertyName"/> is null. </exception>
        public TypePropertiesMapping(string sourcePropertyName, string targetPropertyName)
        {
            Argument.AssertNotNull(sourcePropertyName, nameof(sourcePropertyName));
            Argument.AssertNotNull(targetPropertyName, nameof(targetPropertyName));

            SourcePropertyName = sourcePropertyName;
            TargetPropertyName = targetPropertyName;
        }

        /// <summary> Initializes a new instance of <see cref="TypePropertiesMapping"/>. </summary>
        /// <param name="sourcePropertyName"> Property name on the source Entity Type. </param>
        /// <param name="targetPropertyName"> Property name on the target Entity Type. </param>
        /// <param name="linkType"> Link type. </param>
        /// <param name="rawData"> Keeps track of any properties unknown to the library. </param>
        internal TypePropertiesMapping(string sourcePropertyName, string targetPropertyName, LinkType? linkType, Dictionary<string, BinaryData> rawData)
        {
            SourcePropertyName = sourcePropertyName;
            TargetPropertyName = targetPropertyName;
            LinkType = linkType;
            _rawData = rawData;
        }

        /// <summary> Initializes a new instance of <see cref="TypePropertiesMapping"/> for deserialization. </summary>
        internal TypePropertiesMapping()
        {
        }

        /// <summary> Property name on the source Entity Type. </summary>
        public string SourcePropertyName { get; set; }
        /// <summary> Property name on the target Entity Type. </summary>
        public string TargetPropertyName { get; set; }
        /// <summary> Link type. </summary>
        public LinkType? LinkType { get; set; }
    }
}
