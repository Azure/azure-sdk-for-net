// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Dell.Storage.Models;
using Azure.ResourceManager.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Dell.Storage.Samples
{
    public partial class Sample_DellFileSystemResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_FileSystemsGetMaximumSetGen()
        {
            // Generated from example definition: 2025-03-21-preview/FileSystems_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "FileSystemResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DellFileSystemResource created on azure
            // for more information of creating DellFileSystemResource, please refer to the document of DellFileSystemResource
            string subscriptionId = "4B6E265D-57CF-4A9D-8B35-3CC68ED9D208";
            string resourceGroupName = "rgDell";
            string filesystemName = "abcd";
            ResourceIdentifier dellFileSystemResourceId = DellFileSystemResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, filesystemName);
            DellFileSystemResource dellFileSystem = client.GetDellFileSystemResource(dellFileSystemResourceId);

            // invoke the operation
            DellFileSystemResource result = await dellFileSystem.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DellFileSystemData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_FileSystemsGetMinimumSetGen()
        {
            // Generated from example definition: 2025-03-21-preview/FileSystems_Get_MinimumSet_Gen.json
            // this example is just showing the usage of "FileSystemResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DellFileSystemResource created on azure
            // for more information of creating DellFileSystemResource, please refer to the document of DellFileSystemResource
            string subscriptionId = "BF7E7352-2FE4-4163-9CF7-5FF8EC2E9B92";
            string resourceGroupName = "rgDell";
            string filesystemName = "abcd";
            ResourceIdentifier dellFileSystemResourceId = DellFileSystemResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, filesystemName);
            DellFileSystemResource dellFileSystem = client.GetDellFileSystemResource(dellFileSystemResourceId);

            // invoke the operation
            DellFileSystemResource result = await dellFileSystem.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DellFileSystemData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_FileSystemsDeleteMaximumSetGen()
        {
            // Generated from example definition: 2025-03-21-preview/FileSystems_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "FileSystemResource_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DellFileSystemResource created on azure
            // for more information of creating DellFileSystemResource, please refer to the document of DellFileSystemResource
            string subscriptionId = "4B6E265D-57CF-4A9D-8B35-3CC68ED9D208";
            string resourceGroupName = "rgDell";
            string filesystemName = "abcd";
            ResourceIdentifier dellFileSystemResourceId = DellFileSystemResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, filesystemName);
            DellFileSystemResource dellFileSystem = client.GetDellFileSystemResource(dellFileSystemResourceId);

            // invoke the operation
            await dellFileSystem.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_FileSystemsDeleteMinimumSetGen()
        {
            // Generated from example definition: 2025-03-21-preview/FileSystems_Delete_MinimumSet_Gen.json
            // this example is just showing the usage of "FileSystemResource_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DellFileSystemResource created on azure
            // for more information of creating DellFileSystemResource, please refer to the document of DellFileSystemResource
            string subscriptionId = "BF7E7352-2FE4-4163-9CF7-5FF8EC2E9B92";
            string resourceGroupName = "rgDell";
            string filesystemName = "abcd";
            ResourceIdentifier dellFileSystemResourceId = DellFileSystemResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, filesystemName);
            DellFileSystemResource dellFileSystem = client.GetDellFileSystemResource(dellFileSystemResourceId);

            // invoke the operation
            await dellFileSystem.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_FileSystemsUpdateMaximumSetGen()
        {
            // Generated from example definition: 2025-03-21-preview/FileSystems_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "FileSystemResource_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DellFileSystemResource created on azure
            // for more information of creating DellFileSystemResource, please refer to the document of DellFileSystemResource
            string subscriptionId = "4B6E265D-57CF-4A9D-8B35-3CC68ED9D208";
            string resourceGroupName = "rgDell";
            string filesystemName = "abcd";
            ResourceIdentifier dellFileSystemResourceId = DellFileSystemResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, filesystemName);
            DellFileSystemResource dellFileSystem = client.GetDellFileSystemResource(dellFileSystemResourceId);

            // invoke the operation
            DellFileSystemPatch patch = new DellFileSystemPatch
            {
                Identity = new ManagedServiceIdentity("SystemAssigned,UserAssigned")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("key7645")] = new UserAssignedIdentity()
},
                },
                Tags =
{
["key6099"] = "ursbxlphfcguvntuevleacwq"
},
                Properties = new DellFileSystemPatchProperties
                {
                    DelegatedSubnetId = new ResourceIdentifier("bfpuabdz"),
                    Capacity = new DellFileSystemCapacity
                    {
                        Current = "5",
                    },
                    Encryption = new DellFileSystemEncryptionPatchProperties
                    {
                        EncryptionType = DellFileSystemEncryptionType.CustomerManagedKeysCmk,
                        KeyUri = "https://contoso.com/keyurl/keyVersion",
                        EncryptionIdentityProperties = new DellFileSystemEncryptionIdentityPatchProperties
                        {
                            IdentityType = DellFileSystemEncryptionIdentityType.UserAssigned,
                            IdentityResourceId = new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}"),
                        },
                    },
                },
            };
            DellFileSystemResource result = await dellFileSystem.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DellFileSystemData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_FileSystemsUpdateMinimumSetGen()
        {
            // Generated from example definition: 2025-03-21-preview/FileSystems_Update_MinimumSet_Gen.json
            // this example is just showing the usage of "FileSystemResource_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DellFileSystemResource created on azure
            // for more information of creating DellFileSystemResource, please refer to the document of DellFileSystemResource
            string subscriptionId = "BF7E7352-2FE4-4163-9CF7-5FF8EC2E9B92";
            string resourceGroupName = "rgDell";
            string filesystemName = "abcd";
            ResourceIdentifier dellFileSystemResourceId = DellFileSystemResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, filesystemName);
            DellFileSystemResource dellFileSystem = client.GetDellFileSystemResource(dellFileSystemResourceId);

            // invoke the operation
            DellFileSystemPatch patch = new DellFileSystemPatch
            {
                Properties = new DellFileSystemPatchProperties
                {
                    DelegatedSubnetId = new ResourceIdentifier("uqfvajvyltgmqvdnxhbrfqbpuey"),
                    Capacity = new DellFileSystemCapacity
                    {
                        Current = "5",
                    },
                },
            };
            DellFileSystemResource result = await dellFileSystem.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DellFileSystemData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
