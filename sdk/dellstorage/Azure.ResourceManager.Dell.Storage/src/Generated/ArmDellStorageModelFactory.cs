// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Dell.Storage;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Dell.Storage.Models
{
    /// <summary> A factory class for creating instances of the models for mocking. </summary>
    public static partial class ArmDellStorageModelFactory
    {

        /// <summary> Concrete tracked resource types can be created by aliasing this type using a specific property type. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <returns> A new <see cref="Storage.DellFileSystemData"/> instance for mocking. </returns>
        public static DellFileSystemData DellFileSystemData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, IDictionary<string, string> tags = default, AzureLocation location = default, DellFileSystemProperties properties = default, ManagedServiceIdentity identity = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new DellFileSystemData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                tags,
                location,
                properties,
                identity);
        }

        /// <param name="capacity"> Capacity for Dell Filesystem, Will be received as part of Job Status. </param>
        /// <param name="marketplace"> Marketplace details. </param>
        /// <param name="provisioningState"> Provisioning State of the resource. </param>
        /// <param name="delegatedSubnetId"> Delegated subnet id for Vnet injection. </param>
        /// <param name="delegatedSubnetCidr"> Domain range for the delegated subnet. </param>
        /// <param name="userEmail"> User Email. </param>
        /// <param name="fileSystemId"> File system Id of the resource. </param>
        /// <param name="smartConnectFqdn"> Smart Connect FQDN of the resource. </param>
        /// <param name="oneFsUri"> OneFS url. </param>
        /// <param name="dellReferenceNumber"> DellReferenceNumber of the resource. </param>
        /// <param name="encryption"> EncryptionProperties of the resource. </param>
        /// <returns> A new <see cref="Models.DellFileSystemProperties"/> instance for mocking. </returns>
        public static DellFileSystemProperties DellFileSystemProperties(DellFileSystemCapacity capacity = default, DellFileSystemMarketplaceDetails marketplace = default, DellFileSystemProvisioningState? provisioningState = default, ResourceIdentifier delegatedSubnetId = default, string delegatedSubnetCidr = default, string userEmail = default, string fileSystemId = default, string smartConnectFqdn = default, Uri oneFsUri = default, string dellReferenceNumber = default, DellFileSystemEncryptionProperties encryption = default)
        {
            return new DellFileSystemProperties(
                capacity,
                marketplace,
                provisioningState,
                delegatedSubnetId,
                delegatedSubnetCidr,
                userEmail is null ? default : new DellFileSystemUserDetails(userEmail, new Dictionary<string, BinaryData>()),
                fileSystemId,
                smartConnectFqdn,
                oneFsUri,
                dellReferenceNumber,
                encryption,
                additionalBinaryDataProperties: null);
        }

        /// <summary> MarketplaceDetails of Dell FileSystem resource. </summary>
        /// <param name="marketplaceSubscriptionId"> Marketplace Subscription Id. </param>
        /// <param name="planId"> Plan Id. </param>
        /// <param name="offerId"> Offer Id. </param>
        /// <param name="publisherId"> Publisher Id. </param>
        /// <param name="privateOfferId"> Private Offer Id. </param>
        /// <param name="planName"> Plan Name. </param>
        /// <param name="marketplaceSubscriptionStatus"> Marketplace subscription status. </param>
        /// <param name="endDate"> End Date of the subscription. </param>
        /// <param name="termUnit"> Term Unit. </param>
        /// <returns> A new <see cref="Models.DellFileSystemMarketplaceDetails"/> instance for mocking. </returns>
        public static DellFileSystemMarketplaceDetails DellFileSystemMarketplaceDetails(string marketplaceSubscriptionId = default, string planId = default, string offerId = default, string publisherId = default, string privateOfferId = default, string planName = default, DellFileSystemMarketplaceSubscriptionStatus? marketplaceSubscriptionStatus = default, string endDate = default, string termUnit = default)
        {
            return new DellFileSystemMarketplaceDetails(
                marketplaceSubscriptionId,
                planId,
                offerId,
                publisherId,
                privateOfferId,
                planName,
                marketplaceSubscriptionStatus,
                endDate,
                termUnit,
                additionalBinaryDataProperties: null);
        }

        /// <summary> The type used for update operations of the FileSystemResource. </summary>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="properties"> The updatable properties of the FileSystemResource. </param>
        /// <returns> A new <see cref="Models.DellFileSystemPatch"/> instance for mocking. </returns>
        public static DellFileSystemPatch DellFileSystemPatch(ManagedServiceIdentity identity = default, IDictionary<string, string> tags = default, FileSystemResourceUpdateProperties properties = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new DellFileSystemPatch(identity, tags, properties, additionalBinaryDataProperties: null);
        }
    }
}
