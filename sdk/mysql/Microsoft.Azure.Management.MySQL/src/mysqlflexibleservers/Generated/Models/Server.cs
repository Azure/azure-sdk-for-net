// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MySQL.FlexibleServers.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents a server.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Server : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the Server class.
        /// </summary>
        public Server()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Server class.
        /// </summary>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="sku">The SKU (pricing tier) of the server.</param>
        /// <param name="administratorLogin">The administrator's login name of
        /// a server. Can only be specified when the server is being created
        /// (and is required for creation).</param>
        /// <param name="administratorLoginPassword">The password of the
        /// administrator login (required for server creation).</param>
        /// <param name="version">Server version. Possible values include:
        /// '5.7', '8.0.21'</param>
        /// <param name="availabilityZone">availability Zone information of the
        /// server.</param>
        /// <param name="createMode">The mode to create a new MySQL server.
        /// Possible values include: 'Default', 'PointInTimeRestore',
        /// 'Replica', 'GeoRestore'</param>
        /// <param name="sourceServerResourceId">The source MySQL server
        /// id.</param>
        /// <param name="restorePointInTime">Restore point creation time
        /// (ISO8601 format), specifying the time to restore from.</param>
        /// <param name="replicationRole">The replication role. Possible values
        /// include: 'None', 'Source', 'Replica'</param>
        /// <param name="replicaCapacity">The maximum number of replicas that a
        /// primary server can have.</param>
        /// <param name="state">The state of a server. Possible values include:
        /// 'Ready', 'Dropping', 'Disabled', 'Starting', 'Stopping', 'Stopped',
        /// 'Updating'</param>
        /// <param name="fullyQualifiedDomainName">The fully qualified domain
        /// name of a server.</param>
        /// <param name="storage">Storage related properties of a
        /// server.</param>
        /// <param name="backup">Backup related properties of a server.</param>
        /// <param name="highAvailability">High availability related properties
        /// of a server.</param>
        /// <param name="network">Network related properties of a
        /// server.</param>
        /// <param name="maintenanceWindow">Maintenance window of a
        /// server.</param>
        /// <param name="systemData">The system metadata relating to this
        /// resource.</param>
        public Server(string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), Sku sku = default(Sku), string administratorLogin = default(string), string administratorLoginPassword = default(string), string version = default(string), string availabilityZone = default(string), string createMode = default(string), string sourceServerResourceId = default(string), System.DateTime? restorePointInTime = default(System.DateTime?), string replicationRole = default(string), int? replicaCapacity = default(int?), string state = default(string), string fullyQualifiedDomainName = default(string), Storage storage = default(Storage), Backup backup = default(Backup), HighAvailability highAvailability = default(HighAvailability), Network network = default(Network), MaintenanceWindow maintenanceWindow = default(MaintenanceWindow), SystemData systemData = default(SystemData))
            : base(location, id, name, type, tags)
        {
            Sku = sku;
            AdministratorLogin = administratorLogin;
            AdministratorLoginPassword = administratorLoginPassword;
            Version = version;
            AvailabilityZone = availabilityZone;
            CreateMode = createMode;
            SourceServerResourceId = sourceServerResourceId;
            RestorePointInTime = restorePointInTime;
            ReplicationRole = replicationRole;
            ReplicaCapacity = replicaCapacity;
            State = state;
            FullyQualifiedDomainName = fullyQualifiedDomainName;
            Storage = storage;
            Backup = backup;
            HighAvailability = highAvailability;
            Network = network;
            MaintenanceWindow = maintenanceWindow;
            SystemData = systemData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the SKU (pricing tier) of the server.
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public Sku Sku { get; set; }

        /// <summary>
        /// Gets or sets the administrator's login name of a server. Can only
        /// be specified when the server is being created (and is required for
        /// creation).
        /// </summary>
        [JsonProperty(PropertyName = "properties.administratorLogin")]
        public string AdministratorLogin { get; set; }

        /// <summary>
        /// Gets or sets the password of the administrator login (required for
        /// server creation).
        /// </summary>
        [JsonProperty(PropertyName = "properties.administratorLoginPassword")]
        public string AdministratorLoginPassword { get; set; }

        /// <summary>
        /// Gets or sets server version. Possible values include: '5.7',
        /// '8.0.21'
        /// </summary>
        [JsonProperty(PropertyName = "properties.version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets availability Zone information of the server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.availabilityZone")]
        public string AvailabilityZone { get; set; }

        /// <summary>
        /// Gets or sets the mode to create a new MySQL server. Possible values
        /// include: 'Default', 'PointInTimeRestore', 'Replica', 'GeoRestore'
        /// </summary>
        [JsonProperty(PropertyName = "properties.createMode")]
        public string CreateMode { get; set; }

        /// <summary>
        /// Gets or sets the source MySQL server id.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceServerResourceId")]
        public string SourceServerResourceId { get; set; }

        /// <summary>
        /// Gets or sets restore point creation time (ISO8601 format),
        /// specifying the time to restore from.
        /// </summary>
        [JsonProperty(PropertyName = "properties.restorePointInTime")]
        public System.DateTime? RestorePointInTime { get; set; }

        /// <summary>
        /// Gets or sets the replication role. Possible values include: 'None',
        /// 'Source', 'Replica'
        /// </summary>
        [JsonProperty(PropertyName = "properties.replicationRole")]
        public string ReplicationRole { get; set; }

        /// <summary>
        /// Gets the maximum number of replicas that a primary server can have.
        /// </summary>
        [JsonProperty(PropertyName = "properties.replicaCapacity")]
        public int? ReplicaCapacity { get; private set; }

        /// <summary>
        /// Gets the state of a server. Possible values include: 'Ready',
        /// 'Dropping', 'Disabled', 'Starting', 'Stopping', 'Stopped',
        /// 'Updating'
        /// </summary>
        [JsonProperty(PropertyName = "properties.state")]
        public string State { get; private set; }

        /// <summary>
        /// Gets the fully qualified domain name of a server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.fullyQualifiedDomainName")]
        public string FullyQualifiedDomainName { get; private set; }

        /// <summary>
        /// Gets or sets storage related properties of a server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storage")]
        public Storage Storage { get; set; }

        /// <summary>
        /// Gets or sets backup related properties of a server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.backup")]
        public Backup Backup { get; set; }

        /// <summary>
        /// Gets or sets high availability related properties of a server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.highAvailability")]
        public HighAvailability HighAvailability { get; set; }

        /// <summary>
        /// Gets or sets network related properties of a server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.network")]
        public Network Network { get; set; }

        /// <summary>
        /// Gets or sets maintenance window of a server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.maintenanceWindow")]
        public MaintenanceWindow MaintenanceWindow { get; set; }

        /// <summary>
        /// Gets the system metadata relating to this resource.
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Sku != null)
            {
                Sku.Validate();
            }
            if (ReplicaCapacity < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ReplicaCapacity", 0);
            }
        }
    }
}
