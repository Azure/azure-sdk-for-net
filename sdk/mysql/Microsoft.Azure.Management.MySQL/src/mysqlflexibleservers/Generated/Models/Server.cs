// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MySQL.FlexibleServers.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents a server.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Server : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the Server class.
        /// </summary>
        public Server()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Server class.
        /// </summary>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        /// <param name="id">Fully qualified resource Id for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. Ex-
        /// Microsoft.Compute/virtualMachines or
        /// Microsoft.Storage/storageAccounts.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="identity">The Azure Active Directory identity of the
        /// server.</param>
        /// <param name="sku">The SKU (pricing tier) of the server.</param>
        /// <param name="administratorLogin">The administrator's login name of
        /// a server. Can only be specified when the server is being created
        /// (and is required for creation).</param>
        /// <param name="administratorLoginPassword">The password of the
        /// administrator login (required for server creation).</param>
        /// <param name="version">Server version. Possible values include:
        /// '5.7'</param>
        /// <param name="sslEnforcement">Enable ssl enforcement or not when
        /// connect to server. Possible values include: 'Enabled',
        /// 'Disabled'</param>
        /// <param name="infrastructureEncryption">Status showing whether the
        /// server enabled infrastructure encryption. Possible values include:
        /// 'Enabled', 'Disabled'</param>
        /// <param name="state">The state of a server. Possible values include:
        /// 'Ready', 'Dropping', 'Disabled', 'Starting', 'Stopping', 'Stopped',
        /// 'Updating'</param>
        /// <param name="haState">The state of a HA server. Possible values
        /// include: 'NotEnabled', 'CreatingStandby', 'ReplicatingData',
        /// 'FailingOver', 'Healthy', 'RemovingStandby'</param>
        /// <param name="haEnabled">Enable HA or not for a server. Possible
        /// values include: 'Enabled', 'Disabled'</param>
        /// <param name="fullyQualifiedDomainName">The fully qualified domain
        /// name of a server.</param>
        /// <param name="earliestRestoreDate">Earliest restore point creation
        /// time (ISO8601 format)</param>
        /// <param name="storageProfile">Storage profile of a server.</param>
        /// <param name="replicationRole">The replication role.</param>
        /// <param name="replicaCapacity">The maximum number of replicas that a
        /// primary server can have.</param>
        /// <param name="publicNetworkAccess">Whether or not public network
        /// access is allowed for this server. Value is optional but if passed
        /// in, must be 'Enabled' or 'Disabled'. Possible values include:
        /// 'Enabled', 'Disabled'</param>
        /// <param name="maintenanceWindow">Maintenance window of a
        /// server.</param>
        /// <param name="sourceServerId">The source MySQL server id.</param>
        /// <param name="restorePointInTime">Restore point creation time
        /// (ISO8601 format), specifying the time to restore from.</param>
        /// <param name="availabilityZone">availability Zone information of the
        /// server.</param>
        /// <param name="standbyAvailabilityZone">availability Zone information
        /// of the server.</param>
        /// <param name="byokEnforcement">Status showing whether the data
        /// encryption is enabled with customer-managed keys.</param>
        /// <param name="delegatedSubnetArguments">Delegated subnet
        /// arguments.</param>
        /// <param name="createMode">The mode to create a new MySQL server.
        /// Possible values include: 'Default', 'PointInTimeRestore',
        /// 'Replica'</param>
        /// <param name="serverTags">Application-specific metadata in the form
        /// of key-value pairs.</param>
        public Server(string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), Identity identity = default(Identity), Sku sku = default(Sku), string administratorLogin = default(string), string administratorLoginPassword = default(string), string version = default(string), string sslEnforcement = default(string), string infrastructureEncryption = default(string), string state = default(string), string haState = default(string), string haEnabled = default(string), string fullyQualifiedDomainName = default(string), System.DateTime? earliestRestoreDate = default(System.DateTime?), StorageProfile storageProfile = default(StorageProfile), string replicationRole = default(string), int? replicaCapacity = default(int?), string publicNetworkAccess = default(string), MaintenanceWindow maintenanceWindow = default(MaintenanceWindow), string sourceServerId = default(string), System.DateTime? restorePointInTime = default(System.DateTime?), string availabilityZone = default(string), string standbyAvailabilityZone = default(string), string byokEnforcement = default(string), DelegatedSubnetArguments delegatedSubnetArguments = default(DelegatedSubnetArguments), string createMode = default(string), IDictionary<string, string> serverTags = default(IDictionary<string, string>))
            : base(location, id, name, type, tags)
        {
            Identity = identity;
            Sku = sku;
            AdministratorLogin = administratorLogin;
            AdministratorLoginPassword = administratorLoginPassword;
            Version = version;
            SslEnforcement = sslEnforcement;
            InfrastructureEncryption = infrastructureEncryption;
            State = state;
            HaState = haState;
            HaEnabled = haEnabled;
            FullyQualifiedDomainName = fullyQualifiedDomainName;
            EarliestRestoreDate = earliestRestoreDate;
            StorageProfile = storageProfile;
            ReplicationRole = replicationRole;
            ReplicaCapacity = replicaCapacity;
            PublicNetworkAccess = publicNetworkAccess;
            MaintenanceWindow = maintenanceWindow;
            SourceServerId = sourceServerId;
            RestorePointInTime = restorePointInTime;
            AvailabilityZone = availabilityZone;
            StandbyAvailabilityZone = standbyAvailabilityZone;
            ByokEnforcement = byokEnforcement;
            DelegatedSubnetArguments = delegatedSubnetArguments;
            CreateMode = createMode;
            ServerTags = serverTags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Azure Active Directory identity of the server.
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public Identity Identity { get; set; }

        /// <summary>
        /// Gets or sets the SKU (pricing tier) of the server.
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public Sku Sku { get; set; }

        /// <summary>
        /// Gets or sets the administrator's login name of a server. Can only
        /// be specified when the server is being created (and is required for
        /// creation).
        /// </summary>
        [JsonProperty(PropertyName = "properties.administratorLogin")]
        public string AdministratorLogin { get; set; }

        /// <summary>
        /// Gets or sets the password of the administrator login (required for
        /// server creation).
        /// </summary>
        [JsonProperty(PropertyName = "properties.administratorLoginPassword")]
        public string AdministratorLoginPassword { get; set; }

        /// <summary>
        /// Gets or sets server version. Possible values include: '5.7'
        /// </summary>
        [JsonProperty(PropertyName = "properties.version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets enable ssl enforcement or not when connect to server.
        /// Possible values include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.sslEnforcement")]
        public string SslEnforcement { get; set; }

        /// <summary>
        /// Gets or sets status showing whether the server enabled
        /// infrastructure encryption. Possible values include: 'Enabled',
        /// 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.infrastructureEncryption")]
        public string InfrastructureEncryption { get; set; }

        /// <summary>
        /// Gets the state of a server. Possible values include: 'Ready',
        /// 'Dropping', 'Disabled', 'Starting', 'Stopping', 'Stopped',
        /// 'Updating'
        /// </summary>
        [JsonProperty(PropertyName = "properties.state")]
        public string State { get; private set; }

        /// <summary>
        /// Gets the state of a HA server. Possible values include:
        /// 'NotEnabled', 'CreatingStandby', 'ReplicatingData', 'FailingOver',
        /// 'Healthy', 'RemovingStandby'
        /// </summary>
        [JsonProperty(PropertyName = "properties.haState")]
        public string HaState { get; private set; }

        /// <summary>
        /// Gets or sets enable HA or not for a server. Possible values
        /// include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.haEnabled")]
        public string HaEnabled { get; set; }

        /// <summary>
        /// Gets the fully qualified domain name of a server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.fullyQualifiedDomainName")]
        public string FullyQualifiedDomainName { get; private set; }

        /// <summary>
        /// Gets earliest restore point creation time (ISO8601 format)
        /// </summary>
        [JsonProperty(PropertyName = "properties.earliestRestoreDate")]
        public System.DateTime? EarliestRestoreDate { get; private set; }

        /// <summary>
        /// Gets or sets storage profile of a server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageProfile")]
        public StorageProfile StorageProfile { get; set; }

        /// <summary>
        /// Gets or sets the replication role.
        /// </summary>
        [JsonProperty(PropertyName = "properties.replicationRole")]
        public string ReplicationRole { get; set; }

        /// <summary>
        /// Gets the maximum number of replicas that a primary server can have.
        /// </summary>
        [JsonProperty(PropertyName = "properties.replicaCapacity")]
        public int? ReplicaCapacity { get; private set; }

        /// <summary>
        /// Gets whether or not public network access is allowed for this
        /// server. Value is optional but if passed in, must be 'Enabled' or
        /// 'Disabled'. Possible values include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.publicNetworkAccess")]
        public string PublicNetworkAccess { get; private set; }

        /// <summary>
        /// Gets or sets maintenance window of a server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.maintenanceWindow")]
        public MaintenanceWindow MaintenanceWindow { get; set; }

        /// <summary>
        /// Gets or sets the source MySQL server id.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceServerId")]
        public string SourceServerId { get; set; }

        /// <summary>
        /// Gets or sets restore point creation time (ISO8601 format),
        /// specifying the time to restore from.
        /// </summary>
        [JsonProperty(PropertyName = "properties.restorePointInTime")]
        public System.DateTime? RestorePointInTime { get; set; }

        /// <summary>
        /// Gets or sets availability Zone information of the server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.availabilityZone")]
        public string AvailabilityZone { get; set; }

        /// <summary>
        /// Gets availability Zone information of the server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.standbyAvailabilityZone")]
        public string StandbyAvailabilityZone { get; private set; }

        /// <summary>
        /// Gets status showing whether the data encryption is enabled with
        /// customer-managed keys.
        /// </summary>
        [JsonProperty(PropertyName = "properties.byokEnforcement")]
        public string ByokEnforcement { get; private set; }

        /// <summary>
        /// Gets or sets delegated subnet arguments.
        /// </summary>
        [JsonProperty(PropertyName = "properties.delegatedSubnetArguments")]
        public DelegatedSubnetArguments DelegatedSubnetArguments { get; set; }

        /// <summary>
        /// Gets or sets the mode to create a new MySQL server. Possible values
        /// include: 'Default', 'PointInTimeRestore', 'Replica'
        /// </summary>
        [JsonProperty(PropertyName = "properties.createMode")]
        public string CreateMode { get; set; }

        /// <summary>
        /// Gets or sets application-specific metadata in the form of key-value
        /// pairs.
        /// </summary>
        [JsonProperty(PropertyName = "properties.tags")]
        public IDictionary<string, string> ServerTags { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Sku != null)
            {
                Sku.Validate();
            }
            if (ReplicaCapacity < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ReplicaCapacity", 0);
            }
        }
    }
}
