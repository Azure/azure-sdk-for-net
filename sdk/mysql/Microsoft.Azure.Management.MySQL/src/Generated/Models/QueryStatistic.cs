// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MySQL.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents a Query Statistic.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class QueryStatistic : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the QueryStatistic class.
        /// </summary>
        public QueryStatistic()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the QueryStatistic class.
        /// </summary>
        /// <param name="id">Fully qualified resource Id for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. Ex-
        /// Microsoft.Compute/virtualMachines or
        /// Microsoft.Storage/storageAccounts.</param>
        /// <param name="queryId">Database query identifier.</param>
        /// <param name="startTime">Observation start time.</param>
        /// <param name="endTime">Observation end time.</param>
        /// <param name="aggregationFunction">Aggregation function
        /// name.</param>
        /// <param name="databaseNames">The list of database names.</param>
        /// <param name="queryExecutionCount">Number of query executions in
        /// this time interval.</param>
        /// <param name="metricName">Metric name.</param>
        /// <param name="metricDisplayName">Metric display name.</param>
        /// <param name="metricValue">Metric value.</param>
        /// <param name="metricValueUnit">Metric value unit.</param>
        public QueryStatistic(string id = default(string), string name = default(string), string type = default(string), string queryId = default(string), System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string aggregationFunction = default(string), IList<string> databaseNames = default(IList<string>), long? queryExecutionCount = default(long?), string metricName = default(string), string metricDisplayName = default(string), double? metricValue = default(double?), string metricValueUnit = default(string))
            : base(id, name, type)
        {
            QueryId = queryId;
            StartTime = startTime;
            EndTime = endTime;
            AggregationFunction = aggregationFunction;
            DatabaseNames = databaseNames;
            QueryExecutionCount = queryExecutionCount;
            MetricName = metricName;
            MetricDisplayName = metricDisplayName;
            MetricValue = metricValue;
            MetricValueUnit = metricValueUnit;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets database query identifier.
        /// </summary>
        [JsonProperty(PropertyName = "properties.queryId")]
        public string QueryId { get; set; }

        /// <summary>
        /// Gets or sets observation start time.
        /// </summary>
        [JsonProperty(PropertyName = "properties.startTime")]
        public System.DateTime? StartTime { get; set; }

        /// <summary>
        /// Gets or sets observation end time.
        /// </summary>
        [JsonProperty(PropertyName = "properties.endTime")]
        public System.DateTime? EndTime { get; set; }

        /// <summary>
        /// Gets or sets aggregation function name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.aggregationFunction")]
        public string AggregationFunction { get; set; }

        /// <summary>
        /// Gets or sets the list of database names.
        /// </summary>
        [JsonProperty(PropertyName = "properties.databaseNames")]
        public IList<string> DatabaseNames { get; set; }

        /// <summary>
        /// Gets or sets number of query executions in this time interval.
        /// </summary>
        [JsonProperty(PropertyName = "properties.queryExecutionCount")]
        public long? QueryExecutionCount { get; set; }

        /// <summary>
        /// Gets or sets metric name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.metricName")]
        public string MetricName { get; set; }

        /// <summary>
        /// Gets or sets metric display name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.metricDisplayName")]
        public string MetricDisplayName { get; set; }

        /// <summary>
        /// Gets or sets metric value.
        /// </summary>
        [JsonProperty(PropertyName = "properties.metricValue")]
        public double? MetricValue { get; set; }

        /// <summary>
        /// Gets or sets metric value unit.
        /// </summary>
        [JsonProperty(PropertyName = "properties.metricValueUnit")]
        public string MetricValueUnit { get; set; }

    }
}
