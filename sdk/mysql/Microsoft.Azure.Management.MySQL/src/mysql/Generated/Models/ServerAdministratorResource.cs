// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MySQL.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents a and external administrator to be created.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ServerAdministratorResource : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the ServerAdministratorResource
        /// class.
        /// </summary>
        public ServerAdministratorResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServerAdministratorResource
        /// class.
        /// </summary>
        /// <param name="login">The server administrator login account
        /// name.</param>
        /// <param name="sid">The server administrator Sid (Secure ID).</param>
        /// <param name="tenantId">The server Active Directory Administrator
        /// tenant id.</param>
        /// <param name="id">Fully qualified resource Id for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. Ex-
        /// Microsoft.Compute/virtualMachines or
        /// Microsoft.Storage/storageAccounts.</param>
        public ServerAdministratorResource(string login, System.Guid sid, System.Guid tenantId, string id = default(string), string name = default(string), string type = default(string))
            : base(id, name, type)
        {
            Login = login;
            Sid = sid;
            TenantId = tenantId;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for ServerAdministratorResource class.
        /// </summary>
        static ServerAdministratorResource()
        {
            AdministratorType = "ActiveDirectory";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the server administrator login account name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.login")]
        public string Login { get; set; }

        /// <summary>
        /// Gets or sets the server administrator Sid (Secure ID).
        /// </summary>
        [JsonProperty(PropertyName = "properties.sid")]
        public System.Guid Sid { get; set; }

        /// <summary>
        /// Gets or sets the server Active Directory Administrator tenant id.
        /// </summary>
        [JsonProperty(PropertyName = "properties.tenantId")]
        public System.Guid TenantId { get; set; }

        /// <summary>
        /// The type of administrator.
        /// </summary>
        [JsonProperty(PropertyName = "properties.administratorType")]
        public static string AdministratorType { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Login == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Login");
            }
        }
    }
}
