// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.MySql.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.MySql.Samples
{
    public partial class Sample_ServerResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetAServer()
        {
            // Generated from example definition: 2024-12-01-preview/ServerGet.json
            // this example is just showing the usage of "Server_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServerResource created on azure
            // for more information of creating ServerResource, please refer to the document of ServerResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "testrg";
            string serverName = "mysqltestserver";
            ResourceIdentifier serverResourceId = ServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            ServerResource server = client.GetServerResource(serverResourceId);

            // invoke the operation
            ServerResource result = await server.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ServerData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetAServerWithVnet()
        {
            // Generated from example definition: 2024-12-01-preview/ServerGetWithVnet.json
            // this example is just showing the usage of "Server_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServerResource created on azure
            // for more information of creating ServerResource, please refer to the document of ServerResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "testrg";
            string serverName = "mysqltestserver";
            ResourceIdentifier serverResourceId = ServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            ServerResource server = client.GetServerResource(serverResourceId);

            // invoke the operation
            ServerResource result = await server.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ServerData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_DeleteAServer()
        {
            // Generated from example definition: 2024-12-01-preview/ServerDelete.json
            // this example is just showing the usage of "Server_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServerResource created on azure
            // for more information of creating ServerResource, please refer to the document of ServerResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestGroup";
            string serverName = "testserver";
            ResourceIdentifier serverResourceId = ServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            ServerResource server = client.GetServerResource(serverResourceId);

            // invoke the operation
            await server.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateServerToOptInVirtualCanary()
        {
            // Generated from example definition: 2024-12-01-preview/MaintenancePolicyPatchOptInVirtualCanary.json
            // this example is just showing the usage of "Server_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServerResource created on azure
            // for more information of creating ServerResource, please refer to the document of ServerResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "testrg";
            string serverName = "mysqltestserver";
            ResourceIdentifier serverResourceId = ServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            ServerResource server = client.GetServerResource(serverResourceId);

            // invoke the operation
            ServerPatch patch = new ServerPatch();
            ArmOperation<ServerResource> lro = await server.UpdateAsync(WaitUntil.Completed, patch);
            ServerResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ServerData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateServerToOptOutVirtualCanary()
        {
            // Generated from example definition: 2024-12-01-preview/MaintenancePolicyPatchOptOutVirtualCanary.json
            // this example is just showing the usage of "Server_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServerResource created on azure
            // for more information of creating ServerResource, please refer to the document of ServerResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "testrg";
            string serverName = "mysqltestserver";
            ResourceIdentifier serverResourceId = ServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            ServerResource server = client.GetServerResource(serverResourceId);

            // invoke the operation
            ServerPatch patch = new ServerPatch();
            ArmOperation<ServerResource> lro = await server.UpdateAsync(WaitUntil.Completed, patch);
            ServerResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ServerData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateAServer()
        {
            // Generated from example definition: 2024-12-01-preview/ServerUpdate.json
            // this example is just showing the usage of "Server_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServerResource created on azure
            // for more information of creating ServerResource, please refer to the document of ServerResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "testrg";
            string serverName = "mysqltestserver";
            ResourceIdentifier serverResourceId = ServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            ServerResource server = client.GetServerResource(serverResourceId);

            // invoke the operation
            ServerPatch patch = new ServerPatch();
            ArmOperation<ServerResource> lro = await server.UpdateAsync(WaitUntil.Completed, patch);
            ServerResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ServerData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateServerWithByok()
        {
            // Generated from example definition: 2024-12-01-preview/ServerUpdateWithBYOK.json
            // this example is just showing the usage of "Server_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServerResource created on azure
            // for more information of creating ServerResource, please refer to the document of ServerResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "testrg";
            string serverName = "mysqltestserver";
            ResourceIdentifier serverResourceId = ServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            ServerResource server = client.GetServerResource(serverResourceId);

            // invoke the operation
            ServerPatch patch = new ServerPatch
            {
                Identity = new ManagedServiceIdentity("UserAssigned")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/test-identity")] = new UserAssignedIdentity()
},
                },
            };
            ArmOperation<ServerResource> lro = await server.UpdateAsync(WaitUntil.Completed, patch);
            ServerResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ServerData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateServerCustomerMaintenanceWindow()
        {
            // Generated from example definition: 2024-12-01-preview/ServerUpdateWithCustomerMaintenanceWindow.json
            // this example is just showing the usage of "Server_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServerResource created on azure
            // for more information of creating ServerResource, please refer to the document of ServerResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "testrg";
            string serverName = "mysqltestserver";
            ResourceIdentifier serverResourceId = ServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            ServerResource server = client.GetServerResource(serverResourceId);

            // invoke the operation
            ServerPatch patch = new ServerPatch();
            ArmOperation<ServerResource> lro = await server.UpdateAsync(WaitUntil.Completed, patch);
            ServerResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ServerData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Failover_RestartAServer()
        {
            // Generated from example definition: 2024-12-01-preview/ServerFailover.json
            // this example is just showing the usage of "Servers_Failover" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServerResource created on azure
            // for more information of creating ServerResource, please refer to the document of ServerResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestGroup";
            string serverName = "testserver";
            ResourceIdentifier serverResourceId = ServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            ServerResource server = client.GetServerResource(serverResourceId);

            // invoke the operation
            await server.FailoverAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task ValidateEstimateHighAvailability_ValidateAValidationAndEstimationOfHighAvailability()
        {
            // Generated from example definition: 2024-12-01-preview/ServerValidateEstimateHighAvailability.json
            // this example is just showing the usage of "Servers_ValidateEstimateHighAvailability" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServerResource created on azure
            // for more information of creating ServerResource, please refer to the document of ServerResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestGroup";
            string serverName = "testserver";
            ResourceIdentifier serverResourceId = ServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            ServerResource server = client.GetServerResource(serverResourceId);

            // invoke the operation
            HighAvailabilityValidationEstimation highAvailabilityValidationEstimation = new HighAvailabilityValidationEstimation
            {
                ExpectedStandbyAvailabilityZone = "1",
            };
            HighAvailabilityValidationEstimation result = await server.ValidateEstimateHighAvailabilityAsync(highAvailabilityValidationEstimation);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Restart_RestartAServer()
        {
            // Generated from example definition: 2024-12-01-preview/ServerRestart.json
            // this example is just showing the usage of "Servers_Restart" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServerResource created on azure
            // for more information of creating ServerResource, please refer to the document of ServerResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestGroup";
            string serverName = "testserver";
            ResourceIdentifier serverResourceId = ServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            ServerResource server = client.GetServerResource(serverResourceId);

            // invoke the operation
            ServerRestartParameter serverRestartParameter = new ServerRestartParameter
            {
                RestartWithFailover = EnableStatusEnum.Enabled,
                MaxFailoverSeconds = 60,
            };
            await server.RestartAsync(WaitUntil.Completed, serverRestartParameter);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Start_StartAServer()
        {
            // Generated from example definition: 2024-12-01-preview/ServerStart.json
            // this example is just showing the usage of "Servers_Start" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServerResource created on azure
            // for more information of creating ServerResource, please refer to the document of ServerResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestGroup";
            string serverName = "testserver";
            ResourceIdentifier serverResourceId = ServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            ServerResource server = client.GetServerResource(serverResourceId);

            // invoke the operation
            await server.StartAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Stop_StopAServer()
        {
            // Generated from example definition: 2024-12-01-preview/ServerStop.json
            // this example is just showing the usage of "Servers_Stop" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServerResource created on azure
            // for more information of creating ServerResource, please refer to the document of ServerResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestGroup";
            string serverName = "testserver";
            ResourceIdentifier serverResourceId = ServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            ServerResource server = client.GetServerResource(serverResourceId);

            // invoke the operation
            await server.StopAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task ResetGtid_ResetGTIDOnAServer()
        {
            // Generated from example definition: 2024-12-01-preview/ServerResetGtid.json
            // this example is just showing the usage of "Servers_ResetGtid" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServerResource created on azure
            // for more information of creating ServerResource, please refer to the document of ServerResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestGroup";
            string serverName = "testserver";
            ResourceIdentifier serverResourceId = ServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            ServerResource server = client.GetServerResource(serverResourceId);

            // invoke the operation
            ServerGtidSetParameter serverGtidSetParameter = new ServerGtidSetParameter
            {
                GtidSet = "4aff5b51-97ba-11ed-a955-002248036acc:1-16",
            };
            await server.ResetGtidAsync(WaitUntil.Completed, serverGtidSetParameter);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task DetachVNet_DetachVNetOnAServer()
        {
            // Generated from example definition: 2024-12-01-preview/ServerDetachVNet.json
            // this example is just showing the usage of "Servers_DetachVNet" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServerResource created on azure
            // for more information of creating ServerResource, please refer to the document of ServerResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestGroup";
            string serverName = "testserver";
            ResourceIdentifier serverResourceId = ServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            ServerResource server = client.GetServerResource(serverResourceId);

            // invoke the operation
            ServerDetachVNetParameter serverDetachVNetParameter = new ServerDetachVNetParameter
            {
                PublicNetworkAccess = EnableStatusEnum.Enabled,
            };
            ArmOperation<ServerResource> lro = await server.DetachVNetAsync(WaitUntil.Completed, serverDetachVNetParameter);
            ServerResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ServerData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateBackupAndExport_CreateAndExportBackup()
        {
            // Generated from example definition: 2024-12-01-preview/BackupAndExport.json
            // this example is just showing the usage of "BackupAndExport_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServerResource created on azure
            // for more information of creating ServerResource, please refer to the document of ServerResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestGroup";
            string serverName = "mysqltestserver";
            ResourceIdentifier serverResourceId = ServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            ServerResource server = client.GetServerResource(serverResourceId);

            // invoke the operation
            BackupAndExportContent content = new BackupAndExportContent(new BackupSettings("customer-backup-name"), new FullBackupStoreDetails(new string[] { "sasuri1", "sasuri2" }));
            ArmOperation<BackupAndExportResponse> lro = await server.CreateBackupAndExportAsync(WaitUntil.Completed, content);
            BackupAndExportResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task ValidateBackupBackupAndExport_ValidateBackup()
        {
            // Generated from example definition: 2024-12-01-preview/ValidateBackup.json
            // this example is just showing the usage of "BackupAndExport_ValidateBackup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServerResource created on azure
            // for more information of creating ServerResource, please refer to the document of ServerResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestGroup";
            string serverName = "mysqltestserver";
            ResourceIdentifier serverResourceId = ServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            ServerResource server = client.GetServerResource(serverResourceId);

            // invoke the operation
            ValidateBackupResponse result = await server.ValidateBackupBackupAndExportAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetLogFiles_ListAllServerLogFilesForAServer()
        {
            // Generated from example definition: 2024-12-01-preview/LogFilesListByServer.json
            // this example is just showing the usage of "LogFiles_ListByServer" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServerResource created on azure
            // for more information of creating ServerResource, please refer to the document of ServerResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "testrg";
            string serverName = "mysqltestsvc1";
            ResourceIdentifier serverResourceId = ServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            ServerResource server = client.GetServerResource(serverResourceId);

            // invoke the operation and iterate over the result
            await foreach (LogFile item in server.GetLogFilesAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CutoverMigrationServersMigration_CutoverMigrationForMySQLImport()
        {
            // Generated from example definition: 2024-12-01-preview/CutoverMigration.json
            // this example is just showing the usage of "ServersMigration_CutoverMigration" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServerResource created on azure
            // for more information of creating ServerResource, please refer to the document of ServerResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "testrg";
            string serverName = "mysqltestserver";
            ResourceIdentifier serverResourceId = ServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            ServerResource server = client.GetServerResource(serverResourceId);

            // invoke the operation
            ArmOperation<ServerResource> lro = await server.CutoverMigrationServersMigrationAsync(WaitUntil.Completed);
            ServerResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ServerData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task BatchUpdateConfiguration_ConfigurationList()
        {
            // Generated from example definition: 2024-12-01-preview/ConfigurationsBatchUpdate.json
            // this example is just showing the usage of "Configurations_BatchUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServerResource created on azure
            // for more information of creating ServerResource, please refer to the document of ServerResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "testrg";
            string serverName = "mysqltestserver";
            ResourceIdentifier serverResourceId = ServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            ServerResource server = client.GetServerResource(serverResourceId);

            // invoke the operation
            ConfigurationListForBatchUpdate configurationListForBatchUpdate = new ConfigurationListForBatchUpdate
            {
                Value = {new ConfigurationForBatchUpdate
{
Name = "event_scheduler",
}, new ConfigurationForBatchUpdate
{
Name = "div_precision_increment",
}},
                ResetAllToDefault = ResetAllToDefault.False,
            };
            ArmOperation<ConfigurationListResult> lro = await server.BatchUpdateConfigurationAsync(WaitUntil.Completed, configurationListForBatchUpdate);
            ConfigurationListResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
