// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.MySql.Models;

namespace Azure.ResourceManager.MySql
{
    /// <summary>
    /// A class representing a collection of <see cref="WaitStatisticResource" /> and their operations.
    /// Each <see cref="WaitStatisticResource" /> in the collection will belong to the same instance of <see cref="ServerResource" />.
    /// To get a <see cref="WaitStatisticCollection" /> instance call the GetWaitStatistics method from an instance of <see cref="ServerResource" />.
    /// </summary>
    public partial class WaitStatisticCollection : ArmCollection
    {
        private readonly ClientDiagnostics _waitStatisticClientDiagnostics;
        private readonly WaitStatisticsRestOperations _waitStatisticRestClient;

        /// <summary> Initializes a new instance of the <see cref="WaitStatisticCollection"/> class for mocking. </summary>
        protected WaitStatisticCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="WaitStatisticCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal WaitStatisticCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _waitStatisticClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.MySql", WaitStatisticResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(WaitStatisticResource.ResourceType, out string waitStatisticApiVersion);
            _waitStatisticRestClient = new WaitStatisticsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, waitStatisticApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ServerResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ServerResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Retrieve wait statistics for specified identifier.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/waitStatistics/{waitStatisticsId}
        /// Operation Id: WaitStatistics_Get
        /// </summary>
        /// <param name="waitStatisticsId"> The Wait Statistic identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="waitStatisticsId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="waitStatisticsId"/> is null. </exception>
        public virtual async Task<Response<WaitStatisticResource>> GetAsync(string waitStatisticsId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(waitStatisticsId, nameof(waitStatisticsId));

            using var scope = _waitStatisticClientDiagnostics.CreateScope("WaitStatisticCollection.Get");
            scope.Start();
            try
            {
                var response = await _waitStatisticRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, waitStatisticsId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new WaitStatisticResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Retrieve wait statistics for specified identifier.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/waitStatistics/{waitStatisticsId}
        /// Operation Id: WaitStatistics_Get
        /// </summary>
        /// <param name="waitStatisticsId"> The Wait Statistic identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="waitStatisticsId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="waitStatisticsId"/> is null. </exception>
        public virtual Response<WaitStatisticResource> Get(string waitStatisticsId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(waitStatisticsId, nameof(waitStatisticsId));

            using var scope = _waitStatisticClientDiagnostics.CreateScope("WaitStatisticCollection.Get");
            scope.Start();
            try
            {
                var response = _waitStatisticRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, waitStatisticsId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new WaitStatisticResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Retrieve wait statistics for specified aggregation window.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/waitStatistics
        /// Operation Id: WaitStatistics_ListByServer
        /// </summary>
        /// <param name="input"> The required parameters for retrieving wait statistics. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        /// <returns> An async collection of <see cref="WaitStatisticResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<WaitStatisticResource> GetAllAsync(WaitStatisticsInput input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            async Task<Page<WaitStatisticResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _waitStatisticClientDiagnostics.CreateScope("WaitStatisticCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _waitStatisticRestClient.ListByServerAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, input, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new WaitStatisticResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<WaitStatisticResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _waitStatisticClientDiagnostics.CreateScope("WaitStatisticCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _waitStatisticRestClient.ListByServerNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, input, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new WaitStatisticResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Retrieve wait statistics for specified aggregation window.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/waitStatistics
        /// Operation Id: WaitStatistics_ListByServer
        /// </summary>
        /// <param name="input"> The required parameters for retrieving wait statistics. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        /// <returns> A collection of <see cref="WaitStatisticResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<WaitStatisticResource> GetAll(WaitStatisticsInput input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            Page<WaitStatisticResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _waitStatisticClientDiagnostics.CreateScope("WaitStatisticCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _waitStatisticRestClient.ListByServer(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, input, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new WaitStatisticResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<WaitStatisticResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _waitStatisticClientDiagnostics.CreateScope("WaitStatisticCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _waitStatisticRestClient.ListByServerNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, input, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new WaitStatisticResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/waitStatistics/{waitStatisticsId}
        /// Operation Id: WaitStatistics_Get
        /// </summary>
        /// <param name="waitStatisticsId"> The Wait Statistic identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="waitStatisticsId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="waitStatisticsId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string waitStatisticsId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(waitStatisticsId, nameof(waitStatisticsId));

            using var scope = _waitStatisticClientDiagnostics.CreateScope("WaitStatisticCollection.Exists");
            scope.Start();
            try
            {
                var response = await _waitStatisticRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, waitStatisticsId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/waitStatistics/{waitStatisticsId}
        /// Operation Id: WaitStatistics_Get
        /// </summary>
        /// <param name="waitStatisticsId"> The Wait Statistic identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="waitStatisticsId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="waitStatisticsId"/> is null. </exception>
        public virtual Response<bool> Exists(string waitStatisticsId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(waitStatisticsId, nameof(waitStatisticsId));

            using var scope = _waitStatisticClientDiagnostics.CreateScope("WaitStatisticCollection.Exists");
            scope.Start();
            try
            {
                var response = _waitStatisticRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, waitStatisticsId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
