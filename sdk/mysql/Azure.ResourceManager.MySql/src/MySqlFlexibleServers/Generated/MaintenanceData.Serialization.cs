// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.MySql;
using Azure.ResourceManager.MySql.FlexibleServers.Models;

namespace Azure.ResourceManager.MySql.FlexibleServers
{
    public partial class MaintenanceData : IUtf8JsonSerializable, IJsonModel<MaintenanceData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MaintenanceData>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<MaintenanceData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MaintenanceData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MaintenanceData)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && Optional.IsDefined(SystemData))
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(MaintenanceType))
            {
                writer.WritePropertyName("maintenanceType"u8);
                writer.WriteStringValue(MaintenanceType.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(MaintenanceState))
            {
                writer.WritePropertyName("maintenanceState"u8);
                writer.WriteStringValue(MaintenanceState.Value.ToString());
            }
            if (Optional.IsDefined(MaintenanceStartOn))
            {
                writer.WritePropertyName("maintenanceStartTime"u8);
                writer.WriteStringValue(MaintenanceStartOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(MaintenanceEndOn))
            {
                writer.WritePropertyName("maintenanceEndTime"u8);
                writer.WriteStringValue(MaintenanceEndOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(MaintenanceExecutionStartOn))
            {
                writer.WritePropertyName("maintenanceExecutionStartTime"u8);
                writer.WriteStringValue(MaintenanceExecutionStartOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(MaintenanceExecutionEndOn))
            {
                writer.WritePropertyName("maintenanceExecutionEndTime"u8);
                writer.WriteStringValue(MaintenanceExecutionEndOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(MaintenanceAvailableScheduleMinOn))
            {
                writer.WritePropertyName("maintenanceAvailableScheduleMinTime"u8);
                writer.WriteStringValue(MaintenanceAvailableScheduleMinOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(MaintenanceAvailableScheduleMaxOn))
            {
                writer.WritePropertyName("maintenanceAvailableScheduleMaxTime"u8);
                writer.WriteStringValue(MaintenanceAvailableScheduleMaxOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(MaintenanceTitle))
            {
                writer.WritePropertyName("maintenanceTitle"u8);
                writer.WriteStringValue(MaintenanceTitle);
            }
            if (options.Format != "W" && Optional.IsDefined(MaintenanceDescription))
            {
                writer.WritePropertyName("maintenanceDescription"u8);
                writer.WriteStringValue(MaintenanceDescription);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        MaintenanceData IJsonModel<MaintenanceData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MaintenanceData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MaintenanceData)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMaintenanceData(document.RootElement, options);
        }

        internal static MaintenanceData DeserializeMaintenanceData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            MaintenanceType? maintenanceType = default;
            MaintenanceState? maintenanceState = default;
            DateTimeOffset? maintenanceStartTime = default;
            DateTimeOffset? maintenanceEndTime = default;
            DateTimeOffset? maintenanceExecutionStartTime = default;
            DateTimeOffset? maintenanceExecutionEndTime = default;
            DateTimeOffset? maintenanceAvailableScheduleMinTime = default;
            DateTimeOffset? maintenanceAvailableScheduleMaxTime = default;
            string maintenanceTitle = default;
            string maintenanceDescription = default;
            MaintenanceProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("maintenanceType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            maintenanceType = new MaintenanceType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("maintenanceState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            maintenanceState = new MaintenanceState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("maintenanceStartTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            maintenanceStartTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("maintenanceEndTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            maintenanceEndTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("maintenanceExecutionStartTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            maintenanceExecutionStartTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("maintenanceExecutionEndTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            maintenanceExecutionEndTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("maintenanceAvailableScheduleMinTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            maintenanceAvailableScheduleMinTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("maintenanceAvailableScheduleMaxTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            maintenanceAvailableScheduleMaxTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("maintenanceTitle"u8))
                        {
                            maintenanceTitle = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("maintenanceDescription"u8))
                        {
                            maintenanceDescription = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new MaintenanceProvisioningState(property0.Value.GetString());
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new MaintenanceData(
                id,
                name,
                type,
                systemData,
                maintenanceType,
                maintenanceState,
                maintenanceStartTime,
                maintenanceEndTime,
                maintenanceExecutionStartTime,
                maintenanceExecutionEndTime,
                maintenanceAvailableScheduleMinTime,
                maintenanceAvailableScheduleMaxTime,
                maintenanceTitle,
                maintenanceDescription,
                provisioningState,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MaintenanceData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MaintenanceData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(MaintenanceData)} does not support '{options.Format}' format.");
            }
        }

        MaintenanceData IPersistableModel<MaintenanceData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MaintenanceData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeMaintenanceData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MaintenanceData)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<MaintenanceData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
