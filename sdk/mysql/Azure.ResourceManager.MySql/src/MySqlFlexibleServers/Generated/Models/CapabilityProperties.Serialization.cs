// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MySql.FlexibleServers.Models
{
    public partial class CapabilityProperties
    {
        internal static CapabilityProperties DeserializeCapabilityProperties(JsonElement element)
        {
            Optional<string> zone = default;
            Optional<IReadOnlyList<string>> supportedHAMode = default;
            Optional<IReadOnlyList<string>> supportedGeoBackupRegions = default;
            Optional<IReadOnlyList<ServerEditionCapability>> supportedFlexibleServerEditions = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("zone"))
                {
                    zone = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("supportedHAMode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    supportedHAMode = array;
                    continue;
                }
                if (property.NameEquals("supportedGeoBackupRegions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    supportedGeoBackupRegions = array;
                    continue;
                }
                if (property.NameEquals("supportedFlexibleServerEditions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ServerEditionCapability> array = new List<ServerEditionCapability>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ServerEditionCapability.DeserializeServerEditionCapability(item));
                    }
                    supportedFlexibleServerEditions = array;
                    continue;
                }
            }
            return new CapabilityProperties(zone.Value, Optional.ToList(supportedHAMode), Optional.ToList(supportedGeoBackupRegions), Optional.ToList(supportedFlexibleServerEditions));
        }
    }
}
