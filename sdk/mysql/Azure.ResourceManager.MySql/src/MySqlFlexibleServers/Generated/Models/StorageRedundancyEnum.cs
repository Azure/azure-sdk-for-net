// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MySql.FlexibleServers.Models
{
    /// <summary> Enum to indicate whether storage sku value is 'ZoneRedundancy' or 'LocalRedundancy'. </summary>
    public readonly partial struct StorageRedundancyEnum : IEquatable<StorageRedundancyEnum>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="StorageRedundancyEnum"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public StorageRedundancyEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string LocalRedundancyValue = "LocalRedundancy";
        private const string ZoneRedundancyValue = "ZoneRedundancy";

        /// <summary> LocalRedundancy. </summary>
        public static StorageRedundancyEnum LocalRedundancy { get; } = new StorageRedundancyEnum(LocalRedundancyValue);
        /// <summary> ZoneRedundancy. </summary>
        public static StorageRedundancyEnum ZoneRedundancy { get; } = new StorageRedundancyEnum(ZoneRedundancyValue);
        /// <summary> Determines if two <see cref="StorageRedundancyEnum"/> values are the same. </summary>
        public static bool operator ==(StorageRedundancyEnum left, StorageRedundancyEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="StorageRedundancyEnum"/> values are not the same. </summary>
        public static bool operator !=(StorageRedundancyEnum left, StorageRedundancyEnum right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="StorageRedundancyEnum"/>. </summary>
        public static implicit operator StorageRedundancyEnum(string value) => new StorageRedundancyEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is StorageRedundancyEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(StorageRedundancyEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
