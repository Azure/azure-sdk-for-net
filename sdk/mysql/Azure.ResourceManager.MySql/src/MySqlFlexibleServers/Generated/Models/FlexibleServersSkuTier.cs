// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MySql.FlexibleServers.Models
{
    /// <summary> The tier of the particular SKU, e.g. GeneralPurpose. </summary>
    public readonly partial struct FlexibleServersSkuTier : IEquatable<FlexibleServersSkuTier>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FlexibleServersSkuTier"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FlexibleServersSkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BurstableValue = "Burstable";
        private const string GeneralPurposeValue = "GeneralPurpose";
        private const string MemoryOptimizedValue = "MemoryOptimized";

        /// <summary> Burstable. </summary>
        public static FlexibleServersSkuTier Burstable { get; } = new FlexibleServersSkuTier(BurstableValue);
        /// <summary> GeneralPurpose. </summary>
        public static FlexibleServersSkuTier GeneralPurpose { get; } = new FlexibleServersSkuTier(GeneralPurposeValue);
        /// <summary> MemoryOptimized. </summary>
        public static FlexibleServersSkuTier MemoryOptimized { get; } = new FlexibleServersSkuTier(MemoryOptimizedValue);
        /// <summary> Determines if two <see cref="FlexibleServersSkuTier"/> values are the same. </summary>
        public static bool operator ==(FlexibleServersSkuTier left, FlexibleServersSkuTier right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FlexibleServersSkuTier"/> values are not the same. </summary>
        public static bool operator !=(FlexibleServersSkuTier left, FlexibleServersSkuTier right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FlexibleServersSkuTier"/>. </summary>
        public static implicit operator FlexibleServersSkuTier(string value) => new FlexibleServersSkuTier(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FlexibleServersSkuTier other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FlexibleServersSkuTier other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
