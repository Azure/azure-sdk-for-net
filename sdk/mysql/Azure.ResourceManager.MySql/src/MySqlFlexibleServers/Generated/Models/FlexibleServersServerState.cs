// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MySql.FlexibleServers.Models
{
    /// <summary> The state of a server. </summary>
    public readonly partial struct FlexibleServersServerState : IEquatable<FlexibleServersServerState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FlexibleServersServerState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FlexibleServersServerState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ReadyValue = "Ready";
        private const string DroppingValue = "Dropping";
        private const string DisabledValue = "Disabled";
        private const string StartingValue = "Starting";
        private const string StoppingValue = "Stopping";
        private const string StoppedValue = "Stopped";
        private const string UpdatingValue = "Updating";

        /// <summary> Ready. </summary>
        public static FlexibleServersServerState Ready { get; } = new FlexibleServersServerState(ReadyValue);
        /// <summary> Dropping. </summary>
        public static FlexibleServersServerState Dropping { get; } = new FlexibleServersServerState(DroppingValue);
        /// <summary> Disabled. </summary>
        public static FlexibleServersServerState Disabled { get; } = new FlexibleServersServerState(DisabledValue);
        /// <summary> Starting. </summary>
        public static FlexibleServersServerState Starting { get; } = new FlexibleServersServerState(StartingValue);
        /// <summary> Stopping. </summary>
        public static FlexibleServersServerState Stopping { get; } = new FlexibleServersServerState(StoppingValue);
        /// <summary> Stopped. </summary>
        public static FlexibleServersServerState Stopped { get; } = new FlexibleServersServerState(StoppedValue);
        /// <summary> Updating. </summary>
        public static FlexibleServersServerState Updating { get; } = new FlexibleServersServerState(UpdatingValue);
        /// <summary> Determines if two <see cref="FlexibleServersServerState"/> values are the same. </summary>
        public static bool operator ==(FlexibleServersServerState left, FlexibleServersServerState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FlexibleServersServerState"/> values are not the same. </summary>
        public static bool operator !=(FlexibleServersServerState left, FlexibleServersServerState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FlexibleServersServerState"/>. </summary>
        public static implicit operator FlexibleServersServerState(string value) => new FlexibleServersServerState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FlexibleServersServerState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FlexibleServersServerState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
