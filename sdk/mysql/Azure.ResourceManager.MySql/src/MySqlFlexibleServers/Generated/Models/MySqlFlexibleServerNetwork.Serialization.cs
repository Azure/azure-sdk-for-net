// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.MySql.FlexibleServers.Models
{
    public partial class MySqlFlexibleServerNetwork : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IUtf8JsonSerializable)this).Write(writer, new SerializableOptions());

        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer, SerializableOptions options)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(DelegatedSubnetResourceId))
            {
                writer.WritePropertyName("delegatedSubnetResourceId"u8);
                writer.WriteStringValue(DelegatedSubnetResourceId);
            }
            if (Optional.IsDefined(PrivateDnsZoneResourceId))
            {
                writer.WritePropertyName("privateDnsZoneResourceId"u8);
                writer.WriteStringValue(PrivateDnsZoneResourceId);
            }
            writer.WriteEndObject();
        }

        internal static MySqlFlexibleServerNetwork DeserializeMySqlFlexibleServerNetwork(JsonElement element, SerializableOptions options = default)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<MySqlFlexibleServerEnableStatusEnum> publicNetworkAccess = default;
            Optional<ResourceIdentifier> delegatedSubnetResourceId = default;
            Optional<ResourceIdentifier> privateDnsZoneResourceId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("publicNetworkAccess"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    publicNetworkAccess = new MySqlFlexibleServerEnableStatusEnum(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("delegatedSubnetResourceId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    delegatedSubnetResourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("privateDnsZoneResourceId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    privateDnsZoneResourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
            }
            return new MySqlFlexibleServerNetwork(Optional.ToNullable(publicNetworkAccess), delegatedSubnetResourceId.Value, privateDnsZoneResourceId.Value);
        }
    }
}
