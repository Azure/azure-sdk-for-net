// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MySql.FlexibleServers.Models
{
    /// <summary> The mode to create a new MySQL server. </summary>
    public readonly partial struct FlexibleServersCreateMode : IEquatable<FlexibleServersCreateMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FlexibleServersCreateMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FlexibleServersCreateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DefaultValue = "Default";
        private const string PointInTimeRestoreValue = "PointInTimeRestore";
        private const string ReplicaValue = "Replica";
        private const string GeoRestoreValue = "GeoRestore";

        /// <summary> Default. </summary>
        public static FlexibleServersCreateMode Default { get; } = new FlexibleServersCreateMode(DefaultValue);
        /// <summary> PointInTimeRestore. </summary>
        public static FlexibleServersCreateMode PointInTimeRestore { get; } = new FlexibleServersCreateMode(PointInTimeRestoreValue);
        /// <summary> Replica. </summary>
        public static FlexibleServersCreateMode Replica { get; } = new FlexibleServersCreateMode(ReplicaValue);
        /// <summary> GeoRestore. </summary>
        public static FlexibleServersCreateMode GeoRestore { get; } = new FlexibleServersCreateMode(GeoRestoreValue);
        /// <summary> Determines if two <see cref="FlexibleServersCreateMode"/> values are the same. </summary>
        public static bool operator ==(FlexibleServersCreateMode left, FlexibleServersCreateMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FlexibleServersCreateMode"/> values are not the same. </summary>
        public static bool operator !=(FlexibleServersCreateMode left, FlexibleServersCreateMode right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FlexibleServersCreateMode"/>. </summary>
        public static implicit operator FlexibleServersCreateMode(string value) => new FlexibleServersCreateMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FlexibleServersCreateMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FlexibleServersCreateMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
