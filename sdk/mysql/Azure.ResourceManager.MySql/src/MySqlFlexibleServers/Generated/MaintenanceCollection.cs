// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.MySql;

namespace Azure.ResourceManager.MySql.FlexibleServers
{
    /// <summary>
    /// A class representing a collection of <see cref="MaintenanceResource"/> and their operations.
    /// Each <see cref="MaintenanceResource"/> in the collection will belong to the same instance of <see cref="MySqlFlexibleServerResource"/>.
    /// To get a <see cref="MaintenanceCollection"/> instance call the GetMaintenances method from an instance of <see cref="MySqlFlexibleServerResource"/>.
    /// </summary>
    public partial class MaintenanceCollection : ArmCollection, IEnumerable<MaintenanceResource>, IAsyncEnumerable<MaintenanceResource>
    {
        private readonly ClientDiagnostics _maintenanceClientDiagnostics;
        private readonly MaintenancesRestOperations _maintenanceRestClient;

        /// <summary> Initializes a new instance of the <see cref="MaintenanceCollection"/> class for mocking. </summary>
        protected MaintenanceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MaintenanceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal MaintenanceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _maintenanceClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.MySql.FlexibleServers", MaintenanceResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(MaintenanceResource.ResourceType, out string maintenanceApiVersion);
            _maintenanceRestClient = new MaintenancesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, maintenanceApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != MySqlFlexibleServerResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, MySqlFlexibleServerResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Read maintenance.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/flexibleServers/{serverName}/maintenances/{maintenanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Maintenances_Read</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-10-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MaintenanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="maintenanceName"> The name of the maintenance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="maintenanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="maintenanceName"/> is null. </exception>
        public virtual async Task<Response<MaintenanceResource>> GetAsync(string maintenanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(maintenanceName, nameof(maintenanceName));

            using var scope = _maintenanceClientDiagnostics.CreateScope("MaintenanceCollection.Get");
            scope.Start();
            try
            {
                var response = await _maintenanceRestClient.ReadAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, maintenanceName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new MaintenanceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Read maintenance.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/flexibleServers/{serverName}/maintenances/{maintenanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Maintenances_Read</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-10-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MaintenanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="maintenanceName"> The name of the maintenance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="maintenanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="maintenanceName"/> is null. </exception>
        public virtual Response<MaintenanceResource> Get(string maintenanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(maintenanceName, nameof(maintenanceName));

            using var scope = _maintenanceClientDiagnostics.CreateScope("MaintenanceCollection.Get");
            scope.Start();
            try
            {
                var response = _maintenanceRestClient.Read(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, maintenanceName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new MaintenanceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List maintenances.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/flexibleServers/{serverName}/maintenances</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Maintenances_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-10-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MaintenanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="MaintenanceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<MaintenanceResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _maintenanceRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _maintenanceRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new MaintenanceResource(Client, MaintenanceData.DeserializeMaintenanceData(e)), _maintenanceClientDiagnostics, Pipeline, "MaintenanceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List maintenances.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/flexibleServers/{serverName}/maintenances</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Maintenances_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-10-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MaintenanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="MaintenanceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<MaintenanceResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _maintenanceRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _maintenanceRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new MaintenanceResource(Client, MaintenanceData.DeserializeMaintenanceData(e)), _maintenanceClientDiagnostics, Pipeline, "MaintenanceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/flexibleServers/{serverName}/maintenances/{maintenanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Maintenances_Read</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-10-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MaintenanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="maintenanceName"> The name of the maintenance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="maintenanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="maintenanceName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string maintenanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(maintenanceName, nameof(maintenanceName));

            using var scope = _maintenanceClientDiagnostics.CreateScope("MaintenanceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _maintenanceRestClient.ReadAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, maintenanceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/flexibleServers/{serverName}/maintenances/{maintenanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Maintenances_Read</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-10-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MaintenanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="maintenanceName"> The name of the maintenance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="maintenanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="maintenanceName"/> is null. </exception>
        public virtual Response<bool> Exists(string maintenanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(maintenanceName, nameof(maintenanceName));

            using var scope = _maintenanceClientDiagnostics.CreateScope("MaintenanceCollection.Exists");
            scope.Start();
            try
            {
                var response = _maintenanceRestClient.Read(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, maintenanceName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/flexibleServers/{serverName}/maintenances/{maintenanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Maintenances_Read</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-10-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MaintenanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="maintenanceName"> The name of the maintenance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="maintenanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="maintenanceName"/> is null. </exception>
        public virtual async Task<NullableResponse<MaintenanceResource>> GetIfExistsAsync(string maintenanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(maintenanceName, nameof(maintenanceName));

            using var scope = _maintenanceClientDiagnostics.CreateScope("MaintenanceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _maintenanceRestClient.ReadAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, maintenanceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<MaintenanceResource>(response.GetRawResponse());
                return Response.FromValue(new MaintenanceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/flexibleServers/{serverName}/maintenances/{maintenanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Maintenances_Read</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-10-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MaintenanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="maintenanceName"> The name of the maintenance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="maintenanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="maintenanceName"/> is null. </exception>
        public virtual NullableResponse<MaintenanceResource> GetIfExists(string maintenanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(maintenanceName, nameof(maintenanceName));

            using var scope = _maintenanceClientDiagnostics.CreateScope("MaintenanceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _maintenanceRestClient.Read(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, maintenanceName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<MaintenanceResource>(response.GetRawResponse());
                return Response.FromValue(new MaintenanceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<MaintenanceResource> IEnumerable<MaintenanceResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<MaintenanceResource> IAsyncEnumerable<MaintenanceResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
