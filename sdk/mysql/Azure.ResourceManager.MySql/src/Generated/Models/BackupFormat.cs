// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MySql.Models
{
    /// <summary> Backup Format for the current backup. (CollatedFormat is INTERNAL â€“ DO NOT USE). </summary>
    public readonly partial struct BackupFormat : IEquatable<BackupFormat>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="BackupFormat"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public BackupFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CollatedFormatValue = "CollatedFormat";
        private const string RawValue = "Raw";

        /// <summary> CollatedFormat. </summary>
        public static BackupFormat CollatedFormat { get; } = new BackupFormat(CollatedFormatValue);
        /// <summary> Raw. </summary>
        public static BackupFormat Raw { get; } = new BackupFormat(RawValue);
        /// <summary> Determines if two <see cref="BackupFormat"/> values are the same. </summary>
        public static bool operator ==(BackupFormat left, BackupFormat right) => left.Equals(right);
        /// <summary> Determines if two <see cref="BackupFormat"/> values are not the same. </summary>
        public static bool operator !=(BackupFormat left, BackupFormat right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="BackupFormat"/>. </summary>
        public static implicit operator BackupFormat(string value) => new BackupFormat(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is BackupFormat other && Equals(other);
        /// <inheritdoc />
        public bool Equals(BackupFormat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
