// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MySql.Models
{
    /// <summary> The type of this maintenance. </summary>
    public readonly partial struct MaintenanceType : IEquatable<MaintenanceType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MaintenanceType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MaintenanceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RoutineMaintenanceValue = "RoutineMaintenance";
        private const string MinorVersionUpgradeValue = "MinorVersionUpgrade";
        private const string SecurityPatchesValue = "SecurityPatches";
        private const string HotFixesValue = "HotFixes";

        /// <summary> RoutineMaintenance. </summary>
        public static MaintenanceType RoutineMaintenance { get; } = new MaintenanceType(RoutineMaintenanceValue);
        /// <summary> MinorVersionUpgrade. </summary>
        public static MaintenanceType MinorVersionUpgrade { get; } = new MaintenanceType(MinorVersionUpgradeValue);
        /// <summary> SecurityPatches. </summary>
        public static MaintenanceType SecurityPatches { get; } = new MaintenanceType(SecurityPatchesValue);
        /// <summary> HotFixes. </summary>
        public static MaintenanceType HotFixes { get; } = new MaintenanceType(HotFixesValue);
        /// <summary> Determines if two <see cref="MaintenanceType"/> values are the same. </summary>
        public static bool operator ==(MaintenanceType left, MaintenanceType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MaintenanceType"/> values are not the same. </summary>
        public static bool operator !=(MaintenanceType left, MaintenanceType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="MaintenanceType"/>. </summary>
        public static implicit operator MaintenanceType(string value) => new MaintenanceType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MaintenanceType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MaintenanceType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
