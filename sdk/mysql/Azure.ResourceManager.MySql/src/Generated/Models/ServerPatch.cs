// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.MySql.Models
{
    /// <summary> Parameters allowed to update for a server. </summary>
    public partial class ServerPatch
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ServerPatch"/>. </summary>
        public ServerPatch()
        {
            Tags = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="ServerPatch"/>. </summary>
        /// <param name="identity"> The cmk identity for the server. Current supported identity types: UserAssigned. </param>
        /// <param name="sku"> The SKU (pricing tier) of the server. </param>
        /// <param name="administratorLoginPassword"> The password of the administrator login. </param>
        /// <param name="version"> Server version. </param>
        /// <param name="storage"> Storage related properties of a server. </param>
        /// <param name="backup"> Backup related properties of a server. </param>
        /// <param name="highAvailability"> High availability related properties of a server. </param>
        /// <param name="maintenancePolicy"> Maintenance policy of a server. </param>
        /// <param name="maintenanceWindow"> Maintenance window of a server. </param>
        /// <param name="replicationRole"> The replication role of the server. </param>
        /// <param name="dataEncryption"> The Data Encryption for CMK. </param>
        /// <param name="network"> Network related properties of a server. </param>
        /// <param name="tags"> Application-specific metadata in the form of key-value pairs. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ServerPatch(ManagedServiceIdentity identity, MySQLServerSku sku, string administratorLoginPassword, ServerVersion? version, Storage storage, Backup backup, HighAvailability highAvailability, MaintenancePolicy maintenancePolicy, MaintenanceWindow maintenanceWindow, ReplicationRole? replicationRole, DataEncryption dataEncryption, Network network, IDictionary<string, string> tags, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Identity = identity;
            Sku = sku;
            AdministratorLoginPassword = administratorLoginPassword;
            Version = version;
            Storage = storage;
            Backup = backup;
            HighAvailability = highAvailability;
            MaintenancePolicy = maintenancePolicy;
            MaintenanceWindow = maintenanceWindow;
            ReplicationRole = replicationRole;
            DataEncryption = dataEncryption;
            Network = network;
            Tags = tags;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The cmk identity for the server. Current supported identity types: UserAssigned. </summary>
        public ManagedServiceIdentity Identity { get; set; }
        /// <summary> The SKU (pricing tier) of the server. </summary>
        public MySQLServerSku Sku { get; set; }
        /// <summary> The password of the administrator login. </summary>
        public string AdministratorLoginPassword { get; set; }
        /// <summary> Server version. </summary>
        public ServerVersion? Version { get; set; }
        /// <summary> Storage related properties of a server. </summary>
        public Storage Storage { get; set; }
        /// <summary> Backup related properties of a server. </summary>
        public Backup Backup { get; set; }
        /// <summary> High availability related properties of a server. </summary>
        public HighAvailability HighAvailability { get; set; }
        /// <summary> Maintenance policy of a server. </summary>
        internal MaintenancePolicy MaintenancePolicy { get; set; }
        /// <summary> The patch strategy of this server. </summary>
        public PatchStrategy? MaintenancePatchStrategy
        {
            get => MaintenancePolicy is null ? default : MaintenancePolicy.PatchStrategy;
            set
            {
                if (MaintenancePolicy is null)
                    MaintenancePolicy = new MaintenancePolicy();
                MaintenancePolicy.PatchStrategy = value;
            }
        }

        /// <summary> Maintenance window of a server. </summary>
        public MaintenanceWindow MaintenanceWindow { get; set; }
        /// <summary> The replication role of the server. </summary>
        public ReplicationRole? ReplicationRole { get; set; }
        /// <summary> The Data Encryption for CMK. </summary>
        public DataEncryption DataEncryption { get; set; }
        /// <summary> Network related properties of a server. </summary>
        public Network Network { get; set; }
        /// <summary> Application-specific metadata in the form of key-value pairs. </summary>
        public IDictionary<string, string> Tags { get; }
    }
}
