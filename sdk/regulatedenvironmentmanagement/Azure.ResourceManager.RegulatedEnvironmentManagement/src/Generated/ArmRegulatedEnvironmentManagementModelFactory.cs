// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.RegulatedEnvironmentManagement.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmRegulatedEnvironmentManagementModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="RegulatedEnvironmentManagement.LZRegistrationData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="RegulatedEnvironmentManagement.LZRegistrationData"/> instance for mocking. </returns>
        public static LZRegistrationData LZRegistrationData(ResourceIdentifier id = null, string name = null, Core.ResourceType resourceType = default, SystemData systemData = null, LZRegistrationProperties properties = null)
        {
            return new LZRegistrationData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LZRegistrationProperties"/>. </summary>
        /// <param name="provisioningState"> The state that reflects the current stage in the creation, updating, or deletion process of the landing zone registration resource type. </param>
        /// <param name="existingTopLevelMgId"> The resource id of the top level management group. </param>
        /// <param name="existingLandingZoneConfigurationId"> The resource id of the associated landing zone configuration. </param>
        /// <param name="managedIdentity"> The managed identity to be assigned to this landing zone registration. </param>
        /// <returns> A new <see cref="Models.LZRegistrationProperties"/> instance for mocking. </returns>
        public static LZRegistrationProperties LZRegistrationProperties(ProvisioningState? provisioningState = null, ResourceIdentifier existingTopLevelMgId = null, ResourceIdentifier existingLandingZoneConfigurationId = null, ManagedIdentityProperties managedIdentity = null)
        {
            return new LZRegistrationProperties(provisioningState, existingTopLevelMgId, existingLandingZoneConfigurationId, managedIdentity, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RegulatedEnvironmentManagement.LZConfigurationData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="RegulatedEnvironmentManagement.LZConfigurationData"/> instance for mocking. </returns>
        public static LZConfigurationData LZConfigurationData(ResourceIdentifier id = null, string name = null, Core.ResourceType resourceType = default, SystemData systemData = null, LZConfigurationProperties properties = null)
        {
            return new LZConfigurationData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LZConfigurationProperties"/>. </summary>
        /// <param name="provisioningState"> The state that reflects the current stage in the creation, updating, or deletion process of the landing zone configuration. </param>
        /// <param name="authoringStatus"> The status that indicates the current phase of the configuration process for a deployment. </param>
        /// <param name="ddosProtectionCreationOption"> Parameter used to deploy a DDoS protection plan: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing DDoS protection plan. </param>
        /// <param name="existingDdosProtectionId"> The resource ID of the DDoS protection plan when reusing an existing one. </param>
        /// <param name="logAnalyticsWorkspaceCreationOption"> Parameter used to deploy a log analytics workspace: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing log analytics workspace. </param>
        /// <param name="existingLogAnalyticsWorkspaceId"> The resource ID of the log analytics workspace when reusing an existing one. </param>
        /// <param name="tags"> Tags are key-value pairs that can be assigned to a resource to organize and manage it more effectively. Example: {'name': 'a tag name', 'value': 'a tag value'}. </param>
        /// <param name="firewallCreationOption"> Parameter used for deploying a Firewall: Select 'No' to skip deployment, 'Standard' to deploy the Standard SKU, or 'Premium' to deploy the Premium SKU. </param>
        /// <param name="firewallSubnetCidrBlock"> The Firewall subnet address used for deploying a firewall. Specify the Firewall subnet using IPv4 CIDR notation. </param>
        /// <param name="gatewaySubnetCidrBlock"> The gateway subnet address used for deploying a virtual network. Specify the subnet using IPv4 CIDR notation. </param>
        /// <param name="logRetentionInDays"> Parameter to define the retention period for logs, in days. The minimum duration is 30 days and the maximum is 730 days. </param>
        /// <param name="hubNetworkCidrBlock"> The Virtual Network address. Specify the address using IPv4 CIDR notation. </param>
        /// <param name="azureBastionCreationOption"> Parameter used to deploy a Bastion: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing Bastion. </param>
        /// <param name="existingAzureBastionId"> The resource ID of the Bastion when reusing an existing one. </param>
        /// <param name="azureBastionSubnetCidrBlock"> The Bastion subnet address. Specify the address using IPv4 CIDR notation. </param>
        /// <param name="landingZonesMgChildren"> The child management groups of 'Landing Zones' management group and their assigned policies. </param>
        /// <param name="topLevelMgMetadataPolicyInitiativesAssignmentProperties"> The assigned policies of the parent management group. </param>
        /// <param name="landingZonesMgMetadataPolicyInitiativesAssignmentProperties"> The assigned policies of the 'Landing Zones' management group. </param>
        /// <param name="platformMgMetadataPolicyInitiativesAssignmentProperties"> The assigned policies of the 'Platform' management group. </param>
        /// <param name="platformManagementMgMetadataPolicyInitiativesAssignmentProperties"> The assigned policies of the 'Management' management group under 'Platform' management group. </param>
        /// <param name="platformConnectivityMgMetadataPolicyInitiativesAssignmentProperties"> The assigned policies of the 'Connectivity' management group under 'Platform' management group. </param>
        /// <param name="platformIdentityMgMetadataPolicyInitiativesAssignmentProperties"> The assigned policies of the 'Identity' management group under 'Platform' management group. </param>
        /// <param name="decommissionedMgMetadata"> The assigned policies of the 'Decommissioned' management group and indicator to create it or not. </param>
        /// <param name="sandboxMgMetadata"> The assigned policies of the 'Sandbox' management group and indicator to create it or not. </param>
        /// <param name="managedIdentity"> The managed identity to be assigned to this landing zone configuration. </param>
        /// <param name="platformMgChildren"> The names of the 'Platform' child management groups and their assigned policies, excluding the default ones: 'Connectivity', 'Identity', and 'Management'. </param>
        /// <param name="namingConventionFormula"> The default naming convention applied to all resources for this landing zone configuration. Example - {DeploymentPrefix}-Contoso-{ResourceTypeAbbreviation}{DeploymentSuffix}-{Environment}-testing. </param>
        /// <param name="customNamingConvention"> The custom naming convention applied to specific resource types for this landing zone configuration, which overrides the default naming convention for those resource types. Example - 'customNamingConvention': [{'resourceType': 'azureFirewalls', 'formula': '{DeploymentPrefix}-afwl-{DeploymentSuffix}'}]. </param>
        /// <returns> A new <see cref="Models.LZConfigurationProperties"/> instance for mocking. </returns>
        public static LZConfigurationProperties LZConfigurationProperties(ProvisioningState? provisioningState = null, AuthoringStatus? authoringStatus = null, ResourceCreationOption ddosProtectionCreationOption = default, ResourceIdentifier existingDdosProtectionId = null, ResourceCreationOption logAnalyticsWorkspaceCreationOption = default, ResourceIdentifier existingLogAnalyticsWorkspaceId = null, IEnumerable<Tags> tags = null, FirewallCreationOption firewallCreationOption = default, string firewallSubnetCidrBlock = null, string gatewaySubnetCidrBlock = null, long logRetentionInDays = default, string hubNetworkCidrBlock = null, ResourceCreationOption azureBastionCreationOption = default, ResourceIdentifier existingAzureBastionId = null, string azureBastionSubnetCidrBlock = null, IEnumerable<LZManagementGroupProperties> landingZonesMgChildren = null, IEnumerable<PolicyInitiativeAssignmentProperties> topLevelMgMetadataPolicyInitiativesAssignmentProperties = null, IEnumerable<PolicyInitiativeAssignmentProperties> landingZonesMgMetadataPolicyInitiativesAssignmentProperties = null, IEnumerable<PolicyInitiativeAssignmentProperties> platformMgMetadataPolicyInitiativesAssignmentProperties = null, IEnumerable<PolicyInitiativeAssignmentProperties> platformManagementMgMetadataPolicyInitiativesAssignmentProperties = null, IEnumerable<PolicyInitiativeAssignmentProperties> platformConnectivityMgMetadataPolicyInitiativesAssignmentProperties = null, IEnumerable<PolicyInitiativeAssignmentProperties> platformIdentityMgMetadataPolicyInitiativesAssignmentProperties = null, DecommissionedManagementGroupProperties decommissionedMgMetadata = null, SandboxManagementGroupProperties sandboxMgMetadata = null, ManagedIdentityProperties managedIdentity = null, IEnumerable<PlatformManagementGroupProperties> platformMgChildren = null, string namingConventionFormula = null, IEnumerable<CustomNamingConvention> customNamingConvention = null)
        {
            tags ??= new List<Tags>();
            landingZonesMgChildren ??= new List<LZManagementGroupProperties>();
            topLevelMgMetadataPolicyInitiativesAssignmentProperties ??= new List<PolicyInitiativeAssignmentProperties>();
            landingZonesMgMetadataPolicyInitiativesAssignmentProperties ??= new List<PolicyInitiativeAssignmentProperties>();
            platformMgMetadataPolicyInitiativesAssignmentProperties ??= new List<PolicyInitiativeAssignmentProperties>();
            platformManagementMgMetadataPolicyInitiativesAssignmentProperties ??= new List<PolicyInitiativeAssignmentProperties>();
            platformConnectivityMgMetadataPolicyInitiativesAssignmentProperties ??= new List<PolicyInitiativeAssignmentProperties>();
            platformIdentityMgMetadataPolicyInitiativesAssignmentProperties ??= new List<PolicyInitiativeAssignmentProperties>();
            platformMgChildren ??= new List<PlatformManagementGroupProperties>();
            customNamingConvention ??= new List<CustomNamingConvention>();

            return new LZConfigurationProperties(
                provisioningState,
                authoringStatus,
                ddosProtectionCreationOption,
                existingDdosProtectionId,
                logAnalyticsWorkspaceCreationOption,
                existingLogAnalyticsWorkspaceId,
                tags?.ToList(),
                firewallCreationOption,
                firewallSubnetCidrBlock,
                gatewaySubnetCidrBlock,
                logRetentionInDays,
                hubNetworkCidrBlock,
                azureBastionCreationOption,
                existingAzureBastionId,
                azureBastionSubnetCidrBlock,
                landingZonesMgChildren?.ToList(),
                topLevelMgMetadataPolicyInitiativesAssignmentProperties != null ? new ManagementGroupProperties(topLevelMgMetadataPolicyInitiativesAssignmentProperties?.ToList(), serializedAdditionalRawData: null) : null,
                landingZonesMgMetadataPolicyInitiativesAssignmentProperties != null ? new ManagementGroupProperties(landingZonesMgMetadataPolicyInitiativesAssignmentProperties?.ToList(), serializedAdditionalRawData: null) : null,
                platformMgMetadataPolicyInitiativesAssignmentProperties != null ? new ManagementGroupProperties(platformMgMetadataPolicyInitiativesAssignmentProperties?.ToList(), serializedAdditionalRawData: null) : null,
                platformManagementMgMetadataPolicyInitiativesAssignmentProperties != null ? new ManagementGroupProperties(platformManagementMgMetadataPolicyInitiativesAssignmentProperties?.ToList(), serializedAdditionalRawData: null) : null,
                platformConnectivityMgMetadataPolicyInitiativesAssignmentProperties != null ? new ManagementGroupProperties(platformConnectivityMgMetadataPolicyInitiativesAssignmentProperties?.ToList(), serializedAdditionalRawData: null) : null,
                platformIdentityMgMetadataPolicyInitiativesAssignmentProperties != null ? new ManagementGroupProperties(platformIdentityMgMetadataPolicyInitiativesAssignmentProperties?.ToList(), serializedAdditionalRawData: null) : null,
                decommissionedMgMetadata,
                sandboxMgMetadata,
                managedIdentity,
                platformMgChildren?.ToList(),
                namingConventionFormula,
                customNamingConvention?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GenerateLandingZoneContent"/>. </summary>
        /// <param name="infrastructureAsCodeOutputOptions"> The export options available for code generation. </param>
        /// <param name="existingManagementSubscriptionId"> Existing 'Management' subscription ID to be linked with this deployment when reusing instead of creating a new subscription. </param>
        /// <param name="existingIdentitySubscriptionId"> Existing 'Identity' subscription ID to be linked with this deployment when reusing instead of creating a new subscription. </param>
        /// <param name="existingConnectivitySubscriptionId"> Existing 'Connectivity' subscription ID to be linked with this deployment when reusing instead of creating a new subscription. </param>
        /// <param name="subscriptionBillingScope"> The complete resource ID of the billing scope linked to the EA, MCA, or MPA account where you want to create the subscription. </param>
        /// <param name="existingTopLevelMgParentId"> Optional parent for the management group hierarchy, serving as an intermediate root management group parent if specified. If left empty, the default will be to deploy under the tenant root management group. </param>
        /// <param name="deploymentPrefix"> The prefix that will be added to all resources created by this deployment. Use between 2 and 5 characters, consisting only of letters, digits, '-', '.', or '_'. No other special characters are supported. </param>
        /// <param name="deploymentSuffix"> The optional suffix that will be appended to all resources created by this deployment, maximum 5 characters. </param>
        /// <param name="topLevelMgDisplayName"> The display name assigned to the top management group of the landing zone deployment hierarchy. It is recommended to use unique names for each landing zone deployment. </param>
        /// <param name="deploymentLocation"> The Azure region where the landing zone will be deployed. All Azure regions are supported. </param>
        /// <param name="organization"> The name of the organization or agency for which the landing zone is being deployed. This is optional. </param>
        /// <param name="environment"> The environment where the landing zone is being deployed, such as ppe, prod, test, etc. </param>
        /// <returns> A new <see cref="Models.GenerateLandingZoneContent"/> instance for mocking. </returns>
        public static GenerateLandingZoneContent GenerateLandingZoneContent(InfrastructureAsCodeOutputOption infrastructureAsCodeOutputOptions = default, ResourceIdentifier existingManagementSubscriptionId = null, ResourceIdentifier existingIdentitySubscriptionId = null, ResourceIdentifier existingConnectivitySubscriptionId = null, string subscriptionBillingScope = null, ResourceIdentifier existingTopLevelMgParentId = null, string deploymentPrefix = null, string deploymentSuffix = null, string topLevelMgDisplayName = null, string deploymentLocation = null, string organization = null, string environment = null)
        {
            return new GenerateLandingZoneContent(
                infrastructureAsCodeOutputOptions,
                existingManagementSubscriptionId,
                existingIdentitySubscriptionId,
                existingConnectivitySubscriptionId,
                subscriptionBillingScope,
                existingTopLevelMgParentId,
                deploymentPrefix,
                deploymentSuffix,
                topLevelMgDisplayName,
                deploymentLocation,
                organization,
                environment,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GenerateLandingZoneResult"/>. </summary>
        /// <param name="topLevelMgDisplayName"> The parent management group name of the landing zone deployment. </param>
        /// <param name="landingZoneConfigurationName"> The name of the Landing zone configuration resource. </param>
        /// <param name="generatedCodeUri"> The url to access the generated code. </param>
        /// <param name="storageAccountName"> The storage account name to access the generated code. </param>
        /// <param name="containerName"> The storage account container to access the generated code. </param>
        /// <param name="blobName"> The storage account blob name to access the generated code. </param>
        /// <param name="generatedArmTemplate"> The generated code content in JSON string format. </param>
        /// <returns> A new <see cref="Models.GenerateLandingZoneResult"/> instance for mocking. </returns>
        public static GenerateLandingZoneResult GenerateLandingZoneResult(string topLevelMgDisplayName = null, string landingZoneConfigurationName = null, Uri generatedCodeUri = null, string storageAccountName = null, string containerName = null, string blobName = null, string generatedArmTemplate = null)
        {
            return new GenerateLandingZoneResult(
                topLevelMgDisplayName,
                landingZoneConfigurationName,
                generatedCodeUri,
                storageAccountName,
                containerName,
                blobName,
                generatedArmTemplate,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.UpdateAuthoringStatusResult"/>. </summary>
        /// <param name="landingZoneConfigurationName"> The name of the landing zone configuration resource. </param>
        /// <param name="authoringStatus"> The authoring status value to be updated. </param>
        /// <returns> A new <see cref="Models.UpdateAuthoringStatusResult"/> instance for mocking. </returns>
        public static UpdateAuthoringStatusResult UpdateAuthoringStatusResult(string landingZoneConfigurationName = null, AuthoringStatus authoringStatus = default)
        {
            return new UpdateAuthoringStatusResult(landingZoneConfigurationName, authoringStatus, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateLZConfigurationCopyResult"/>. </summary>
        /// <param name="copiedLandingZoneConfigurationId"> The ID of the duplicate landing zone configuration resource. </param>
        /// <returns> A new <see cref="Models.CreateLZConfigurationCopyResult"/> instance for mocking. </returns>
        public static CreateLZConfigurationCopyResult CreateLZConfigurationCopyResult(ResourceIdentifier copiedLandingZoneConfigurationId = null)
        {
            return new CreateLZConfigurationCopyResult(copiedLandingZoneConfigurationId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RegulatedEnvironmentManagement.LZAccountData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <returns> A new <see cref="RegulatedEnvironmentManagement.LZAccountData"/> instance for mocking. </returns>
        public static LZAccountData LZAccountData(ResourceIdentifier id = null, string name = null, Core.ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, LZAccountProperties properties = null, ManagedServiceIdentity identity = null)
        {
            tags ??= new Dictionary<string, string>();

            return new LZAccountData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                identity,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LZAccountProperties"/>. </summary>
        /// <param name="provisioningState"> The state that reflects the current stage in the creation, updating, or deletion process of the landing zone account. </param>
        /// <param name="storageAccount"> The storage account that will host the generated infrastructure as code (IaC) for a landing zone deployment. </param>
        /// <returns> A new <see cref="Models.LZAccountProperties"/> instance for mocking. </returns>
        public static LZAccountProperties LZAccountProperties(ProvisioningState? provisioningState = null, ResourceIdentifier storageAccount = null)
        {
            return new LZAccountProperties(provisioningState, storageAccount, serializedAdditionalRawData: null);
        }
    }
}
