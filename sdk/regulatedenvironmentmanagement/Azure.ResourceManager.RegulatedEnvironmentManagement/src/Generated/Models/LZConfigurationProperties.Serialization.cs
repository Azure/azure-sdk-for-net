// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RegulatedEnvironmentManagement.Models
{
    public partial class LZConfigurationProperties : IUtf8JsonSerializable, IJsonModel<LZConfigurationProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<LZConfigurationProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<LZConfigurationProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<LZConfigurationProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(LZConfigurationProperties)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(AuthoringStatus))
            {
                writer.WritePropertyName("authoringStatus"u8);
                writer.WriteStringValue(AuthoringStatus.Value.ToString());
            }
            writer.WritePropertyName("ddosProtectionCreationOption"u8);
            writer.WriteStringValue(DdosProtectionCreationOption.ToString());
            if (Optional.IsDefined(ExistingDdosProtectionId))
            {
                writer.WritePropertyName("existingDdosProtectionId"u8);
                writer.WriteStringValue(ExistingDdosProtectionId);
            }
            writer.WritePropertyName("logAnalyticsWorkspaceCreationOption"u8);
            writer.WriteStringValue(LogAnalyticsWorkspaceCreationOption.ToString());
            if (Optional.IsDefined(ExistingLogAnalyticsWorkspaceId))
            {
                writer.WritePropertyName("existingLogAnalyticsWorkspaceId"u8);
                writer.WriteStringValue(ExistingLogAnalyticsWorkspaceId);
            }
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartArray();
                foreach (var item in Tags)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("firewallCreationOption"u8);
            writer.WriteStringValue(FirewallCreationOption.ToString());
            if (Optional.IsDefined(FirewallSubnetCidrBlock))
            {
                writer.WritePropertyName("firewallSubnetCidrBlock"u8);
                writer.WriteStringValue(FirewallSubnetCidrBlock);
            }
            writer.WritePropertyName("gatewaySubnetCidrBlock"u8);
            writer.WriteStringValue(GatewaySubnetCidrBlock);
            writer.WritePropertyName("logRetentionInDays"u8);
            writer.WriteNumberValue(LogRetentionInDays);
            writer.WritePropertyName("hubNetworkCidrBlock"u8);
            writer.WriteStringValue(HubNetworkCidrBlock);
            writer.WritePropertyName("azureBastionCreationOption"u8);
            writer.WriteStringValue(AzureBastionCreationOption.ToString());
            if (Optional.IsDefined(ExistingAzureBastionId))
            {
                writer.WritePropertyName("existingAzureBastionId"u8);
                writer.WriteStringValue(ExistingAzureBastionId);
            }
            if (Optional.IsDefined(AzureBastionSubnetCidrBlock))
            {
                writer.WritePropertyName("azureBastionSubnetCidrBlock"u8);
                writer.WriteStringValue(AzureBastionSubnetCidrBlock);
            }
            if (Optional.IsCollectionDefined(LandingZonesMgChildren))
            {
                writer.WritePropertyName("landingZonesMgChildren"u8);
                writer.WriteStartArray();
                foreach (var item in LandingZonesMgChildren)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(TopLevelMgMetadata))
            {
                writer.WritePropertyName("topLevelMgMetadata"u8);
                writer.WriteObjectValue(TopLevelMgMetadata, options);
            }
            if (Optional.IsDefined(LandingZonesMgMetadata))
            {
                writer.WritePropertyName("landingZonesMgMetadata"u8);
                writer.WriteObjectValue(LandingZonesMgMetadata, options);
            }
            if (Optional.IsDefined(PlatformMgMetadata))
            {
                writer.WritePropertyName("platformMgMetadata"u8);
                writer.WriteObjectValue(PlatformMgMetadata, options);
            }
            if (Optional.IsDefined(PlatformManagementMgMetadata))
            {
                writer.WritePropertyName("platformManagementMgMetadata"u8);
                writer.WriteObjectValue(PlatformManagementMgMetadata, options);
            }
            if (Optional.IsDefined(PlatformConnectivityMgMetadata))
            {
                writer.WritePropertyName("platformConnectivityMgMetadata"u8);
                writer.WriteObjectValue(PlatformConnectivityMgMetadata, options);
            }
            if (Optional.IsDefined(PlatformIdentityMgMetadata))
            {
                writer.WritePropertyName("platformIdentityMgMetadata"u8);
                writer.WriteObjectValue(PlatformIdentityMgMetadata, options);
            }
            if (Optional.IsDefined(DecommissionedMgMetadata))
            {
                writer.WritePropertyName("decommissionedMgMetadata"u8);
                writer.WriteObjectValue(DecommissionedMgMetadata, options);
            }
            if (Optional.IsDefined(SandboxMgMetadata))
            {
                writer.WritePropertyName("sandboxMgMetadata"u8);
                writer.WriteObjectValue(SandboxMgMetadata, options);
            }
            writer.WritePropertyName("managedIdentity"u8);
            writer.WriteObjectValue(ManagedIdentity, options);
            if (Optional.IsCollectionDefined(PlatformMgChildren))
            {
                writer.WritePropertyName("platformMgChildren"u8);
                writer.WriteStartArray();
                foreach (var item in PlatformMgChildren)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(NamingConventionFormula))
            {
                writer.WritePropertyName("namingConventionFormula"u8);
                writer.WriteStringValue(NamingConventionFormula);
            }
            if (Optional.IsCollectionDefined(CustomNamingConvention))
            {
                writer.WritePropertyName("customNamingConvention"u8);
                writer.WriteStartArray();
                foreach (var item in CustomNamingConvention)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        LZConfigurationProperties IJsonModel<LZConfigurationProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<LZConfigurationProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(LZConfigurationProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeLZConfigurationProperties(document.RootElement, options);
        }

        internal static LZConfigurationProperties DeserializeLZConfigurationProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ProvisioningState? provisioningState = default;
            AuthoringStatus? authoringStatus = default;
            ResourceCreationOption ddosProtectionCreationOption = default;
            ResourceIdentifier existingDdosProtectionId = default;
            ResourceCreationOption logAnalyticsWorkspaceCreationOption = default;
            ResourceIdentifier existingLogAnalyticsWorkspaceId = default;
            IList<Tags> tags = default;
            FirewallCreationOption firewallCreationOption = default;
            string firewallSubnetCidrBlock = default;
            string gatewaySubnetCidrBlock = default;
            long logRetentionInDays = default;
            string hubNetworkCidrBlock = default;
            ResourceCreationOption azureBastionCreationOption = default;
            ResourceIdentifier existingAzureBastionId = default;
            string azureBastionSubnetCidrBlock = default;
            IList<LZManagementGroupProperties> landingZonesMgChildren = default;
            ManagementGroupProperties topLevelMgMetadata = default;
            ManagementGroupProperties landingZonesMgMetadata = default;
            ManagementGroupProperties platformMgMetadata = default;
            ManagementGroupProperties platformManagementMgMetadata = default;
            ManagementGroupProperties platformConnectivityMgMetadata = default;
            ManagementGroupProperties platformIdentityMgMetadata = default;
            DecommissionedManagementGroupProperties decommissionedMgMetadata = default;
            SandboxManagementGroupProperties sandboxMgMetadata = default;
            ManagedIdentityProperties managedIdentity = default;
            IList<PlatformManagementGroupProperties> platformMgChildren = default;
            string namingConventionFormula = default;
            IList<CustomNamingConvention> customNamingConvention = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new ProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("authoringStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    authoringStatus = new AuthoringStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ddosProtectionCreationOption"u8))
                {
                    ddosProtectionCreationOption = new ResourceCreationOption(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("existingDdosProtectionId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    existingDdosProtectionId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("logAnalyticsWorkspaceCreationOption"u8))
                {
                    logAnalyticsWorkspaceCreationOption = new ResourceCreationOption(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("existingLogAnalyticsWorkspaceId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    existingLogAnalyticsWorkspaceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Tags> array = new List<Tags>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.Tags.DeserializeTags(item, options));
                    }
                    tags = array;
                    continue;
                }
                if (property.NameEquals("firewallCreationOption"u8))
                {
                    firewallCreationOption = new FirewallCreationOption(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("firewallSubnetCidrBlock"u8))
                {
                    firewallSubnetCidrBlock = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("gatewaySubnetCidrBlock"u8))
                {
                    gatewaySubnetCidrBlock = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("logRetentionInDays"u8))
                {
                    logRetentionInDays = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("hubNetworkCidrBlock"u8))
                {
                    hubNetworkCidrBlock = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("azureBastionCreationOption"u8))
                {
                    azureBastionCreationOption = new ResourceCreationOption(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("existingAzureBastionId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    existingAzureBastionId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("azureBastionSubnetCidrBlock"u8))
                {
                    azureBastionSubnetCidrBlock = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("landingZonesMgChildren"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<LZManagementGroupProperties> array = new List<LZManagementGroupProperties>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(LZManagementGroupProperties.DeserializeLZManagementGroupProperties(item, options));
                    }
                    landingZonesMgChildren = array;
                    continue;
                }
                if (property.NameEquals("topLevelMgMetadata"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    topLevelMgMetadata = ManagementGroupProperties.DeserializeManagementGroupProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("landingZonesMgMetadata"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    landingZonesMgMetadata = ManagementGroupProperties.DeserializeManagementGroupProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("platformMgMetadata"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    platformMgMetadata = ManagementGroupProperties.DeserializeManagementGroupProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("platformManagementMgMetadata"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    platformManagementMgMetadata = ManagementGroupProperties.DeserializeManagementGroupProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("platformConnectivityMgMetadata"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    platformConnectivityMgMetadata = ManagementGroupProperties.DeserializeManagementGroupProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("platformIdentityMgMetadata"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    platformIdentityMgMetadata = ManagementGroupProperties.DeserializeManagementGroupProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("decommissionedMgMetadata"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    decommissionedMgMetadata = DecommissionedManagementGroupProperties.DeserializeDecommissionedManagementGroupProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("sandboxMgMetadata"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sandboxMgMetadata = SandboxManagementGroupProperties.DeserializeSandboxManagementGroupProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("managedIdentity"u8))
                {
                    managedIdentity = ManagedIdentityProperties.DeserializeManagedIdentityProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("platformMgChildren"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<PlatformManagementGroupProperties> array = new List<PlatformManagementGroupProperties>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(PlatformManagementGroupProperties.DeserializePlatformManagementGroupProperties(item, options));
                    }
                    platformMgChildren = array;
                    continue;
                }
                if (property.NameEquals("namingConventionFormula"u8))
                {
                    namingConventionFormula = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("customNamingConvention"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CustomNamingConvention> array = new List<CustomNamingConvention>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.CustomNamingConvention.DeserializeCustomNamingConvention(item, options));
                    }
                    customNamingConvention = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new LZConfigurationProperties(
                provisioningState,
                authoringStatus,
                ddosProtectionCreationOption,
                existingDdosProtectionId,
                logAnalyticsWorkspaceCreationOption,
                existingLogAnalyticsWorkspaceId,
                tags ?? new ChangeTrackingList<Tags>(),
                firewallCreationOption,
                firewallSubnetCidrBlock,
                gatewaySubnetCidrBlock,
                logRetentionInDays,
                hubNetworkCidrBlock,
                azureBastionCreationOption,
                existingAzureBastionId,
                azureBastionSubnetCidrBlock,
                landingZonesMgChildren ?? new ChangeTrackingList<LZManagementGroupProperties>(),
                topLevelMgMetadata,
                landingZonesMgMetadata,
                platformMgMetadata,
                platformManagementMgMetadata,
                platformConnectivityMgMetadata,
                platformIdentityMgMetadata,
                decommissionedMgMetadata,
                sandboxMgMetadata,
                managedIdentity,
                platformMgChildren ?? new ChangeTrackingList<PlatformManagementGroupProperties>(),
                namingConventionFormula,
                customNamingConvention ?? new ChangeTrackingList<CustomNamingConvention>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<LZConfigurationProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<LZConfigurationProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(LZConfigurationProperties)} does not support writing '{options.Format}' format.");
            }
        }

        LZConfigurationProperties IPersistableModel<LZConfigurationProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<LZConfigurationProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeLZConfigurationProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(LZConfigurationProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<LZConfigurationProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
