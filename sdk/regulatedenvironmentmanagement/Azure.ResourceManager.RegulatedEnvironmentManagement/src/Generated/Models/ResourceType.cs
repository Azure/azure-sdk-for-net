// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RegulatedEnvironmentManagement.Models
{
    /// <summary> The input values for resource types for custom naming conventions. </summary>
    public readonly partial struct ResourceType : IEquatable<ResourceType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ResourceType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ResourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AzureFirewallsValue = "azureFirewalls";
        private const string WorkspacesValue = "workspaces";
        private const string AutomationAccountsValue = "automationAccounts";
        private const string DashboardsValue = "dashboards";
        private const string UserAssignedIdentitiesValue = "userAssignedIdentities";
        private const string BastionHostsValue = "bastionHosts";
        private const string DdosProtectionPlansValue = "ddosProtectionPlans";
        private const string NetworkSecurityGroupsValue = "networkSecurityGroups";
        private const string VirtualNetworksValue = "virtualNetworks";
        private const string RouteTablesValue = "routeTables";

        /// <summary> Value when customer wants to provide a custom naming convention for Azure Firewall. </summary>
        public static ResourceType AzureFirewalls { get; } = new ResourceType(AzureFirewallsValue);
        /// <summary> Value when customer wants to provide a custom naming convention for Log Analytics workspace. </summary>
        public static ResourceType Workspaces { get; } = new ResourceType(WorkspacesValue);
        /// <summary> Value when customer wants to provide a custom naming convention for automation account. </summary>
        public static ResourceType AutomationAccounts { get; } = new ResourceType(AutomationAccountsValue);
        /// <summary> Value when customer wants to provide a custom naming convention for dashboard. </summary>
        public static ResourceType Dashboards { get; } = new ResourceType(DashboardsValue);
        /// <summary> Value when customer wants to provide a custom naming convention for managed identity. </summary>
        public static ResourceType UserAssignedIdentities { get; } = new ResourceType(UserAssignedIdentitiesValue);
        /// <summary> Value when customer wants to provide a custom naming convention for Bastion. </summary>
        public static ResourceType BastionHosts { get; } = new ResourceType(BastionHostsValue);
        /// <summary> Value when customer wants to provide a custom naming convention for DDoS protection plan. </summary>
        public static ResourceType DdosProtectionPlans { get; } = new ResourceType(DdosProtectionPlansValue);
        /// <summary> Value when customer wants to provide a custom naming convention for Bastion NSG. </summary>
        public static ResourceType NetworkSecurityGroups { get; } = new ResourceType(NetworkSecurityGroupsValue);
        /// <summary> Value when customer wants to provide a custom naming convention for virtual network. </summary>
        public static ResourceType VirtualNetworks { get; } = new ResourceType(VirtualNetworksValue);
        /// <summary> Value when customer wants to provide a custom naming convention for route table. </summary>
        public static ResourceType RouteTables { get; } = new ResourceType(RouteTablesValue);
        /// <summary> Determines if two <see cref="ResourceType"/> values are the same. </summary>
        public static bool operator ==(ResourceType left, ResourceType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ResourceType"/> values are not the same. </summary>
        public static bool operator !=(ResourceType left, ResourceType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ResourceType"/>. </summary>
        public static implicit operator ResourceType(string value) => new ResourceType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ResourceType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ResourceType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
