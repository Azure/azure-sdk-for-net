// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.RegulatedEnvironmentManagement.Models
{
    /// <summary> The properties of landing zone configuration resource type. </summary>
    public partial class LZConfigurationProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="LZConfigurationProperties"/>. </summary>
        /// <param name="ddosProtectionCreationOption"> Parameter used to deploy a DDoS protection plan: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing DDoS protection plan. </param>
        /// <param name="logAnalyticsWorkspaceCreationOption"> Parameter used to deploy a log analytics workspace: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing log analytics workspace. </param>
        /// <param name="firewallCreationOption"> Parameter used for deploying a Firewall: Select 'No' to skip deployment, 'Standard' to deploy the Standard SKU, or 'Premium' to deploy the Premium SKU. </param>
        /// <param name="gatewaySubnetCidrBlock"> The gateway subnet address used for deploying a virtual network. Specify the subnet using IPv4 CIDR notation. </param>
        /// <param name="logRetentionInDays"> Parameter to define the retention period for logs, in days. The minimum duration is 30 days and the maximum is 730 days. </param>
        /// <param name="hubNetworkCidrBlock"> The Virtual Network address. Specify the address using IPv4 CIDR notation. </param>
        /// <param name="azureBastionCreationOption"> Parameter used to deploy a Bastion: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing Bastion. </param>
        /// <param name="managedIdentity"> The managed identity to be assigned to this landing zone configuration. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="gatewaySubnetCidrBlock"/>, <paramref name="hubNetworkCidrBlock"/> or <paramref name="managedIdentity"/> is null. </exception>
        public LZConfigurationProperties(ResourceCreationOption ddosProtectionCreationOption, ResourceCreationOption logAnalyticsWorkspaceCreationOption, FirewallCreationOption firewallCreationOption, string gatewaySubnetCidrBlock, long logRetentionInDays, string hubNetworkCidrBlock, ResourceCreationOption azureBastionCreationOption, ManagedIdentityProperties managedIdentity)
        {
            Argument.AssertNotNull(gatewaySubnetCidrBlock, nameof(gatewaySubnetCidrBlock));
            Argument.AssertNotNull(hubNetworkCidrBlock, nameof(hubNetworkCidrBlock));
            Argument.AssertNotNull(managedIdentity, nameof(managedIdentity));

            DdosProtectionCreationOption = ddosProtectionCreationOption;
            LogAnalyticsWorkspaceCreationOption = logAnalyticsWorkspaceCreationOption;
            Tags = new ChangeTrackingList<Tags>();
            FirewallCreationOption = firewallCreationOption;
            GatewaySubnetCidrBlock = gatewaySubnetCidrBlock;
            LogRetentionInDays = logRetentionInDays;
            HubNetworkCidrBlock = hubNetworkCidrBlock;
            AzureBastionCreationOption = azureBastionCreationOption;
            LandingZonesMgChildren = new ChangeTrackingList<LZManagementGroupProperties>();
            ManagedIdentity = managedIdentity;
            PlatformMgChildren = new ChangeTrackingList<PlatformManagementGroupProperties>();
            CustomNamingConvention = new ChangeTrackingList<CustomNamingConvention>();
        }

        /// <summary> Initializes a new instance of <see cref="LZConfigurationProperties"/>. </summary>
        /// <param name="provisioningState"> The state that reflects the current stage in the creation, updating, or deletion process of the landing zone configuration. </param>
        /// <param name="authoringStatus"> The status that indicates the current phase of the configuration process for a deployment. </param>
        /// <param name="ddosProtectionCreationOption"> Parameter used to deploy a DDoS protection plan: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing DDoS protection plan. </param>
        /// <param name="existingDdosProtectionId"> The resource ID of the DDoS protection plan when reusing an existing one. </param>
        /// <param name="logAnalyticsWorkspaceCreationOption"> Parameter used to deploy a log analytics workspace: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing log analytics workspace. </param>
        /// <param name="existingLogAnalyticsWorkspaceId"> The resource ID of the log analytics workspace when reusing an existing one. </param>
        /// <param name="tags"> Tags are key-value pairs that can be assigned to a resource to organize and manage it more effectively. Example: {'name': 'a tag name', 'value': 'a tag value'}. </param>
        /// <param name="firewallCreationOption"> Parameter used for deploying a Firewall: Select 'No' to skip deployment, 'Standard' to deploy the Standard SKU, or 'Premium' to deploy the Premium SKU. </param>
        /// <param name="firewallSubnetCidrBlock"> The Firewall subnet address used for deploying a firewall. Specify the Firewall subnet using IPv4 CIDR notation. </param>
        /// <param name="gatewaySubnetCidrBlock"> The gateway subnet address used for deploying a virtual network. Specify the subnet using IPv4 CIDR notation. </param>
        /// <param name="logRetentionInDays"> Parameter to define the retention period for logs, in days. The minimum duration is 30 days and the maximum is 730 days. </param>
        /// <param name="hubNetworkCidrBlock"> The Virtual Network address. Specify the address using IPv4 CIDR notation. </param>
        /// <param name="azureBastionCreationOption"> Parameter used to deploy a Bastion: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing Bastion. </param>
        /// <param name="existingAzureBastionId"> The resource ID of the Bastion when reusing an existing one. </param>
        /// <param name="azureBastionSubnetCidrBlock"> The Bastion subnet address. Specify the address using IPv4 CIDR notation. </param>
        /// <param name="landingZonesMgChildren"> The child management groups of 'Landing Zones' management group and their assigned policies. </param>
        /// <param name="topLevelMgMetadata"> The assigned policies of the parent management group. </param>
        /// <param name="landingZonesMgMetadata"> The assigned policies of the 'Landing Zones' management group. </param>
        /// <param name="platformMgMetadata"> The assigned policies of the 'Platform' management group. </param>
        /// <param name="platformManagementMgMetadata"> The assigned policies of the 'Management' management group under 'Platform' management group. </param>
        /// <param name="platformConnectivityMgMetadata"> The assigned policies of the 'Connectivity' management group under 'Platform' management group. </param>
        /// <param name="platformIdentityMgMetadata"> The assigned policies of the 'Identity' management group under 'Platform' management group. </param>
        /// <param name="decommissionedMgMetadata"> The assigned policies of the 'Decommissioned' management group and indicator to create it or not. </param>
        /// <param name="sandboxMgMetadata"> The assigned policies of the 'Sandbox' management group and indicator to create it or not. </param>
        /// <param name="managedIdentity"> The managed identity to be assigned to this landing zone configuration. </param>
        /// <param name="platformMgChildren"> The names of the 'Platform' child management groups and their assigned policies, excluding the default ones: 'Connectivity', 'Identity', and 'Management'. </param>
        /// <param name="namingConventionFormula"> The default naming convention applied to all resources for this landing zone configuration. Example - {DeploymentPrefix}-Contoso-{ResourceTypeAbbreviation}{DeploymentSuffix}-{Environment}-testing. </param>
        /// <param name="customNamingConvention"> The custom naming convention applied to specific resource types for this landing zone configuration, which overrides the default naming convention for those resource types. Example - 'customNamingConvention': [{'resourceType': 'azureFirewalls', 'formula': '{DeploymentPrefix}-afwl-{DeploymentSuffix}'}]. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal LZConfigurationProperties(ProvisioningState? provisioningState, AuthoringStatus? authoringStatus, ResourceCreationOption ddosProtectionCreationOption, ResourceIdentifier existingDdosProtectionId, ResourceCreationOption logAnalyticsWorkspaceCreationOption, ResourceIdentifier existingLogAnalyticsWorkspaceId, IList<Tags> tags, FirewallCreationOption firewallCreationOption, string firewallSubnetCidrBlock, string gatewaySubnetCidrBlock, long logRetentionInDays, string hubNetworkCidrBlock, ResourceCreationOption azureBastionCreationOption, ResourceIdentifier existingAzureBastionId, string azureBastionSubnetCidrBlock, IList<LZManagementGroupProperties> landingZonesMgChildren, ManagementGroupProperties topLevelMgMetadata, ManagementGroupProperties landingZonesMgMetadata, ManagementGroupProperties platformMgMetadata, ManagementGroupProperties platformManagementMgMetadata, ManagementGroupProperties platformConnectivityMgMetadata, ManagementGroupProperties platformIdentityMgMetadata, DecommissionedManagementGroupProperties decommissionedMgMetadata, SandboxManagementGroupProperties sandboxMgMetadata, ManagedIdentityProperties managedIdentity, IList<PlatformManagementGroupProperties> platformMgChildren, string namingConventionFormula, IList<CustomNamingConvention> customNamingConvention, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProvisioningState = provisioningState;
            AuthoringStatus = authoringStatus;
            DdosProtectionCreationOption = ddosProtectionCreationOption;
            ExistingDdosProtectionId = existingDdosProtectionId;
            LogAnalyticsWorkspaceCreationOption = logAnalyticsWorkspaceCreationOption;
            ExistingLogAnalyticsWorkspaceId = existingLogAnalyticsWorkspaceId;
            Tags = tags;
            FirewallCreationOption = firewallCreationOption;
            FirewallSubnetCidrBlock = firewallSubnetCidrBlock;
            GatewaySubnetCidrBlock = gatewaySubnetCidrBlock;
            LogRetentionInDays = logRetentionInDays;
            HubNetworkCidrBlock = hubNetworkCidrBlock;
            AzureBastionCreationOption = azureBastionCreationOption;
            ExistingAzureBastionId = existingAzureBastionId;
            AzureBastionSubnetCidrBlock = azureBastionSubnetCidrBlock;
            LandingZonesMgChildren = landingZonesMgChildren;
            TopLevelMgMetadata = topLevelMgMetadata;
            LandingZonesMgMetadata = landingZonesMgMetadata;
            PlatformMgMetadata = platformMgMetadata;
            PlatformManagementMgMetadata = platformManagementMgMetadata;
            PlatformConnectivityMgMetadata = platformConnectivityMgMetadata;
            PlatformIdentityMgMetadata = platformIdentityMgMetadata;
            DecommissionedMgMetadata = decommissionedMgMetadata;
            SandboxMgMetadata = sandboxMgMetadata;
            ManagedIdentity = managedIdentity;
            PlatformMgChildren = platformMgChildren;
            NamingConventionFormula = namingConventionFormula;
            CustomNamingConvention = customNamingConvention;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="LZConfigurationProperties"/> for deserialization. </summary>
        internal LZConfigurationProperties()
        {
        }

        /// <summary> The state that reflects the current stage in the creation, updating, or deletion process of the landing zone configuration. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary> The status that indicates the current phase of the configuration process for a deployment. </summary>
        public AuthoringStatus? AuthoringStatus { get; }
        /// <summary> Parameter used to deploy a DDoS protection plan: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing DDoS protection plan. </summary>
        public ResourceCreationOption DdosProtectionCreationOption { get; set; }
        /// <summary> The resource ID of the DDoS protection plan when reusing an existing one. </summary>
        public ResourceIdentifier ExistingDdosProtectionId { get; set; }
        /// <summary> Parameter used to deploy a log analytics workspace: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing log analytics workspace. </summary>
        public ResourceCreationOption LogAnalyticsWorkspaceCreationOption { get; set; }
        /// <summary> The resource ID of the log analytics workspace when reusing an existing one. </summary>
        public ResourceIdentifier ExistingLogAnalyticsWorkspaceId { get; set; }
        /// <summary> Tags are key-value pairs that can be assigned to a resource to organize and manage it more effectively. Example: {'name': 'a tag name', 'value': 'a tag value'}. </summary>
        public IList<Tags> Tags { get; }
        /// <summary> Parameter used for deploying a Firewall: Select 'No' to skip deployment, 'Standard' to deploy the Standard SKU, or 'Premium' to deploy the Premium SKU. </summary>
        public FirewallCreationOption FirewallCreationOption { get; set; }
        /// <summary> The Firewall subnet address used for deploying a firewall. Specify the Firewall subnet using IPv4 CIDR notation. </summary>
        public string FirewallSubnetCidrBlock { get; set; }
        /// <summary> The gateway subnet address used for deploying a virtual network. Specify the subnet using IPv4 CIDR notation. </summary>
        public string GatewaySubnetCidrBlock { get; set; }
        /// <summary> Parameter to define the retention period for logs, in days. The minimum duration is 30 days and the maximum is 730 days. </summary>
        public long LogRetentionInDays { get; set; }
        /// <summary> The Virtual Network address. Specify the address using IPv4 CIDR notation. </summary>
        public string HubNetworkCidrBlock { get; set; }
        /// <summary> Parameter used to deploy a Bastion: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing Bastion. </summary>
        public ResourceCreationOption AzureBastionCreationOption { get; set; }
        /// <summary> The resource ID of the Bastion when reusing an existing one. </summary>
        public ResourceIdentifier ExistingAzureBastionId { get; set; }
        /// <summary> The Bastion subnet address. Specify the address using IPv4 CIDR notation. </summary>
        public string AzureBastionSubnetCidrBlock { get; set; }
        /// <summary> The child management groups of 'Landing Zones' management group and their assigned policies. </summary>
        public IList<LZManagementGroupProperties> LandingZonesMgChildren { get; }
        /// <summary> The assigned policies of the parent management group. </summary>
        internal ManagementGroupProperties TopLevelMgMetadata { get; set; }
        /// <summary> Array of policy initiatives applied to the management group. </summary>
        public IList<PolicyInitiativeAssignmentProperties> TopLevelMgMetadataPolicyInitiativesAssignmentProperties
        {
            get => TopLevelMgMetadata is null ? default : TopLevelMgMetadata.PolicyInitiativesAssignmentProperties;
            set => TopLevelMgMetadata = new ManagementGroupProperties(value);
        }

        /// <summary> The assigned policies of the 'Landing Zones' management group. </summary>
        internal ManagementGroupProperties LandingZonesMgMetadata { get; set; }
        /// <summary> Array of policy initiatives applied to the management group. </summary>
        public IList<PolicyInitiativeAssignmentProperties> LandingZonesMgMetadataPolicyInitiativesAssignmentProperties
        {
            get => LandingZonesMgMetadata is null ? default : LandingZonesMgMetadata.PolicyInitiativesAssignmentProperties;
            set => LandingZonesMgMetadata = new ManagementGroupProperties(value);
        }

        /// <summary> The assigned policies of the 'Platform' management group. </summary>
        internal ManagementGroupProperties PlatformMgMetadata { get; set; }
        /// <summary> Array of policy initiatives applied to the management group. </summary>
        public IList<PolicyInitiativeAssignmentProperties> PlatformMgMetadataPolicyInitiativesAssignmentProperties
        {
            get => PlatformMgMetadata is null ? default : PlatformMgMetadata.PolicyInitiativesAssignmentProperties;
            set => PlatformMgMetadata = new ManagementGroupProperties(value);
        }

        /// <summary> The assigned policies of the 'Management' management group under 'Platform' management group. </summary>
        internal ManagementGroupProperties PlatformManagementMgMetadata { get; set; }
        /// <summary> Array of policy initiatives applied to the management group. </summary>
        public IList<PolicyInitiativeAssignmentProperties> PlatformManagementMgMetadataPolicyInitiativesAssignmentProperties
        {
            get => PlatformManagementMgMetadata is null ? default : PlatformManagementMgMetadata.PolicyInitiativesAssignmentProperties;
            set => PlatformManagementMgMetadata = new ManagementGroupProperties(value);
        }

        /// <summary> The assigned policies of the 'Connectivity' management group under 'Platform' management group. </summary>
        internal ManagementGroupProperties PlatformConnectivityMgMetadata { get; set; }
        /// <summary> Array of policy initiatives applied to the management group. </summary>
        public IList<PolicyInitiativeAssignmentProperties> PlatformConnectivityMgMetadataPolicyInitiativesAssignmentProperties
        {
            get => PlatformConnectivityMgMetadata is null ? default : PlatformConnectivityMgMetadata.PolicyInitiativesAssignmentProperties;
            set => PlatformConnectivityMgMetadata = new ManagementGroupProperties(value);
        }

        /// <summary> The assigned policies of the 'Identity' management group under 'Platform' management group. </summary>
        internal ManagementGroupProperties PlatformIdentityMgMetadata { get; set; }
        /// <summary> Array of policy initiatives applied to the management group. </summary>
        public IList<PolicyInitiativeAssignmentProperties> PlatformIdentityMgMetadataPolicyInitiativesAssignmentProperties
        {
            get => PlatformIdentityMgMetadata is null ? default : PlatformIdentityMgMetadata.PolicyInitiativesAssignmentProperties;
            set => PlatformIdentityMgMetadata = new ManagementGroupProperties(value);
        }

        /// <summary> The assigned policies of the 'Decommissioned' management group and indicator to create it or not. </summary>
        public DecommissionedManagementGroupProperties DecommissionedMgMetadata { get; set; }
        /// <summary> The assigned policies of the 'Sandbox' management group and indicator to create it or not. </summary>
        public SandboxManagementGroupProperties SandboxMgMetadata { get; set; }
        /// <summary> The managed identity to be assigned to this landing zone configuration. </summary>
        public ManagedIdentityProperties ManagedIdentity { get; set; }
        /// <summary> The names of the 'Platform' child management groups and their assigned policies, excluding the default ones: 'Connectivity', 'Identity', and 'Management'. </summary>
        public IList<PlatformManagementGroupProperties> PlatformMgChildren { get; }
        /// <summary> The default naming convention applied to all resources for this landing zone configuration. Example - {DeploymentPrefix}-Contoso-{ResourceTypeAbbreviation}{DeploymentSuffix}-{Environment}-testing. </summary>
        public string NamingConventionFormula { get; set; }
        /// <summary> The custom naming convention applied to specific resource types for this landing zone configuration, which overrides the default naming convention for those resource types. Example - 'customNamingConvention': [{'resourceType': 'azureFirewalls', 'formula': '{DeploymentPrefix}-afwl-{DeploymentSuffix}'}]. </summary>
        public IList<CustomNamingConvention> CustomNamingConvention { get; }
    }
}
