// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RegulatedEnvironmentManagement.Models
{
    /// <summary> The authoring status for a landing zone configuration. </summary>
    public readonly partial struct AuthoringStatus : IEquatable<AuthoringStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AuthoringStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AuthoringStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AuthoringValue = "Authoring";
        private const string ReadyForUseValue = "ReadyForUse";
        private const string DisabledValue = "Disabled";

        /// <summary> 'Authoring' is the default status when a create configuration request is made. In this state, the Landing zone configuration can be modified. </summary>
        public static AuthoringStatus Authoring { get; } = new AuthoringStatus(AuthoringValue);
        /// <summary> 'ReadyForUse' status is set when the configuration updates are finished, and the configuration is ready for code generation or deployment. </summary>
        public static AuthoringStatus ReadyForUse { get; } = new AuthoringStatus(ReadyForUseValue);
        /// <summary> 'Disabled' status is set when the landing zone configuration is no longer in use. </summary>
        public static AuthoringStatus Disabled { get; } = new AuthoringStatus(DisabledValue);
        /// <summary> Determines if two <see cref="AuthoringStatus"/> values are the same. </summary>
        public static bool operator ==(AuthoringStatus left, AuthoringStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AuthoringStatus"/> values are not the same. </summary>
        public static bool operator !=(AuthoringStatus left, AuthoringStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AuthoringStatus"/>. </summary>
        public static implicit operator AuthoringStatus(string value) => new AuthoringStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AuthoringStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AuthoringStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
