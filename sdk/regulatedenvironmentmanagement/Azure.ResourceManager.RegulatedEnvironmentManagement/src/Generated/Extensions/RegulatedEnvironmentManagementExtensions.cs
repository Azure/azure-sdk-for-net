// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.ResourceManager.RegulatedEnvironmentManagement.Mocking;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.RegulatedEnvironmentManagement
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.RegulatedEnvironmentManagement. </summary>
    public static partial class RegulatedEnvironmentManagementExtensions
    {
        private static MockableRegulatedEnvironmentManagementArmClient GetMockableRegulatedEnvironmentManagementArmClient(ArmClient client)
        {
            return client.GetCachedClient(client0 => new MockableRegulatedEnvironmentManagementArmClient(client0));
        }

        private static MockableRegulatedEnvironmentManagementResourceGroupResource GetMockableRegulatedEnvironmentManagementResourceGroupResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableRegulatedEnvironmentManagementResourceGroupResource(client, resource.Id));
        }

        private static MockableRegulatedEnvironmentManagementSubscriptionResource GetMockableRegulatedEnvironmentManagementSubscriptionResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableRegulatedEnvironmentManagementSubscriptionResource(client, resource.Id));
        }

        /// <summary>
        /// Gets an object representing a <see cref="LZAccountResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="LZAccountResource.CreateResourceIdentifier" /> to create a <see cref="LZAccountResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableRegulatedEnvironmentManagementArmClient.GetLZAccountResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="LZAccountResource"/> object. </returns>
        public static LZAccountResource GetLZAccountResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableRegulatedEnvironmentManagementArmClient(client).GetLZAccountResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="LZConfigurationResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="LZConfigurationResource.CreateResourceIdentifier" /> to create a <see cref="LZConfigurationResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableRegulatedEnvironmentManagementArmClient.GetLZConfigurationResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="LZConfigurationResource"/> object. </returns>
        public static LZConfigurationResource GetLZConfigurationResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableRegulatedEnvironmentManagementArmClient(client).GetLZConfigurationResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="LZRegistrationResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="LZRegistrationResource.CreateResourceIdentifier" /> to create a <see cref="LZRegistrationResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableRegulatedEnvironmentManagementArmClient.GetLZRegistrationResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="LZRegistrationResource"/> object. </returns>
        public static LZRegistrationResource GetLZRegistrationResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableRegulatedEnvironmentManagementArmClient(client).GetLZRegistrationResource(id);
        }

        /// <summary>
        /// Gets a collection of LZAccountResources in the ResourceGroupResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableRegulatedEnvironmentManagementResourceGroupResource.GetLZAccounts()"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of LZAccountResources and their operations over a LZAccountResource. </returns>
        public static LZAccountCollection GetLZAccounts(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableRegulatedEnvironmentManagementResourceGroupResource(resourceGroupResource).GetLZAccounts();
        }

        /// <summary>
        /// Get a landing zone account.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LandingZoneAccountResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-02-27-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LZAccountResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableRegulatedEnvironmentManagementResourceGroupResource.GetLZAccountAsync(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="landingZoneAccountName"> The landing zone account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="landingZoneAccountName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="landingZoneAccountName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<LZAccountResource>> GetLZAccountAsync(this ResourceGroupResource resourceGroupResource, string landingZoneAccountName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableRegulatedEnvironmentManagementResourceGroupResource(resourceGroupResource).GetLZAccountAsync(landingZoneAccountName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a landing zone account.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LandingZoneAccountResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-02-27-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LZAccountResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableRegulatedEnvironmentManagementResourceGroupResource.GetLZAccount(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="landingZoneAccountName"> The landing zone account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="landingZoneAccountName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="landingZoneAccountName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<LZAccountResource> GetLZAccount(this ResourceGroupResource resourceGroupResource, string landingZoneAccountName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableRegulatedEnvironmentManagementResourceGroupResource(resourceGroupResource).GetLZAccount(landingZoneAccountName, cancellationToken);
        }

        /// <summary>
        /// List the landing zone accounts within a subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Sovereign/landingZoneAccounts</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LandingZoneAccountResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-02-27-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LZAccountResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableRegulatedEnvironmentManagementSubscriptionResource.GetLZAccounts(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> An async collection of <see cref="LZAccountResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<LZAccountResource> GetLZAccountsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableRegulatedEnvironmentManagementSubscriptionResource(subscriptionResource).GetLZAccountsAsync(cancellationToken);
        }

        /// <summary>
        /// List the landing zone accounts within a subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Sovereign/landingZoneAccounts</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LandingZoneAccountResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-02-27-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LZAccountResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableRegulatedEnvironmentManagementSubscriptionResource.GetLZAccounts(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="LZAccountResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<LZAccountResource> GetLZAccounts(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableRegulatedEnvironmentManagementSubscriptionResource(subscriptionResource).GetLZAccounts(cancellationToken);
        }

        /// <summary>
        /// List the landing zone configurations within a subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LandingZoneConfigurationResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-02-27-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LZConfigurationResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableRegulatedEnvironmentManagementSubscriptionResource.GetLZConfigurations(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="landingZoneAccountName"> The landing zone account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="landingZoneAccountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="landingZoneAccountName"/> is null. </exception>
        /// <returns> An async collection of <see cref="LZConfigurationResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<LZConfigurationResource> GetLZConfigurationsAsync(this SubscriptionResource subscriptionResource, string landingZoneAccountName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableRegulatedEnvironmentManagementSubscriptionResource(subscriptionResource).GetLZConfigurationsAsync(landingZoneAccountName, cancellationToken);
        }

        /// <summary>
        /// List the landing zone configurations within a subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LandingZoneConfigurationResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-02-27-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LZConfigurationResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableRegulatedEnvironmentManagementSubscriptionResource.GetLZConfigurations(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="landingZoneAccountName"> The landing zone account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="landingZoneAccountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="landingZoneAccountName"/> is null. </exception>
        /// <returns> A collection of <see cref="LZConfigurationResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<LZConfigurationResource> GetLZConfigurations(this SubscriptionResource subscriptionResource, string landingZoneAccountName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableRegulatedEnvironmentManagementSubscriptionResource(subscriptionResource).GetLZConfigurations(landingZoneAccountName, cancellationToken);
        }

        /// <summary>
        /// List the landing zone registrations within a subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneRegistrations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LandingZoneRegistrationResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-02-27-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LZRegistrationResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableRegulatedEnvironmentManagementSubscriptionResource.GetLZRegistrations(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="landingZoneAccountName"> The landing zone account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="landingZoneAccountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="landingZoneAccountName"/> is null. </exception>
        /// <returns> An async collection of <see cref="LZRegistrationResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<LZRegistrationResource> GetLZRegistrationsAsync(this SubscriptionResource subscriptionResource, string landingZoneAccountName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableRegulatedEnvironmentManagementSubscriptionResource(subscriptionResource).GetLZRegistrationsAsync(landingZoneAccountName, cancellationToken);
        }

        /// <summary>
        /// List the landing zone registrations within a subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneRegistrations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LandingZoneRegistrationResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-02-27-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LZRegistrationResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableRegulatedEnvironmentManagementSubscriptionResource.GetLZRegistrations(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="landingZoneAccountName"> The landing zone account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="landingZoneAccountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="landingZoneAccountName"/> is null. </exception>
        /// <returns> A collection of <see cref="LZRegistrationResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<LZRegistrationResource> GetLZRegistrations(this SubscriptionResource subscriptionResource, string landingZoneAccountName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableRegulatedEnvironmentManagementSubscriptionResource(subscriptionResource).GetLZRegistrations(landingZoneAccountName, cancellationToken);
        }
    }
}
