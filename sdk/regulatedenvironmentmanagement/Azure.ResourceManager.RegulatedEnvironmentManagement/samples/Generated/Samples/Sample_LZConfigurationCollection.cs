// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.RegulatedEnvironmentManagement.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.RegulatedEnvironmentManagement.Samples
{
    public partial class Sample_LZConfigurationCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_LandingZoneConfigurationOperationsCreate()
        {
            // Generated from example definition: 2025-02-27-preview/LandingZoneConfigurationOperations_Create.json
            // this example is just showing the usage of "LandingZoneConfigurationResource_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LZAccountResource created on azure
            // for more information of creating LZAccountResource, please refer to the document of LZAccountResource
            string subscriptionId = "00000000-0000-0000-0000-000000000001";
            string resourceGroupName = "rg-examplegroup";
            string landingZoneAccountName = "ExampleLZA";
            ResourceIdentifier lzAccountResourceId = LZAccountResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, landingZoneAccountName);
            LZAccountResource lzAccount = client.GetLZAccountResource(lzAccountResourceId);

            // get the collection of this LZConfigurationResource
            LZConfigurationCollection collection = lzAccount.GetLZConfigurations();

            // invoke the operation
            string landingZoneConfigurationName = "ExampleLZC";
            LZConfigurationData data = new LZConfigurationData
            {
                Properties = new LZConfigurationProperties(
                ResourceCreationOption.UseExisting,
                ResourceCreationOption.UseExisting,
                FirewallCreationOption.Premium,
                "10.20.252.0/24",
                540L,
                "10.20.0.0/16",
                ResourceCreationOption.UseExisting,
                new ManagedIdentityProperties(ManagedIdentityResourceType.UserAssigned)
                {
                    UserAssignedIdentityResourceId = new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/rg-examplegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/mi-example"),
                })
                {
                    ExistingDdosProtectionId = new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/rg-examplegroup/providers/Microsoft.Network/ddosProtectionPlans/ddos-example"),
                    ExistingLogAnalyticsWorkspaceId = new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/rg-examplegroup/providers/Microsoft.OperationalInsights/workspaces/log-example"),
                    Tags = {new Tags("tag1")
{
Value = "Lorem",
}, new Tags("tag2")
{
Value = "Ipsum",
}},
                    FirewallSubnetCidrBlock = "10.20.254.0/24",
                    ExistingAzureBastionId = new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/rg-examplegroup/providers/Microsoft.Network/bastionHosts/bas-example"),
                    LandingZonesMgChildren = {new LZManagementGroupProperties(Array.Empty<PolicyInitiativeAssignmentProperties>(), "Corp"), new LZManagementGroupProperties(Array.Empty<PolicyInitiativeAssignmentProperties>(), "Online"), new LZManagementGroupProperties(new PolicyInitiativeAssignmentProperties[]
{
new PolicyInitiativeAssignmentProperties("/providers/Microsoft.Authorization/policySetDefinitions/03de05a4-c324-4ccd-882f-a814ea8ab9ea", new Dictionary<string, BinaryData>())
}, "Confidential Corp"), new LZManagementGroupProperties(new PolicyInitiativeAssignmentProperties[]
{
new PolicyInitiativeAssignmentProperties("/providers/Microsoft.Authorization/policySetDefinitions/03de05a4-c324-4ccd-882f-a814ea8ab9ea", new Dictionary<string, BinaryData>())
}, "Confidential Online")},
                    TopLevelMgMetadataPolicyInitiativesAssignmentProperties = {new PolicyInitiativeAssignmentProperties("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523", new Dictionary<string, BinaryData>
{
["listOfAllowedLocations"] = BinaryData.FromObjectAsJson(new object[]
{
"swedencentral",
"eastus2",
"uksouth"
})
})},
                    LandingZonesMgMetadataPolicyInitiativesAssignmentProperties = {new PolicyInitiativeAssignmentProperties("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523", new Dictionary<string, BinaryData>
{
["listOfAllowedLocations"] = BinaryData.FromObjectAsJson(new object[]
{
"swedencentral"
})
})},
                    PlatformMgMetadataPolicyInitiativesAssignmentProperties = {new PolicyInitiativeAssignmentProperties("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523", new Dictionary<string, BinaryData>
{
["listOfAllowedLocations"] = BinaryData.FromObjectAsJson(new object[]
{
"swedencentral"
})
})},
                    PlatformManagementMgMetadataPolicyInitiativesAssignmentProperties = {new PolicyInitiativeAssignmentProperties("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523", new Dictionary<string, BinaryData>
{
["listOfAllowedLocations"] = BinaryData.FromObjectAsJson(new object[]
{
"swedencentral"
})
})},
                    PlatformConnectivityMgMetadataPolicyInitiativesAssignmentProperties = {new PolicyInitiativeAssignmentProperties("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523", new Dictionary<string, BinaryData>
{
["listOfAllowedLocations"] = BinaryData.FromObjectAsJson(new object[]
{
"swedencentral"
})
})},
                    PlatformIdentityMgMetadataPolicyInitiativesAssignmentProperties = {new PolicyInitiativeAssignmentProperties("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523", new Dictionary<string, BinaryData>
{
["listOfAllowedLocations"] = BinaryData.FromObjectAsJson(new object[]
{
"swedencentral"
})
})},
                    DecommissionedMgMetadata = new DecommissionedManagementGroupProperties(new PolicyInitiativeAssignmentProperties[]
            {
new PolicyInitiativeAssignmentProperties("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523", new Dictionary<string, BinaryData>
{
["listOfAllowedLocations"] = BinaryData.FromObjectAsJson(new object[]
{
"swedencentral"
})
})
            }, true),
                    SandboxMgMetadata = new SandboxManagementGroupProperties(new PolicyInitiativeAssignmentProperties[]
            {
new PolicyInitiativeAssignmentProperties("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523", new Dictionary<string, BinaryData>
{
["listOfAllowedLocations"] = BinaryData.FromObjectAsJson(new object[]
{
"swedencentral"
})
})
            }, true),
                    PlatformMgChildren = {new PlatformManagementGroupProperties(new PolicyInitiativeAssignmentProperties[]
{
new PolicyInitiativeAssignmentProperties("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523", new Dictionary<string, BinaryData>
{
["listOfAllowedLocations"] = BinaryData.FromObjectAsJson(new object[]
{
"swedencentral"
})
})
}, "Telemetry"), new PlatformManagementGroupProperties(new PolicyInitiativeAssignmentProperties[]
{
new PolicyInitiativeAssignmentProperties("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523", new Dictionary<string, BinaryData>
{
["listOfAllowedLocations"] = BinaryData.FromObjectAsJson(new object[]
{
"swedencentral"
})
})
}, "Security")},
                    NamingConventionFormula = "{ResourceTypeAbbreviation}-{DeploymentPrefix}-Contoso-{DeploymentSuffix}-{Environment}",
                    CustomNamingConvention = { new CustomNamingConvention(Models.ResourceType.DdosProtectionPlans, "{ResourceTypeAbbreviation}-{DeploymentPrefix}-Contoso-{DeploymentSuffix}") },
                },
            };
            ArmOperation<LZConfigurationResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, landingZoneConfigurationName, data);
            LZConfigurationResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            LZConfigurationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_LandingZoneConfigurationOperationsGet()
        {
            // Generated from example definition: 2025-02-27-preview/LandingZoneConfigurationOperations_Get.json
            // this example is just showing the usage of "LandingZoneConfigurationResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LZAccountResource created on azure
            // for more information of creating LZAccountResource, please refer to the document of LZAccountResource
            string subscriptionId = "00000000-0000-0000-0000-000000000001";
            string resourceGroupName = "rgsovereign";
            string landingZoneAccountName = "SampleLZA";
            ResourceIdentifier lzAccountResourceId = LZAccountResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, landingZoneAccountName);
            LZAccountResource lzAccount = client.GetLZAccountResource(lzAccountResourceId);

            // get the collection of this LZConfigurationResource
            LZConfigurationCollection collection = lzAccount.GetLZConfigurations();

            // invoke the operation
            string landingZoneConfigurationName = "SampleLZC";
            LZConfigurationResource result = await collection.GetAsync(landingZoneConfigurationName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            LZConfigurationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_LandingZoneConfigurationOperationsListByResourceGroup()
        {
            // Generated from example definition: 2025-02-27-preview/LandingZoneConfigurationOperations_ListByResourceGroup.json
            // this example is just showing the usage of "LandingZoneConfigurationResource_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LZAccountResource created on azure
            // for more information of creating LZAccountResource, please refer to the document of LZAccountResource
            string subscriptionId = "00000000-0000-0000-0000-000000000001";
            string resourceGroupName = "ExampleResourceGroup";
            string landingZoneAccountName = "ExampleLZA";
            ResourceIdentifier lzAccountResourceId = LZAccountResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, landingZoneAccountName);
            LZAccountResource lzAccount = client.GetLZAccountResource(lzAccountResourceId);

            // get the collection of this LZConfigurationResource
            LZConfigurationCollection collection = lzAccount.GetLZConfigurations();

            // invoke the operation and iterate over the result
            await foreach (LZConfigurationResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                LZConfigurationData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_LandingZoneConfigurationOperationsGet()
        {
            // Generated from example definition: 2025-02-27-preview/LandingZoneConfigurationOperations_Get.json
            // this example is just showing the usage of "LandingZoneConfigurationResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LZAccountResource created on azure
            // for more information of creating LZAccountResource, please refer to the document of LZAccountResource
            string subscriptionId = "00000000-0000-0000-0000-000000000001";
            string resourceGroupName = "rgsovereign";
            string landingZoneAccountName = "SampleLZA";
            ResourceIdentifier lzAccountResourceId = LZAccountResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, landingZoneAccountName);
            LZAccountResource lzAccount = client.GetLZAccountResource(lzAccountResourceId);

            // get the collection of this LZConfigurationResource
            LZConfigurationCollection collection = lzAccount.GetLZConfigurations();

            // invoke the operation
            string landingZoneConfigurationName = "SampleLZC";
            bool result = await collection.ExistsAsync(landingZoneConfigurationName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_LandingZoneConfigurationOperationsGet()
        {
            // Generated from example definition: 2025-02-27-preview/LandingZoneConfigurationOperations_Get.json
            // this example is just showing the usage of "LandingZoneConfigurationResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LZAccountResource created on azure
            // for more information of creating LZAccountResource, please refer to the document of LZAccountResource
            string subscriptionId = "00000000-0000-0000-0000-000000000001";
            string resourceGroupName = "rgsovereign";
            string landingZoneAccountName = "SampleLZA";
            ResourceIdentifier lzAccountResourceId = LZAccountResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, landingZoneAccountName);
            LZAccountResource lzAccount = client.GetLZAccountResource(lzAccountResourceId);

            // get the collection of this LZConfigurationResource
            LZConfigurationCollection collection = lzAccount.GetLZConfigurations();

            // invoke the operation
            string landingZoneConfigurationName = "SampleLZC";
            NullableResponse<LZConfigurationResource> response = await collection.GetIfExistsAsync(landingZoneConfigurationName);
            LZConfigurationResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                LZConfigurationData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
