// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ChangeAnalysis.Models
{
    public partial class ChangeProperties
    {
        internal static ChangeProperties DeserializeChangeProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<ResourceIdentifier> resourceId = default;
            Core.Optional<DateTimeOffset> timeStamp = default;
            Core.Optional<IReadOnlyList<string>> initiatedByList = default;
            Core.Optional<ChangeType> changeType = default;
            Core.Optional<IReadOnlyList<PropertyChange>> propertyChanges = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("resourceId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("timeStamp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    timeStamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("initiatedByList"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    initiatedByList = array;
                    continue;
                }
                if (property.NameEquals("changeType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    changeType = new ChangeType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("propertyChanges"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<PropertyChange> array = new List<PropertyChange>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(PropertyChange.DeserializePropertyChange(item));
                    }
                    propertyChanges = array;
                    continue;
                }
            }
            return new ChangeProperties(resourceId.Value, Core.Optional.ToNullable(timeStamp), Core.Optional.ToList(initiatedByList), Core.Optional.ToNullable(changeType), Core.Optional.ToList(propertyChanges));
        }
    }
}
