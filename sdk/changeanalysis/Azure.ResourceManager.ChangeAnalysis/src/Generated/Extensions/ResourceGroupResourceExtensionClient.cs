// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.ChangeAnalysis.Models;

namespace Azure.ResourceManager.ChangeAnalysis
{
    /// <summary> A class to add extension methods to ResourceGroupResource. </summary>
    internal partial class ResourceGroupResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _changesClientDiagnostics;
        private ChangesRestOperations _changesRestClient;

        /// <summary> Initializes a new instance of the <see cref="ResourceGroupResourceExtensionClient"/> class for mocking. </summary>
        protected ResourceGroupResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ResourceGroupResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal ResourceGroupResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics ChangesClientDiagnostics => _changesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ChangeAnalysis", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private ChangesRestOperations ChangesRestClient => _changesRestClient ??= new ChangesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// List the changes of a resource group within the specified time range. Customer data will always be masked.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ChangeAnalysis/changes
        /// Operation Id: Changes_ListChangesByResourceGroup
        /// </summary>
        /// <param name="options"> A property bag which contains all the query and header parameters of this method. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DetectedChangeData" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DetectedChangeData> GetChangesByResourceGroupAsync(ChangeAnalysisExtensionsGetChangesByResourceGroupOptions options, CancellationToken cancellationToken = default)
        {
            async Task<Page<DetectedChangeData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ChangesClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetChangesByResourceGroup");
                scope.Start();
                try
                {
                    var response = await ChangesRestClient.ListChangesByResourceGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, options.StartTime, options.EndTime, options.SkipToken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DetectedChangeData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ChangesClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetChangesByResourceGroup");
                scope.Start();
                try
                {
                    var response = await ChangesRestClient.ListChangesByResourceGroupNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, options.StartTime, options.EndTime, options.SkipToken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List the changes of a resource group within the specified time range. Customer data will always be masked.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ChangeAnalysis/changes
        /// Operation Id: Changes_ListChangesByResourceGroup
        /// </summary>
        /// <param name="options"> A property bag which contains all the query and header parameters of this method. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DetectedChangeData" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DetectedChangeData> GetChangesByResourceGroup(ChangeAnalysisExtensionsGetChangesByResourceGroupOptions options, CancellationToken cancellationToken = default)
        {
            Page<DetectedChangeData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ChangesClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetChangesByResourceGroup");
                scope.Start();
                try
                {
                    var response = ChangesRestClient.ListChangesByResourceGroup(Id.SubscriptionId, Id.ResourceGroupName, options.StartTime, options.EndTime, options.SkipToken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DetectedChangeData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ChangesClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetChangesByResourceGroup");
                scope.Start();
                try
                {
                    var response = ChangesRestClient.ListChangesByResourceGroupNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, options.StartTime, options.EndTime, options.SkipToken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
