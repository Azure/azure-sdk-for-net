// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using Azure.AI.Speech.Transcription; // Added explicit using

namespace Azure.AI.Speech.Transcription.Samples
{
    public partial class Samples_TranscriptionClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Transcription_Transcribe_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TranscriptionClient client = new TranscriptionClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.Transcribe(content, "multipart/form-data");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("combinedPhrases")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("offsetMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Transcription_Transcribe_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TranscriptionClient client = new TranscriptionClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.TranscribeAsync(content, "multipart/form-data");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("combinedPhrases")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("offsetMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Transcription_Transcribe_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TranscriptionClient client = new TranscriptionClient(endpoint, credential);

            TranscribeRequestContent body = new TranscribeRequestContent();
            Response<TranscriptionResult> response = client.Transcribe(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Transcription_Transcribe_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TranscriptionClient client = new TranscriptionClient(endpoint, credential);

            TranscribeRequestContent body = new TranscribeRequestContent();
            Response<TranscriptionResult> response = await client.TranscribeAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Transcription_Transcribe_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TranscriptionClient client = new TranscriptionClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                definition = new
                {
                    audioUrl = "http://localhost:3000",
                    locales = new object[]
            {
"<locales>"
            },
                    models = new
                    {
                        key = "http://localhost:3000",
                    },
                    profanityFilterMode = "None",
                    diarization = new
                    {
                        enabled = true,
                        maxSpeakers = 1234,
                    },
                    channels = new object[]
            {
1234
            },
                    enhancedMode = new
                    {
                        enabled = true,
                        task = "<task>",
                        targetLanguage = "<targetLanguage>",
                        prompt = new object[]
            {
"<prompt>"
            },
                    },
                    phraseList = new
                    {
                        phrases = new object[]
            {
"<phrases>"
            },
                        biasingWeight = 123.45F,
                    },
                },
                audio = File.OpenRead("<filePath>"),
            });
            Response response = client.Transcribe(content, "multipart/form-data");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("combinedPhrases")[0].GetProperty("channel").ToString());
            Console.WriteLine(result.GetProperty("combinedPhrases")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("channel").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("speaker").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("offsetMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("words")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("words")[0].GetProperty("offsetMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("words")[0].GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Transcription_Transcribe_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TranscriptionClient client = new TranscriptionClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                definition = new
                {
                    audioUrl = "http://localhost:3000",
                    locales = new object[]
            {
"<locales>"
            },
                    models = new
                    {
                        key = "http://localhost:3000",
                    },
                    profanityFilterMode = "None",
                    diarization = new
                    {
                        enabled = true,
                        maxSpeakers = 1234,
                    },
                    channels = new object[]
            {
1234
            },
                    enhancedMode = new
                    {
                        enabled = true,
                        task = "<task>",
                        targetLanguage = "<targetLanguage>",
                        prompt = new object[]
            {
"<prompt>"
            },
                    },
                    phraseList = new
                    {
                        phrases = new object[]
            {
"<phrases>"
            },
                        biasingWeight = 123.45F,
                    },
                },
                audio = File.OpenRead("<filePath>"),
            });
            Response response = await client.TranscribeAsync(content, "multipart/form-data");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("combinedPhrases")[0].GetProperty("channel").ToString());
            Console.WriteLine(result.GetProperty("combinedPhrases")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("channel").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("speaker").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("offsetMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("words")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("words")[0].GetProperty("offsetMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("words")[0].GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Transcription_Transcribe_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TranscriptionClient client = new TranscriptionClient(endpoint, credential);

            TranscribeRequestContent body = new TranscribeRequestContent
            {
                Options = new TranscriptionOptions
                {
                    AudioUrl = new Uri("http://localhost:3000"),
                    Locales = { "<locales>" },
                    Models =
{
["key"] = new Uri("http://localhost:3000")
},
                    ProfanityFilterMode = ProfanityFilterMode.None,
                    Diarization = new TranscriptionDiarizationOptions
                    {
                        Enabled = true,
                        MaxSpeakers = 1234,
                    },
                    Channels = { 1234 },
                    EnhancedMode = new EnhancedModeProperties
                    {
                        Enabled = true,
                        Task = "<task>",
                        TargetLanguage = "<targetLanguage>",
                        Prompt = { "<prompt>" },
                    },
                    PhraseList = new PhraseListProperties
                    {
                        Phrases = { "<phrases>" },
                        BiasingWeight = 123.45F,
                    },
                },
                Audio = null,
            };
            Response<TranscriptionResult> response = client.Transcribe(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Transcription_Transcribe_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TranscriptionClient client = new TranscriptionClient(endpoint, credential);

            TranscribeRequestContent body = new TranscribeRequestContent
            {
                Options = new TranscriptionOptions
                {
                    AudioUrl = new Uri("http://localhost:3000"),
                    Locales = { "<locales>" },
                    Models =
{
["key"] = new Uri("http://localhost:3000")
},
                    ProfanityFilterMode = ProfanityFilterMode.None,
                    Diarization = new TranscriptionDiarizationOptions
                    {
                        Enabled = true,
                        MaxSpeakers = 1234,
                    },
                    Channels = { 1234 },
                    EnhancedMode = new EnhancedModeProperties
                    {
                        Enabled = true,
                        Task = "<task>",
                        TargetLanguage = "<targetLanguage>",
                        Prompt = { "<prompt>" },
                    },
                    PhraseList = new PhraseListProperties
                    {
                        Phrases = { "<phrases>" },
                        BiasingWeight = 123.45F,
                    },
                },
                Audio = null,
            };
            Response<TranscriptionResult> response = await client.TranscribeAsync(body);
        }
    }
}
