// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Vision.CustomVision.Training.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Entry associating a metadata to an image.
    /// </summary>
    public partial class ImageMetadataUpdateEntry
    {
        /// <summary>
        /// Initializes a new instance of the ImageMetadataUpdateEntry class.
        /// </summary>
        public ImageMetadataUpdateEntry()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ImageMetadataUpdateEntry class.
        /// </summary>
        /// <param name="imageId">Id of the image.</param>
        /// <param name="status">Status of the metadata update. Possible values
        /// include: 'OK', 'ErrorImageNotFound', 'ErrorLimitExceed',
        /// 'ErrorUnknown'</param>
        /// <param name="metadata">Metadata of the image.</param>
        public ImageMetadataUpdateEntry(System.Guid imageId = default(System.Guid), string status = default(string), IDictionary<string, string> metadata = default(IDictionary<string, string>))
        {
            ImageId = imageId;
            Status = status;
            Metadata = metadata;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets id of the image.
        /// </summary>
        [JsonProperty(PropertyName = "imageId")]
        public System.Guid ImageId { get; set; }

        /// <summary>
        /// Gets or sets status of the metadata update. Possible values
        /// include: 'OK', 'ErrorImageNotFound', 'ErrorLimitExceed',
        /// 'ErrorUnknown'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets metadata of the image.
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public IDictionary<string, string> Metadata { get; set; }

    }
}
