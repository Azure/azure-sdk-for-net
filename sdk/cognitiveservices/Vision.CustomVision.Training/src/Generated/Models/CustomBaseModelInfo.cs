// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Vision.CustomVision.Training.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class CustomBaseModelInfo
    {
        /// <summary>
        /// Initializes a new instance of the CustomBaseModelInfo class.
        /// </summary>
        public CustomBaseModelInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CustomBaseModelInfo class.
        /// </summary>
        /// <param name="projectId">Project Id of the previously trained
        /// project to be used for current iteration's training.</param>
        /// <param name="iterationId">Iteration Id of the previously trained
        /// project to be used for current iteration's training.</param>
        public CustomBaseModelInfo(System.Guid projectId, System.Guid iterationId)
        {
            ProjectId = projectId;
            IterationId = iterationId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets project Id of the previously trained project to be
        /// used for current iteration's training.
        /// </summary>
        [JsonProperty(PropertyName = "projectId")]
        public System.Guid ProjectId { get; set; }

        /// <summary>
        /// Gets or sets iteration Id of the previously trained project to be
        /// used for current iteration's training.
        /// </summary>
        [JsonProperty(PropertyName = "iterationId")]
        public System.Guid IterationId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}
