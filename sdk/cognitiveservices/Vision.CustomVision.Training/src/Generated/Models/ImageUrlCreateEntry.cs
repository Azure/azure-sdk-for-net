// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Vision.CustomVision.Training.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ImageUrlCreateEntry
    {
        /// <summary>
        /// Initializes a new instance of the ImageUrlCreateEntry class.
        /// </summary>
        public ImageUrlCreateEntry()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ImageUrlCreateEntry class.
        /// </summary>
        /// <param name="url">Url of the image.</param>
        public ImageUrlCreateEntry(string url, IList<System.Guid> tagIds = default(IList<System.Guid>), IList<Region> regions = default(IList<Region>))
        {
            Url = url;
            TagIds = tagIds;
            Regions = regions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets url of the image.
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tagIds")]
        public IList<System.Guid> TagIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regions")]
        public IList<Region> Regions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Url == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Url");
            }
            if (Regions != null)
            {
                foreach (var element in Regions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
