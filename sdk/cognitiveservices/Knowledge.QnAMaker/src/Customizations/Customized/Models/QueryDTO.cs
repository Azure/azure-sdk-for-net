// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Knowledge.QnAMaker.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// POST body schema to query the knowledgebase.
    /// </summary>
    public partial class QueryDTO
    {
        /// <summary>
        /// Initializes a new instance of the QueryDTO class.
        /// </summary>
        /// <param name="qnaId">Exact qnaId to fetch from the knowledgebase,
        /// this field takes priority over question.</param>
        /// <param name="question">User question to query against the knowledge
        /// base.</param>
        /// <param name="top">Max number of answers to be returned for the
        /// question.</param>
        /// <param name="userId">Unique identifier for the user.</param>
        /// <param name="isTest">Query against the test index.</param>
        /// <param name="scoreThreshold">Threshold for answers returned based
        /// on score.</param>
        /// <param name="context">Context object with previous QnA's
        /// information.</param>
        /// <param name="rankerType">Optional field. Set to 'QuestionOnly' for
        /// using a question only Ranker.</param>
        /// <param name="strictFilters">Find only answers that contain these
        /// metadata.</param>
        /// <param name="strictFiltersCompoundOperationType">Optional field.
        /// Set to OR for using OR as Operation for Strict Filters. Possible
        /// values include: 'AND', 'OR'</param>
        public QueryDTO(string qnaId = default(string), string question = default(string), int? top = default(int?), string userId = default(string), bool? isTest = default(bool?), double? scoreThreshold = default(double?), QueryDTOContext context = default(QueryDTOContext), string rankerType = default(string), IList<MetadataDTO> strictFilters = default(IList<MetadataDTO>), string strictFiltersCompoundOperationType = default(string), QueryDTOAnswerSpanRequest answerSpanRequest = default(QueryDTOAnswerSpanRequest))
            :this(qnaId, question, top, userId, isTest, scoreThreshold,context,rankerType,strictFilters,strictFiltersCompoundOperationType)
        {            
            AnswerSpanRequest = answerSpanRequest;
        }

        /// <summary>
        /// Gets or sets to configure Answer span prediction feature.
        /// </summary>
        [JsonProperty(PropertyName = "answerSpanRequest")]
        public QueryDTOAnswerSpanRequest AnswerSpanRequest { get; set; }
    }
}
