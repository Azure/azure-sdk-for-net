// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Knowledge.QnAMaker.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Post body schema for CreateKb operation.
    /// </summary>
    public partial class CreateKbDTO
    {
        /// <summary>
        /// Initializes a new instance of the CreateKbDTO class.
        /// </summary>
        public CreateKbDTO()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CreateKbDTO class.
        /// </summary>
        /// <param name="name">Friendly name for the knowledgebase.</param>
        /// <param name="qnaList">List of Q-A (QnADTO) to be added to the
        /// knowledgebase. Q-A Ids are assigned by the service and should be
        /// omitted.</param>
        /// <param name="urls">List of URLs to be used for extracting
        /// Q-A.</param>
        /// <param name="files">List of files from which to Extract
        /// Q-A.</param>
        public CreateKbDTO(string name, IList<QnADTO> qnaList = default(IList<QnADTO>), IList<string> urls = default(IList<string>), IList<FileDTO> files = default(IList<FileDTO>))
        {
            Name = name;
            QnaList = qnaList;
            Urls = urls;
            Files = files;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets friendly name for the knowledgebase.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets list of Q-A (QnADTO) to be added to the knowledgebase.
        /// Q-A Ids are assigned by the service and should be omitted.
        /// </summary>
        [JsonProperty(PropertyName = "qnaList")]
        public IList<QnADTO> QnaList { get; set; }

        /// <summary>
        /// Gets or sets list of URLs to be used for extracting Q-A.
        /// </summary>
        [JsonProperty(PropertyName = "urls")]
        public IList<string> Urls { get; set; }

        /// <summary>
        /// Gets or sets list of files from which to Extract Q-A.
        /// </summary>
        [JsonProperty(PropertyName = "files")]
        public IList<FileDTO> Files { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Name != null)
            {
                if (Name.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 100);
                }
                if (Name.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 1);
                }
            }
            if (QnaList != null)
            {
                foreach (var element in QnaList)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Files != null)
            {
                foreach (var element1 in Files)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
