// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Knowledge.QnAMaker.Models
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// QnADTO - Either QnaId or QnADTO needs to be present in a PromptDTO
    /// object
    /// </summary>
    public partial class PromptDTOQna : QnADTO
    {
        /// <summary>
        /// Initializes a new instance of the PromptDTOQna class.
        /// </summary>
        public PromptDTOQna()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PromptDTOQna class.
        /// </summary>
        /// <param name="answer">Answer text</param>
        /// <param name="questions">List of questions associated with the
        /// answer.</param>
        /// <param name="id">Unique id for the Q-A.</param>
        /// <param name="source">Source from which Q-A was indexed. eg.
        /// https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs</param>
        /// <param name="metadata">List of metadata associated with the
        /// answer.</param>
        /// <param name="context">Context of a QnA</param>
        /// <param name="lastUpdatedTimestamp">Timestamp when the QnA was last
        /// updated.</param>
        public PromptDTOQna(string answer, IList<string> questions, int? id = default(int?), string source = default(string), IList<MetadataDTO> metadata = default(IList<MetadataDTO>), QnADTOContext context = default(QnADTOContext), string lastUpdatedTimestamp = default(string))
            : base(answer, questions, id, source, metadata, context, lastUpdatedTimestamp)
        {
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
