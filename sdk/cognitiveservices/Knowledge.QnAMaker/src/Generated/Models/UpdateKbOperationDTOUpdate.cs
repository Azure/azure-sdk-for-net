// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Knowledge.QnAMaker.Models
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// An instance of UpdateKbContentsDTO for Update Operation
    /// </summary>
    public partial class UpdateKbOperationDTOUpdate : UpdateKbContentsDTO
    {
        /// <summary>
        /// Initializes a new instance of the UpdateKbOperationDTOUpdate class.
        /// </summary>
        public UpdateKbOperationDTOUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UpdateKbOperationDTOUpdate class.
        /// </summary>
        /// <param name="name">Friendly name for the knowledgebase.</param>
        /// <param name="qnaList">List of Q-A (UpdateQnaDTO) to be added to the
        /// knowledgebase.</param>
        /// <param name="urls">List of existing URLs to be refreshed. The
        /// content will be extracted again and re-indexed.</param>
        /// <param name="defaultAnswer">Default answer sent to user if no good
        /// match is found in the KB.</param>
        public UpdateKbOperationDTOUpdate(string name = default(string), IList<UpdateQnaDTO> qnaList = default(IList<UpdateQnaDTO>), IList<string> urls = default(IList<string>), string defaultAnswer = default(string))
            : base(name, qnaList, urls, defaultAnswer)
        {
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
