// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Knowledge.QnAMaker.Models
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Context object of the QnA
    /// </summary>
    public partial class QnASearchResultContext : ContextDTO
    {
        /// <summary>
        /// Initializes a new instance of the QnASearchResultContext class.
        /// </summary>
        public QnASearchResultContext()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the QnASearchResultContext class.
        /// </summary>
        /// <param name="isContextOnly">To mark if a prompt is relevant only
        /// with a previous question or not.
        /// true - Do not include this QnA as search result for queries without
        /// context
        /// false - ignores context and includes this QnA in search
        /// result</param>
        /// <param name="prompts">List of prompts associated with the
        /// answer.</param>
        public QnASearchResultContext(bool? isContextOnly = default(bool?), IList<PromptDTO> prompts = default(IList<PromptDTO>))
            : base(isContextOnly, prompts)
        {
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
