// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CognitiveServices.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The api properties for special APIs.
    /// </summary>
    public partial class CognitiveServicesAccountApiProperties
    {
        /// <summary>
        /// Initializes a new instance of the
        /// CognitiveServicesAccountApiProperties class.
        /// </summary>
        public CognitiveServicesAccountApiProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// CognitiveServicesAccountApiProperties class.
        /// </summary>
        /// <param name="qnaRuntimeEndpoint">(QnAMaker Only) The runtime
        /// endpoint of QnAMaker.</param>
        /// <param name="statisticsEnabled">(Bing Search Only) The flag to
        /// enable statistics of Bing Search.</param>
        /// <param name="eventHubConnectionString">(Personalization Only) The
        /// flag to enable statistics of Bing Search.</param>
        /// <param name="storageAccountConnectionString">(Personalization Only)
        /// The storage account connection string.</param>
        public CognitiveServicesAccountApiProperties(string qnaRuntimeEndpoint = default(string), bool? statisticsEnabled = default(bool?), string eventHubConnectionString = default(string), string storageAccountConnectionString = default(string))
        {
            QnaRuntimeEndpoint = qnaRuntimeEndpoint;
            StatisticsEnabled = statisticsEnabled;
            EventHubConnectionString = eventHubConnectionString;
            StorageAccountConnectionString = storageAccountConnectionString;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets (QnAMaker Only) The runtime endpoint of QnAMaker.
        /// </summary>
        [JsonProperty(PropertyName = "qnaRuntimeEndpoint")]
        public string QnaRuntimeEndpoint { get; set; }

        /// <summary>
        /// Gets or sets (Bing Search Only) The flag to enable statistics of
        /// Bing Search.
        /// </summary>
        [JsonProperty(PropertyName = "statisticsEnabled")]
        public bool? StatisticsEnabled { get; set; }

        /// <summary>
        /// Gets or sets (Personalization Only) The flag to enable statistics
        /// of Bing Search.
        /// </summary>
        [JsonProperty(PropertyName = "eventHubConnectionString")]
        public string EventHubConnectionString { get; set; }

        /// <summary>
        /// Gets or sets (Personalization Only) The storage account connection
        /// string.
        /// </summary>
        [JsonProperty(PropertyName = "storageAccountConnectionString")]
        public string StorageAccountConnectionString { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (EventHubConnectionString != null)
            {
                if (EventHubConnectionString.Length > 1000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "EventHubConnectionString", 1000);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(EventHubConnectionString, "^( *)Endpoint=sb://(.*);( *)SharedAccessKeyName=(.*);( *)SharedAccessKey=(.*)$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "EventHubConnectionString", "^( *)Endpoint=sb://(.*);( *)SharedAccessKeyName=(.*);( *)SharedAccessKey=(.*)$");
                }
            }
            if (StorageAccountConnectionString != null)
            {
                if (StorageAccountConnectionString.Length > 1000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "StorageAccountConnectionString", 1000);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(StorageAccountConnectionString, "^(( *)DefaultEndpointsProtocol=(http|https)( *);( *))?AccountName=(.*)AccountKey=(.*)EndpointSuffix=(.*)$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "StorageAccountConnectionString", "^(( *)DefaultEndpointsProtocol=(http|https)( *);( *))?AccountName=(.*)AccountKey=(.*)EndpointSuffix=(.*)$");
                }
            }
        }
    }
}
