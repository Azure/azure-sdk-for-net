// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CognitiveServices
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DeploymentsOperations.
    /// </summary>
    public static partial class DeploymentsOperationsExtensions
    {
            /// <summary>
            /// Gets the deployments associated with the Cognitive Services account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of Cognitive Services account.
            /// </param>
            public static IPage<Deployment> List(this IDeploymentsOperations operations, string resourceGroupName, string accountName)
            {
                return operations.ListAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the deployments associated with the Cognitive Services account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of Cognitive Services account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Deployment>> ListAsync(this IDeploymentsOperations operations, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the specified deployments associated with the Cognitive Services
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of Cognitive Services account.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of the deployment associated with the Cognitive Services Account
            /// </param>
            public static Deployment Get(this IDeploymentsOperations operations, string resourceGroupName, string accountName, string deploymentName)
            {
                return operations.GetAsync(resourceGroupName, accountName, deploymentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified deployments associated with the Cognitive Services
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of Cognitive Services account.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of the deployment associated with the Cognitive Services Account
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Deployment> GetAsync(this IDeploymentsOperations operations, string resourceGroupName, string accountName, string deploymentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, deploymentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the state of specified deployments associated with the Cognitive
            /// Services account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of Cognitive Services account.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of the deployment associated with the Cognitive Services Account
            /// </param>
            /// <param name='deployment'>
            /// The deployment properties.
            /// </param>
            public static Deployment CreateOrUpdate(this IDeploymentsOperations operations, string resourceGroupName, string accountName, string deploymentName, Deployment deployment)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, accountName, deploymentName, deployment).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the state of specified deployments associated with the Cognitive
            /// Services account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of Cognitive Services account.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of the deployment associated with the Cognitive Services Account
            /// </param>
            /// <param name='deployment'>
            /// The deployment properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Deployment> CreateOrUpdateAsync(this IDeploymentsOperations operations, string resourceGroupName, string accountName, string deploymentName, Deployment deployment, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, accountName, deploymentName, deployment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified deployment associated with the Cognitive Services
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of Cognitive Services account.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of the deployment associated with the Cognitive Services Account
            /// </param>
            public static void Delete(this IDeploymentsOperations operations, string resourceGroupName, string accountName, string deploymentName)
            {
                operations.DeleteAsync(resourceGroupName, accountName, deploymentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified deployment associated with the Cognitive Services
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of Cognitive Services account.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of the deployment associated with the Cognitive Services Account
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IDeploymentsOperations operations, string resourceGroupName, string accountName, string deploymentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, deploymentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update the state of specified deployments associated with the Cognitive
            /// Services account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of Cognitive Services account.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of the deployment associated with the Cognitive Services Account
            /// </param>
            /// <param name='deployment'>
            /// The deployment properties.
            /// </param>
            public static Deployment BeginCreateOrUpdate(this IDeploymentsOperations operations, string resourceGroupName, string accountName, string deploymentName, Deployment deployment)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, accountName, deploymentName, deployment).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the state of specified deployments associated with the Cognitive
            /// Services account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of Cognitive Services account.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of the deployment associated with the Cognitive Services Account
            /// </param>
            /// <param name='deployment'>
            /// The deployment properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Deployment> BeginCreateOrUpdateAsync(this IDeploymentsOperations operations, string resourceGroupName, string accountName, string deploymentName, Deployment deployment, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, accountName, deploymentName, deployment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified deployment associated with the Cognitive Services
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of Cognitive Services account.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of the deployment associated with the Cognitive Services Account
            /// </param>
            public static void BeginDelete(this IDeploymentsOperations operations, string resourceGroupName, string accountName, string deploymentName)
            {
                operations.BeginDeleteAsync(resourceGroupName, accountName, deploymentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified deployment associated with the Cognitive Services
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of Cognitive Services account.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of the deployment associated with the Cognitive Services Account
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IDeploymentsOperations operations, string resourceGroupName, string accountName, string deploymentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, accountName, deploymentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the deployments associated with the Cognitive Services account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Deployment> ListNext(this IDeploymentsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the deployments associated with the Cognitive Services account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Deployment>> ListNextAsync(this IDeploymentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
