// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Vision.Face.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for FaceAttributeType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum FaceAttributeType
    {
        [EnumMember(Value = "age")]
        Age,
        [EnumMember(Value = "gender")]
        Gender,
        [EnumMember(Value = "headPose")]
        HeadPose,
        [EnumMember(Value = "smile")]
        Smile,
        [EnumMember(Value = "facialHair")]
        FacialHair,
        [EnumMember(Value = "glasses")]
        Glasses,
        [EnumMember(Value = "emotion")]
        Emotion,
        [EnumMember(Value = "hair")]
        Hair,
        [EnumMember(Value = "makeup")]
        Makeup,
        [EnumMember(Value = "occlusion")]
        Occlusion,
        [EnumMember(Value = "accessories")]
        Accessories,
        [EnumMember(Value = "blur")]
        Blur,
        [EnumMember(Value = "exposure")]
        Exposure,
        [EnumMember(Value = "noise")]
        Noise,
        [EnumMember(Value = "mask")]
        Mask
    }
    internal static class FaceAttributeTypeEnumExtension
    {
        internal static string ToSerializedValue(this FaceAttributeType? value)
        {
            return value == null ? null : ((FaceAttributeType)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this FaceAttributeType value)
        {
            switch( value )
            {
                case FaceAttributeType.Age:
                    return "age";
                case FaceAttributeType.Gender:
                    return "gender";
                case FaceAttributeType.HeadPose:
                    return "headPose";
                case FaceAttributeType.Smile:
                    return "smile";
                case FaceAttributeType.FacialHair:
                    return "facialHair";
                case FaceAttributeType.Glasses:
                    return "glasses";
                case FaceAttributeType.Emotion:
                    return "emotion";
                case FaceAttributeType.Hair:
                    return "hair";
                case FaceAttributeType.Makeup:
                    return "makeup";
                case FaceAttributeType.Occlusion:
                    return "occlusion";
                case FaceAttributeType.Accessories:
                    return "accessories";
                case FaceAttributeType.Blur:
                    return "blur";
                case FaceAttributeType.Exposure:
                    return "exposure";
                case FaceAttributeType.Noise:
                    return "noise";
                case FaceAttributeType.Mask:
                    return "mask";
            }
            return null;
        }

        internal static FaceAttributeType? ParseFaceAttributeType(this string value)
        {
            switch( value )
            {
                case "age":
                    return FaceAttributeType.Age;
                case "gender":
                    return FaceAttributeType.Gender;
                case "headPose":
                    return FaceAttributeType.HeadPose;
                case "smile":
                    return FaceAttributeType.Smile;
                case "facialHair":
                    return FaceAttributeType.FacialHair;
                case "glasses":
                    return FaceAttributeType.Glasses;
                case "emotion":
                    return FaceAttributeType.Emotion;
                case "hair":
                    return FaceAttributeType.Hair;
                case "makeup":
                    return FaceAttributeType.Makeup;
                case "occlusion":
                    return FaceAttributeType.Occlusion;
                case "accessories":
                    return FaceAttributeType.Accessories;
                case "blur":
                    return FaceAttributeType.Blur;
                case "exposure":
                    return FaceAttributeType.Exposure;
                case "noise":
                    return FaceAttributeType.Noise;
                case "mask":
                    return FaceAttributeType.Mask;
            }
            return null;
        }
    }
}
