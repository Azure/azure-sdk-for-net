// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Search.LocalSearch.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines an action.
    /// </summary>
    public partial class Action : CreativeWork
    {
        /// <summary>
        /// Initializes a new instance of the Action class.
        /// </summary>
        public Action()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Action class.
        /// </summary>
        /// <param name="id">A String identifier.</param>
        /// <param name="readLink">The URL that returns this resource.</param>
        /// <param name="webSearchUrl">The URL to Bing's search result for this
        /// item.</param>
        /// <param name="name">The name of the thing represented by this
        /// object.</param>
        /// <param name="url">The URL to get more information about the thing
        /// represented by this object.</param>
        /// <param name="entityPresentationInfo">Additional information about
        /// the entity such as hints that you can use to determine the entity's
        /// type. To determine the entity's type, use the entityScenario and
        /// entityTypeHint fields.</param>
        /// <param name="thumbnailUrl">The URL to a thumbnail of the
        /// item.</param>
        /// <param name="about">For internal use only.</param>
        /// <param name="mentions">For internal use only.</param>
        /// <param name="provider">The source of the creative work.</param>
        /// <param name="text">Text content of this creative work</param>
        /// <param name="result">The result produced in the action.</param>
        /// <param name="displayName">A display name for the action.</param>
        /// <param name="isTopAction">A Boolean representing whether this
        /// result is the top action.</param>
        /// <param name="serviceUrl">Use this URL to get additional data to
        /// determine how to take the appropriate action. For example, the
        /// serviceUrl might return JSON along with an image URL.</param>
        public Action(string id = default(string), string readLink = default(string), string webSearchUrl = default(string), IList<Action> potentialAction = default(IList<Action>), IList<Action> immediateAction = default(IList<Action>), string preferredClickthroughUrl = default(string), string adaptiveCard = default(string), string name = default(string), string url = default(string), EntitiesEntityPresentationInfo entityPresentationInfo = default(EntitiesEntityPresentationInfo), string thumbnailUrl = default(string), IList<Thing> about = default(IList<Thing>), IList<Thing> mentions = default(IList<Thing>), IList<Thing> provider = default(IList<Thing>), Thing creator = default(Thing), string text = default(string), string discussionUrl = default(string), int? commentCount = default(int?), Thing mainEntity = default(Thing), string headLine = default(string), Thing copyrightHolder = default(Thing), int? copyrightYear = default(int?), string disclaimer = default(string), bool? isAccessibleForFree = default(bool?), IList<string> genre = default(IList<string>), bool? isFamilyFriendly = default(bool?), IList<Place> location = default(IList<Place>), IList<Thing> result = default(IList<Thing>), string displayName = default(string), bool? isTopAction = default(bool?), string serviceUrl = default(string))
            : base(id, readLink, webSearchUrl, potentialAction, immediateAction, preferredClickthroughUrl, adaptiveCard, name, url, entityPresentationInfo, thumbnailUrl, about, mentions, provider, creator, text, discussionUrl, commentCount, mainEntity, headLine, copyrightHolder, copyrightYear, disclaimer, isAccessibleForFree, genre, isFamilyFriendly)
        {
            Location = location;
            Result = result;
            DisplayName = displayName;
            IsTopAction = isTopAction;
            ServiceUrl = serviceUrl;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public IList<Place> Location { get; private set; }

        /// <summary>
        /// Gets the result produced in the action.
        /// </summary>
        [JsonProperty(PropertyName = "result")]
        public IList<Thing> Result { get; private set; }

        /// <summary>
        /// Gets a display name for the action.
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; private set; }

        /// <summary>
        /// Gets a Boolean representing whether this result is the top action.
        /// </summary>
        [JsonProperty(PropertyName = "isTopAction")]
        public bool? IsTopAction { get; private set; }

        /// <summary>
        /// Gets use this URL to get additional data to determine how to take
        /// the appropriate action. For example, the serviceUrl might return
        /// JSON along with an image URL.
        /// </summary>
        [JsonProperty(PropertyName = "serviceUrl")]
        public string ServiceUrl { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Location != null)
            {
                foreach (var element in Location)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Result != null)
            {
                foreach (var element1 in Result)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
