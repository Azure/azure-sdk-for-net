// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Language.SpellCheck.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class SpellingFlaggedToken
    {
        /// <summary>
        /// Initializes a new instance of the SpellingFlaggedToken class.
        /// </summary>
        public SpellingFlaggedToken()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SpellingFlaggedToken class.
        /// </summary>
        /// <param name="type">Possible values include: 'UnknownToken',
        /// 'RepeatedToken'</param>
        public SpellingFlaggedToken(int offset, string token, string type, IList<SpellingTokenSuggestion> suggestions = default(IList<SpellingTokenSuggestion>), string pingUrlSuffix = default(string))
        {
            Offset = offset;
            Token = token;
            Type = type;
            Suggestions = suggestions;
            PingUrlSuffix = pingUrlSuffix;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "offset")]
        public int Offset { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "token")]
        public string Token { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'UnknownToken',
        /// 'RepeatedToken'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "suggestions")]
        public IList<SpellingTokenSuggestion> Suggestions { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pingUrlSuffix")]
        public string PingUrlSuffix { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Token == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Token");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (Suggestions != null)
            {
                foreach (var element in Suggestions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
