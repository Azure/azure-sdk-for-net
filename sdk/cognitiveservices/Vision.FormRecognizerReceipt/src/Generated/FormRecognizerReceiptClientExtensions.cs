// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.FormRecognizerReceipt
{
    using Models;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for FormRecognizerReceiptClient.
    /// </summary>
    public static partial class FormRecognizerReceiptClientExtensions
    {
            /// <summary>
            /// Batch Read Receipt operation. The response contains a field called
            /// 'Operation-Location', which contains the URL that you must use for your
            /// 'Get Read Receipt Result' operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='url'>
            /// Publicly reachable URL of an image.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BatchReadReceiptHeaders> BatchReadReceiptAsync(this IFormRecognizerReceiptClient operations, string url, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BatchReadReceiptWithHttpMessagesAsync(url, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// This interface is used for getting the analysis results of a 'Batch Read
            /// Receipt' operation. The URL to this interface should be retrieved from the
            /// 'Operation-Location' field returned from the 'Batch Read Receipt'
            /// operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='operationId'>
            /// Id of read operation returned in the response of a 'Batch Read Receipt'
            /// operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReadReceiptResult> GetReadReceiptResultAsync(this IFormRecognizerReceiptClient operations, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReadReceiptResultWithHttpMessagesAsync(operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Read Receipt operation. When you use the 'Batch Read Receipt' interface,
            /// the response contains a field called 'Operation-Location'. The
            /// 'Operation-Location' field contains the URL that you must use for your 'Get
            /// Read Receipt Result' operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='image'>
            /// An image stream.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BatchReadReceiptInStreamHeaders> BatchReadReceiptInStreamAsync(this IFormRecognizerReceiptClient operations, Stream image, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BatchReadReceiptInStreamWithHttpMessagesAsync(image, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

    }
}
