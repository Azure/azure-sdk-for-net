// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Vision.Face
{
    using Microsoft.Rest;
    using Models;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PersonDirectory.
    /// </summary>
    public static partial class PersonDirectoryExtensions
    {
            public static Func<System.Guid, CancellationToken, Task<OperationStatus>> asyncOperationAction;

            /// <summary>
            /// Retrieve list of person information in person directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// List persons from the least personId greater than the "start". It contains
            /// no more than 64 characters. Default is empty.
            /// </param>
            /// <param name='top'>
            /// The number of persons to list, ranging in [1, 1000]. Default is 1000.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EnrollmentResponse>> GetPersonsAsync(this IPersonDirectory operations, System.Guid? start = default(System.Guid?), string top = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPersonsWithHttpMessagesAsync(start, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve list of person information in person directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// List persons from the least personId greater than the "start". It contains
            /// no more than 64 characters. Default is empty.
            /// </param>
            /// <param name='top'>
            /// The number of persons to list, ranging in [1, 1000]. Default is 1000.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [Obsolete("Method is being deprecated, consider using other overloads.", false)]
            public static async Task<IList<EnrollmentResponse>> GetPersonsAsync(this IPersonDirectory operations, string start = null, string top = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                Guid startGuid = Guid.Empty;
                Guid.TryParse(start, out startGuid);
                using (var _result = await operations.GetPersonsWithHttpMessagesAsync(startGuid, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new person in person directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// User defined name, maximum length is 128.
            /// </param>
            /// <param name='userData'>
            /// User specified data. Length should not exceed 16KB.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HttpOperationResponse<PersonCreationResponse, PersonDirectoryCreatePersonHeaders>> CreatePersonAsync(this IPersonDirectory operations, string name = default(string), string userData = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                return await operations.CreatePersonWithHttpMessagesAsync(name, userData, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Deprecated. Creates a new person in person directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [Obsolete("Method is being deprecated, consider using other overloads.", false)]
            public static async Task<HttpOperationResponse<PersonCreationResponse, PersonDirectoryCreatePersonHeaders>> CreatePersonAsync(this IPersonDirectory operations, EnrolledPerson body, CancellationToken cancellationToken = default(CancellationToken))
            {
                return  await operations.CreatePersonWithHttpMessagesAsync(body.Name, body.UserData, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Update name or userData of a person.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personId'>
            /// Person id to update.
            /// </param>
            /// <param name='name'>
            /// User defined name, maximum length is 128.
            /// </param>
            /// <param name='userData'>
            /// User specified data. Length should not exceed 16KB.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdatePersonAsync(this IPersonDirectory operations, System.Guid personId, string name = default(string), string userData = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdatePersonWithHttpMessagesAsync(personId, name, userData, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update name or userData of a person.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personId'>
            /// Person id to update.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [Obsolete("Method is being deprecated, consider using other overloads.", false)]
            public static async Task UpdatePersonAsync(this IPersonDirectory operations, string personId, EnrollmentRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                Guid idGuid = Guid.Parse(personId);
                (await operations.UpdatePersonWithHttpMessagesAsync(idGuid, body.Name, body.UserData, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete an existing person from person directory.
            /// The persistedFaceId, userData, person name and face feature(s) in the
            /// person entry will all be deleted.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personId'>
            /// Person id to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PersonDirectoryDeletePersonHeaders> DeletePersonAsync(this IPersonDirectory operations, System.Guid personId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePersonWithHttpMessagesAsync(personId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Delete an existing person from person directory.
            /// The persistedFaceId, userData, person name and face feature(s) in the
            /// person entry will all be deleted.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personId'>
            /// Person id to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [Obsolete("Method is being deprecated, consider using other overloads.", false)]
            public static async Task<PersonDirectoryDeletePersonHeaders> DeletePersonAsync(this IPersonDirectory operations, string personId, CancellationToken cancellationToken = default(CancellationToken))
            {
                Guid idGuid = Guid.Parse(personId);
                using (var _result = await operations.DeletePersonWithHttpMessagesAsync(idGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Retrieve a person's name and userData, and the persisted faceIds
            /// representing the registered person face feature(s).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personId'>
            /// Person id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EnrolledPerson> GetPersonAsync(this IPersonDirectory operations, System.Guid personId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPersonWithHttpMessagesAsync(personId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a person's name and userData, and the persisted faceIds
            /// representing the registered person face feature(s).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personId'>
            /// Person id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [Obsolete("Method is being deprecated, consider using other overloads.", false)]
            public static async Task<EnrolledPerson> GetPersonAsync(this IPersonDirectory operations, string personId, CancellationToken cancellationToken = default(CancellationToken))
            {
                Guid idGuid = Guid.Parse(personId);
                using (var _result = await operations.GetPersonWithHttpMessagesAsync(idGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a new face to person.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personId'>
            /// Person id.
            /// </param>
            /// <param name='recognitionModel'>
            /// Recognition model string.
            /// </param>
            /// <param name='url'>
            /// Face image URL.
            /// </param>
            /// <param name='detectionModel'>
            /// Detection model string.
            /// </param>
            /// <param name='userData'>
            /// User data of person face.
            /// </param>
            /// <param name='targetFace'>
            /// Target face.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HttpOperationResponse<EnrollmentPrintResponse, PersonDirectoryAddPersonFaceFromUrlHeaders>> AddPersonFaceFromUrlAsync(this IPersonDirectory operations, System.Guid personId, string recognitionModel, string url, string detectionModel = default(string), string userData = default(string), string targetFace = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                return await operations.AddPersonFaceFromUrlWithHttpMessagesAsync(personId, recognitionModel, url, detectionModel, userData, targetFace, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Retrieve person face information. The persisted person face is specified by
            /// its personId and persistedFaceId.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personId'>
            /// Target person to get persistedFaceIds from.
            /// </param>
            /// <param name='recognitionModel'>
            /// The 'recognitionModel' associated with this persisted face.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PersonResponse> GetPersonFacesAsync(this IPersonDirectory operations, System.Guid personId, string recognitionModel, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPersonFacesWithHttpMessagesAsync(personId, recognitionModel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve person face information. The persisted person face is specified by
            /// its personId and persistedFaceId.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personId'>
            /// Target person to get persistedFaceIds from.
            /// </param>
            /// <param name='recognitionModel'>
            /// The 'recognitionModel' associated with this persisted face.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [Obsolete("Method is being deprecated, consider using other overloads.", false)]
            public static async Task<PersonResponse> GetPersonFacesAsync(this IPersonDirectory operations, string personId, string recognitionModel, CancellationToken cancellationToken = default(CancellationToken))
            {
                Guid idGuid = Guid.Parse(personId);
                using (var _result = await operations.GetPersonFacesWithHttpMessagesAsync(idGuid, recognitionModel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an existing person face from person directory.
            /// The persistedFaceId, userData, and face feature in the person entry will
            /// all be deleted.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personId'>
            /// Person id.
            /// </param>
            /// <param name='recognitionModel'>
            /// Recognition model string.
            /// </param>
            /// <param name='persistedFaceId'>
            /// Persisted face id to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PersonDirectoryDeletePersonFaceHeaders> DeletePersonFaceAsync(this IPersonDirectory operations, System.Guid personId, string recognitionModel, System.Guid persistedFaceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePersonFaceWithHttpMessagesAsync(personId, recognitionModel, persistedFaceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Delete an existing person face from person directory.
            /// The persistedFaceId, userData, and face feature in the person entry will
            /// all be deleted.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personId'>
            /// Person id.
            /// </param>
            /// <param name='recognitionModel'>
            /// Recognition model string.
            /// </param>
            /// <param name='persistedFaceId'>
            /// Persisted face id to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [Obsolete("Method is being deprecated, consider using other overloads.", false)]
            public static async Task<PersonDirectoryDeletePersonFaceHeaders> DeletePersonFaceAsync(this IPersonDirectory operations, string personId, string recognitionModel, string persistedFaceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                Guid personIdGuid = Guid.Parse(personId);
                Guid faceIdGuid = Guid.Parse(persistedFaceId);
                using (var _result = await operations.DeletePersonFaceWithHttpMessagesAsync(personIdGuid, recognitionModel, faceIdGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Retrieve person face information. The persisted person face is specified by
            /// its personId and persistedFaceId.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personId'>
            /// Target person to get face from.
            /// </param>
            /// <param name='recognitionModel'>
            /// The 'recognitionModel' associated with this persisted face.
            /// </param>
            /// <param name='persistedFaceId'>
            /// Target person face id to get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PersistedFaceResponse> GetPersonFaceAsync(this IPersonDirectory operations, System.Guid personId, string recognitionModel, System.Guid persistedFaceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPersonFaceWithHttpMessagesAsync(personId, recognitionModel, persistedFaceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve person face information. The persisted person face is specified by
            /// its personId and persistedFaceId.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personId'>
            /// Target person to get face from.
            /// </param>
            /// <param name='recognitionModel'>
            /// The 'recognitionModel' associated with this persisted face.
            /// </param>
            /// <param name='persistedFaceId'>
            /// Target person face id to get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [Obsolete("Method is being deprecated, consider using other overloads.", false)]
            public static async Task<PersistedFaceResponse> GetPersonFaceAsync(this IPersonDirectory operations, string personId, string recognitionModel, string persistedFaceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                Guid personIdGuid = Guid.Parse(personId);
                Guid faceIdGuid = Guid.Parse(persistedFaceId);
                using (var _result = await operations.GetPersonFaceWithHttpMessagesAsync(personIdGuid, recognitionModel, faceIdGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the data of a person face.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personId'>
            /// Target person to update face from.
            /// </param>
            /// <param name='recognitionModel'>
            /// The 'recognitionModel' associated with this persisted face.
            /// </param>
            /// <param name='persistedFaceId'>
            /// PersistedFaceId created from Person Face Create
            /// </param>
            /// <param name='detectionModel'>
            /// Possible values include: 'detection_01', 'detection_02', 'detection_03',
            /// 'detection_preview_1904', 'ir_detection_01', 'expression_01'
            /// </param>
            /// <param name='userData'>
            /// User data of person face.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdatePersonFaceAsync(this IPersonDirectory operations, System.Guid personId, string recognitionModel, System.Guid persistedFaceId, string detectionModel = default(string), string userData = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdatePersonFaceWithHttpMessagesAsync(personId, recognitionModel, persistedFaceId, detectionModel, userData, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update the data of a person face.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personId'>
            /// Target person to update face from.
            /// </param>
            /// <param name='recognitionModel'>
            /// The 'recognitionModel' associated with this persisted face.
            /// </param>
            /// <param name='persistedFaceId'>
            /// PersistedFaceId created from Person Face Create
            /// </param>
            /// <param name='body'>
            /// Target person face to update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [Obsolete("Method is being deprecated, consider using other overloads.", false)]
            public static async Task UpdatePersonFaceAsync(this IPersonDirectory operations, string personId, string recognitionModel, string persistedFaceId, PersistedFaceWithType body, CancellationToken cancellationToken = default(CancellationToken))
            {
                Guid personIdGuid = Guid.Parse(personId);
                Guid faceIdGuid = Guid.Parse(persistedFaceId);
                (await operations.UpdatePersonFaceWithHttpMessagesAsync(personIdGuid, recognitionModel, faceIdGuid, body.DetectionModel, body.UserData, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a new dynamic person group with specified dynamicPersonGroupId,
            /// name, and user-provided userData.
            /// A dynamic person group is a container that references persons.
            /// After creation, use "DynamicPersonGroup - Update" to add/remove persons
            /// into the search space.
            /// DynamicPersonGroup and UserData will be stored on server until
            /// DynamicPersonGroup Delete is called.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dynamicPersonGroupId'>
            /// User provided dynamic person group Id. Valid format should be a string
            /// composed by numbers, English letters in lower case, '-', '_', and no longer
            /// than 64 characters.
            /// </param>
            /// <param name='name'>
            /// User defined name, maximum length is 128.
            /// </param>
            /// <param name='userData'>
            /// User specified data. Length should not exceed 16KB.
            /// </param>
            /// <param name='addPersonIds'>
            /// Person ids to add to the dynamic person group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PersonDirectoryCreateDynamicPersonGroupHeaders> CreateDynamicPersonGroupAsync(this IPersonDirectory operations, string dynamicPersonGroupId, string name = default(string), string userData = default(string), IList<System.Guid> addPersonIds = default(IList<System.Guid>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDynamicPersonGroupWithHttpMessagesAsync(dynamicPersonGroupId, name, userData, addPersonIds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Creates a new dynamic person group with specified dynamicPersonGroupId,
            /// name, and user-provided userData.
            /// A dynamic person group is a container that references persons.
            /// After creation, use "DynamicPersonGroup - Update" to add/remove persons
            /// into the search space.
            /// DynamicPersonGroup and UserData will be stored on server until
            /// DynamicPersonGroup Delete is called.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dynamicPersonGroupId'>
            /// User provided dynamic person group Id. Valid format should be a string
            /// composed by numbers, English letters in lower case, '-', '_', and no longer
            /// than 64 characters.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [Obsolete("Method is being deprecated, consider using other overloads.", false)]
            public static async Task<PersonDirectoryCreateDynamicPersonGroupHeaders> CreateDynamicPersonGroupAsync(this IPersonDirectory operations, string dynamicPersonGroupId, DynamicPersonGroupCreateRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDynamicPersonGroupWithHttpMessagesAsync(dynamicPersonGroupId, body.Name, body.UserData, body.AddPersonIds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Updates an existing dynamic person group with specified
            /// dynamicPersonGroupId, name, and user-provided userData.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dynamicPersonGroupId'>
            /// User provided dynamic person group Id.
            /// </param>
            /// <param name='name'>
            /// User defined name, maximum length is 128.
            /// </param>
            /// <param name='userData'>
            /// User specified data. Length should not exceed 16KB.
            /// </param>
            /// <param name='addPersonIds'>
            /// Person ids to add to the dynamic person group.
            /// </param>
            /// <param name='removePersonIds'>
            /// Person ids to remove from the dynamic person group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PersonDirectoryUpdateDynamicPersonGroupHeaders> UpdateDynamicPersonGroupAsync(this IPersonDirectory operations, string dynamicPersonGroupId, string name = default(string), string userData = default(string), IList<System.Guid> addPersonIds = default(IList<System.Guid>), IList<string> removePersonIds = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDynamicPersonGroupWithHttpMessagesAsync(dynamicPersonGroupId, name, userData, addPersonIds, removePersonIds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Updates an existing dynamic person group with specified
            /// dynamicPersonGroupId, name, and user-provided userData.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dynamicPersonGroupId'>
            /// User provided dynamic person group Id.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [Obsolete("Method is being deprecated, consider using other overloads.", false)]
            public static async Task<PersonDirectoryUpdateDynamicPersonGroupHeaders> UpdateDynamicPersonGroupAsync(this IPersonDirectory operations, string dynamicPersonGroupId, DynamicPersonGroupUpdateRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDynamicPersonGroupWithHttpMessagesAsync(dynamicPersonGroupId, body.Name, body.UserData, body.AddPersonIds, body.RemovePersonIds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get metadata on a dynamic person group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dynamicPersonGroupId'>
            /// User provided dynamic person group id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DynamicPersonGroupGetResponse> GetDynamicPersonGroupAsync(this IPersonDirectory operations, string dynamicPersonGroupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDynamicPersonGroupWithHttpMessagesAsync(dynamicPersonGroupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an existing dynamic person group.
            /// Note that Persons are not deleted with this operation. To delete person
            /// call Person Delete.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dynamicPersonGroupId'>
            /// User provided dynamic person group Id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PersonDirectoryDeleteDynamicPersonGroupHeaders> DeleteDynamicPersonGroupAsync(this IPersonDirectory operations, string dynamicPersonGroupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDynamicPersonGroupWithHttpMessagesAsync(dynamicPersonGroupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Retrieve list of persons referenced in a given DynamicPersonGroup person
            /// directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dynamicPersonGroupId'>
            /// Dynamic person group Id to list persons from
            /// </param>
            /// <param name='start'>
            /// List persons from the least personId greater than the "start". It contains
            /// no more than 64 characters. Default is empty.
            /// </param>
            /// <param name='top'>
            /// The number of persons to list, ranging in [1, 1000]. Default is 1000.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DynamicPersonGroupListPersonsResponse> ListDynamicPersonGroupPersonsAsync(this IPersonDirectory operations, string dynamicPersonGroupId, System.Guid? start = default(System.Guid?), string top = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDynamicPersonGroupPersonsWithHttpMessagesAsync(dynamicPersonGroupId, start, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve list of persons referenced in a given DynamicPersonGroup person
            /// directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dynamicPersonGroupId'>
            /// Dynamic person group Id to list persons from
            /// </param>
            /// <param name='start'>
            /// List persons from the least personId greater than the "start". It contains
            /// no more than 64 characters. Default is empty.
            /// </param>
            /// <param name='top'>
            /// The number of persons to list, ranging in [1, 1000]. Default is 1000.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DynamicPersonGroupListPersonsResponse> ListDynamicPersonGroupPersonsAsync(this IPersonDirectory operations, string dynamicPersonGroupId, string start = default(string), string top = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                Guid startIdGuid = Guid.Empty;
                Guid.TryParse(start, out startIdGuid);
                using (var _result = await operations.ListDynamicPersonGroupPersonsWithHttpMessagesAsync(dynamicPersonGroupId, startIdGuid, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve list of dynamic person groups in person directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// List dynamicPersonGroupId from the least dynamicPersonGroupId greater than
            /// the "start". It contains no more than 64 characters. Default is empty.
            /// </param>
            /// <param name='top'>
            /// The number of dynamicPersonGroups to list, ranging in [1, 1000]. Default is
            /// 1000.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DynamicPersonGroupGetResponse>> ListDynamicPersonGroupsAsync(this IPersonDirectory operations, string start = default(string), string top = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDynamicPersonGroupsWithHttpMessagesAsync(start, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the dynamic person groups that a person has been referenced in.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personId'>
            /// Valid PersonId created from Person Create.
            /// </param>
            /// <param name='start'>
            /// List dynamic person group id from the least dynamicPersonGroupId greater
            /// than the "start". It contains no more than 64 characters. Default is empty.
            /// </param>
            /// <param name='top'>
            /// The number of dynamicPersonGroupId to list, ranging in [1, 1000]. Default
            /// is 1000.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PersonDynamicPersonGroupReferenceResponse> ListDynamicPersonGroupPersonReferencesAsync(this IPersonDirectory operations, System.Guid personId, string start = default(string), string top = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDynamicPersonGroupPersonReferencesWithHttpMessagesAsync(personId, start, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the dynamic person groups that a person has been referenced in.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personId'>
            /// Valid PersonId created from Person Create.
            /// </param>
            /// <param name='start'>
            /// List dynamic person group id from the least dynamicPersonGroupId greater
            /// than the "start". It contains no more than 64 characters. Default is empty.
            /// </param>
            /// <param name='top'>
            /// The number of dynamicPersonGroupId to list, ranging in [1, 1000]. Default
            /// is 1000.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [Obsolete("Method is being deprecated, consider using other overloads.", false)]
            public static async Task<PersonDynamicPersonGroupReferenceResponse> ListDynamicPersonGroupPersonReferencesAsync(this IPersonDirectory operations, string personId, string start = default(string), string top = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                Guid idGuid = Guid.Parse(personId);
                using (var _result = await operations.ListDynamicPersonGroupPersonReferencesWithHttpMessagesAsync(idGuid, start, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a new face to person.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personId'>
            /// Person id.
            /// </param>
            /// <param name='recognitionModel'>
            /// Recognition model string.
            /// </param>
            /// <param name='image'>
            /// An image stream.
            /// </param>
            /// <param name='detectionModel'>
            /// Detection model string.
            /// </param>
            /// <param name='userData'>
            /// User data of person face.
            /// </param>
            /// <param name='targetFace'>
            /// Target face.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HttpOperationResponse<EnrollmentPrintResponse, PersonDirectoryAddPersonFaceFromStreamHeaders>> AddPersonFaceFromStreamAsync(this IPersonDirectory operations, System.Guid personId, string recognitionModel, Stream image, string detectionModel = default(string), string userData = default(string), string targetFace = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                return await operations.AddPersonFaceFromStreamWithHttpMessagesAsync(personId, recognitionModel, image, detectionModel, userData, targetFace, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Add a new face to person.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personId'>
            /// Person id.
            /// </param>
            /// <param name='recognitionModel'>
            /// Recognition model string.
            /// </param>
            /// <param name='image'>
            /// An image stream.
            /// </param>
            /// <param name='detectionModel'>
            /// Detection model string.
            /// </param>
            /// <param name='userData'>
            /// User data of person face.
            /// </param>
            /// <param name='targetFace'>
            /// Target face.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [Obsolete("Method is being deprecated, consider using other overloads.", false)]
            public static async Task<HttpOperationResponse<EnrollmentPrintResponse, PersonDirectoryAddPersonFaceFromStreamHeaders>> AddPersonFaceFromStreamAsync(this IPersonDirectory operations, string personId, string recognitionModel, Stream image, string detectionModel = default(string), string userData = default(string), string targetFace = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                Guid idGuid = Guid.Parse(personId);
                return await operations.AddPersonFaceFromStreamWithHttpMessagesAsync(idGuid, recognitionModel, image, detectionModel, userData, targetFace, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get status of a long running operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='operationId'>
            /// Id referencing a particular take/apply snapshot operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> GetOperationStatusAsync(this IPersonDirectory operations, System.Guid operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                return await asyncOperationAction(operationId, cancellationToken);
            }
    }
}
