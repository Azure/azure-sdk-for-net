// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Search.VideoSearch.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class TrendingVideos : Response
    {
        /// <summary>
        /// Initializes a new instance of the TrendingVideos class.
        /// </summary>
        public TrendingVideos()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TrendingVideos class.
        /// </summary>
        /// <param name="id">A String identifier.</param>
        /// <param name="webSearchUrl">The URL To Bing's search result for this
        /// item.</param>
        public TrendingVideos(IList<TrendingVideosTile> bannerTiles, IList<TrendingVideosCategory> categories, string id = default(string), string webSearchUrl = default(string))
            : base(id, webSearchUrl)
        {
            BannerTiles = bannerTiles;
            Categories = categories;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bannerTiles")]
        public IList<TrendingVideosTile> BannerTiles { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "categories")]
        public IList<TrendingVideosCategory> Categories { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (BannerTiles == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BannerTiles");
            }
            if (Categories == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Categories");
            }
            if (BannerTiles != null)
            {
                foreach (var element in BannerTiles)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Categories != null)
            {
                foreach (var element1 in Categories)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
