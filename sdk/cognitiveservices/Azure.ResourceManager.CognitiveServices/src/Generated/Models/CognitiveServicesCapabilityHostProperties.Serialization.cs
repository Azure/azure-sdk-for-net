// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CognitiveServices.Models
{
    public partial class CognitiveServicesCapabilityHostProperties : IUtf8JsonSerializable, IJsonModel<CognitiveServicesCapabilityHostProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<CognitiveServicesCapabilityHostProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<CognitiveServicesCapabilityHostProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CognitiveServicesCapabilityHostProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CognitiveServicesCapabilityHostProperties)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsCollectionDefined(AiServicesConnections))
            {
                if (AiServicesConnections != null)
                {
                    writer.WritePropertyName("aiServicesConnections"u8);
                    writer.WriteStartArray();
                    foreach (var item in AiServicesConnections)
                    {
                        writer.WriteStringValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("aiServicesConnections");
                }
            }
            if (Optional.IsDefined(CapabilityHostKind))
            {
                writer.WritePropertyName("capabilityHostKind"u8);
                writer.WriteStringValue(CapabilityHostKind.Value.ToString());
            }
            if (Optional.IsDefined(CustomerSubnet))
            {
                if (CustomerSubnet != null)
                {
                    writer.WritePropertyName("customerSubnet"u8);
                    writer.WriteStringValue(CustomerSubnet);
                }
                else
                {
                    writer.WriteNull("customerSubnet");
                }
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Optional.IsCollectionDefined(StorageConnections))
            {
                if (StorageConnections != null)
                {
                    writer.WritePropertyName("storageConnections"u8);
                    writer.WriteStartArray();
                    foreach (var item in StorageConnections)
                    {
                        writer.WriteStringValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("storageConnections");
                }
            }
            if (Optional.IsCollectionDefined(ThreadStorageConnections))
            {
                if (ThreadStorageConnections != null)
                {
                    writer.WritePropertyName("threadStorageConnections"u8);
                    writer.WriteStartArray();
                    foreach (var item in ThreadStorageConnections)
                    {
                        writer.WriteStringValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("threadStorageConnections");
                }
            }
            if (Optional.IsCollectionDefined(VectorStoreConnections))
            {
                if (VectorStoreConnections != null)
                {
                    writer.WritePropertyName("vectorStoreConnections"u8);
                    writer.WriteStartArray();
                    foreach (var item in VectorStoreConnections)
                    {
                        writer.WriteStringValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("vectorStoreConnections");
                }
            }
        }

        CognitiveServicesCapabilityHostProperties IJsonModel<CognitiveServicesCapabilityHostProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CognitiveServicesCapabilityHostProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CognitiveServicesCapabilityHostProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeCognitiveServicesCapabilityHostProperties(document.RootElement, options);
        }

        internal static CognitiveServicesCapabilityHostProperties DeserializeCognitiveServicesCapabilityHostProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<string> aiServicesConnections = default;
            CapabilityHostKind? capabilityHostKind = default;
            string customerSubnet = default;
            CapabilityHostProvisioningState? provisioningState = default;
            IList<string> storageConnections = default;
            IList<string> threadStorageConnections = default;
            IList<string> vectorStoreConnections = default;
            string description = default;
            IDictionary<string, string> tags = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("aiServicesConnections"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    aiServicesConnections = array;
                    continue;
                }
                if (property.NameEquals("capabilityHostKind"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    capabilityHostKind = new CapabilityHostKind(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("customerSubnet"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        customerSubnet = null;
                        continue;
                    }
                    customerSubnet = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new CapabilityHostProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("storageConnections"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    storageConnections = array;
                    continue;
                }
                if (property.NameEquals("threadStorageConnections"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    threadStorageConnections = array;
                    continue;
                }
                if (property.NameEquals("vectorStoreConnections"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    vectorStoreConnections = array;
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        description = null;
                        continue;
                    }
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new CognitiveServicesCapabilityHostProperties(
                description,
                tags ?? new ChangeTrackingDictionary<string, string>(),
                serializedAdditionalRawData,
                aiServicesConnections ?? new ChangeTrackingList<string>(),
                capabilityHostKind,
                customerSubnet,
                provisioningState,
                storageConnections ?? new ChangeTrackingList<string>(),
                threadStorageConnections ?? new ChangeTrackingList<string>(),
                vectorStoreConnections ?? new ChangeTrackingList<string>());
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            BicepModelReaderWriterOptions bicepOptions = options as BicepModelReaderWriterOptions;
            IDictionary<string, string> propertyOverrides = null;
            bool hasObjectOverride = bicepOptions != null && bicepOptions.PropertyOverrides.TryGetValue(this, out propertyOverrides);
            bool hasPropertyOverride = false;
            string propertyOverride = null;

            builder.AppendLine("{");

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(AiServicesConnections), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  aiServicesConnections: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsCollectionDefined(AiServicesConnections))
                {
                    if (AiServicesConnections.Any())
                    {
                        builder.Append("  aiServicesConnections: ");
                        builder.AppendLine("[");
                        foreach (var item in AiServicesConnections)
                        {
                            if (item == null)
                            {
                                builder.Append("null");
                                continue;
                            }
                            if (item.Contains(Environment.NewLine))
                            {
                                builder.AppendLine("    '''");
                                builder.AppendLine($"{item}'''");
                            }
                            else
                            {
                                builder.AppendLine($"    '{item}'");
                            }
                        }
                        builder.AppendLine("  ]");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(CapabilityHostKind), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  capabilityHostKind: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(CapabilityHostKind))
                {
                    builder.Append("  capabilityHostKind: ");
                    builder.AppendLine($"'{CapabilityHostKind.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(CustomerSubnet), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  customerSubnet: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(CustomerSubnet))
                {
                    builder.Append("  customerSubnet: ");
                    if (CustomerSubnet.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{CustomerSubnet}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{CustomerSubnet}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ProvisioningState), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  provisioningState: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(ProvisioningState))
                {
                    builder.Append("  provisioningState: ");
                    builder.AppendLine($"'{ProvisioningState.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(StorageConnections), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  storageConnections: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsCollectionDefined(StorageConnections))
                {
                    if (StorageConnections.Any())
                    {
                        builder.Append("  storageConnections: ");
                        builder.AppendLine("[");
                        foreach (var item in StorageConnections)
                        {
                            if (item == null)
                            {
                                builder.Append("null");
                                continue;
                            }
                            if (item.Contains(Environment.NewLine))
                            {
                                builder.AppendLine("    '''");
                                builder.AppendLine($"{item}'''");
                            }
                            else
                            {
                                builder.AppendLine($"    '{item}'");
                            }
                        }
                        builder.AppendLine("  ]");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ThreadStorageConnections), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  threadStorageConnections: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsCollectionDefined(ThreadStorageConnections))
                {
                    if (ThreadStorageConnections.Any())
                    {
                        builder.Append("  threadStorageConnections: ");
                        builder.AppendLine("[");
                        foreach (var item in ThreadStorageConnections)
                        {
                            if (item == null)
                            {
                                builder.Append("null");
                                continue;
                            }
                            if (item.Contains(Environment.NewLine))
                            {
                                builder.AppendLine("    '''");
                                builder.AppendLine($"{item}'''");
                            }
                            else
                            {
                                builder.AppendLine($"    '{item}'");
                            }
                        }
                        builder.AppendLine("  ]");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(VectorStoreConnections), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  vectorStoreConnections: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsCollectionDefined(VectorStoreConnections))
                {
                    if (VectorStoreConnections.Any())
                    {
                        builder.Append("  vectorStoreConnections: ");
                        builder.AppendLine("[");
                        foreach (var item in VectorStoreConnections)
                        {
                            if (item == null)
                            {
                                builder.Append("null");
                                continue;
                            }
                            if (item.Contains(Environment.NewLine))
                            {
                                builder.AppendLine("    '''");
                                builder.AppendLine($"{item}'''");
                            }
                            else
                            {
                                builder.AppendLine($"    '{item}'");
                            }
                        }
                        builder.AppendLine("  ]");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Description), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  description: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(Description))
                {
                    builder.Append("  description: ");
                    if (Description.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{Description}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{Description}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Tags), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  tags: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsCollectionDefined(Tags))
                {
                    if (Tags.Any())
                    {
                        builder.Append("  tags: ");
                        builder.AppendLine("{");
                        foreach (var item in Tags)
                        {
                            builder.Append($"    '{item.Key}': ");
                            if (item.Value == null)
                            {
                                builder.Append("null");
                                continue;
                            }
                            if (item.Value.Contains(Environment.NewLine))
                            {
                                builder.AppendLine("'''");
                                builder.AppendLine($"{item.Value}'''");
                            }
                            else
                            {
                                builder.AppendLine($"'{item.Value}'");
                            }
                        }
                        builder.AppendLine("  }");
                    }
                }
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        BinaryData IPersistableModel<CognitiveServicesCapabilityHostProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CognitiveServicesCapabilityHostProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerCognitiveServicesContext.Default);
                case "bicep":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(CognitiveServicesCapabilityHostProperties)} does not support writing '{options.Format}' format.");
            }
        }

        CognitiveServicesCapabilityHostProperties IPersistableModel<CognitiveServicesCapabilityHostProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CognitiveServicesCapabilityHostProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeCognitiveServicesCapabilityHostProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(CognitiveServicesCapabilityHostProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<CognitiveServicesCapabilityHostProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
