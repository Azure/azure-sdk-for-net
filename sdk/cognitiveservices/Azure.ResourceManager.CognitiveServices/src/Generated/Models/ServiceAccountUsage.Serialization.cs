// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CognitiveServices.Models
{
    public partial class ServiceAccountUsage
    {
        internal static ServiceAccountUsage DeserializeServiceAccountUsage(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<ServiceAccountUsageUnitType> unit = default;
            Core.Optional<ServiceAccountUsageMetricName> name = default;
            Core.Optional<string> quotaPeriod = default;
            Core.Optional<double> limit = default;
            Core.Optional<double> currentValue = default;
            Core.Optional<string> nextResetTime = default;
            Core.Optional<ServiceAccountQuotaUsageStatus> status = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("unit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    unit = new ServiceAccountUsageUnitType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    name = ServiceAccountUsageMetricName.DeserializeServiceAccountUsageMetricName(property.Value);
                    continue;
                }
                if (property.NameEquals("quotaPeriod"u8))
                {
                    quotaPeriod = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("limit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    limit = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("currentValue"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    currentValue = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("nextResetTime"u8))
                {
                    nextResetTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = new ServiceAccountQuotaUsageStatus(property.Value.GetString());
                    continue;
                }
            }
            return new ServiceAccountUsage(Core.Optional.ToNullable(unit), name.Value, quotaPeriod.Value, Core.Optional.ToNullable(limit), Core.Optional.ToNullable(currentValue), nextResetTime.Value, Core.Optional.ToNullable(status));
        }
    }
}
