// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CognitiveServices.Models
{
    /// <summary> Multiregion routing methods. </summary>
    public readonly partial struct RoutingMethod : IEquatable<RoutingMethod>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RoutingMethod"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RoutingMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PriorityValue = "Priority";
        private const string WeightedValue = "Weighted";
        private const string PerformanceValue = "Performance";

        /// <summary> Priority. </summary>
        public static RoutingMethod Priority { get; } = new RoutingMethod(PriorityValue);
        /// <summary> Weighted. </summary>
        public static RoutingMethod Weighted { get; } = new RoutingMethod(WeightedValue);
        /// <summary> Performance. </summary>
        public static RoutingMethod Performance { get; } = new RoutingMethod(PerformanceValue);
        /// <summary> Determines if two <see cref="RoutingMethod"/> values are the same. </summary>
        public static bool operator ==(RoutingMethod left, RoutingMethod right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RoutingMethod"/> values are not the same. </summary>
        public static bool operator !=(RoutingMethod left, RoutingMethod right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RoutingMethod"/>. </summary>
        public static implicit operator RoutingMethod(string value) => new RoutingMethod(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RoutingMethod other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RoutingMethod other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
