// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CognitiveServices.Models
{
    /// <summary> Level at which content is filtered. </summary>
    public readonly partial struct RaiPolicyContentLevel : IEquatable<RaiPolicyContentLevel>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RaiPolicyContentLevel"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RaiPolicyContentLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string LowValue = "Low";
        private const string MediumValue = "Medium";
        private const string HighValue = "High";

        /// <summary> Low. </summary>
        public static RaiPolicyContentLevel Low { get; } = new RaiPolicyContentLevel(LowValue);
        /// <summary> Medium. </summary>
        public static RaiPolicyContentLevel Medium { get; } = new RaiPolicyContentLevel(MediumValue);
        /// <summary> High. </summary>
        public static RaiPolicyContentLevel High { get; } = new RaiPolicyContentLevel(HighValue);
        /// <summary> Determines if two <see cref="RaiPolicyContentLevel"/> values are the same. </summary>
        public static bool operator ==(RaiPolicyContentLevel left, RaiPolicyContentLevel right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RaiPolicyContentLevel"/> values are not the same. </summary>
        public static bool operator !=(RaiPolicyContentLevel left, RaiPolicyContentLevel right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="RaiPolicyContentLevel"/>. </summary>
        public static implicit operator RaiPolicyContentLevel(string value) => new RaiPolicyContentLevel(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RaiPolicyContentLevel other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RaiPolicyContentLevel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
