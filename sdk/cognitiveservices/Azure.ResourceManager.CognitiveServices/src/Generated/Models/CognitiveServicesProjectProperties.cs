// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.CognitiveServices.Models
{
    /// <summary> Properties of Cognitive Services Project'. </summary>
    public partial class CognitiveServicesProjectProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CognitiveServicesProjectProperties"/>. </summary>
        public CognitiveServicesProjectProperties()
        {
            Endpoints = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="CognitiveServicesProjectProperties"/>. </summary>
        /// <param name="provisioningState"> Gets the status of the cognitive services project at the time the operation was called. </param>
        /// <param name="displayName"> The display name of the Cognitive Services Project. </param>
        /// <param name="description"> The description of the Cognitive Services Project. </param>
        /// <param name="endpoints"> The list of endpoint for this Cognitive Services Project. </param>
        /// <param name="isDefault"> Indicates whether the project is the default project for the account. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CognitiveServicesProjectProperties(ServiceAccountProvisioningState? provisioningState, string displayName, string description, IReadOnlyDictionary<string, string> endpoints, bool? isDefault, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProvisioningState = provisioningState;
            DisplayName = displayName;
            Description = description;
            Endpoints = endpoints;
            IsDefault = isDefault;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets the status of the cognitive services project at the time the operation was called. </summary>
        [WirePath("provisioningState")]
        public ServiceAccountProvisioningState? ProvisioningState { get; }
        /// <summary> The display name of the Cognitive Services Project. </summary>
        [WirePath("displayName")]
        public string DisplayName { get; set; }
        /// <summary> The description of the Cognitive Services Project. </summary>
        [WirePath("description")]
        public string Description { get; set; }
        /// <summary> The list of endpoint for this Cognitive Services Project. </summary>
        [WirePath("endpoints")]
        public IReadOnlyDictionary<string, string> Endpoints { get; }
        /// <summary> Indicates whether the project is the default project for the account. </summary>
        [WirePath("isDefault")]
        public bool? IsDefault { get; }
    }
}
