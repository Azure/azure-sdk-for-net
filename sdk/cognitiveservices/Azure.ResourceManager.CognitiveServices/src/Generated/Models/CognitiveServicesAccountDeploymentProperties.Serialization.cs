// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CognitiveServices.Models
{
    public partial class CognitiveServicesAccountDeploymentProperties : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(Model))
            {
                writer.WritePropertyName("model"u8);
                writer.WriteObjectValue(Model);
            }
            if (Core.Optional.IsDefined(ScaleSettings))
            {
                writer.WritePropertyName("scaleSettings"u8);
                writer.WriteObjectValue(ScaleSettings);
            }
            if (Core.Optional.IsDefined(RaiPolicyName))
            {
                writer.WritePropertyName("raiPolicyName"u8);
                writer.WriteStringValue(RaiPolicyName);
            }
            if (Core.Optional.IsDefined(VersionUpgradeOption))
            {
                writer.WritePropertyName("versionUpgradeOption"u8);
                writer.WriteStringValue(VersionUpgradeOption.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static CognitiveServicesAccountDeploymentProperties DeserializeCognitiveServicesAccountDeploymentProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<CognitiveServicesAccountDeploymentProvisioningState> provisioningState = default;
            Core.Optional<CognitiveServicesAccountDeploymentModel> model = default;
            Core.Optional<CognitiveServicesAccountDeploymentScaleSettings> scaleSettings = default;
            Core.Optional<IReadOnlyDictionary<string, string>> capabilities = default;
            Core.Optional<string> raiPolicyName = default;
            Core.Optional<ServiceAccountCallRateLimit> callRateLimit = default;
            Core.Optional<IReadOnlyList<ServiceAccountThrottlingRule>> rateLimits = default;
            Core.Optional<DeploymentModelVersionUpgradeOption> versionUpgradeOption = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new CognitiveServicesAccountDeploymentProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("model"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    model = CognitiveServicesAccountDeploymentModel.DeserializeCognitiveServicesAccountDeploymentModel(property.Value);
                    continue;
                }
                if (property.NameEquals("scaleSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    scaleSettings = CognitiveServicesAccountDeploymentScaleSettings.DeserializeCognitiveServicesAccountDeploymentScaleSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("capabilities"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    capabilities = dictionary;
                    continue;
                }
                if (property.NameEquals("raiPolicyName"u8))
                {
                    raiPolicyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("callRateLimit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    callRateLimit = ServiceAccountCallRateLimit.DeserializeServiceAccountCallRateLimit(property.Value);
                    continue;
                }
                if (property.NameEquals("rateLimits"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ServiceAccountThrottlingRule> array = new List<ServiceAccountThrottlingRule>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ServiceAccountThrottlingRule.DeserializeServiceAccountThrottlingRule(item));
                    }
                    rateLimits = array;
                    continue;
                }
                if (property.NameEquals("versionUpgradeOption"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    versionUpgradeOption = new DeploymentModelVersionUpgradeOption(property.Value.GetString());
                    continue;
                }
            }
            return new CognitiveServicesAccountDeploymentProperties(Core.Optional.ToNullable(provisioningState), model.Value, scaleSettings.Value, Core.Optional.ToDictionary(capabilities), raiPolicyName.Value, callRateLimit.Value, Core.Optional.ToList(rateLimits), Core.Optional.ToNullable(versionUpgradeOption));
        }
    }
}
