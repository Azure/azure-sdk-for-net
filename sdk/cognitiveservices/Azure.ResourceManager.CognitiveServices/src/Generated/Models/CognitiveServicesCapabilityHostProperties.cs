// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.CognitiveServices.Models
{
    /// <summary> The CognitiveServicesCapabilityHostProperties. </summary>
    public partial class CognitiveServicesCapabilityHostProperties : CognitiveServicesResourceBase
    {
        /// <summary> Initializes a new instance of <see cref="CognitiveServicesCapabilityHostProperties"/>. </summary>
        public CognitiveServicesCapabilityHostProperties()
        {
            AiServicesConnections = new ChangeTrackingList<string>();
            StorageConnections = new ChangeTrackingList<string>();
            ThreadStorageConnections = new ChangeTrackingList<string>();
            VectorStoreConnections = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="CognitiveServicesCapabilityHostProperties"/>. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="aiServicesConnections"> List of AI services connections. </param>
        /// <param name="capabilityHostKind"> Kind of this capability host. </param>
        /// <param name="customerSubnet"> Customer subnet info to help set up this capability host. </param>
        /// <param name="provisioningState"> Provisioning state for the CapabilityHost. </param>
        /// <param name="storageConnections"> List of Storage connections. </param>
        /// <param name="threadStorageConnections"> List of Thread storage connections. </param>
        /// <param name="vectorStoreConnections"> List of VectorStore connections. </param>
        internal CognitiveServicesCapabilityHostProperties(string description, IDictionary<string, string> tags, IDictionary<string, BinaryData> serializedAdditionalRawData, IList<string> aiServicesConnections, CapabilityHostKind? capabilityHostKind, string customerSubnet, CapabilityHostProvisioningState? provisioningState, IList<string> storageConnections, IList<string> threadStorageConnections, IList<string> vectorStoreConnections) : base(description, tags, serializedAdditionalRawData)
        {
            AiServicesConnections = aiServicesConnections;
            CapabilityHostKind = capabilityHostKind;
            CustomerSubnet = customerSubnet;
            ProvisioningState = provisioningState;
            StorageConnections = storageConnections;
            ThreadStorageConnections = threadStorageConnections;
            VectorStoreConnections = vectorStoreConnections;
        }

        /// <summary> List of AI services connections. </summary>
        [WirePath("aiServicesConnections")]
        public IList<string> AiServicesConnections { get; set; }
        /// <summary> Kind of this capability host. </summary>
        [WirePath("capabilityHostKind")]
        public CapabilityHostKind? CapabilityHostKind { get; set; }
        /// <summary> Customer subnet info to help set up this capability host. </summary>
        [WirePath("customerSubnet")]
        public string CustomerSubnet { get; set; }
        /// <summary> Provisioning state for the CapabilityHost. </summary>
        [WirePath("provisioningState")]
        public CapabilityHostProvisioningState? ProvisioningState { get; }
        /// <summary> List of Storage connections. </summary>
        [WirePath("storageConnections")]
        public IList<string> StorageConnections { get; set; }
        /// <summary> List of Thread storage connections. </summary>
        [WirePath("threadStorageConnections")]
        public IList<string> ThreadStorageConnections { get; set; }
        /// <summary> List of VectorStore connections. </summary>
        [WirePath("vectorStoreConnections")]
        public IList<string> VectorStoreConnections { get; set; }
    }
}
