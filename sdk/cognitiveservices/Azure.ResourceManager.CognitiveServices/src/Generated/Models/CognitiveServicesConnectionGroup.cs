// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CognitiveServices.Models
{
    /// <summary> Group based on connection category. </summary>
    public readonly partial struct CognitiveServicesConnectionGroup : IEquatable<CognitiveServicesConnectionGroup>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CognitiveServicesConnectionGroup"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CognitiveServicesConnectionGroup(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AzureValue = "Azure";
        private const string AzureAIValue = "AzureAI";
        private const string DatabaseValue = "Database";
        private const string NoSQLValue = "NoSQL";
        private const string FileValue = "File";
        private const string GenericProtocolValue = "GenericProtocol";
        private const string ServicesAndAppsValue = "ServicesAndApps";

        /// <summary> Azure. </summary>
        public static CognitiveServicesConnectionGroup Azure { get; } = new CognitiveServicesConnectionGroup(AzureValue);
        /// <summary> AzureAI. </summary>
        public static CognitiveServicesConnectionGroup AzureAI { get; } = new CognitiveServicesConnectionGroup(AzureAIValue);
        /// <summary> Database. </summary>
        public static CognitiveServicesConnectionGroup Database { get; } = new CognitiveServicesConnectionGroup(DatabaseValue);
        /// <summary> NoSQL. </summary>
        public static CognitiveServicesConnectionGroup NoSQL { get; } = new CognitiveServicesConnectionGroup(NoSQLValue);
        /// <summary> File. </summary>
        public static CognitiveServicesConnectionGroup File { get; } = new CognitiveServicesConnectionGroup(FileValue);
        /// <summary> GenericProtocol. </summary>
        public static CognitiveServicesConnectionGroup GenericProtocol { get; } = new CognitiveServicesConnectionGroup(GenericProtocolValue);
        /// <summary> ServicesAndApps. </summary>
        public static CognitiveServicesConnectionGroup ServicesAndApps { get; } = new CognitiveServicesConnectionGroup(ServicesAndAppsValue);
        /// <summary> Determines if two <see cref="CognitiveServicesConnectionGroup"/> values are the same. </summary>
        public static bool operator ==(CognitiveServicesConnectionGroup left, CognitiveServicesConnectionGroup right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CognitiveServicesConnectionGroup"/> values are not the same. </summary>
        public static bool operator !=(CognitiveServicesConnectionGroup left, CognitiveServicesConnectionGroup right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="CognitiveServicesConnectionGroup"/>. </summary>
        public static implicit operator CognitiveServicesConnectionGroup(string value) => new CognitiveServicesConnectionGroup(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CognitiveServicesConnectionGroup other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CognitiveServicesConnectionGroup other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
