// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.CognitiveServices.Models
{
    /// <summary> Specifies in AI Foundry where virtual network injection occurs to secure scenarios like Agents entirely within the user's private network, eliminating public internet exposure while maintaining control over network configurations and resources. </summary>
    public partial class AIFoundryNetworkInjection
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AIFoundryNetworkInjection"/>. </summary>
        public AIFoundryNetworkInjection()
        {
        }

        /// <summary> Initializes a new instance of <see cref="AIFoundryNetworkInjection"/>. </summary>
        /// <param name="scenario"> Specifies what features in AI Foundry network injection applies to. Currently only supports 'agent' for agent scenarios. 'none' means no network injection. </param>
        /// <param name="subnetArmId"> Specify the subnet for which your Agent Client is injected into. </param>
        /// <param name="useMicrosoftManagedNetwork"> Boolean to enable Microsoft Managed Network for subnet delegation. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AIFoundryNetworkInjection(AIFoundryNetworkInjectionScenarioType? scenario, ResourceIdentifier subnetArmId, bool? useMicrosoftManagedNetwork, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Scenario = scenario;
            SubnetArmId = subnetArmId;
            UseMicrosoftManagedNetwork = useMicrosoftManagedNetwork;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Specifies what features in AI Foundry network injection applies to. Currently only supports 'agent' for agent scenarios. 'none' means no network injection. </summary>
        [WirePath("scenario")]
        public AIFoundryNetworkInjectionScenarioType? Scenario { get; set; }
        /// <summary> Specify the subnet for which your Agent Client is injected into. </summary>
        [WirePath("subnetArmId")]
        public ResourceIdentifier SubnetArmId { get; set; }
        /// <summary> Boolean to enable Microsoft Managed Network for subnet delegation. </summary>
        [WirePath("useMicrosoftManagedNetwork")]
        public bool? UseMicrosoftManagedNetwork { get; set; }
    }
}
