// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CognitiveServices.Models
{
    public partial class ServiceAccountEncryptionProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(KeySource))
            {
                writer.WritePropertyName("keySource");
                writer.WriteStringValue(KeySource.Value.ToString());
            }
            writer.WritePropertyName("keyVaultProperties");
            writer.WriteStartObject();
            if (Optional.IsDefined(KeyName))
            {
                writer.WritePropertyName("keyName");
                writer.WriteStringValue(KeyName);
            }
            if (Optional.IsDefined(KeyVersion))
            {
                writer.WritePropertyName("keyVersion");
                writer.WriteStringValue(KeyVersion);
            }
            if (Optional.IsDefined(KeyVaultUri))
            {
                writer.WritePropertyName("keyVaultUri");
                writer.WriteStringValue(KeyVaultUri.AbsoluteUri);
            }
            if (Optional.IsDefined(IdentityClientId))
            {
                writer.WritePropertyName("identityClientId");
                writer.WriteStringValue(IdentityClientId.Value);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static ServiceAccountEncryptionProperties DeserializeServiceAccountEncryptionProperties(JsonElement element)
        {
            Optional<ServiceAccountEncryptionKeySource> keySource = default;
            Optional<string> keyName = default;
            Optional<string> keyVersion = default;
            Optional<Uri> keyVaultUri = default;
            Optional<Guid> identityClientId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("keySource"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    keySource = new ServiceAccountEncryptionKeySource(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("keyVaultProperties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("keyName"))
                        {
                            keyName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("keyVersion"))
                        {
                            keyVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("keyVaultUri"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                keyVaultUri = null;
                                continue;
                            }
                            keyVaultUri = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("identityClientId"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            identityClientId = property0.Value.GetGuid();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ServiceAccountEncryptionProperties(Optional.ToNullable(keySource), keyName.Value, keyVersion.Value, keyVaultUri.Value, Optional.ToNullable(identityClientId));
        }
    }
}
