// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.CognitiveServices.Models
{
    public partial class CommitmentPlanProperties : IUtf8JsonSerializable, IModelJsonSerializable<CommitmentPlanProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<CommitmentPlanProperties>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<CommitmentPlanProperties>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<CommitmentPlanProperties>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(CommitmentPlanGuid))
            {
                writer.WritePropertyName("commitmentPlanGuid"u8);
                writer.WriteStringValue(CommitmentPlanGuid.Value);
            }
            if (Optional.IsDefined(HostingModel))
            {
                writer.WritePropertyName("hostingModel"u8);
                writer.WriteStringValue(HostingModel.Value.ToString());
            }
            if (Optional.IsDefined(PlanType))
            {
                writer.WritePropertyName("planType"u8);
                writer.WriteStringValue(PlanType);
            }
            if (Optional.IsDefined(Current))
            {
                writer.WritePropertyName("current"u8);
                if (Current is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<CommitmentPeriod>)Current).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(AutoRenew))
            {
                writer.WritePropertyName("autoRenew"u8);
                writer.WriteBooleanValue(AutoRenew.Value);
            }
            if (Optional.IsDefined(Next))
            {
                writer.WritePropertyName("next"u8);
                if (Next is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<CommitmentPeriod>)Next).Serialize(writer, options);
                }
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static CommitmentPlanProperties DeserializeCommitmentPlanProperties(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<CommitmentPlanProvisioningState> provisioningState = default;
            Optional<Guid> commitmentPlanGuid = default;
            Optional<ServiceAccountHostingModel> hostingModel = default;
            Optional<string> planType = default;
            Optional<CommitmentPeriod> current = default;
            Optional<bool> autoRenew = default;
            Optional<CommitmentPeriod> next = default;
            Optional<CommitmentPeriod> last = default;
            Optional<IReadOnlyList<string>> provisioningIssues = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new CommitmentPlanProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("commitmentPlanGuid"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    commitmentPlanGuid = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("hostingModel"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hostingModel = new ServiceAccountHostingModel(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("planType"u8))
                {
                    planType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("current"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    current = CommitmentPeriod.DeserializeCommitmentPeriod(property.Value);
                    continue;
                }
                if (property.NameEquals("autoRenew"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    autoRenew = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("next"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    next = CommitmentPeriod.DeserializeCommitmentPeriod(property.Value);
                    continue;
                }
                if (property.NameEquals("last"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    last = CommitmentPeriod.DeserializeCommitmentPeriod(property.Value);
                    continue;
                }
                if (property.NameEquals("provisioningIssues"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    provisioningIssues = array;
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new CommitmentPlanProperties(Optional.ToNullable(provisioningState), Optional.ToNullable(commitmentPlanGuid), Optional.ToNullable(hostingModel), planType.Value, current.Value, Optional.ToNullable(autoRenew), next.Value, last.Value, Optional.ToList(provisioningIssues), rawData);
        }

        CommitmentPlanProperties IModelJsonSerializable<CommitmentPlanProperties>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<CommitmentPlanProperties>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeCommitmentPlanProperties(doc.RootElement, options);
        }

        BinaryData IModelSerializable<CommitmentPlanProperties>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<CommitmentPlanProperties>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        CommitmentPlanProperties IModelSerializable<CommitmentPlanProperties>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<CommitmentPlanProperties>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeCommitmentPlanProperties(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="CommitmentPlanProperties"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="CommitmentPlanProperties"/> to convert. </param>
        public static implicit operator RequestContent(CommitmentPlanProperties model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="CommitmentPlanProperties"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator CommitmentPlanProperties(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeCommitmentPlanProperties(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
