// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CognitiveServices.Models
{
    public partial class CommitmentPlanProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(HostingModel))
            {
                writer.WritePropertyName("hostingModel");
                writer.WriteStringValue(HostingModel.Value.ToString());
            }
            if (Optional.IsDefined(PlanType))
            {
                writer.WritePropertyName("planType");
                writer.WriteStringValue(PlanType);
            }
            if (Optional.IsDefined(Current))
            {
                writer.WritePropertyName("current");
                writer.WriteObjectValue(Current);
            }
            if (Optional.IsDefined(AutoRenew))
            {
                writer.WritePropertyName("autoRenew");
                writer.WriteBooleanValue(AutoRenew.Value);
            }
            if (Optional.IsDefined(Next))
            {
                writer.WritePropertyName("next");
                writer.WriteObjectValue(Next);
            }
            writer.WriteEndObject();
        }

        internal static CommitmentPlanProperties DeserializeCommitmentPlanProperties(JsonElement element)
        {
            Optional<HostingModel> hostingModel = default;
            Optional<string> planType = default;
            Optional<CommitmentPeriod> current = default;
            Optional<bool> autoRenew = default;
            Optional<CommitmentPeriod> next = default;
            Optional<CommitmentPeriod> last = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("hostingModel"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    hostingModel = new HostingModel(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("planType"))
                {
                    planType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("current"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    current = CommitmentPeriod.DeserializeCommitmentPeriod(property.Value);
                    continue;
                }
                if (property.NameEquals("autoRenew"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    autoRenew = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("next"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    next = CommitmentPeriod.DeserializeCommitmentPeriod(property.Value);
                    continue;
                }
                if (property.NameEquals("last"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    last = CommitmentPeriod.DeserializeCommitmentPeriod(property.Value);
                    continue;
                }
            }
            return new CommitmentPlanProperties(Optional.ToNullable(hostingModel), planType.Value, current.Value, Optional.ToNullable(autoRenew), next.Value, last.Value);
        }
    }
}
