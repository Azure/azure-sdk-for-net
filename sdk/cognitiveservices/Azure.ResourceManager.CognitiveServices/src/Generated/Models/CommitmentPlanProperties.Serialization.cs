// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CognitiveServices.Models
{
    public partial class CommitmentPlanProperties : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(CommitmentPlanGuid))
            {
                writer.WritePropertyName("commitmentPlanGuid"u8);
                writer.WriteStringValue(CommitmentPlanGuid.Value);
            }
            if (Core.Optional.IsDefined(HostingModel))
            {
                writer.WritePropertyName("hostingModel"u8);
                writer.WriteStringValue(HostingModel.Value.ToString());
            }
            if (Core.Optional.IsDefined(PlanType))
            {
                writer.WritePropertyName("planType"u8);
                writer.WriteStringValue(PlanType);
            }
            if (Core.Optional.IsDefined(Current))
            {
                writer.WritePropertyName("current"u8);
                writer.WriteObjectValue(Current);
            }
            if (Core.Optional.IsDefined(AutoRenew))
            {
                writer.WritePropertyName("autoRenew"u8);
                writer.WriteBooleanValue(AutoRenew.Value);
            }
            if (Core.Optional.IsDefined(Next))
            {
                writer.WritePropertyName("next"u8);
                writer.WriteObjectValue(Next);
            }
            writer.WriteEndObject();
        }

        internal static CommitmentPlanProperties DeserializeCommitmentPlanProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<CommitmentPlanProvisioningState> provisioningState = default;
            Core.Optional<Guid> commitmentPlanGuid = default;
            Core.Optional<ServiceAccountHostingModel> hostingModel = default;
            Core.Optional<string> planType = default;
            Core.Optional<CommitmentPeriod> current = default;
            Core.Optional<bool> autoRenew = default;
            Core.Optional<CommitmentPeriod> next = default;
            Core.Optional<CommitmentPeriod> last = default;
            Core.Optional<IReadOnlyList<string>> provisioningIssues = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new CommitmentPlanProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("commitmentPlanGuid"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    commitmentPlanGuid = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("hostingModel"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hostingModel = new ServiceAccountHostingModel(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("planType"u8))
                {
                    planType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("current"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    current = CommitmentPeriod.DeserializeCommitmentPeriod(property.Value);
                    continue;
                }
                if (property.NameEquals("autoRenew"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    autoRenew = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("next"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    next = CommitmentPeriod.DeserializeCommitmentPeriod(property.Value);
                    continue;
                }
                if (property.NameEquals("last"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    last = CommitmentPeriod.DeserializeCommitmentPeriod(property.Value);
                    continue;
                }
                if (property.NameEquals("provisioningIssues"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    provisioningIssues = array;
                    continue;
                }
            }
            return new CommitmentPlanProperties(Core.Optional.ToNullable(provisioningState), Core.Optional.ToNullable(commitmentPlanGuid), Core.Optional.ToNullable(hostingModel), planType.Value, current.Value, Core.Optional.ToNullable(autoRenew), next.Value, last.Value, Core.Optional.ToList(provisioningIssues));
        }
    }
}
