// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.CognitiveServices;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.CognitiveServices.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class CognitiveServicesModelFactory
    {
        /// <summary> Initializes a new instance of CognitiveServicesAccountData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="kind"> The Kind of the resource. </param>
        /// <param name="sku"> The resource model definition representing SKU. </param>
        /// <param name="identity"> Identity for the resource. </param>
        /// <param name="properties"> Properties of Cognitive Services account. </param>
        /// <param name="etag"> Resource Etag. </param>
        /// <returns> A new <see cref="CognitiveServices.CognitiveServicesAccountData"/> instance for mocking. </returns>
        public static CognitiveServicesAccountData CognitiveServicesAccountData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string kind = null, CognitiveServicesSku sku = null, ManagedServiceIdentity identity = null, CognitiveServicesAccountProperties properties = null, ETag? etag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CognitiveServicesAccountData(id, name, resourceType, systemData, tags, location, kind, sku, identity, properties, etag);
        }

        /// <summary> Initializes a new instance of CognitiveServicesSku. </summary>
        /// <param name="name"> The name of the SKU. Ex - P3. It is typically a letter+number code. </param>
        /// <param name="tier"> This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT. </param>
        /// <param name="size"> The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. </param>
        /// <param name="family"> If the service has different generations of hardware, for the same SKU, then that can be captured here. </param>
        /// <param name="capacity"> If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted. </param>
        /// <returns> A new <see cref="Models.CognitiveServicesSku"/> instance for mocking. </returns>
        public static CognitiveServicesSku CognitiveServicesSku(string name = null, CognitiveServicesSkuTier? tier = null, string size = null, string family = null, int? capacity = null)
        {
            return new CognitiveServicesSku(name, tier, size, family, capacity);
        }

        /// <summary> Initializes a new instance of CognitiveServicesAccountProperties. </summary>
        /// <param name="provisioningState"> Gets the status of the cognitive services account at the time the operation was called. </param>
        /// <param name="endpoint"> Endpoint of the created account. </param>
        /// <param name="capabilities"> Gets the capabilities of the cognitive services account. Each item indicates the capability of a specific feature. The values are read-only and for reference only. </param>
        /// <param name="isMigrated"> If the resource is migrated from an existing key. </param>
        /// <param name="migrationToken"> Resource migration token. </param>
        /// <param name="skuChangeInfo"> Sku change info of account. </param>
        /// <param name="customSubDomainName"> Optional subdomain name used for token-based authentication. </param>
        /// <param name="networkAcls"> A collection of rules governing the accessibility from specific network locations. </param>
        /// <param name="encryption"> The encryption properties for this resource. </param>
        /// <param name="userOwnedStorage"> The storage accounts for this resource. </param>
        /// <param name="privateEndpointConnections"> The private endpoint connection associated with the Cognitive Services account. </param>
        /// <param name="publicNetworkAccess"> Whether or not public endpoint access is allowed for this account. </param>
        /// <param name="apiProperties"> The api properties for special APIs. </param>
        /// <param name="createdOn"> Gets the date of cognitive services account creation. </param>
        /// <param name="callRateLimit"> The call rate limit Cognitive Services account. </param>
        /// <param name="enableDynamicThrottling"> The flag to enable dynamic throttling. </param>
        /// <param name="quotaLimit"></param>
        /// <param name="restrictOutboundNetworkAccess"></param>
        /// <param name="allowedFqdnList"></param>
        /// <param name="disableLocalAuth"></param>
        /// <param name="endpoints"> Dictionary of &lt;string&gt;. </param>
        /// <param name="restore"></param>
        /// <param name="deletedOn"> The deletion date, only available for deleted account. </param>
        /// <param name="scheduledPurgeDate"> The scheduled purge date, only available for deleted account. </param>
        /// <returns> A new <see cref="Models.CognitiveServicesAccountProperties"/> instance for mocking. </returns>
        public static CognitiveServicesAccountProperties CognitiveServicesAccountProperties(ServiceAccountProvisioningState? provisioningState = null, string endpoint = null, IEnumerable<CognitiveServicesSkuCapability> capabilities = null, bool? isMigrated = null, string migrationToken = null, CognitiveServicesSkuChangeInfo skuChangeInfo = null, string customSubDomainName = null, CognitiveServicesNetworkRuleSet networkAcls = null, ServiceAccountEncryptionProperties encryption = null, IEnumerable<ServiceAccountUserOwnedStorage> userOwnedStorage = null, IEnumerable<CognitiveServicesPrivateEndpointConnectionData> privateEndpointConnections = null, ServiceAccountPublicNetworkAccess? publicNetworkAccess = null, ServiceAccountApiProperties apiProperties = null, DateTimeOffset? createdOn = null, ServiceAccountCallRateLimit callRateLimit = null, bool? enableDynamicThrottling = null, ServiceAccountQuotaLimit quotaLimit = null, bool? restrictOutboundNetworkAccess = null, IEnumerable<string> allowedFqdnList = null, bool? disableLocalAuth = null, IReadOnlyDictionary<string, string> endpoints = null, bool? restore = null, DateTimeOffset? deletedOn = null, string scheduledPurgeDate = null)
        {
            capabilities ??= new List<CognitiveServicesSkuCapability>();
            userOwnedStorage ??= new List<ServiceAccountUserOwnedStorage>();
            privateEndpointConnections ??= new List<CognitiveServicesPrivateEndpointConnectionData>();
            allowedFqdnList ??= new List<string>();
            endpoints ??= new Dictionary<string, string>();

            return new CognitiveServicesAccountProperties(provisioningState, endpoint, capabilities?.ToList(), isMigrated, migrationToken, skuChangeInfo, customSubDomainName, networkAcls, encryption, userOwnedStorage?.ToList(), privateEndpointConnections?.ToList(), publicNetworkAccess, apiProperties, createdOn, callRateLimit, enableDynamicThrottling, quotaLimit, restrictOutboundNetworkAccess, allowedFqdnList?.ToList(), disableLocalAuth, endpoints, restore, deletedOn, scheduledPurgeDate);
        }

        /// <summary> Initializes a new instance of CognitiveServicesSkuCapability. </summary>
        /// <param name="name"> The name of the SkuCapability. </param>
        /// <param name="value"> The value of the SkuCapability. </param>
        /// <returns> A new <see cref="Models.CognitiveServicesSkuCapability"/> instance for mocking. </returns>
        public static CognitiveServicesSkuCapability CognitiveServicesSkuCapability(string name = null, string value = null)
        {
            return new CognitiveServicesSkuCapability(name, value);
        }

        /// <summary> Initializes a new instance of CognitiveServicesSkuChangeInfo. </summary>
        /// <param name="countOfDowngrades"> Gets the count of downgrades. </param>
        /// <param name="countOfUpgradesAfterDowngrades"> Gets the count of upgrades after downgrades. </param>
        /// <param name="lastChangedOn"> Gets the last change date. </param>
        /// <returns> A new <see cref="Models.CognitiveServicesSkuChangeInfo"/> instance for mocking. </returns>
        public static CognitiveServicesSkuChangeInfo CognitiveServicesSkuChangeInfo(float? countOfDowngrades = null, float? countOfUpgradesAfterDowngrades = null, DateTimeOffset? lastChangedOn = null)
        {
            return new CognitiveServicesSkuChangeInfo(countOfDowngrades, countOfUpgradesAfterDowngrades, lastChangedOn);
        }

        /// <summary> Initializes a new instance of CognitiveServicesNetworkRuleSet. </summary>
        /// <param name="defaultAction"> The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated. </param>
        /// <param name="ipRules"> The list of IP address rules. </param>
        /// <param name="virtualNetworkRules"> The list of virtual network rules. </param>
        /// <returns> A new <see cref="Models.CognitiveServicesNetworkRuleSet"/> instance for mocking. </returns>
        public static CognitiveServicesNetworkRuleSet CognitiveServicesNetworkRuleSet(CognitiveServicesNetworkRuleAction? defaultAction = null, IEnumerable<CognitiveServicesIPRule> ipRules = null, IEnumerable<CognitiveServicesVirtualNetworkRule> virtualNetworkRules = null)
        {
            ipRules ??= new List<CognitiveServicesIPRule>();
            virtualNetworkRules ??= new List<CognitiveServicesVirtualNetworkRule>();

            return new CognitiveServicesNetworkRuleSet(defaultAction, ipRules?.ToList(), virtualNetworkRules?.ToList());
        }

        /// <summary> Initializes a new instance of CognitiveServicesVirtualNetworkRule. </summary>
        /// <param name="id"> Full resource id of a vnet subnet, such as &apos;/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1&apos;. </param>
        /// <param name="state"> Gets the state of virtual network rule. </param>
        /// <param name="ignoreMissingVnetServiceEndpoint"> Ignore missing vnet service endpoint or not. </param>
        /// <returns> A new <see cref="Models.CognitiveServicesVirtualNetworkRule"/> instance for mocking. </returns>
        public static CognitiveServicesVirtualNetworkRule CognitiveServicesVirtualNetworkRule(ResourceIdentifier id = null, string state = null, bool? ignoreMissingVnetServiceEndpoint = null)
        {
            return new CognitiveServicesVirtualNetworkRule(id, state, ignoreMissingVnetServiceEndpoint);
        }

        /// <summary> Initializes a new instance of ServiceAccountEncryptionProperties. </summary>
        /// <param name="keySource"> Enumerates the possible value of keySource for Encryption. </param>
        /// <param name="keyName"> Name of the Key from KeyVault. </param>
        /// <param name="keyVersion"> Version of the Key from KeyVault. </param>
        /// <param name="keyVaultUri"> Uri of KeyVault. </param>
        /// <param name="identityClientId"></param>
        /// <returns> A new <see cref="Models.ServiceAccountEncryptionProperties"/> instance for mocking. </returns>
        public static ServiceAccountEncryptionProperties ServiceAccountEncryptionProperties(ServiceAccountEncryptionKeySource? keySource = null, string keyName = null, string keyVersion = null, Uri keyVaultUri = null, Guid? identityClientId = null)
        {
            return new ServiceAccountEncryptionProperties(keySource, keyName, keyVersion, keyVaultUri, identityClientId);
        }

        /// <summary> Initializes a new instance of ServiceAccountUserOwnedStorage. </summary>
        /// <param name="resourceId"> Full resource id of a Microsoft.Storage resource. </param>
        /// <param name="identityClientId"></param>
        /// <returns> A new <see cref="Models.ServiceAccountUserOwnedStorage"/> instance for mocking. </returns>
        public static ServiceAccountUserOwnedStorage ServiceAccountUserOwnedStorage(ResourceIdentifier resourceId = null, Guid? identityClientId = null)
        {
            return new ServiceAccountUserOwnedStorage(resourceId, identityClientId);
        }

        /// <summary> Initializes a new instance of CognitiveServicesPrivateEndpointConnectionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> The location of the private endpoint connection. </param>
        /// <param name="privateEndpointId"> The resource of private end point. </param>
        /// <param name="connectionState"> A collection of information about the state of the connection between service consumer and provider. </param>
        /// <param name="provisioningState"> The provisioning state of the private endpoint connection resource. </param>
        /// <param name="groupIds"> The private link resource group ids. </param>
        /// <param name="etag"> Resource Etag. </param>
        /// <returns> A new <see cref="CognitiveServices.CognitiveServicesPrivateEndpointConnectionData"/> instance for mocking. </returns>
        public static CognitiveServicesPrivateEndpointConnectionData CognitiveServicesPrivateEndpointConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, ResourceIdentifier privateEndpointId = null, CognitiveServicesPrivateLinkServiceConnectionState connectionState = null, CognitiveServicesPrivateEndpointConnectionProvisioningState? provisioningState = null, IEnumerable<string> groupIds = null, ETag? etag = null)
        {
            groupIds ??= new List<string>();

            return new CognitiveServicesPrivateEndpointConnectionData(id, name, resourceType, systemData, location, privateEndpointId != null ? ResourceManagerModelFactory.SubResource(privateEndpointId) : null, connectionState, provisioningState, groupIds?.ToList(), etag);
        }

        /// <summary> Initializes a new instance of CognitiveServicesPrivateLinkServiceConnectionState. </summary>
        /// <param name="status"> Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. </param>
        /// <param name="description"> The reason for approval/rejection of the connection. </param>
        /// <param name="actionsRequired"> A message indicating if changes on the service provider require any updates on the consumer. </param>
        /// <returns> A new <see cref="Models.CognitiveServicesPrivateLinkServiceConnectionState"/> instance for mocking. </returns>
        public static CognitiveServicesPrivateLinkServiceConnectionState CognitiveServicesPrivateLinkServiceConnectionState(CognitiveServicesPrivateEndpointServiceConnectionStatus? status = null, string description = null, string actionsRequired = null)
        {
            return new CognitiveServicesPrivateLinkServiceConnectionState(status, description, actionsRequired);
        }

        /// <summary> Initializes a new instance of ServiceAccountApiProperties. </summary>
        /// <param name="qnaRuntimeEndpoint"> (QnAMaker Only) The runtime endpoint of QnAMaker. </param>
        /// <param name="qnaAzureSearchEndpointKey"> (QnAMaker Only) The Azure Search endpoint key of QnAMaker. </param>
        /// <param name="qnaAzureSearchEndpointId"> (QnAMaker Only) The Azure Search endpoint id of QnAMaker. </param>
        /// <param name="enableStatistics"> (Bing Search Only) The flag to enable statistics of Bing Search. </param>
        /// <param name="eventHubConnectionString"> (Personalization Only) The flag to enable statistics of Bing Search. </param>
        /// <param name="storageAccountConnectionString"> (Personalization Only) The storage account connection string. </param>
        /// <param name="aadClientId"> (Metrics Advisor Only) The Azure AD Client Id (Application Id). </param>
        /// <param name="aadTenantId"> (Metrics Advisor Only) The Azure AD Tenant Id. </param>
        /// <param name="superUser"> (Metrics Advisor Only) The super user of Metrics Advisor. </param>
        /// <param name="websiteName"> (Metrics Advisor Only) The website name of Metrics Advisor. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ServiceAccountApiProperties"/> instance for mocking. </returns>
        public static ServiceAccountApiProperties ServiceAccountApiProperties(string qnaRuntimeEndpoint = null, string qnaAzureSearchEndpointKey = null, ResourceIdentifier qnaAzureSearchEndpointId = null, bool? enableStatistics = null, string eventHubConnectionString = null, string storageAccountConnectionString = null, Guid? aadClientId = null, Guid? aadTenantId = null, string superUser = null, string websiteName = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ServiceAccountApiProperties(qnaRuntimeEndpoint, qnaAzureSearchEndpointKey, qnaAzureSearchEndpointId, enableStatistics, eventHubConnectionString, storageAccountConnectionString, aadClientId, aadTenantId, superUser, websiteName, additionalProperties);
        }

        /// <summary> Initializes a new instance of ServiceAccountCallRateLimit. </summary>
        /// <param name="count"> The count value of Call Rate Limit. </param>
        /// <param name="renewalPeriod"> The renewal period in seconds of Call Rate Limit. </param>
        /// <param name="rules"></param>
        /// <returns> A new <see cref="Models.ServiceAccountCallRateLimit"/> instance for mocking. </returns>
        public static ServiceAccountCallRateLimit ServiceAccountCallRateLimit(float? count = null, float? renewalPeriod = null, IEnumerable<ServiceAccountThrottlingRule> rules = null)
        {
            rules ??= new List<ServiceAccountThrottlingRule>();

            return new ServiceAccountCallRateLimit(count, renewalPeriod, rules?.ToList());
        }

        /// <summary> Initializes a new instance of ServiceAccountThrottlingRule. </summary>
        /// <param name="key"></param>
        /// <param name="renewalPeriod"></param>
        /// <param name="count"></param>
        /// <param name="minCount"></param>
        /// <param name="isDynamicThrottlingEnabled"></param>
        /// <param name="matchPatterns"></param>
        /// <returns> A new <see cref="Models.ServiceAccountThrottlingRule"/> instance for mocking. </returns>
        public static ServiceAccountThrottlingRule ServiceAccountThrottlingRule(string key = null, float? renewalPeriod = null, float? count = null, float? minCount = null, bool? isDynamicThrottlingEnabled = null, IEnumerable<ServiceAccountThrottlingMatchPattern> matchPatterns = null)
        {
            matchPatterns ??= new List<ServiceAccountThrottlingMatchPattern>();

            return new ServiceAccountThrottlingRule(key, renewalPeriod, count, minCount, isDynamicThrottlingEnabled, matchPatterns?.ToList());
        }

        /// <summary> Initializes a new instance of ServiceAccountThrottlingMatchPattern. </summary>
        /// <param name="path"></param>
        /// <param name="method"></param>
        /// <returns> A new <see cref="Models.ServiceAccountThrottlingMatchPattern"/> instance for mocking. </returns>
        public static ServiceAccountThrottlingMatchPattern ServiceAccountThrottlingMatchPattern(string path = null, string method = null)
        {
            return new ServiceAccountThrottlingMatchPattern(path, method);
        }

        /// <summary> Initializes a new instance of ServiceAccountQuotaLimit. </summary>
        /// <param name="count"></param>
        /// <param name="renewalPeriod"></param>
        /// <param name="rules"></param>
        /// <returns> A new <see cref="Models.ServiceAccountQuotaLimit"/> instance for mocking. </returns>
        public static ServiceAccountQuotaLimit ServiceAccountQuotaLimit(float? count = null, float? renewalPeriod = null, IEnumerable<ServiceAccountThrottlingRule> rules = null)
        {
            rules ??= new List<ServiceAccountThrottlingRule>();

            return new ServiceAccountQuotaLimit(count, renewalPeriod, rules?.ToList());
        }

        /// <summary> Initializes a new instance of ServiceAccountApiKeys. </summary>
        /// <param name="key1"> Gets the value of key 1. </param>
        /// <param name="key2"> Gets the value of key 2. </param>
        /// <returns> A new <see cref="Models.ServiceAccountApiKeys"/> instance for mocking. </returns>
        public static ServiceAccountApiKeys ServiceAccountApiKeys(string key1 = null, string key2 = null)
        {
            return new ServiceAccountApiKeys(key1, key2);
        }

        /// <summary> Initializes a new instance of AvailableCognitiveServicesSku. </summary>
        /// <param name="resourceType"> The type of resource the SKU applies to. </param>
        /// <param name="name"> The name of SKU. </param>
        /// <param name="tier"> Specifies the tier of Cognitive Services account. </param>
        /// <param name="kind"> The Kind of resources that are supported in this SKU. </param>
        /// <param name="locations"> The set of locations that the SKU is available. </param>
        /// <param name="restrictions"> The restrictions because of which SKU cannot be used. This is empty if there are no restrictions. </param>
        /// <returns> A new <see cref="Models.AvailableCognitiveServicesSku"/> instance for mocking. </returns>
        public static AvailableCognitiveServicesSku AvailableCognitiveServicesSku(string resourceType = null, string name = null, string tier = null, string kind = null, IEnumerable<AzureLocation> locations = null, IEnumerable<CognitiveServicesSkuRestrictions> restrictions = null)
        {
            locations ??= new List<AzureLocation>();
            restrictions ??= new List<CognitiveServicesSkuRestrictions>();

            return new AvailableCognitiveServicesSku(resourceType, name, tier, kind, locations?.ToList(), restrictions?.ToList());
        }

        /// <summary> Initializes a new instance of CognitiveServicesSkuRestrictions. </summary>
        /// <param name="restrictionsType"> The type of restrictions. </param>
        /// <param name="values"> The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted. </param>
        /// <param name="restrictionInfo"> The information about the restriction where the SKU cannot be used. </param>
        /// <param name="reasonCode"> The reason for restriction. </param>
        /// <returns> A new <see cref="Models.CognitiveServicesSkuRestrictions"/> instance for mocking. </returns>
        public static CognitiveServicesSkuRestrictions CognitiveServicesSkuRestrictions(CognitiveServicesSkuRestrictionsType? restrictionsType = null, IEnumerable<string> values = null, CognitiveServicesSkuRestrictionInfo restrictionInfo = null, CognitiveServicesSkuRestrictionReasonCode? reasonCode = null)
        {
            values ??= new List<string>();

            return new CognitiveServicesSkuRestrictions(restrictionsType, values?.ToList(), restrictionInfo, reasonCode);
        }

        /// <summary> Initializes a new instance of CognitiveServicesSkuRestrictionInfo. </summary>
        /// <param name="locations"> Locations where the SKU is restricted. </param>
        /// <param name="zones"> List of availability zones where the SKU is restricted. </param>
        /// <returns> A new <see cref="Models.CognitiveServicesSkuRestrictionInfo"/> instance for mocking. </returns>
        public static CognitiveServicesSkuRestrictionInfo CognitiveServicesSkuRestrictionInfo(IEnumerable<AzureLocation> locations = null, IEnumerable<string> zones = null)
        {
            locations ??= new List<AzureLocation>();
            zones ??= new List<string>();

            return new CognitiveServicesSkuRestrictionInfo(locations?.ToList(), zones?.ToList());
        }

        /// <summary> Initializes a new instance of CognitiveServicesAccountSku. </summary>
        /// <param name="resourceType"> Resource Namespace and Type. </param>
        /// <param name="sku"> The SKU of Cognitive Services account. </param>
        /// <returns> A new <see cref="Models.CognitiveServicesAccountSku"/> instance for mocking. </returns>
        public static CognitiveServicesAccountSku CognitiveServicesAccountSku(ResourceType? resourceType = null, CognitiveServicesSku sku = null)
        {
            return new CognitiveServicesAccountSku(resourceType, sku);
        }

        /// <summary> Initializes a new instance of ServiceAccountUsage. </summary>
        /// <param name="unit"> The unit of the metric. </param>
        /// <param name="name"> The name information for the metric. </param>
        /// <param name="quotaPeriod"> The quota period used to summarize the usage values. </param>
        /// <param name="limit"> Maximum value for this metric. </param>
        /// <param name="currentValue"> Current value for this metric. </param>
        /// <param name="nextResetTime"> Next reset time for current quota. </param>
        /// <param name="status"> Cognitive Services account quota usage status. </param>
        /// <returns> A new <see cref="Models.ServiceAccountUsage"/> instance for mocking. </returns>
        public static ServiceAccountUsage ServiceAccountUsage(ServiceAccountUsageUnitType? unit = null, ServiceAccountUsageMetricName name = null, string quotaPeriod = null, double? limit = null, double? currentValue = null, string nextResetTime = null, ServiceAccountQuotaUsageStatus? status = null)
        {
            return new ServiceAccountUsage(unit, name, quotaPeriod, limit, currentValue, nextResetTime, status);
        }

        /// <summary> Initializes a new instance of ServiceAccountUsageMetricName. </summary>
        /// <param name="value"> The name of the metric. </param>
        /// <param name="localizedValue"> The friendly name of the metric. </param>
        /// <returns> A new <see cref="Models.ServiceAccountUsageMetricName"/> instance for mocking. </returns>
        public static ServiceAccountUsageMetricName ServiceAccountUsageMetricName(string value = null, string localizedValue = null)
        {
            return new ServiceAccountUsageMetricName(value, localizedValue);
        }

        /// <summary> Initializes a new instance of CognitiveServicesAccountModel. </summary>
        /// <param name="format"> Deployment model format. </param>
        /// <param name="name"> Deployment model name. </param>
        /// <param name="version"> Deployment model version. </param>
        /// <param name="callRateLimit"> The call rate limit Cognitive Services account. </param>
        /// <param name="baseModel"> Base Model Identifier. </param>
        /// <param name="maxCapacity"> The max capacity. </param>
        /// <param name="capabilities"> The capabilities. </param>
        /// <param name="deprecation"> Cognitive Services account ModelDeprecationInfo. </param>
        /// <param name="systemData"> Metadata pertaining to creation and last modification of the resource. </param>
        /// <returns> A new <see cref="Models.CognitiveServicesAccountModel"/> instance for mocking. </returns>
        public static CognitiveServicesAccountModel CognitiveServicesAccountModel(string format = null, string name = null, string version = null, ServiceAccountCallRateLimit callRateLimit = null, CognitiveServicesAccountDeploymentModel baseModel = null, int? maxCapacity = null, IDictionary<string, string> capabilities = null, ServiceAccountModelDeprecationInfo deprecation = null, SystemData systemData = null)
        {
            capabilities ??= new Dictionary<string, string>();

            return new CognitiveServicesAccountModel(format, name, version, callRateLimit, baseModel, maxCapacity, capabilities, deprecation, systemData);
        }

        /// <summary> Initializes a new instance of CognitiveServicesAccountDeploymentModel. </summary>
        /// <param name="format"> Deployment model format. </param>
        /// <param name="name"> Deployment model name. </param>
        /// <param name="version"> Deployment model version. </param>
        /// <param name="callRateLimit"> The call rate limit Cognitive Services account. </param>
        /// <returns> A new <see cref="Models.CognitiveServicesAccountDeploymentModel"/> instance for mocking. </returns>
        public static CognitiveServicesAccountDeploymentModel CognitiveServicesAccountDeploymentModel(string format = null, string name = null, string version = null, ServiceAccountCallRateLimit callRateLimit = null)
        {
            return new CognitiveServicesAccountDeploymentModel(format, name, version, callRateLimit);
        }

        /// <summary> Initializes a new instance of ServiceAccountModelDeprecationInfo. </summary>
        /// <param name="fineTuneOn"> The datetime of deprecation of the fineTune Model. </param>
        /// <param name="inferenceOn"> The datetime of deprecation of the inference Model. </param>
        /// <returns> A new <see cref="Models.ServiceAccountModelDeprecationInfo"/> instance for mocking. </returns>
        public static ServiceAccountModelDeprecationInfo ServiceAccountModelDeprecationInfo(DateTimeOffset? fineTuneOn = null, DateTimeOffset? inferenceOn = null)
        {
            return new ServiceAccountModelDeprecationInfo(fineTuneOn, inferenceOn);
        }

        /// <summary> Initializes a new instance of CognitiveServicesSkuAvailabilityList. </summary>
        /// <param name="kind"> The Kind of the resource. </param>
        /// <param name="skuAvailabilityType"> The Type of the resource. </param>
        /// <param name="skuName"> The SKU of Cognitive Services account. </param>
        /// <param name="isSkuAvailable"> Indicates the given SKU is available or not. </param>
        /// <param name="reason"> Reason why the SKU is not available. </param>
        /// <param name="message"> Additional error message. </param>
        /// <returns> A new <see cref="Models.CognitiveServicesSkuAvailabilityList"/> instance for mocking. </returns>
        public static CognitiveServicesSkuAvailabilityList CognitiveServicesSkuAvailabilityList(string kind = null, string skuAvailabilityType = null, string skuName = null, bool? isSkuAvailable = null, string reason = null, string message = null)
        {
            return new CognitiveServicesSkuAvailabilityList(kind, skuAvailabilityType, skuName, isSkuAvailable, reason, message);
        }

        /// <summary> Initializes a new instance of CommitmentTier. </summary>
        /// <param name="kind"> The Kind of the resource. </param>
        /// <param name="skuName"> The name of the SKU. Ex - P3. It is typically a letter+number code. </param>
        /// <param name="hostingModel"> Account hosting model. </param>
        /// <param name="planType"> Commitment plan type. </param>
        /// <param name="tier"> Commitment period commitment tier. </param>
        /// <param name="maxCount"> Commitment period commitment max count. </param>
        /// <param name="quota"> Cognitive Services account commitment quota. </param>
        /// <param name="cost"> Cognitive Services account commitment cost. </param>
        /// <returns> A new <see cref="Models.CommitmentTier"/> instance for mocking. </returns>
        public static CommitmentTier CommitmentTier(string kind = null, string skuName = null, ServiceAccountHostingModel? hostingModel = null, string planType = null, string tier = null, int? maxCount = null, CommitmentQuota quota = null, CommitmentCost cost = null)
        {
            return new CommitmentTier(kind, skuName, hostingModel, planType, tier, maxCount, quota, cost);
        }

        /// <summary> Initializes a new instance of CommitmentQuota. </summary>
        /// <param name="quantity"> Commitment quota quantity. </param>
        /// <param name="unit"> Commitment quota unit. </param>
        /// <returns> A new <see cref="Models.CommitmentQuota"/> instance for mocking. </returns>
        public static CommitmentQuota CommitmentQuota(long? quantity = null, string unit = null)
        {
            return new CommitmentQuota(quantity, unit);
        }

        /// <summary> Initializes a new instance of CommitmentCost. </summary>
        /// <param name="commitmentMeterId"> Commitment meter Id. </param>
        /// <param name="overageMeterId"> Overage meter Id. </param>
        /// <returns> A new <see cref="Models.CommitmentCost"/> instance for mocking. </returns>
        public static CommitmentCost CommitmentCost(string commitmentMeterId = null, string overageMeterId = null)
        {
            return new CommitmentCost(commitmentMeterId, overageMeterId);
        }

        /// <summary> Initializes a new instance of CognitiveServicesDomainAvailabilityList. </summary>
        /// <param name="isSubdomainAvailable"> Indicates the given SKU is available or not. </param>
        /// <param name="reason"> Reason why the SKU is not available. </param>
        /// <param name="subdomainName"> The subdomain name to use. </param>
        /// <param name="domainAvailabilityType"> The Type of the resource. </param>
        /// <param name="kind"> The Kind of the resource. </param>
        /// <returns> A new <see cref="Models.CognitiveServicesDomainAvailabilityList"/> instance for mocking. </returns>
        public static CognitiveServicesDomainAvailabilityList CognitiveServicesDomainAvailabilityList(bool? isSubdomainAvailable = null, string reason = null, string subdomainName = null, string domainAvailabilityType = null, string kind = null)
        {
            return new CognitiveServicesDomainAvailabilityList(isSubdomainAvailable, reason, subdomainName, domainAvailabilityType, kind);
        }

        /// <summary> Initializes a new instance of CognitiveServicesPrivateLinkResource. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Resource properties. </param>
        /// <returns> A new <see cref="Models.CognitiveServicesPrivateLinkResource"/> instance for mocking. </returns>
        public static CognitiveServicesPrivateLinkResource CognitiveServicesPrivateLinkResource(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, CognitiveServicesPrivateLinkResourceProperties properties = null)
        {
            return new CognitiveServicesPrivateLinkResource(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of CognitiveServicesPrivateLinkResourceProperties. </summary>
        /// <param name="groupId"> The private link resource group id. </param>
        /// <param name="requiredMembers"> The private link resource required member names. </param>
        /// <param name="requiredZoneNames"> The private link resource Private link DNS zone name. </param>
        /// <param name="displayName"> The private link resource display name. </param>
        /// <returns> A new <see cref="Models.CognitiveServicesPrivateLinkResourceProperties"/> instance for mocking. </returns>
        public static CognitiveServicesPrivateLinkResourceProperties CognitiveServicesPrivateLinkResourceProperties(string groupId = null, IEnumerable<string> requiredMembers = null, IEnumerable<string> requiredZoneNames = null, string displayName = null)
        {
            requiredMembers ??= new List<string>();
            requiredZoneNames ??= new List<string>();

            return new CognitiveServicesPrivateLinkResourceProperties(groupId, requiredMembers?.ToList(), requiredZoneNames?.ToList(), displayName);
        }

        /// <summary> Initializes a new instance of CognitiveServicesAccountDeploymentData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="etag"> Resource Etag. </param>
        /// <param name="properties"> Properties of Cognitive Services account deployment. </param>
        /// <returns> A new <see cref="CognitiveServices.CognitiveServicesAccountDeploymentData"/> instance for mocking. </returns>
        public static CognitiveServicesAccountDeploymentData CognitiveServicesAccountDeploymentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ETag? etag = null, CognitiveServicesAccountDeploymentProperties properties = null)
        {
            return new CognitiveServicesAccountDeploymentData(id, name, resourceType, systemData, etag, properties);
        }

        /// <summary> Initializes a new instance of CognitiveServicesAccountDeploymentProperties. </summary>
        /// <param name="provisioningState"> Gets the status of the resource at the time the operation was called. </param>
        /// <param name="model"> Properties of Cognitive Services account deployment model. </param>
        /// <param name="scaleSettings"> Properties of Cognitive Services account deployment model. </param>
        /// <param name="capabilities"> The capabilities. </param>
        /// <param name="raiPolicyName"> The name of RAI policy. </param>
        /// <param name="callRateLimit"> The call rate limit Cognitive Services account. </param>
        /// <returns> A new <see cref="Models.CognitiveServicesAccountDeploymentProperties"/> instance for mocking. </returns>
        public static CognitiveServicesAccountDeploymentProperties CognitiveServicesAccountDeploymentProperties(CognitiveServicesAccountDeploymentProvisioningState? provisioningState = null, CognitiveServicesAccountDeploymentModel model = null, CognitiveServicesAccountDeploymentScaleSettings scaleSettings = null, IReadOnlyDictionary<string, string> capabilities = null, string raiPolicyName = null, ServiceAccountCallRateLimit callRateLimit = null)
        {
            capabilities ??= new Dictionary<string, string>();

            return new CognitiveServicesAccountDeploymentProperties(provisioningState, model, scaleSettings, capabilities, raiPolicyName, callRateLimit);
        }

        /// <summary> Initializes a new instance of CognitiveServicesAccountDeploymentScaleSettings. </summary>
        /// <param name="scaleType"> Deployment scale type. </param>
        /// <param name="capacity"> Deployment capacity. </param>
        /// <param name="activeCapacity"> Deployment active capacity. This value might be different from `capacity` if customer recently updated `capacity`. </param>
        /// <returns> A new <see cref="Models.CognitiveServicesAccountDeploymentScaleSettings"/> instance for mocking. </returns>
        public static CognitiveServicesAccountDeploymentScaleSettings CognitiveServicesAccountDeploymentScaleSettings(CognitiveServicesAccountDeploymentScaleType? scaleType = null, int? capacity = null, int? activeCapacity = null)
        {
            return new CognitiveServicesAccountDeploymentScaleSettings(scaleType, capacity, activeCapacity);
        }

        /// <summary> Initializes a new instance of CommitmentPlanData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="etag"> Resource Etag. </param>
        /// <param name="properties"> Properties of Cognitive Services account commitment plan. </param>
        /// <returns> A new <see cref="CognitiveServices.CommitmentPlanData"/> instance for mocking. </returns>
        public static CommitmentPlanData CommitmentPlanData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ETag? etag = null, CommitmentPlanProperties properties = null)
        {
            return new CommitmentPlanData(id, name, resourceType, systemData, etag, properties);
        }

        /// <summary> Initializes a new instance of CommitmentPlanProperties. </summary>
        /// <param name="hostingModel"> Account hosting model. </param>
        /// <param name="planType"> Commitment plan type. </param>
        /// <param name="current"> Cognitive Services account commitment period. </param>
        /// <param name="autoRenew"> AutoRenew commitment plan. </param>
        /// <param name="next"> Cognitive Services account commitment period. </param>
        /// <param name="last"> Cognitive Services account commitment period. </param>
        /// <returns> A new <see cref="Models.CommitmentPlanProperties"/> instance for mocking. </returns>
        public static CommitmentPlanProperties CommitmentPlanProperties(ServiceAccountHostingModel? hostingModel = null, string planType = null, CommitmentPeriod current = null, bool? autoRenew = null, CommitmentPeriod next = null, CommitmentPeriod last = null)
        {
            return new CommitmentPlanProperties(hostingModel, planType, current, autoRenew, next, last);
        }

        /// <summary> Initializes a new instance of CommitmentPeriod. </summary>
        /// <param name="tier"> Commitment period commitment tier. </param>
        /// <param name="count"> Commitment period commitment count. </param>
        /// <param name="quota"> Cognitive Services account commitment quota. </param>
        /// <param name="startOn"> Commitment period start date. </param>
        /// <param name="endOn"> Commitment period end date. </param>
        /// <returns> A new <see cref="Models.CommitmentPeriod"/> instance for mocking. </returns>
        public static CommitmentPeriod CommitmentPeriod(string tier = null, int? count = null, CommitmentQuota quota = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null)
        {
            return new CommitmentPeriod(tier, count, quota, startOn, endOn);
        }
    }
}
