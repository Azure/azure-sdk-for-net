// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.CognitiveServices.Models
{
    public partial class CognitiveServicesMultiRegionSettings : IModelJsonSerializable<CognitiveServicesMultiRegionSettings>
    {
        void IModelJsonSerializable<CognitiveServicesMultiRegionSettings>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options) => ((IUtf8JsonSerializable)this).Write(writer);

        CognitiveServicesMultiRegionSettings IModelJsonSerializable<CognitiveServicesMultiRegionSettings>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeCognitiveServicesMultiRegionSettings(doc.RootElement);
        }

        BinaryData IModelSerializable<CognitiveServicesMultiRegionSettings>.Serialize(ModelSerializerOptions options) => (options.Format.ToString()) switch
        {
            "J" or "W" => ModelSerializer.SerializeCore(this, options),
            "bicep" => SerializeBicep(options),
            _ => throw new FormatException($"Unsupported format {options.Format}")
        };

        CognitiveServicesMultiRegionSettings IModelSerializable<CognitiveServicesMultiRegionSettings>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            using var document = JsonDocument.Parse(data);
            return DeserializeCognitiveServicesMultiRegionSettings(document.RootElement);
        }

        private BinaryData SerializeBicep(ModelSerializerOptions options)
        {
            StringBuilder sb = new StringBuilder();
            if (Optional.IsDefined(RoutingMethod))
            {
                sb.AppendLine($"  routingMethod: '{RoutingMethod.Value}'");
            }
            if (Optional.IsCollectionDefined(Regions))
            {
                sb.AppendLine($"  regions: [");
                foreach (var item in Regions)
                {
                    sb.AppendLine($"    {{");
                    sb.AppendChildObject(item, options, true);
                    sb.AppendLine($"    }}");
                }
                sb.AppendLine($"  ]");
            }
            return BinaryData.FromString(sb.ToString());
        }
    }
}
