// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text;
using Azure.Core;

namespace Azure.ResourceManager.CognitiveServices.Models
{
    public partial class CognitiveServicesAccountProperties
    {
        BinaryData global::System.ClientModel.Primitives.IPersistableModel<CognitiveServicesAccountProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CognitiveServicesAccountProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "bicep":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(CognitiveServicesAccountProperties)} does not support '{options.Format}' format.");
            }
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder sb = new StringBuilder();
            if (Optional.IsDefined(MigrationToken))
            {
                sb.AppendLine($"  migrationToken: '{MigrationToken}'");
            }
            if (Optional.IsDefined(CustomSubDomainName))
            {
                sb.AppendLine($"  customSubDomainName: '{CustomSubDomainName}'");
            }
            if (Optional.IsDefined(NetworkAcls))
            {
                sb.AppendLine($"  networkAcls: {{");
                sb.AppendChildObject(NetworkAcls, options, true);
                sb.AppendLine($"  }}");
            }
            if (Optional.IsDefined(Encryption))
            {
                sb.AppendLine($"  encryption: {{");
                sb.AppendChildObject(Encryption, options, true);
                sb.AppendLine($"  }}");
            }
            if (Optional.IsCollectionDefined(UserOwnedStorage))
            {
                sb.AppendLine($"  userOwnedStorage: [");
                foreach (var item in UserOwnedStorage)
                {
                    sb.AppendLine($"    {{");
                    sb.AppendChildObject(item, options, true);
                    sb.AppendLine($"    }}");
                }
                sb.AppendLine($"  ]");
            }
            if (Optional.IsDefined(PublicNetworkAccess))
            {
                sb.AppendLine($"  publicNetworkAccess: '{PublicNetworkAccess.Value}'");
            }
            if (Optional.IsDefined(ApiProperties))
            {
                sb.AppendLine($"  apiProperties: {{");
                sb.AppendChildObject(ApiProperties, options, true);
                sb.AppendLine($"  }}");
            }
            if (Optional.IsDefined(EnableDynamicThrottling))
            {
                sb.AppendLine($"  dynamicThrottlingEnabled: {EnableDynamicThrottling.Value.ToString().ToLower()}");
            }
            if (Optional.IsDefined(RestrictOutboundNetworkAccess))
            {
                sb.AppendLine($"  restrictOutboundNetworkAccess: {RestrictOutboundNetworkAccess.Value.ToString().ToLower()}");
            }
            if (Optional.IsCollectionDefined(AllowedFqdnList))
            {
                sb.AppendLine($"  allowedFqdnList: [");
                foreach (var item in AllowedFqdnList)
                {
                    sb.AppendLine($"    '{item}'");
                }
                sb.AppendLine($"  ]");
            }
            if (Optional.IsDefined(DisableLocalAuth))
            {
                sb.AppendLine($"  disableLocalAuth: {DisableLocalAuth.Value.ToString().ToLower()}");
            }
            if (Optional.IsDefined(Restore))
            {
                sb.AppendLine($"  restore: {Restore.Value.ToString().ToLower()}");
            }
            if (Optional.IsDefined(Locations))
            {
                sb.AppendLine($"  locations: {{");
                sb.AppendChildObject(Locations, options, true);
                sb.AppendLine($"  }}");
            }
            return BinaryData.FromString(sb.ToString());
        }
    }
}
