// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;
using Azure.ResourceManager.CognitiveServices;

namespace Azure.ResourceManager.CognitiveServices.Models
{
    public partial class CognitiveServicesAccountProperties : IModelJsonSerializable<CognitiveServicesAccountProperties>
    {
        void IModelJsonSerializable<CognitiveServicesAccountProperties>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options) => ((IUtf8JsonSerializable)this).Write(writer);

        CognitiveServicesAccountProperties IModelJsonSerializable<CognitiveServicesAccountProperties>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeCognitiveServicesAccountProperties(doc.RootElement);
        }

        BinaryData IModelSerializable<CognitiveServicesAccountProperties>.Serialize(ModelSerializerOptions options) => (options.Format.ToString()) switch
        {
            "J" or "W" => ModelSerializer.SerializeCore(this, options),
            "bicep" => SerializeBicep(options),
            _ => throw new FormatException($"Unsupported format {options.Format}")
        };

        CognitiveServicesAccountProperties IModelSerializable<CognitiveServicesAccountProperties>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            using var document = JsonDocument.Parse(data);
            return DeserializeCognitiveServicesAccountProperties(document.RootElement);
        }

        private BinaryData SerializeBicep(ModelSerializerOptions options)
        {
            StringBuilder sb = new StringBuilder();
            if (Optional.IsDefined(MigrationToken))
            {
                sb.AppendLine($"  migrationToken: '{MigrationToken}'");
            }
            if (Optional.IsDefined(CustomSubDomainName))
            {
                sb.AppendLine($"  customSubDomainName: '{CustomSubDomainName}'");
            }
            if (Optional.IsDefined(NetworkAcls))
            {
                sb.AppendLine($"  networkAcls: {{");
                sb.AppendChildObject(NetworkAcls, options, true);
                sb.AppendLine($"  }}");
            }
            if (Optional.IsDefined(Encryption))
            {
                sb.AppendLine($"  encryption: {{");
                sb.AppendChildObject(Encryption, options, true);
                sb.AppendLine($"  }}");
            }
            if (Optional.IsCollectionDefined(UserOwnedStorage))
            {
                sb.AppendLine($"  userOwnedStorage: [");
                foreach (var item in UserOwnedStorage)
                {
                    sb.AppendLine($"    {{");
                    sb.AppendChildObject(item, options, true);
                    sb.AppendLine($"    }}");
                }
                sb.AppendLine($"  ]");
            }
            if (Optional.IsDefined(PublicNetworkAccess))
            {
                sb.AppendLine($"  publicNetworkAccess: '{PublicNetworkAccess.Value}'");
            }
            if (Optional.IsDefined(ApiProperties))
            {
                sb.AppendLine($"  apiProperties: {{");
                sb.AppendChildObject(ApiProperties, options, true);
                sb.AppendLine($"  }}");
            }
            if (Optional.IsDefined(EnableDynamicThrottling))
            {
                sb.AppendLine($"  dynamicThrottlingEnabled: {EnableDynamicThrottling.Value.ToString().ToLower()}");
            }
            if (Optional.IsDefined(RestrictOutboundNetworkAccess))
            {
                sb.AppendLine($"  restrictOutboundNetworkAccess: {RestrictOutboundNetworkAccess.Value.ToString().ToLower()}");
            }
            if (Optional.IsCollectionDefined(AllowedFqdnList))
            {
                sb.AppendLine($"  allowedFqdnList: [");
                foreach (var item in AllowedFqdnList)
                {
                    sb.AppendLine($"    '{item}'");
                }
                sb.AppendLine($"  ]");
            }
            if (Optional.IsDefined(DisableLocalAuth))
            {
                sb.AppendLine($"  disableLocalAuth: {DisableLocalAuth.Value.ToString().ToLower()}");
            }
            if (Optional.IsDefined(Restore))
            {
                sb.AppendLine($"  restore: {Restore.Value.ToString().ToLower()}");
            }
            if (Optional.IsDefined(Locations))
            {
                sb.AppendLine($"  locations: {{");
                sb.AppendChildObject(Locations, options, true);
                sb.AppendLine($"  }}");
            }
            return BinaryData.FromString(sb.ToString());
        }
    }
}
