// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text;
using Azure.Core;

namespace Azure.ResourceManager.CognitiveServices.Models
{
    public partial class ServiceAccountApiProperties
    {
        BinaryData global::System.ClientModel.Primitives.IPersistableModel<ServiceAccountApiProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ServiceAccountApiProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "bicep":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(ServiceAccountApiProperties)} does not support '{options.Format}' format.");
            }
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder sb = new StringBuilder();
            if (Optional.IsDefined(QnaRuntimeEndpoint))
            {
                sb.AppendLine($"  qnaRuntimeEndpoint: '{QnaRuntimeEndpoint}'");
            }
            if (Optional.IsDefined(QnaAzureSearchEndpointKey))
            {
                sb.AppendLine($"  qnaAzureSearchEndpointKey: '{QnaAzureSearchEndpointKey}'");
            }
            if (Optional.IsDefined(QnaAzureSearchEndpointId))
            {
                sb.AppendLine($"  qnaAzureSearchEndpointId: '{QnaAzureSearchEndpointId}'");
            }
            if (Optional.IsDefined(EnableStatistics))
            {
                sb.AppendLine($"  statisticsEnabled: '{EnableStatistics.Value.ToString().ToLower()}'");
            }
            if (Optional.IsDefined(EventHubConnectionString))
            {
                sb.AppendLine($"  eventHubConnectionString: '{EventHubConnectionString}'");
            }
            if (Optional.IsDefined(StorageAccountConnectionString))
            {
                sb.AppendLine($"  storageAccountConnectionString: '{StorageAccountConnectionString}'");
            }
            if (Optional.IsDefined(AadClientId))
            {
                sb.AppendLine($"  aadClientId: '{AadClientId.Value}'");
            }
            if (Optional.IsDefined(AadTenantId))
            {
                sb.AppendLine($"  aadTenantId: '{AadTenantId.Value}'");
            }
            if (Optional.IsDefined(SuperUser))
            {
                sb.AppendLine($"  superUser: '{SuperUser}'");
            }
            if (Optional.IsDefined(WebsiteName))
            {
                sb.AppendLine($"  websiteName: '{WebsiteName}'");
            }
            return BinaryData.FromString(sb.ToString());
        }
    }
}
