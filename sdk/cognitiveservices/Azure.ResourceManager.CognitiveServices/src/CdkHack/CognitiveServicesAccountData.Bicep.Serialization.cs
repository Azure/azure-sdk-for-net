// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text;
using Azure.Core;

namespace Azure.ResourceManager.CognitiveServices
{
    public partial class CognitiveServicesAccountData
    {
        BinaryData global::System.ClientModel.Primitives.IPersistableModel<CognitiveServicesAccountData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CognitiveServicesAccountData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "bicep":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(CognitiveServicesAccountData)} does not support '{options.Format}' format.");
            }
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine($"  name: '{Name}'");
            sb.AppendLine($"  location: '{Location}'");
            if (Optional.IsCollectionDefined(Tags) && Tags.Count > 0)
            {
                sb.AppendLine($"  tags: {{");
                foreach (var kv in Tags)
                {
                    sb.AppendLine($"    '{kv.Key}': '{kv.Value}'");
                }
                sb.AppendLine($"  }}");
            }
            sb.AppendLine($"  sku: {{");
            sb.AppendChildObject(Sku, options, true);
            sb.AppendLine($"  }}");
            sb.AppendLine($"  kind: '{Kind}'");
            sb.AppendLine($"  properties: {{");
            sb.AppendChildObject(Properties, options, true);
            sb.AppendLine($"  }}");
            sb.AppendLine($"  identity: {{");
            sb.AppendLine($"    kind: '{Identity.ManagedServiceIdentityType}'");
            sb.AppendLine($"  }}");
            return BinaryData.FromString(sb.ToString());
        }
    }
}
