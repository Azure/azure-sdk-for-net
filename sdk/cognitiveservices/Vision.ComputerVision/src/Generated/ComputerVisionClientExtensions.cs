// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Vision.ComputerVision
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ComputerVisionClient.
    /// </summary>
    public static partial class ComputerVisionClientExtensions
    {
            /// <summary>
            /// This operation extracts a rich set of visual features based on the image
            /// content.
            /// Two input methods are supported -- (1) Uploading an image or (2) specifying
            /// an image URL. Within your request, there is an optional parameter to allow
            /// you to choose which features to return. By default, image categories are
            /// returned in the response.
            /// A successful response will be returned in JSON. If the request failed, the
            /// response will contain an error code and a message to help understand what
            /// went wrong.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='url'>
            /// Publicly reachable URL of an image.
            /// </param>
            /// <param name='visualFeatures'>
            /// A string indicating what visual feature types to return. Multiple values
            /// should be comma-separated. Valid visual feature types include: Categories -
            /// categorizes image content according to a taxonomy defined in documentation.
            /// Tags - tags the image with a detailed list of words related to the image
            /// content. Description - describes the image content with a complete English
            /// sentence. Faces - detects if faces are present. If present, generate
            /// coordinates, gender and age. ImageType - detects if image is clipart or a
            /// line drawing. Color - determines the accent color, dominant color, and
            /// whether an image is black&amp;white. Adult - detects if the image is
            /// pornographic in nature (depicts nudity or a sex act), or is gory (depicts
            /// extreme violence or blood). Sexually suggestive content (aka racy content)
            /// is also detected. Objects - detects various objects within an image,
            /// including the approximate location. The Objects argument is only available
            /// in English. Brands - detects various brands within an image, including the
            /// approximate location. The Brands argument is only available in English.
            /// </param>
            /// <param name='details'>
            /// A string indicating which domain-specific details to return. Multiple
            /// values should be comma-separated. Valid visual feature types include:
            /// Celebrities - identifies celebrities if detected in the image, Landmarks -
            /// identifies notable landmarks in the image.
            /// </param>
            /// <param name='language'>
            /// The desired language for output generation. If this parameter is not
            /// specified, the default value is &amp;quot;en&amp;quot;.Supported
            /// languages:en - English, Default. es - Spanish, ja - Japanese, pt -
            /// Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es',
            /// 'ja', 'pt', 'zh'
            /// </param>
            /// <param name='descriptionExclude'>
            /// Turn off specified domain models when generating the description.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImageAnalysis> AnalyzeImageAsync(this IComputerVisionClient operations, string url, IList<VisualFeatureTypes?> visualFeatures = default(IList<VisualFeatureTypes?>), IList<Details?> details = default(IList<Details?>), string language = default(string), IList<DescriptionExclude?> descriptionExclude = default(IList<DescriptionExclude?>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AnalyzeImageWithHttpMessagesAsync(url, visualFeatures, details, language, descriptionExclude, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This operation generates a description of an image in human readable
            /// language with complete sentences. The description is based on a collection
            /// of content tags, which are also returned by the operation. More than one
            /// description can be generated for each image. Descriptions are ordered by
            /// their confidence score. Descriptions may include results from celebrity and
            /// landmark domain models, if applicable.
            /// Two input methods are supported -- (1) Uploading an image or (2) specifying
            /// an image URL.
            /// A successful response will be returned in JSON. If the request failed, the
            /// response will contain an error code and a message to help understand what
            /// went wrong.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='url'>
            /// Publicly reachable URL of an image.
            /// </param>
            /// <param name='maxCandidates'>
            /// Maximum number of candidate descriptions to be returned.  The default is 1.
            /// </param>
            /// <param name='language'>
            /// The desired language for output generation. If this parameter is not
            /// specified, the default value is &amp;quot;en&amp;quot;.Supported
            /// languages:en - English, Default. es - Spanish, ja - Japanese, pt -
            /// Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es',
            /// 'ja', 'pt', 'zh'
            /// </param>
            /// <param name='descriptionExclude'>
            /// Turn off specified domain models when generating the description.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImageDescription> DescribeImageAsync(this IComputerVisionClient operations, string url, int? maxCandidates = 1, string language = default(string), IList<DescriptionExclude?> descriptionExclude = default(IList<DescriptionExclude?>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DescribeImageWithHttpMessagesAsync(url, maxCandidates, language, descriptionExclude, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Performs object detection on the specified image.
            /// Two input methods are supported -- (1) Uploading an image or (2) specifying
            /// an image URL.
            /// A successful response will be returned in JSON. If the request failed, the
            /// response will contain an error code and a message to help understand what
            /// went wrong.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='url'>
            /// Publicly reachable URL of an image.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DetectResult> DetectObjectsAsync(this IComputerVisionClient operations, string url, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DetectObjectsWithHttpMessagesAsync(url, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This operation returns the list of domain-specific models that are
            /// supported by the Computer Vision API. Currently, the API supports following
            /// domain-specific models: celebrity recognizer, landmark recognizer.
            /// A successful response will be returned in JSON. If the request failed, the
            /// response will contain an error code and a message to help understand what
            /// went wrong.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListModelsResult> ListModelsAsync(this IComputerVisionClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListModelsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This operation recognizes content within an image by applying a
            /// domain-specific model. The list of domain-specific models that are
            /// supported by the Computer Vision API can be retrieved using the /models GET
            /// request. Currently, the API provides following domain-specific models:
            /// celebrities, landmarks.
            /// Two input methods are supported -- (1) Uploading an image or (2) specifying
            /// an image URL.
            /// A successful response will be returned in JSON.
            /// If the request failed, the response will contain an error code and a
            /// message to help understand what went wrong.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The domain-specific content to recognize.
            /// </param>
            /// <param name='url'>
            /// Publicly reachable URL of an image.
            /// </param>
            /// <param name='language'>
            /// The desired language for output generation. If this parameter is not
            /// specified, the default value is &amp;quot;en&amp;quot;.Supported
            /// languages:en - English, Default. es - Spanish, ja - Japanese, pt -
            /// Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es',
            /// 'ja', 'pt', 'zh'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DomainModelResults> AnalyzeImageByDomainAsync(this IComputerVisionClient operations, string model, string url, string language = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AnalyzeImageByDomainWithHttpMessagesAsync(model, url, language, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Optical Character Recognition (OCR) detects text in an image and extracts
            /// the recognized characters into a machine-usable character stream.
            /// Upon success, the OCR results will be returned.
            /// Upon failure, the error code together with an error message will be
            /// returned. The error code can be one of InvalidImageUrl, InvalidImageFormat,
            /// InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or
            /// InternalServerError.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='detectOrientation'>
            /// Whether detect the text orientation in the image. With
            /// detectOrientation=true the OCR service tries to detect the image
            /// orientation and correct it before further processing (e.g. if it's
            /// upside-down).
            /// </param>
            /// <param name='url'>
            /// Publicly reachable URL of an image.
            /// </param>
            /// <param name='language'>
            /// The BCP-47 language code of the text to be detected in the image. The
            /// default value is 'unk'. Possible values include: 'unk', 'zh-Hans',
            /// 'zh-Hant', 'cs', 'da', 'nl', 'en', 'fi', 'fr', 'de', 'el', 'hu', 'it',
            /// 'ja', 'ko', 'nb', 'pl', 'pt', 'ru', 'es', 'sv', 'tr', 'ar', 'ro',
            /// 'sr-Cyrl', 'sr-Latn', 'sk'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OcrResult> RecognizePrintedTextAsync(this IComputerVisionClient operations, bool detectOrientation, string url, OcrLanguages? language = default(OcrLanguages?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RecognizePrintedTextWithHttpMessagesAsync(detectOrientation, url, language, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This operation generates a list of words, or tags, that are relevant to the
            /// content of the supplied image. The Computer Vision API can return tags
            /// based on objects, living beings, scenery or actions found in images. Unlike
            /// categories, tags are not organized according to a hierarchical
            /// classification system, but correspond to image content. Tags may contain
            /// hints to avoid ambiguity or provide context, for example the tag
            /// "ascomycete" may be accompanied by the hint "fungus".
            /// Two input methods are supported -- (1) Uploading an image or (2) specifying
            /// an image URL.
            /// A successful response will be returned in JSON. If the request failed, the
            /// response will contain an error code and a message to help understand what
            /// went wrong.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='url'>
            /// Publicly reachable URL of an image.
            /// </param>
            /// <param name='language'>
            /// The desired language for output generation. If this parameter is not
            /// specified, the default value is &amp;quot;en&amp;quot;.Supported
            /// languages:en - English, Default. es - Spanish, ja - Japanese, pt -
            /// Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es',
            /// 'ja', 'pt', 'zh'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TagResult> TagImageAsync(this IComputerVisionClient operations, string url, string language = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TagImageWithHttpMessagesAsync(url, language, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This operation generates a thumbnail image with the user-specified width
            /// and height. By default, the service analyzes the image, identifies the
            /// region of interest (ROI), and generates smart cropping coordinates based on
            /// the ROI. Smart cropping helps when you specify an aspect ratio that differs
            /// from that of the input image.
            /// A successful response contains the thumbnail image binary. If the request
            /// failed, the response contains an error code and a message to help determine
            /// what went wrong.
            /// Upon failure, the error code and an error message are returned. The error
            /// code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize,
            /// InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or
            /// InternalServerError.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='width'>
            /// Width of the thumbnail, in pixels. It must be between 1 and 1024.
            /// Recommended minimum of 50.
            /// </param>
            /// <param name='height'>
            /// Height of the thumbnail, in pixels. It must be between 1 and 1024.
            /// Recommended minimum of 50.
            /// </param>
            /// <param name='url'>
            /// Publicly reachable URL of an image.
            /// </param>
            /// <param name='smartCropping'>
            /// Boolean flag for enabling smart cropping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GenerateThumbnailAsync(this IComputerVisionClient operations, int width, int height, string url, bool? smartCropping = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GenerateThumbnailWithHttpMessagesAsync(width, height, url, smartCropping, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// This operation returns a bounding box around the most important area of the
            /// image.
            /// A successful response will be returned in JSON. If the request failed, the
            /// response contains an error code and a message to help determine what went
            /// wrong.
            /// Upon failure, the error code and an error message are returned. The error
            /// code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize,
            /// NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='url'>
            /// Publicly reachable URL of an image.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AreaOfInterestResult> GetAreaOfInterestAsync(this IComputerVisionClient operations, string url, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAreaOfInterestWithHttpMessagesAsync(url, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This operation extracts a rich set of visual features based on the image
            /// content.
            /// Two input methods are supported -- (1) Uploading an image or (2) specifying
            /// an image URL. Within your request, there is an optional parameter to allow
            /// you to choose which features to return. By default, image categories are
            /// returned in the response.
            /// A successful response will be returned in JSON. If the request failed, the
            /// response will contain an error code and a message to help understand what
            /// went wrong.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='image'>
            /// An image stream.
            /// </param>
            /// <param name='visualFeatures'>
            /// A string indicating what visual feature types to return. Multiple values
            /// should be comma-separated. Valid visual feature types include: Categories -
            /// categorizes image content according to a taxonomy defined in documentation.
            /// Tags - tags the image with a detailed list of words related to the image
            /// content. Description - describes the image content with a complete English
            /// sentence. Faces - detects if faces are present. If present, generate
            /// coordinates, gender and age. ImageType - detects if image is clipart or a
            /// line drawing. Color - determines the accent color, dominant color, and
            /// whether an image is black&amp;white. Adult - detects if the image is
            /// pornographic in nature (depicts nudity or a sex act), or is gory (depicts
            /// extreme violence or blood). Sexually suggestive content (aka racy content)
            /// is also detected. Objects - detects various objects within an image,
            /// including the approximate location. The Objects argument is only available
            /// in English. Brands - detects various brands within an image, including the
            /// approximate location. The Brands argument is only available in English.
            /// </param>
            /// <param name='details'>
            /// A string indicating which domain-specific details to return. Multiple
            /// values should be comma-separated. Valid visual feature types include:
            /// Celebrities - identifies celebrities if detected in the image, Landmarks -
            /// identifies notable landmarks in the image.
            /// </param>
            /// <param name='language'>
            /// The desired language for output generation. If this parameter is not
            /// specified, the default value is &amp;quot;en&amp;quot;.Supported
            /// languages:en - English, Default. es - Spanish, ja - Japanese, pt -
            /// Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es',
            /// 'ja', 'pt', 'zh'
            /// </param>
            /// <param name='descriptionExclude'>
            /// Turn off specified domain models when generating the description.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImageAnalysis> AnalyzeImageInStreamAsync(this IComputerVisionClient operations, Stream image, IList<VisualFeatureTypes?> visualFeatures = default(IList<VisualFeatureTypes?>), IList<Details?> details = default(IList<Details?>), string language = default(string), IList<DescriptionExclude?> descriptionExclude = default(IList<DescriptionExclude?>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AnalyzeImageInStreamWithHttpMessagesAsync(image, visualFeatures, details, language, descriptionExclude, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This operation returns a bounding box around the most important area of the
            /// image.
            /// A successful response will be returned in JSON. If the request failed, the
            /// response contains an error code and a message to help determine what went
            /// wrong.
            /// Upon failure, the error code and an error message are returned. The error
            /// code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize,
            /// NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='image'>
            /// An image stream.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AreaOfInterestResult> GetAreaOfInterestInStreamAsync(this IComputerVisionClient operations, Stream image, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAreaOfInterestInStreamWithHttpMessagesAsync(image, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This operation generates a description of an image in human readable
            /// language with complete sentences. The description is based on a collection
            /// of content tags, which are also returned by the operation. More than one
            /// description can be generated for each image. Descriptions are ordered by
            /// their confidence score. Descriptions may include results from celebrity and
            /// landmark domain models, if applicable.
            /// Two input methods are supported -- (1) Uploading an image or (2) specifying
            /// an image URL.
            /// A successful response will be returned in JSON. If the request failed, the
            /// response will contain an error code and a message to help understand what
            /// went wrong.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='image'>
            /// An image stream.
            /// </param>
            /// <param name='maxCandidates'>
            /// Maximum number of candidate descriptions to be returned.  The default is 1.
            /// </param>
            /// <param name='language'>
            /// The desired language for output generation. If this parameter is not
            /// specified, the default value is &amp;quot;en&amp;quot;.Supported
            /// languages:en - English, Default. es - Spanish, ja - Japanese, pt -
            /// Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es',
            /// 'ja', 'pt', 'zh'
            /// </param>
            /// <param name='descriptionExclude'>
            /// Turn off specified domain models when generating the description.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImageDescription> DescribeImageInStreamAsync(this IComputerVisionClient operations, Stream image, int? maxCandidates = 1, string language = default(string), IList<DescriptionExclude?> descriptionExclude = default(IList<DescriptionExclude?>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DescribeImageInStreamWithHttpMessagesAsync(image, maxCandidates, language, descriptionExclude, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Performs object detection on the specified image.
            /// Two input methods are supported -- (1) Uploading an image or (2) specifying
            /// an image URL.
            /// A successful response will be returned in JSON. If the request failed, the
            /// response will contain an error code and a message to help understand what
            /// went wrong.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='image'>
            /// An image stream.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DetectResult> DetectObjectsInStreamAsync(this IComputerVisionClient operations, Stream image, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DetectObjectsInStreamWithHttpMessagesAsync(image, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This operation generates a thumbnail image with the user-specified width
            /// and height. By default, the service analyzes the image, identifies the
            /// region of interest (ROI), and generates smart cropping coordinates based on
            /// the ROI. Smart cropping helps when you specify an aspect ratio that differs
            /// from that of the input image.
            /// A successful response contains the thumbnail image binary. If the request
            /// failed, the response contains an error code and a message to help determine
            /// what went wrong.
            /// Upon failure, the error code and an error message are returned. The error
            /// code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize,
            /// InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or
            /// InternalServerError.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='width'>
            /// Width of the thumbnail, in pixels. It must be between 1 and 1024.
            /// Recommended minimum of 50.
            /// </param>
            /// <param name='height'>
            /// Height of the thumbnail, in pixels. It must be between 1 and 1024.
            /// Recommended minimum of 50.
            /// </param>
            /// <param name='image'>
            /// An image stream.
            /// </param>
            /// <param name='smartCropping'>
            /// Boolean flag for enabling smart cropping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GenerateThumbnailInStreamAsync(this IComputerVisionClient operations, int width, int height, Stream image, bool? smartCropping = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GenerateThumbnailInStreamWithHttpMessagesAsync(width, height, image, smartCropping, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// This operation recognizes content within an image by applying a
            /// domain-specific model. The list of domain-specific models that are
            /// supported by the Computer Vision API can be retrieved using the /models GET
            /// request. Currently, the API provides following domain-specific models:
            /// celebrities, landmarks.
            /// Two input methods are supported -- (1) Uploading an image or (2) specifying
            /// an image URL.
            /// A successful response will be returned in JSON.
            /// If the request failed, the response will contain an error code and a
            /// message to help understand what went wrong.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The domain-specific content to recognize.
            /// </param>
            /// <param name='image'>
            /// An image stream.
            /// </param>
            /// <param name='language'>
            /// The desired language for output generation. If this parameter is not
            /// specified, the default value is &amp;quot;en&amp;quot;.Supported
            /// languages:en - English, Default. es - Spanish, ja - Japanese, pt -
            /// Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es',
            /// 'ja', 'pt', 'zh'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DomainModelResults> AnalyzeImageByDomainInStreamAsync(this IComputerVisionClient operations, string model, Stream image, string language = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AnalyzeImageByDomainInStreamWithHttpMessagesAsync(model, image, language, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Optical Character Recognition (OCR) detects text in an image and extracts
            /// the recognized characters into a machine-usable character stream.
            /// Upon success, the OCR results will be returned.
            /// Upon failure, the error code together with an error message will be
            /// returned. The error code can be one of InvalidImageUrl, InvalidImageFormat,
            /// InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or
            /// InternalServerError.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='detectOrientation'>
            /// Whether detect the text orientation in the image. With
            /// detectOrientation=true the OCR service tries to detect the image
            /// orientation and correct it before further processing (e.g. if it's
            /// upside-down).
            /// </param>
            /// <param name='image'>
            /// An image stream.
            /// </param>
            /// <param name='language'>
            /// The BCP-47 language code of the text to be detected in the image. The
            /// default value is 'unk'. Possible values include: 'unk', 'zh-Hans',
            /// 'zh-Hant', 'cs', 'da', 'nl', 'en', 'fi', 'fr', 'de', 'el', 'hu', 'it',
            /// 'ja', 'ko', 'nb', 'pl', 'pt', 'ru', 'es', 'sv', 'tr', 'ar', 'ro',
            /// 'sr-Cyrl', 'sr-Latn', 'sk'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OcrResult> RecognizePrintedTextInStreamAsync(this IComputerVisionClient operations, bool detectOrientation, Stream image, OcrLanguages? language = default(OcrLanguages?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RecognizePrintedTextInStreamWithHttpMessagesAsync(detectOrientation, image, language, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This operation generates a list of words, or tags, that are relevant to the
            /// content of the supplied image. The Computer Vision API can return tags
            /// based on objects, living beings, scenery or actions found in images. Unlike
            /// categories, tags are not organized according to a hierarchical
            /// classification system, but correspond to image content. Tags may contain
            /// hints to avoid ambiguity or provide context, for example the tag
            /// "ascomycete" may be accompanied by the hint "fungus".
            /// Two input methods are supported -- (1) Uploading an image or (2) specifying
            /// an image URL.
            /// A successful response will be returned in JSON. If the request failed, the
            /// response will contain an error code and a message to help understand what
            /// went wrong.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='image'>
            /// An image stream.
            /// </param>
            /// <param name='language'>
            /// The desired language for output generation. If this parameter is not
            /// specified, the default value is &amp;quot;en&amp;quot;.Supported
            /// languages:en - English, Default. es - Spanish, ja - Japanese, pt -
            /// Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es',
            /// 'ja', 'pt', 'zh'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TagResult> TagImageInStreamAsync(this IComputerVisionClient operations, Stream image, string language = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TagImageInStreamWithHttpMessagesAsync(image, language, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Use this interface to get the result of a Read operation, employing the
            /// state-of-the-art Optical Character Recognition (OCR) algorithms optimized
            /// for text-heavy documents. When you use the Read interface, the response
            /// contains a field called 'Operation-Location'. The 'Operation-Location'
            /// field contains the URL that you must use for your 'GetReadResult' operation
            /// to access OCR results.​
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='url'>
            /// Publicly reachable URL of an image.
            /// </param>
            /// <param name='language'>
            /// The BCP-47 language code of the text in the document. Currently, only
            /// English ('en'), Dutch (‘nl’), French (‘fr’), German (‘de’), Italian (‘it’),
            /// Portuguese (‘pt), and Spanish ('es') are supported. Read supports auto
            /// language identification and multi-language documents, so only provide a
            /// language code if you would like to force the documented to be processed as
            /// that specific language. Possible values include: 'en', 'es', 'fr', 'de',
            /// 'it', 'nl', 'pt'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReadHeaders> ReadAsync(this IComputerVisionClient operations, string url, string language = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadWithHttpMessagesAsync(url, language, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// This interface is used for getting OCR results of Read operation. The URL
            /// to this interface should be retrieved from 'Operation-Location' field
            /// returned from Read interface.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='operationId'>
            /// Id of read operation returned in the response of the 'Read' interface.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReadOperationResult> GetReadResultAsync(this IComputerVisionClient operations, System.Guid operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReadResultWithHttpMessagesAsync(operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Use this interface to get the result of a Read operation, employing the
            /// state-of-the-art Optical Character Recognition (OCR) algorithms optimized
            /// for text-heavy documents. When you use the Read interface, the response
            /// contains a field called 'Operation-Location'. The 'Operation-Location'
            /// field contains the URL that you must use for your 'GetReadResult' operation
            /// to access OCR results.​
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='image'>
            /// An image stream.
            /// </param>
            /// <param name='language'>
            /// The BCP-47 language code of the text in the document. Currently, only
            /// English ('en'), Dutch (‘nl’), French (‘fr’), German (‘de’), Italian (‘it’),
            /// Portuguese (‘pt), and Spanish ('es') are supported. Read supports auto
            /// language identification and multi-language documents, so only provide a
            /// language code if you would like to force the documented to be processed as
            /// that specific language. Possible values include: 'en', 'es', 'fr', 'de',
            /// 'it', 'nl', 'pt'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReadInStreamHeaders> ReadInStreamAsync(this IComputerVisionClient operations, Stream image, string language = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadInStreamWithHttpMessagesAsync(image, language, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

    }
}
