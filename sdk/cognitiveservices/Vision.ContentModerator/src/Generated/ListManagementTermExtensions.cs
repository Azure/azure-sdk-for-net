// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.ContentModerator
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ListManagementTerm.
    /// </summary>
    public static partial class ListManagementTermExtensions
    {
            /// <summary>
            /// Add a term to the term list with list Id equal to list Id passed.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listId'>
            /// List Id of the image list.
            /// </param>
            /// <param name='term'>
            /// Term to be deleted
            /// </param>
            /// <param name='language'>
            /// Language of the terms.
            /// </param>
            public static object AddTerm(this IListManagementTerm operations, string listId, string term, string language)
            {
                return operations.AddTermAsync(listId, term, language).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a term to the term list with list Id equal to list Id passed.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listId'>
            /// List Id of the image list.
            /// </param>
            /// <param name='term'>
            /// Term to be deleted
            /// </param>
            /// <param name='language'>
            /// Language of the terms.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddTermAsync(this IListManagementTerm operations, string listId, string term, string language, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddTermWithHttpMessagesAsync(listId, term, language, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a term from the list with list Id equal to the list Id passed.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listId'>
            /// List Id of the image list.
            /// </param>
            /// <param name='term'>
            /// Term to be deleted
            /// </param>
            /// <param name='language'>
            /// Language of the terms.
            /// </param>
            public static string DeleteTerm(this IListManagementTerm operations, string listId, string term, string language)
            {
                return operations.DeleteTermAsync(listId, term, language).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a term from the list with list Id equal to the list Id passed.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listId'>
            /// List Id of the image list.
            /// </param>
            /// <param name='term'>
            /// Term to be deleted
            /// </param>
            /// <param name='language'>
            /// Language of the terms.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> DeleteTermAsync(this IListManagementTerm operations, string listId, string term, string language, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTermWithHttpMessagesAsync(listId, term, language, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all terms from the list with list Id equal to the list Id passed.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listId'>
            /// List Id of the image list.
            /// </param>
            /// <param name='language'>
            /// Language of the terms.
            /// </param>
            /// <param name='offset'>
            /// The pagination start index.
            /// </param>
            /// <param name='limit'>
            /// The max limit.
            /// </param>
            public static Terms GetAllTerms(this IListManagementTerm operations, string listId, string language, int? offset = default(int?), int? limit = default(int?))
            {
                return operations.GetAllTermsAsync(listId, language, offset, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all terms from the list with list Id equal to the list Id passed.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listId'>
            /// List Id of the image list.
            /// </param>
            /// <param name='language'>
            /// Language of the terms.
            /// </param>
            /// <param name='offset'>
            /// The pagination start index.
            /// </param>
            /// <param name='limit'>
            /// The max limit.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Terms> GetAllTermsAsync(this IListManagementTerm operations, string listId, string language, int? offset = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllTermsWithHttpMessagesAsync(listId, language, offset, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes all terms from the list with list Id equal to the list Id passed.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listId'>
            /// List Id of the image list.
            /// </param>
            /// <param name='language'>
            /// Language of the terms.
            /// </param>
            public static string DeleteAllTerms(this IListManagementTerm operations, string listId, string language)
            {
                return operations.DeleteAllTermsAsync(listId, language).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes all terms from the list with list Id equal to the list Id passed.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listId'>
            /// List Id of the image list.
            /// </param>
            /// <param name='language'>
            /// Language of the terms.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> DeleteAllTermsAsync(this IListManagementTerm operations, string listId, string language, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAllTermsWithHttpMessagesAsync(listId, language, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
