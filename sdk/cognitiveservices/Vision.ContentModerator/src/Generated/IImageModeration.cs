// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.ContentModerator
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// ImageModeration operations.
    /// </summary>
    public partial interface IImageModeration
    {
        /// <summary>
        /// Returns the list of faces found.
        /// </summary>
        /// <param name='cacheImage'>
        /// Whether to retain the submitted image for future use; defaults to
        /// false if omitted.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="APIErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<FoundFaces>> FindFacesWithHttpMessagesAsync(bool? cacheImage = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns any text found in the image for the language specified. If
        /// no language is specified in input then the detection defaults to
        /// English.
        /// </summary>
        /// <param name='language'>
        /// Language of the terms.
        /// </param>
        /// <param name='cacheImage'>
        /// Whether to retain the submitted image for future use; defaults to
        /// false if omitted.
        /// </param>
        /// <param name='enhanced'>
        /// When set to True, the image goes through additional processing to
        /// come with additional candidates.
        ///
        /// image/tiff is not supported when enhanced is set to true
        ///
        /// Note: This impacts the response time.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="APIErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<OCR>> OCRMethodWithHttpMessagesAsync(string language, bool? cacheImage = default(bool?), bool? enhanced = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns probabilities of the image containing racy or adult
        /// content.
        /// </summary>
        /// <param name='cacheImage'>
        /// Whether to retain the submitted image for future use; defaults to
        /// false if omitted.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="APIErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Evaluate>> EvaluateMethodWithHttpMessagesAsync(bool? cacheImage = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Fuzzily match an image against one of your custom Image Lists. You
        /// can create and manage your custom image lists using &lt;a
        /// href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt;
        /// API.
        ///
        /// Returns ID and tags of matching image.&lt;br/&gt;
        /// &lt;br/&gt;
        /// Note: Refresh Index must be run on the corresponding Image List
        /// before additions and removals are reflected in the response.
        /// </summary>
        /// <param name='listId'>
        /// The list Id.
        /// </param>
        /// <param name='cacheImage'>
        /// Whether to retain the submitted image for future use; defaults to
        /// false if omitted.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="APIErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<MatchResponse>> MatchMethodWithHttpMessagesAsync(string listId = default(string), bool? cacheImage = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the list of faces found.
        /// </summary>
        /// <param name='imageStream'>
        /// The image file.
        /// </param>
        /// <param name='cacheImage'>
        /// Whether to retain the submitted image for future use; defaults to
        /// false if omitted.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="APIErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<FoundFaces>> FindFacesFileInputWithHttpMessagesAsync(Stream imageStream, bool? cacheImage = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the list of faces found.
        /// </summary>
        /// <param name='contentType'>
        /// The content type.
        /// </param>
        /// <param name='imageUrl'>
        /// The image url.
        /// </param>
        /// <param name='cacheImage'>
        /// Whether to retain the submitted image for future use; defaults to
        /// false if omitted.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="APIErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<FoundFaces>> FindFacesUrlInputWithHttpMessagesAsync(string contentType, BodyModel imageUrl, bool? cacheImage = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns any text found in the image for the language specified. If
        /// no language is specified in input then the detection defaults to
        /// English.
        /// </summary>
        /// <param name='language'>
        /// Language of the terms.
        /// </param>
        /// <param name='contentType'>
        /// The content type.
        /// </param>
        /// <param name='imageUrl'>
        /// The image url.
        /// </param>
        /// <param name='cacheImage'>
        /// Whether to retain the submitted image for future use; defaults to
        /// false if omitted.
        /// </param>
        /// <param name='enhanced'>
        /// When set to True, the image goes through additional processing to
        /// come with additional candidates.
        ///
        /// image/tiff is not supported when enhanced is set to true
        ///
        /// Note: This impacts the response time.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="APIErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<OCR>> OCRUrlInputWithHttpMessagesAsync(string language, string contentType, BodyModel imageUrl, bool? cacheImage = default(bool?), bool? enhanced = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns any text found in the image for the language specified. If
        /// no language is specified in input then the detection defaults to
        /// English.
        /// </summary>
        /// <param name='language'>
        /// Language of the terms.
        /// </param>
        /// <param name='imageStream'>
        /// The image file.
        /// </param>
        /// <param name='cacheImage'>
        /// Whether to retain the submitted image for future use; defaults to
        /// false if omitted.
        /// </param>
        /// <param name='enhanced'>
        /// When set to True, the image goes through additional processing to
        /// come with additional candidates.
        ///
        /// image/tiff is not supported when enhanced is set to true
        ///
        /// Note: This impacts the response time.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="APIErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<OCR>> OCRFileInputWithHttpMessagesAsync(string language, Stream imageStream, bool? cacheImage = default(bool?), bool? enhanced = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns probabilities of the image containing racy or adult
        /// content.
        /// </summary>
        /// <param name='imageStream'>
        /// The image file.
        /// </param>
        /// <param name='cacheImage'>
        /// Whether to retain the submitted image for future use; defaults to
        /// false if omitted.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="APIErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Evaluate>> EvaluateFileInputWithHttpMessagesAsync(Stream imageStream, bool? cacheImage = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns probabilities of the image containing racy or adult
        /// content.
        /// </summary>
        /// <param name='contentType'>
        /// The content type.
        /// </param>
        /// <param name='imageUrl'>
        /// The image url.
        /// </param>
        /// <param name='cacheImage'>
        /// Whether to retain the submitted image for future use; defaults to
        /// false if omitted.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="APIErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Evaluate>> EvaluateUrlInputWithHttpMessagesAsync(string contentType, BodyModel imageUrl, bool? cacheImage = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Fuzzily match an image against one of your custom Image Lists. You
        /// can create and manage your custom image lists using &lt;a
        /// href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt;
        /// API.
        ///
        /// Returns ID and tags of matching image.&lt;br/&gt;
        /// &lt;br/&gt;
        /// Note: Refresh Index must be run on the corresponding Image List
        /// before additions and removals are reflected in the response.
        /// </summary>
        /// <param name='contentType'>
        /// The content type.
        /// </param>
        /// <param name='imageUrl'>
        /// The image url.
        /// </param>
        /// <param name='listId'>
        /// The list Id.
        /// </param>
        /// <param name='cacheImage'>
        /// Whether to retain the submitted image for future use; defaults to
        /// false if omitted.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="APIErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<MatchResponse>> MatchUrlInputWithHttpMessagesAsync(string contentType, BodyModel imageUrl, string listId = default(string), bool? cacheImage = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Fuzzily match an image against one of your custom Image Lists. You
        /// can create and manage your custom image lists using &lt;a
        /// href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt;
        /// API.
        ///
        /// Returns ID and tags of matching image.&lt;br/&gt;
        /// &lt;br/&gt;
        /// Note: Refresh Index must be run on the corresponding Image List
        /// before additions and removals are reflected in the response.
        /// </summary>
        /// <param name='imageStream'>
        /// The image file.
        /// </param>
        /// <param name='listId'>
        /// The list Id.
        /// </param>
        /// <param name='cacheImage'>
        /// Whether to retain the submitted image for future use; defaults to
        /// false if omitted.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="APIErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<MatchResponse>> MatchFileInputWithHttpMessagesAsync(Stream imageStream, string listId = default(string), bool? cacheImage = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
