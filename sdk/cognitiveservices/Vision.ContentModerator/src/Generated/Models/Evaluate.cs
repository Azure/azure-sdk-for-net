// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.ContentModerator.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Evaluate response object.
    /// </summary>
    public partial class Evaluate
    {
        /// <summary>
        /// Initializes a new instance of the Evaluate class.
        /// </summary>
        public Evaluate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Evaluate class.
        /// </summary>
        /// <param name="cacheID">The cache id.</param>
        /// <param name="result">Evaluate result.</param>
        /// <param name="trackingId">The tracking id.</param>
        /// <param name="adultClassificationScore">The adult classification
        /// score.</param>
        /// <param name="isImageAdultClassified">Indicates if an image is
        /// classified as adult.</param>
        /// <param name="racyClassificationScore">The racy classification
        /// score.</param>
        /// <param name="isImageRacyClassified">Indicates if the image is
        /// classified as racy.</param>
        /// <param name="advancedInfo">The advanced info.</param>
        /// <param name="status">The evaluate status</param>
        public Evaluate(string cacheID = default(string), bool? result = default(bool?), string trackingId = default(string), double? adultClassificationScore = default(double?), bool? isImageAdultClassified = default(bool?), double? racyClassificationScore = default(double?), bool? isImageRacyClassified = default(bool?), IList<KeyValuePair> advancedInfo = default(IList<KeyValuePair>), Status status = default(Status))
        {
            CacheID = cacheID;
            Result = result;
            TrackingId = trackingId;
            AdultClassificationScore = adultClassificationScore;
            IsImageAdultClassified = isImageAdultClassified;
            RacyClassificationScore = racyClassificationScore;
            IsImageRacyClassified = isImageRacyClassified;
            AdvancedInfo = advancedInfo;
            Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the cache id.
        /// </summary>
        [JsonProperty(PropertyName = "CacheID")]
        public string CacheID { get; set; }

        /// <summary>
        /// Gets or sets evaluate result.
        /// </summary>
        [JsonProperty(PropertyName = "Result")]
        public bool? Result { get; set; }

        /// <summary>
        /// Gets or sets the tracking id.
        /// </summary>
        [JsonProperty(PropertyName = "TrackingId")]
        public string TrackingId { get; set; }

        /// <summary>
        /// Gets or sets the adult classification score.
        /// </summary>
        [JsonProperty(PropertyName = "AdultClassificationScore")]
        public double? AdultClassificationScore { get; set; }

        /// <summary>
        /// Gets or sets indicates if an image is classified as adult.
        /// </summary>
        [JsonProperty(PropertyName = "IsImageAdultClassified")]
        public bool? IsImageAdultClassified { get; set; }

        /// <summary>
        /// Gets or sets the racy classification score.
        /// </summary>
        [JsonProperty(PropertyName = "RacyClassificationScore")]
        public double? RacyClassificationScore { get; set; }

        /// <summary>
        /// Gets or sets indicates if the image is classified as racy.
        /// </summary>
        [JsonProperty(PropertyName = "IsImageRacyClassified")]
        public bool? IsImageRacyClassified { get; set; }

        /// <summary>
        /// Gets or sets the advanced info.
        /// </summary>
        [JsonProperty(PropertyName = "AdvancedInfo")]
        public IList<KeyValuePair> AdvancedInfo { get; set; }

        /// <summary>
        /// Gets or sets the evaluate status
        /// </summary>
        [JsonProperty(PropertyName = "Status")]
        public Status Status { get; set; }

    }
}
