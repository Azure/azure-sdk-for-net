// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Speech.BatchTranscription
{
    /// <summary> Transcription. </summary>
    public partial class TranscriptionJob
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TranscriptionJob"/>. </summary>
        /// <param name="properties"> TranscriptionProperties. </param>
        /// <param name="locale"> The locale of the contained data. If Language Identification is used, this locale is used to transcribe speech for which no language could be detected. </param>
        /// <param name="displayName"> The display name of the object. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="properties"/>, <paramref name="locale"/> or <paramref name="displayName"/> is null. </exception>
        public TranscriptionJob(TranscriptionProperties properties, string locale, string displayName)
        {
            Argument.AssertNotNull(properties, nameof(properties));
            Argument.AssertNotNull(locale, nameof(locale));
            Argument.AssertNotNull(displayName, nameof(displayName));

            Properties = properties;
            Contents = new ChangeTrackingList<Uri>();
            Locale = locale;
            DisplayName = displayName;
            CustomProperties = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="TranscriptionJob"/>. </summary>
        /// <param name="links"> TranscriptionLinks. </param>
        /// <param name="properties"> TranscriptionProperties. </param>
        /// <param name="id"> The id of this entity. </param>
        /// <param name="self"> The location of this entity. </param>
        /// <param name="model"> EntityReference. </param>
        /// <param name="dataset"> EntityReference. </param>
        /// <param name="contents">
        /// A list of content urls to get audio files to transcribe. Up to 1000 urls are allowed.
        /// This property will not be returned in a response.
        /// </param>
        /// <param name="sourceContainer">
        /// A URL for an Azure blob container that contains the audio files. A container is allowed to have a maximum size of 5GB and a maximum number of 10000 blobs.
        /// The maximum size for a blob is 2.5GB.
        /// Container SAS should contain 'r' (read) and 'l' (list) permissions.
        /// This property will not be returned in a response.
        /// </param>
        /// <param name="locale"> The locale of the contained data. If Language Identification is used, this locale is used to transcribe speech for which no language could be detected. </param>
        /// <param name="displayName"> The display name of the object. </param>
        /// <param name="description"> The description of the object. </param>
        /// <param name="customProperties">
        /// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum
        /// allowed value length is 256 characters and the count of allowed entries is 10.
        /// </param>
        /// <param name="lastActionDateTime">
        /// The time-stamp when the current status was entered.
        /// The time stamp is encoded as ISO 8601 date and time format
        /// ("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
        /// </param>
        /// <param name="status"> The status of the object. </param>
        /// <param name="created">
        /// The time-stamp when the object was created.
        /// The time stamp is encoded as ISO 8601 date and time format
        /// ("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TranscriptionJob(TranscriptionLinks links, TranscriptionProperties properties, string id, Uri self, EntityReference model, EntityReference dataset, IList<Uri> contents, Uri sourceContainer, string locale, string displayName, string description, IDictionary<string, string> customProperties, DateTimeOffset? lastActionDateTime, TranscriptionStatus status, DateTimeOffset? created, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Links = links;
            Properties = properties;
            Id = id;
            Self = self;
            Model = model;
            Dataset = dataset;
            Contents = contents;
            SourceContainer = sourceContainer;
            Locale = locale;
            DisplayName = displayName;
            Description = description;
            CustomProperties = customProperties;
            LastActionDateTime = lastActionDateTime;
            Status = status;
            Created = created;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="TranscriptionJob"/> for deserialization. </summary>
        internal TranscriptionJob()
        {
        }
        /// <summary> TranscriptionProperties. </summary>
        public TranscriptionProperties Properties { get; set; }
        /// <summary> EntityReference. </summary>
        public EntityReference Model { get; set; }
        /// <summary> EntityReference. </summary>
        public EntityReference Dataset { get; set; }
        /// <summary>
        /// A list of content urls to get audio files to transcribe. Up to 1000 urls are allowed.
        /// This property will not be returned in a response.
        /// </summary>
        public IList<Uri> Contents { get; }
        /// <summary>
        /// A URL for an Azure blob container that contains the audio files. A container is allowed to have a maximum size of 5GB and a maximum number of 10000 blobs.
        /// The maximum size for a blob is 2.5GB.
        /// Container SAS should contain 'r' (read) and 'l' (list) permissions.
        /// This property will not be returned in a response.
        /// </summary>
        public Uri SourceContainer { get; set; }
        /// <summary> The locale of the contained data. If Language Identification is used, this locale is used to transcribe speech for which no language could be detected. </summary>
        public string Locale { get; set; }
        /// <summary> The display name of the object. </summary>
        public string DisplayName { get; set; }
        /// <summary> The description of the object. </summary>
        public string Description { get; set; }
        /// <summary>
        /// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum
        /// allowed value length is 256 characters and the count of allowed entries is 10.
        /// </summary>
        public IDictionary<string, string> CustomProperties { get; }
        /// <summary>
        /// The time-stamp when the current status was entered.
        /// The time stamp is encoded as ISO 8601 date and time format
        /// ("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
        /// </summary>
        public DateTimeOffset? LastActionDateTime { get; }
        /// <summary> The status of the object. </summary>
        public TranscriptionStatus Status { get; }
        /// <summary>
        /// The time-stamp when the object was created.
        /// The time stamp is encoded as ISO 8601 date and time format
        /// ("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
        /// </summary>
        public DateTimeOffset? Created { get; }
    }
}
