// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Speech.BatchTranscription
{
    /// <summary> FileKind. </summary>
    public readonly partial struct FileKind : IEquatable<FileKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FileKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FileKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AcousticDataArchiveValue = "AcousticDataArchive";
        private const string AcousticDataTranscriptionV2Value = "AcousticDataTranscriptionV2";
        private const string AudioValue = "Audio";
        private const string DatasetReportValue = "DatasetReport";
        private const string EvaluationDetailsValue = "EvaluationDetails";
        private const string LanguageDataValue = "LanguageData";
        private const string ModelReportValue = "ModelReport";
        private const string OutputFormattingDataValue = "OutputFormattingData";
        private const string PronunciationDataValue = "PronunciationData";
        private const string TranscriptionValue = "Transcription";
        private const string TranscriptionReportValue = "TranscriptionReport";

        /// <summary> Type of data is acoustic data archive. </summary>
        public static FileKind AcousticDataArchive { get; } = new FileKind(AcousticDataArchiveValue);
        /// <summary> Type of data is acoustic data transcription v2. </summary>
        public static FileKind AcousticDataTranscriptionV2 { get; } = new FileKind(AcousticDataTranscriptionV2Value);
        /// <summary> Type of data is audio. </summary>
        public static FileKind Audio { get; } = new FileKind(AudioValue);
        /// <summary> Type of data is dataset report. </summary>
        public static FileKind DatasetReport { get; } = new FileKind(DatasetReportValue);
        /// <summary> Type of data is evaluation details. </summary>
        public static FileKind EvaluationDetails { get; } = new FileKind(EvaluationDetailsValue);
        /// <summary> Type of data is language data. </summary>
        public static FileKind LanguageData { get; } = new FileKind(LanguageDataValue);
        /// <summary> Type of data is model report. </summary>
        public static FileKind ModelReport { get; } = new FileKind(ModelReportValue);
        /// <summary> Type of data is output formatting input file. </summary>
        public static FileKind OutputFormattingData { get; } = new FileKind(OutputFormattingDataValue);
        /// <summary> Type of data is pronunciation data. </summary>
        public static FileKind PronunciationData { get; } = new FileKind(PronunciationDataValue);
        /// <summary> Type of data is transcription. </summary>
        public static FileKind Transcription { get; } = new FileKind(TranscriptionValue);
        /// <summary> Type of data is transcription report. </summary>
        public static FileKind TranscriptionReport { get; } = new FileKind(TranscriptionReportValue);
        /// <summary> Determines if two <see cref="FileKind"/> values are the same. </summary>
        public static bool operator ==(FileKind left, FileKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FileKind"/> values are not the same. </summary>
        public static bool operator !=(FileKind left, FileKind right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="FileKind"/>. </summary>
        public static implicit operator FileKind(string value) => new FileKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FileKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FileKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
