// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.AI.Speech.BatchTranscription
{
    public partial class TranscriptionProperties : IUtf8JsonSerializable, IJsonModel<TranscriptionProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<TranscriptionProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<TranscriptionProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TranscriptionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TranscriptionProperties)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(WordLevelTimestampsEnabled))
            {
                writer.WritePropertyName("wordLevelTimestampsEnabled"u8);
                writer.WriteBooleanValue(WordLevelTimestampsEnabled.Value);
            }
            if (Optional.IsDefined(DisplayFormWordLevelTimestampsEnabled))
            {
                writer.WritePropertyName("displayFormWordLevelTimestampsEnabled"u8);
                writer.WriteBooleanValue(DisplayFormWordLevelTimestampsEnabled.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(DurationMilliseconds))
            {
                writer.WritePropertyName("durationMilliseconds"u8);
                writer.WriteNumberValue(DurationMilliseconds.Value);
            }
            if (Optional.IsCollectionDefined(Channels))
            {
                writer.WritePropertyName("channels"u8);
                writer.WriteStartArray();
                foreach (var item in Channels)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(DestinationContainerUrl))
            {
                writer.WritePropertyName("destinationContainerUrl"u8);
                writer.WriteStringValue(DestinationContainerUrl.AbsoluteUri);
            }
            if (Optional.IsDefined(PunctuationMode))
            {
                writer.WritePropertyName("punctuationMode"u8);
                writer.WriteStringValue(PunctuationMode.Value.ToString());
            }
            if (Optional.IsDefined(ProfanityFilterMode))
            {
                writer.WritePropertyName("profanityFilterMode"u8);
                writer.WriteStringValue(ProfanityFilterMode.Value.ToString());
            }
            writer.WritePropertyName("timeToLiveHours"u8);
            writer.WriteNumberValue(TimeToLiveHours);
            if (Optional.IsDefined(Error))
            {
                writer.WritePropertyName("error"u8);
                writer.WriteObjectValue(Error, options);
            }
            if (Optional.IsDefined(Diarization))
            {
                writer.WritePropertyName("diarization"u8);
                writer.WriteObjectValue(Diarization, options);
            }
            if (Optional.IsDefined(LanguageIdentification))
            {
                writer.WritePropertyName("languageIdentification"u8);
                writer.WriteObjectValue(LanguageIdentification, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        TranscriptionProperties IJsonModel<TranscriptionProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TranscriptionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TranscriptionProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeTranscriptionProperties(document.RootElement, options);
        }

        internal static TranscriptionProperties DeserializeTranscriptionProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            bool? wordLevelTimestampsEnabled = default;
            bool? displayFormWordLevelTimestampsEnabled = default;
            int? durationMilliseconds = default;
            IList<int> channels = default;
            Uri destinationContainerUrl = default;
            PunctuationMode? punctuationMode = default;
            ProfanityFilterMode? profanityFilterMode = default;
            int timeToLiveHours = default;
            EntityError error = default;
            DiarizationProperties diarization = default;
            LanguageIdentificationProperties languageIdentification = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("wordLevelTimestampsEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    wordLevelTimestampsEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("displayFormWordLevelTimestampsEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    displayFormWordLevelTimestampsEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("durationMilliseconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    durationMilliseconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("channels"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<int> array = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    channels = array;
                    continue;
                }
                if (property.NameEquals("destinationContainerUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    destinationContainerUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("punctuationMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    punctuationMode = new PunctuationMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("profanityFilterMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    profanityFilterMode = new ProfanityFilterMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("timeToLiveHours"u8))
                {
                    timeToLiveHours = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("error"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    error = EntityError.DeserializeEntityError(property.Value, options);
                    continue;
                }
                if (property.NameEquals("diarization"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    diarization = DiarizationProperties.DeserializeDiarizationProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("languageIdentification"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    languageIdentification = LanguageIdentificationProperties.DeserializeLanguageIdentificationProperties(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new TranscriptionProperties(
                wordLevelTimestampsEnabled,
                displayFormWordLevelTimestampsEnabled,
                durationMilliseconds,
                channels ?? new ChangeTrackingList<int>(),
                destinationContainerUrl,
                punctuationMode,
                profanityFilterMode,
                timeToLiveHours,
                error,
                diarization,
                languageIdentification,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<TranscriptionProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TranscriptionProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAISpeechBatchTranscriptionContext.Default);
                default:
                    throw new FormatException($"The model {nameof(TranscriptionProperties)} does not support writing '{options.Format}' format.");
            }
        }

        TranscriptionProperties IPersistableModel<TranscriptionProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TranscriptionProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeTranscriptionProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(TranscriptionProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<TranscriptionProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static TranscriptionProperties FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeTranscriptionProperties(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
