// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Speech.BatchTranscription
{
    /// <summary> The mode used for language identification. </summary>
    public readonly partial struct LanguageIdentificationMode : IEquatable<LanguageIdentificationMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LanguageIdentificationMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LanguageIdentificationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ContinuousValue = "Continuous";
        private const string SingleValue = "Single";

        /// <summary> Continuous language identification (Default). </summary>
        public static LanguageIdentificationMode Continuous { get; } = new LanguageIdentificationMode(ContinuousValue);
        /// <summary> Single language identification. If no language can be identified, the error code NoLanguageIdentified is returned to the user. If there is ambiguity between multiple languages, the error code MultipleLanguagesIdentified is returned to the user. </summary>
        public static LanguageIdentificationMode Single { get; } = new LanguageIdentificationMode(SingleValue);
        /// <summary> Determines if two <see cref="LanguageIdentificationMode"/> values are the same. </summary>
        public static bool operator ==(LanguageIdentificationMode left, LanguageIdentificationMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LanguageIdentificationMode"/> values are not the same. </summary>
        public static bool operator !=(LanguageIdentificationMode left, LanguageIdentificationMode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="LanguageIdentificationMode"/>. </summary>
        public static implicit operator LanguageIdentificationMode(string value) => new LanguageIdentificationMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LanguageIdentificationMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LanguageIdentificationMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
