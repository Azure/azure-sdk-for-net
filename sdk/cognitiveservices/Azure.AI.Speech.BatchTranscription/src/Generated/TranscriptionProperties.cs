// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Speech.BatchTranscription
{
    /// <summary> TranscriptionProperties. </summary>
    public partial class TranscriptionProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TranscriptionProperties"/>. </summary>
        /// <param name="timeToLiveHours">
        /// How long the transcription will be kept in the system after it has completed. Once the transcription reaches the time to live after completion(successful or failed) it will be automatically deleted.
        ///
        /// Note: When using BYOS (bring your own storage), the result files on the customer owned storage account will also be deleted.Use either destinationContainerUrl to specify a separate container for result files which will not be deleted when the timeToLive expires, or retrieve the result files through the API and store them as needed.
        ///
        /// The shortest supported duration is 6 hours, the longest supported duration is 31 days. 2 days (48 hours) is the recommended default value when data is consumed directly.
        /// </param>
        public TranscriptionProperties(int timeToLiveHours)
        {
            Channels = new ChangeTrackingList<int>();
            TimeToLiveHours = timeToLiveHours;
        }

        /// <summary> Initializes a new instance of <see cref="TranscriptionProperties"/>. </summary>
        /// <param name="wordLevelTimestampsEnabled"> A value indicating whether word level timestamps are requested. The default value is false. </param>
        /// <param name="displayFormWordLevelTimestampsEnabled"> A value indicating whether word level timestamps for the display form are requested. The default value is false. </param>
        /// <param name="durationMilliseconds">
        /// The duration in milliseconds of the transcription.
        /// Durations larger than 2^53-1 are not supported to ensure compatibility with JavaScript integers.
        /// </param>
        /// <param name="channels"> A collection of the requested channel numbers. In the default case, the channels 0 and 1 are considered. </param>
        /// <param name="destinationContainer">
        /// The requested destination container.
        ///
        /// Remarks
        ///
        /// When a destination container is used in combination with a timeToLive, the metadata of a transcription will be deleted normally, but the data stored in the destination container, including transcription results, will remain untouched, because no delete permissions are required for this container.
        ///
        /// To support automatic cleanup, either configure blob lifetimes on the container, or use "Bring your own Storage (BYOS)" instead of destinationContainerUrl, where blobs can be cleaned up.
        /// </param>
        /// <param name="punctuationMode"> The mode used for punctuation. </param>
        /// <param name="profanityFilterMode"> Mode of profanity filtering. </param>
        /// <param name="timeToLiveHours">
        /// How long the transcription will be kept in the system after it has completed. Once the transcription reaches the time to live after completion(successful or failed) it will be automatically deleted.
        ///
        /// Note: When using BYOS (bring your own storage), the result files on the customer owned storage account will also be deleted.Use either destinationContainerUrl to specify a separate container for result files which will not be deleted when the timeToLive expires, or retrieve the result files through the API and store them as needed.
        ///
        /// The shortest supported duration is 6 hours, the longest supported duration is 31 days. 2 days (48 hours) is the recommended default value when data is consumed directly.
        /// </param>
        /// <param name="error"> EntityError. </param>
        /// <param name="diarization"> Speaker Diarization. </param>
        /// <param name="languageIdentificationProperties"> LanguageIdentificationProperties. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TranscriptionProperties(bool? wordLevelTimestampsEnabled, bool? displayFormWordLevelTimestampsEnabled, int? durationMilliseconds, IList<int> channels, Uri destinationContainer, PunctuationMode? punctuationMode, ProfanityFilterMode? profanityFilterMode, int timeToLiveHours, EntityError error, DiarizationProperties diarization, LanguageIdentificationProperties languageIdentificationProperties, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            WordLevelTimestampsEnabled = wordLevelTimestampsEnabled;
            DisplayFormWordLevelTimestampsEnabled = displayFormWordLevelTimestampsEnabled;
            DurationMilliseconds = durationMilliseconds;
            Channels = channels;
            DestinationContainer = destinationContainer;
            PunctuationMode = punctuationMode;
            ProfanityFilterMode = profanityFilterMode;
            TimeToLiveHours = timeToLiveHours;
            Error = error;
            Diarization = diarization;
            LanguageIdentificationProperties = languageIdentificationProperties;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="TranscriptionProperties"/> for deserialization. </summary>
        internal TranscriptionProperties()
        {
        }

        /// <summary> A value indicating whether word level timestamps are requested. The default value is false. </summary>
        public bool? WordLevelTimestampsEnabled { get; set; }
        /// <summary> A value indicating whether word level timestamps for the display form are requested. The default value is false. </summary>
        public bool? DisplayFormWordLevelTimestampsEnabled { get; set; }
        /// <summary> A collection of the requested channel numbers. In the default case, the channels 0 and 1 are considered. </summary>
        public IList<int> Channels { get; }
        /// <summary>
        /// The requested destination container.
        ///
        /// Remarks
        ///
        /// When a destination container is used in combination with a timeToLive, the metadata of a transcription will be deleted normally, but the data stored in the destination container, including transcription results, will remain untouched, because no delete permissions are required for this container.
        ///
        /// To support automatic cleanup, either configure blob lifetimes on the container, or use "Bring your own Storage (BYOS)" instead of destinationContainerUrl, where blobs can be cleaned up.
        /// </summary>
        public Uri DestinationContainer { get; set; }
        /// <summary> The mode used for punctuation. </summary>
        public PunctuationMode? PunctuationMode { get; set; }
        /// <summary> Mode of profanity filtering. </summary>
        public ProfanityFilterMode? ProfanityFilterMode { get; set; }
        /// <summary> EntityError. </summary>
        public EntityError Error { get; set; }
        /// <summary> Speaker Diarization. </summary>
        public DiarizationProperties Diarization { get; set; }
        /// <summary> LanguageIdentificationProperties. </summary>
        public LanguageIdentificationProperties LanguageIdentificationProperties { get; set; }
    }
}
