// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Speech.BatchTranscription
{
    /// <summary> Describe the current state of the API. </summary>
    public readonly partial struct TranscriptionStatus : IEquatable<TranscriptionStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TranscriptionStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TranscriptionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotStartedValue = "NotStarted";
        private const string RunningValue = "Running";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";

        /// <summary> The long running operation has not yet started. </summary>
        public static TranscriptionStatus NotStarted { get; } = new TranscriptionStatus(NotStartedValue);
        /// <summary> The long running operation is currently processing. </summary>
        public static TranscriptionStatus Running { get; } = new TranscriptionStatus(RunningValue);
        /// <summary> The long running operation has successfully completed. </summary>
        public static TranscriptionStatus Succeeded { get; } = new TranscriptionStatus(SucceededValue);
        /// <summary> The long running operation has failed. </summary>
        public static TranscriptionStatus Failed { get; } = new TranscriptionStatus(FailedValue);
        /// <summary> Determines if two <see cref="TranscriptionStatus"/> values are the same. </summary>
        public static bool operator ==(TranscriptionStatus left, TranscriptionStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TranscriptionStatus"/> values are not the same. </summary>
        public static bool operator !=(TranscriptionStatus left, TranscriptionStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="TranscriptionStatus"/>. </summary>
        public static implicit operator TranscriptionStatus(string value) => new TranscriptionStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TranscriptionStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TranscriptionStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
