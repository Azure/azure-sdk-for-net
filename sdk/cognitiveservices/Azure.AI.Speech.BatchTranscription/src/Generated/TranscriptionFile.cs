// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Speech.BatchTranscription
{
    /// <summary> TranscriptionFile. </summary>
    public partial class TranscriptionFile
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TranscriptionFile"/>. </summary>
        /// <param name="created"> The creation time of this file. The time stamp is encoded as ISO 8601 date and time format (see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations). </param>
        /// <param name="kind"> FileKind. </param>
        /// <param name="links"> FileLinks. </param>
        /// <param name="displayName"> The name of this file. </param>
        /// <param name="properties"> FileProperties. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="links"/>, <paramref name="displayName"/> or <paramref name="properties"/> is null. </exception>
        internal TranscriptionFile(DateTimeOffset created, FileKind kind, FileLinks links, string displayName, FileProperties properties)
        {
            Argument.AssertNotNull(links, nameof(links));
            Argument.AssertNotNull(displayName, nameof(displayName));
            Argument.AssertNotNull(properties, nameof(properties));

            Created = created;
            Kind = kind;
            Links = links;
            DisplayName = displayName;
            Properties = properties;
        }

        /// <summary> Initializes a new instance of <see cref="TranscriptionFile"/>. </summary>
        /// <param name="created"> The creation time of this file. The time stamp is encoded as ISO 8601 date and time format (see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations). </param>
        /// <param name="kind"> FileKind. </param>
        /// <param name="links"> FileLinks. </param>
        /// <param name="displayName"> The name of this file. </param>
        /// <param name="properties"> FileProperties. </param>
        /// <param name="self"> The location of this entity. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TranscriptionFile(DateTimeOffset created, FileKind kind, FileLinks links, string displayName, FileProperties properties, Uri self, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Created = created;
            Kind = kind;
            Links = links;
            DisplayName = displayName;
            Properties = properties;
            Self = self;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="TranscriptionFile"/> for deserialization. </summary>
        internal TranscriptionFile()
        {
        }

        /// <summary> The creation time of this file. The time stamp is encoded as ISO 8601 date and time format (see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations). </summary>
        public DateTimeOffset Created { get; }
        /// <summary> FileKind. </summary>
        public FileKind Kind { get; }
        /// <summary> FileLinks. </summary>
        public FileLinks Links { get; }
        /// <summary> The name of this file. </summary>
        public string DisplayName { get; }
        /// <summary> FileProperties. </summary>
        public FileProperties Properties { get; }
    }
}
