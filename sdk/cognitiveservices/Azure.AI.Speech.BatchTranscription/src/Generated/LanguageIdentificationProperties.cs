// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Speech.BatchTranscription
{
    /// <summary> LanguageIdentificationProperties. </summary>
    public partial class LanguageIdentificationProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="LanguageIdentificationProperties"/>. </summary>
        /// <param name="candidateLocales"> The candidate locales for language identification (example ["en-US", "de-DE", "es-ES"]). A minimum of 2 and a maximum of 10 candidate locales, including the main locale for the transcription, is supported for continuous mode. For single language identification, the maximum number of candidate locales is unbounded. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="candidateLocales"/> is null. </exception>
        public LanguageIdentificationProperties(IEnumerable<string> candidateLocales)
        {
            Argument.AssertNotNull(candidateLocales, nameof(candidateLocales));

            CandidateLocales = candidateLocales.ToList();
            SpeechModelMapping = new ChangeTrackingDictionary<string, EntityReference>();
        }

        /// <summary> Initializes a new instance of <see cref="LanguageIdentificationProperties"/>. </summary>
        /// <param name="mode"> The mode used for language identification. </param>
        /// <param name="candidateLocales"> The candidate locales for language identification (example ["en-US", "de-DE", "es-ES"]). A minimum of 2 and a maximum of 10 candidate locales, including the main locale for the transcription, is supported for continuous mode. For single language identification, the maximum number of candidate locales is unbounded. </param>
        /// <param name="speechModelMapping">
        /// An optional mapping of locales to speech model entities. If no model is given for a locale, the default base model is used.
        /// Keys must be locales contained in the candidate locales, values are entities for models of the respective locales.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal LanguageIdentificationProperties(LanguageIdentificationMode? mode, IList<string> candidateLocales, IDictionary<string, EntityReference> speechModelMapping, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Mode = mode;
            CandidateLocales = candidateLocales;
            SpeechModelMapping = speechModelMapping;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="LanguageIdentificationProperties"/> for deserialization. </summary>
        internal LanguageIdentificationProperties()
        {
        }

        /// <summary> The mode used for language identification. </summary>
        public LanguageIdentificationMode? Mode { get; set; }
        /// <summary> The candidate locales for language identification (example ["en-US", "de-DE", "es-ES"]). A minimum of 2 and a maximum of 10 candidate locales, including the main locale for the transcription, is supported for continuous mode. For single language identification, the maximum number of candidate locales is unbounded. </summary>
        public IList<string> CandidateLocales { get; }
        /// <summary>
        /// An optional mapping of locales to speech model entities. If no model is given for a locale, the default base model is used.
        /// Keys must be locales contained in the candidate locales, values are entities for models of the respective locales.
        /// </summary>
        public IDictionary<string, EntityReference> SpeechModelMapping { get; }
    }
}
