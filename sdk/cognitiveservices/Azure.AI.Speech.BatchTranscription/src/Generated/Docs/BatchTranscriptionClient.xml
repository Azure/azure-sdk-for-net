<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="StartTranscriptionAsync(TranscriptionJob,CancellationToken)">
      <example>
This sample shows how to call StartTranscriptionAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

TranscriptionJob resource = new TranscriptionJob(new TranscriptionProperties(1234), "<locale>", "<displayName>");
Response<TranscriptionJob> response = await client.StartTranscriptionAsync(resource);
]]></code>
This sample shows how to call StartTranscriptionAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

TranscriptionJob resource = new TranscriptionJob(new TranscriptionProperties(1234)
{
    WordLevelTimestampsEnabled = true,
    DisplayFormWordLevelTimestampsEnabled = true,
    Channels = { 1234 },
    DestinationContainer = new Uri("http://localhost:3000"),
    PunctuationMode = PunctuationMode.None,
    ProfanityFilterMode = ProfanityFilterMode.None,
    Error = new EntityError(),
    Diarization = new DiarizationProperties(true, 1234),
    LanguageIdentificationProperties = new LanguageIdentificationProperties(new string[] { "<candidateLocales>" })
    {
        Mode = LanguageIdentificationMode.Continuous,
        SpeechModelMapping =
        {
            ["key"] = new EntityReference(new Uri("http://localhost:3000"))
        },
    },
}, "<locale>", "<displayName>")
{
    Model = default,
    Dataset = default,
    Contents = { new Uri("http://localhost:3000") },
    SourceContainerUrl = new Uri("http://localhost:3000"),
    Description = "<description>",
    CustomProperties =
    {
        ["key"] = "<customProperties>"
    },
};
Response<TranscriptionJob> response = await client.StartTranscriptionAsync(resource);
]]></code></example>
    </member>
    <member name="StartTranscription(TranscriptionJob,CancellationToken)">
      <example>
This sample shows how to call StartTranscription.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

TranscriptionJob resource = new TranscriptionJob(new TranscriptionProperties(1234), "<locale>", "<displayName>");
Response<TranscriptionJob> response = client.StartTranscription(resource);
]]></code>
This sample shows how to call StartTranscription with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

TranscriptionJob resource = new TranscriptionJob(new TranscriptionProperties(1234)
{
    WordLevelTimestampsEnabled = true,
    DisplayFormWordLevelTimestampsEnabled = true,
    Channels = { 1234 },
    DestinationContainer = new Uri("http://localhost:3000"),
    PunctuationMode = PunctuationMode.None,
    ProfanityFilterMode = ProfanityFilterMode.None,
    Error = new EntityError(),
    Diarization = new DiarizationProperties(true, 1234),
    LanguageIdentificationProperties = new LanguageIdentificationProperties(new string[] { "<candidateLocales>" })
    {
        Mode = LanguageIdentificationMode.Continuous,
        SpeechModelMapping =
        {
            ["key"] = new EntityReference(new Uri("http://localhost:3000"))
        },
    },
}, "<locale>", "<displayName>")
{
    Model = default,
    Dataset = default,
    Contents = { new Uri("http://localhost:3000") },
    SourceContainerUrl = new Uri("http://localhost:3000"),
    Description = "<description>",
    CustomProperties =
    {
        ["key"] = "<customProperties>"
    },
};
Response<TranscriptionJob> response = client.StartTranscription(resource);
]]></code></example>
    </member>
    <member name="StartTranscriptionAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call StartTranscriptionAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        timeToLiveHours = 1234,
    },
    locale = "<locale>",
    displayName = "<displayName>",
});
Response response = await client.StartTranscriptionAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLiveHours").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("self").ToString());
Console.WriteLine(result.GetProperty("locale").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call StartTranscriptionAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    links = new object(),
    properties = new
    {
        wordLevelTimestampsEnabled = true,
        displayFormWordLevelTimestampsEnabled = true,
        channels = new object[]
        {
            1234
        },
        destinationContainerUrl = "http://localhost:3000",
        punctuationMode = "None",
        profanityFilterMode = "None",
        timeToLiveHours = 1234,
        error = new object(),
        diarization = new
        {
            enabled = true,
            maxSpeakers = 1234,
        },
        languageIdentification = new
        {
            mode = "Continuous",
            candidateLocales = new object[]
            {
                "<candidateLocales>"
            },
            speechModelMapping = new
            {
                key = new
                {
                    self = "http://localhost:3000",
                },
            },
        },
    },
    contentUrls = new object[]
    {
        "http://localhost:3000"
    },
    contentContainerUrl = "http://localhost:3000",
    locale = "<locale>",
    displayName = "<displayName>",
    description = "<description>",
    customProperties = new
    {
        key = "<customProperties>",
    },
});
Response response = await client.StartTranscriptionAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("links").GetProperty("files").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("wordLevelTimestampsEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("displayFormWordLevelTimestampsEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("durationMilliseconds").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("channels")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("destinationContainerUrl").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("punctuationMode").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("profanityFilterMode").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLiveHours").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("maxSpeakers").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("mode").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("candidateLocales")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("speechModelMapping").GetProperty("<key>").GetProperty("self").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("self").ToString());
Console.WriteLine(result.GetProperty("model").GetProperty("self").ToString());
Console.WriteLine(result.GetProperty("dataset").GetProperty("self").ToString());
Console.WriteLine(result.GetProperty("contentUrls")[0].ToString());
Console.WriteLine(result.GetProperty("contentContainerUrl").ToString());
Console.WriteLine(result.GetProperty("locale").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("customProperties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
]]></code></example>
    </member>
    <member name="StartTranscription(RequestContent,RequestContext)">
      <example>
This sample shows how to call StartTranscription and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        timeToLiveHours = 1234,
    },
    locale = "<locale>",
    displayName = "<displayName>",
});
Response response = client.StartTranscription(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLiveHours").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("self").ToString());
Console.WriteLine(result.GetProperty("locale").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call StartTranscription with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    links = new object(),
    properties = new
    {
        wordLevelTimestampsEnabled = true,
        displayFormWordLevelTimestampsEnabled = true,
        channels = new object[]
        {
            1234
        },
        destinationContainerUrl = "http://localhost:3000",
        punctuationMode = "None",
        profanityFilterMode = "None",
        timeToLiveHours = 1234,
        error = new object(),
        diarization = new
        {
            enabled = true,
            maxSpeakers = 1234,
        },
        languageIdentification = new
        {
            mode = "Continuous",
            candidateLocales = new object[]
            {
                "<candidateLocales>"
            },
            speechModelMapping = new
            {
                key = new
                {
                    self = "http://localhost:3000",
                },
            },
        },
    },
    contentUrls = new object[]
    {
        "http://localhost:3000"
    },
    contentContainerUrl = "http://localhost:3000",
    locale = "<locale>",
    displayName = "<displayName>",
    description = "<description>",
    customProperties = new
    {
        key = "<customProperties>",
    },
});
Response response = client.StartTranscription(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("links").GetProperty("files").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("wordLevelTimestampsEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("displayFormWordLevelTimestampsEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("durationMilliseconds").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("channels")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("destinationContainerUrl").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("punctuationMode").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("profanityFilterMode").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLiveHours").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("maxSpeakers").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("mode").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("candidateLocales")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("speechModelMapping").GetProperty("<key>").GetProperty("self").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("self").ToString());
Console.WriteLine(result.GetProperty("model").GetProperty("self").ToString());
Console.WriteLine(result.GetProperty("dataset").GetProperty("self").ToString());
Console.WriteLine(result.GetProperty("contentUrls")[0].ToString());
Console.WriteLine(result.GetProperty("contentContainerUrl").ToString());
Console.WriteLine(result.GetProperty("locale").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("customProperties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
]]></code></example>
    </member>
    <member name="GetTranscriptionAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetTranscriptionAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

Response<TranscriptionJob> response = await client.GetTranscriptionAsync("<id>");
]]></code>
This sample shows how to call GetTranscriptionAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

Response<TranscriptionJob> response = await client.GetTranscriptionAsync("<id>");
]]></code></example>
    </member>
    <member name="GetTranscription(string,CancellationToken)">
      <example>
This sample shows how to call GetTranscription.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

Response<TranscriptionJob> response = client.GetTranscription("<id>");
]]></code>
This sample shows how to call GetTranscription with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

Response<TranscriptionJob> response = client.GetTranscription("<id>");
]]></code></example>
    </member>
    <member name="GetTranscriptionAsync(string,RequestContext)">
      <example>
This sample shows how to call GetTranscriptionAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

Response response = await client.GetTranscriptionAsync("<id>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLiveHours").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("self").ToString());
Console.WriteLine(result.GetProperty("locale").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetTranscriptionAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

Response response = await client.GetTranscriptionAsync("<id>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("links").GetProperty("files").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("wordLevelTimestampsEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("displayFormWordLevelTimestampsEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("durationMilliseconds").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("channels")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("destinationContainerUrl").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("punctuationMode").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("profanityFilterMode").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLiveHours").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("maxSpeakers").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("mode").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("candidateLocales")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("speechModelMapping").GetProperty("<key>").GetProperty("self").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("self").ToString());
Console.WriteLine(result.GetProperty("model").GetProperty("self").ToString());
Console.WriteLine(result.GetProperty("dataset").GetProperty("self").ToString());
Console.WriteLine(result.GetProperty("contentUrls")[0].ToString());
Console.WriteLine(result.GetProperty("contentContainerUrl").ToString());
Console.WriteLine(result.GetProperty("locale").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("customProperties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
]]></code></example>
    </member>
    <member name="GetTranscription(string,RequestContext)">
      <example>
This sample shows how to call GetTranscription and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

Response response = client.GetTranscription("<id>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLiveHours").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("self").ToString());
Console.WriteLine(result.GetProperty("locale").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetTranscription with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

Response response = client.GetTranscription("<id>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("links").GetProperty("files").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("wordLevelTimestampsEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("displayFormWordLevelTimestampsEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("durationMilliseconds").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("channels")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("destinationContainerUrl").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("punctuationMode").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("profanityFilterMode").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLiveHours").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("maxSpeakers").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("mode").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("candidateLocales")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("speechModelMapping").GetProperty("<key>").GetProperty("self").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("self").ToString());
Console.WriteLine(result.GetProperty("model").GetProperty("self").ToString());
Console.WriteLine(result.GetProperty("dataset").GetProperty("self").ToString());
Console.WriteLine(result.GetProperty("contentUrls")[0].ToString());
Console.WriteLine(result.GetProperty("contentContainerUrl").ToString());
Console.WriteLine(result.GetProperty("locale").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("customProperties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
]]></code></example>
    </member>
    <member name="DeleteTranscriptionAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteTranscriptionAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

Response response = await client.DeleteTranscriptionAsync("<id>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteTranscriptionAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

Response response = await client.DeleteTranscriptionAsync("<id>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteTranscription(string,RequestContext)">
      <example>
This sample shows how to call DeleteTranscription.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

Response response = client.DeleteTranscription("<id>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteTranscription with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

Response response = client.DeleteTranscription("<id>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetTranscriptionsAsync(int?,int?,string,CancellationToken)">
      <example>
This sample shows how to call GetTranscriptionsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

await foreach (TranscriptionJob item in client.GetTranscriptionsAsync())
{
}
]]></code>
This sample shows how to call GetTranscriptionsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

await foreach (TranscriptionJob item in client.GetTranscriptionsAsync(maxCount: 1234, skip: 1234, filter: "<filter>"))
{
}
]]></code></example>
    </member>
    <member name="GetTranscriptions(int?,int?,string,CancellationToken)">
      <example>
This sample shows how to call GetTranscriptions.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

foreach (TranscriptionJob item in client.GetTranscriptions())
{
}
]]></code>
This sample shows how to call GetTranscriptions with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

foreach (TranscriptionJob item in client.GetTranscriptions(maxCount: 1234, skip: 1234, filter: "<filter>"))
{
}
]]></code></example>
    </member>
    <member name="GetTranscriptionsAsync(int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetTranscriptionsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

await foreach (BinaryData item in client.GetTranscriptionsAsync(null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLiveHours").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("self").ToString());
    Console.WriteLine(result.GetProperty("locale").ToString());
    Console.WriteLine(result.GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
}
]]></code>
This sample shows how to call GetTranscriptionsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

await foreach (BinaryData item in client.GetTranscriptionsAsync(1234, 1234, "<filter>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("links").GetProperty("files").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("wordLevelTimestampsEnabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("displayFormWordLevelTimestampsEnabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("durationMilliseconds").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("channels")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("destinationContainerUrl").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("punctuationMode").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("profanityFilterMode").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLiveHours").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("maxSpeakers").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("mode").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("candidateLocales")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("speechModelMapping").GetProperty("<key>").GetProperty("self").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("self").ToString());
    Console.WriteLine(result.GetProperty("model").GetProperty("self").ToString());
    Console.WriteLine(result.GetProperty("dataset").GetProperty("self").ToString());
    Console.WriteLine(result.GetProperty("contentUrls")[0].ToString());
    Console.WriteLine(result.GetProperty("contentContainerUrl").ToString());
    Console.WriteLine(result.GetProperty("locale").ToString());
    Console.WriteLine(result.GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("customProperties").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code></example>
    </member>
    <member name="GetTranscriptions(int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetTranscriptions and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

foreach (BinaryData item in client.GetTranscriptions(null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLiveHours").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("self").ToString());
    Console.WriteLine(result.GetProperty("locale").ToString());
    Console.WriteLine(result.GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
}
]]></code>
This sample shows how to call GetTranscriptions with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

foreach (BinaryData item in client.GetTranscriptions(1234, 1234, "<filter>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("links").GetProperty("files").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("wordLevelTimestampsEnabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("displayFormWordLevelTimestampsEnabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("durationMilliseconds").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("channels")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("destinationContainerUrl").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("punctuationMode").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("profanityFilterMode").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLiveHours").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("maxSpeakers").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("mode").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("candidateLocales")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("speechModelMapping").GetProperty("<key>").GetProperty("self").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("self").ToString());
    Console.WriteLine(result.GetProperty("model").GetProperty("self").ToString());
    Console.WriteLine(result.GetProperty("dataset").GetProperty("self").ToString());
    Console.WriteLine(result.GetProperty("contentUrls")[0].ToString());
    Console.WriteLine(result.GetProperty("contentContainerUrl").ToString());
    Console.WriteLine(result.GetProperty("locale").ToString());
    Console.WriteLine(result.GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("customProperties").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code></example>
    </member>
    <member name="GetTranscriptionFilesAsync(string,int?,int?,string,CancellationToken)">
      <example>
This sample shows how to call GetTranscriptionFilesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

await foreach (TranscriptionFile item in client.GetTranscriptionFilesAsync("<id>"))
{
}
]]></code>
This sample shows how to call GetTranscriptionFilesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

await foreach (TranscriptionFile item in client.GetTranscriptionFilesAsync("<id>", maxCount: 1234, skip: 1234, filter: "<filter>"))
{
}
]]></code></example>
    </member>
    <member name="GetTranscriptionFiles(string,int?,int?,string,CancellationToken)">
      <example>
This sample shows how to call GetTranscriptionFiles.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

foreach (TranscriptionFile item in client.GetTranscriptionFiles("<id>"))
{
}
]]></code>
This sample shows how to call GetTranscriptionFiles with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

foreach (TranscriptionFile item in client.GetTranscriptionFiles("<id>", maxCount: 1234, skip: 1234, filter: "<filter>"))
{
}
]]></code></example>
    </member>
    <member name="GetTranscriptionFilesAsync(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetTranscriptionFilesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

await foreach (BinaryData item in client.GetTranscriptionFilesAsync("<id>", null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("kind").ToString());
    Console.WriteLine(result.GetProperty("links").GetProperty("contentUrl").ToString());
    Console.WriteLine(result.GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("durationMilliseconds").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("size").ToString());
    Console.WriteLine(result.GetProperty("self").ToString());
}
]]></code>
This sample shows how to call GetTranscriptionFilesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

await foreach (BinaryData item in client.GetTranscriptionFilesAsync("<id>", 1234, 1234, "<filter>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("kind").ToString());
    Console.WriteLine(result.GetProperty("links").GetProperty("contentUrl").ToString());
    Console.WriteLine(result.GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("durationMilliseconds").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("size").ToString());
    Console.WriteLine(result.GetProperty("self").ToString());
}
]]></code></example>
    </member>
    <member name="GetTranscriptionFiles(string,int?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetTranscriptionFiles and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

foreach (BinaryData item in client.GetTranscriptionFiles("<id>", null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("kind").ToString());
    Console.WriteLine(result.GetProperty("links").GetProperty("contentUrl").ToString());
    Console.WriteLine(result.GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("durationMilliseconds").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("size").ToString());
    Console.WriteLine(result.GetProperty("self").ToString());
}
]]></code>
This sample shows how to call GetTranscriptionFiles with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

foreach (BinaryData item in client.GetTranscriptionFiles("<id>", 1234, 1234, "<filter>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("kind").ToString());
    Console.WriteLine(result.GetProperty("links").GetProperty("contentUrl").ToString());
    Console.WriteLine(result.GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("durationMilliseconds").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("size").ToString());
    Console.WriteLine(result.GetProperty("self").ToString());
}
]]></code></example>
    </member>
  </members>
</doc>