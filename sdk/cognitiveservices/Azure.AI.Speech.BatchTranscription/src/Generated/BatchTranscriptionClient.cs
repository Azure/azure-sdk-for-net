// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.Speech.BatchTranscription
{
    // Data plane generated client.
    /// <summary> The BatchTranscription service client. </summary>
    public partial class BatchTranscriptionClient
    {
        private const string AuthorizationHeader = "Ocp-Apim-Subscription-Key";
        private readonly AzureKeyCredential _keyCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of BatchTranscriptionClient for mocking. </summary>
        protected BatchTranscriptionClient()
        {
        }

        /// <summary> Initializes a new instance of BatchTranscriptionClient. </summary>
        /// <param name="endpoint"> Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public BatchTranscriptionClient(Uri endpoint, AzureKeyCredential credential) : this(endpoint, credential, new BatchTranscriptionClientOptions())
        {
        }

        /// <summary> Initializes a new instance of BatchTranscriptionClient. </summary>
        /// <param name="endpoint"> Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public BatchTranscriptionClient(Uri endpoint, AzureKeyCredential credential, BatchTranscriptionClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new BatchTranscriptionClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _keyCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new AzureKeyCredentialPolicy(_keyCredential, AuthorizationHeader) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Starts a new transcription job. </summary>
        /// <param name="resource"> The resource instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resource"/> is null. </exception>
        /// <include file="Docs/BatchTranscriptionClient.xml" path="doc/members/member[@name='StartTranscriptionAsync(TranscriptionJob,CancellationToken)']/*" />
        public virtual async Task<Response<TranscriptionJob>> StartTranscriptionAsync(TranscriptionJob resource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resource, nameof(resource));

            using RequestContent content = resource.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await StartTranscriptionAsync(content, context).ConfigureAwait(false);
            return Response.FromValue(TranscriptionJob.FromResponse(response), response);
        }

        /// <summary> Starts a new transcription job. </summary>
        /// <param name="resource"> The resource instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resource"/> is null. </exception>
        /// <include file="Docs/BatchTranscriptionClient.xml" path="doc/members/member[@name='StartTranscription(TranscriptionJob,CancellationToken)']/*" />
        public virtual Response<TranscriptionJob> StartTranscription(TranscriptionJob resource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resource, nameof(resource));

            using RequestContent content = resource.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = StartTranscription(content, context);
            return Response.FromValue(TranscriptionJob.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Starts a new transcription job.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="StartTranscriptionAsync(TranscriptionJob,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/BatchTranscriptionClient.xml" path="doc/members/member[@name='StartTranscriptionAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> StartTranscriptionAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("BatchTranscriptionClient.StartTranscription");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStartTranscriptionRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Starts a new transcription job.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="StartTranscription(TranscriptionJob,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/BatchTranscriptionClient.xml" path="doc/members/member[@name='StartTranscription(RequestContent,RequestContext)']/*" />
        public virtual Response StartTranscription(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("BatchTranscriptionClient.StartTranscription");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStartTranscriptionRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the transcription identified by the given ID. </summary>
        /// <param name="id"> The id of this entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/BatchTranscriptionClient.xml" path="doc/members/member[@name='GetTranscriptionAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<TranscriptionJob>> GetTranscriptionAsync(string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetTranscriptionAsync(id, context).ConfigureAwait(false);
            return Response.FromValue(TranscriptionJob.FromResponse(response), response);
        }

        /// <summary> Gets the transcription identified by the given ID. </summary>
        /// <param name="id"> The id of this entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/BatchTranscriptionClient.xml" path="doc/members/member[@name='GetTranscription(string,CancellationToken)']/*" />
        public virtual Response<TranscriptionJob> GetTranscription(string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetTranscription(id, context);
            return Response.FromValue(TranscriptionJob.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Gets the transcription identified by the given ID.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetTranscriptionAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="id"> The id of this entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/BatchTranscriptionClient.xml" path="doc/members/member[@name='GetTranscriptionAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> GetTranscriptionAsync(string id, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("BatchTranscriptionClient.GetTranscription");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTranscriptionRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets the transcription identified by the given ID.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetTranscription(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="id"> The id of this entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/BatchTranscriptionClient.xml" path="doc/members/member[@name='GetTranscription(string,RequestContext)']/*" />
        public virtual Response GetTranscription(string id, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("BatchTranscriptionClient.GetTranscription");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTranscriptionRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Deletes the specified transcription task.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="id"> The id of this entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/BatchTranscriptionClient.xml" path="doc/members/member[@name='DeleteTranscriptionAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> DeleteTranscriptionAsync(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("BatchTranscriptionClient.DeleteTranscription");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteTranscriptionRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Deletes the specified transcription task.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="id"> The id of this entity. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/BatchTranscriptionClient.xml" path="doc/members/member[@name='DeleteTranscription(string,RequestContext)']/*" />
        public virtual Response DeleteTranscription(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("BatchTranscriptionClient.DeleteTranscription");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteTranscriptionRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of transcriptions for the authenticated subscription. </summary>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/BatchTranscriptionClient.xml" path="doc/members/member[@name='GetTranscriptionsAsync(int?,int?,string,CancellationToken)']/*" />
        public virtual AsyncPageable<TranscriptionJob> GetTranscriptionsAsync(int? maxCount = null, int? skip = null, string filter = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetTranscriptionsRequest(maxCount, skip, filter, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetTranscriptionsNextPageRequest(nextLink, maxCount, skip, filter, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => TranscriptionJob.DeserializeTranscriptionJob(e), ClientDiagnostics, _pipeline, "BatchTranscriptionClient.GetTranscriptions", "values", "@nextLink", context);
        }

        /// <summary> Gets a list of transcriptions for the authenticated subscription. </summary>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/BatchTranscriptionClient.xml" path="doc/members/member[@name='GetTranscriptions(int?,int?,string,CancellationToken)']/*" />
        public virtual Pageable<TranscriptionJob> GetTranscriptions(int? maxCount = null, int? skip = null, string filter = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetTranscriptionsRequest(maxCount, skip, filter, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetTranscriptionsNextPageRequest(nextLink, maxCount, skip, filter, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => TranscriptionJob.DeserializeTranscriptionJob(e), ClientDiagnostics, _pipeline, "BatchTranscriptionClient.GetTranscriptions", "values", "@nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Gets a list of transcriptions for the authenticated subscription.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetTranscriptionsAsync(int?,int?,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/BatchTranscriptionClient.xml" path="doc/members/member[@name='GetTranscriptionsAsync(int?,int?,string,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetTranscriptionsAsync(int? maxCount, int? skip, string filter, RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetTranscriptionsRequest(maxCount, skip, filter, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetTranscriptionsNextPageRequest(nextLink, maxCount, skip, filter, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "BatchTranscriptionClient.GetTranscriptions", "values", "@nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Gets a list of transcriptions for the authenticated subscription.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetTranscriptions(int?,int?,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/BatchTranscriptionClient.xml" path="doc/members/member[@name='GetTranscriptions(int?,int?,string,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetTranscriptions(int? maxCount, int? skip, string filter, RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetTranscriptionsRequest(maxCount, skip, filter, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetTranscriptionsNextPageRequest(nextLink, maxCount, skip, filter, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "BatchTranscriptionClient.GetTranscriptions", "values", "@nextLink", context);
        }

        /// <summary> Gets the files of the transcription identified by the given ID. </summary>
        /// <param name="id"> The id of this entity. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/BatchTranscriptionClient.xml" path="doc/members/member[@name='GetTranscriptionFilesAsync(string,int?,int?,string,CancellationToken)']/*" />
        public virtual AsyncPageable<TranscriptionFile> GetTranscriptionFilesAsync(string id, int? maxCount = null, int? skip = null, string filter = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetTranscriptionFilesRequest(id, maxCount, skip, filter, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetTranscriptionFilesNextPageRequest(nextLink, id, maxCount, skip, filter, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => TranscriptionFile.DeserializeTranscriptionFile(e), ClientDiagnostics, _pipeline, "BatchTranscriptionClient.GetTranscriptionFiles", "values", "@nextLink", context);
        }

        /// <summary> Gets the files of the transcription identified by the given ID. </summary>
        /// <param name="id"> The id of this entity. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/BatchTranscriptionClient.xml" path="doc/members/member[@name='GetTranscriptionFiles(string,int?,int?,string,CancellationToken)']/*" />
        public virtual Pageable<TranscriptionFile> GetTranscriptionFiles(string id, int? maxCount = null, int? skip = null, string filter = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetTranscriptionFilesRequest(id, maxCount, skip, filter, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetTranscriptionFilesNextPageRequest(nextLink, id, maxCount, skip, filter, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => TranscriptionFile.DeserializeTranscriptionFile(e), ClientDiagnostics, _pipeline, "BatchTranscriptionClient.GetTranscriptionFiles", "values", "@nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Gets the files of the transcription identified by the given ID
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetTranscriptionFilesAsync(string,int?,int?,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="id"> The id of this entity. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/BatchTranscriptionClient.xml" path="doc/members/member[@name='GetTranscriptionFilesAsync(string,int?,int?,string,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetTranscriptionFilesAsync(string id, int? maxCount, int? skip, string filter, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetTranscriptionFilesRequest(id, maxCount, skip, filter, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetTranscriptionFilesNextPageRequest(nextLink, id, maxCount, skip, filter, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "BatchTranscriptionClient.GetTranscriptionFiles", "values", "@nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Gets the files of the transcription identified by the given ID
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetTranscriptionFiles(string,int?,int?,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="id"> The id of this entity. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/BatchTranscriptionClient.xml" path="doc/members/member[@name='GetTranscriptionFiles(string,int?,int?,string,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetTranscriptionFiles(string id, int? maxCount, int? skip, string filter, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetTranscriptionFilesRequest(id, maxCount, skip, filter, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetTranscriptionFilesNextPageRequest(nextLink, id, maxCount, skip, filter, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "BatchTranscriptionClient.GetTranscriptionFiles", "values", "@nextLink", context);
        }

        internal HttpMessage CreateStartTranscriptionRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier201);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/speechtotext", false);
            uri.AppendPath("/transcriptions:submit", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetTranscriptionRequest(string id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/speechtotext", false);
            uri.AppendPath("/transcriptions/", false);
            uri.AppendPath(id, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteTranscriptionRequest(string id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/speechtotext", false);
            uri.AppendPath("/transcriptions/", false);
            uri.AppendPath(id, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetTranscriptionsRequest(int? maxCount, int? skip, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/speechtotext", false);
            uri.AppendPath("/transcriptions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (maxCount != null)
            {
                uri.AppendQuery("top", maxCount.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("filter", filter, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetTranscriptionFilesRequest(string id, int? maxCount, int? skip, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/speechtotext", false);
            uri.AppendPath("/transcriptions/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/files", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (maxCount != null)
            {
                uri.AppendQuery("top", maxCount.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("filter", filter, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetTranscriptionsNextPageRequest(string nextLink, int? maxCount, int? skip, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/speechtotext", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetTranscriptionFilesNextPageRequest(string nextLink, string id, int? maxCount, int? skip, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/speechtotext", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier201;
        private static ResponseClassifier ResponseClassifier201 => _responseClassifier201 ??= new StatusCodeClassifier(stackalloc ushort[] { 201 });
        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
