// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Speech.BatchTranscription.Samples
{
    public partial class Samples_BatchTranscriptionClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TranscriptionJob_StartTranscription_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    timeToLiveHours = 1234,
                },
                locale = "<locale>",
                displayName = "<displayName>",
            });
            Response response = client.StartTranscription(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLiveHours").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TranscriptionJob_StartTranscription_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    timeToLiveHours = 1234,
                },
                locale = "<locale>",
                displayName = "<displayName>",
            });
            Response response = await client.StartTranscriptionAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLiveHours").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TranscriptionJob_StartTranscription_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            TranscriptionJob resource = new TranscriptionJob(new TranscriptionProperties(1234), "<locale>", "<displayName>");
            Response<TranscriptionJob> response = client.StartTranscription(resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TranscriptionJob_StartTranscription_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            TranscriptionJob resource = new TranscriptionJob(new TranscriptionProperties(1234), "<locale>", "<displayName>");
            Response<TranscriptionJob> response = await client.StartTranscriptionAsync(resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TranscriptionJob_StartTranscription_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                links = new object(),
                properties = new
                {
                    wordLevelTimestampsEnabled = true,
                    displayFormWordLevelTimestampsEnabled = true,
                    channels = new object[]
            {
1234
            },
                    destinationContainerUrl = "http://localhost:3000",
                    punctuationMode = "None",
                    profanityFilterMode = "None",
                    timeToLiveHours = 1234,
                    error = new object(),
                    diarization = new
                    {
                        enabled = true,
                        maxSpeakers = 1234,
                    },
                    languageIdentification = new
                    {
                        mode = "Continuous",
                        candidateLocales = new object[]
            {
"<candidateLocales>"
            },
                        speechModelMapping = new
                        {
                            key = new
                            {
                                self = "http://localhost:3000",
                            },
                        },
                    },
                },
                contentUrls = new object[]
            {
"http://localhost:3000"
            },
                contentContainerUrl = "http://localhost:3000",
                locale = "<locale>",
                displayName = "<displayName>",
                description = "<description>",
                customProperties = new
                {
                    key = "<customProperties>",
                },
            });
            Response response = client.StartTranscription(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("links").GetProperty("files").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("wordLevelTimestampsEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayFormWordLevelTimestampsEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("channels")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("destinationContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("punctuationMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("profanityFilterMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLiveHours").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("maxSpeakers").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("mode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("candidateLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("speechModelMapping").GetProperty("<key>").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("model").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("dataset").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("contentUrls")[0].ToString());
            Console.WriteLine(result.GetProperty("contentContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("customProperties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TranscriptionJob_StartTranscription_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                links = new object(),
                properties = new
                {
                    wordLevelTimestampsEnabled = true,
                    displayFormWordLevelTimestampsEnabled = true,
                    channels = new object[]
            {
1234
            },
                    destinationContainerUrl = "http://localhost:3000",
                    punctuationMode = "None",
                    profanityFilterMode = "None",
                    timeToLiveHours = 1234,
                    error = new object(),
                    diarization = new
                    {
                        enabled = true,
                        maxSpeakers = 1234,
                    },
                    languageIdentification = new
                    {
                        mode = "Continuous",
                        candidateLocales = new object[]
            {
"<candidateLocales>"
            },
                        speechModelMapping = new
                        {
                            key = new
                            {
                                self = "http://localhost:3000",
                            },
                        },
                    },
                },
                contentUrls = new object[]
            {
"http://localhost:3000"
            },
                contentContainerUrl = "http://localhost:3000",
                locale = "<locale>",
                displayName = "<displayName>",
                description = "<description>",
                customProperties = new
                {
                    key = "<customProperties>",
                },
            });
            Response response = await client.StartTranscriptionAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("links").GetProperty("files").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("wordLevelTimestampsEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayFormWordLevelTimestampsEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("channels")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("destinationContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("punctuationMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("profanityFilterMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLiveHours").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("maxSpeakers").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("mode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("candidateLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("speechModelMapping").GetProperty("<key>").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("model").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("dataset").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("contentUrls")[0].ToString());
            Console.WriteLine(result.GetProperty("contentContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("customProperties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TranscriptionJob_StartTranscription_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            TranscriptionJob resource = new TranscriptionJob(new TranscriptionProperties(1234)
            {
                WordLevelTimestampsEnabled = true,
                DisplayFormWordLevelTimestampsEnabled = true,
                Channels = { 1234 },
                DestinationContainerUrl = new Uri("http://localhost:3000"),
                PunctuationMode = PunctuationMode.None,
                ProfanityFilterMode = ProfanityFilterMode.None,
                Error = new EntityError(),
                Diarization = new DiarizationProperties(true, 1234),
                LanguageIdentification = new LanguageIdentificationProperties(new string[] { "<candidateLocales>" })
                {
                    Mode = LanguageIdentificationMode.Continuous,
                    SpeechModelMapping =
{
["key"] = new EntityReference(new Uri("http://localhost:3000"))
},
                },
            }, "<locale>", "<displayName>")
            {
                Model = default,
                Dataset = default,
                ContentUrls = { new Uri("http://localhost:3000") },
                ContentContainerUrl = new Uri("http://localhost:3000"),
                Description = "<description>",
                CustomProperties =
{
["key"] = "<customProperties>"
},
            };
            Response<TranscriptionJob> response = client.StartTranscription(resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TranscriptionJob_StartTranscription_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            TranscriptionJob resource = new TranscriptionJob(new TranscriptionProperties(1234)
            {
                WordLevelTimestampsEnabled = true,
                DisplayFormWordLevelTimestampsEnabled = true,
                Channels = { 1234 },
                DestinationContainerUrl = new Uri("http://localhost:3000"),
                PunctuationMode = PunctuationMode.None,
                ProfanityFilterMode = ProfanityFilterMode.None,
                Error = new EntityError(),
                Diarization = new DiarizationProperties(true, 1234),
                LanguageIdentification = new LanguageIdentificationProperties(new string[] { "<candidateLocales>" })
                {
                    Mode = LanguageIdentificationMode.Continuous,
                    SpeechModelMapping =
{
["key"] = new EntityReference(new Uri("http://localhost:3000"))
},
                },
            }, "<locale>", "<displayName>")
            {
                Model = default,
                Dataset = default,
                ContentUrls = { new Uri("http://localhost:3000") },
                ContentContainerUrl = new Uri("http://localhost:3000"),
                Description = "<description>",
                CustomProperties =
{
["key"] = "<customProperties>"
},
            };
            Response<TranscriptionJob> response = await client.StartTranscriptionAsync(resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TranscriptionJob_GetTranscription_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            Response response = client.GetTranscription("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLiveHours").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TranscriptionJob_GetTranscription_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            Response response = await client.GetTranscriptionAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLiveHours").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TranscriptionJob_GetTranscription_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            Response<TranscriptionJob> response = client.GetTranscription("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TranscriptionJob_GetTranscription_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            Response<TranscriptionJob> response = await client.GetTranscriptionAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TranscriptionJob_GetTranscription_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            Response response = client.GetTranscription("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("links").GetProperty("files").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("wordLevelTimestampsEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayFormWordLevelTimestampsEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("channels")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("destinationContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("punctuationMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("profanityFilterMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLiveHours").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("maxSpeakers").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("mode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("candidateLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("speechModelMapping").GetProperty("<key>").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("model").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("dataset").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("contentUrls")[0].ToString());
            Console.WriteLine(result.GetProperty("contentContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("customProperties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TranscriptionJob_GetTranscription_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            Response response = await client.GetTranscriptionAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("links").GetProperty("files").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("wordLevelTimestampsEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayFormWordLevelTimestampsEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("channels")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("destinationContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("punctuationMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("profanityFilterMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLiveHours").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("maxSpeakers").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("mode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("candidateLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("speechModelMapping").GetProperty("<key>").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("model").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("dataset").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("contentUrls")[0].ToString());
            Console.WriteLine(result.GetProperty("contentContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("customProperties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TranscriptionJob_GetTranscription_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            Response<TranscriptionJob> response = client.GetTranscription("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TranscriptionJob_GetTranscription_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            Response<TranscriptionJob> response = await client.GetTranscriptionAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TranscriptionJob_DeleteTranscription_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            Response response = client.DeleteTranscription("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TranscriptionJob_DeleteTranscription_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            Response response = await client.DeleteTranscriptionAsync("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TranscriptionJob_DeleteTranscription_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            Response response = client.DeleteTranscription("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TranscriptionJob_DeleteTranscription_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            Response response = await client.DeleteTranscriptionAsync("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TranscriptionJob_GetTranscriptions_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            foreach (BinaryData item in client.GetTranscriptions(null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLiveHours").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("self").ToString());
                Console.WriteLine(result.GetProperty("locale").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TranscriptionJob_GetTranscriptions_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTranscriptionsAsync(null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLiveHours").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("self").ToString());
                Console.WriteLine(result.GetProperty("locale").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TranscriptionJob_GetTranscriptions_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            foreach (TranscriptionJob item in client.GetTranscriptions())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TranscriptionJob_GetTranscriptions_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            await foreach (TranscriptionJob item in client.GetTranscriptionsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TranscriptionJob_GetTranscriptions_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            foreach (BinaryData item in client.GetTranscriptions(1234, 1234, "<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("links").GetProperty("files").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("wordLevelTimestampsEnabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("displayFormWordLevelTimestampsEnabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("durationMilliseconds").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("channels")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("destinationContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("punctuationMode").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("profanityFilterMode").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLiveHours").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("maxSpeakers").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("mode").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("candidateLocales")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("speechModelMapping").GetProperty("<key>").GetProperty("self").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("self").ToString());
                Console.WriteLine(result.GetProperty("model").GetProperty("self").ToString());
                Console.WriteLine(result.GetProperty("dataset").GetProperty("self").ToString());
                Console.WriteLine(result.GetProperty("contentUrls")[0].ToString());
                Console.WriteLine(result.GetProperty("contentContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("locale").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("customProperties").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TranscriptionJob_GetTranscriptions_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTranscriptionsAsync(1234, 1234, "<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("links").GetProperty("files").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("wordLevelTimestampsEnabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("displayFormWordLevelTimestampsEnabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("durationMilliseconds").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("channels")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("destinationContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("punctuationMode").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("profanityFilterMode").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLiveHours").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("maxSpeakers").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("mode").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("candidateLocales")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("speechModelMapping").GetProperty("<key>").GetProperty("self").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("self").ToString());
                Console.WriteLine(result.GetProperty("model").GetProperty("self").ToString());
                Console.WriteLine(result.GetProperty("dataset").GetProperty("self").ToString());
                Console.WriteLine(result.GetProperty("contentUrls")[0].ToString());
                Console.WriteLine(result.GetProperty("contentContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("locale").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("customProperties").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TranscriptionJob_GetTranscriptions_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            foreach (TranscriptionJob item in client.GetTranscriptions(maxCount: 1234, skip: 1234, filter: "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TranscriptionJob_GetTranscriptions_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            await foreach (TranscriptionJob item in client.GetTranscriptionsAsync(maxCount: 1234, skip: 1234, filter: "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TranscriptionFile_GetTranscriptionFiles_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            foreach (BinaryData item in client.GetTranscriptionFiles("<id>", null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("links").GetProperty("contentUrl").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("durationMilliseconds").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("size").ToString());
                Console.WriteLine(result.GetProperty("self").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TranscriptionFile_GetTranscriptionFiles_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTranscriptionFilesAsync("<id>", null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("links").GetProperty("contentUrl").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("durationMilliseconds").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("size").ToString());
                Console.WriteLine(result.GetProperty("self").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TranscriptionFile_GetTranscriptionFiles_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            foreach (TranscriptionFile item in client.GetTranscriptionFiles("<id>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TranscriptionFile_GetTranscriptionFiles_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            await foreach (TranscriptionFile item in client.GetTranscriptionFilesAsync("<id>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TranscriptionFile_GetTranscriptionFiles_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            foreach (BinaryData item in client.GetTranscriptionFiles("<id>", 1234, 1234, "<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("links").GetProperty("contentUrl").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("durationMilliseconds").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("size").ToString());
                Console.WriteLine(result.GetProperty("self").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TranscriptionFile_GetTranscriptionFiles_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTranscriptionFilesAsync("<id>", 1234, 1234, "<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("links").GetProperty("contentUrl").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("durationMilliseconds").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("size").ToString());
                Console.WriteLine(result.GetProperty("self").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TranscriptionFile_GetTranscriptionFiles_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            foreach (TranscriptionFile item in client.GetTranscriptionFiles("<id>", maxCount: 1234, skip: 1234, filter: "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TranscriptionFile_GetTranscriptionFiles_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BatchTranscriptionClient client = new BatchTranscriptionClient(endpoint, credential);

            await foreach (TranscriptionFile item in client.GetTranscriptionFilesAsync("<id>", maxCount: 1234, skip: 1234, filter: "<filter>"))
            {
            }
        }
    }
}
