// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.AI.InkRecognizer
{
    using System.Collections.Generic;
    using System.Text.Json;

    /// <summary>
    /// HttpError Details.
    /// </summary>
    public class HttpErrorDetails
    {
        private string _errorCode;
        private string _message;
        private string _target;
        private string _fullMessage = string.Empty;
        private List<HttpErrorDetails> _details;

        /// <summary>
        /// Creae a new instance of the class object.
        /// </summary>
        /// <param name="errorJson"></param>
        public HttpErrorDetails(string errorJson)
        {
            var document = JsonDocument.Parse(errorJson);
            Parse(document.RootElement);
        }

        private void Parse(JsonElement errorResponse)
        {
            _details = new List<HttpErrorDetails>();

            foreach (var errorProperty in errorResponse.EnumerateObject())
            {
                if (errorProperty.Name == "code")
                {
                    _errorCode = errorProperty.Value.GetString();
                }
                else if (errorProperty.Name == "message")
                {
                    _message = errorProperty.Value.GetString();
                }
                else if (errorProperty.Name == "target")
                {
                    _target = errorProperty.Value.GetString();
                }
                else if (errorProperty.Name == "details")
                {
                    foreach (var errorDetail in errorProperty.Value.EnumerateArray())
                    {
                        _details.Add(new HttpErrorDetails(errorDetail.ToString()));
                    }
                }
            }
        }

        /// <summary>
        /// Overriden string
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            if (string.IsNullOrEmpty(_fullMessage))
            {
                string msg = "";
                msg += (_errorCode != null) ? "Http Error code : " + _errorCode + ";" : "";
                msg += (_target != null) ? " Target : " + _target + ";" : "";
                msg += (_message != null) ? "Message : " + _message + ";" : "";

                if (_details.Count != 0)
                {
                    msg += "\n Error Details : ";
                    foreach (var errDetail in _details)
                    {
                        msg += "\n" + errDetail.ToString();
                    }
                }
                _fullMessage = msg;
            }
            return _fullMessage;
        }
    }
}
