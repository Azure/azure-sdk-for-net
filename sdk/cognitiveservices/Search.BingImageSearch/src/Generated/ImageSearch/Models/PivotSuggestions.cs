// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Search.ImageSearch.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines the pivot segment.
    /// </summary>
    public partial class PivotSuggestions
    {
        /// <summary>
        /// Initializes a new instance of the PivotSuggestions class.
        /// </summary>
        public PivotSuggestions()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PivotSuggestions class.
        /// </summary>
        /// <param name="pivot">The segment from the original query to pivot
        /// on.</param>
        /// <param name="suggestions">A list of suggested queries for the
        /// pivot.</param>
        public PivotSuggestions(string pivot, IList<Query> suggestions)
        {
            Pivot = pivot;
            Suggestions = suggestions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the segment from the original query to pivot on.
        /// </summary>
        [JsonProperty(PropertyName = "pivot")]
        public string Pivot { get; set; }

        /// <summary>
        /// Gets or sets a list of suggested queries for the pivot.
        /// </summary>
        [JsonProperty(PropertyName = "suggestions")]
        public IList<Query> Suggestions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Pivot == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Pivot");
            }
            if (Suggestions == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Suggestions");
            }
            if (Suggestions != null)
            {
                foreach (var element in Suggestions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
