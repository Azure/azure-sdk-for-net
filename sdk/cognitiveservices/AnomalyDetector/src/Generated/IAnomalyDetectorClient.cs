// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.AnomalyDetector
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// The Anomaly Detector API detects anomalies automatically in time series
    /// data. It supports two functionalities, one is for detecting the whole
    /// series with model trained by the timeseries, another is detecting last
    /// point with model trained by points before. By using this service,
    /// business customers can discover incidents and establish a logic flow
    /// for root cause analysis.
    /// </summary>
    public partial interface IAnomalyDetectorClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Supported Cognitive Services endpoints (protocol and hostname, for
        /// example: https://westus2.api.cognitive.microsoft.com).
        /// </summary>
        string Endpoint { get; set; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


        /// <summary>
        /// Detect anomalies for the entire series in batch.
        /// </summary>
        /// <remarks>
        /// This operation generates a model using an entire series, each point
        /// is detected with the same model. With this method, points before
        /// and after a certain point are used to determine whether it is an
        /// anomaly. The entire detection can give user an overall status of
        /// the time series.
        /// </remarks>
        /// <param name='body'>
        /// Time series points and period if needed. Advanced model parameters
        /// can also be set in the request.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EntireDetectResponse>> EntireDetectWithHttpMessagesAsync(Request body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Detect anomaly status of the latest point in time series.
        /// </summary>
        /// <remarks>
        /// This operation generates a model using points before the latest
        /// one. With this method, only historical points are used to determine
        /// whether the target point is an anomaly. The latest point detecting
        /// operation matches the scenario of real-time monitoring of business
        /// metrics.
        /// </remarks>
        /// <param name='body'>
        /// Time series points and period if needed. Advanced model parameters
        /// can also be set in the request.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LastDetectResponse>> LastDetectWithHttpMessagesAsync(Request body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
