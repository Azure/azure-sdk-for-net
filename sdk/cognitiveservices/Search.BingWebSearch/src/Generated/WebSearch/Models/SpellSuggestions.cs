// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Search.WebSearch.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines a suggested query string that likely represents the user's
    /// intent. The search results include this response if Bing determines
    /// that the user may have intended to search for something different. For
    /// example, if the user searches for alon brown, Bing may determine that
    /// the user likely intended to search for Alton Brown instead (based on
    /// past searches by others of Alon Brown).
    /// </summary>
    public partial class SpellSuggestions : SearchResultsAnswer
    {
        /// <summary>
        /// Initializes a new instance of the SpellSuggestions class.
        /// </summary>
        public SpellSuggestions()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SpellSuggestions class.
        /// </summary>
        /// <param name="value">A list of suggested query strings that may
        /// represent the user's intention. The list contains only one Query
        /// object.</param>
        /// <param name="id">A String identifier.</param>
        /// <param name="webSearchUrl">The URL To Bing's search result for this
        /// item.</param>
        /// <param name="totalEstimatedMatches">The estimated number of
        /// webpages that are relevant to the query. Use this number along with
        /// the count and offset query parameters to page the results.</param>
        public SpellSuggestions(IList<Query> value, string id = default(string), string webSearchUrl = default(string), IList<Query> followUpQueries = default(IList<Query>), QueryContext queryContext = default(QueryContext), long? totalEstimatedMatches = default(long?), bool? isFamilyFriendly = default(bool?))
            : base(id, webSearchUrl, followUpQueries, queryContext, totalEstimatedMatches, isFamilyFriendly)
        {
            Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a list of suggested query strings that may represent
        /// the user's intention. The list contains only one Query object.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public IList<Query> Value { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Value == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Value");
            }
            if (Value != null)
            {
                foreach (var element in Value)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
