// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Search.WebSearch.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines an expression and its answer
    /// </summary>
    public partial class Computation : Answer
    {
        /// <summary>
        /// Initializes a new instance of the Computation class.
        /// </summary>
        public Computation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Computation class.
        /// </summary>
        /// <param name="expression">The math or conversion expression. If the
        /// query contains a request to convert units of measure (for example,
        /// meters to feet), this field contains the from units and value
        /// contains the to units. If the query contains a mathematical
        /// expression such as 2+2, this field contains the expression and
        /// value contains the answer. Note that mathematical expressions may
        /// be normalized. For example, if the query was sqrt(4^2+8^2), the
        /// normalized expression may be sqrt((4^2)+(8^2)). If the user's query
        /// is a math question and the textDecorations query parameter is set
        /// to true, the expression string may include formatting markers. For
        /// example, if the user's query is log(2), the normalized expression
        /// includes the subscript markers. For more information, see Hit
        /// Highlighting.</param>
        /// <param name="value">The expression's answer.</param>
        /// <param name="id">A String identifier.</param>
        /// <param name="webSearchUrl">The URL To Bing's search result for this
        /// item.</param>
        public Computation(string expression, string value, string id = default(string), string webSearchUrl = default(string), IList<Query> followUpQueries = default(IList<Query>))
            : base(id, webSearchUrl, followUpQueries)
        {
            Expression = expression;
            Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the math or conversion expression. If the query
        /// contains a request to convert units of measure (for example, meters
        /// to feet), this field contains the from units and value contains the
        /// to units. If the query contains a mathematical expression such as
        /// 2+2, this field contains the expression and value contains the
        /// answer. Note that mathematical expressions may be normalized. For
        /// example, if the query was sqrt(4^2+8^2), the normalized expression
        /// may be sqrt((4^2)+(8^2)). If the user's query is a math question
        /// and the textDecorations query parameter is set to true, the
        /// expression string may include formatting markers. For example, if
        /// the user's query is log(2), the normalized expression includes the
        /// subscript markers. For more information, see Hit Highlighting.
        /// </summary>
        [JsonProperty(PropertyName = "expression")]
        public string Expression { get; set; }

        /// <summary>
        /// Gets or sets the expression's answer.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Expression == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Expression");
            }
            if (Value == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Value");
            }
        }
    }
}
