// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.VirtualEnclaves.Models
{
    public partial class ApprovalSettings : IUtf8JsonSerializable, IJsonModel<ApprovalSettings>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ApprovalSettings>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ApprovalSettings>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ApprovalSettings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ApprovalSettings)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(EndpointCreation))
            {
                writer.WritePropertyName("endpointCreation"u8);
                writer.WriteStringValue(EndpointCreation.Value.ToString());
            }
            if (Optional.IsDefined(EndpointUpdate))
            {
                writer.WritePropertyName("endpointUpdate"u8);
                writer.WriteStringValue(EndpointUpdate.Value.ToString());
            }
            if (Optional.IsDefined(EndpointDeletion))
            {
                writer.WritePropertyName("endpointDeletion"u8);
                writer.WriteStringValue(EndpointDeletion.Value.ToString());
            }
            if (Optional.IsDefined(ConnectionCreation))
            {
                writer.WritePropertyName("connectionCreation"u8);
                writer.WriteStringValue(ConnectionCreation.Value.ToString());
            }
            if (Optional.IsDefined(ConnectionUpdate))
            {
                writer.WritePropertyName("connectionUpdate"u8);
                writer.WriteStringValue(ConnectionUpdate.Value.ToString());
            }
            if (Optional.IsDefined(ConnectionDeletion))
            {
                writer.WritePropertyName("connectionDeletion"u8);
                writer.WriteStringValue(ConnectionDeletion.Value.ToString());
            }
            if (Optional.IsDefined(EnclaveCreation))
            {
                writer.WritePropertyName("enclaveCreation"u8);
                writer.WriteStringValue(EnclaveCreation.Value.ToString());
            }
            if (Optional.IsDefined(EnclaveDeletion))
            {
                writer.WritePropertyName("enclaveDeletion"u8);
                writer.WriteStringValue(EnclaveDeletion.Value.ToString());
            }
            if (Optional.IsDefined(MaintenanceMode))
            {
                writer.WritePropertyName("maintenanceMode"u8);
                writer.WriteStringValue(MaintenanceMode.Value.ToString());
            }
            if (Optional.IsDefined(ServiceCatalogDeployment))
            {
                writer.WritePropertyName("serviceCatalogDeployment"u8);
                writer.WriteStringValue(ServiceCatalogDeployment.Value.ToString());
            }
            if (Optional.IsDefined(NotificationOnApprovalCreation))
            {
                writer.WritePropertyName("notificationOnApprovalCreation"u8);
                writer.WriteStringValue(NotificationOnApprovalCreation.Value.ToString());
            }
            if (Optional.IsDefined(NotificationOnApprovalAction))
            {
                writer.WritePropertyName("notificationOnApprovalAction"u8);
                writer.WriteStringValue(NotificationOnApprovalAction.Value.ToString());
            }
            if (Optional.IsDefined(NotificationOnApprovalDeletion))
            {
                writer.WritePropertyName("notificationOnApprovalDeletion"u8);
                writer.WriteStringValue(NotificationOnApprovalDeletion.Value.ToString());
            }
            if (Optional.IsCollectionDefined(MandatoryApprovers))
            {
                writer.WritePropertyName("mandatoryApprovers"u8);
                writer.WriteStartArray();
                foreach (var item in MandatoryApprovers)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(MinimumApproversRequired))
            {
                writer.WritePropertyName("minimumApproversRequired"u8);
                writer.WriteNumberValue(MinimumApproversRequired.Value);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ApprovalSettings IJsonModel<ApprovalSettings>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ApprovalSettings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ApprovalSettings)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeApprovalSettings(document.RootElement, options);
        }

        internal static ApprovalSettings DeserializeApprovalSettings(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ApprovalPolicy? endpointCreation = default;
            ApprovalPolicy? endpointUpdate = default;
            ApprovalPolicy? endpointDeletion = default;
            ApprovalPolicy? connectionCreation = default;
            ApprovalPolicy? connectionUpdate = default;
            ApprovalPolicy? connectionDeletion = default;
            ApprovalPolicy? enclaveCreation = default;
            ApprovalPolicy? enclaveDeletion = default;
            ApprovalPolicy? maintenanceMode = default;
            ApprovalPolicy? serviceCatalogDeployment = default;
            ApprovalPolicy? notificationOnApprovalCreation = default;
            ApprovalPolicy? notificationOnApprovalAction = default;
            ApprovalPolicy? notificationOnApprovalDeletion = default;
            IList<MandatoryApprover> mandatoryApprovers = default;
            long? minimumApproversRequired = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("endpointCreation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endpointCreation = new ApprovalPolicy(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("endpointUpdate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endpointUpdate = new ApprovalPolicy(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("endpointDeletion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endpointDeletion = new ApprovalPolicy(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("connectionCreation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    connectionCreation = new ApprovalPolicy(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("connectionUpdate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    connectionUpdate = new ApprovalPolicy(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("connectionDeletion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    connectionDeletion = new ApprovalPolicy(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("enclaveCreation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enclaveCreation = new ApprovalPolicy(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("enclaveDeletion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enclaveDeletion = new ApprovalPolicy(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("maintenanceMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maintenanceMode = new ApprovalPolicy(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("serviceCatalogDeployment"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    serviceCatalogDeployment = new ApprovalPolicy(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("notificationOnApprovalCreation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    notificationOnApprovalCreation = new ApprovalPolicy(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("notificationOnApprovalAction"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    notificationOnApprovalAction = new ApprovalPolicy(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("notificationOnApprovalDeletion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    notificationOnApprovalDeletion = new ApprovalPolicy(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("mandatoryApprovers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MandatoryApprover> array = new List<MandatoryApprover>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MandatoryApprover.DeserializeMandatoryApprover(item, options));
                    }
                    mandatoryApprovers = array;
                    continue;
                }
                if (property.NameEquals("minimumApproversRequired"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minimumApproversRequired = property.Value.GetInt64();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ApprovalSettings(
                endpointCreation,
                endpointUpdate,
                endpointDeletion,
                connectionCreation,
                connectionUpdate,
                connectionDeletion,
                enclaveCreation,
                enclaveDeletion,
                maintenanceMode,
                serviceCatalogDeployment,
                notificationOnApprovalCreation,
                notificationOnApprovalAction,
                notificationOnApprovalDeletion,
                mandatoryApprovers ?? new ChangeTrackingList<MandatoryApprover>(),
                minimumApproversRequired,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ApprovalSettings>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ApprovalSettings>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerVirtualEnclavesContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ApprovalSettings)} does not support writing '{options.Format}' format.");
            }
        }

        ApprovalSettings IPersistableModel<ApprovalSettings>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ApprovalSettings>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeApprovalSettings(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ApprovalSettings)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ApprovalSettings>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
