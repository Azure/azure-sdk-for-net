// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.VirtualEnclaves.Models
{
    /// <summary> Enclave Connection Resource properties. </summary>
    public partial class EnclaveConnectionProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EnclaveConnectionProperties"/>. </summary>
        /// <param name="communityResourceId"> Community Resource Id. </param>
        /// <param name="sourceResourceId"> Source Resource Id. </param>
        /// <param name="destinationEndpointId"> Destination Endpoint Resource Id. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="communityResourceId"/>, <paramref name="sourceResourceId"/> or <paramref name="destinationEndpointId"/> is null. </exception>
        public EnclaveConnectionProperties(ResourceIdentifier communityResourceId, ResourceIdentifier sourceResourceId, ResourceIdentifier destinationEndpointId)
        {
            Argument.AssertNotNull(communityResourceId, nameof(communityResourceId));
            Argument.AssertNotNull(sourceResourceId, nameof(sourceResourceId));
            Argument.AssertNotNull(destinationEndpointId, nameof(destinationEndpointId));

            CommunityResourceId = communityResourceId;
            SourceResourceId = sourceResourceId;
            DestinationEndpointId = destinationEndpointId;
            ResourceCollection = new ChangeTrackingList<ResourceIdentifier>();
        }

        /// <summary> Initializes a new instance of <see cref="EnclaveConnectionProperties"/>. </summary>
        /// <param name="state"> The state of the enclaveConnection. </param>
        /// <param name="communityResourceId"> Community Resource Id. </param>
        /// <param name="sourceResourceId"> Source Resource Id. </param>
        /// <param name="sourceCidr"> Source CIDR. </param>
        /// <param name="destinationEndpointId"> Destination Endpoint Resource Id. </param>
        /// <param name="provisioningState"> Provisioning State. </param>
        /// <param name="resourceCollection"> List of resource ids modified by enclave Connections. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EnclaveConnectionProperties(EnclaveConnectionState? state, ResourceIdentifier communityResourceId, ResourceIdentifier sourceResourceId, string sourceCidr, ResourceIdentifier destinationEndpointId, ProvisioningState? provisioningState, IReadOnlyList<ResourceIdentifier> resourceCollection, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            State = state;
            CommunityResourceId = communityResourceId;
            SourceResourceId = sourceResourceId;
            SourceCidr = sourceCidr;
            DestinationEndpointId = destinationEndpointId;
            ProvisioningState = provisioningState;
            ResourceCollection = resourceCollection;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EnclaveConnectionProperties"/> for deserialization. </summary>
        internal EnclaveConnectionProperties()
        {
        }

        /// <summary> The state of the enclaveConnection. </summary>
        public EnclaveConnectionState? State { get; }
        /// <summary> Community Resource Id. </summary>
        public ResourceIdentifier CommunityResourceId { get; set; }
        /// <summary> Source Resource Id. </summary>
        public ResourceIdentifier SourceResourceId { get; set; }
        /// <summary> Source CIDR. </summary>
        public string SourceCidr { get; set; }
        /// <summary> Destination Endpoint Resource Id. </summary>
        public ResourceIdentifier DestinationEndpointId { get; set; }
        /// <summary> Provisioning State. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary> List of resource ids modified by enclave Connections. </summary>
        public IReadOnlyList<ResourceIdentifier> ResourceCollection { get; }
    }
}
