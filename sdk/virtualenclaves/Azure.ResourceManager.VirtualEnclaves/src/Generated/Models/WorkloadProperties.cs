// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.VirtualEnclaves.Models
{
    /// <summary> Workload Resource properties. </summary>
    public partial class WorkloadProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="WorkloadProperties"/>. </summary>
        public WorkloadProperties()
        {
            ResourceGroupCollection = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="WorkloadProperties"/>. </summary>
        /// <param name="provisioningState"> Provisioning State. </param>
        /// <param name="resourceGroupCollection"> List of resource group ids. </param>
        /// <param name="managedOnBehalfOfConfiguration"> Managed On Behalf Of Configuration. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal WorkloadProperties(ProvisioningState? provisioningState, IList<string> resourceGroupCollection, ManagedOnBehalfOfConfiguration managedOnBehalfOfConfiguration, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProvisioningState = provisioningState;
            ResourceGroupCollection = resourceGroupCollection;
            ManagedOnBehalfOfConfiguration = managedOnBehalfOfConfiguration;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Provisioning State. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary> List of resource group ids. </summary>
        public IList<string> ResourceGroupCollection { get; }
        /// <summary> Managed On Behalf Of Configuration. </summary>
        internal ManagedOnBehalfOfConfiguration ManagedOnBehalfOfConfiguration { get; }
        /// <summary> Managed-On-Behalf-Of broker resources. </summary>
        public IReadOnlyList<SubResource> ManagedOnBehalfOfMoboBrokerResources
        {
            get => ManagedOnBehalfOfConfiguration?.MoboBrokerResources;
        }
    }
}
