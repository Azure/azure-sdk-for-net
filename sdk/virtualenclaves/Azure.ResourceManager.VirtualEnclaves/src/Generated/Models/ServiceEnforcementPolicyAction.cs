// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.VirtualEnclaves.Models
{
    /// <summary> The GovernedServiceItemPolicyAction. </summary>
    public readonly partial struct ServiceEnforcementPolicyAction : IEquatable<ServiceEnforcementPolicyAction>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ServiceEnforcementPolicyAction"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ServiceEnforcementPolicyAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AuditOnlyValue = "AuditOnly";
        private const string EnforceValue = "Enforce";
        private const string NoneValue = "None";

        /// <summary> AuditOnly. </summary>
        public static ServiceEnforcementPolicyAction AuditOnly { get; } = new ServiceEnforcementPolicyAction(AuditOnlyValue);
        /// <summary> Enforce. </summary>
        public static ServiceEnforcementPolicyAction Enforce { get; } = new ServiceEnforcementPolicyAction(EnforceValue);
        /// <summary> None. </summary>
        public static ServiceEnforcementPolicyAction None { get; } = new ServiceEnforcementPolicyAction(NoneValue);
        /// <summary> Determines if two <see cref="ServiceEnforcementPolicyAction"/> values are the same. </summary>
        public static bool operator ==(ServiceEnforcementPolicyAction left, ServiceEnforcementPolicyAction right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ServiceEnforcementPolicyAction"/> values are not the same. </summary>
        public static bool operator !=(ServiceEnforcementPolicyAction left, ServiceEnforcementPolicyAction right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ServiceEnforcementPolicyAction"/>. </summary>
        public static implicit operator ServiceEnforcementPolicyAction(string value) => new ServiceEnforcementPolicyAction(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ServiceEnforcementPolicyAction other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ServiceEnforcementPolicyAction other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
