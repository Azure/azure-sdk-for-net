// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.VirtualEnclaves.Models
{
    /// <summary> Virtual Enclave Default Settings. </summary>
    public partial class EnclaveDefaultSettings
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EnclaveDefaultSettings"/>. </summary>
        public EnclaveDefaultSettings()
        {
            LogAnalyticsResourceIdCollection = new ChangeTrackingList<ResourceIdentifier>();
        }

        /// <summary> Initializes a new instance of <see cref="EnclaveDefaultSettings"/>. </summary>
        /// <param name="keyVaultResourceId"> Key Vault Resource Id. </param>
        /// <param name="storageAccountResourceId"> Storage Account Resource Id. </param>
        /// <param name="logAnalyticsResourceIdCollection"> Log Analytics Resource Ids. </param>
        /// <param name="diagnosticDestination"> Diagnostic Destination. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EnclaveDefaultSettings(ResourceIdentifier keyVaultResourceId, ResourceIdentifier storageAccountResourceId, IReadOnlyList<ResourceIdentifier> logAnalyticsResourceIdCollection, VirtualEnclaveDiagnosticDestination? diagnosticDestination, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            KeyVaultResourceId = keyVaultResourceId;
            StorageAccountResourceId = storageAccountResourceId;
            LogAnalyticsResourceIdCollection = logAnalyticsResourceIdCollection;
            DiagnosticDestination = diagnosticDestination;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Key Vault Resource Id. </summary>
        public ResourceIdentifier KeyVaultResourceId { get; }
        /// <summary> Storage Account Resource Id. </summary>
        public ResourceIdentifier StorageAccountResourceId { get; }
        /// <summary> Log Analytics Resource Ids. </summary>
        public IReadOnlyList<ResourceIdentifier> LogAnalyticsResourceIdCollection { get; }
        /// <summary> Diagnostic Destination. </summary>
        public VirtualEnclaveDiagnosticDestination? DiagnosticDestination { get; set; }
    }
}
