// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.VirtualEnclaves.Models
{
    /// <summary> Specifies the destination of where to store diagnostic logs. </summary>
    public readonly partial struct VirtualEnclaveDiagnosticDestination : IEquatable<VirtualEnclaveDiagnosticDestination>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VirtualEnclaveDiagnosticDestination"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VirtualEnclaveDiagnosticDestination(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CommunityOnlyValue = "CommunityOnly";
        private const string EnclaveOnlyValue = "EnclaveOnly";
        private const string BothValue = "Both";

        /// <summary> DiagnosticDestination Type CommunityOnly. </summary>
        public static VirtualEnclaveDiagnosticDestination CommunityOnly { get; } = new VirtualEnclaveDiagnosticDestination(CommunityOnlyValue);
        /// <summary> DiagnosticDestination Type EnclaveOnly. </summary>
        public static VirtualEnclaveDiagnosticDestination EnclaveOnly { get; } = new VirtualEnclaveDiagnosticDestination(EnclaveOnlyValue);
        /// <summary> DiagnosticDestination Type Both. </summary>
        public static VirtualEnclaveDiagnosticDestination Both { get; } = new VirtualEnclaveDiagnosticDestination(BothValue);
        /// <summary> Determines if two <see cref="VirtualEnclaveDiagnosticDestination"/> values are the same. </summary>
        public static bool operator ==(VirtualEnclaveDiagnosticDestination left, VirtualEnclaveDiagnosticDestination right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VirtualEnclaveDiagnosticDestination"/> values are not the same. </summary>
        public static bool operator !=(VirtualEnclaveDiagnosticDestination left, VirtualEnclaveDiagnosticDestination right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="VirtualEnclaveDiagnosticDestination"/>. </summary>
        public static implicit operator VirtualEnclaveDiagnosticDestination(string value) => new VirtualEnclaveDiagnosticDestination(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VirtualEnclaveDiagnosticDestination other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VirtualEnclaveDiagnosticDestination other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
