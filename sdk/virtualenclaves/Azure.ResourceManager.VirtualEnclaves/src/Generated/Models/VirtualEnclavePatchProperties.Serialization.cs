// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.VirtualEnclaves.Models
{
    public partial class VirtualEnclavePatchProperties : IUtf8JsonSerializable, IJsonModel<VirtualEnclavePatchProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<VirtualEnclavePatchProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<VirtualEnclavePatchProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VirtualEnclavePatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VirtualEnclavePatchProperties)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("enclaveVirtualNetwork"u8);
            writer.WriteObjectValue(EnclaveVirtualNetwork, options);
            if (Optional.IsDefined(BastionEnabled))
            {
                writer.WritePropertyName("bastionEnabled"u8);
                writer.WriteBooleanValue(BastionEnabled.Value);
            }
            if (Optional.IsCollectionDefined(EnclaveRoleAssignments))
            {
                writer.WritePropertyName("enclaveRoleAssignments"u8);
                writer.WriteStartArray();
                foreach (var item in EnclaveRoleAssignments)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(WorkloadRoleAssignments))
            {
                writer.WritePropertyName("workloadRoleAssignments"u8);
                writer.WriteStartArray();
                foreach (var item in WorkloadRoleAssignments)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(GovernedServiceList))
            {
                writer.WritePropertyName("governedServiceList"u8);
                writer.WriteStartArray();
                foreach (var item in GovernedServiceList)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(EnclaveDefaultSettings))
            {
                writer.WritePropertyName("enclaveDefaultSettings"u8);
                writer.WriteObjectValue(EnclaveDefaultSettings, options);
            }
            if (Optional.IsDefined(MaintenanceModeConfiguration))
            {
                writer.WritePropertyName("maintenanceModeConfiguration"u8);
                writer.WriteObjectValue(MaintenanceModeConfiguration, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        VirtualEnclavePatchProperties IJsonModel<VirtualEnclavePatchProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VirtualEnclavePatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VirtualEnclavePatchProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeVirtualEnclavePatchProperties(document.RootElement, options);
        }

        internal static VirtualEnclavePatchProperties DeserializeVirtualEnclavePatchProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EnclaveVirtualNetworkModel enclaveVirtualNetwork = default;
            bool? bastionEnabled = default;
            IList<RoleAssignmentItem> enclaveRoleAssignments = default;
            IList<RoleAssignmentItem> workloadRoleAssignments = default;
            IList<GovernedServiceItem> governedServiceList = default;
            EnclaveDefaultSettingsPatchModel enclaveDefaultSettings = default;
            MaintenanceModeConfigurationPatchModel maintenanceModeConfiguration = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("enclaveVirtualNetwork"u8))
                {
                    enclaveVirtualNetwork = EnclaveVirtualNetworkModel.DeserializeEnclaveVirtualNetworkModel(property.Value, options);
                    continue;
                }
                if (property.NameEquals("bastionEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bastionEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enclaveRoleAssignments"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<RoleAssignmentItem> array = new List<RoleAssignmentItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RoleAssignmentItem.DeserializeRoleAssignmentItem(item, options));
                    }
                    enclaveRoleAssignments = array;
                    continue;
                }
                if (property.NameEquals("workloadRoleAssignments"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<RoleAssignmentItem> array = new List<RoleAssignmentItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RoleAssignmentItem.DeserializeRoleAssignmentItem(item, options));
                    }
                    workloadRoleAssignments = array;
                    continue;
                }
                if (property.NameEquals("governedServiceList"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<GovernedServiceItem> array = new List<GovernedServiceItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(GovernedServiceItem.DeserializeGovernedServiceItem(item, options));
                    }
                    governedServiceList = array;
                    continue;
                }
                if (property.NameEquals("enclaveDefaultSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enclaveDefaultSettings = EnclaveDefaultSettingsPatchModel.DeserializeEnclaveDefaultSettingsPatchModel(property.Value, options);
                    continue;
                }
                if (property.NameEquals("maintenanceModeConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maintenanceModeConfiguration = MaintenanceModeConfigurationPatchModel.DeserializeMaintenanceModeConfigurationPatchModel(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new VirtualEnclavePatchProperties(
                enclaveVirtualNetwork,
                bastionEnabled,
                enclaveRoleAssignments ?? new ChangeTrackingList<RoleAssignmentItem>(),
                workloadRoleAssignments ?? new ChangeTrackingList<RoleAssignmentItem>(),
                governedServiceList ?? new ChangeTrackingList<GovernedServiceItem>(),
                enclaveDefaultSettings,
                maintenanceModeConfiguration,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<VirtualEnclavePatchProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VirtualEnclavePatchProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerVirtualEnclavesContext.Default);
                default:
                    throw new FormatException($"The model {nameof(VirtualEnclavePatchProperties)} does not support writing '{options.Format}' format.");
            }
        }

        VirtualEnclavePatchProperties IPersistableModel<VirtualEnclavePatchProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VirtualEnclavePatchProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeVirtualEnclavePatchProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(VirtualEnclavePatchProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<VirtualEnclavePatchProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
