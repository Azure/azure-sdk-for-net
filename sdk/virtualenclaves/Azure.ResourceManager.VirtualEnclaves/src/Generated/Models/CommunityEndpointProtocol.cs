// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.VirtualEnclaves.Models
{
    /// <summary> Community Endpoint Protocol Enum. </summary>
    public readonly partial struct CommunityEndpointProtocol : IEquatable<CommunityEndpointProtocol>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CommunityEndpointProtocol"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CommunityEndpointProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AnyValue = "ANY";
        private const string TcpValue = "TCP";
        private const string UdpValue = "UDP";
        private const string IcmpValue = "ICMP";
        private const string EspValue = "ESP";
        private const string AHValue = "AH";
        private const string HttpsValue = "HTTPS";
        private const string HttpValue = "HTTP";

        /// <summary> CommunityEndpointProtocol Type ANY. </summary>
        public static CommunityEndpointProtocol Any { get; } = new CommunityEndpointProtocol(AnyValue);
        /// <summary> CommunityEndpointProtocol Type TCP. </summary>
        public static CommunityEndpointProtocol Tcp { get; } = new CommunityEndpointProtocol(TcpValue);
        /// <summary> CommunityEndpointProtocol Type UDP. </summary>
        public static CommunityEndpointProtocol Udp { get; } = new CommunityEndpointProtocol(UdpValue);
        /// <summary> CommunityEndpointProtocol Type ICMP. </summary>
        public static CommunityEndpointProtocol Icmp { get; } = new CommunityEndpointProtocol(IcmpValue);
        /// <summary> CommunityEndpointProtocol Type ESP. </summary>
        public static CommunityEndpointProtocol Esp { get; } = new CommunityEndpointProtocol(EspValue);
        /// <summary> CommunityEndpointProtocol Type AH. </summary>
        public static CommunityEndpointProtocol AH { get; } = new CommunityEndpointProtocol(AHValue);
        /// <summary> CommunityEndpointProtocol Type HTTPS. </summary>
        public static CommunityEndpointProtocol Https { get; } = new CommunityEndpointProtocol(HttpsValue);
        /// <summary> CommunityEndpointProtocol Type HTTP. </summary>
        public static CommunityEndpointProtocol Http { get; } = new CommunityEndpointProtocol(HttpValue);
        /// <summary> Determines if two <see cref="CommunityEndpointProtocol"/> values are the same. </summary>
        public static bool operator ==(CommunityEndpointProtocol left, CommunityEndpointProtocol right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CommunityEndpointProtocol"/> values are not the same. </summary>
        public static bool operator !=(CommunityEndpointProtocol left, CommunityEndpointProtocol right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="CommunityEndpointProtocol"/>. </summary>
        public static implicit operator CommunityEndpointProtocol(string value) => new CommunityEndpointProtocol(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CommunityEndpointProtocol other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CommunityEndpointProtocol other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
