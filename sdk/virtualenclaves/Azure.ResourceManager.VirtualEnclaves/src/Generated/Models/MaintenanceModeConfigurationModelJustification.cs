// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.VirtualEnclaves.Models
{
    /// <summary> The MaintenanceModeConfigurationModelJustification. </summary>
    public readonly partial struct MaintenanceModeConfigurationModelJustification : IEquatable<MaintenanceModeConfigurationModelJustification>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MaintenanceModeConfigurationModelJustification"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MaintenanceModeConfigurationModelJustification(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NetworkingValue = "Networking";
        private const string GovernanceValue = "Governance";
        private const string OffValue = "Off";

        /// <summary> Networking. </summary>
        public static MaintenanceModeConfigurationModelJustification Networking { get; } = new MaintenanceModeConfigurationModelJustification(NetworkingValue);
        /// <summary> Governance. </summary>
        public static MaintenanceModeConfigurationModelJustification Governance { get; } = new MaintenanceModeConfigurationModelJustification(GovernanceValue);
        /// <summary> Off. </summary>
        public static MaintenanceModeConfigurationModelJustification Off { get; } = new MaintenanceModeConfigurationModelJustification(OffValue);
        /// <summary> Determines if two <see cref="MaintenanceModeConfigurationModelJustification"/> values are the same. </summary>
        public static bool operator ==(MaintenanceModeConfigurationModelJustification left, MaintenanceModeConfigurationModelJustification right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MaintenanceModeConfigurationModelJustification"/> values are not the same. </summary>
        public static bool operator !=(MaintenanceModeConfigurationModelJustification left, MaintenanceModeConfigurationModelJustification right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="MaintenanceModeConfigurationModelJustification"/>. </summary>
        public static implicit operator MaintenanceModeConfigurationModelJustification(string value) => new MaintenanceModeConfigurationModelJustification(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MaintenanceModeConfigurationModelJustification other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MaintenanceModeConfigurationModelJustification other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
