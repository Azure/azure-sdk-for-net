// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.VirtualEnclaves.Models
{
    /// <summary> The provisioning status of the resource. </summary>
    public readonly partial struct VirtualEnclaveProvisioningState : IEquatable<VirtualEnclaveProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VirtualEnclaveProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VirtualEnclaveProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string CanceledValue = "Canceled";
        private const string AcceptedValue = "Accepted";
        private const string CreatingValue = "Creating";
        private const string DeletingValue = "Deleting";
        private const string NotSpecifiedValue = "NotSpecified";
        private const string RunningValue = "Running";
        private const string UpdatingValue = "Updating";

        /// <summary> Resource has been created. </summary>
        public static VirtualEnclaveProvisioningState Succeeded { get; } = new VirtualEnclaveProvisioningState(SucceededValue);
        /// <summary> Resource creation failed. </summary>
        public static VirtualEnclaveProvisioningState Failed { get; } = new VirtualEnclaveProvisioningState(FailedValue);
        /// <summary> Resource creation was canceled. </summary>
        public static VirtualEnclaveProvisioningState Canceled { get; } = new VirtualEnclaveProvisioningState(CanceledValue);
        /// <summary> Provisioning State Type Accepted. </summary>
        public static VirtualEnclaveProvisioningState Accepted { get; } = new VirtualEnclaveProvisioningState(AcceptedValue);
        /// <summary> Provisioning State Type Creating. </summary>
        public static VirtualEnclaveProvisioningState Creating { get; } = new VirtualEnclaveProvisioningState(CreatingValue);
        /// <summary> Provisioning State Type Deleting. </summary>
        public static VirtualEnclaveProvisioningState Deleting { get; } = new VirtualEnclaveProvisioningState(DeletingValue);
        /// <summary> Provisioning State Type NotSpecified. </summary>
        public static VirtualEnclaveProvisioningState NotSpecified { get; } = new VirtualEnclaveProvisioningState(NotSpecifiedValue);
        /// <summary> Provisioning State Type Running. </summary>
        public static VirtualEnclaveProvisioningState Running { get; } = new VirtualEnclaveProvisioningState(RunningValue);
        /// <summary> Provisioning State Type Updating. </summary>
        public static VirtualEnclaveProvisioningState Updating { get; } = new VirtualEnclaveProvisioningState(UpdatingValue);
        /// <summary> Determines if two <see cref="VirtualEnclaveProvisioningState"/> values are the same. </summary>
        public static bool operator ==(VirtualEnclaveProvisioningState left, VirtualEnclaveProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VirtualEnclaveProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(VirtualEnclaveProvisioningState left, VirtualEnclaveProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="VirtualEnclaveProvisioningState"/>. </summary>
        public static implicit operator VirtualEnclaveProvisioningState(string value) => new VirtualEnclaveProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VirtualEnclaveProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VirtualEnclaveProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
