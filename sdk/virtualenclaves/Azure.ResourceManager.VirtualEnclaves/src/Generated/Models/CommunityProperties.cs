// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.VirtualEnclaves.Models
{
    /// <summary> Community Resource Properties. </summary>
    public partial class CommunityProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CommunityProperties"/>. </summary>
        public CommunityProperties()
        {
            DnsServers = new ChangeTrackingList<string>();
            ResourceCollection = new ChangeTrackingList<ResourceIdentifier>();
            GovernedServiceList = new ChangeTrackingList<GovernedServiceItem>();
            CommunityRoleAssignments = new ChangeTrackingList<RoleAssignmentItem>();
        }

        /// <summary> Initializes a new instance of <see cref="CommunityProperties"/>. </summary>
        /// <param name="addressSpace"> Address Space. </param>
        /// <param name="dnsServers"> DNS Servers. </param>
        /// <param name="provisioningState"> Provisioning State. </param>
        /// <param name="resourceCollection"> List of resource ids created by communities. </param>
        /// <param name="managedResourceGroupName"> Managed resource group name. </param>
        /// <param name="managedOnBehalfOfConfiguration"> Managed On Behalf Of Configuration. </param>
        /// <param name="governedServiceList"> List of services governed by a community. </param>
        /// <param name="policyOverride"> Policy override setting for the community. Specifies whether to apply enclave-specific policies or disable policy enforcement. </param>
        /// <param name="communityRoleAssignments"> Community role assignments. </param>
        /// <param name="firewallSku"> SKU of the community's Azure Firewall (Basic, Standard, Premium). Standard is the default. </param>
        /// <param name="approvalSettings"> Approval requirements for various actions on the community's resources. </param>
        /// <param name="maintenanceModeConfiguration"> Maintenance Mode configuration. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CommunityProperties(string addressSpace, IList<string> dnsServers, ProvisioningState? provisioningState, IReadOnlyList<ResourceIdentifier> resourceCollection, string managedResourceGroupName, ManagedOnBehalfOfConfiguration managedOnBehalfOfConfiguration, IList<GovernedServiceItem> governedServiceList, CommunityPropertiesPolicyOverride? policyOverride, IList<RoleAssignmentItem> communityRoleAssignments, FirewallSKU? firewallSku, ApprovalSettings approvalSettings, MaintenanceModeConfigurationModel maintenanceModeConfiguration, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            AddressSpace = addressSpace;
            DnsServers = dnsServers;
            ProvisioningState = provisioningState;
            ResourceCollection = resourceCollection;
            ManagedResourceGroupName = managedResourceGroupName;
            ManagedOnBehalfOfConfiguration = managedOnBehalfOfConfiguration;
            GovernedServiceList = governedServiceList;
            PolicyOverride = policyOverride;
            CommunityRoleAssignments = communityRoleAssignments;
            FirewallSku = firewallSku;
            ApprovalSettings = approvalSettings;
            MaintenanceModeConfiguration = maintenanceModeConfiguration;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Address Space. </summary>
        public string AddressSpace { get; set; }
        /// <summary> DNS Servers. </summary>
        public IList<string> DnsServers { get; }
        /// <summary> Provisioning State. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary> List of resource ids created by communities. </summary>
        public IReadOnlyList<ResourceIdentifier> ResourceCollection { get; }
        /// <summary> Managed resource group name. </summary>
        public string ManagedResourceGroupName { get; }
        /// <summary> Managed On Behalf Of Configuration. </summary>
        internal ManagedOnBehalfOfConfiguration ManagedOnBehalfOfConfiguration { get; }
        /// <summary> Managed-On-Behalf-Of broker resources. </summary>
        public IReadOnlyList<SubResource> ManagedOnBehalfOfMoboBrokerResources
        {
            get => ManagedOnBehalfOfConfiguration?.MoboBrokerResources;
        }

        /// <summary> List of services governed by a community. </summary>
        public IList<GovernedServiceItem> GovernedServiceList { get; }
        /// <summary> Policy override setting for the community. Specifies whether to apply enclave-specific policies or disable policy enforcement. </summary>
        public CommunityPropertiesPolicyOverride? PolicyOverride { get; set; }
        /// <summary> Community role assignments. </summary>
        public IList<RoleAssignmentItem> CommunityRoleAssignments { get; }
        /// <summary> SKU of the community's Azure Firewall (Basic, Standard, Premium). Standard is the default. </summary>
        public FirewallSKU? FirewallSku { get; set; }
        /// <summary> Approval requirements for various actions on the community's resources. </summary>
        public ApprovalSettings ApprovalSettings { get; set; }
        /// <summary> Maintenance Mode configuration. </summary>
        public MaintenanceModeConfigurationModel MaintenanceModeConfiguration { get; set; }
    }
}
