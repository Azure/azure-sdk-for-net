// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.VirtualEnclaves.Models
{
    /// <summary> Community Resource Properties without default values. </summary>
    public partial class VirtualEnclaveCommunityPatchProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="VirtualEnclaveCommunityPatchProperties"/>. </summary>
        public VirtualEnclaveCommunityPatchProperties()
        {
            DnsServers = new ChangeTrackingList<string>();
            GovernedServiceList = new ChangeTrackingList<VirtualEnclaveGovernedService>();
            CommunityRoleAssignments = new ChangeTrackingList<VirtualEnclaveRoleAssignmentItem>();
        }

        /// <summary> Initializes a new instance of <see cref="VirtualEnclaveCommunityPatchProperties"/>. </summary>
        /// <param name="dnsServers"> DNS Servers. </param>
        /// <param name="governedServiceList"> List of services governed by a community. </param>
        /// <param name="policyOverride"> Policy override setting for the community. Specifies whether to apply enclave-specific policies or disable policy enforcement. </param>
        /// <param name="communityRoleAssignments"> Community role assignments. </param>
        /// <param name="firewallSku"> SKU of the community's Azure Firewall (Basic, Standard, Premium). Standard is the default. </param>
        /// <param name="approvalSettings"> Approval requirements for various actions on the community's resources. </param>
        /// <param name="maintenanceModeConfiguration"> Maintenance Mode configuration. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal VirtualEnclaveCommunityPatchProperties(IList<string> dnsServers, IList<VirtualEnclaveGovernedService> governedServiceList, VirtualEnclaveCommunityPolicyOverride? policyOverride, IList<VirtualEnclaveRoleAssignmentItem> communityRoleAssignments, VirtualEnclaveFirewallSku? firewallSku, ApprovalSettingsPatchProperties approvalSettings, VirtualEnclaveMaintenanceModeConfigurationPatch maintenanceModeConfiguration, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            DnsServers = dnsServers;
            GovernedServiceList = governedServiceList;
            PolicyOverride = policyOverride;
            CommunityRoleAssignments = communityRoleAssignments;
            FirewallSku = firewallSku;
            ApprovalSettings = approvalSettings;
            MaintenanceModeConfiguration = maintenanceModeConfiguration;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> DNS Servers. </summary>
        public IList<string> DnsServers { get; }
        /// <summary> List of services governed by a community. </summary>
        public IList<VirtualEnclaveGovernedService> GovernedServiceList { get; }
        /// <summary> Policy override setting for the community. Specifies whether to apply enclave-specific policies or disable policy enforcement. </summary>
        public VirtualEnclaveCommunityPolicyOverride? PolicyOverride { get; set; }
        /// <summary> Community role assignments. </summary>
        public IList<VirtualEnclaveRoleAssignmentItem> CommunityRoleAssignments { get; }
        /// <summary> SKU of the community's Azure Firewall (Basic, Standard, Premium). Standard is the default. </summary>
        public VirtualEnclaveFirewallSku? FirewallSku { get; set; }
        /// <summary> Approval requirements for various actions on the community's resources. </summary>
        internal ApprovalSettingsPatchProperties ApprovalSettings { get; set; }
        /// <summary> List of mandatory approvers for the approval request. </summary>
        public IList<VirtualEnclaveMandatoryApprover> ApprovalMandatoryApprovers
        {
            get
            {
                if (ApprovalSettings is null)
                    ApprovalSettings = new ApprovalSettingsPatchProperties();
                return ApprovalSettings.MandatoryApprovers;
            }
        }

        /// <summary> Maintenance Mode configuration. </summary>
        public VirtualEnclaveMaintenanceModeConfigurationPatch MaintenanceModeConfiguration { get; set; }
    }
}
