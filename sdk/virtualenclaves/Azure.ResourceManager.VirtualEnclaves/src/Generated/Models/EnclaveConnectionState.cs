// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.VirtualEnclaves.Models
{
    /// <summary> Specifies the state of the enclave connection. </summary>
    public readonly partial struct EnclaveConnectionState : IEquatable<EnclaveConnectionState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EnclaveConnectionState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnclaveConnectionState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PendingApprovalValue = "PendingApproval";
        private const string PendingUpdateValue = "PendingUpdate";
        private const string ApprovedValue = "Approved";
        private const string ActiveValue = "Active";
        private const string FailedValue = "Failed";
        private const string ConnectedValue = "Connected";
        private const string DisconnectedValue = "Disconnected";

        /// <summary> EnclaveConnectionState Type Pending Approval. </summary>
        public static EnclaveConnectionState PendingApproval { get; } = new EnclaveConnectionState(PendingApprovalValue);
        /// <summary> EnclaveConnectionState Type Pending Update. </summary>
        public static EnclaveConnectionState PendingUpdate { get; } = new EnclaveConnectionState(PendingUpdateValue);
        /// <summary> EnclaveConnectionState Type Approved. </summary>
        public static EnclaveConnectionState Approved { get; } = new EnclaveConnectionState(ApprovedValue);
        /// <summary> EnclaveConnectionState Type Active. </summary>
        public static EnclaveConnectionState Active { get; } = new EnclaveConnectionState(ActiveValue);
        /// <summary> EnclaveConnectionState Type Failed. </summary>
        public static EnclaveConnectionState Failed { get; } = new EnclaveConnectionState(FailedValue);
        /// <summary> EnclaveConnectionState Type Connected. </summary>
        public static EnclaveConnectionState Connected { get; } = new EnclaveConnectionState(ConnectedValue);
        /// <summary> EnclaveConnectionState Type Disconnected. </summary>
        public static EnclaveConnectionState Disconnected { get; } = new EnclaveConnectionState(DisconnectedValue);
        /// <summary> Determines if two <see cref="EnclaveConnectionState"/> values are the same. </summary>
        public static bool operator ==(EnclaveConnectionState left, EnclaveConnectionState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnclaveConnectionState"/> values are not the same. </summary>
        public static bool operator !=(EnclaveConnectionState left, EnclaveConnectionState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="EnclaveConnectionState"/>. </summary>
        public static implicit operator EnclaveConnectionState(string value) => new EnclaveConnectionState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnclaveConnectionState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnclaveConnectionState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
