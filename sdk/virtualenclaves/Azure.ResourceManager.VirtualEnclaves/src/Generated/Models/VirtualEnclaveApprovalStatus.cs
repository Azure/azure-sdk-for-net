// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.VirtualEnclaves.Models
{
    /// <summary> Approval Status. It can be Approved, Rejected, Pending, Deleted or Expired. </summary>
    public readonly partial struct VirtualEnclaveApprovalStatus : IEquatable<VirtualEnclaveApprovalStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VirtualEnclaveApprovalStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VirtualEnclaveApprovalStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ApprovedValue = "Approved";
        private const string RejectedValue = "Rejected";
        private const string PendingValue = "Pending";
        private const string DeletedValue = "Deleted";
        private const string ExpiredValue = "Expired";

        /// <summary> ApprovalStatus Type Approved. </summary>
        public static VirtualEnclaveApprovalStatus Approved { get; } = new VirtualEnclaveApprovalStatus(ApprovedValue);
        /// <summary> ApprovalStatus Type Rejected. </summary>
        public static VirtualEnclaveApprovalStatus Rejected { get; } = new VirtualEnclaveApprovalStatus(RejectedValue);
        /// <summary> ApprovalStatus Type Pending. </summary>
        public static VirtualEnclaveApprovalStatus Pending { get; } = new VirtualEnclaveApprovalStatus(PendingValue);
        /// <summary> ApprovalStatus Type Deleted. </summary>
        public static VirtualEnclaveApprovalStatus Deleted { get; } = new VirtualEnclaveApprovalStatus(DeletedValue);
        /// <summary> ApprovalStatus Type Expired. </summary>
        public static VirtualEnclaveApprovalStatus Expired { get; } = new VirtualEnclaveApprovalStatus(ExpiredValue);
        /// <summary> Determines if two <see cref="VirtualEnclaveApprovalStatus"/> values are the same. </summary>
        public static bool operator ==(VirtualEnclaveApprovalStatus left, VirtualEnclaveApprovalStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VirtualEnclaveApprovalStatus"/> values are not the same. </summary>
        public static bool operator !=(VirtualEnclaveApprovalStatus left, VirtualEnclaveApprovalStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="VirtualEnclaveApprovalStatus"/>. </summary>
        public static implicit operator VirtualEnclaveApprovalStatus(string value) => new VirtualEnclaveApprovalStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VirtualEnclaveApprovalStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VirtualEnclaveApprovalStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
