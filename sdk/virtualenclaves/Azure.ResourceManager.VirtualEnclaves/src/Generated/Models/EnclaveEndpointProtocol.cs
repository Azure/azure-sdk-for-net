// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.VirtualEnclaves.Models
{
    /// <summary> Enclave Endpoint Protocol Enum. </summary>
    public readonly partial struct EnclaveEndpointProtocol : IEquatable<EnclaveEndpointProtocol>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EnclaveEndpointProtocol"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnclaveEndpointProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ANYValue = "ANY";
        private const string TCPValue = "TCP";
        private const string UDPValue = "UDP";
        private const string ICMPValue = "ICMP";
        private const string ESPValue = "ESP";
        private const string AHValue = "AH";

        /// <summary> EndpointProtocol Type ANY. </summary>
        public static EnclaveEndpointProtocol ANY { get; } = new EnclaveEndpointProtocol(ANYValue);
        /// <summary> EndpointProtocol Type TCP. </summary>
        public static EnclaveEndpointProtocol TCP { get; } = new EnclaveEndpointProtocol(TCPValue);
        /// <summary> EndpointProtocol Type UDP. </summary>
        public static EnclaveEndpointProtocol UDP { get; } = new EnclaveEndpointProtocol(UDPValue);
        /// <summary> EndpointProtocol Type ICMP. </summary>
        public static EnclaveEndpointProtocol ICMP { get; } = new EnclaveEndpointProtocol(ICMPValue);
        /// <summary> EndpointProtocol Type ESP. </summary>
        public static EnclaveEndpointProtocol ESP { get; } = new EnclaveEndpointProtocol(ESPValue);
        /// <summary> EndpointProtocol Type AH. </summary>
        public static EnclaveEndpointProtocol AH { get; } = new EnclaveEndpointProtocol(AHValue);
        /// <summary> Determines if two <see cref="EnclaveEndpointProtocol"/> values are the same. </summary>
        public static bool operator ==(EnclaveEndpointProtocol left, EnclaveEndpointProtocol right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnclaveEndpointProtocol"/> values are not the same. </summary>
        public static bool operator !=(EnclaveEndpointProtocol left, EnclaveEndpointProtocol right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="EnclaveEndpointProtocol"/>. </summary>
        public static implicit operator EnclaveEndpointProtocol(string value) => new EnclaveEndpointProtocol(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnclaveEndpointProtocol other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnclaveEndpointProtocol other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
