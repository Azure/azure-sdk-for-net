// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.VirtualEnclaves.Models
{
    /// <summary> Destination Type Enum. </summary>
    public readonly partial struct CommunityEndpointDestinationType : IEquatable<CommunityEndpointDestinationType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CommunityEndpointDestinationType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CommunityEndpointDestinationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FqdnValue = "FQDN";
        private const string FqdnTagValue = "FQDNTag";
        private const string IPAddressValue = "IPAddress";
        private const string PrivateNetworkValue = "PrivateNetwork";

        /// <summary> DestinationType Type FQDN. </summary>
        public static CommunityEndpointDestinationType Fqdn { get; } = new CommunityEndpointDestinationType(FqdnValue);
        /// <summary> DestinationType Type FQDNTag. </summary>
        public static CommunityEndpointDestinationType FqdnTag { get; } = new CommunityEndpointDestinationType(FqdnTagValue);
        /// <summary> DestinationType Type IPAddress. </summary>
        public static CommunityEndpointDestinationType IPAddress { get; } = new CommunityEndpointDestinationType(IPAddressValue);
        /// <summary> DestinationType Type PrivateNetwork. </summary>
        public static CommunityEndpointDestinationType PrivateNetwork { get; } = new CommunityEndpointDestinationType(PrivateNetworkValue);
        /// <summary> Determines if two <see cref="CommunityEndpointDestinationType"/> values are the same. </summary>
        public static bool operator ==(CommunityEndpointDestinationType left, CommunityEndpointDestinationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CommunityEndpointDestinationType"/> values are not the same. </summary>
        public static bool operator !=(CommunityEndpointDestinationType left, CommunityEndpointDestinationType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="CommunityEndpointDestinationType"/>. </summary>
        public static implicit operator CommunityEndpointDestinationType(string value) => new CommunityEndpointDestinationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CommunityEndpointDestinationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CommunityEndpointDestinationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
