// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.VirtualEnclaves.Models
{
    /// <summary> Specifies the state of the transitHub. </summary>
    public readonly partial struct TransitHubState : IEquatable<TransitHubState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TransitHubState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TransitHubState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PendingApprovalValue = "PendingApproval";
        private const string ApprovedValue = "Approved";
        private const string PendingUpdateValue = "PendingUpdate";
        private const string ActiveValue = "Active";
        private const string FailedValue = "Failed";

        /// <summary> TransitHubState Type PendingApproval. </summary>
        public static TransitHubState PendingApproval { get; } = new TransitHubState(PendingApprovalValue);
        /// <summary> TransitHubState Type Approved. </summary>
        public static TransitHubState Approved { get; } = new TransitHubState(ApprovedValue);
        /// <summary> TransitHubState Type PendingUpdate. </summary>
        public static TransitHubState PendingUpdate { get; } = new TransitHubState(PendingUpdateValue);
        /// <summary> TransitHubState Type Active. </summary>
        public static TransitHubState Active { get; } = new TransitHubState(ActiveValue);
        /// <summary> TransitHubState Type Failed. </summary>
        public static TransitHubState Failed { get; } = new TransitHubState(FailedValue);
        /// <summary> Determines if two <see cref="TransitHubState"/> values are the same. </summary>
        public static bool operator ==(TransitHubState left, TransitHubState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TransitHubState"/> values are not the same. </summary>
        public static bool operator !=(TransitHubState left, TransitHubState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="TransitHubState"/>. </summary>
        public static implicit operator TransitHubState(string value) => new TransitHubState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TransitHubState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TransitHubState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
