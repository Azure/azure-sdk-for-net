// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.VirtualEnclaves.Models
{
    /// <summary> GovernedServiceItem Properties. </summary>
    public partial class GovernedServiceItem
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="GovernedServiceItem"/>. </summary>
        /// <param name="serviceId"> Service ID. </param>
        public GovernedServiceItem(ServiceIdentifier serviceId)
        {
            ServiceId = serviceId;
            Initiatives = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="GovernedServiceItem"/>. </summary>
        /// <param name="serviceId"> Service ID. </param>
        /// <param name="serviceName"> Service name. </param>
        /// <param name="option"> Governance option for this service (Allow, Deny, ExceptionOnly, or NotApplicable). </param>
        /// <param name="enforcement"> Initiative enforcement (Enabled or Disabled). </param>
        /// <param name="policyAction"> Enforcement mode for policy. AuditOnly, Enforce, or None. </param>
        /// <param name="initiatives"> Initiatives associated with this service. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal GovernedServiceItem(ServiceIdentifier serviceId, string serviceName, GovernedServiceItemOption? option, GovernedServiceItemEnforcement? enforcement, GovernedServiceItemPolicyAction? policyAction, IReadOnlyList<string> initiatives, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ServiceId = serviceId;
            ServiceName = serviceName;
            Option = option;
            Enforcement = enforcement;
            PolicyAction = policyAction;
            Initiatives = initiatives;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="GovernedServiceItem"/> for deserialization. </summary>
        internal GovernedServiceItem()
        {
        }

        /// <summary> Service ID. </summary>
        public ServiceIdentifier ServiceId { get; set; }
        /// <summary> Service name. </summary>
        public string ServiceName { get; }
        /// <summary> Governance option for this service (Allow, Deny, ExceptionOnly, or NotApplicable). </summary>
        public GovernedServiceItemOption? Option { get; set; }
        /// <summary> Initiative enforcement (Enabled or Disabled). </summary>
        public GovernedServiceItemEnforcement? Enforcement { get; set; }
        /// <summary> Enforcement mode for policy. AuditOnly, Enforce, or None. </summary>
        public GovernedServiceItemPolicyAction? PolicyAction { get; set; }
        /// <summary> Initiatives associated with this service. </summary>
        public IReadOnlyList<string> Initiatives { get; }
    }
}
