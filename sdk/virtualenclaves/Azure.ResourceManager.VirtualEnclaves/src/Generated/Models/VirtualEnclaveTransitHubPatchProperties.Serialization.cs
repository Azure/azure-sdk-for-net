// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

<<<<<<<< HEAD:sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSchemaVersionProperties.Serialization.cs
namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    public partial class EdgeSchemaVersionProperties : IUtf8JsonSerializable, IJsonModel<EdgeSchemaVersionProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdgeSchemaVersionProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<EdgeSchemaVersionProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
========
namespace Azure.ResourceManager.VirtualEnclaves.Models
{
    public partial class VirtualEnclaveTransitHubPatchProperties : IUtf8JsonSerializable, IJsonModel<VirtualEnclaveTransitHubPatchProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<VirtualEnclaveTransitHubPatchProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<VirtualEnclaveTransitHubPatchProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
>>>>>>>> 55d5a2fdb94afd7949d951566821912afaacc538:sdk/virtualenclaves/Azure.ResourceManager.VirtualEnclaves/src/Generated/Models/VirtualEnclaveTransitHubPatchProperties.Serialization.cs
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
<<<<<<<< HEAD:sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSchemaVersionProperties.Serialization.cs
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaVersionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSchemaVersionProperties)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("value"u8);
            writer.WriteStringValue(Value);
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
========
            var format = options.Format == "W" ? ((IPersistableModel<VirtualEnclaveTransitHubPatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VirtualEnclaveTransitHubPatchProperties)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(State))
            {
                writer.WritePropertyName("state"u8);
                writer.WriteStringValue(State.Value.ToString());
            }
            if (Optional.IsDefined(TransitOption))
>>>>>>>> 55d5a2fdb94afd7949d951566821912afaacc538:sdk/virtualenclaves/Azure.ResourceManager.VirtualEnclaves/src/Generated/Models/VirtualEnclaveTransitHubPatchProperties.Serialization.cs
            {
                writer.WritePropertyName("transitOption"u8);
                writer.WriteObjectValue(TransitOption, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

<<<<<<<< HEAD:sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSchemaVersionProperties.Serialization.cs
        EdgeSchemaVersionProperties IJsonModel<EdgeSchemaVersionProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaVersionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSchemaVersionProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSchemaVersionProperties(document.RootElement, options);
        }

        internal static EdgeSchemaVersionProperties DeserializeEdgeSchemaVersionProperties(JsonElement element, ModelReaderWriterOptions options = null)
========
        VirtualEnclaveTransitHubPatchProperties IJsonModel<VirtualEnclaveTransitHubPatchProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VirtualEnclaveTransitHubPatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VirtualEnclaveTransitHubPatchProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeVirtualEnclaveTransitHubPatchProperties(document.RootElement, options);
        }

        internal static VirtualEnclaveTransitHubPatchProperties DeserializeVirtualEnclaveTransitHubPatchProperties(JsonElement element, ModelReaderWriterOptions options = null)
>>>>>>>> 55d5a2fdb94afd7949d951566821912afaacc538:sdk/virtualenclaves/Azure.ResourceManager.VirtualEnclaves/src/Generated/Models/VirtualEnclaveTransitHubPatchProperties.Serialization.cs
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
<<<<<<<< HEAD:sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSchemaVersionProperties.Serialization.cs
            string value = default;
            WorkloadOrchestrationProvisioningState? provisioningState = default;
========
            TransitHubState? state = default;
            VirtualEnclaveTransitOptionProperties transitOption = default;
>>>>>>>> 55d5a2fdb94afd7949d951566821912afaacc538:sdk/virtualenclaves/Azure.ResourceManager.VirtualEnclaves/src/Generated/Models/VirtualEnclaveTransitHubPatchProperties.Serialization.cs
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
<<<<<<<< HEAD:sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSchemaVersionProperties.Serialization.cs
                if (property.NameEquals("value"u8))
                {
                    value = property.Value.GetString();
========
                if (property.NameEquals("state"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    state = new TransitHubState(property.Value.GetString());
>>>>>>>> 55d5a2fdb94afd7949d951566821912afaacc538:sdk/virtualenclaves/Azure.ResourceManager.VirtualEnclaves/src/Generated/Models/VirtualEnclaveTransitHubPatchProperties.Serialization.cs
                    continue;
                }
                if (property.NameEquals("transitOption"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
<<<<<<<< HEAD:sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSchemaVersionProperties.Serialization.cs
                    provisioningState = new WorkloadOrchestrationProvisioningState(property.Value.GetString());
========
                    transitOption = VirtualEnclaveTransitOptionProperties.DeserializeVirtualEnclaveTransitOptionProperties(property.Value, options);
>>>>>>>> 55d5a2fdb94afd7949d951566821912afaacc538:sdk/virtualenclaves/Azure.ResourceManager.VirtualEnclaves/src/Generated/Models/VirtualEnclaveTransitHubPatchProperties.Serialization.cs
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
<<<<<<<< HEAD:sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSchemaVersionProperties.Serialization.cs
            return new EdgeSchemaVersionProperties(value, provisioningState, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdgeSchemaVersionProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaVersionProperties>)this).GetFormatFromOptions(options) : options.Format;
========
            return new VirtualEnclaveTransitHubPatchProperties(state, transitOption, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<VirtualEnclaveTransitHubPatchProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VirtualEnclaveTransitHubPatchProperties>)this).GetFormatFromOptions(options) : options.Format;
>>>>>>>> 55d5a2fdb94afd7949d951566821912afaacc538:sdk/virtualenclaves/Azure.ResourceManager.VirtualEnclaves/src/Generated/Models/VirtualEnclaveTransitHubPatchProperties.Serialization.cs

            switch (format)
            {
                case "J":
<<<<<<<< HEAD:sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSchemaVersionProperties.Serialization.cs
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadOrchestrationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSchemaVersionProperties)} does not support writing '{options.Format}' format.");
            }
        }

        EdgeSchemaVersionProperties IPersistableModel<EdgeSchemaVersionProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdgeSchemaVersionProperties>)this).GetFormatFromOptions(options) : options.Format;
========
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerVirtualEnclavesContext.Default);
                default:
                    throw new FormatException($"The model {nameof(VirtualEnclaveTransitHubPatchProperties)} does not support writing '{options.Format}' format.");
            }
        }

        VirtualEnclaveTransitHubPatchProperties IPersistableModel<VirtualEnclaveTransitHubPatchProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VirtualEnclaveTransitHubPatchProperties>)this).GetFormatFromOptions(options) : options.Format;
>>>>>>>> 55d5a2fdb94afd7949d951566821912afaacc538:sdk/virtualenclaves/Azure.ResourceManager.VirtualEnclaves/src/Generated/Models/VirtualEnclaveTransitHubPatchProperties.Serialization.cs

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
<<<<<<<< HEAD:sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/EdgeSchemaVersionProperties.Serialization.cs
                        return DeserializeEdgeSchemaVersionProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSchemaVersionProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdgeSchemaVersionProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
========
                        return DeserializeVirtualEnclaveTransitHubPatchProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(VirtualEnclaveTransitHubPatchProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<VirtualEnclaveTransitHubPatchProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
>>>>>>>> 55d5a2fdb94afd7949d951566821912afaacc538:sdk/virtualenclaves/Azure.ResourceManager.VirtualEnclaves/src/Generated/Models/VirtualEnclaveTransitHubPatchProperties.Serialization.cs
    }
}
