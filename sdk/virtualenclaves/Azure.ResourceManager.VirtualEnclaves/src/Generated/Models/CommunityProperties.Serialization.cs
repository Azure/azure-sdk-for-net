// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.VirtualEnclaves.Models
{
    public partial class CommunityProperties : IUtf8JsonSerializable, IJsonModel<CommunityProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<CommunityProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<CommunityProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CommunityProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CommunityProperties)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(AddressSpace))
            {
                writer.WritePropertyName("addressSpace"u8);
                writer.WriteStringValue(AddressSpace);
            }
            if (Optional.IsCollectionDefined(DnsServers))
            {
                writer.WritePropertyName("dnsServers"u8);
                writer.WriteStartArray();
                foreach (var item in DnsServers)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(ResourceCollection))
            {
                writer.WritePropertyName("resourceCollection"u8);
                writer.WriteStartArray();
                foreach (var item in ResourceCollection)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(ManagedResourceGroupName))
            {
                writer.WritePropertyName("managedResourceGroupName"u8);
                writer.WriteStringValue(ManagedResourceGroupName);
            }
            if (options.Format != "W" && Optional.IsDefined(ManagedOnBehalfOfConfiguration))
            {
                writer.WritePropertyName("managedOnBehalfOfConfiguration"u8);
                writer.WriteObjectValue(ManagedOnBehalfOfConfiguration, options);
            }
            if (Optional.IsCollectionDefined(GovernedServiceList))
            {
                writer.WritePropertyName("governedServiceList"u8);
                writer.WriteStartArray();
                foreach (var item in GovernedServiceList)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(PolicyOverride))
            {
                writer.WritePropertyName("policyOverride"u8);
                writer.WriteStringValue(PolicyOverride.Value.ToString());
            }
            if (Optional.IsCollectionDefined(CommunityRoleAssignments))
            {
                writer.WritePropertyName("communityRoleAssignments"u8);
                writer.WriteStartArray();
                foreach (var item in CommunityRoleAssignments)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(FirewallSku))
            {
                writer.WritePropertyName("firewallSku"u8);
                writer.WriteStringValue(FirewallSku.Value.ToString());
            }
            if (Optional.IsDefined(ApprovalSettings))
            {
                writer.WritePropertyName("approvalSettings"u8);
                writer.WriteObjectValue(ApprovalSettings, options);
            }
            if (Optional.IsDefined(MaintenanceModeConfiguration))
            {
                writer.WritePropertyName("maintenanceModeConfiguration"u8);
                writer.WriteObjectValue(MaintenanceModeConfiguration, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        CommunityProperties IJsonModel<CommunityProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CommunityProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CommunityProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeCommunityProperties(document.RootElement, options);
        }

        internal static CommunityProperties DeserializeCommunityProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string addressSpace = default;
            IList<string> dnsServers = default;
            ProvisioningState? provisioningState = default;
            IReadOnlyList<ResourceIdentifier> resourceCollection = default;
            string managedResourceGroupName = default;
            ManagedOnBehalfOfConfiguration managedOnBehalfOfConfiguration = default;
            IList<GovernedServiceItem> governedServiceList = default;
            CommunityPropertiesPolicyOverride? policyOverride = default;
            IList<RoleAssignmentItem> communityRoleAssignments = default;
            FirewallSKU? firewallSku = default;
            ApprovalSettings approvalSettings = default;
            MaintenanceModeConfigurationModel maintenanceModeConfiguration = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("addressSpace"u8))
                {
                    addressSpace = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dnsServers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    dnsServers = array;
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new ProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("resourceCollection"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ResourceIdentifier> array = new List<ResourceIdentifier>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(new ResourceIdentifier(item.GetString()));
                        }
                    }
                    resourceCollection = array;
                    continue;
                }
                if (property.NameEquals("managedResourceGroupName"u8))
                {
                    managedResourceGroupName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("managedOnBehalfOfConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    managedOnBehalfOfConfiguration = ManagedOnBehalfOfConfiguration.DeserializeManagedOnBehalfOfConfiguration(property.Value, options);
                    continue;
                }
                if (property.NameEquals("governedServiceList"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<GovernedServiceItem> array = new List<GovernedServiceItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(GovernedServiceItem.DeserializeGovernedServiceItem(item, options));
                    }
                    governedServiceList = array;
                    continue;
                }
                if (property.NameEquals("policyOverride"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    policyOverride = new CommunityPropertiesPolicyOverride(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("communityRoleAssignments"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<RoleAssignmentItem> array = new List<RoleAssignmentItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RoleAssignmentItem.DeserializeRoleAssignmentItem(item, options));
                    }
                    communityRoleAssignments = array;
                    continue;
                }
                if (property.NameEquals("firewallSku"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    firewallSku = new FirewallSKU(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("approvalSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    approvalSettings = ApprovalSettings.DeserializeApprovalSettings(property.Value, options);
                    continue;
                }
                if (property.NameEquals("maintenanceModeConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maintenanceModeConfiguration = MaintenanceModeConfigurationModel.DeserializeMaintenanceModeConfigurationModel(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new CommunityProperties(
                addressSpace,
                dnsServers ?? new ChangeTrackingList<string>(),
                provisioningState,
                resourceCollection ?? new ChangeTrackingList<ResourceIdentifier>(),
                managedResourceGroupName,
                managedOnBehalfOfConfiguration,
                governedServiceList ?? new ChangeTrackingList<GovernedServiceItem>(),
                policyOverride,
                communityRoleAssignments ?? new ChangeTrackingList<RoleAssignmentItem>(),
                firewallSku,
                approvalSettings,
                maintenanceModeConfiguration,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<CommunityProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CommunityProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerVirtualEnclavesContext.Default);
                default:
                    throw new FormatException($"The model {nameof(CommunityProperties)} does not support writing '{options.Format}' format.");
            }
        }

        CommunityProperties IPersistableModel<CommunityProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CommunityProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeCommunityProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(CommunityProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<CommunityProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
