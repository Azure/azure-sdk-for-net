// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.VirtualEnclaves.Models
{
    /// <summary> Azure Firewall SKU. </summary>
    public readonly partial struct FirewallSKU : IEquatable<FirewallSKU>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FirewallSKU"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FirewallSKU(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BasicValue = "Basic";
        private const string StandardValue = "Standard";
        private const string PremiumValue = "Premium";

        /// <summary> FirewallSKU Basic. </summary>
        public static FirewallSKU Basic { get; } = new FirewallSKU(BasicValue);
        /// <summary> FirwallSKU Standard. </summary>
        public static FirewallSKU Standard { get; } = new FirewallSKU(StandardValue);
        /// <summary> FirewallSKU Premium. </summary>
        public static FirewallSKU Premium { get; } = new FirewallSKU(PremiumValue);
        /// <summary> Determines if two <see cref="FirewallSKU"/> values are the same. </summary>
        public static bool operator ==(FirewallSKU left, FirewallSKU right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FirewallSKU"/> values are not the same. </summary>
        public static bool operator !=(FirewallSKU left, FirewallSKU right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="FirewallSKU"/>. </summary>
        public static implicit operator FirewallSKU(string value) => new FirewallSKU(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FirewallSKU other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FirewallSKU other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
