// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.VirtualEnclaves.Models
{
    /// <summary> Approver Metadata for approvals request. </summary>
    public partial class VirtualEnclaveApprover
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="VirtualEnclaveApprover"/>. </summary>
        /// <param name="approverEntraId"> Entra ObjectID of the approver. </param>
        /// <param name="lastUpdatedOn"> approval request last updated at. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="approverEntraId"/> is null. </exception>
        public VirtualEnclaveApprover(string approverEntraId, DateTimeOffset lastUpdatedOn)
        {
            Argument.AssertNotNull(approverEntraId, nameof(approverEntraId));

            ApproverEntraId = approverEntraId;
            LastUpdatedOn = lastUpdatedOn;
        }

        /// <summary> Initializes a new instance of <see cref="VirtualEnclaveApprover"/>. </summary>
        /// <param name="approverEntraId"> Entra ObjectID of the approver. </param>
        /// <param name="actionPerformed"> Action Performed by approver. </param>
        /// <param name="lastUpdatedOn"> approval request last updated at. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal VirtualEnclaveApprover(string approverEntraId, ActionPerformed? actionPerformed, DateTimeOffset lastUpdatedOn, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ApproverEntraId = approverEntraId;
            ActionPerformed = actionPerformed;
            LastUpdatedOn = lastUpdatedOn;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="VirtualEnclaveApprover"/> for deserialization. </summary>
        internal VirtualEnclaveApprover()
        {
        }

        /// <summary> Entra ObjectID of the approver. </summary>
        public string ApproverEntraId { get; set; }
        /// <summary> Action Performed by approver. </summary>
        public ActionPerformed? ActionPerformed { get; set; }
        /// <summary> approval request last updated at. </summary>
        public DateTimeOffset LastUpdatedOn { get; set; }
    }
}
