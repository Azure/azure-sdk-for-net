// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.VirtualEnclaves.Models
{
    /// <summary> Identifier for governed services. </summary>
    public readonly partial struct ServiceIdentifier : IEquatable<ServiceIdentifier>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ServiceIdentifier"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ServiceIdentifier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AKSValue = "AKS";
        private const string AppServiceValue = "AppService";
        private const string AzureFirewallsValue = "AzureFirewalls";
        private const string ContainerRegistryValue = "ContainerRegistry";
        private const string CosmosDBValue = "CosmosDB";
        private const string DataConnectorsValue = "DataConnectors";
        private const string InsightsValue = "Insights";
        private const string KeyVaultValue = "KeyVault";
        private const string LogicValue = "Logic";
        private const string MicrosoftSqlValue = "MicrosoftSQL";
        private const string MonitoringValue = "Monitoring";
        private const string PostgreSqlValue = "PostgreSQL";
        private const string PrivateDnsZonesValue = "PrivateDNSZones";
        private const string ServiceBusValue = "ServiceBus";
        private const string StorageValue = "Storage";

        /// <summary> Service identifier for AKS. </summary>
        public static ServiceIdentifier AKS { get; } = new ServiceIdentifier(AKSValue);
        /// <summary> Service identifier for App Service. </summary>
        public static ServiceIdentifier AppService { get; } = new ServiceIdentifier(AppServiceValue);
        /// <summary> Service identifier for Azure Firewalls. </summary>
        public static ServiceIdentifier AzureFirewalls { get; } = new ServiceIdentifier(AzureFirewallsValue);
        /// <summary> Service identifier for Container Registry. </summary>
        public static ServiceIdentifier ContainerRegistry { get; } = new ServiceIdentifier(ContainerRegistryValue);
        /// <summary> Service identifier for CosmosDB. </summary>
        public static ServiceIdentifier CosmosDB { get; } = new ServiceIdentifier(CosmosDBValue);
        /// <summary> Service identifier for Data Connectors. </summary>
        public static ServiceIdentifier DataConnectors { get; } = new ServiceIdentifier(DataConnectorsValue);
        /// <summary> Service identifier for Insights. </summary>
        public static ServiceIdentifier Insights { get; } = new ServiceIdentifier(InsightsValue);
        /// <summary> Service identifier for Key Vault. </summary>
        public static ServiceIdentifier KeyVault { get; } = new ServiceIdentifier(KeyVaultValue);
        /// <summary> Service identifier for Logic. </summary>
        public static ServiceIdentifier Logic { get; } = new ServiceIdentifier(LogicValue);
        /// <summary> Service identifier for Microsoft SQL. </summary>
        public static ServiceIdentifier MicrosoftSql { get; } = new ServiceIdentifier(MicrosoftSqlValue);
        /// <summary> Service identifier for Monitoring. </summary>
        public static ServiceIdentifier Monitoring { get; } = new ServiceIdentifier(MonitoringValue);
        /// <summary> Service identifier for PostgreSQL. </summary>
        public static ServiceIdentifier PostgreSql { get; } = new ServiceIdentifier(PostgreSqlValue);
        /// <summary> Service identifier for Private DNS Zones. </summary>
        public static ServiceIdentifier PrivateDnsZones { get; } = new ServiceIdentifier(PrivateDnsZonesValue);
        /// <summary> Service identifier for Service Bus. </summary>
        public static ServiceIdentifier ServiceBus { get; } = new ServiceIdentifier(ServiceBusValue);
        /// <summary> Service identifier for Storage. </summary>
        public static ServiceIdentifier Storage { get; } = new ServiceIdentifier(StorageValue);
        /// <summary> Determines if two <see cref="ServiceIdentifier"/> values are the same. </summary>
        public static bool operator ==(ServiceIdentifier left, ServiceIdentifier right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ServiceIdentifier"/> values are not the same. </summary>
        public static bool operator !=(ServiceIdentifier left, ServiceIdentifier right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ServiceIdentifier"/>. </summary>
        public static implicit operator ServiceIdentifier(string value) => new ServiceIdentifier(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ServiceIdentifier other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ServiceIdentifier other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
