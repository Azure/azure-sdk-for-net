// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.VirtualEnclaves.Models
{
    /// <summary> Virtual Enclave Resource properties. </summary>
    public partial class VirtualEnclaveProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="VirtualEnclaveProperties"/>. </summary>
        /// <param name="enclaveVirtualNetwork"> Virtual Network. </param>
        /// <param name="communityResourceId"> Community Resource Id. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="enclaveVirtualNetwork"/> or <paramref name="communityResourceId"/> is null. </exception>
        public VirtualEnclaveProperties(EnclaveVirtualNetwork enclaveVirtualNetwork, ResourceIdentifier communityResourceId)
        {
            Argument.AssertNotNull(enclaveVirtualNetwork, nameof(enclaveVirtualNetwork));
            Argument.AssertNotNull(communityResourceId, nameof(communityResourceId));

            EnclaveVirtualNetwork = enclaveVirtualNetwork;
            CommunityResourceId = communityResourceId;
            ResourceCollection = new ChangeTrackingList<ResourceIdentifier>();
            EnclaveRoleAssignments = new ChangeTrackingList<VirtualEnclaveRoleAssignmentItem>();
            WorkloadRoleAssignments = new ChangeTrackingList<VirtualEnclaveRoleAssignmentItem>();
            GovernedServiceList = new ChangeTrackingList<VirtualEnclaveGovernedService>();
        }

        /// <summary> Initializes a new instance of <see cref="VirtualEnclaveProperties"/>. </summary>
        /// <param name="provisioningState"> Provisioning State. </param>
        /// <param name="enclaveVirtualNetwork"> Virtual Network. </param>
        /// <param name="enclaveAddressSpaces"> Enclave Address Spaces. </param>
        /// <param name="communityResourceId"> Community Resource Id. </param>
        /// <param name="resourceCollection"> List of resource ids created by Virtual Enclave. </param>
        /// <param name="managedResourceGroupName"> Managed resource group name. </param>
        /// <param name="managedOnBehalfOfConfiguration"> Managed On Behalf Of Configuration. </param>
        /// <param name="isBastionEnabled"> Deploy Bastion service (True or False). </param>
        /// <param name="enclaveRoleAssignments"> Enclave role assignments. </param>
        /// <param name="workloadRoleAssignments"> Workload role assignments. </param>
        /// <param name="governedServiceList"> Enclave specific policies. </param>
        /// <param name="enclaveDefaultSettings"> Enclave default settings. </param>
        /// <param name="maintenanceModeConfiguration"> Maintenance Mode configuration. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal VirtualEnclaveProperties(VirtualEnclaveProvisioningState? provisioningState, EnclaveVirtualNetwork enclaveVirtualNetwork, EnclaveAddressSpaces enclaveAddressSpaces, ResourceIdentifier communityResourceId, IReadOnlyList<ResourceIdentifier> resourceCollection, string managedResourceGroupName, ManagedOnBehalfOfConfiguration managedOnBehalfOfConfiguration, bool? isBastionEnabled, IList<VirtualEnclaveRoleAssignmentItem> enclaveRoleAssignments, IList<VirtualEnclaveRoleAssignmentItem> workloadRoleAssignments, IList<VirtualEnclaveGovernedService> governedServiceList, EnclaveDefaultSettings enclaveDefaultSettings, VirtualEnclaveMaintenanceModeConfiguration maintenanceModeConfiguration, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProvisioningState = provisioningState;
            EnclaveVirtualNetwork = enclaveVirtualNetwork;
            EnclaveAddressSpaces = enclaveAddressSpaces;
            CommunityResourceId = communityResourceId;
            ResourceCollection = resourceCollection;
            ManagedResourceGroupName = managedResourceGroupName;
            ManagedOnBehalfOfConfiguration = managedOnBehalfOfConfiguration;
            IsBastionEnabled = isBastionEnabled;
            EnclaveRoleAssignments = enclaveRoleAssignments;
            WorkloadRoleAssignments = workloadRoleAssignments;
            GovernedServiceList = governedServiceList;
            EnclaveDefaultSettings = enclaveDefaultSettings;
            MaintenanceModeConfiguration = maintenanceModeConfiguration;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="VirtualEnclaveProperties"/> for deserialization. </summary>
        internal VirtualEnclaveProperties()
        {
        }

        /// <summary> Provisioning State. </summary>
        public VirtualEnclaveProvisioningState? ProvisioningState { get; }
        /// <summary> Virtual Network. </summary>
        public EnclaveVirtualNetwork EnclaveVirtualNetwork { get; set; }
        /// <summary> Enclave Address Spaces. </summary>
        public EnclaveAddressSpaces EnclaveAddressSpaces { get; }
        /// <summary> Community Resource Id. </summary>
        public ResourceIdentifier CommunityResourceId { get; set; }
        /// <summary> List of resource ids created by Virtual Enclave. </summary>
        public IReadOnlyList<ResourceIdentifier> ResourceCollection { get; }
        /// <summary> Managed resource group name. </summary>
        public string ManagedResourceGroupName { get; }
        /// <summary> Managed On Behalf Of Configuration. </summary>
        internal ManagedOnBehalfOfConfiguration ManagedOnBehalfOfConfiguration { get; }
        /// <summary> Managed-On-Behalf-Of broker resources. </summary>
        public IReadOnlyList<SubResource> ManagedOnBehalfOfMoboBrokerResources
        {
            get => ManagedOnBehalfOfConfiguration?.MoboBrokerResources;
        }

        /// <summary> Deploy Bastion service (True or False). </summary>
        public bool? IsBastionEnabled { get; set; }
        /// <summary> Enclave role assignments. </summary>
        public IList<VirtualEnclaveRoleAssignmentItem> EnclaveRoleAssignments { get; }
        /// <summary> Workload role assignments. </summary>
        public IList<VirtualEnclaveRoleAssignmentItem> WorkloadRoleAssignments { get; }
        /// <summary> Enclave specific policies. </summary>
        public IList<VirtualEnclaveGovernedService> GovernedServiceList { get; }
        /// <summary> Enclave default settings. </summary>
        public EnclaveDefaultSettings EnclaveDefaultSettings { get; set; }
        /// <summary> Maintenance Mode configuration. </summary>
        public VirtualEnclaveMaintenanceModeConfiguration MaintenanceModeConfiguration { get; set; }
    }
}
