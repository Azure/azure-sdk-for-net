// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.VirtualEnclaves.Models
{
    /// <summary> The MaintenanceModeConfigurationModelMode. </summary>
    public readonly partial struct MaintenanceModeConfigurationModelMode : IEquatable<MaintenanceModeConfigurationModelMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MaintenanceModeConfigurationModelMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MaintenanceModeConfigurationModelMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OnValue = "On";
        private const string CanNotDeleteValue = "CanNotDelete";
        private const string OffValue = "Off";
        private const string GeneralValue = "General";
        private const string AdvancedValue = "Advanced";

        /// <summary> On. </summary>
        public static MaintenanceModeConfigurationModelMode On { get; } = new MaintenanceModeConfigurationModelMode(OnValue);
        /// <summary> CanNotDelete. </summary>
        public static MaintenanceModeConfigurationModelMode CanNotDelete { get; } = new MaintenanceModeConfigurationModelMode(CanNotDeleteValue);
        /// <summary> Off. </summary>
        public static MaintenanceModeConfigurationModelMode Off { get; } = new MaintenanceModeConfigurationModelMode(OffValue);
        /// <summary> General. </summary>
        public static MaintenanceModeConfigurationModelMode General { get; } = new MaintenanceModeConfigurationModelMode(GeneralValue);
        /// <summary> Advanced. </summary>
        public static MaintenanceModeConfigurationModelMode Advanced { get; } = new MaintenanceModeConfigurationModelMode(AdvancedValue);
        /// <summary> Determines if two <see cref="MaintenanceModeConfigurationModelMode"/> values are the same. </summary>
        public static bool operator ==(MaintenanceModeConfigurationModelMode left, MaintenanceModeConfigurationModelMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MaintenanceModeConfigurationModelMode"/> values are not the same. </summary>
        public static bool operator !=(MaintenanceModeConfigurationModelMode left, MaintenanceModeConfigurationModelMode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="MaintenanceModeConfigurationModelMode"/>. </summary>
        public static implicit operator MaintenanceModeConfigurationModelMode(string value) => new MaintenanceModeConfigurationModelMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MaintenanceModeConfigurationModelMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MaintenanceModeConfigurationModelMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
