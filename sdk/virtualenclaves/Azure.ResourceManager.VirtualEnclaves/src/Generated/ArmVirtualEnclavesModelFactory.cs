// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.VirtualEnclaves.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmVirtualEnclavesModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="VirtualEnclaves.VirtualEnclaveWorkloadData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="VirtualEnclaves.VirtualEnclaveWorkloadData"/> instance for mocking. </returns>
        public static VirtualEnclaveWorkloadData VirtualEnclaveWorkloadData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, VirtualEnclaveWorkloadProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new VirtualEnclaveWorkloadData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualEnclaveWorkloadProperties"/>. </summary>
        /// <param name="provisioningState"> Provisioning State. </param>
        /// <param name="resourceGroupCollection"> List of resource group ids. </param>
        /// <param name="managedOnBehalfOfMoboBrokerResources"> Managed On Behalf Of Configuration. </param>
        /// <returns> A new <see cref="Models.VirtualEnclaveWorkloadProperties"/> instance for mocking. </returns>
        public static VirtualEnclaveWorkloadProperties VirtualEnclaveWorkloadProperties(VirtualEnclaveProvisioningState? provisioningState = null, IEnumerable<string> resourceGroupCollection = null, IEnumerable<SubResource> managedOnBehalfOfMoboBrokerResources = null)
        {
            resourceGroupCollection ??= new List<string>();
            managedOnBehalfOfMoboBrokerResources ??= new List<SubResource>();

            return new VirtualEnclaveWorkloadProperties(provisioningState, resourceGroupCollection?.ToList(), managedOnBehalfOfMoboBrokerResources != null ? new ManagedOnBehalfOfConfiguration(managedOnBehalfOfMoboBrokerResources?.ToList(), serializedAdditionalRawData: null) : null, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VirtualEnclaves.VirtualEnclaveData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <returns> A new <see cref="VirtualEnclaves.VirtualEnclaveData"/> instance for mocking. </returns>
        public static VirtualEnclaveData VirtualEnclaveData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, VirtualEnclaveProperties properties = null, ManagedServiceIdentity identity = null)
        {
            tags ??= new Dictionary<string, string>();

            return new VirtualEnclaveData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                identity,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualEnclaveProperties"/>. </summary>
        /// <param name="provisioningState"> Provisioning State. </param>
        /// <param name="enclaveVirtualNetwork"> Virtual Network. </param>
        /// <param name="enclaveAddressSpaces"> Enclave Address Spaces. </param>
        /// <param name="communityResourceId"> Community Resource Id. </param>
        /// <param name="resourceCollection"> List of resource ids created by Virtual Enclave. </param>
        /// <param name="managedResourceGroupName"> Managed resource group name. </param>
        /// <param name="managedOnBehalfOfMoboBrokerResources"> Managed On Behalf Of Configuration. </param>
        /// <param name="isBastionEnabled"> Deploy Bastion service (True or False). </param>
        /// <param name="enclaveRoleAssignments"> Enclave role assignments. </param>
        /// <param name="workloadRoleAssignments"> Workload role assignments. </param>
        /// <param name="governedServiceList"> Enclave specific policies. </param>
        /// <param name="enclaveDefaultSettings"> Enclave default settings. </param>
        /// <param name="maintenanceModeConfiguration"> Maintenance Mode configuration. </param>
        /// <returns> A new <see cref="Models.VirtualEnclaveProperties"/> instance for mocking. </returns>
        public static VirtualEnclaveProperties VirtualEnclaveProperties(VirtualEnclaveProvisioningState? provisioningState = null, EnclaveVirtualNetwork enclaveVirtualNetwork = null, EnclaveAddressSpaces enclaveAddressSpaces = null, ResourceIdentifier communityResourceId = null, IEnumerable<ResourceIdentifier> resourceCollection = null, string managedResourceGroupName = null, IEnumerable<SubResource> managedOnBehalfOfMoboBrokerResources = null, bool? isBastionEnabled = null, IEnumerable<VirtualEnclaveRoleAssignmentItem> enclaveRoleAssignments = null, IEnumerable<VirtualEnclaveRoleAssignmentItem> workloadRoleAssignments = null, IEnumerable<VirtualEnclaveGovernedService> governedServiceList = null, EnclaveDefaultSettings enclaveDefaultSettings = null, VirtualEnclaveMaintenanceModeConfiguration maintenanceModeConfiguration = null)
        {
            resourceCollection ??= new List<ResourceIdentifier>();
            managedOnBehalfOfMoboBrokerResources ??= new List<SubResource>();
            enclaveRoleAssignments ??= new List<VirtualEnclaveRoleAssignmentItem>();
            workloadRoleAssignments ??= new List<VirtualEnclaveRoleAssignmentItem>();
            governedServiceList ??= new List<VirtualEnclaveGovernedService>();

            return new VirtualEnclaveProperties(
                provisioningState,
                enclaveVirtualNetwork,
                enclaveAddressSpaces,
                communityResourceId,
                resourceCollection?.ToList(),
                managedResourceGroupName,
                managedOnBehalfOfMoboBrokerResources != null ? new ManagedOnBehalfOfConfiguration(managedOnBehalfOfMoboBrokerResources?.ToList(), serializedAdditionalRawData: null) : null,
                isBastionEnabled,
                enclaveRoleAssignments?.ToList(),
                workloadRoleAssignments?.ToList(),
                governedServiceList?.ToList(),
                enclaveDefaultSettings,
                maintenanceModeConfiguration,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualEnclaveSubnetConfiguration"/>. </summary>
        /// <param name="subnetName"> Subnet name. </param>
        /// <param name="subnetResourceId"> Subnet Resource ID. </param>
        /// <param name="networkPrefixSize"> Network prefix size. </param>
        /// <param name="subnetDelegation"> Subnet delegation. </param>
        /// <param name="addressPrefix"> Address prefix. </param>
        /// <param name="networkSecurityGroupResourceId"> Network security group ID. </param>
        /// <returns> A new <see cref="Models.VirtualEnclaveSubnetConfiguration"/> instance for mocking. </returns>
        public static VirtualEnclaveSubnetConfiguration VirtualEnclaveSubnetConfiguration(string subnetName = null, ResourceIdentifier subnetResourceId = null, int networkPrefixSize = default, string subnetDelegation = null, string addressPrefix = null, ResourceIdentifier networkSecurityGroupResourceId = null)
        {
            return new VirtualEnclaveSubnetConfiguration(
                subnetName,
                subnetResourceId,
                networkPrefixSize,
                subnetDelegation,
                addressPrefix,
                networkSecurityGroupResourceId,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.EnclaveAddressSpaces"/>. </summary>
        /// <param name="enclaveAddressSpace"> Enclave Address Space. </param>
        /// <param name="managedAddressSpace"> Managed Address Space. </param>
        /// <returns> A new <see cref="Models.EnclaveAddressSpaces"/> instance for mocking. </returns>
        public static EnclaveAddressSpaces EnclaveAddressSpaces(string enclaveAddressSpace = null, string managedAddressSpace = null)
        {
            return new EnclaveAddressSpaces(enclaveAddressSpace, managedAddressSpace, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualEnclaveGovernedService"/>. </summary>
        /// <param name="serviceId"> Service ID. </param>
        /// <param name="serviceName"> Service name. </param>
        /// <param name="option"> Governance option for this service (Allow, Deny, ExceptionOnly, or NotApplicable). </param>
        /// <param name="enforcement"> Initiative enforcement (Enabled or Disabled). </param>
        /// <param name="policyAction"> Enforcement mode for policy. AuditOnly, Enforce, or None. </param>
        /// <param name="initiatives"> Initiatives associated with this service. </param>
        /// <returns> A new <see cref="Models.VirtualEnclaveGovernedService"/> instance for mocking. </returns>
        public static VirtualEnclaveGovernedService VirtualEnclaveGovernedService(VirtualEnclaveGovernedServiceIdentifier serviceId = default, string serviceName = null, ServiceGovernanceOptionType? option = null, ServiceInitiativeEnforcement? enforcement = null, ServiceEnforcementPolicyAction? policyAction = null, IEnumerable<string> initiatives = null)
        {
            initiatives ??= new List<string>();

            return new VirtualEnclaveGovernedService(
                serviceId,
                serviceName,
                option,
                enforcement,
                policyAction,
                initiatives?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.EnclaveDefaultSettings"/>. </summary>
        /// <param name="keyVaultResourceId"> Key Vault Resource Id. </param>
        /// <param name="storageAccountResourceId"> Storage Account Resource Id. </param>
        /// <param name="logAnalyticsResourceIdCollection"> Log Analytics Resource Ids. </param>
        /// <param name="diagnosticDestination"> Diagnostic Destination. </param>
        /// <returns> A new <see cref="Models.EnclaveDefaultSettings"/> instance for mocking. </returns>
        public static EnclaveDefaultSettings EnclaveDefaultSettings(ResourceIdentifier keyVaultResourceId = null, ResourceIdentifier storageAccountResourceId = null, IEnumerable<ResourceIdentifier> logAnalyticsResourceIdCollection = null, VirtualEnclaveDiagnosticDestination? diagnosticDestination = null)
        {
            logAnalyticsResourceIdCollection ??= new List<ResourceIdentifier>();

            return new EnclaveDefaultSettings(keyVaultResourceId, storageAccountResourceId, logAnalyticsResourceIdCollection?.ToList(), diagnosticDestination, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualEnclavePatchProperties"/>. </summary>
        /// <param name="enclaveVirtualNetwork"> Virtual Network. </param>
        /// <param name="isBastionEnabled"> Deploy Bastion service (True or False). </param>
        /// <param name="enclaveRoleAssignments"> Enclave role assignments. </param>
        /// <param name="workloadRoleAssignments"> Workload role assignments. </param>
        /// <param name="governedServiceList"> Enclave specific policies. </param>
        /// <param name="enclaveDefaultDiagnosticDestination"> Enclave default settings. </param>
        /// <param name="maintenanceModeConfiguration"> Maintenance Mode configuration. </param>
        /// <returns> A new <see cref="Models.VirtualEnclavePatchProperties"/> instance for mocking. </returns>
        public static VirtualEnclavePatchProperties VirtualEnclavePatchProperties(EnclaveVirtualNetwork enclaveVirtualNetwork = null, bool? isBastionEnabled = null, IEnumerable<VirtualEnclaveRoleAssignmentItem> enclaveRoleAssignments = null, IEnumerable<VirtualEnclaveRoleAssignmentItem> workloadRoleAssignments = null, IEnumerable<VirtualEnclaveGovernedService> governedServiceList = null, VirtualEnclaveDiagnosticDestination? enclaveDefaultDiagnosticDestination = null, VirtualEnclaveMaintenanceModeConfigurationPatch maintenanceModeConfiguration = null)
        {
            enclaveRoleAssignments ??= new List<VirtualEnclaveRoleAssignmentItem>();
            workloadRoleAssignments ??= new List<VirtualEnclaveRoleAssignmentItem>();
            governedServiceList ??= new List<VirtualEnclaveGovernedService>();

            return new VirtualEnclavePatchProperties(
                enclaveVirtualNetwork,
                isBastionEnabled,
                enclaveRoleAssignments?.ToList(),
                workloadRoleAssignments?.ToList(),
                governedServiceList?.ToList(),
                enclaveDefaultDiagnosticDestination != null ? new EnclaveDefaultSettingsPatch(enclaveDefaultDiagnosticDestination, serializedAdditionalRawData: null) : null,
                maintenanceModeConfiguration,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualEnclaveMaintenanceModeConfigurationPatch"/>. </summary>
        /// <param name="mode"> Current mode of Maintenance Mode Configuration. </param>
        /// <param name="principals"> The user, group or service principal object affected by Maintenance Mode. </param>
        /// <param name="justification"> Justification for entering or exiting Maintenance Mode. </param>
        /// <returns> A new <see cref="Models.VirtualEnclaveMaintenanceModeConfigurationPatch"/> instance for mocking. </returns>
        public static VirtualEnclaveMaintenanceModeConfigurationPatch VirtualEnclaveMaintenanceModeConfigurationPatch(VirtualEnclaveMaintenanceMode mode = default, IEnumerable<VirtualEnclavePrincipal> principals = null, VirtualEnclaveMaintenanceJustification? justification = null)
        {
            principals ??= new List<VirtualEnclavePrincipal>();

            return new VirtualEnclaveMaintenanceModeConfigurationPatch(mode, principals?.ToList(), justification, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ApprovalCallbackContent"/>. </summary>
        /// <param name="resourceRequestAction"> Resource request action indicating action which needed to be performed upon calling approval-callback post action. </param>
        /// <param name="approvalStatus"> Approval status indicating 'Approved' or 'Rejected'. </param>
        /// <param name="approvalCallbackPayload"> Payload requested by client upon approval action. </param>
        /// <returns> A new <see cref="Models.ApprovalCallbackContent"/> instance for mocking. </returns>
        public static ApprovalCallbackContent ApprovalCallbackContent(PostActionResourceRequestAction resourceRequestAction = default, PostActionCallbackApprovalStatus approvalStatus = default, string approvalCallbackPayload = null)
        {
            return new ApprovalCallbackContent(resourceRequestAction, approvalStatus, approvalCallbackPayload, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ApprovalActionResult"/>. </summary>
        /// <param name="message"> Confirmation message indicating the result of the operation. </param>
        /// <returns> A new <see cref="Models.ApprovalActionResult"/> instance for mocking. </returns>
        public static ApprovalActionResult ApprovalActionResult(string message = null)
        {
            return new ApprovalActionResult(message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VirtualEnclaves.VirtualEnclaveCommunityData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <returns> A new <see cref="VirtualEnclaves.VirtualEnclaveCommunityData"/> instance for mocking. </returns>
        public static VirtualEnclaveCommunityData VirtualEnclaveCommunityData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, VirtualEnclaveCommunityProperties properties = null, ManagedServiceIdentity identity = null)
        {
            tags ??= new Dictionary<string, string>();

            return new VirtualEnclaveCommunityData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                identity,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualEnclaveCommunityProperties"/>. </summary>
        /// <param name="addressSpace"> Address Space. </param>
        /// <param name="dnsServers"> DNS Servers. </param>
        /// <param name="provisioningState"> Provisioning State. </param>
        /// <param name="resourceCollection"> List of resource ids created by communities. </param>
        /// <param name="managedResourceGroupName"> Managed resource group name. </param>
        /// <param name="managedOnBehalfOfMoboBrokerResources"> Managed On Behalf Of Configuration. </param>
        /// <param name="governedServiceList"> List of services governed by a community. </param>
        /// <param name="policyOverride"> Policy override setting for the community. Specifies whether to apply enclave-specific policies or disable policy enforcement. </param>
        /// <param name="communityRoleAssignments"> Community role assignments. </param>
        /// <param name="firewallSku"> SKU of the community's Azure Firewall (Basic, Standard, Premium). Standard is the default. </param>
        /// <param name="approvalSettings"> Approval requirements for various actions on the community's resources. </param>
        /// <param name="maintenanceModeConfiguration"> Maintenance Mode configuration. </param>
        /// <returns> A new <see cref="Models.VirtualEnclaveCommunityProperties"/> instance for mocking. </returns>
        public static VirtualEnclaveCommunityProperties VirtualEnclaveCommunityProperties(string addressSpace = null, IEnumerable<string> dnsServers = null, VirtualEnclaveProvisioningState? provisioningState = null, IEnumerable<ResourceIdentifier> resourceCollection = null, string managedResourceGroupName = null, IEnumerable<SubResource> managedOnBehalfOfMoboBrokerResources = null, IEnumerable<VirtualEnclaveGovernedService> governedServiceList = null, VirtualEnclaveCommunityPolicyOverride? policyOverride = null, IEnumerable<VirtualEnclaveRoleAssignmentItem> communityRoleAssignments = null, VirtualEnclaveFirewallSku? firewallSku = null, VirtualEnclaveApprovalSettings approvalSettings = null, VirtualEnclaveMaintenanceModeConfiguration maintenanceModeConfiguration = null)
        {
            dnsServers ??= new List<string>();
            resourceCollection ??= new List<ResourceIdentifier>();
            managedOnBehalfOfMoboBrokerResources ??= new List<SubResource>();
            governedServiceList ??= new List<VirtualEnclaveGovernedService>();
            communityRoleAssignments ??= new List<VirtualEnclaveRoleAssignmentItem>();

            return new VirtualEnclaveCommunityProperties(
                addressSpace,
                dnsServers?.ToList(),
                provisioningState,
                resourceCollection?.ToList(),
                managedResourceGroupName,
                managedOnBehalfOfMoboBrokerResources != null ? new ManagedOnBehalfOfConfiguration(managedOnBehalfOfMoboBrokerResources?.ToList(), serializedAdditionalRawData: null) : null,
                governedServiceList?.ToList(),
                policyOverride,
                communityRoleAssignments?.ToList(),
                firewallSku,
                approvalSettings,
                maintenanceModeConfiguration,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CheckAddressSpaceAvailabilityResult"/>. </summary>
        /// <param name="isAvailable"> Boolean representing whether the address space is available. </param>
        /// <returns> A new <see cref="Models.CheckAddressSpaceAvailabilityResult"/> instance for mocking. </returns>
        public static CheckAddressSpaceAvailabilityResult CheckAddressSpaceAvailabilityResult(bool isAvailable = default)
        {
            return new CheckAddressSpaceAvailabilityResult(isAvailable, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VirtualEnclaves.VirtualEnclaveTransitHubData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="VirtualEnclaves.VirtualEnclaveTransitHubData"/> instance for mocking. </returns>
        public static VirtualEnclaveTransitHubData VirtualEnclaveTransitHubData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, VirtualEnclaveTransitHubProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new VirtualEnclaveTransitHubData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualEnclaveTransitHubProperties"/>. </summary>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="state"> The state of the transitHub. </param>
        /// <param name="transitOption"> The TransitOption of the transitHub. </param>
        /// <param name="resourceCollection"> List of resource ids modified by transitHubs. </param>
        /// <returns> A new <see cref="Models.VirtualEnclaveTransitHubProperties"/> instance for mocking. </returns>
        public static VirtualEnclaveTransitHubProperties VirtualEnclaveTransitHubProperties(VirtualEnclaveProvisioningState? provisioningState = null, TransitHubState? state = null, VirtualEnclaveTransitOptionProperties transitOption = null, IEnumerable<ResourceIdentifier> resourceCollection = null)
        {
            resourceCollection ??= new List<ResourceIdentifier>();

            return new VirtualEnclaveTransitHubProperties(provisioningState, state, transitOption, resourceCollection?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VirtualEnclaves.VirtualEnclaveConnectionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="VirtualEnclaves.VirtualEnclaveConnectionData"/> instance for mocking. </returns>
        public static VirtualEnclaveConnectionData VirtualEnclaveConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, VirtualEnclaveConnectionProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new VirtualEnclaveConnectionData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualEnclaveConnectionProperties"/>. </summary>
        /// <param name="state"> The state of the enclaveConnection. </param>
        /// <param name="communityResourceId"> Community Resource Id. </param>
        /// <param name="sourceResourceId"> Source Resource Id. </param>
        /// <param name="sourceCidr"> Source CIDR. </param>
        /// <param name="destinationEndpointId"> Destination Endpoint Resource Id. </param>
        /// <param name="provisioningState"> Provisioning State. </param>
        /// <param name="resourceCollection"> List of resource ids modified by enclave Connections. </param>
        /// <returns> A new <see cref="Models.VirtualEnclaveConnectionProperties"/> instance for mocking. </returns>
        public static VirtualEnclaveConnectionProperties VirtualEnclaveConnectionProperties(EnclaveConnectionState? state = null, ResourceIdentifier communityResourceId = null, ResourceIdentifier sourceResourceId = null, string sourceCidr = null, ResourceIdentifier destinationEndpointId = null, VirtualEnclaveProvisioningState? provisioningState = null, IEnumerable<ResourceIdentifier> resourceCollection = null)
        {
            resourceCollection ??= new List<ResourceIdentifier>();

            return new VirtualEnclaveConnectionProperties(
                state,
                communityResourceId,
                sourceResourceId,
                sourceCidr,
                destinationEndpointId,
                provisioningState,
                resourceCollection?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VirtualEnclaves.VirtualEnclaveEndpointData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="VirtualEnclaves.VirtualEnclaveEndpointData"/> instance for mocking. </returns>
        public static VirtualEnclaveEndpointData VirtualEnclaveEndpointData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, VirtualEnclaveEndpointProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new VirtualEnclaveEndpointData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualEnclaveEndpointProperties"/>. </summary>
        /// <param name="ruleCollection"> Enclave Endpoint Rule Collection. </param>
        /// <param name="resourceCollection"> List of resource ids created by community endpoint. </param>
        /// <param name="provisioningState"> Provisioning State. </param>
        /// <returns> A new <see cref="Models.VirtualEnclaveEndpointProperties"/> instance for mocking. </returns>
        public static VirtualEnclaveEndpointProperties VirtualEnclaveEndpointProperties(IEnumerable<EnclaveEndpointDestinationRule> ruleCollection = null, IEnumerable<ResourceIdentifier> resourceCollection = null, VirtualEnclaveProvisioningState? provisioningState = null)
        {
            ruleCollection ??= new List<EnclaveEndpointDestinationRule>();
            resourceCollection ??= new List<ResourceIdentifier>();

            return new VirtualEnclaveEndpointProperties(ruleCollection?.ToList(), resourceCollection?.ToList(), provisioningState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VirtualEnclaves.VirtualEnclaveCommunityEndpointData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="VirtualEnclaves.VirtualEnclaveCommunityEndpointData"/> instance for mocking. </returns>
        public static VirtualEnclaveCommunityEndpointData VirtualEnclaveCommunityEndpointData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, VirtualEnclaveCommunityEndpointProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new VirtualEnclaveCommunityEndpointData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualEnclaveCommunityEndpointProperties"/>. </summary>
        /// <param name="ruleCollection"> Community Endpoint Rule Collection. </param>
        /// <param name="resourceCollection"> List of resource ids created by community endpoint. </param>
        /// <param name="provisioningState"> Provisioning State. </param>
        /// <returns> A new <see cref="Models.VirtualEnclaveCommunityEndpointProperties"/> instance for mocking. </returns>
        public static VirtualEnclaveCommunityEndpointProperties VirtualEnclaveCommunityEndpointProperties(IEnumerable<CommunityEndpointDestinationRule> ruleCollection = null, IEnumerable<ResourceIdentifier> resourceCollection = null, VirtualEnclaveProvisioningState? provisioningState = null)
        {
            ruleCollection ??= new List<CommunityEndpointDestinationRule>();
            resourceCollection ??= new List<ResourceIdentifier>();

            return new VirtualEnclaveCommunityEndpointProperties(ruleCollection?.ToList(), resourceCollection?.ToList(), provisioningState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="VirtualEnclaves.VirtualEnclaveApprovalData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="VirtualEnclaves.VirtualEnclaveApprovalData"/> instance for mocking. </returns>
        public static VirtualEnclaveApprovalData VirtualEnclaveApprovalData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, VirtualEnclaveApprovalProperties properties = null)
        {
            return new VirtualEnclaveApprovalData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualEnclaveApprovalProperties"/>. </summary>
        /// <param name="provisioningState"> Provisioning State. </param>
        /// <param name="parentResourceId"> Parameter for optimizing query results. </param>
        /// <param name="grandparentResourceId"> Parameter for optimizing query results. </param>
        /// <param name="approvers"> List of approvers for the approval request. </param>
        /// <param name="ticketId"> Ticket ID for the approval request. </param>
        /// <param name="createdOn"> Approval request creation time. </param>
        /// <param name="stateChangedOn"> Approval request state change time, time at which approval request state changed from pending to approved or rejected. </param>
        /// <param name="requestMetadata"> Request metadata for the approval request. </param>
        /// <returns> A new <see cref="Models.VirtualEnclaveApprovalProperties"/> instance for mocking. </returns>
        public static VirtualEnclaveApprovalProperties VirtualEnclaveApprovalProperties(VirtualEnclaveProvisioningState? provisioningState = null, ResourceIdentifier parentResourceId = null, ResourceIdentifier grandparentResourceId = null, IEnumerable<VirtualEnclaveApprover> approvers = null, string ticketId = null, DateTimeOffset? createdOn = null, DateTimeOffset? stateChangedOn = null, ApprovalRequestMetadata requestMetadata = null)
        {
            approvers ??= new List<VirtualEnclaveApprover>();

            return new VirtualEnclaveApprovalProperties(
                provisioningState,
                parentResourceId,
                grandparentResourceId,
                approvers?.ToList(),
                ticketId,
                createdOn,
                stateChangedOn,
                requestMetadata,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualEnclaveApprovalPatchProperties"/>. </summary>
        /// <param name="parentResourceId"> Parameter for optimizing query results. </param>
        /// <param name="grandparentResourceId"> Parameter for optimizing query results. </param>
        /// <param name="approvers"> List of approvers for the approval request. </param>
        /// <param name="ticketId"> Ticket ID for the approval request. </param>
        /// <param name="createdOn"> Approval request creation time. </param>
        /// <param name="stateChangedOn"> Approval request state change time, time at which approval request state changed from pending to approved or rejected. </param>
        /// <param name="requestMetadata"> Request metadata for the approval request. </param>
        /// <returns> A new <see cref="Models.VirtualEnclaveApprovalPatchProperties"/> instance for mocking. </returns>
        public static VirtualEnclaveApprovalPatchProperties VirtualEnclaveApprovalPatchProperties(ResourceIdentifier parentResourceId = null, ResourceIdentifier grandparentResourceId = null, IEnumerable<VirtualEnclaveApprover> approvers = null, string ticketId = null, DateTimeOffset? createdOn = null, DateTimeOffset? stateChangedOn = null, ApprovalRequestMetadataPatch requestMetadata = null)
        {
            approvers ??= new List<VirtualEnclaveApprover>();

            return new VirtualEnclaveApprovalPatchProperties(
                parentResourceId,
                grandparentResourceId,
                approvers?.ToList(),
                ticketId,
                createdOn,
                stateChangedOn,
                requestMetadata,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ApprovalRequestMetadataPatch"/>. </summary>
        /// <param name="resourceAction"> Resource Action of the item being approved or declined. </param>
        /// <param name="approvalCallbackRoute"> Route name for the approval callback. </param>
        /// <param name="approvalCallbackPayload"> Payload to be sent upon any action on approval request. </param>
        /// <param name="approvalStatus"> Status of the approval. Uses ApprovalStatus enum. </param>
        /// <returns> A new <see cref="Models.ApprovalRequestMetadataPatch"/> instance for mocking. </returns>
        public static ApprovalRequestMetadataPatch ApprovalRequestMetadataPatch(string resourceAction = null, string approvalCallbackRoute = null, string approvalCallbackPayload = null, VirtualEnclaveApprovalStatus? approvalStatus = null)
        {
            return new ApprovalRequestMetadataPatch(resourceAction, approvalCallbackRoute, approvalCallbackPayload, approvalStatus, serializedAdditionalRawData: null);
        }
    }
}
