// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.VirtualEnclaves.Mocking
{
    /// <summary> A class to add extension methods to ArmClient. </summary>
    public partial class MockableVirtualEnclavesArmClient : ArmResource
    {
        /// <summary> Initializes a new instance of the <see cref="MockableVirtualEnclavesArmClient"/> class for mocking. </summary>
        protected MockableVirtualEnclavesArmClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableVirtualEnclavesArmClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableVirtualEnclavesArmClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        internal MockableVirtualEnclavesArmClient(ArmClient client) : this(client, ResourceIdentifier.Root)
        {
        }

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of ApprovalResources in the ArmClient. </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <returns> An object representing collection of ApprovalResources and their operations over a ApprovalResource. </returns>
        public virtual ApprovalResourceCollection GetApprovalResources(ResourceIdentifier scope)
        {
            return new ApprovalResourceCollection(Client, scope);
        }

        /// <summary>
        /// Get a ApprovalResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ApprovalResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ApprovalResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="approvalName"> The name of the approvals resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="approvalName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="approvalName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<ApprovalResource>> GetApprovalResourceAsync(ResourceIdentifier scope, string approvalName, CancellationToken cancellationToken = default)
        {
            return await GetApprovalResources(scope).GetAsync(approvalName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a ApprovalResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ApprovalResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ApprovalResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="approvalName"> The name of the approvals resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="approvalName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="approvalName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<ApprovalResource> GetApprovalResource(ResourceIdentifier scope, string approvalName, CancellationToken cancellationToken = default)
        {
            return GetApprovalResources(scope).Get(approvalName, cancellationToken);
        }

        /// <summary>
        /// Gets an object representing a <see cref="WorkloadResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="WorkloadResource.CreateResourceIdentifier" /> to create a <see cref="WorkloadResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="WorkloadResource"/> object. </returns>
        public virtual WorkloadResource GetWorkloadResource(ResourceIdentifier id)
        {
            WorkloadResource.ValidateResourceId(id);
            return new WorkloadResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EnclaveResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EnclaveResource.CreateResourceIdentifier" /> to create an <see cref="EnclaveResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EnclaveResource"/> object. </returns>
        public virtual EnclaveResource GetEnclaveResource(ResourceIdentifier id)
        {
            EnclaveResource.ValidateResourceId(id);
            return new EnclaveResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="CommunityResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CommunityResource.CreateResourceIdentifier" /> to create a <see cref="CommunityResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="CommunityResource"/> object. </returns>
        public virtual CommunityResource GetCommunityResource(ResourceIdentifier id)
        {
            CommunityResource.ValidateResourceId(id);
            return new CommunityResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="TransitHubResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="TransitHubResource.CreateResourceIdentifier" /> to create a <see cref="TransitHubResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="TransitHubResource"/> object. </returns>
        public virtual TransitHubResource GetTransitHubResource(ResourceIdentifier id)
        {
            TransitHubResource.ValidateResourceId(id);
            return new TransitHubResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EnclaveConnectionResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EnclaveConnectionResource.CreateResourceIdentifier" /> to create an <see cref="EnclaveConnectionResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EnclaveConnectionResource"/> object. </returns>
        public virtual EnclaveConnectionResource GetEnclaveConnectionResource(ResourceIdentifier id)
        {
            EnclaveConnectionResource.ValidateResourceId(id);
            return new EnclaveConnectionResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EnclaveEndpointResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EnclaveEndpointResource.CreateResourceIdentifier" /> to create an <see cref="EnclaveEndpointResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EnclaveEndpointResource"/> object. </returns>
        public virtual EnclaveEndpointResource GetEnclaveEndpointResource(ResourceIdentifier id)
        {
            EnclaveEndpointResource.ValidateResourceId(id);
            return new EnclaveEndpointResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="CommunityEndpointResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CommunityEndpointResource.CreateResourceIdentifier" /> to create a <see cref="CommunityEndpointResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="CommunityEndpointResource"/> object. </returns>
        public virtual CommunityEndpointResource GetCommunityEndpointResource(ResourceIdentifier id)
        {
            CommunityEndpointResource.ValidateResourceId(id);
            return new CommunityEndpointResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="ApprovalResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ApprovalResource.CreateResourceIdentifier" /> to create an <see cref="ApprovalResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ApprovalResource"/> object. </returns>
        public virtual ApprovalResource GetApprovalResource(ResourceIdentifier id)
        {
            ApprovalResource.ValidateResourceId(id);
            return new ApprovalResource(Client, id);
        }
    }
}
