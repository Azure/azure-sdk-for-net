// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.VirtualEnclaves.Mocking;

namespace Azure.ResourceManager.VirtualEnclaves
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.VirtualEnclaves. </summary>
    public static partial class VirtualEnclavesExtensions
    {
        private static MockableVirtualEnclavesArmClient GetMockableVirtualEnclavesArmClient(ArmClient client)
        {
            return client.GetCachedClient(client0 => new MockableVirtualEnclavesArmClient(client0));
        }

        private static MockableVirtualEnclavesResourceGroupResource GetMockableVirtualEnclavesResourceGroupResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableVirtualEnclavesResourceGroupResource(client, resource.Id));
        }

        private static MockableVirtualEnclavesSubscriptionResource GetMockableVirtualEnclavesSubscriptionResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableVirtualEnclavesSubscriptionResource(client, resource.Id));
        }

        /// <summary>
        /// Gets a collection of VirtualEnclaveApprovalResources in the ArmClient.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesArmClient.GetVirtualEnclaveApprovals(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> An object representing collection of VirtualEnclaveApprovalResources and their operations over a VirtualEnclaveApprovalResource. </returns>
        public static VirtualEnclaveApprovalCollection GetVirtualEnclaveApprovals(this ArmClient client, ResourceIdentifier scope)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableVirtualEnclavesArmClient(client).GetVirtualEnclaveApprovals(scope);
        }

        /// <summary>
        /// Get a ApprovalResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ApprovalResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualEnclaveApprovalResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesArmClient.GetVirtualEnclaveApprovalAsync(ResourceIdentifier,string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="approvalName"> The name of the approvals resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> or <paramref name="approvalName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="approvalName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<VirtualEnclaveApprovalResource>> GetVirtualEnclaveApprovalAsync(this ArmClient client, ResourceIdentifier scope, string approvalName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(client, nameof(client));

            return await GetMockableVirtualEnclavesArmClient(client).GetVirtualEnclaveApprovalAsync(scope, approvalName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a ApprovalResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ApprovalResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualEnclaveApprovalResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesArmClient.GetVirtualEnclaveApproval(ResourceIdentifier,string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="approvalName"> The name of the approvals resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> or <paramref name="approvalName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="approvalName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<VirtualEnclaveApprovalResource> GetVirtualEnclaveApproval(this ArmClient client, ResourceIdentifier scope, string approvalName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableVirtualEnclavesArmClient(client).GetVirtualEnclaveApproval(scope, approvalName, cancellationToken);
        }

        /// <summary>
        /// Gets an object representing a <see cref="VirtualEnclaveWorkloadResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VirtualEnclaveWorkloadResource.CreateResourceIdentifier" /> to create a <see cref="VirtualEnclaveWorkloadResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesArmClient.GetVirtualEnclaveWorkloadResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="VirtualEnclaveWorkloadResource"/> object. </returns>
        public static VirtualEnclaveWorkloadResource GetVirtualEnclaveWorkloadResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableVirtualEnclavesArmClient(client).GetVirtualEnclaveWorkloadResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="VirtualEnclaveResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VirtualEnclaveResource.CreateResourceIdentifier" /> to create a <see cref="VirtualEnclaveResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesArmClient.GetVirtualEnclaveResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="VirtualEnclaveResource"/> object. </returns>
        public static VirtualEnclaveResource GetVirtualEnclaveResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableVirtualEnclavesArmClient(client).GetVirtualEnclaveResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="VirtualEnclaveCommunityResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VirtualEnclaveCommunityResource.CreateResourceIdentifier" /> to create a <see cref="VirtualEnclaveCommunityResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesArmClient.GetVirtualEnclaveCommunityResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="VirtualEnclaveCommunityResource"/> object. </returns>
        public static VirtualEnclaveCommunityResource GetVirtualEnclaveCommunityResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableVirtualEnclavesArmClient(client).GetVirtualEnclaveCommunityResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="VirtualEnclaveTransitHubResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VirtualEnclaveTransitHubResource.CreateResourceIdentifier" /> to create a <see cref="VirtualEnclaveTransitHubResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesArmClient.GetVirtualEnclaveTransitHubResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="VirtualEnclaveTransitHubResource"/> object. </returns>
        public static VirtualEnclaveTransitHubResource GetVirtualEnclaveTransitHubResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableVirtualEnclavesArmClient(client).GetVirtualEnclaveTransitHubResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="VirtualEnclaveConnectionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VirtualEnclaveConnectionResource.CreateResourceIdentifier" /> to create a <see cref="VirtualEnclaveConnectionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesArmClient.GetVirtualEnclaveConnectionResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="VirtualEnclaveConnectionResource"/> object. </returns>
        public static VirtualEnclaveConnectionResource GetVirtualEnclaveConnectionResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableVirtualEnclavesArmClient(client).GetVirtualEnclaveConnectionResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="VirtualEnclaveEndpointResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VirtualEnclaveEndpointResource.CreateResourceIdentifier" /> to create a <see cref="VirtualEnclaveEndpointResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesArmClient.GetVirtualEnclaveEndpointResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="VirtualEnclaveEndpointResource"/> object. </returns>
        public static VirtualEnclaveEndpointResource GetVirtualEnclaveEndpointResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableVirtualEnclavesArmClient(client).GetVirtualEnclaveEndpointResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="VirtualEnclaveCommunityEndpointResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VirtualEnclaveCommunityEndpointResource.CreateResourceIdentifier" /> to create a <see cref="VirtualEnclaveCommunityEndpointResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesArmClient.GetVirtualEnclaveCommunityEndpointResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="VirtualEnclaveCommunityEndpointResource"/> object. </returns>
        public static VirtualEnclaveCommunityEndpointResource GetVirtualEnclaveCommunityEndpointResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableVirtualEnclavesArmClient(client).GetVirtualEnclaveCommunityEndpointResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="VirtualEnclaveApprovalResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VirtualEnclaveApprovalResource.CreateResourceIdentifier" /> to create a <see cref="VirtualEnclaveApprovalResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesArmClient.GetVirtualEnclaveApprovalResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="VirtualEnclaveApprovalResource"/> object. </returns>
        public static VirtualEnclaveApprovalResource GetVirtualEnclaveApprovalResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableVirtualEnclavesArmClient(client).GetVirtualEnclaveApprovalResource(id);
        }

        /// <summary>
        /// Gets a collection of VirtualEnclaveResources in the ResourceGroupResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesResourceGroupResource.GetVirtualEnclaves()"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of VirtualEnclaveResources and their operations over a VirtualEnclaveResource. </returns>
        public static VirtualEnclaveCollection GetVirtualEnclaves(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableVirtualEnclavesResourceGroupResource(resourceGroupResource).GetVirtualEnclaves();
        }

        /// <summary>
        /// Get a EnclaveResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualEnclaveResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesResourceGroupResource.GetVirtualEnclaveAsync(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="virtualEnclaveName"> The name of the enclaveResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="virtualEnclaveName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="virtualEnclaveName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<VirtualEnclaveResource>> GetVirtualEnclaveAsync(this ResourceGroupResource resourceGroupResource, string virtualEnclaveName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableVirtualEnclavesResourceGroupResource(resourceGroupResource).GetVirtualEnclaveAsync(virtualEnclaveName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a EnclaveResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualEnclaveResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesResourceGroupResource.GetVirtualEnclave(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="virtualEnclaveName"> The name of the enclaveResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="virtualEnclaveName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="virtualEnclaveName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<VirtualEnclaveResource> GetVirtualEnclave(this ResourceGroupResource resourceGroupResource, string virtualEnclaveName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableVirtualEnclavesResourceGroupResource(resourceGroupResource).GetVirtualEnclave(virtualEnclaveName, cancellationToken);
        }

        /// <summary>
        /// Gets a collection of VirtualEnclaveCommunityResources in the ResourceGroupResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesResourceGroupResource.GetVirtualEnclaveCommunities()"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of VirtualEnclaveCommunityResources and their operations over a VirtualEnclaveCommunityResource. </returns>
        public static VirtualEnclaveCommunityCollection GetVirtualEnclaveCommunities(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableVirtualEnclavesResourceGroupResource(resourceGroupResource).GetVirtualEnclaveCommunities();
        }

        /// <summary>
        /// Get a CommunityResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/communities/{communityName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CommunityResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualEnclaveCommunityResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesResourceGroupResource.GetVirtualEnclaveCommunityAsync(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="communityName"> The name of the communityResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="communityName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="communityName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<VirtualEnclaveCommunityResource>> GetVirtualEnclaveCommunityAsync(this ResourceGroupResource resourceGroupResource, string communityName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableVirtualEnclavesResourceGroupResource(resourceGroupResource).GetVirtualEnclaveCommunityAsync(communityName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a CommunityResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/communities/{communityName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CommunityResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualEnclaveCommunityResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesResourceGroupResource.GetVirtualEnclaveCommunity(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="communityName"> The name of the communityResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="communityName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="communityName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<VirtualEnclaveCommunityResource> GetVirtualEnclaveCommunity(this ResourceGroupResource resourceGroupResource, string communityName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableVirtualEnclavesResourceGroupResource(resourceGroupResource).GetVirtualEnclaveCommunity(communityName, cancellationToken);
        }

        /// <summary>
        /// Gets a collection of VirtualEnclaveConnectionResources in the ResourceGroupResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesResourceGroupResource.GetVirtualEnclaveConnections()"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of VirtualEnclaveConnectionResources and their operations over a VirtualEnclaveConnectionResource. </returns>
        public static VirtualEnclaveConnectionCollection GetVirtualEnclaveConnections(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableVirtualEnclavesResourceGroupResource(resourceGroupResource).GetVirtualEnclaveConnections();
        }

        /// <summary>
        /// Get a EnclaveConnectionResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/enclaveConnections/{enclaveConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveConnectionResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualEnclaveConnectionResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesResourceGroupResource.GetVirtualEnclaveConnectionAsync(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="enclaveConnectionName"> The name of the Enclave Connection Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="enclaveConnectionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="enclaveConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<VirtualEnclaveConnectionResource>> GetVirtualEnclaveConnectionAsync(this ResourceGroupResource resourceGroupResource, string enclaveConnectionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableVirtualEnclavesResourceGroupResource(resourceGroupResource).GetVirtualEnclaveConnectionAsync(enclaveConnectionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a EnclaveConnectionResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/enclaveConnections/{enclaveConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveConnectionResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualEnclaveConnectionResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesResourceGroupResource.GetVirtualEnclaveConnection(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="enclaveConnectionName"> The name of the Enclave Connection Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="enclaveConnectionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="enclaveConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<VirtualEnclaveConnectionResource> GetVirtualEnclaveConnection(this ResourceGroupResource resourceGroupResource, string enclaveConnectionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableVirtualEnclavesResourceGroupResource(resourceGroupResource).GetVirtualEnclaveConnection(enclaveConnectionName, cancellationToken);
        }

        /// <summary>
        /// List WorkloadResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/workloads</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>WorkloadResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualEnclaveWorkloadResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetVirtualEnclaveWorkloads(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="virtualEnclaveName"> The name of the enclaveResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="virtualEnclaveName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="virtualEnclaveName"/> is null. </exception>
        /// <returns> An async collection of <see cref="VirtualEnclaveWorkloadResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<VirtualEnclaveWorkloadResource> GetVirtualEnclaveWorkloadsAsync(this SubscriptionResource subscriptionResource, string virtualEnclaveName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetVirtualEnclaveWorkloadsAsync(virtualEnclaveName, cancellationToken);
        }

        /// <summary>
        /// List WorkloadResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/workloads</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>WorkloadResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualEnclaveWorkloadResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetVirtualEnclaveWorkloads(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="virtualEnclaveName"> The name of the enclaveResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="virtualEnclaveName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="virtualEnclaveName"/> is null. </exception>
        /// <returns> A collection of <see cref="VirtualEnclaveWorkloadResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<VirtualEnclaveWorkloadResource> GetVirtualEnclaveWorkloads(this SubscriptionResource subscriptionResource, string virtualEnclaveName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetVirtualEnclaveWorkloads(virtualEnclaveName, cancellationToken);
        }

        /// <summary>
        /// List EnclaveResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualEnclaveResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetVirtualEnclaves(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> An async collection of <see cref="VirtualEnclaveResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<VirtualEnclaveResource> GetVirtualEnclavesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetVirtualEnclavesAsync(cancellationToken);
        }

        /// <summary>
        /// List EnclaveResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualEnclaveResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetVirtualEnclaves(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="VirtualEnclaveResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<VirtualEnclaveResource> GetVirtualEnclaves(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetVirtualEnclaves(cancellationToken);
        }

        /// <summary>
        /// List CommunityResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/communities</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CommunityResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualEnclaveCommunityResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetVirtualEnclaveCommunities(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> An async collection of <see cref="VirtualEnclaveCommunityResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<VirtualEnclaveCommunityResource> GetVirtualEnclaveCommunitiesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetVirtualEnclaveCommunitiesAsync(cancellationToken);
        }

        /// <summary>
        /// List CommunityResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/communities</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CommunityResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualEnclaveCommunityResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetVirtualEnclaveCommunities(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="VirtualEnclaveCommunityResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<VirtualEnclaveCommunityResource> GetVirtualEnclaveCommunities(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetVirtualEnclaveCommunities(cancellationToken);
        }

        /// <summary>
        /// List TransitHubResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/communities/{communityName}/transitHubs</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TransitHubResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualEnclaveTransitHubResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetVirtualEnclaveTransitHubs(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="communityName"> The name of the communityResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="communityName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="communityName"/> is null. </exception>
        /// <returns> An async collection of <see cref="VirtualEnclaveTransitHubResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<VirtualEnclaveTransitHubResource> GetVirtualEnclaveTransitHubsAsync(this SubscriptionResource subscriptionResource, string communityName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetVirtualEnclaveTransitHubsAsync(communityName, cancellationToken);
        }

        /// <summary>
        /// List TransitHubResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/communities/{communityName}/transitHubs</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TransitHubResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualEnclaveTransitHubResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetVirtualEnclaveTransitHubs(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="communityName"> The name of the communityResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="communityName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="communityName"/> is null. </exception>
        /// <returns> A collection of <see cref="VirtualEnclaveTransitHubResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<VirtualEnclaveTransitHubResource> GetVirtualEnclaveTransitHubs(this SubscriptionResource subscriptionResource, string communityName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetVirtualEnclaveTransitHubs(communityName, cancellationToken);
        }

        /// <summary>
        /// List EnclaveConnectionResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/enclaveConnections</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveConnectionResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualEnclaveConnectionResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetVirtualEnclaveConnections(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> An async collection of <see cref="VirtualEnclaveConnectionResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<VirtualEnclaveConnectionResource> GetVirtualEnclaveConnectionsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetVirtualEnclaveConnectionsAsync(cancellationToken);
        }

        /// <summary>
        /// List EnclaveConnectionResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/enclaveConnections</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveConnectionResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualEnclaveConnectionResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetVirtualEnclaveConnections(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="VirtualEnclaveConnectionResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<VirtualEnclaveConnectionResource> GetVirtualEnclaveConnections(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetVirtualEnclaveConnections(cancellationToken);
        }

        /// <summary>
        /// List EnclaveEndpointResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveEndpointResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualEnclaveEndpointResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetVirtualEnclaveEndpoints(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="virtualEnclaveName"> The name of the enclaveResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="virtualEnclaveName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="virtualEnclaveName"/> is null. </exception>
        /// <returns> An async collection of <see cref="VirtualEnclaveEndpointResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<VirtualEnclaveEndpointResource> GetVirtualEnclaveEndpointsAsync(this SubscriptionResource subscriptionResource, string virtualEnclaveName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetVirtualEnclaveEndpointsAsync(virtualEnclaveName, cancellationToken);
        }

        /// <summary>
        /// List EnclaveEndpointResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveEndpointResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualEnclaveEndpointResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetVirtualEnclaveEndpoints(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="virtualEnclaveName"> The name of the enclaveResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="virtualEnclaveName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="virtualEnclaveName"/> is null. </exception>
        /// <returns> A collection of <see cref="VirtualEnclaveEndpointResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<VirtualEnclaveEndpointResource> GetVirtualEnclaveEndpoints(this SubscriptionResource subscriptionResource, string virtualEnclaveName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetVirtualEnclaveEndpoints(virtualEnclaveName, cancellationToken);
        }

        /// <summary>
        /// List CommunityEndpointResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/communities/{communityName}/communityEndpoints</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CommunityEndpointResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualEnclaveCommunityEndpointResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetVirtualEnclaveCommunityEndpoints(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="communityName"> The name of the communityResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="communityName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="communityName"/> is null. </exception>
        /// <returns> An async collection of <see cref="VirtualEnclaveCommunityEndpointResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<VirtualEnclaveCommunityEndpointResource> GetVirtualEnclaveCommunityEndpointsAsync(this SubscriptionResource subscriptionResource, string communityName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetVirtualEnclaveCommunityEndpointsAsync(communityName, cancellationToken);
        }

        /// <summary>
        /// List CommunityEndpointResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/communities/{communityName}/communityEndpoints</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CommunityEndpointResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualEnclaveCommunityEndpointResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetVirtualEnclaveCommunityEndpoints(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="communityName"> The name of the communityResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="communityName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="communityName"/> is null. </exception>
        /// <returns> A collection of <see cref="VirtualEnclaveCommunityEndpointResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<VirtualEnclaveCommunityEndpointResource> GetVirtualEnclaveCommunityEndpoints(this SubscriptionResource subscriptionResource, string communityName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetVirtualEnclaveCommunityEndpoints(communityName, cancellationToken);
        }
    }
}
