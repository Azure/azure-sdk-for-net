// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.VirtualEnclaves.Mocking;

namespace Azure.ResourceManager.VirtualEnclaves
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.VirtualEnclaves. </summary>
    public static partial class VirtualEnclavesExtensions
    {
        private static MockableVirtualEnclavesArmClient GetMockableVirtualEnclavesArmClient(ArmClient client)
        {
            return client.GetCachedClient(client0 => new MockableVirtualEnclavesArmClient(client0));
        }

        private static MockableVirtualEnclavesResourceGroupResource GetMockableVirtualEnclavesResourceGroupResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableVirtualEnclavesResourceGroupResource(client, resource.Id));
        }

        private static MockableVirtualEnclavesSubscriptionResource GetMockableVirtualEnclavesSubscriptionResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableVirtualEnclavesSubscriptionResource(client, resource.Id));
        }

        /// <summary>
        /// Gets a collection of ApprovalResources in the ArmClient.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesArmClient.GetApprovalResources(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> An object representing collection of ApprovalResources and their operations over a ApprovalResource. </returns>
        public static ApprovalResourceCollection GetApprovalResources(this ArmClient client, ResourceIdentifier scope)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableVirtualEnclavesArmClient(client).GetApprovalResources(scope);
        }

        /// <summary>
        /// Get a ApprovalResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ApprovalResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ApprovalResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesArmClient.GetApprovalResourceAsync(ResourceIdentifier,string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="approvalName"> The name of the approvals resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> or <paramref name="approvalName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="approvalName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<ApprovalResource>> GetApprovalResourceAsync(this ArmClient client, ResourceIdentifier scope, string approvalName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(client, nameof(client));

            return await GetMockableVirtualEnclavesArmClient(client).GetApprovalResourceAsync(scope, approvalName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a ApprovalResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ApprovalResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ApprovalResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesArmClient.GetApprovalResource(ResourceIdentifier,string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="approvalName"> The name of the approvals resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> or <paramref name="approvalName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="approvalName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<ApprovalResource> GetApprovalResource(this ArmClient client, ResourceIdentifier scope, string approvalName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableVirtualEnclavesArmClient(client).GetApprovalResource(scope, approvalName, cancellationToken);
        }

        /// <summary>
        /// Gets an object representing a <see cref="WorkloadResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="WorkloadResource.CreateResourceIdentifier" /> to create a <see cref="WorkloadResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesArmClient.GetWorkloadResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="WorkloadResource"/> object. </returns>
        public static WorkloadResource GetWorkloadResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableVirtualEnclavesArmClient(client).GetWorkloadResource(id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EnclaveResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EnclaveResource.CreateResourceIdentifier" /> to create an <see cref="EnclaveResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesArmClient.GetEnclaveResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="EnclaveResource"/> object. </returns>
        public static EnclaveResource GetEnclaveResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableVirtualEnclavesArmClient(client).GetEnclaveResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="CommunityResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CommunityResource.CreateResourceIdentifier" /> to create a <see cref="CommunityResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesArmClient.GetCommunityResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="CommunityResource"/> object. </returns>
        public static CommunityResource GetCommunityResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableVirtualEnclavesArmClient(client).GetCommunityResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="TransitHubResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="TransitHubResource.CreateResourceIdentifier" /> to create a <see cref="TransitHubResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesArmClient.GetTransitHubResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="TransitHubResource"/> object. </returns>
        public static TransitHubResource GetTransitHubResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableVirtualEnclavesArmClient(client).GetTransitHubResource(id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EnclaveConnectionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EnclaveConnectionResource.CreateResourceIdentifier" /> to create an <see cref="EnclaveConnectionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesArmClient.GetEnclaveConnectionResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="EnclaveConnectionResource"/> object. </returns>
        public static EnclaveConnectionResource GetEnclaveConnectionResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableVirtualEnclavesArmClient(client).GetEnclaveConnectionResource(id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EnclaveEndpointResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EnclaveEndpointResource.CreateResourceIdentifier" /> to create an <see cref="EnclaveEndpointResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesArmClient.GetEnclaveEndpointResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="EnclaveEndpointResource"/> object. </returns>
        public static EnclaveEndpointResource GetEnclaveEndpointResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableVirtualEnclavesArmClient(client).GetEnclaveEndpointResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="CommunityEndpointResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CommunityEndpointResource.CreateResourceIdentifier" /> to create a <see cref="CommunityEndpointResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesArmClient.GetCommunityEndpointResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="CommunityEndpointResource"/> object. </returns>
        public static CommunityEndpointResource GetCommunityEndpointResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableVirtualEnclavesArmClient(client).GetCommunityEndpointResource(id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="ApprovalResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ApprovalResource.CreateResourceIdentifier" /> to create an <see cref="ApprovalResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesArmClient.GetApprovalResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="ApprovalResource"/> object. </returns>
        public static ApprovalResource GetApprovalResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableVirtualEnclavesArmClient(client).GetApprovalResource(id);
        }

        /// <summary>
        /// Gets a collection of EnclaveResources in the ResourceGroupResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesResourceGroupResource.GetEnclaveResources()"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of EnclaveResources and their operations over a EnclaveResource. </returns>
        public static EnclaveResourceCollection GetEnclaveResources(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableVirtualEnclavesResourceGroupResource(resourceGroupResource).GetEnclaveResources();
        }

        /// <summary>
        /// Get a EnclaveResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EnclaveResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesResourceGroupResource.GetEnclaveResourceAsync(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="virtualEnclaveName"> The name of the enclaveResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="virtualEnclaveName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="virtualEnclaveName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<EnclaveResource>> GetEnclaveResourceAsync(this ResourceGroupResource resourceGroupResource, string virtualEnclaveName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableVirtualEnclavesResourceGroupResource(resourceGroupResource).GetEnclaveResourceAsync(virtualEnclaveName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a EnclaveResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EnclaveResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesResourceGroupResource.GetEnclaveResource(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="virtualEnclaveName"> The name of the enclaveResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="virtualEnclaveName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="virtualEnclaveName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<EnclaveResource> GetEnclaveResource(this ResourceGroupResource resourceGroupResource, string virtualEnclaveName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableVirtualEnclavesResourceGroupResource(resourceGroupResource).GetEnclaveResource(virtualEnclaveName, cancellationToken);
        }

        /// <summary>
        /// Gets a collection of CommunityResources in the ResourceGroupResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesResourceGroupResource.GetCommunityResources()"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of CommunityResources and their operations over a CommunityResource. </returns>
        public static CommunityResourceCollection GetCommunityResources(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableVirtualEnclavesResourceGroupResource(resourceGroupResource).GetCommunityResources();
        }

        /// <summary>
        /// Get a CommunityResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/communities/{communityName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CommunityResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CommunityResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesResourceGroupResource.GetCommunityResourceAsync(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="communityName"> The name of the communityResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="communityName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="communityName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<CommunityResource>> GetCommunityResourceAsync(this ResourceGroupResource resourceGroupResource, string communityName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableVirtualEnclavesResourceGroupResource(resourceGroupResource).GetCommunityResourceAsync(communityName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a CommunityResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/communities/{communityName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CommunityResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CommunityResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesResourceGroupResource.GetCommunityResource(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="communityName"> The name of the communityResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="communityName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="communityName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<CommunityResource> GetCommunityResource(this ResourceGroupResource resourceGroupResource, string communityName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableVirtualEnclavesResourceGroupResource(resourceGroupResource).GetCommunityResource(communityName, cancellationToken);
        }

        /// <summary>
        /// Gets a collection of EnclaveConnectionResources in the ResourceGroupResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesResourceGroupResource.GetEnclaveConnectionResources()"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of EnclaveConnectionResources and their operations over a EnclaveConnectionResource. </returns>
        public static EnclaveConnectionResourceCollection GetEnclaveConnectionResources(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableVirtualEnclavesResourceGroupResource(resourceGroupResource).GetEnclaveConnectionResources();
        }

        /// <summary>
        /// Get a EnclaveConnectionResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/enclaveConnections/{enclaveConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveConnectionResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EnclaveConnectionResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesResourceGroupResource.GetEnclaveConnectionResourceAsync(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="enclaveConnectionName"> The name of the Enclave Connection Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="enclaveConnectionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="enclaveConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<EnclaveConnectionResource>> GetEnclaveConnectionResourceAsync(this ResourceGroupResource resourceGroupResource, string enclaveConnectionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableVirtualEnclavesResourceGroupResource(resourceGroupResource).GetEnclaveConnectionResourceAsync(enclaveConnectionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a EnclaveConnectionResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/enclaveConnections/{enclaveConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveConnectionResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EnclaveConnectionResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesResourceGroupResource.GetEnclaveConnectionResource(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="enclaveConnectionName"> The name of the Enclave Connection Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="enclaveConnectionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="enclaveConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<EnclaveConnectionResource> GetEnclaveConnectionResource(this ResourceGroupResource resourceGroupResource, string enclaveConnectionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableVirtualEnclavesResourceGroupResource(resourceGroupResource).GetEnclaveConnectionResource(enclaveConnectionName, cancellationToken);
        }

        /// <summary>
        /// List WorkloadResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/workloads</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>WorkloadResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="WorkloadResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetWorkloadResources(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="virtualEnclaveName"> The name of the enclaveResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="virtualEnclaveName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="virtualEnclaveName"/> is null. </exception>
        /// <returns> An async collection of <see cref="WorkloadResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<WorkloadResource> GetWorkloadResourcesAsync(this SubscriptionResource subscriptionResource, string virtualEnclaveName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetWorkloadResourcesAsync(virtualEnclaveName, cancellationToken);
        }

        /// <summary>
        /// List WorkloadResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/workloads</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>WorkloadResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="WorkloadResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetWorkloadResources(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="virtualEnclaveName"> The name of the enclaveResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="virtualEnclaveName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="virtualEnclaveName"/> is null. </exception>
        /// <returns> A collection of <see cref="WorkloadResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<WorkloadResource> GetWorkloadResources(this SubscriptionResource subscriptionResource, string virtualEnclaveName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetWorkloadResources(virtualEnclaveName, cancellationToken);
        }

        /// <summary>
        /// List EnclaveResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EnclaveResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetEnclaveResources(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> An async collection of <see cref="EnclaveResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<EnclaveResource> GetEnclaveResourcesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetEnclaveResourcesAsync(cancellationToken);
        }

        /// <summary>
        /// List EnclaveResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EnclaveResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetEnclaveResources(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="EnclaveResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<EnclaveResource> GetEnclaveResources(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetEnclaveResources(cancellationToken);
        }

        /// <summary>
        /// List CommunityResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/communities</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CommunityResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CommunityResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetCommunityResources(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> An async collection of <see cref="CommunityResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<CommunityResource> GetCommunityResourcesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetCommunityResourcesAsync(cancellationToken);
        }

        /// <summary>
        /// List CommunityResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/communities</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CommunityResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CommunityResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetCommunityResources(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="CommunityResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<CommunityResource> GetCommunityResources(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetCommunityResources(cancellationToken);
        }

        /// <summary>
        /// List TransitHubResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/communities/{communityName}/transitHubs</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TransitHubResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="TransitHubResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetTransitHubResources(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="communityName"> The name of the communityResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="communityName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="communityName"/> is null. </exception>
        /// <returns> An async collection of <see cref="TransitHubResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<TransitHubResource> GetTransitHubResourcesAsync(this SubscriptionResource subscriptionResource, string communityName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetTransitHubResourcesAsync(communityName, cancellationToken);
        }

        /// <summary>
        /// List TransitHubResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/communities/{communityName}/transitHubs</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TransitHubResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="TransitHubResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetTransitHubResources(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="communityName"> The name of the communityResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="communityName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="communityName"/> is null. </exception>
        /// <returns> A collection of <see cref="TransitHubResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<TransitHubResource> GetTransitHubResources(this SubscriptionResource subscriptionResource, string communityName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetTransitHubResources(communityName, cancellationToken);
        }

        /// <summary>
        /// List EnclaveConnectionResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/enclaveConnections</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveConnectionResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EnclaveConnectionResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetEnclaveConnectionResources(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> An async collection of <see cref="EnclaveConnectionResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<EnclaveConnectionResource> GetEnclaveConnectionResourcesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetEnclaveConnectionResourcesAsync(cancellationToken);
        }

        /// <summary>
        /// List EnclaveConnectionResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/enclaveConnections</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveConnectionResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EnclaveConnectionResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetEnclaveConnectionResources(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="EnclaveConnectionResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<EnclaveConnectionResource> GetEnclaveConnectionResources(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetEnclaveConnectionResources(cancellationToken);
        }

        /// <summary>
        /// List EnclaveEndpointResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveEndpointResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EnclaveEndpointResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetEnclaveEndpointResources(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="virtualEnclaveName"> The name of the enclaveResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="virtualEnclaveName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="virtualEnclaveName"/> is null. </exception>
        /// <returns> An async collection of <see cref="EnclaveEndpointResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<EnclaveEndpointResource> GetEnclaveEndpointResourcesAsync(this SubscriptionResource subscriptionResource, string virtualEnclaveName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetEnclaveEndpointResourcesAsync(virtualEnclaveName, cancellationToken);
        }

        /// <summary>
        /// List EnclaveEndpointResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveEndpointResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EnclaveEndpointResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetEnclaveEndpointResources(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="virtualEnclaveName"> The name of the enclaveResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="virtualEnclaveName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="virtualEnclaveName"/> is null. </exception>
        /// <returns> A collection of <see cref="EnclaveEndpointResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<EnclaveEndpointResource> GetEnclaveEndpointResources(this SubscriptionResource subscriptionResource, string virtualEnclaveName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetEnclaveEndpointResources(virtualEnclaveName, cancellationToken);
        }

        /// <summary>
        /// List CommunityEndpointResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/communities/{communityName}/communityEndpoints</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CommunityEndpointResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CommunityEndpointResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetCommunityEndpointResources(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="communityName"> The name of the communityResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="communityName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="communityName"/> is null. </exception>
        /// <returns> An async collection of <see cref="CommunityEndpointResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<CommunityEndpointResource> GetCommunityEndpointResourcesAsync(this SubscriptionResource subscriptionResource, string communityName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetCommunityEndpointResourcesAsync(communityName, cancellationToken);
        }

        /// <summary>
        /// List CommunityEndpointResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/communities/{communityName}/communityEndpoints</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CommunityEndpointResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CommunityEndpointResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableVirtualEnclavesSubscriptionResource.GetCommunityEndpointResources(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="communityName"> The name of the communityResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="communityName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="communityName"/> is null. </exception>
        /// <returns> A collection of <see cref="CommunityEndpointResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<CommunityEndpointResource> GetCommunityEndpointResources(this SubscriptionResource subscriptionResource, string communityName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableVirtualEnclavesSubscriptionResource(subscriptionResource).GetCommunityEndpointResources(communityName, cancellationToken);
        }
    }
}
