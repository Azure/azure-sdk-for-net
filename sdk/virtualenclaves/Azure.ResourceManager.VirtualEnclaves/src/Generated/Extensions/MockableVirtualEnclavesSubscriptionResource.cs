// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.VirtualEnclaves.Mocking
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    public partial class MockableVirtualEnclavesSubscriptionResource : ArmResource
    {
        private ClientDiagnostics _workloadResourceWorkloadClientDiagnostics;
        private WorkloadRestOperations _workloadResourceWorkloadRestClient;
        private ClientDiagnostics _enclaveResourceVirtualEnclaveClientDiagnostics;
        private VirtualEnclaveRestOperations _enclaveResourceVirtualEnclaveRestClient;
        private ClientDiagnostics _communityResourceCommunityClientDiagnostics;
        private CommunityRestOperations _communityResourceCommunityRestClient;
        private ClientDiagnostics _transitHubResourceTransitHubClientDiagnostics;
        private TransitHubRestOperations _transitHubResourceTransitHubRestClient;
        private ClientDiagnostics _enclaveConnectionResourceEnclaveConnectionClientDiagnostics;
        private EnclaveConnectionRestOperations _enclaveConnectionResourceEnclaveConnectionRestClient;
        private ClientDiagnostics _enclaveEndpointResourceEnclaveEndpointsClientDiagnostics;
        private EnclaveEndpointsRestOperations _enclaveEndpointResourceEnclaveEndpointsRestClient;
        private ClientDiagnostics _communityEndpointResourceCommunityEndpointsClientDiagnostics;
        private CommunityEndpointsRestOperations _communityEndpointResourceCommunityEndpointsRestClient;

        /// <summary> Initializes a new instance of the <see cref="MockableVirtualEnclavesSubscriptionResource"/> class for mocking. </summary>
        protected MockableVirtualEnclavesSubscriptionResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableVirtualEnclavesSubscriptionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableVirtualEnclavesSubscriptionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics WorkloadResourceWorkloadClientDiagnostics => _workloadResourceWorkloadClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.VirtualEnclaves", WorkloadResource.ResourceType.Namespace, Diagnostics);
        private WorkloadRestOperations WorkloadResourceWorkloadRestClient => _workloadResourceWorkloadRestClient ??= new WorkloadRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(WorkloadResource.ResourceType));
        private ClientDiagnostics EnclaveResourceVirtualEnclaveClientDiagnostics => _enclaveResourceVirtualEnclaveClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.VirtualEnclaves", EnclaveResource.ResourceType.Namespace, Diagnostics);
        private VirtualEnclaveRestOperations EnclaveResourceVirtualEnclaveRestClient => _enclaveResourceVirtualEnclaveRestClient ??= new VirtualEnclaveRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(EnclaveResource.ResourceType));
        private ClientDiagnostics CommunityResourceCommunityClientDiagnostics => _communityResourceCommunityClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.VirtualEnclaves", CommunityResource.ResourceType.Namespace, Diagnostics);
        private CommunityRestOperations CommunityResourceCommunityRestClient => _communityResourceCommunityRestClient ??= new CommunityRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(CommunityResource.ResourceType));
        private ClientDiagnostics TransitHubResourceTransitHubClientDiagnostics => _transitHubResourceTransitHubClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.VirtualEnclaves", TransitHubResource.ResourceType.Namespace, Diagnostics);
        private TransitHubRestOperations TransitHubResourceTransitHubRestClient => _transitHubResourceTransitHubRestClient ??= new TransitHubRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(TransitHubResource.ResourceType));
        private ClientDiagnostics EnclaveConnectionResourceEnclaveConnectionClientDiagnostics => _enclaveConnectionResourceEnclaveConnectionClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.VirtualEnclaves", EnclaveConnectionResource.ResourceType.Namespace, Diagnostics);
        private EnclaveConnectionRestOperations EnclaveConnectionResourceEnclaveConnectionRestClient => _enclaveConnectionResourceEnclaveConnectionRestClient ??= new EnclaveConnectionRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(EnclaveConnectionResource.ResourceType));
        private ClientDiagnostics EnclaveEndpointResourceEnclaveEndpointsClientDiagnostics => _enclaveEndpointResourceEnclaveEndpointsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.VirtualEnclaves", EnclaveEndpointResource.ResourceType.Namespace, Diagnostics);
        private EnclaveEndpointsRestOperations EnclaveEndpointResourceEnclaveEndpointsRestClient => _enclaveEndpointResourceEnclaveEndpointsRestClient ??= new EnclaveEndpointsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(EnclaveEndpointResource.ResourceType));
        private ClientDiagnostics CommunityEndpointResourceCommunityEndpointsClientDiagnostics => _communityEndpointResourceCommunityEndpointsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.VirtualEnclaves", CommunityEndpointResource.ResourceType.Namespace, Diagnostics);
        private CommunityEndpointsRestOperations CommunityEndpointResourceCommunityEndpointsRestClient => _communityEndpointResourceCommunityEndpointsRestClient ??= new CommunityEndpointsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(CommunityEndpointResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// List WorkloadResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/workloads</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>WorkloadResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="WorkloadResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="virtualEnclaveName"> The name of the enclaveResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="virtualEnclaveName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualEnclaveName"/> is null. </exception>
        /// <returns> An async collection of <see cref="WorkloadResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<WorkloadResource> GetWorkloadResourcesAsync(string virtualEnclaveName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(virtualEnclaveName, nameof(virtualEnclaveName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => WorkloadResourceWorkloadRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId, virtualEnclaveName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => WorkloadResourceWorkloadRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId, virtualEnclaveName);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new WorkloadResource(Client, WorkloadResourceData.DeserializeWorkloadResourceData(e)), WorkloadResourceWorkloadClientDiagnostics, Pipeline, "MockableVirtualEnclavesSubscriptionResource.GetWorkloadResources", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List WorkloadResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/workloads</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>WorkloadResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="WorkloadResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="virtualEnclaveName"> The name of the enclaveResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="virtualEnclaveName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualEnclaveName"/> is null. </exception>
        /// <returns> A collection of <see cref="WorkloadResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<WorkloadResource> GetWorkloadResources(string virtualEnclaveName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(virtualEnclaveName, nameof(virtualEnclaveName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => WorkloadResourceWorkloadRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId, virtualEnclaveName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => WorkloadResourceWorkloadRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId, virtualEnclaveName);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new WorkloadResource(Client, WorkloadResourceData.DeserializeWorkloadResourceData(e)), WorkloadResourceWorkloadClientDiagnostics, Pipeline, "MockableVirtualEnclavesSubscriptionResource.GetWorkloadResources", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List EnclaveResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EnclaveResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EnclaveResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EnclaveResource> GetEnclaveResourcesAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => EnclaveResourceVirtualEnclaveRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => EnclaveResourceVirtualEnclaveRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EnclaveResource(Client, EnclaveResourceData.DeserializeEnclaveResourceData(e)), EnclaveResourceVirtualEnclaveClientDiagnostics, Pipeline, "MockableVirtualEnclavesSubscriptionResource.GetEnclaveResources", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List EnclaveResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EnclaveResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EnclaveResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EnclaveResource> GetEnclaveResources(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => EnclaveResourceVirtualEnclaveRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => EnclaveResourceVirtualEnclaveRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EnclaveResource(Client, EnclaveResourceData.DeserializeEnclaveResourceData(e)), EnclaveResourceVirtualEnclaveClientDiagnostics, Pipeline, "MockableVirtualEnclavesSubscriptionResource.GetEnclaveResources", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List CommunityResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/communities</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CommunityResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CommunityResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CommunityResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CommunityResource> GetCommunityResourcesAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CommunityResourceCommunityRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CommunityResourceCommunityRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new CommunityResource(Client, CommunityResourceData.DeserializeCommunityResourceData(e)), CommunityResourceCommunityClientDiagnostics, Pipeline, "MockableVirtualEnclavesSubscriptionResource.GetCommunityResources", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List CommunityResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/communities</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CommunityResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CommunityResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CommunityResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CommunityResource> GetCommunityResources(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CommunityResourceCommunityRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CommunityResourceCommunityRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new CommunityResource(Client, CommunityResourceData.DeserializeCommunityResourceData(e)), CommunityResourceCommunityClientDiagnostics, Pipeline, "MockableVirtualEnclavesSubscriptionResource.GetCommunityResources", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List TransitHubResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/communities/{communityName}/transitHubs</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TransitHubResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="TransitHubResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="communityName"> The name of the communityResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="communityName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="communityName"/> is null. </exception>
        /// <returns> An async collection of <see cref="TransitHubResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<TransitHubResource> GetTransitHubResourcesAsync(string communityName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(communityName, nameof(communityName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => TransitHubResourceTransitHubRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId, communityName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => TransitHubResourceTransitHubRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId, communityName);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new TransitHubResource(Client, TransitHubResourceData.DeserializeTransitHubResourceData(e)), TransitHubResourceTransitHubClientDiagnostics, Pipeline, "MockableVirtualEnclavesSubscriptionResource.GetTransitHubResources", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List TransitHubResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/communities/{communityName}/transitHubs</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TransitHubResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="TransitHubResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="communityName"> The name of the communityResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="communityName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="communityName"/> is null. </exception>
        /// <returns> A collection of <see cref="TransitHubResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<TransitHubResource> GetTransitHubResources(string communityName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(communityName, nameof(communityName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => TransitHubResourceTransitHubRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId, communityName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => TransitHubResourceTransitHubRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId, communityName);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new TransitHubResource(Client, TransitHubResourceData.DeserializeTransitHubResourceData(e)), TransitHubResourceTransitHubClientDiagnostics, Pipeline, "MockableVirtualEnclavesSubscriptionResource.GetTransitHubResources", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List EnclaveConnectionResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/enclaveConnections</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveConnectionResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EnclaveConnectionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EnclaveConnectionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EnclaveConnectionResource> GetEnclaveConnectionResourcesAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => EnclaveConnectionResourceEnclaveConnectionRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => EnclaveConnectionResourceEnclaveConnectionRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EnclaveConnectionResource(Client, EnclaveConnectionResourceData.DeserializeEnclaveConnectionResourceData(e)), EnclaveConnectionResourceEnclaveConnectionClientDiagnostics, Pipeline, "MockableVirtualEnclavesSubscriptionResource.GetEnclaveConnectionResources", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List EnclaveConnectionResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/enclaveConnections</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveConnectionResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EnclaveConnectionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EnclaveConnectionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EnclaveConnectionResource> GetEnclaveConnectionResources(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => EnclaveConnectionResourceEnclaveConnectionRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => EnclaveConnectionResourceEnclaveConnectionRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EnclaveConnectionResource(Client, EnclaveConnectionResourceData.DeserializeEnclaveConnectionResourceData(e)), EnclaveConnectionResourceEnclaveConnectionClientDiagnostics, Pipeline, "MockableVirtualEnclavesSubscriptionResource.GetEnclaveConnectionResources", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List EnclaveEndpointResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveEndpointResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EnclaveEndpointResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="virtualEnclaveName"> The name of the enclaveResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="virtualEnclaveName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualEnclaveName"/> is null. </exception>
        /// <returns> An async collection of <see cref="EnclaveEndpointResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EnclaveEndpointResource> GetEnclaveEndpointResourcesAsync(string virtualEnclaveName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(virtualEnclaveName, nameof(virtualEnclaveName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => EnclaveEndpointResourceEnclaveEndpointsRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId, virtualEnclaveName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => EnclaveEndpointResourceEnclaveEndpointsRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId, virtualEnclaveName);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EnclaveEndpointResource(Client, EnclaveEndpointResourceData.DeserializeEnclaveEndpointResourceData(e)), EnclaveEndpointResourceEnclaveEndpointsClientDiagnostics, Pipeline, "MockableVirtualEnclavesSubscriptionResource.GetEnclaveEndpointResources", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List EnclaveEndpointResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveEndpointResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EnclaveEndpointResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="virtualEnclaveName"> The name of the enclaveResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="virtualEnclaveName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualEnclaveName"/> is null. </exception>
        /// <returns> A collection of <see cref="EnclaveEndpointResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EnclaveEndpointResource> GetEnclaveEndpointResources(string virtualEnclaveName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(virtualEnclaveName, nameof(virtualEnclaveName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => EnclaveEndpointResourceEnclaveEndpointsRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId, virtualEnclaveName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => EnclaveEndpointResourceEnclaveEndpointsRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId, virtualEnclaveName);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EnclaveEndpointResource(Client, EnclaveEndpointResourceData.DeserializeEnclaveEndpointResourceData(e)), EnclaveEndpointResourceEnclaveEndpointsClientDiagnostics, Pipeline, "MockableVirtualEnclavesSubscriptionResource.GetEnclaveEndpointResources", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List CommunityEndpointResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/communities/{communityName}/communityEndpoints</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CommunityEndpointResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CommunityEndpointResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="communityName"> The name of the communityResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="communityName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="communityName"/> is null. </exception>
        /// <returns> An async collection of <see cref="CommunityEndpointResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CommunityEndpointResource> GetCommunityEndpointResourcesAsync(string communityName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(communityName, nameof(communityName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CommunityEndpointResourceCommunityEndpointsRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId, communityName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CommunityEndpointResourceCommunityEndpointsRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId, communityName);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new CommunityEndpointResource(Client, CommunityEndpointResourceData.DeserializeCommunityEndpointResourceData(e)), CommunityEndpointResourceCommunityEndpointsClientDiagnostics, Pipeline, "MockableVirtualEnclavesSubscriptionResource.GetCommunityEndpointResources", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List CommunityEndpointResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Mission/communities/{communityName}/communityEndpoints</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CommunityEndpointResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CommunityEndpointResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="communityName"> The name of the communityResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="communityName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="communityName"/> is null. </exception>
        /// <returns> A collection of <see cref="CommunityEndpointResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CommunityEndpointResource> GetCommunityEndpointResources(string communityName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(communityName, nameof(communityName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CommunityEndpointResourceCommunityEndpointsRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId, communityName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CommunityEndpointResourceCommunityEndpointsRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId, communityName);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new CommunityEndpointResource(Client, CommunityEndpointResourceData.DeserializeCommunityEndpointResourceData(e)), CommunityEndpointResourceCommunityEndpointsClientDiagnostics, Pipeline, "MockableVirtualEnclavesSubscriptionResource.GetCommunityEndpointResources", "value", "nextLink", cancellationToken);
        }
    }
}
