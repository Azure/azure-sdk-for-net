// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.VirtualEnclaves.Mocking
{
    /// <summary> A class to add extension methods to ResourceGroupResource. </summary>
    public partial class MockableVirtualEnclavesResourceGroupResource : ArmResource
    {
        /// <summary> Initializes a new instance of the <see cref="MockableVirtualEnclavesResourceGroupResource"/> class for mocking. </summary>
        protected MockableVirtualEnclavesResourceGroupResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableVirtualEnclavesResourceGroupResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableVirtualEnclavesResourceGroupResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of EnclaveResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of EnclaveResources and their operations over a EnclaveResource. </returns>
        public virtual EnclaveResourceCollection GetEnclaveResources()
        {
            return GetCachedClient(client => new EnclaveResourceCollection(client, Id));
        }

        /// <summary>
        /// Get a EnclaveResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EnclaveResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="virtualEnclaveName"> The name of the enclaveResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualEnclaveName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="virtualEnclaveName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<EnclaveResource>> GetEnclaveResourceAsync(string virtualEnclaveName, CancellationToken cancellationToken = default)
        {
            return await GetEnclaveResources().GetAsync(virtualEnclaveName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a EnclaveResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EnclaveResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="virtualEnclaveName"> The name of the enclaveResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualEnclaveName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="virtualEnclaveName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<EnclaveResource> GetEnclaveResource(string virtualEnclaveName, CancellationToken cancellationToken = default)
        {
            return GetEnclaveResources().Get(virtualEnclaveName, cancellationToken);
        }

        /// <summary> Gets a collection of CommunityResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of CommunityResources and their operations over a CommunityResource. </returns>
        public virtual CommunityResourceCollection GetCommunityResources()
        {
            return GetCachedClient(client => new CommunityResourceCollection(client, Id));
        }

        /// <summary>
        /// Get a CommunityResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/communities/{communityName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CommunityResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CommunityResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="communityName"> The name of the communityResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="communityName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="communityName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<CommunityResource>> GetCommunityResourceAsync(string communityName, CancellationToken cancellationToken = default)
        {
            return await GetCommunityResources().GetAsync(communityName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a CommunityResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/communities/{communityName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CommunityResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CommunityResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="communityName"> The name of the communityResource Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="communityName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="communityName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<CommunityResource> GetCommunityResource(string communityName, CancellationToken cancellationToken = default)
        {
            return GetCommunityResources().Get(communityName, cancellationToken);
        }

        /// <summary> Gets a collection of EnclaveConnectionResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of EnclaveConnectionResources and their operations over a EnclaveConnectionResource. </returns>
        public virtual EnclaveConnectionResourceCollection GetEnclaveConnectionResources()
        {
            return GetCachedClient(client => new EnclaveConnectionResourceCollection(client, Id));
        }

        /// <summary>
        /// Get a EnclaveConnectionResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/enclaveConnections/{enclaveConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveConnectionResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EnclaveConnectionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="enclaveConnectionName"> The name of the Enclave Connection Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="enclaveConnectionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="enclaveConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<EnclaveConnectionResource>> GetEnclaveConnectionResourceAsync(string enclaveConnectionName, CancellationToken cancellationToken = default)
        {
            return await GetEnclaveConnectionResources().GetAsync(enclaveConnectionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a EnclaveConnectionResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/enclaveConnections/{enclaveConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnclaveConnectionResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EnclaveConnectionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="enclaveConnectionName"> The name of the Enclave Connection Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="enclaveConnectionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="enclaveConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<EnclaveConnectionResource> GetEnclaveConnectionResource(string enclaveConnectionName, CancellationToken cancellationToken = default)
        {
            return GetEnclaveConnectionResources().Get(enclaveConnectionName, cancellationToken);
        }
    }
}
