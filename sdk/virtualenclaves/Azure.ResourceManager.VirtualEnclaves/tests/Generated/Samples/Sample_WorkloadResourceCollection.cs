// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.VirtualEnclaves.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.VirtualEnclaves.Samples
{
    public partial class Sample_WorkloadResourceCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_WorkloadCreateOrUpdate()
        {
            // Generated from example definition: 2025-05-01-preview/Workload_CreateOrUpdate.json
            // this example is just showing the usage of "WorkloadResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnclaveResource created on azure
            // for more information of creating EnclaveResource, please refer to the document of EnclaveResource
            string subscriptionId = "CA1CB369-DD26-4DB2-9D43-9AFEF0F22093";
            string resourceGroupName = "rgopenapi";
            string virtualEnclaveName = "TestMyEnclave";
            ResourceIdentifier enclaveResourceId = EnclaveResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, virtualEnclaveName);
            EnclaveResource enclaveResource = client.GetEnclaveResource(enclaveResourceId);

            // get the collection of this WorkloadResource
            WorkloadResourceCollection collection = enclaveResource.GetWorkloadResources();

            // invoke the operation
            string workloadName = "TestMyWorkload";
            WorkloadResourceData data = new WorkloadResourceData(new AzureLocation("westcentralus"))
            {
                Properties = new WorkloadProperties
                {
                    ResourceGroupCollection = { },
                },
                Tags =
{
["TestKey"] = "TestValue"
},
            };
            ArmOperation<WorkloadResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, workloadName, data);
            WorkloadResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WorkloadResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_WorkloadGet()
        {
            // Generated from example definition: 2025-05-01-preview/Workload_Get.json
            // this example is just showing the usage of "WorkloadResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnclaveResource created on azure
            // for more information of creating EnclaveResource, please refer to the document of EnclaveResource
            string subscriptionId = "CA1CB369-DD26-4DB2-9D43-9AFEF0F22093";
            string resourceGroupName = "rgopenapi";
            string virtualEnclaveName = "TestMyEnclave";
            ResourceIdentifier enclaveResourceId = EnclaveResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, virtualEnclaveName);
            EnclaveResource enclaveResource = client.GetEnclaveResource(enclaveResourceId);

            // get the collection of this WorkloadResource
            WorkloadResourceCollection collection = enclaveResource.GetWorkloadResources();

            // invoke the operation
            string workloadName = "TestMyWorkload";
            WorkloadResource result = await collection.GetAsync(workloadName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WorkloadResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_WorkloadListByEnclaveResource()
        {
            // Generated from example definition: 2025-05-01-preview/Workload_ListByEnclaveResource.json
            // this example is just showing the usage of "WorkloadResource_ListByEnclaveResource" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnclaveResource created on azure
            // for more information of creating EnclaveResource, please refer to the document of EnclaveResource
            string subscriptionId = "CA1CB369-DD26-4DB2-9D43-9AFEF0F22093";
            string resourceGroupName = "rgopenapi";
            string virtualEnclaveName = "TestMyEnclave";
            ResourceIdentifier enclaveResourceId = EnclaveResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, virtualEnclaveName);
            EnclaveResource enclaveResource = client.GetEnclaveResource(enclaveResourceId);

            // get the collection of this WorkloadResource
            WorkloadResourceCollection collection = enclaveResource.GetWorkloadResources();

            // invoke the operation and iterate over the result
            await foreach (WorkloadResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                WorkloadResourceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_WorkloadGet()
        {
            // Generated from example definition: 2025-05-01-preview/Workload_Get.json
            // this example is just showing the usage of "WorkloadResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnclaveResource created on azure
            // for more information of creating EnclaveResource, please refer to the document of EnclaveResource
            string subscriptionId = "CA1CB369-DD26-4DB2-9D43-9AFEF0F22093";
            string resourceGroupName = "rgopenapi";
            string virtualEnclaveName = "TestMyEnclave";
            ResourceIdentifier enclaveResourceId = EnclaveResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, virtualEnclaveName);
            EnclaveResource enclaveResource = client.GetEnclaveResource(enclaveResourceId);

            // get the collection of this WorkloadResource
            WorkloadResourceCollection collection = enclaveResource.GetWorkloadResources();

            // invoke the operation
            string workloadName = "TestMyWorkload";
            bool result = await collection.ExistsAsync(workloadName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_WorkloadGet()
        {
            // Generated from example definition: 2025-05-01-preview/Workload_Get.json
            // this example is just showing the usage of "WorkloadResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnclaveResource created on azure
            // for more information of creating EnclaveResource, please refer to the document of EnclaveResource
            string subscriptionId = "CA1CB369-DD26-4DB2-9D43-9AFEF0F22093";
            string resourceGroupName = "rgopenapi";
            string virtualEnclaveName = "TestMyEnclave";
            ResourceIdentifier enclaveResourceId = EnclaveResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, virtualEnclaveName);
            EnclaveResource enclaveResource = client.GetEnclaveResource(enclaveResourceId);

            // get the collection of this WorkloadResource
            WorkloadResourceCollection collection = enclaveResource.GetWorkloadResources();

            // invoke the operation
            string workloadName = "TestMyWorkload";
            NullableResponse<WorkloadResource> response = await collection.GetIfExistsAsync(workloadName);
            WorkloadResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                WorkloadResourceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
