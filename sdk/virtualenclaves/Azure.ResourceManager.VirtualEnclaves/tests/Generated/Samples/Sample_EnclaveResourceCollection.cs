// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.VirtualEnclaves.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.VirtualEnclaves.Samples
{
    public partial class Sample_EnclaveResourceCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_VirtualEnclaveCreateOrUpdate()
        {
            // Generated from example definition: 2025-05-01-preview/VirtualEnclave_CreateOrUpdate.json
            // this example is just showing the usage of "EnclaveResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EnclaveResource
            EnclaveResourceCollection collection = resourceGroupResource.GetEnclaveResources();

            // invoke the operation
            string virtualEnclaveName = "TestMyEnclave";
            EnclaveResourceData data = new EnclaveResourceData(new AzureLocation("westcentralus"))
            {
                Properties = new VirtualEnclaveProperties(new EnclaveVirtualNetworkModel
                {
                    NetworkSize = "small",
                    CustomCidrRange = "10.0.0.0/24",
                    SubnetConfigurations = { new SubnetConfiguration("test", 26) },
                    AllowSubnetCommunication = true,
                }, new ResourceIdentifier("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/microsoft.mission/communities/TestMyCommunity"))
                {
                    BastionEnabled = true,
                    EnclaveRoleAssignments = {new RoleAssignmentItem("b24988ac-6180-42a0-ab88-20f7382dd24c")
{
Principals = {new Principal("355a6bb0-abc0-4cba-000d-12a345b678c9", PrincipalType.User), new Principal("355a6bb0-abc0-4cba-000d-12a345b678c0", PrincipalType.User)},
}, new RoleAssignmentItem("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9")
{
Principals = {new Principal("355a6bb0-abc0-4cba-000d-12a345b678c9", PrincipalType.User)},
}},
                    WorkloadRoleAssignments = {new RoleAssignmentItem("d73bb868-a0df-4d4d-bd69-98a00b01fccb")
{
Principals = {new Principal("01234567-89ab-ef01-2345-0123456789ab", PrincipalType.Group)},
}, new RoleAssignmentItem("fb879df8-f326-4884-b1cf-06f3ad86be52")
{
Principals = {new Principal("01234567-89ab-ef01-2345-0123456789ab", PrincipalType.Group)},
}},
                    EnclaveDefaultSettings = new EnclaveDefaultSettingsModel
                    {
                        DiagnosticDestination = DiagnosticDestination.Both,
                    },
                    MaintenanceModeConfiguration = new MaintenanceModeConfigurationModel(MaintenanceModeConfigurationModelMode.Off)
                    {
                        Principals = { new Principal("355a6bb0-abc0-4cba-000d-12a345b678c9", PrincipalType.User) },
                        Justification = MaintenanceModeConfigurationModelJustification.Off,
                    },
                },
                Identity = new ManagedServiceIdentity("SystemAssigned,UserAssigned")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1")] = new UserAssignedIdentity()
},
                },
                Tags =
{
["Tag1"] = "Value1"
},
            };
            ArmOperation<EnclaveResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, virtualEnclaveName, data);
            EnclaveResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EnclaveResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_VirtualEnclaveGet()
        {
            // Generated from example definition: 2025-05-01-preview/VirtualEnclave_Get.json
            // this example is just showing the usage of "EnclaveResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "CA1CB369-DD26-4DB2-9D43-9AFEF0F22093";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EnclaveResource
            EnclaveResourceCollection collection = resourceGroupResource.GetEnclaveResources();

            // invoke the operation
            string virtualEnclaveName = "TestMyEnclave";
            EnclaveResource result = await collection.GetAsync(virtualEnclaveName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EnclaveResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_VirtualEnclaveListByResourceGroup()
        {
            // Generated from example definition: 2025-05-01-preview/VirtualEnclave_ListByResourceGroup.json
            // this example is just showing the usage of "EnclaveResource_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "CA1CB369-DD26-4DB2-9D43-9AFEF0F22093";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EnclaveResource
            EnclaveResourceCollection collection = resourceGroupResource.GetEnclaveResources();

            // invoke the operation and iterate over the result
            await foreach (EnclaveResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EnclaveResourceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_VirtualEnclaveGet()
        {
            // Generated from example definition: 2025-05-01-preview/VirtualEnclave_Get.json
            // this example is just showing the usage of "EnclaveResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "CA1CB369-DD26-4DB2-9D43-9AFEF0F22093";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EnclaveResource
            EnclaveResourceCollection collection = resourceGroupResource.GetEnclaveResources();

            // invoke the operation
            string virtualEnclaveName = "TestMyEnclave";
            bool result = await collection.ExistsAsync(virtualEnclaveName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_VirtualEnclaveGet()
        {
            // Generated from example definition: 2025-05-01-preview/VirtualEnclave_Get.json
            // this example is just showing the usage of "EnclaveResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "CA1CB369-DD26-4DB2-9D43-9AFEF0F22093";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this EnclaveResource
            EnclaveResourceCollection collection = resourceGroupResource.GetEnclaveResources();

            // invoke the operation
            string virtualEnclaveName = "TestMyEnclave";
            NullableResponse<EnclaveResource> response = await collection.GetIfExistsAsync(virtualEnclaveName);
            EnclaveResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EnclaveResourceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
