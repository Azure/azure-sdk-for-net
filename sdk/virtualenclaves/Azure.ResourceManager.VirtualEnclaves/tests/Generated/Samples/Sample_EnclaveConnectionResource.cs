// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.VirtualEnclaves.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.VirtualEnclaves.Samples
{
    public partial class Sample_EnclaveConnectionResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_EnclaveConnectionGet()
        {
            // Generated from example definition: 2025-05-01-preview/EnclaveConnection_Get.json
            // this example is just showing the usage of "EnclaveConnectionResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnclaveConnectionResource created on azure
            // for more information of creating EnclaveConnectionResource, please refer to the document of EnclaveConnectionResource
            string subscriptionId = "73CEECEF-2C30-488E-946F-D20F414D99BA";
            string resourceGroupName = "rgopenapi";
            string enclaveConnectionName = "TestMyEnclaveConnection";
            ResourceIdentifier enclaveConnectionResourceId = EnclaveConnectionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, enclaveConnectionName);
            EnclaveConnectionResource enclaveConnectionResource = client.GetEnclaveConnectionResource(enclaveConnectionResourceId);

            // invoke the operation
            EnclaveConnectionResource result = await enclaveConnectionResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EnclaveConnectionResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_EnclaveConnectionDelete()
        {
            // Generated from example definition: 2025-05-01-preview/EnclaveConnection_Delete.json
            // this example is just showing the usage of "EnclaveConnectionResource_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnclaveConnectionResource created on azure
            // for more information of creating EnclaveConnectionResource, please refer to the document of EnclaveConnectionResource
            string subscriptionId = "73CEECEF-2C30-488E-946F-D20F414D99BA";
            string resourceGroupName = "rgopenapi";
            string enclaveConnectionName = "TestMyEnclaveConnection";
            ResourceIdentifier enclaveConnectionResourceId = EnclaveConnectionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, enclaveConnectionName);
            EnclaveConnectionResource enclaveConnectionResource = client.GetEnclaveConnectionResource(enclaveConnectionResourceId);

            // invoke the operation
            await enclaveConnectionResource.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_EnclaveConnectionUpdate()
        {
            // Generated from example definition: 2025-05-01-preview/EnclaveConnection_Update.json
            // this example is just showing the usage of "EnclaveConnectionResource_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnclaveConnectionResource created on azure
            // for more information of creating EnclaveConnectionResource, please refer to the document of EnclaveConnectionResource
            string subscriptionId = "73CEECEF-2C30-488E-946F-D20F414D99BA";
            string resourceGroupName = "rgopenapi";
            string enclaveConnectionName = "TestMyEnclaveConnection";
            ResourceIdentifier enclaveConnectionResourceId = EnclaveConnectionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, enclaveConnectionName);
            EnclaveConnectionResource enclaveConnectionResource = client.GetEnclaveConnectionResource(enclaveConnectionResourceId);

            // invoke the operation
            EnclaveConnectionResourcePatch patch = new EnclaveConnectionResourcePatch
            {
                EnclaveConnectionPatchSourceCidr = "10.0.0.0/24",
                Tags =
{
["sampletag"] = "samplevalue"
},
            };
            ArmOperation<EnclaveConnectionResource> lro = await enclaveConnectionResource.UpdateAsync(WaitUntil.Completed, patch);
            EnclaveConnectionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EnclaveConnectionResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task HandleApprovalCreation_EnclaveConnectionHandleApprovalCreation()
        {
            // Generated from example definition: 2025-05-01-preview/EnclaveConnection_HandleApprovalCreation.json
            // this example is just showing the usage of "EnclaveConnection_HandleApprovalCreation" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnclaveConnectionResource created on azure
            // for more information of creating EnclaveConnectionResource, please refer to the document of EnclaveConnectionResource
            string subscriptionId = "73CEECEF-2C30-488E-946F-D20F414D99BA";
            string resourceGroupName = "rgopenapi";
            string enclaveConnectionName = "TestMyEnclaveConnection";
            ResourceIdentifier enclaveConnectionResourceId = EnclaveConnectionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, enclaveConnectionName);
            EnclaveConnectionResource enclaveConnectionResource = client.GetEnclaveConnectionResource(enclaveConnectionResourceId);

            // invoke the operation
            ApprovalCallbackRequest body = new ApprovalCallbackRequest(ApprovalCallbackRequestResourceRequestAction.Create, ApprovalCallbackRequestApprovalStatus.Approved)
            {
                ApprovalCallbackPayload = "{\n  \"key1\": \"value1\",\n  \"key2\": \"value2\"\n}",
            };
            ArmOperation<ApprovalActionResponse> lro = await enclaveConnectionResource.HandleApprovalCreationAsync(WaitUntil.Completed, body);
            ApprovalActionResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task HandleApprovalDeletion_EnclaveConnectionHandleApprovalDeletion()
        {
            // Generated from example definition: 2025-05-01-preview/EnclaveConnection_HandleApprovalDeletion.json
            // this example is just showing the usage of "EnclaveConnection_HandleApprovalDeletion" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnclaveConnectionResource created on azure
            // for more information of creating EnclaveConnectionResource, please refer to the document of EnclaveConnectionResource
            string subscriptionId = "73CEECEF-2C30-488E-946F-D20F414D99BA";
            string resourceGroupName = "rgopenapi";
            string enclaveConnectionName = "TestMyEnclaveConnection";
            ResourceIdentifier enclaveConnectionResourceId = EnclaveConnectionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, enclaveConnectionName);
            EnclaveConnectionResource enclaveConnectionResource = client.GetEnclaveConnectionResource(enclaveConnectionResourceId);

            // invoke the operation
            VirtualEnclavesApprovalDeletionCallbackRequestContent body = new VirtualEnclavesApprovalDeletionCallbackRequestContent(VirtualEnclavesApprovalDeletionCallbackRequestContentResourceRequestAction.Create);
            ArmOperation<ApprovalActionResponse> lro = await enclaveConnectionResource.HandleApprovalDeletionAsync(WaitUntil.Completed, body);
            ApprovalActionResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
