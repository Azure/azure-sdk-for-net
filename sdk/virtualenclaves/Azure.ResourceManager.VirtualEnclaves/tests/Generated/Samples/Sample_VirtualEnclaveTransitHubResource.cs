// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.VirtualEnclaves.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.VirtualEnclaves.Samples
{
    public partial class Sample_VirtualEnclaveTransitHubResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_TransitHubGet()
        {
            // Generated from example definition: 2025-05-01-preview/TransitHub_Get.json
            // this example is just showing the usage of "TransitHubResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualEnclaveTransitHubResource created on azure
            // for more information of creating VirtualEnclaveTransitHubResource, please refer to the document of VirtualEnclaveTransitHubResource
            string subscriptionId = "CA1CB369-DD26-4DB2-9D43-9AFEF0F22093";
            string resourceGroupName = "rgopenapi";
            string communityName = "TestMyCommunity";
            string transitHubName = "TestThName";
            ResourceIdentifier virtualEnclaveTransitHubResourceId = VirtualEnclaveTransitHubResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, communityName, transitHubName);
            VirtualEnclaveTransitHubResource virtualEnclaveTransitHub = client.GetVirtualEnclaveTransitHubResource(virtualEnclaveTransitHubResourceId);

            // invoke the operation
            VirtualEnclaveTransitHubResource result = await virtualEnclaveTransitHub.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VirtualEnclaveTransitHubData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_TransitHubDelete()
        {
            // Generated from example definition: 2025-05-01-preview/TransitHub_Delete.json
            // this example is just showing the usage of "TransitHubResource_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualEnclaveTransitHubResource created on azure
            // for more information of creating VirtualEnclaveTransitHubResource, please refer to the document of VirtualEnclaveTransitHubResource
            string subscriptionId = "CA1CB369-DD26-4DB2-9D43-9AFEF0F22093";
            string resourceGroupName = "rgopenapi";
            string communityName = "TestMyCommunity";
            string transitHubName = "TestThName";
            ResourceIdentifier virtualEnclaveTransitHubResourceId = VirtualEnclaveTransitHubResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, communityName, transitHubName);
            VirtualEnclaveTransitHubResource virtualEnclaveTransitHub = client.GetVirtualEnclaveTransitHubResource(virtualEnclaveTransitHubResourceId);

            // invoke the operation
            await virtualEnclaveTransitHub.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_TransitHubUpdate()
        {
            // Generated from example definition: 2025-05-01-preview/TransitHub_Update.json
            // this example is just showing the usage of "TransitHubResource_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualEnclaveTransitHubResource created on azure
            // for more information of creating VirtualEnclaveTransitHubResource, please refer to the document of VirtualEnclaveTransitHubResource
            string subscriptionId = "CA1CB369-DD26-4DB2-9D43-9AFEF0F22093";
            string resourceGroupName = "rgopenapi";
            string communityName = "TestMyCommunity";
            string transitHubName = "TestThName";
            ResourceIdentifier virtualEnclaveTransitHubResourceId = VirtualEnclaveTransitHubResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, communityName, transitHubName);
            VirtualEnclaveTransitHubResource virtualEnclaveTransitHub = client.GetVirtualEnclaveTransitHubResource(virtualEnclaveTransitHubResourceId);

            // invoke the operation
            VirtualEnclaveTransitHubPatch patch = new VirtualEnclaveTransitHubPatch
            {
                Properties = new VirtualEnclaveTransitHubPatchProperties
                {
                    State = TransitHubState.PendingApproval,
                    TransitOption = new VirtualEnclaveTransitOptionProperties
                    {
                        Type = TransitOptionType.ExpressRoute,
                        Params = new TransitOptionParams
                        {
                            ScaleUnits = 1L,
                        },
                    },
                },
                Tags =
{
["key4278"] = "hjoxhwofxcshowbnafdrrzq"
},
            };
            ArmOperation<VirtualEnclaveTransitHubResource> lro = await virtualEnclaveTransitHub.UpdateAsync(WaitUntil.Completed, patch);
            VirtualEnclaveTransitHubResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VirtualEnclaveTransitHubData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
