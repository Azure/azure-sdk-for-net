// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.VirtualEnclaves.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.VirtualEnclaves.Samples
{
    public partial class Sample_EnclaveResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_VirtualEnclaveGet()
        {
            // Generated from example definition: 2025-05-01-preview/VirtualEnclave_Get.json
            // this example is just showing the usage of "EnclaveResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnclaveResource created on azure
            // for more information of creating EnclaveResource, please refer to the document of EnclaveResource
            string subscriptionId = "CA1CB369-DD26-4DB2-9D43-9AFEF0F22093";
            string resourceGroupName = "rgopenapi";
            string virtualEnclaveName = "TestMyEnclave";
            ResourceIdentifier enclaveResourceId = EnclaveResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, virtualEnclaveName);
            EnclaveResource enclaveResource = client.GetEnclaveResource(enclaveResourceId);

            // invoke the operation
            EnclaveResource result = await enclaveResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EnclaveResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_VirtualEnclaveDelete()
        {
            // Generated from example definition: 2025-05-01-preview/VirtualEnclave_Delete.json
            // this example is just showing the usage of "EnclaveResource_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnclaveResource created on azure
            // for more information of creating EnclaveResource, please refer to the document of EnclaveResource
            string subscriptionId = "CA1CB369-DD26-4DB2-9D43-9AFEF0F22093";
            string resourceGroupName = "rgopenapi";
            string virtualEnclaveName = "TestMyEnclave";
            ResourceIdentifier enclaveResourceId = EnclaveResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, virtualEnclaveName);
            EnclaveResource enclaveResource = client.GetEnclaveResource(enclaveResourceId);

            // invoke the operation
            await enclaveResource.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_VirtualEnclaveUpdate()
        {
            // Generated from example definition: 2025-05-01-preview/VirtualEnclave_Update.json
            // this example is just showing the usage of "EnclaveResource_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnclaveResource created on azure
            // for more information of creating EnclaveResource, please refer to the document of EnclaveResource
            string subscriptionId = "CA1CB369-DD26-4DB2-9D43-9AFEF0F22093";
            string resourceGroupName = "rgopenapi";
            string virtualEnclaveName = "TestMyEnclave";
            ResourceIdentifier enclaveResourceId = EnclaveResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, virtualEnclaveName);
            EnclaveResource enclaveResource = client.GetEnclaveResource(enclaveResourceId);

            // invoke the operation
            EnclaveResourcePatch patch = new EnclaveResourcePatch
            {
                Properties = new VirtualEnclavePatchProperties(new EnclaveVirtualNetworkModel
                {
                    NetworkSize = "small",
                    CustomCidrRange = "10.0.0.0/24",
                    SubnetConfigurations = { new SubnetConfiguration("test", 26) },
                    AllowSubnetCommunication = true,
                })
                {
                    BastionEnabled = true,
                    EnclaveRoleAssignments = {new RoleAssignmentItem("b24988ac-6180-42a0-ab88-20f7382dd24c")
{
Principals = {new Principal("355a6bb0-abc0-4cba-000d-12a345b678c9", PrincipalType.User), new Principal("355a6bb0-abc0-4cba-000d-12a345b678c0", PrincipalType.User)},
}, new RoleAssignmentItem("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9")
{
Principals = {new Principal("355a6bb0-abc0-4cba-000d-12a345b678c9", PrincipalType.User)},
}},
                    WorkloadRoleAssignments = {new RoleAssignmentItem("d73bb868-a0df-4d4d-bd69-98a00b01fccb")
{
Principals = {new Principal("01234567-89ab-ef01-2345-0123456789ab", PrincipalType.Group)},
}, new RoleAssignmentItem("fb879df8-f326-4884-b1cf-06f3ad86be52")
{
Principals = {new Principal("01234567-89ab-ef01-2345-0123456789ab", PrincipalType.Group)},
}},
                    EnclaveDefaultDiagnosticDestination = DiagnosticDestination.Both,
                    MaintenanceModeConfiguration = new MaintenanceModeConfigurationPatchModel(MaintenanceModeConfigurationModelMode.Off)
                    {
                        Principals = { new Principal("355a6bb0-abc0-4cba-000d-12a345b678c9", PrincipalType.User) },
                        Justification = MaintenanceModeConfigurationModelJustification.Off,
                    },
                },
                Tags =
{
["Tag1"] = "Value1"
},
            };
            ArmOperation<EnclaveResource> lro = await enclaveResource.UpdateAsync(WaitUntil.Completed, patch);
            EnclaveResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EnclaveResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task HandleApprovalCreation_VirtualEnclaveHandleApprovalCreation()
        {
            // Generated from example definition: 2025-05-01-preview/VirtualEnclave_HandleApprovalCreation.json
            // this example is just showing the usage of "VirtualEnclave_HandleApprovalCreation" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnclaveResource created on azure
            // for more information of creating EnclaveResource, please refer to the document of EnclaveResource
            string subscriptionId = "c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c";
            string resourceGroupName = "rgopenapi";
            string virtualEnclaveName = "TestMyEnclave";
            ResourceIdentifier enclaveResourceId = EnclaveResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, virtualEnclaveName);
            EnclaveResource enclaveResource = client.GetEnclaveResource(enclaveResourceId);

            // invoke the operation
            ApprovalCallbackRequest body = new ApprovalCallbackRequest(ApprovalCallbackRequestResourceRequestAction.Create, ApprovalCallbackRequestApprovalStatus.Approved)
            {
                ApprovalCallbackPayload = "{\n  \"key1\": \"value1\",\n  \"key2\": \"value2\"\n}",
            };
            ArmOperation<ApprovalActionResponse> lro = await enclaveResource.HandleApprovalCreationAsync(WaitUntil.Completed, body);
            ApprovalActionResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task HandleApprovalDeletion_VirtualEnclaveHandleApprovalDeletion()
        {
            // Generated from example definition: 2025-05-01-preview/VirtualEnclave_HandleApprovalDeletion.json
            // this example is just showing the usage of "VirtualEnclave_HandleApprovalDeletion" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnclaveResource created on azure
            // for more information of creating EnclaveResource, please refer to the document of EnclaveResource
            string subscriptionId = "c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c";
            string resourceGroupName = "rgopenapi";
            string virtualEnclaveName = "TestMyEnclave";
            ResourceIdentifier enclaveResourceId = EnclaveResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, virtualEnclaveName);
            EnclaveResource enclaveResource = client.GetEnclaveResource(enclaveResourceId);

            // invoke the operation
            VirtualEnclavesApprovalDeletionCallbackRequestContent body = new VirtualEnclavesApprovalDeletionCallbackRequestContent(VirtualEnclavesApprovalDeletionCallbackRequestContentResourceRequestAction.Create);
            ArmOperation<ApprovalActionResponse> lro = await enclaveResource.HandleApprovalDeletionAsync(WaitUntil.Completed, body);
            ApprovalActionResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
