// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.VirtualEnclaves.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.VirtualEnclaves.Samples
{
    public partial class Sample_CommunityEndpointResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_CommunityEndpointsGet()
        {
            // Generated from example definition: 2025-05-01-preview/CommunityEndpoints_Get.json
            // this example is just showing the usage of "CommunityEndpointResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CommunityEndpointResource created on azure
            // for more information of creating CommunityEndpointResource, please refer to the document of CommunityEndpointResource
            string subscriptionId = "73CEECEF-2C30-488E-946F-D20F414D99BA";
            string resourceGroupName = "rgopenapi";
            string communityName = "TestMyCommunity";
            string communityEndpointName = "TestMyCommunityEndpoint";
            ResourceIdentifier communityEndpointResourceId = CommunityEndpointResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, communityName, communityEndpointName);
            CommunityEndpointResource communityEndpointResource = client.GetCommunityEndpointResource(communityEndpointResourceId);

            // invoke the operation
            CommunityEndpointResource result = await communityEndpointResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CommunityEndpointResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_CommunityEndpointsDelete()
        {
            // Generated from example definition: 2025-05-01-preview/CommunityEndpoints_Delete.json
            // this example is just showing the usage of "CommunityEndpointResource_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CommunityEndpointResource created on azure
            // for more information of creating CommunityEndpointResource, please refer to the document of CommunityEndpointResource
            string subscriptionId = "73CEECEF-2C30-488E-946F-D20F414D99BA";
            string resourceGroupName = "rgopenapi";
            string communityName = "TestMyCommunity";
            string communityEndpointName = "TestMyCommunityEndpoint";
            ResourceIdentifier communityEndpointResourceId = CommunityEndpointResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, communityName, communityEndpointName);
            CommunityEndpointResource communityEndpointResource = client.GetCommunityEndpointResource(communityEndpointResourceId);

            // invoke the operation
            await communityEndpointResource.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_CommunityEndpointsUpdate()
        {
            // Generated from example definition: 2025-05-01-preview/CommunityEndpoints_Update.json
            // this example is just showing the usage of "CommunityEndpointResource_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CommunityEndpointResource created on azure
            // for more information of creating CommunityEndpointResource, please refer to the document of CommunityEndpointResource
            string subscriptionId = "73CEECEF-2C30-488E-946F-D20F414D99BA";
            string resourceGroupName = "rgopenapi";
            string communityName = "TestMyCommunity";
            string communityEndpointName = "TestMyCommunityEndpoint";
            ResourceIdentifier communityEndpointResourceId = CommunityEndpointResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, communityName, communityEndpointName);
            CommunityEndpointResource communityEndpointResource = client.GetCommunityEndpointResource(communityEndpointResourceId);

            // invoke the operation
            CommunityEndpointResourcePatch patch = new CommunityEndpointResourcePatch
            {
                CommunityEndpointPatchRuleCollection = {new CommunityEndpointDestinationRule
{
DestinationType = DestinationType.FQDN,
Protocols = {CommunityEndpointProtocol.TCP},
TransitHubResourceId = new ResourceIdentifier("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/testrg/providers/Microsoft.Mission/communities/TestMyCommunity/transitHubs/TestThName"),
Destination = "foo.example.com",
Ports = "443",
}},
                Tags =
{
["sampletag"] = "samplevalue"
},
            };
            ArmOperation<CommunityEndpointResource> lro = await communityEndpointResource.UpdateAsync(WaitUntil.Completed, patch);
            CommunityEndpointResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CommunityEndpointResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task HandleApprovalCreation_CommunityEndpointsHandleApprovalCreation()
        {
            // Generated from example definition: 2025-05-01-preview/CommunityEndpoints_HandleApprovalCreation.json
            // this example is just showing the usage of "CommunityEndpoints_HandleApprovalCreation" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CommunityEndpointResource created on azure
            // for more information of creating CommunityEndpointResource, please refer to the document of CommunityEndpointResource
            string subscriptionId = "73CEECEF-2C30-488E-946F-D20F414D99BA";
            string resourceGroupName = "rgopenapi";
            string communityName = "TestMyCommunity";
            string communityEndpointName = "TestMyCommunityEndpoint";
            ResourceIdentifier communityEndpointResourceId = CommunityEndpointResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, communityName, communityEndpointName);
            CommunityEndpointResource communityEndpointResource = client.GetCommunityEndpointResource(communityEndpointResourceId);

            // invoke the operation
            ApprovalCallbackRequest body = new ApprovalCallbackRequest(ApprovalCallbackRequestResourceRequestAction.Create, ApprovalCallbackRequestApprovalStatus.Approved);
            ArmOperation<ApprovalActionResponse> lro = await communityEndpointResource.HandleApprovalCreationAsync(WaitUntil.Completed, body);
            ApprovalActionResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task HandleApprovalDeletion_CommunityEndpointsHandleApprovalDeletion()
        {
            // Generated from example definition: 2025-05-01-preview/CommunityEndpoints_HandleApprovalDeletion.json
            // this example is just showing the usage of "CommunityEndpoints_HandleApprovalDeletion" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CommunityEndpointResource created on azure
            // for more information of creating CommunityEndpointResource, please refer to the document of CommunityEndpointResource
            string subscriptionId = "73CEECEF-2C30-488E-946F-D20F414D99BA";
            string resourceGroupName = "rgopenapi";
            string communityName = "TestMyCommunity";
            string communityEndpointName = "TestMyCommunityEndpoint";
            ResourceIdentifier communityEndpointResourceId = CommunityEndpointResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, communityName, communityEndpointName);
            CommunityEndpointResource communityEndpointResource = client.GetCommunityEndpointResource(communityEndpointResourceId);

            // invoke the operation
            VirtualEnclavesApprovalDeletionCallbackRequestContent body = new VirtualEnclavesApprovalDeletionCallbackRequestContent(VirtualEnclavesApprovalDeletionCallbackRequestContentResourceRequestAction.Create);
            ArmOperation<ApprovalActionResponse> lro = await communityEndpointResource.HandleApprovalDeletionAsync(WaitUntil.Completed, body);
            ApprovalActionResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
