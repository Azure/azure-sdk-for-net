// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.VirtualEnclaves.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.VirtualEnclaves.Samples
{
    public partial class Sample_CommunityResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_CommunityGet()
        {
            // Generated from example definition: 2025-05-01-preview/Community_Get.json
            // this example is just showing the usage of "CommunityResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CommunityResource created on azure
            // for more information of creating CommunityResource, please refer to the document of CommunityResource
            string subscriptionId = "CA1CB369-DD26-4DB2-9D43-9AFEF0F22093";
            string resourceGroupName = "rgopenapi";
            string communityName = "TestMyCommunity";
            ResourceIdentifier communityResourceId = CommunityResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, communityName);
            CommunityResource communityResource = client.GetCommunityResource(communityResourceId);

            // invoke the operation
            CommunityResource result = await communityResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CommunityResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_CommunityDelete()
        {
            // Generated from example definition: 2025-05-01-preview/Community_Delete.json
            // this example is just showing the usage of "CommunityResource_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CommunityResource created on azure
            // for more information of creating CommunityResource, please refer to the document of CommunityResource
            string subscriptionId = "CA1CB369-DD26-4DB2-9D43-9AFEF0F22093";
            string resourceGroupName = "rgopenapi";
            string communityName = "TestMyCommunity";
            ResourceIdentifier communityResourceId = CommunityResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, communityName);
            CommunityResource communityResource = client.GetCommunityResource(communityResourceId);

            // invoke the operation
            await communityResource.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_CommunityUpdate()
        {
            // Generated from example definition: 2025-05-01-preview/Community_Update.json
            // this example is just showing the usage of "CommunityResource_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CommunityResource created on azure
            // for more information of creating CommunityResource, please refer to the document of CommunityResource
            string subscriptionId = "CA1CB369-DD26-4DB2-9D43-9AFEF0F22093";
            string resourceGroupName = "rgopenapi";
            string communityName = "TestMyCommunity";
            ResourceIdentifier communityResourceId = CommunityResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, communityName);
            CommunityResource communityResource = client.GetCommunityResource(communityResourceId);

            // invoke the operation
            CommunityResourcePatch patch = new CommunityResourcePatch
            {
                Properties = new CommunityPatchProperties
                {
                    DnsServers = { "azure.net" },
                    GovernedServiceList = {new GovernedServiceItem(ServiceIdentifier.AKS)
{
Option = GovernedServiceItemOption.Allow,
Enforcement = GovernedServiceItemEnforcement.Enabled,
PolicyAction = GovernedServiceItemPolicyAction.None,
}, new GovernedServiceItem(ServiceIdentifier.AppService)
{
Option = GovernedServiceItemOption.Allow,
Enforcement = GovernedServiceItemEnforcement.Enabled,
PolicyAction = GovernedServiceItemPolicyAction.None,
}, new GovernedServiceItem(ServiceIdentifier.ContainerRegistry)
{
Option = GovernedServiceItemOption.Allow,
Enforcement = GovernedServiceItemEnforcement.Enabled,
PolicyAction = GovernedServiceItemPolicyAction.None,
}, new GovernedServiceItem(ServiceIdentifier.CosmosDB)
{
Option = GovernedServiceItemOption.Allow,
Enforcement = GovernedServiceItemEnforcement.Enabled,
PolicyAction = GovernedServiceItemPolicyAction.None,
}, new GovernedServiceItem(ServiceIdentifier.KeyVault)
{
Option = GovernedServiceItemOption.Allow,
Enforcement = GovernedServiceItemEnforcement.Enabled,
PolicyAction = GovernedServiceItemPolicyAction.None,
}, new GovernedServiceItem(ServiceIdentifier.MicrosoftSql)
{
Option = GovernedServiceItemOption.Allow,
Enforcement = GovernedServiceItemEnforcement.Enabled,
PolicyAction = GovernedServiceItemPolicyAction.None,
}, new GovernedServiceItem(ServiceIdentifier.Monitoring)
{
Option = new GovernedServiceItemOption("Not Applicable"),
Enforcement = GovernedServiceItemEnforcement.Enabled,
PolicyAction = GovernedServiceItemPolicyAction.None,
}, new GovernedServiceItem(ServiceIdentifier.PostgreSql)
{
Option = GovernedServiceItemOption.Allow,
Enforcement = GovernedServiceItemEnforcement.Enabled,
PolicyAction = GovernedServiceItemPolicyAction.None,
}, new GovernedServiceItem(ServiceIdentifier.ServiceBus)
{
Option = GovernedServiceItemOption.Allow,
Enforcement = GovernedServiceItemEnforcement.Enabled,
PolicyAction = GovernedServiceItemPolicyAction.None,
}, new GovernedServiceItem(ServiceIdentifier.Storage)
{
Option = GovernedServiceItemOption.Allow,
Enforcement = GovernedServiceItemEnforcement.Enabled,
PolicyAction = GovernedServiceItemPolicyAction.None,
}, new GovernedServiceItem(ServiceIdentifier.AzureFirewalls)
{
Option = GovernedServiceItemOption.Allow,
Enforcement = GovernedServiceItemEnforcement.Enabled,
PolicyAction = GovernedServiceItemPolicyAction.None,
}, new GovernedServiceItem(ServiceIdentifier.Insights)
{
Option = GovernedServiceItemOption.Allow,
Enforcement = GovernedServiceItemEnforcement.Enabled,
PolicyAction = GovernedServiceItemPolicyAction.None,
}, new GovernedServiceItem(ServiceIdentifier.Logic)
{
Option = GovernedServiceItemOption.Allow,
Enforcement = GovernedServiceItemEnforcement.Enabled,
PolicyAction = GovernedServiceItemPolicyAction.None,
}, new GovernedServiceItem(ServiceIdentifier.PrivateDnsZones)
{
Option = GovernedServiceItemOption.Allow,
Enforcement = GovernedServiceItemEnforcement.Enabled,
PolicyAction = GovernedServiceItemPolicyAction.None,
}, new GovernedServiceItem(ServiceIdentifier.DataConnectors)
{
Option = GovernedServiceItemOption.Allow,
Enforcement = GovernedServiceItemEnforcement.Enabled,
PolicyAction = GovernedServiceItemPolicyAction.None,
}},
                    CommunityRoleAssignments = {new RoleAssignmentItem("b24988ac-6180-42a0-ab88-20f7382dd24c")
{
Principals = {new Principal("01234567-89ab-ef01-2345-0123456789ab", PrincipalType.Group), new Principal("355a6bb0-abc0-4cba-000d-12a345b678c0", PrincipalType.User)},
}, new RoleAssignmentItem("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9")
{
Principals = {new Principal("355a6bb0-abc0-4cba-000d-12a345b678c9", PrincipalType.User)},
}},
                },
                Tags =
{
["sampletag"] = "samplevalue"
},
            };
            ArmOperation<CommunityResource> lro = await communityResource.UpdateAsync(WaitUntil.Completed, patch);
            CommunityResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CommunityResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CheckAddressSpaceAvailability_CommunityCheckAddressSpaceAvailability()
        {
            // Generated from example definition: 2025-05-01-preview/Community_PostCheckAddressSpaceAvailability.json
            // this example is just showing the usage of "Community_CheckAddressSpaceAvailability" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CommunityResource created on azure
            // for more information of creating CommunityResource, please refer to the document of CommunityResource
            string subscriptionId = "CA1CB369-DD26-4DB2-9D43-9AFEF0F22093";
            string resourceGroupName = "rgopenapi";
            string communityName = "TestMyCommunity";
            ResourceIdentifier communityResourceId = CommunityResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, communityName);
            CommunityResource communityResource = client.GetCommunityResource(communityResourceId);

            // invoke the operation
            CheckAddressSpaceAvailabilityContent content = new CheckAddressSpaceAvailabilityContent(new ResourceIdentifier("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.Mission/communities/TestMyCommunity"), new EnclaveVirtualNetworkModel
            {
                NetworkSize = "small",
                CustomCidrRange = "10.0.0.0/24",
                SubnetConfigurations = { new SubnetConfiguration("test", 26) },
                AllowSubnetCommunication = true,
            });
            CheckAddressSpaceAvailabilityResponse result = await communityResource.CheckAddressSpaceAvailabilityAsync(content);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
