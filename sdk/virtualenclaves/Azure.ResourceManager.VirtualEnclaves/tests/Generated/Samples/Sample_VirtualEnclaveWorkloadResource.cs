// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.VirtualEnclaves.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.VirtualEnclaves.Samples
{
    public partial class Sample_VirtualEnclaveWorkloadResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_WorkloadGet()
        {
            // Generated from example definition: 2025-05-01-preview/Workload_Get.json
            // this example is just showing the usage of "WorkloadResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualEnclaveWorkloadResource created on azure
            // for more information of creating VirtualEnclaveWorkloadResource, please refer to the document of VirtualEnclaveWorkloadResource
            string subscriptionId = "CA1CB369-DD26-4DB2-9D43-9AFEF0F22093";
            string resourceGroupName = "rgopenapi";
            string virtualEnclaveName = "TestMyEnclave";
            string workloadName = "TestMyWorkload";
            ResourceIdentifier virtualEnclaveWorkloadResourceId = VirtualEnclaveWorkloadResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, virtualEnclaveName, workloadName);
            VirtualEnclaveWorkloadResource virtualEnclaveWorkload = client.GetVirtualEnclaveWorkloadResource(virtualEnclaveWorkloadResourceId);

            // invoke the operation
            VirtualEnclaveWorkloadResource result = await virtualEnclaveWorkload.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VirtualEnclaveWorkloadData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_WorkloadDelete()
        {
            // Generated from example definition: 2025-05-01-preview/Workload_Delete.json
            // this example is just showing the usage of "WorkloadResource_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualEnclaveWorkloadResource created on azure
            // for more information of creating VirtualEnclaveWorkloadResource, please refer to the document of VirtualEnclaveWorkloadResource
            string subscriptionId = "CA1CB369-DD26-4DB2-9D43-9AFEF0F22093";
            string resourceGroupName = "rgopenapi";
            string virtualEnclaveName = "TestMyEnclave";
            string workloadName = "TestMyWorkload";
            ResourceIdentifier virtualEnclaveWorkloadResourceId = VirtualEnclaveWorkloadResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, virtualEnclaveName, workloadName);
            VirtualEnclaveWorkloadResource virtualEnclaveWorkload = client.GetVirtualEnclaveWorkloadResource(virtualEnclaveWorkloadResourceId);

            // invoke the operation
            await virtualEnclaveWorkload.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_WorkloadUpdate()
        {
            // Generated from example definition: 2025-05-01-preview/Workload_Update.json
            // this example is just showing the usage of "WorkloadResource_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualEnclaveWorkloadResource created on azure
            // for more information of creating VirtualEnclaveWorkloadResource, please refer to the document of VirtualEnclaveWorkloadResource
            string subscriptionId = "CA1CB369-DD26-4DB2-9D43-9AFEF0F22093";
            string resourceGroupName = "rgopenapi";
            string virtualEnclaveName = "TestMyEnclave";
            string workloadName = "TestMyWorkload";
            ResourceIdentifier virtualEnclaveWorkloadResourceId = VirtualEnclaveWorkloadResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, virtualEnclaveName, workloadName);
            VirtualEnclaveWorkloadResource virtualEnclaveWorkload = client.GetVirtualEnclaveWorkloadResource(virtualEnclaveWorkloadResourceId);

            // invoke the operation
            VirtualEnclaveWorkloadPatch patch = new VirtualEnclaveWorkloadPatch
            {
                WorkloadPatchResourceGroupCollection = { "g" },
                Tags =
{
["key9465"] = "cylmdprdhhwpcdxpynwostvzytkryj"
},
            };
            ArmOperation<VirtualEnclaveWorkloadResource> lro = await virtualEnclaveWorkload.UpdateAsync(WaitUntil.Completed, patch);
            VirtualEnclaveWorkloadResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VirtualEnclaveWorkloadData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
