// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.Storagetasks.Models
{
    internal static partial class ProvisioningStateExtensions
    {
        public static string ToSerialString(this ProvisioningState value) => value switch
        {
            ProvisioningState.ValidateSubscriptionQuotaBegin => "ValidateSubscriptionQuotaBegin",
            ProvisioningState.ValidateSubscriptionQuotaEnd => "ValidateSubscriptionQuotaEnd",
            ProvisioningState.Creating => "Creating",
            ProvisioningState.Succeeded => "Succeeded",
            ProvisioningState.Deleting => "Deleting",
            ProvisioningState.Canceled => "Canceled",
            ProvisioningState.Failed => "Failed",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown ProvisioningState value.")
        };

        public static ProvisioningState ToProvisioningState(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ValidateSubscriptionQuotaBegin")) return ProvisioningState.ValidateSubscriptionQuotaBegin;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ValidateSubscriptionQuotaEnd")) return ProvisioningState.ValidateSubscriptionQuotaEnd;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Creating")) return ProvisioningState.Creating;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Succeeded")) return ProvisioningState.Succeeded;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Deleting")) return ProvisioningState.Deleting;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Canceled")) return ProvisioningState.Canceled;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Failed")) return ProvisioningState.Failed;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown ProvisioningState value.");
        }
    }
}
