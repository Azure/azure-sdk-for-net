// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Storagetasks.Models
{
    /// <summary> Represents the overall result of the execution for the run instance. </summary>
    public readonly partial struct RunResult : IEquatable<RunResult>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RunResult"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RunResult(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";

        /// <summary> Succeeded. </summary>
        public static RunResult Succeeded { get; } = new RunResult(SucceededValue);
        /// <summary> Failed. </summary>
        public static RunResult Failed { get; } = new RunResult(FailedValue);
        /// <summary> Determines if two <see cref="RunResult"/> values are the same. </summary>
        public static bool operator ==(RunResult left, RunResult right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RunResult"/> values are not the same. </summary>
        public static bool operator !=(RunResult left, RunResult right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RunResult"/>. </summary>
        public static implicit operator RunResult(string value) => new RunResult(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RunResult other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RunResult other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
