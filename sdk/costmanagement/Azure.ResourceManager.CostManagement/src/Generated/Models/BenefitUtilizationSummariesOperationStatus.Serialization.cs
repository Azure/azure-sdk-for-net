// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.CostManagement.Models
{
    public partial class BenefitUtilizationSummariesOperationStatus : IUtf8JsonSerializable, IModelJsonSerializable<BenefitUtilizationSummariesOperationStatus>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<BenefitUtilizationSummariesOperationStatus>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<BenefitUtilizationSummariesOperationStatus>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<BenefitUtilizationSummariesOperationStatus>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(Input))
            {
                writer.WritePropertyName("input"u8);
                if (Input is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<BenefitUtilizationSummariesContent>)Input).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (Optional.IsDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                if (Properties is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<AsyncOperationStatusProperties>)Properties).Serialize(writer, options);
                }
            }
            if (_serializedAdditionalRawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static BenefitUtilizationSummariesOperationStatus DeserializeBenefitUtilizationSummariesOperationStatus(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<BenefitUtilizationSummariesContent> input = default;
            Optional<OperationStatusType> status = default;
            Optional<AsyncOperationStatusProperties> properties = default;
            Dictionary<string, BinaryData> serializedAdditionalRawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("input"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    input = BenefitUtilizationSummariesContent.DeserializeBenefitUtilizationSummariesContent(property.Value);
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = new OperationStatusType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = AsyncOperationStatusProperties.DeserializeAsyncOperationStatusProperties(property.Value);
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    serializedAdditionalRawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new BenefitUtilizationSummariesOperationStatus(input.Value, Optional.ToNullable(status), properties.Value, serializedAdditionalRawData);
        }

        BenefitUtilizationSummariesOperationStatus IModelJsonSerializable<BenefitUtilizationSummariesOperationStatus>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<BenefitUtilizationSummariesOperationStatus>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeBenefitUtilizationSummariesOperationStatus(doc.RootElement, options);
        }

        BinaryData IModelSerializable<BenefitUtilizationSummariesOperationStatus>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<BenefitUtilizationSummariesOperationStatus>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        BenefitUtilizationSummariesOperationStatus IModelSerializable<BenefitUtilizationSummariesOperationStatus>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<BenefitUtilizationSummariesOperationStatus>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeBenefitUtilizationSummariesOperationStatus(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="BenefitUtilizationSummariesOperationStatus"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="BenefitUtilizationSummariesOperationStatus"/> to convert. </param>
        public static implicit operator RequestContent(BenefitUtilizationSummariesOperationStatus model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="BenefitUtilizationSummariesOperationStatus"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator BenefitUtilizationSummariesOperationStatus(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeBenefitUtilizationSummariesOperationStatus(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
