// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CostManagement.Models
{
    public partial class ExportSchedule : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (Core.Optional.IsDefined(Recurrence))
            {
                writer.WritePropertyName("recurrence"u8);
                writer.WriteStringValue(Recurrence.Value.ToString());
            }
            if (Core.Optional.IsDefined(RecurrencePeriod))
            {
                writer.WritePropertyName("recurrencePeriod"u8);
                writer.WriteObjectValue(RecurrencePeriod);
            }
            writer.WriteEndObject();
        }

        internal static ExportSchedule DeserializeExportSchedule(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<ExportScheduleStatusType> status = default;
            Core.Optional<ExportScheduleRecurrenceType> recurrence = default;
            Core.Optional<ExportRecurrencePeriod> recurrencePeriod = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = new ExportScheduleStatusType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("recurrence"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    recurrence = new ExportScheduleRecurrenceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("recurrencePeriod"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    recurrencePeriod = ExportRecurrencePeriod.DeserializeExportRecurrencePeriod(property.Value);
                    continue;
                }
            }
            return new ExportSchedule(Core.Optional.ToNullable(status), Core.Optional.ToNullable(recurrence), recurrencePeriod.Value);
        }
    }
}
