// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.CostManagement.Models
{
    /// <summary> The common properties of the export. </summary>
    public partial class CommonExportProperties
    {
        /// <summary> Initializes a new instance of <see cref="CommonExportProperties"/>. </summary>
        /// <param name="deliveryInfo"> Has delivery information for the export. </param>
        /// <param name="definition"> Has the definition for the export. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deliveryInfo"/> or <paramref name="definition"/> is null. </exception>
        public CommonExportProperties(ExportDeliveryInfo deliveryInfo, ExportDefinition definition)
        {
            Argument.AssertNotNull(deliveryInfo, nameof(deliveryInfo));
            Argument.AssertNotNull(definition, nameof(definition));

            DeliveryInfo = deliveryInfo;
            Definition = definition;
        }

        /// <summary> Initializes a new instance of <see cref="CommonExportProperties"/>. </summary>
        /// <param name="format"> The format of the export being delivered. Currently only 'Csv' is supported. </param>
        /// <param name="deliveryInfo"> Has delivery information for the export. </param>
        /// <param name="definition"> Has the definition for the export. </param>
        /// <param name="runHistory"> If requested, has the most recent run history for the export. </param>
        /// <param name="partitionData"> If set to true, exported data will be partitioned by size and placed in a blob directory together with a manifest file. Note: this option is currently available only for Microsoft Customer Agreement commerce scopes. </param>
        /// <param name="nextRunTimeEstimate"> If the export has an active schedule, provides an estimate of the next run time. </param>
        internal CommonExportProperties(ExportFormatType? format, ExportDeliveryInfo deliveryInfo, ExportDefinition definition, ExportExecutionListResult runHistory, bool? partitionData, DateTimeOffset? nextRunTimeEstimate)
        {
            Format = format;
            DeliveryInfo = deliveryInfo;
            Definition = definition;
            RunHistory = runHistory;
            PartitionData = partitionData;
            NextRunTimeEstimate = nextRunTimeEstimate;
        }

        /// <summary> The format of the export being delivered. Currently only 'Csv' is supported. </summary>
        public ExportFormatType? Format { get; set; }
        /// <summary> Has delivery information for the export. </summary>
        internal ExportDeliveryInfo DeliveryInfo { get; set; }
        /// <summary> Has destination for the export being delivered. </summary>
        public ExportDeliveryDestination DeliveryInfoDestination
        {
            get => DeliveryInfo is null ? default : DeliveryInfo.Destination;
            set => DeliveryInfo = new ExportDeliveryInfo(value);
        }

        /// <summary> Has the definition for the export. </summary>
        public ExportDefinition Definition { get; set; }
        /// <summary> If requested, has the most recent run history for the export. </summary>
        internal ExportExecutionListResult RunHistory { get; set; }
        /// <summary> A list of export runs. </summary>
        public IReadOnlyList<ExportRun> RunHistoryValue
        {
            get
            {
                if (RunHistory is null)
                    RunHistory = new ExportExecutionListResult();
                return RunHistory.Value;
            }
        }

        /// <summary> If set to true, exported data will be partitioned by size and placed in a blob directory together with a manifest file. Note: this option is currently available only for Microsoft Customer Agreement commerce scopes. </summary>
        public bool? PartitionData { get; set; }
        /// <summary> If the export has an active schedule, provides an estimate of the next run time. </summary>
        public DateTimeOffset? NextRunTimeEstimate { get; }
    }
}
