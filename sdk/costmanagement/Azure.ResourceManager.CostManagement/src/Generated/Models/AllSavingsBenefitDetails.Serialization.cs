// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.CostManagement.Models
{
    public partial class AllSavingsBenefitDetails : IUtf8JsonSerializable, IModelJsonSerializable<AllSavingsBenefitDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<AllSavingsBenefitDetails>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<AllSavingsBenefitDetails>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AllSavingsBenefitDetails>(this, options.Format);

            writer.WriteStartObject();
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static AllSavingsBenefitDetails DeserializeAllSavingsBenefitDetails(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<decimal> overageCost = default;
            Optional<decimal> benefitCost = default;
            Optional<decimal> totalCost = default;
            Optional<decimal> savingsAmount = default;
            Optional<decimal> savingsPercentage = default;
            Optional<decimal> coveragePercentage = default;
            Optional<decimal> commitmentAmount = default;
            Optional<decimal> averageUtilizationPercentage = default;
            Optional<decimal> wastageCost = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("overageCost"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    overageCost = property.Value.GetDecimal();
                    continue;
                }
                if (property.NameEquals("benefitCost"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    benefitCost = property.Value.GetDecimal();
                    continue;
                }
                if (property.NameEquals("totalCost"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalCost = property.Value.GetDecimal();
                    continue;
                }
                if (property.NameEquals("savingsAmount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    savingsAmount = property.Value.GetDecimal();
                    continue;
                }
                if (property.NameEquals("savingsPercentage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    savingsPercentage = property.Value.GetDecimal();
                    continue;
                }
                if (property.NameEquals("coveragePercentage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    coveragePercentage = property.Value.GetDecimal();
                    continue;
                }
                if (property.NameEquals("commitmentAmount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    commitmentAmount = property.Value.GetDecimal();
                    continue;
                }
                if (property.NameEquals("averageUtilizationPercentage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    averageUtilizationPercentage = property.Value.GetDecimal();
                    continue;
                }
                if (property.NameEquals("wastageCost"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    wastageCost = property.Value.GetDecimal();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new AllSavingsBenefitDetails(Optional.ToNullable(overageCost), Optional.ToNullable(benefitCost), Optional.ToNullable(totalCost), Optional.ToNullable(savingsAmount), Optional.ToNullable(savingsPercentage), Optional.ToNullable(coveragePercentage), Optional.ToNullable(commitmentAmount), Optional.ToNullable(averageUtilizationPercentage), Optional.ToNullable(wastageCost), rawData);
        }

        AllSavingsBenefitDetails IModelJsonSerializable<AllSavingsBenefitDetails>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AllSavingsBenefitDetails>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeAllSavingsBenefitDetails(doc.RootElement, options);
        }

        BinaryData IModelSerializable<AllSavingsBenefitDetails>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AllSavingsBenefitDetails>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        AllSavingsBenefitDetails IModelSerializable<AllSavingsBenefitDetails>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AllSavingsBenefitDetails>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeAllSavingsBenefitDetails(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="AllSavingsBenefitDetails"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="AllSavingsBenefitDetails"/> to convert. </param>
        public static implicit operator RequestContent(AllSavingsBenefitDetails model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="AllSavingsBenefitDetails"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator AllSavingsBenefitDetails(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeAllSavingsBenefitDetails(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
