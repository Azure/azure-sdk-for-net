// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.CostManagement;

namespace Azure.ResourceManager.CostManagement.Mocking
{
    /// <summary> A class to add extension methods to ArmResource. </summary>
    public partial class CostManagementArmResourceMockingExtension : ArmResource
    {
        /// <summary> Initializes a new instance of the <see cref="CostManagementArmResourceMockingExtension"/> class for mocking. </summary>
        protected CostManagementArmResourceMockingExtension()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="CostManagementArmResourceMockingExtension"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal CostManagementArmResourceMockingExtension(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of CostManagementExportResources in the ArmResource. </summary>
        /// <returns> An object representing collection of CostManagementExportResources and their operations over a CostManagementExportResource. </returns>
        public virtual CostManagementExportCollection GetCostManagementExports()
        {
            return GetCachedClient(Client => new CostManagementExportCollection(Client, Id));
        }

        /// <summary>
        /// The operation to get the export for the defined scope by export name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.CostManagement/exports/{exportName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Exports_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="exportName"> Export Name. </param>
        /// <param name="expand"> May be used to expand the properties within an export. Currently only 'runHistory' is supported and will return information for the last 10 runs of the export. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="exportName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="exportName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<CostManagementExportResource>> GetCostManagementExportAsync(string exportName, string expand = null, CancellationToken cancellationToken = default)
        {
            return await GetCostManagementExports().GetAsync(exportName, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// The operation to get the export for the defined scope by export name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.CostManagement/exports/{exportName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Exports_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="exportName"> Export Name. </param>
        /// <param name="expand"> May be used to expand the properties within an export. Currently only 'runHistory' is supported and will return information for the last 10 runs of the export. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="exportName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="exportName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<CostManagementExportResource> GetCostManagementExport(string exportName, string expand = null, CancellationToken cancellationToken = default)
        {
            return GetCostManagementExports().Get(exportName, expand, cancellationToken);
        }

        /// <summary> Gets a collection of CostManagementViewsResources in the ArmResource. </summary>
        /// <returns> An object representing collection of CostManagementViewsResources and their operations over a CostManagementViewsResource. </returns>
        public virtual CostManagementViewsCollection GetAllCostManagementViews()
        {
            return GetCachedClient(Client => new CostManagementViewsCollection(Client, Id));
        }

        /// <summary>
        /// Gets the view for the defined scope by view name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.CostManagement/views/{viewName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Views_GetByScope</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="viewName"> View name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="viewName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="viewName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<CostManagementViewsResource>> GetCostManagementViewsAsync(string viewName, CancellationToken cancellationToken = default)
        {
            return await GetAllCostManagementViews().GetAsync(viewName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the view for the defined scope by view name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.CostManagement/views/{viewName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Views_GetByScope</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="viewName"> View name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="viewName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="viewName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<CostManagementViewsResource> GetCostManagementViews(string viewName, CancellationToken cancellationToken = default)
        {
            return GetAllCostManagementViews().Get(viewName, cancellationToken);
        }

        /// <summary> Gets a collection of CostManagementAlertResources in the ArmResource. </summary>
        /// <returns> An object representing collection of CostManagementAlertResources and their operations over a CostManagementAlertResource. </returns>
        public virtual CostManagementAlertCollection GetCostManagementAlerts()
        {
            return GetCachedClient(Client => new CostManagementAlertCollection(Client, Id));
        }

        /// <summary>
        /// Gets the alert for the scope by alert ID.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.CostManagement/alerts/{alertId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Alerts_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="alertId"> Alert ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="alertId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<CostManagementAlertResource>> GetCostManagementAlertAsync(string alertId, CancellationToken cancellationToken = default)
        {
            return await GetCostManagementAlerts().GetAsync(alertId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the alert for the scope by alert ID.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.CostManagement/alerts/{alertId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Alerts_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="alertId"> Alert ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="alertId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<CostManagementAlertResource> GetCostManagementAlert(string alertId, CancellationToken cancellationToken = default)
        {
            return GetCostManagementAlerts().Get(alertId, cancellationToken);
        }

        /// <summary> Gets a collection of ScheduledActionResources in the ArmResource. </summary>
        /// <returns> An object representing collection of ScheduledActionResources and their operations over a ScheduledActionResource. </returns>
        public virtual ScheduledActionCollection GetScheduledActions()
        {
            return GetCachedClient(Client => new ScheduledActionCollection(Client, Id));
        }

        /// <summary>
        /// Get the shared scheduled action from the given scope by name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.CostManagement/scheduledActions/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledActions_GetByScope</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> Scheduled action name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<ScheduledActionResource>> GetScheduledActionAsync(string name, CancellationToken cancellationToken = default)
        {
            return await GetScheduledActions().GetAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get the shared scheduled action from the given scope by name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.CostManagement/scheduledActions/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledActions_GetByScope</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> Scheduled action name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<ScheduledActionResource> GetScheduledAction(string name, CancellationToken cancellationToken = default)
        {
            return GetScheduledActions().Get(name, cancellationToken);
        }
    }
}
