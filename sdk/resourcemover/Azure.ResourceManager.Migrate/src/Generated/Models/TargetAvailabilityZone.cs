// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Gets or sets the target availability zone. </summary>
    public readonly partial struct TargetAvailabilityZone : IEquatable<TargetAvailabilityZone>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TargetAvailabilityZone"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TargetAvailabilityZone(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OneValue = "1";
        private const string TwoValue = "2";
        private const string ThreeValue = "3";
        private const string NAValue = "NA";

        /// <summary> 1. </summary>
        public static TargetAvailabilityZone One { get; } = new TargetAvailabilityZone(OneValue);
        /// <summary> 2. </summary>
        public static TargetAvailabilityZone Two { get; } = new TargetAvailabilityZone(TwoValue);
        /// <summary> 3. </summary>
        public static TargetAvailabilityZone Three { get; } = new TargetAvailabilityZone(ThreeValue);
        /// <summary> NA. </summary>
        public static TargetAvailabilityZone NA { get; } = new TargetAvailabilityZone(NAValue);
        /// <summary> Determines if two <see cref="TargetAvailabilityZone"/> values are the same. </summary>
        public static bool operator ==(TargetAvailabilityZone left, TargetAvailabilityZone right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TargetAvailabilityZone"/> values are not the same. </summary>
        public static bool operator !=(TargetAvailabilityZone left, TargetAvailabilityZone right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TargetAvailabilityZone"/>. </summary>
        public static implicit operator TargetAvailabilityZone(string value) => new TargetAvailabilityZone(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TargetAvailabilityZone other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TargetAvailabilityZone other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
