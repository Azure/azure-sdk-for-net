// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Migrate.Models
{
    public partial class NicIPConfigurationResourceSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(PrivateIPAddress))
            {
                writer.WritePropertyName("privateIpAddress");
                writer.WriteStringValue(PrivateIPAddress);
            }
            if (Optional.IsDefined(PrivateIPAllocationMethod))
            {
                writer.WritePropertyName("privateIpAllocationMethod");
                writer.WriteStringValue(PrivateIPAllocationMethod);
            }
            if (Optional.IsDefined(Subnet))
            {
                writer.WritePropertyName("subnet");
                writer.WriteObjectValue(Subnet);
            }
            if (Optional.IsDefined(Primary))
            {
                writer.WritePropertyName("primary");
                writer.WriteBooleanValue(Primary.Value);
            }
            if (Optional.IsCollectionDefined(LoadBalancerBackendAddressPools))
            {
                writer.WritePropertyName("loadBalancerBackendAddressPools");
                writer.WriteStartArray();
                foreach (var item in LoadBalancerBackendAddressPools)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(LoadBalancerNatRules))
            {
                writer.WritePropertyName("loadBalancerNatRules");
                writer.WriteStartArray();
                foreach (var item in LoadBalancerNatRules)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(PublicIP))
            {
                writer.WritePropertyName("publicIp");
                writer.WriteObjectValue(PublicIP);
            }
            writer.WriteEndObject();
        }

        internal static NicIPConfigurationResourceSettings DeserializeNicIPConfigurationResourceSettings(JsonElement element)
        {
            Optional<string> name = default;
            Optional<string> privateIPAddress = default;
            Optional<string> privateIPAllocationMethod = default;
            Optional<SubnetReference> subnet = default;
            Optional<bool> primary = default;
            Optional<IList<LoadBalancerBackendAddressPoolReference>> loadBalancerBackendAddressPools = default;
            Optional<IList<LoadBalancerNatRuleReference>> loadBalancerNatRules = default;
            Optional<PublicIPReference> publicIP = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("privateIpAddress"))
                {
                    privateIPAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("privateIpAllocationMethod"))
                {
                    privateIPAllocationMethod = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("subnet"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    subnet = SubnetReference.DeserializeSubnetReference(property.Value);
                    continue;
                }
                if (property.NameEquals("primary"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    primary = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("loadBalancerBackendAddressPools"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<LoadBalancerBackendAddressPoolReference> array = new List<LoadBalancerBackendAddressPoolReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(LoadBalancerBackendAddressPoolReference.DeserializeLoadBalancerBackendAddressPoolReference(item));
                    }
                    loadBalancerBackendAddressPools = array;
                    continue;
                }
                if (property.NameEquals("loadBalancerNatRules"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<LoadBalancerNatRuleReference> array = new List<LoadBalancerNatRuleReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(LoadBalancerNatRuleReference.DeserializeLoadBalancerNatRuleReference(item));
                    }
                    loadBalancerNatRules = array;
                    continue;
                }
                if (property.NameEquals("publicIp"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    publicIP = PublicIPReference.DeserializePublicIPReference(property.Value);
                    continue;
                }
            }
            return new NicIPConfigurationResourceSettings(name.Value, privateIPAddress.Value, privateIPAllocationMethod.Value, subnet.Value, Optional.ToNullable(primary), Optional.ToList(loadBalancerBackendAddressPools), Optional.ToList(loadBalancerNatRules), publicIP.Value);
        }
    }
}
