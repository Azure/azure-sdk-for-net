// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.ResourceMover.Models
{
    public partial class MoverResourceProperties : IUtf8JsonSerializable, IModelJsonSerializable<MoverResourceProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<MoverResourceProperties>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<MoverResourceProperties>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<MoverResourceProperties>(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("sourceId"u8);
            writer.WriteStringValue(SourceId);
            if (Optional.IsDefined(ExistingTargetId))
            {
                if (ExistingTargetId != null)
                {
                    writer.WritePropertyName("existingTargetId"u8);
                    writer.WriteStringValue(ExistingTargetId);
                }
                else
                {
                    writer.WriteNull("existingTargetId");
                }
            }
            if (Optional.IsDefined(ResourceSettings))
            {
                if (ResourceSettings != null)
                {
                    writer.WritePropertyName("resourceSettings"u8);
                    if (ResourceSettings is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<MoverResourceSettings>)ResourceSettings).Serialize(writer, options);
                    }
                }
                else
                {
                    writer.WriteNull("resourceSettings");
                }
            }
            if (Optional.IsCollectionDefined(DependsOnOverrides))
            {
                writer.WritePropertyName("dependsOnOverrides"u8);
                writer.WriteStartArray();
                foreach (var item in DependsOnOverrides)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<MoverResourceDependencyOverride>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (_serializedAdditionalRawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static MoverResourceProperties DeserializeMoverResourceProperties(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<MoverProvisioningState> provisioningState = default;
            ResourceIdentifier sourceId = default;
            Optional<ResourceIdentifier> targetId = default;
            Optional<ResourceIdentifier> existingTargetId = default;
            Optional<MoverResourceSettings> resourceSettings = default;
            Optional<MoverResourceSettings> sourceResourceSettings = default;
            Optional<MoverResourcePropertiesMoveStatus> moveStatus = default;
            Optional<IReadOnlyList<MoverResourceDependency>> dependsOn = default;
            Optional<IList<MoverResourceDependencyOverride>> dependsOnOverrides = default;
            Optional<bool> isResolveRequired = default;
            Optional<MoveResourcePropertiesErrors> errors = default;
            Dictionary<string, BinaryData> serializedAdditionalRawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new MoverProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sourceId"u8))
                {
                    sourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        targetId = null;
                        continue;
                    }
                    targetId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("existingTargetId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        existingTargetId = null;
                        continue;
                    }
                    existingTargetId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("resourceSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        resourceSettings = null;
                        continue;
                    }
                    resourceSettings = MoverResourceSettings.DeserializeMoverResourceSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("sourceResourceSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        sourceResourceSettings = null;
                        continue;
                    }
                    sourceResourceSettings = MoverResourceSettings.DeserializeMoverResourceSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("moveStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    moveStatus = MoverResourcePropertiesMoveStatus.DeserializeMoverResourcePropertiesMoveStatus(property.Value);
                    continue;
                }
                if (property.NameEquals("dependsOn"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MoverResourceDependency> array = new List<MoverResourceDependency>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MoverResourceDependency.DeserializeMoverResourceDependency(item));
                    }
                    dependsOn = array;
                    continue;
                }
                if (property.NameEquals("dependsOnOverrides"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MoverResourceDependencyOverride> array = new List<MoverResourceDependencyOverride>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MoverResourceDependencyOverride.DeserializeMoverResourceDependencyOverride(item));
                    }
                    dependsOnOverrides = array;
                    continue;
                }
                if (property.NameEquals("isResolveRequired"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isResolveRequired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("errors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        errors = null;
                        continue;
                    }
                    errors = MoveResourcePropertiesErrors.DeserializeMoveResourcePropertiesErrors(property.Value);
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    serializedAdditionalRawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new MoverResourceProperties(Optional.ToNullable(provisioningState), sourceId, targetId.Value, existingTargetId.Value, resourceSettings.Value, sourceResourceSettings.Value, moveStatus.Value, Optional.ToList(dependsOn), Optional.ToList(dependsOnOverrides), Optional.ToNullable(isResolveRequired), errors.Value, serializedAdditionalRawData);
        }

        MoverResourceProperties IModelJsonSerializable<MoverResourceProperties>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<MoverResourceProperties>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeMoverResourceProperties(doc.RootElement, options);
        }

        BinaryData IModelSerializable<MoverResourceProperties>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<MoverResourceProperties>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        MoverResourceProperties IModelSerializable<MoverResourceProperties>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<MoverResourceProperties>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeMoverResourceProperties(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="MoverResourceProperties"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="MoverResourceProperties"/> to convert. </param>
        public static implicit operator RequestContent(MoverResourceProperties model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="MoverResourceProperties"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator MoverResourceProperties(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeMoverResourceProperties(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
