// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.ResourceMover.Models
{
    public partial class MoverVirtualNetworkResourceSettings : IUtf8JsonSerializable, IModelJsonSerializable<MoverVirtualNetworkResourceSettings>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<MoverVirtualNetworkResourceSettings>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<MoverVirtualNetworkResourceSettings>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<MoverVirtualNetworkResourceSettings>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Tags))
            {
                if (Tags != null)
                {
                    writer.WritePropertyName("tags"u8);
                    writer.WriteStartObject();
                    foreach (var item in Tags)
                    {
                        writer.WritePropertyName(item.Key);
                        writer.WriteStringValue(item.Value);
                    }
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNull("tags");
                }
            }
            if (Optional.IsDefined(EnableDdosProtection))
            {
                if (EnableDdosProtection != null)
                {
                    writer.WritePropertyName("enableDdosProtection"u8);
                    writer.WriteBooleanValue(EnableDdosProtection.Value);
                }
                else
                {
                    writer.WriteNull("enableDdosProtection");
                }
            }
            if (Optional.IsCollectionDefined(AddressSpace))
            {
                if (AddressSpace != null)
                {
                    writer.WritePropertyName("addressSpace"u8);
                    writer.WriteStartArray();
                    foreach (var item in AddressSpace)
                    {
                        writer.WriteStringValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("addressSpace");
                }
            }
            if (Optional.IsCollectionDefined(DnsServers))
            {
                if (DnsServers != null)
                {
                    writer.WritePropertyName("dnsServers"u8);
                    writer.WriteStartArray();
                    foreach (var item in DnsServers)
                    {
                        writer.WriteStringValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("dnsServers");
                }
            }
            if (Optional.IsCollectionDefined(Subnets))
            {
                if (Subnets != null)
                {
                    writer.WritePropertyName("subnets"u8);
                    writer.WriteStartArray();
                    foreach (var item in Subnets)
                    {
                        if (item is null)
                        {
                            writer.WriteNullValue();
                        }
                        else
                        {
                            ((IModelJsonSerializable<SubnetResourceSettings>)item).Serialize(writer, options);
                        }
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("subnets");
                }
            }
            writer.WritePropertyName("resourceType"u8);
            writer.WriteStringValue(ResourceType);
            writer.WritePropertyName("targetResourceName"u8);
            writer.WriteStringValue(TargetResourceName);
            if (_serializedAdditionalRawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static MoverVirtualNetworkResourceSettings DeserializeMoverVirtualNetworkResourceSettings(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IDictionary<string, string>> tags = default;
            Optional<bool?> enableDdosProtection = default;
            Optional<IList<string>> addressSpace = default;
            Optional<IList<string>> dnsServers = default;
            Optional<IList<SubnetResourceSettings>> subnets = default;
            string resourceType = default;
            string targetResourceName = default;
            Dictionary<string, BinaryData> serializedAdditionalRawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        tags = null;
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("enableDdosProtection"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        enableDdosProtection = null;
                        continue;
                    }
                    enableDdosProtection = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("addressSpace"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        addressSpace = null;
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    addressSpace = array;
                    continue;
                }
                if (property.NameEquals("dnsServers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        dnsServers = null;
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    dnsServers = array;
                    continue;
                }
                if (property.NameEquals("subnets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        subnets = null;
                        continue;
                    }
                    List<SubnetResourceSettings> array = new List<SubnetResourceSettings>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SubnetResourceSettings.DeserializeSubnetResourceSettings(item));
                    }
                    subnets = array;
                    continue;
                }
                if (property.NameEquals("resourceType"u8))
                {
                    resourceType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetResourceName"u8))
                {
                    targetResourceName = property.Value.GetString();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    serializedAdditionalRawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new MoverVirtualNetworkResourceSettings(resourceType, targetResourceName, Optional.ToDictionary(tags), Optional.ToNullable(enableDdosProtection), Optional.ToList(addressSpace), Optional.ToList(dnsServers), Optional.ToList(subnets), serializedAdditionalRawData);
        }

        MoverVirtualNetworkResourceSettings IModelJsonSerializable<MoverVirtualNetworkResourceSettings>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<MoverVirtualNetworkResourceSettings>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeMoverVirtualNetworkResourceSettings(doc.RootElement, options);
        }

        BinaryData IModelSerializable<MoverVirtualNetworkResourceSettings>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<MoverVirtualNetworkResourceSettings>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        MoverVirtualNetworkResourceSettings IModelSerializable<MoverVirtualNetworkResourceSettings>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<MoverVirtualNetworkResourceSettings>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeMoverVirtualNetworkResourceSettings(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="MoverVirtualNetworkResourceSettings"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="MoverVirtualNetworkResourceSettings"/> to convert. </param>
        public static implicit operator RequestContent(MoverVirtualNetworkResourceSettings model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="MoverVirtualNetworkResourceSettings"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator MoverVirtualNetworkResourceSettings(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeMoverVirtualNetworkResourceSettings(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
