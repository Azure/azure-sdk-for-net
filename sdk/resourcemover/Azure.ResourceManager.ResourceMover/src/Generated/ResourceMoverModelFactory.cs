// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.ResourceMover;

namespace Azure.ResourceManager.ResourceMover.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class ResourceMoverModelFactory
    {
        /// <summary> Initializes a new instance of MoverResourceSetData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="etag"> The etag of the resource. </param>
        /// <param name="identity"> Defines the MSI properties of the Move Collection. Current supported identity types: None, SystemAssigned, UserAssigned. </param>
        /// <param name="properties"> Defines the move collection properties. </param>
        /// <returns> A new <see cref="ResourceMover.MoverResourceSetData"/> instance for mocking. </returns>
        public static MoverResourceSetData MoverResourceSetData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ETag? etag = null, ManagedServiceIdentity identity = null, MoverResourceSetProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new MoverResourceSetData(id, name, resourceType, systemData, tags, location, etag, identity, properties);
        }

        /// <summary> Initializes a new instance of MoverResourceSetProperties. </summary>
        /// <param name="sourceRegion"> Gets or sets the source region. </param>
        /// <param name="targetRegion"> Gets or sets the target region. </param>
        /// <param name="provisioningState"> Defines the provisioning states. </param>
        /// <param name="errorsProperties"> Defines the move collection errors. </param>
        /// <returns> A new <see cref="Models.MoverResourceSetProperties"/> instance for mocking. </returns>
        public static MoverResourceSetProperties MoverResourceSetProperties(AzureLocation sourceRegion = default, AzureLocation targetRegion = default, MoverProvisioningState? provisioningState = null, ResponseError errorsProperties = null)
        {
            return new MoverResourceSetProperties(sourceRegion, targetRegion, provisioningState, new MoveCollectionPropertiesErrors(errorsProperties));
        }

        /// <summary> Initializes a new instance of MoverOperationStatus. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="name"> Operation name. </param>
        /// <param name="status"> Status of the operation. ARM expects the terminal status to be one of Succeeded/ Failed/ Canceled. All other values imply that the operation is still running. </param>
        /// <param name="startOn"> Start time. </param>
        /// <param name="endOn"> End time. </param>
        /// <param name="error"> Error stating all error details for the operation. </param>
        /// <param name="properties"> Custom data. </param>
        /// <returns> A new <see cref="Models.MoverOperationStatus"/> instance for mocking. </returns>
        public static MoverOperationStatus MoverOperationStatus(ResourceIdentifier id = null, string name = null, string status = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, MoverOperationStatusError error = null, BinaryData properties = null)
        {
            return new MoverOperationStatus(id, name, status, startOn, endOn, error, properties);
        }

        /// <summary> Initializes a new instance of MoverOperationStatusError. </summary>
        /// <param name="code"> The error code. </param>
        /// <param name="message"> The error message. </param>
        /// <param name="details"> The error details. </param>
        /// <param name="additionalInfo"> The additional info. </param>
        /// <returns> A new <see cref="Models.MoverOperationStatusError"/> instance for mocking. </returns>
        public static MoverOperationStatusError MoverOperationStatusError(string code = null, string message = null, IEnumerable<MoverOperationStatusError> details = null, IEnumerable<MoverOperationErrorAdditionalInfo> additionalInfo = null)
        {
            details ??= new List<MoverOperationStatusError>();
            additionalInfo ??= new List<MoverOperationErrorAdditionalInfo>();

            return new MoverOperationStatusError(code, message, details?.ToList(), additionalInfo?.ToList());
        }

        /// <summary> Initializes a new instance of MoverOperationErrorAdditionalInfo. </summary>
        /// <param name="operationErrorAdditionalInfoType"> The error type. </param>
        /// <param name="infoMoverResources"> The operation error info. </param>
        /// <returns> A new <see cref="Models.MoverOperationErrorAdditionalInfo"/> instance for mocking. </returns>
        public static MoverOperationErrorAdditionalInfo MoverOperationErrorAdditionalInfo(string operationErrorAdditionalInfoType = null, IEnumerable<AffectedMoverResourceInfo> infoMoverResources = null)
        {
            infoMoverResources ??= new List<AffectedMoverResourceInfo>();

            return new MoverOperationErrorAdditionalInfo(operationErrorAdditionalInfoType, new MoveErrorInfo(infoMoverResources?.ToList()));
        }

        /// <summary> Initializes a new instance of AffectedMoverResourceInfo. </summary>
        /// <param name="id"> The affected move resource id. </param>
        /// <param name="sourceId"> The affected move resource source id. </param>
        /// <param name="moverResources"> The affected move resources. </param>
        /// <returns> A new <see cref="Models.AffectedMoverResourceInfo"/> instance for mocking. </returns>
        public static AffectedMoverResourceInfo AffectedMoverResourceInfo(ResourceIdentifier id = null, ResourceIdentifier sourceId = null, IEnumerable<AffectedMoverResourceInfo> moverResources = null)
        {
            moverResources ??= new List<AffectedMoverResourceInfo>();

            return new AffectedMoverResourceInfo(id, sourceId, moverResources?.ToList());
        }

        /// <summary> Initializes a new instance of MoverResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Defines the move resource properties. </param>
        /// <returns> A new <see cref="ResourceMover.MoverResourceData"/> instance for mocking. </returns>
        public static MoverResourceData MoverResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MoverResourceProperties properties = null)
        {
            return new MoverResourceData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of MoverResourceProperties. </summary>
        /// <param name="provisioningState"> Defines the provisioning states. </param>
        /// <param name="sourceId"> Gets or sets the Source ARM Id of the resource. </param>
        /// <param name="targetId"> Gets or sets the Target ARM Id of the resource. </param>
        /// <param name="existingTargetId"> Gets or sets the existing target ARM Id of the resource. </param>
        /// <param name="resourceSettings">
        /// Gets or sets the resource settings.
        /// Please note <see cref="MoverResourceSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MoverAvailabilitySetResourceSettings"/>, <see cref="DiskEncryptionSetResourceSettings"/>, <see cref="VirtualMachineResourceSettings"/>, <see cref="KeyVaultResourceSettings"/>, <see cref="LoadBalancerResourceSettings"/>, <see cref="NetworkInterfaceResourceSettings"/>, <see cref="NetworkSecurityGroupResourceSettings"/>, <see cref="PublicIPAddressResourceSettings"/>, <see cref="MoverVirtualNetworkResourceSettings"/>, <see cref="SqlServerResourceSettings"/>, <see cref="SqlDatabaseResourceSettings"/>, <see cref="SqlElasticPoolResourceSettings"/> and <see cref="ResourceGroupResourceSettings"/>.
        /// </param>
        /// <param name="sourceResourceSettings">
        /// Gets or sets the source resource settings.
        /// Please note <see cref="MoverResourceSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MoverAvailabilitySetResourceSettings"/>, <see cref="DiskEncryptionSetResourceSettings"/>, <see cref="VirtualMachineResourceSettings"/>, <see cref="KeyVaultResourceSettings"/>, <see cref="LoadBalancerResourceSettings"/>, <see cref="NetworkInterfaceResourceSettings"/>, <see cref="NetworkSecurityGroupResourceSettings"/>, <see cref="PublicIPAddressResourceSettings"/>, <see cref="MoverVirtualNetworkResourceSettings"/>, <see cref="SqlServerResourceSettings"/>, <see cref="SqlDatabaseResourceSettings"/>, <see cref="SqlElasticPoolResourceSettings"/> and <see cref="ResourceGroupResourceSettings"/>.
        /// </param>
        /// <param name="moveStatus"> Defines the move resource status. </param>
        /// <param name="dependsOn"> Gets or sets the move resource dependencies. </param>
        /// <param name="dependsOnOverrides"> Gets or sets the move resource dependencies overrides. </param>
        /// <param name="isResolveRequired"> Gets a value indicating whether the resolve action is required over the move collection. </param>
        /// <param name="errorsProperties"> Defines the move resource errors. </param>
        /// <returns> A new <see cref="Models.MoverResourceProperties"/> instance for mocking. </returns>
        public static MoverResourceProperties MoverResourceProperties(MoverProvisioningState? provisioningState = null, ResourceIdentifier sourceId = null, ResourceIdentifier targetId = null, ResourceIdentifier existingTargetId = null, MoverResourceSettings resourceSettings = null, MoverResourceSettings sourceResourceSettings = null, MoverResourcePropertiesMoveStatus moveStatus = null, IEnumerable<MoverResourceDependency> dependsOn = null, IEnumerable<MoverResourceDependencyOverride> dependsOnOverrides = null, bool? isResolveRequired = null, ResponseError errorsProperties = null)
        {
            dependsOn ??= new List<MoverResourceDependency>();
            dependsOnOverrides ??= new List<MoverResourceDependencyOverride>();

            return new MoverResourceProperties(provisioningState, sourceId, targetId, existingTargetId, resourceSettings, sourceResourceSettings, moveStatus, dependsOn?.ToList(), dependsOnOverrides?.ToList(), isResolveRequired, new MoveResourcePropertiesErrors(errorsProperties));
        }

        /// <summary> Initializes a new instance of MoverResourceSettings. </summary>
        /// <param name="resourceType"> The resource type. For example, the value can be Microsoft.Compute/virtualMachines. </param>
        /// <param name="targetResourceName"> Gets or sets the target Resource name. </param>
        /// <returns> A new <see cref="Models.MoverResourceSettings"/> instance for mocking. </returns>
        public static MoverResourceSettings MoverResourceSettings(string resourceType = null, string targetResourceName = null)
        {
            return new UnknownResourceSettings(resourceType, targetResourceName);
        }

        /// <summary> Initializes a new instance of MoverResourcePropertiesMoveStatus. </summary>
        /// <param name="moveState"> Defines the MoveResource states. </param>
        /// <param name="jobStatus"> Defines the job status. </param>
        /// <param name="errorsProperties"> An error response from the azure resource mover service. </param>
        /// <returns> A new <see cref="Models.MoverResourcePropertiesMoveStatus"/> instance for mocking. </returns>
        public static MoverResourcePropertiesMoveStatus MoverResourcePropertiesMoveStatus(MoverResourceMoveState? moveState = null, MoverResourceJobStatus jobStatus = null, ResponseError errorsProperties = null)
        {
            return new MoverResourcePropertiesMoveStatus(moveState, jobStatus, new MoveResourceError(errorsProperties));
        }

        /// <summary> Initializes a new instance of MoverResourceStatus. </summary>
        /// <param name="moveState"> Defines the MoveResource states. </param>
        /// <param name="jobStatus"> Defines the job status. </param>
        /// <param name="errorsProperties"> An error response from the azure resource mover service. </param>
        /// <returns> A new <see cref="Models.MoverResourceStatus"/> instance for mocking. </returns>
        public static MoverResourceStatus MoverResourceStatus(MoverResourceMoveState? moveState = null, MoverResourceJobStatus jobStatus = null, ResponseError errorsProperties = null)
        {
            return new MoverResourceStatus(moveState, jobStatus, new MoveResourceError(errorsProperties));
        }

        /// <summary> Initializes a new instance of MoverResourceJobStatus. </summary>
        /// <param name="jobName"> Defines the job name. </param>
        /// <param name="jobProgress"> Gets or sets the monitoring job percentage. </param>
        /// <returns> A new <see cref="Models.MoverResourceJobStatus"/> instance for mocking. </returns>
        public static MoverResourceJobStatus MoverResourceJobStatus(MoverResourceJobName? jobName = null, string jobProgress = null)
        {
            return new MoverResourceJobStatus(jobName, jobProgress);
        }

        /// <summary> Initializes a new instance of MoverResourceDependency. </summary>
        /// <param name="id"> Gets the source ARM ID of the dependent resource. </param>
        /// <param name="resolutionStatus"> Gets the dependency resolution status. </param>
        /// <param name="resolutionType"> Defines the resolution type. </param>
        /// <param name="dependencyType"> Defines the dependency type. </param>
        /// <param name="manualResolutionTargetId"> Defines the properties for manual resolution. </param>
        /// <param name="automaticResolutionResourceId"> Defines the properties for automatic resolution. </param>
        /// <param name="isOptional"> Gets or sets a value indicating whether the dependency is optional. </param>
        /// <returns> A new <see cref="Models.MoverResourceDependency"/> instance for mocking. </returns>
        public static MoverResourceDependency MoverResourceDependency(ResourceIdentifier id = null, string resolutionStatus = null, MoverResourceResolutionType? resolutionType = null, MoverDependencyType? dependencyType = null, ResourceIdentifier manualResolutionTargetId = null, ResourceIdentifier automaticResolutionResourceId = null, bool? isOptional = null)
        {
            return new MoverResourceDependency(id, resolutionStatus, resolutionType, dependencyType, new ManualResolutionProperties(manualResolutionTargetId), new AutomaticResolutionProperties(automaticResolutionResourceId), isOptional);
        }

        /// <summary> Initializes a new instance of MoverResourceDependencyOverride. </summary>
        /// <param name="id"> Gets or sets the ARM ID of the dependent resource. </param>
        /// <param name="targetId">
        /// Gets or sets the resource ARM id of either the MoveResource or the resource ARM ID of
        /// the dependent resource.
        /// </param>
        /// <returns> A new <see cref="Models.MoverResourceDependencyOverride"/> instance for mocking. </returns>
        public static MoverResourceDependencyOverride MoverResourceDependencyOverride(ResourceIdentifier id = null, ResourceIdentifier targetId = null)
        {
            return new MoverResourceDependencyOverride(id, targetId);
        }

        /// <summary> Initializes a new instance of MoverUnresolvedDependency. </summary>
        /// <param name="count"> Gets or sets the count. </param>
        /// <param name="id"> Gets or sets the arm id of the dependency. </param>
        /// <returns> A new <see cref="Models.MoverUnresolvedDependency"/> instance for mocking. </returns>
        public static MoverUnresolvedDependency MoverUnresolvedDependency(int? count = null, ResourceIdentifier id = null)
        {
            return new MoverUnresolvedDependency(count, id);
        }

        /// <summary> Initializes a new instance of MoverOperationsDiscovery. </summary>
        /// <param name="name">
        /// Gets or sets Name of the API.
        /// The name of the operation being performed on this particular object. It should
        /// match the action name that appears in RBAC / the event service.
        /// Examples of operations include:
        /// * Microsoft.Compute/virtualMachine/capture/action
        /// * Microsoft.Compute/virtualMachine/restart/action
        /// * Microsoft.Compute/virtualMachine/write
        /// * Microsoft.Compute/virtualMachine/read
        /// * Microsoft.Compute/virtualMachine/delete
        /// Each action should include, in order:
        /// (1) Resource Provider Namespace
        /// (2) Type hierarchy for which the action applies (e.g. server/databases for a SQL
        /// Azure database)
        /// (3) Read, Write, Action or Delete indicating which type applies. If it is a PUT/PATCH
        /// on a collection or named value, Write should be used.
        /// If it is a GET, Read should be used. If it is a DELETE, Delete should be used. If it
        /// is a POST, Action should be used.
        /// As a note: all resource providers would need to include the &quot;{Resource Provider
        /// Namespace}/register/action&quot; operation in their response.
        /// This API is used to register for their service, and should include details about the
        /// operation (e.g. a localized name for the resource provider + any special
        /// considerations like PII release).
        /// </param>
        /// <param name="isDataAction"> Indicates whether the operation is a data action. </param>
        /// <param name="display">
        /// Contains the localized display information for this particular operation / action. These
        /// value will be used by several clients for
        /// (1) custom role definitions for RBAC;
        /// (2) complex query filters for the event service; and
        /// (3) audit history / records for management operations.
        /// </param>
        /// <param name="origin">
        /// Gets or sets Origin.
        /// The intended executor of the operation; governs the display of the operation in the
        /// RBAC UX and the audit logs UX.
        /// Default value is &quot;user,system&quot;.
        /// </param>
        /// <param name="properties"> ClientDiscovery properties. </param>
        /// <returns> A new <see cref="Models.MoverOperationsDiscovery"/> instance for mocking. </returns>
        public static MoverOperationsDiscovery MoverOperationsDiscovery(string name = null, bool? isDataAction = null, MoverDisplayInfo display = null, string origin = null, BinaryData properties = null)
        {
            return new MoverOperationsDiscovery(name, isDataAction, display, origin, properties);
        }

        /// <summary> Initializes a new instance of MoverDisplayInfo. </summary>
        /// <param name="provider">
        /// Gets or sets the provider.
        /// The localized friendly form of the resource provider name – it is expected to also
        /// include the publisher/company responsible.
        /// It should use Title Casing and begin with &quot;Microsoft&quot; for 1st party services.
        /// e.g. &quot;Microsoft Monitoring Insights&quot; or &quot;Microsoft Compute.&quot;.
        /// </param>
        /// <param name="resource">
        /// Gets or sets the resource.
        /// The localized friendly form of the resource related to this action/operation – it
        /// should match the public documentation for the resource provider.
        /// It should use Title Casing.
        /// This value should be unique for a particular URL type (e.g. nested types should *not*
        /// reuse their parent’s display.resource field)
        /// e.g. &quot;Virtual Machines&quot; or &quot;Scheduler Job Collections&quot;, or &quot;Virtual Machine VM Sizes&quot;
        /// or &quot;Scheduler Jobs&quot;.
        /// </param>
        /// <param name="operation">
        /// Gets or sets the operation.
        /// The localized friendly name for the operation, as it should be shown to the user.
        /// It should be concise (to fit in drop downs) but clear (i.e. self-documenting).
        /// It should use Title Casing.
        /// Prescriptive guidance: Read Create or Update Delete &apos;ActionName&apos;.
        /// </param>
        /// <param name="description">
        /// Gets or sets the description.
        /// The localized friendly description for the operation, as it should be shown to the
        /// user.
        /// It should be thorough, yet concise – it will be used in tool tips and detailed views.
        /// Prescriptive guidance for namespace:
        /// Read any &apos;display.provider&apos;  resource
        /// Create or Update any  &apos;display.provider&apos;  resource
        /// Delete any  &apos;display.provider&apos;  resource
        /// Perform any other action on any  &apos;display.provider&apos;  resource
        /// Prescriptive guidance for namespace:
        /// Read any &apos;display.resource&apos; Create or Update any  &apos;display.resource&apos; Delete any
        ///  &apos;display.resource&apos; &apos;ActionName&apos; any &apos;display.resources&apos;.
        /// </param>
        /// <returns> A new <see cref="Models.MoverDisplayInfo"/> instance for mocking. </returns>
        public static MoverDisplayInfo MoverDisplayInfo(string provider = null, string resource = null, string operation = null, string description = null)
        {
            return new MoverDisplayInfo(provider, resource, operation, description);
        }

        /// <summary> Initializes a new instance of RequiredForResourcesList. </summary>
        /// <param name="sourceIds"> Gets or sets the list of source Ids for which the input resource is required. </param>
        /// <returns> A new <see cref="Models.RequiredForResourcesList"/> instance for mocking. </returns>
        public static RequiredForResourcesList RequiredForResourcesList(IEnumerable<string> sourceIds = null)
        {
            sourceIds ??= new List<string>();

            return new RequiredForResourcesList(sourceIds?.ToList());
        }

        /// <summary> Initializes a new instance of VirtualMachineResourceSettings. </summary>
        /// <param name="targetResourceName"> Gets or sets the target Resource name. </param>
        /// <param name="tags"> Gets or sets the Resource tags. </param>
        /// <param name="userManagedIdentities"> Gets or sets user-managed identities. </param>
        /// <param name="targetAvailabilityZone"> Gets or sets the target availability zone. </param>
        /// <param name="targetVmSize"> Gets or sets the target virtual machine size. </param>
        /// <param name="targetAvailabilitySetId"> Gets or sets the target availability set id for virtual machines not in an availability set at source. </param>
        /// <returns> A new <see cref="Models.VirtualMachineResourceSettings"/> instance for mocking. </returns>
        public static VirtualMachineResourceSettings VirtualMachineResourceSettings(string targetResourceName = null, IDictionary<string, string> tags = null, IEnumerable<ResourceIdentifier> userManagedIdentities = null, MoverTargetAvailabilityZone? targetAvailabilityZone = null, string targetVmSize = null, ResourceIdentifier targetAvailabilitySetId = null)
        {
            tags ??= new Dictionary<string, string>();
            userManagedIdentities ??= new List<ResourceIdentifier>();

            return new VirtualMachineResourceSettings("Microsoft.Compute/virtualMachines", targetResourceName, tags, userManagedIdentities?.ToList(), targetAvailabilityZone, targetVmSize, targetAvailabilitySetId);
        }

        /// <summary> Initializes a new instance of MoverAvailabilitySetResourceSettings. </summary>
        /// <param name="targetResourceName"> Gets or sets the target Resource name. </param>
        /// <param name="tags"> Gets or sets the Resource tags. </param>
        /// <param name="faultDomain"> Gets or sets the target fault domain. </param>
        /// <param name="updateDomain"> Gets or sets the target update domain. </param>
        /// <returns> A new <see cref="Models.MoverAvailabilitySetResourceSettings"/> instance for mocking. </returns>
        public static MoverAvailabilitySetResourceSettings MoverAvailabilitySetResourceSettings(string targetResourceName = null, IDictionary<string, string> tags = null, int? faultDomain = null, int? updateDomain = null)
        {
            tags ??= new Dictionary<string, string>();

            return new MoverAvailabilitySetResourceSettings("Microsoft.Compute/availabilitySets", targetResourceName, tags, faultDomain, updateDomain);
        }

        /// <summary> Initializes a new instance of SubnetResourceSettings. </summary>
        /// <param name="name"> Gets or sets the Subnet name. </param>
        /// <param name="addressPrefix"> Gets or sets address prefix for the subnet. </param>
        /// <param name="networkSecurityGroupSourceArmResourceId"> Defines reference to NSG. </param>
        /// <returns> A new <see cref="Models.SubnetResourceSettings"/> instance for mocking. </returns>
        public static SubnetResourceSettings SubnetResourceSettings(string name = null, string addressPrefix = null, ResourceIdentifier networkSecurityGroupSourceArmResourceId = null)
        {
            return new SubnetResourceSettings(name, addressPrefix, new NetworkSecurityGroupResourceReferenceInfo(networkSecurityGroupSourceArmResourceId));
        }

        /// <summary> Initializes a new instance of MoverVirtualNetworkResourceSettings. </summary>
        /// <param name="targetResourceName"> Gets or sets the target Resource name. </param>
        /// <param name="tags"> Gets or sets the Resource tags. </param>
        /// <param name="enableDdosProtection">
        /// Gets or sets a value indicating whether gets or sets whether the
        /// DDOS protection should be switched on.
        /// </param>
        /// <param name="addressSpace"> Gets or sets the address prefixes for the virtual network. </param>
        /// <param name="dnsServers">
        /// Gets or sets DHCPOptions that contains an array of DNS servers available to VMs
        /// deployed in the virtual network.
        /// </param>
        /// <param name="subnets"> Gets or sets List of subnets in a VirtualNetwork. </param>
        /// <returns> A new <see cref="Models.MoverVirtualNetworkResourceSettings"/> instance for mocking. </returns>
        public static MoverVirtualNetworkResourceSettings MoverVirtualNetworkResourceSettings(string targetResourceName = null, IDictionary<string, string> tags = null, bool? enableDdosProtection = null, IEnumerable<string> addressSpace = null, IEnumerable<string> dnsServers = null, IEnumerable<SubnetResourceSettings> subnets = null)
        {
            tags ??= new Dictionary<string, string>();
            addressSpace ??= new List<string>();
            dnsServers ??= new List<string>();
            subnets ??= new List<SubnetResourceSettings>();

            return new MoverVirtualNetworkResourceSettings("Microsoft.Network/virtualNetworks", targetResourceName, tags, enableDdosProtection, addressSpace?.ToList(), dnsServers?.ToList(), subnets?.ToList());
        }

        /// <summary> Initializes a new instance of ProxyResourceReferenceInfo. </summary>
        /// <param name="sourceArmResourceId"> Gets the ARM resource ID of the tracked resource being referenced. </param>
        /// <param name="name"> Gets the name of the proxy resource on the target side. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sourceArmResourceId"/> is null. </exception>
        /// <returns> A new <see cref="Models.ProxyResourceReferenceInfo"/> instance for mocking. </returns>
        public static ProxyResourceReferenceInfo ProxyResourceReferenceInfo(ResourceIdentifier sourceArmResourceId = null, string name = null)
        {
            if (sourceArmResourceId == null)
            {
                throw new ArgumentNullException(nameof(sourceArmResourceId));
            }

            return new ProxyResourceReferenceInfo(sourceArmResourceId, name);
        }

        /// <summary> Initializes a new instance of NetworkInterfaceResourceSettings. </summary>
        /// <param name="targetResourceName"> Gets or sets the target Resource name. </param>
        /// <param name="tags"> Gets or sets the Resource tags. </param>
        /// <param name="ipConfigurations"> Gets or sets the IP configurations of the NIC. </param>
        /// <param name="enableAcceleratedNetworking"> Gets or sets a value indicating whether accelerated networking is enabled. </param>
        /// <returns> A new <see cref="Models.NetworkInterfaceResourceSettings"/> instance for mocking. </returns>
        public static NetworkInterfaceResourceSettings NetworkInterfaceResourceSettings(string targetResourceName = null, IDictionary<string, string> tags = null, IEnumerable<NicIPConfigurationResourceSettings> ipConfigurations = null, bool? enableAcceleratedNetworking = null)
        {
            tags ??= new Dictionary<string, string>();
            ipConfigurations ??= new List<NicIPConfigurationResourceSettings>();

            return new NetworkInterfaceResourceSettings("Microsoft.Network/networkInterfaces", targetResourceName, tags, ipConfigurations?.ToList(), enableAcceleratedNetworking);
        }

        /// <summary> Initializes a new instance of NicIPConfigurationResourceSettings. </summary>
        /// <param name="name"> Gets or sets the IP configuration name. </param>
        /// <param name="privateIPAddress"> Gets or sets the private IP address of the network interface IP Configuration. </param>
        /// <param name="privateIPAllocationMethod"> Gets or sets the private IP address allocation method. </param>
        /// <param name="subnet"> Defines reference to subnet. </param>
        /// <param name="isPrimary"> Gets or sets a value indicating whether this IP configuration is the primary. </param>
        /// <param name="loadBalancerBackendAddressPools"> Gets or sets the references of the load balancer backend address pools. </param>
        /// <param name="loadBalancerNatRules"> Gets or sets the references of the load balancer NAT rules. </param>
        /// <param name="publicIPSourceArmResourceId"> Defines reference to a public IP. </param>
        /// <returns> A new <see cref="Models.NicIPConfigurationResourceSettings"/> instance for mocking. </returns>
        public static NicIPConfigurationResourceSettings NicIPConfigurationResourceSettings(string name = null, IPAddress privateIPAddress = null, string privateIPAllocationMethod = null, SubnetReferenceInfo subnet = null, bool? isPrimary = null, IEnumerable<LoadBalancerBackendAddressPoolReferenceInfo> loadBalancerBackendAddressPools = null, IEnumerable<LoadBalancerNatRuleReferenceInfo> loadBalancerNatRules = null, ResourceIdentifier publicIPSourceArmResourceId = null)
        {
            loadBalancerBackendAddressPools ??= new List<LoadBalancerBackendAddressPoolReferenceInfo>();
            loadBalancerNatRules ??= new List<LoadBalancerNatRuleReferenceInfo>();

            return new NicIPConfigurationResourceSettings(name, privateIPAddress, privateIPAllocationMethod, subnet, isPrimary, loadBalancerBackendAddressPools?.ToList(), loadBalancerNatRules?.ToList(), new PublicIPReferenceInfo(publicIPSourceArmResourceId));
        }

        /// <summary> Initializes a new instance of SubnetReferenceInfo. </summary>
        /// <param name="sourceArmResourceId"> Gets the ARM resource ID of the tracked resource being referenced. </param>
        /// <param name="name"> Gets the name of the proxy resource on the target side. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sourceArmResourceId"/> is null. </exception>
        /// <returns> A new <see cref="Models.SubnetReferenceInfo"/> instance for mocking. </returns>
        public static SubnetReferenceInfo SubnetReferenceInfo(ResourceIdentifier sourceArmResourceId = null, string name = null)
        {
            if (sourceArmResourceId == null)
            {
                throw new ArgumentNullException(nameof(sourceArmResourceId));
            }

            return new SubnetReferenceInfo(sourceArmResourceId, name);
        }

        /// <summary> Initializes a new instance of LoadBalancerBackendAddressPoolReferenceInfo. </summary>
        /// <param name="sourceArmResourceId"> Gets the ARM resource ID of the tracked resource being referenced. </param>
        /// <param name="name"> Gets the name of the proxy resource on the target side. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sourceArmResourceId"/> is null. </exception>
        /// <returns> A new <see cref="Models.LoadBalancerBackendAddressPoolReferenceInfo"/> instance for mocking. </returns>
        public static LoadBalancerBackendAddressPoolReferenceInfo LoadBalancerBackendAddressPoolReferenceInfo(ResourceIdentifier sourceArmResourceId = null, string name = null)
        {
            if (sourceArmResourceId == null)
            {
                throw new ArgumentNullException(nameof(sourceArmResourceId));
            }

            return new LoadBalancerBackendAddressPoolReferenceInfo(sourceArmResourceId, name);
        }

        /// <summary> Initializes a new instance of LoadBalancerNatRuleReferenceInfo. </summary>
        /// <param name="sourceArmResourceId"> Gets the ARM resource ID of the tracked resource being referenced. </param>
        /// <param name="name"> Gets the name of the proxy resource on the target side. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sourceArmResourceId"/> is null. </exception>
        /// <returns> A new <see cref="Models.LoadBalancerNatRuleReferenceInfo"/> instance for mocking. </returns>
        public static LoadBalancerNatRuleReferenceInfo LoadBalancerNatRuleReferenceInfo(ResourceIdentifier sourceArmResourceId = null, string name = null)
        {
            if (sourceArmResourceId == null)
            {
                throw new ArgumentNullException(nameof(sourceArmResourceId));
            }

            return new LoadBalancerNatRuleReferenceInfo(sourceArmResourceId, name);
        }

        /// <summary> Initializes a new instance of NetworkSecurityGroupSecurityRule. </summary>
        /// <param name="name"> Gets or sets the Security rule name. </param>
        /// <param name="access">
        /// Gets or sets whether network traffic is allowed or denied.
        /// Possible values are “Allow” and “Deny”.
        /// </param>
        /// <param name="description"> Gets or sets a description for this rule. Restricted to 140 chars. </param>
        /// <param name="destinationAddressPrefix">
        /// Gets or sets destination address prefix. CIDR or source IP range.
        ///  A “*” can also be used to match all source IPs. Default tags such
        /// as ‘VirtualNetwork’, ‘AzureLoadBalancer’ and ‘Internet’ can also be used.
        /// </param>
        /// <param name="destinationPortRange">
        /// Gets or sets Destination Port or Range. Integer or range between
        /// 0 and 65535. A “*” can also be used to match all ports.
        /// </param>
        /// <param name="direction">
        /// Gets or sets the direction of the rule.InBound or Outbound. The
        /// direction specifies if rule will be evaluated on incoming or outgoing traffic.
        /// </param>
        /// <param name="priority">
        /// Gets or sets the priority of the rule. The value can be between
        /// 100 and 4096. The priority number must be unique for each rule in the collection.
        /// The lower the priority number, the higher the priority of the rule.
        /// </param>
        /// <param name="protocol"> Gets or sets Network protocol this rule applies to. Can be Tcp, Udp or All(*). </param>
        /// <param name="sourceAddressPrefix">
        /// Gets or sets source address prefix. CIDR or source IP range. A
        /// “*” can also be used to match all source IPs.  Default tags such as ‘VirtualNetwork’,
        /// ‘AzureLoadBalancer’ and ‘Internet’ can also be used. If this is an ingress
        /// rule, specifies where network traffic originates from.
        /// </param>
        /// <param name="sourcePortRange">
        /// Gets or sets Source Port or Range. Integer or range between 0 and
        /// 65535. A “*” can also be used to match all ports.
        /// </param>
        /// <returns> A new <see cref="Models.NetworkSecurityGroupSecurityRule"/> instance for mocking. </returns>
        public static NetworkSecurityGroupSecurityRule NetworkSecurityGroupSecurityRule(string name = null, string access = null, string description = null, string destinationAddressPrefix = null, string destinationPortRange = null, string direction = null, int? priority = null, string protocol = null, string sourceAddressPrefix = null, string sourcePortRange = null)
        {
            return new NetworkSecurityGroupSecurityRule(name, access, description, destinationAddressPrefix, destinationPortRange, direction, priority, protocol, sourceAddressPrefix, sourcePortRange);
        }

        /// <summary> Initializes a new instance of NetworkSecurityGroupResourceSettings. </summary>
        /// <param name="targetResourceName"> Gets or sets the target Resource name. </param>
        /// <param name="tags"> Gets or sets the Resource tags. </param>
        /// <param name="securityRules"> Gets or sets Security rules of network security group. </param>
        /// <returns> A new <see cref="Models.NetworkSecurityGroupResourceSettings"/> instance for mocking. </returns>
        public static NetworkSecurityGroupResourceSettings NetworkSecurityGroupResourceSettings(string targetResourceName = null, IDictionary<string, string> tags = null, IEnumerable<NetworkSecurityGroupSecurityRule> securityRules = null)
        {
            tags ??= new Dictionary<string, string>();
            securityRules ??= new List<NetworkSecurityGroupSecurityRule>();

            return new NetworkSecurityGroupResourceSettings("Microsoft.Network/networkSecurityGroups", targetResourceName, tags, securityRules?.ToList());
        }

        /// <summary> Initializes a new instance of LoadBalancerFrontendIPConfigurationResourceSettings. </summary>
        /// <param name="name"> Gets or sets the frontend IP configuration name. </param>
        /// <param name="privateIPAddress">
        /// Gets or sets the IP address of the Load Balancer.This is only specified if a specific
        /// private IP address shall be allocated from the subnet specified in subnetRef.
        /// </param>
        /// <param name="privateIPAllocationMethod"> Gets or sets PrivateIP allocation method (Static/Dynamic). </param>
        /// <param name="subnet"> Defines reference to subnet. </param>
        /// <param name="zones"> Gets or sets the csv list of zones. </param>
        /// <returns> A new <see cref="Models.LoadBalancerFrontendIPConfigurationResourceSettings"/> instance for mocking. </returns>
        public static LoadBalancerFrontendIPConfigurationResourceSettings LoadBalancerFrontendIPConfigurationResourceSettings(string name = null, IPAddress privateIPAddress = null, string privateIPAllocationMethod = null, SubnetReferenceInfo subnet = null, string zones = null)
        {
            return new LoadBalancerFrontendIPConfigurationResourceSettings(name, privateIPAddress, privateIPAllocationMethod, subnet, zones);
        }

        /// <summary> Initializes a new instance of LoadBalancerBackendAddressPoolResourceSettings. </summary>
        /// <param name="name"> Gets or sets the backend address pool name. </param>
        /// <returns> A new <see cref="Models.LoadBalancerBackendAddressPoolResourceSettings"/> instance for mocking. </returns>
        public static LoadBalancerBackendAddressPoolResourceSettings LoadBalancerBackendAddressPoolResourceSettings(string name = null)
        {
            return new LoadBalancerBackendAddressPoolResourceSettings(name);
        }

        /// <summary> Initializes a new instance of LoadBalancerResourceSettings. </summary>
        /// <param name="targetResourceName"> Gets or sets the target Resource name. </param>
        /// <param name="tags"> Gets or sets the Resource tags. </param>
        /// <param name="sku"> Gets or sets load balancer sku (Basic/Standard). </param>
        /// <param name="frontendIPConfigurations"> Gets or sets the frontend IP configurations of the load balancer. </param>
        /// <param name="backendAddressPools"> Gets or sets the backend address pools of the load balancer. </param>
        /// <param name="zones">
        /// Gets or sets the csv list of zones common for all frontend IP configurations. Note this is given
        ///  precedence only if frontend IP configurations settings are not present.
        /// </param>
        /// <returns> A new <see cref="Models.LoadBalancerResourceSettings"/> instance for mocking. </returns>
        public static LoadBalancerResourceSettings LoadBalancerResourceSettings(string targetResourceName = null, IDictionary<string, string> tags = null, string sku = null, IEnumerable<LoadBalancerFrontendIPConfigurationResourceSettings> frontendIPConfigurations = null, IEnumerable<LoadBalancerBackendAddressPoolResourceSettings> backendAddressPools = null, string zones = null)
        {
            tags ??= new Dictionary<string, string>();
            frontendIPConfigurations ??= new List<LoadBalancerFrontendIPConfigurationResourceSettings>();
            backendAddressPools ??= new List<LoadBalancerBackendAddressPoolResourceSettings>();

            return new LoadBalancerResourceSettings("Microsoft.Network/loadBalancers", targetResourceName, tags, sku, frontendIPConfigurations?.ToList(), backendAddressPools?.ToList(), zones);
        }

        /// <summary> Initializes a new instance of SqlServerResourceSettings. </summary>
        /// <param name="targetResourceName"> Gets or sets the target Resource name. </param>
        /// <returns> A new <see cref="Models.SqlServerResourceSettings"/> instance for mocking. </returns>
        public static SqlServerResourceSettings SqlServerResourceSettings(string targetResourceName = null)
        {
            return new SqlServerResourceSettings("Microsoft.Sql/servers", targetResourceName);
        }

        /// <summary> Initializes a new instance of SqlElasticPoolResourceSettings. </summary>
        /// <param name="targetResourceName"> Gets or sets the target Resource name. </param>
        /// <param name="tags"> Gets or sets the Resource tags. </param>
        /// <param name="zoneRedundant"> Defines the zone redundant resource setting. </param>
        /// <returns> A new <see cref="Models.SqlElasticPoolResourceSettings"/> instance for mocking. </returns>
        public static SqlElasticPoolResourceSettings SqlElasticPoolResourceSettings(string targetResourceName = null, IDictionary<string, string> tags = null, ResourceZoneRedundantSetting? zoneRedundant = null)
        {
            tags ??= new Dictionary<string, string>();

            return new SqlElasticPoolResourceSettings("Microsoft.Sql/servers/elasticPools", targetResourceName, tags, zoneRedundant);
        }

        /// <summary> Initializes a new instance of SqlDatabaseResourceSettings. </summary>
        /// <param name="targetResourceName"> Gets or sets the target Resource name. </param>
        /// <param name="tags"> Gets or sets the Resource tags. </param>
        /// <param name="zoneRedundant"> Defines the zone redundant resource setting. </param>
        /// <returns> A new <see cref="Models.SqlDatabaseResourceSettings"/> instance for mocking. </returns>
        public static SqlDatabaseResourceSettings SqlDatabaseResourceSettings(string targetResourceName = null, IDictionary<string, string> tags = null, ResourceZoneRedundantSetting? zoneRedundant = null)
        {
            tags ??= new Dictionary<string, string>();

            return new SqlDatabaseResourceSettings("Microsoft.Sql/servers/databases", targetResourceName, tags, zoneRedundant);
        }

        /// <summary> Initializes a new instance of ResourceGroupResourceSettings. </summary>
        /// <param name="targetResourceName"> Gets or sets the target Resource name. </param>
        /// <returns> A new <see cref="Models.ResourceGroupResourceSettings"/> instance for mocking. </returns>
        public static ResourceGroupResourceSettings ResourceGroupResourceSettings(string targetResourceName = null)
        {
            return new ResourceGroupResourceSettings("resourceGroups", targetResourceName);
        }

        /// <summary> Initializes a new instance of PublicIPAddressResourceSettings. </summary>
        /// <param name="targetResourceName"> Gets or sets the target Resource name. </param>
        /// <param name="tags"> Gets or sets the Resource tags. </param>
        /// <param name="domainNameLabel"> Gets or sets the domain name label. </param>
        /// <param name="fqdn"> Gets or sets the fully qualified domain name. </param>
        /// <param name="publicIPAllocationMethod"> Gets or sets public IP allocation method. </param>
        /// <param name="sku"> Gets or sets public IP sku. </param>
        /// <param name="zones"> Gets or sets public IP zones. </param>
        /// <returns> A new <see cref="Models.PublicIPAddressResourceSettings"/> instance for mocking. </returns>
        public static PublicIPAddressResourceSettings PublicIPAddressResourceSettings(string targetResourceName = null, IDictionary<string, string> tags = null, string domainNameLabel = null, string fqdn = null, string publicIPAllocationMethod = null, string sku = null, string zones = null)
        {
            tags ??= new Dictionary<string, string>();

            return new PublicIPAddressResourceSettings("Microsoft.Network/publicIPAddresses", targetResourceName, tags, domainNameLabel, fqdn, publicIPAllocationMethod, sku, zones);
        }

        /// <summary> Initializes a new instance of KeyVaultResourceSettings. </summary>
        /// <param name="targetResourceName"> Gets or sets the target Resource name. </param>
        /// <returns> A new <see cref="Models.KeyVaultResourceSettings"/> instance for mocking. </returns>
        public static KeyVaultResourceSettings KeyVaultResourceSettings(string targetResourceName = null)
        {
            return new KeyVaultResourceSettings("Microsoft.KeyVault/vaults", targetResourceName);
        }

        /// <summary> Initializes a new instance of DiskEncryptionSetResourceSettings. </summary>
        /// <param name="targetResourceName"> Gets or sets the target Resource name. </param>
        /// <returns> A new <see cref="Models.DiskEncryptionSetResourceSettings"/> instance for mocking. </returns>
        public static DiskEncryptionSetResourceSettings DiskEncryptionSetResourceSettings(string targetResourceName = null)
        {
            return new DiskEncryptionSetResourceSettings("Microsoft.Compute/diskEncryptionSets", targetResourceName);
        }
    }
}
