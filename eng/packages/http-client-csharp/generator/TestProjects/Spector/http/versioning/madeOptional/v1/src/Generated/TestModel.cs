// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Versioning.MadeOptional.V1;

namespace Versioning.MadeOptional
{
    /// <summary> The TestModel. </summary>
    public partial class TestModel
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="TestModel"/>. </summary>
        /// <param name="prop"></param>
        /// <param name="changedProp"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="prop"/> or <paramref name="changedProp"/> is null. </exception>
        public TestModel(string prop, string changedProp)
        {
            Argument.AssertNotNull(prop, nameof(prop));
            Argument.AssertNotNull(changedProp, nameof(changedProp));

            Prop = prop;
            ChangedProp = changedProp;
        }

        /// <summary> Initializes a new instance of <see cref="TestModel"/>. </summary>
        /// <param name="prop"></param>
        /// <param name="changedProp"></param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal TestModel(string prop, string changedProp, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Prop = prop;
            ChangedProp = changedProp;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Gets or sets the Prop. </summary>
        public string Prop { get; set; }

        /// <summary> Gets or sets the ChangedProp. </summary>
        public string ChangedProp { get; set; }
    }
}
