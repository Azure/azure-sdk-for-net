// <auto-generated/>

#nullable disable

using Azure;
using Azure.Core;

namespace Parameters.Spread
{
    /// <summary></summary>
    public partial class Alias
    {
        private static ResponseClassifier _pipelineMessageClassifier204;

        private static ResponseClassifier PipelineMessageClassifier204 => _pipelineMessageClassifier204 = new StatusCodeClassifier(stackalloc ushort[] { 204 });

        internal HttpMessage CreateSpreadAsRequestBodyRequest(RequestContent content, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Put;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/parameters/spread/alias/request-body", false);
            request.Uri = uri;
            request.Headers.SetValue("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateSpreadParameterWithInnerModelRequest(string id, string xMsTestHeader, RequestContent content, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/parameters/spread/alias/inner-model-parameter/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.SetValue("x-ms-test-header", xMsTestHeader);
            request.Headers.SetValue("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateSpreadAsRequestParameterRequest(string id, string xMsTestHeader, RequestContent content, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Put;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/parameters/spread/alias/request-parameter/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.SetValue("x-ms-test-header", xMsTestHeader);
            request.Headers.SetValue("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateSpreadWithMultipleParametersRequest(string id, string xMsTestHeader, RequestContent content, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Put;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/parameters/spread/alias/multiple-parameters/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.SetValue("x-ms-test-header", xMsTestHeader);
            request.Headers.SetValue("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateSpreadParameterWithInnerAliasRequest(string id, string xMsTestHeader, RequestContent content, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/parameters/spread/alias/inner-alias-parameter/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.SetValue("x-ms-test-header", xMsTestHeader);
            request.Headers.SetValue("Content-Type", "application/json");
            request.Content = content;
            return message;
        }
    }
}
