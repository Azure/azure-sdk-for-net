// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Server.Versions.NotVersioned
{
    /// <summary> Illustrates not-versioned server. </summary>
    public partial class NotVersionedClient
    {
        private readonly Uri _endpoint;

        /// <summary> Initializes a new instance of NotVersionedClient for mocking. </summary>
        protected NotVersionedClient()
        {
        }

        /// <summary> Initializes a new instance of NotVersionedClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public NotVersionedClient(Uri endpoint) : this(endpoint, new NotVersionedClientOptions())
        {
        }

        /// <summary> Initializes a new instance of NotVersionedClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public NotVersionedClient(Uri endpoint, NotVersionedClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));

            options ??= new NotVersionedClientOptions();

            _endpoint = endpoint;
            Pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>());
            ClientDiagnostics = new ClientDiagnostics(options, true);
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary>
        /// [Protocol Method] WithoutApiVersion
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response WithoutApiVersion(RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("NotVersionedClient.WithoutApiVersion");
            scope.Start();
            try
            {
                using HttpMessage message = CreateWithoutApiVersionRequest(context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] WithoutApiVersion
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> WithoutApiVersionAsync(RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("NotVersionedClient.WithoutApiVersion");
            scope.Start();
            try
            {
                using HttpMessage message = CreateWithoutApiVersionRequest(context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> WithoutApiVersion. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response WithoutApiVersion(CancellationToken cancellationToken = default)
        {
            return WithoutApiVersion(cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> WithoutApiVersion. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> WithoutApiVersionAsync(CancellationToken cancellationToken = default)
        {
            return await WithoutApiVersionAsync(cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] WithQueryApiVersion
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="apiVersion"></param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="apiVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response WithQueryApiVersion(string apiVersion, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("NotVersionedClient.WithQueryApiVersion");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(apiVersion, nameof(apiVersion));

                using HttpMessage message = CreateWithQueryApiVersionRequest(apiVersion, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] WithQueryApiVersion
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="apiVersion"></param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="apiVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> WithQueryApiVersionAsync(string apiVersion, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("NotVersionedClient.WithQueryApiVersion");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(apiVersion, nameof(apiVersion));

                using HttpMessage message = CreateWithQueryApiVersionRequest(apiVersion, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> WithQueryApiVersion. </summary>
        /// <param name="apiVersion"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="apiVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response WithQueryApiVersion(string apiVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(apiVersion, nameof(apiVersion));

            return WithQueryApiVersion(apiVersion, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> WithQueryApiVersion. </summary>
        /// <param name="apiVersion"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="apiVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> WithQueryApiVersionAsync(string apiVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(apiVersion, nameof(apiVersion));

            return await WithQueryApiVersionAsync(apiVersion, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] WithPathApiVersion
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="apiVersion"></param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="apiVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response WithPathApiVersion(string apiVersion, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("NotVersionedClient.WithPathApiVersion");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(apiVersion, nameof(apiVersion));

                using HttpMessage message = CreateWithPathApiVersionRequest(apiVersion, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] WithPathApiVersion
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="apiVersion"></param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="apiVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> WithPathApiVersionAsync(string apiVersion, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("NotVersionedClient.WithPathApiVersion");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(apiVersion, nameof(apiVersion));

                using HttpMessage message = CreateWithPathApiVersionRequest(apiVersion, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> WithPathApiVersion. </summary>
        /// <param name="apiVersion"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="apiVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response WithPathApiVersion(string apiVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(apiVersion, nameof(apiVersion));

            return WithPathApiVersion(apiVersion, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> WithPathApiVersion. </summary>
        /// <param name="apiVersion"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="apiVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> WithPathApiVersionAsync(string apiVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(apiVersion, nameof(apiVersion));

            return await WithPathApiVersionAsync(apiVersion, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }
    }
}
