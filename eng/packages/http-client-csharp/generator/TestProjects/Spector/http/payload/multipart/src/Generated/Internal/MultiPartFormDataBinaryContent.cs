// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.IO;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;

namespace Payload.MultiPart
{
    internal partial class MultiPartFormDataBinaryContent : BinaryContent
    {
        public MultiPartFormDataBinaryContent() => throw null;

        public string ContentType => throw null;

        public void Add(string content, string name, string filename = default, string contentType = default) => throw null;

        public void Add(int content, string name, string filename = default, string contentType = default) => throw null;

        public void Add(long content, string name, string filename = default, string contentType = default) => throw null;

        public void Add(float content, string name, string filename = default, string contentType = default) => throw null;

        public void Add(double content, string name, string filename = default, string contentType = default) => throw null;

        public void Add(decimal content, string name, string filename = default, string contentType = default) => throw null;

        public void Add(bool content, string name, string filename = default, string contentType = default) => throw null;

        public void Add(Stream content, string name, string filename = default, string contentType = default) => throw null;

        public void Add(byte[] content, string name, string filename = default, string contentType = default) => throw null;

        public void Add(BinaryData content, string name, string filename = default, string contentType = default) => throw null;

        public static void AddContentTypeHeader(HttpContent content, string contentType) => throw null;

        public override bool TryComputeLength(out long length) => throw null;

        public override void WriteTo(Stream stream, CancellationToken cancellationToken = default) => throw null;

        public override Task WriteToAsync(Stream stream, CancellationToken cancellationToken = default) => throw null;

        public override void Dispose() => throw null;
    }
}
