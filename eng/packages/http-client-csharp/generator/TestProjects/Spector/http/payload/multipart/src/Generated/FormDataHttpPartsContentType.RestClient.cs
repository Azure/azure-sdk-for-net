// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure;
using Azure.Core;

namespace Payload.MultiPart
{
    /// <summary></summary>
    public partial class FormDataHttpPartsContentType
    {
        private static ResponseClassifier _pipelineMessageClassifier204;

        private static ResponseClassifier PipelineMessageClassifier204 => _pipelineMessageClassifier204 = new StatusCodeClassifier(stackalloc ushort[] { 204 });

        internal HttpMessage CreateImageJpegContentTypeRequest(RequestContent content, string contentType, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/multipart/form-data/check-filename-and-specific-content-type-with-httppart", false);
            request.Uri = uri;
            request.Headers.SetValue("Content-Type", contentType);
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateRequiredContentTypeRequest(RequestContent content, string contentType, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/multipart/form-data/check-filename-and-required-content-type-with-httppart", false);
            request.Uri = uri;
            request.Headers.SetValue("Content-Type", contentType);
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateOptionalContentTypeRequest(RequestContent content, string contentType, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/multipart/form-data/file-with-http-part-optional-content-type", false);
            request.Uri = uri;
            request.Headers.SetValue("Content-Type", contentType);
            request.Content = content;
            return message;
        }
    }
}
