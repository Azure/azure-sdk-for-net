// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using SpecialWords._Models;

namespace SpecialWords
{
    public partial class Models
    {
        protected Models() => throw null;

        public HttpPipeline Pipeline => throw null;

        public virtual Response WithAnd(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithAndAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithAnd(And body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithAndAsync(And body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithAs(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithAsAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithAs(As body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithAsAsync(As body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithAssert(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithAssertAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithAssert(Assert body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithAssertAsync(Assert body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithAsyncAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithAsync(Async body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithAsyncAsync(Async body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithAwait(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithAwaitAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithAwait(Await body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithAwaitAsync(Await body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithBreak(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithBreakAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithBreak(Break body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithBreakAsync(Break body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithClass(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithClassAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithClass(Class body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithClassAsync(Class body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithConstructor(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithConstructorAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithConstructor(Constructor body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithConstructorAsync(Constructor body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithContinue(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithContinueAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithContinue(Continue body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithContinueAsync(Continue body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithDef(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithDefAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithDef(Def body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithDefAsync(Def body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithDel(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithDelAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithDel(Del body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithDelAsync(Del body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithElif(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithElifAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithElif(Elif body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithElifAsync(Elif body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithElse(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithElseAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithElse(Else body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithElseAsync(Else body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithExcept(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithExceptAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithExcept(Except body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithExceptAsync(Except body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithExec(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithExecAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithExec(Exec body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithExecAsync(Exec body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithFinally(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithFinallyAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithFinally(Finally body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithFinallyAsync(Finally body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithFor(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithForAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithFor(For body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithForAsync(For body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithFrom(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithFromAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithFrom(From body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithFromAsync(From body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithGlobal(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithGlobalAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithGlobal(Global body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithGlobalAsync(Global body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithIf(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithIfAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithIf(If body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithIfAsync(If body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithImport(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithImportAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithImport(Import body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithImportAsync(Import body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithIn(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithInAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithIn(In body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithInAsync(In body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithIs(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithIsAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithIs(Is body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithIsAsync(Is body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithLambda(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithLambdaAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithLambda(Lambda body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithLambdaAsync(Lambda body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithNot(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithNotAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithNot(Not body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithNotAsync(Not body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithOr(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithOrAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithOr(Or body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithOrAsync(Or body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithPass(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithPassAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithPass(Pass body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithPassAsync(Pass body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithRaise(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithRaiseAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithRaise(Raise body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithRaiseAsync(Raise body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithReturn(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithReturnAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithReturn(Return body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithReturnAsync(Return body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithTry(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithTryAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithTry(Try body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithTryAsync(Try body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithWhile(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithWhileAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithWhile(While body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithWhileAsync(While body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithWith(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithWithAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithWith(With body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithWithAsync(With body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithYield(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> WithYieldAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response WithYield(Yield body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithYieldAsync(Yield body, CancellationToken cancellationToken = default) => throw null;
    }
}
