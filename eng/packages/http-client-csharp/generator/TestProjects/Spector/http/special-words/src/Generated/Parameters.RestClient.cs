// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure;
using Azure.Core;

namespace SpecialWords
{
    /// <summary></summary>
    public partial class Parameters
    {
        private static ResponseClassifier _pipelineMessageClassifier204;

        private static ResponseClassifier PipelineMessageClassifier204 => _pipelineMessageClassifier204 = new StatusCodeClassifier(stackalloc ushort[] { 204 });

        internal HttpMessage CreateWithAndRequest(string @and, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/and", false);
            uri.AppendQuery("and", @and, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithAsRequest(string @as, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/as", false);
            uri.AppendQuery("as", @as, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithAssertRequest(string assert, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/assert", false);
            uri.AppendQuery("assert", assert, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithAsyncRequest(string @async, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/async", false);
            uri.AppendQuery("async", @async, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithAwaitRequest(string @await, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/await", false);
            uri.AppendQuery("await", @await, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithBreakRequest(string @break, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/break", false);
            uri.AppendQuery("break", @break, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithClassRequest(string @class, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/class", false);
            uri.AppendQuery("class", @class, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithConstructorRequest(string constructor, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/constructor", false);
            uri.AppendQuery("constructor", constructor, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithContinueRequest(string @continue, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/continue", false);
            uri.AppendQuery("continue", @continue, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithDefRequest(string def, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/def", false);
            uri.AppendQuery("def", def, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithDelRequest(string del, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/del", false);
            uri.AppendQuery("del", del, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithElifRequest(string elif, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/elif", false);
            uri.AppendQuery("elif", elif, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithElseRequest(string @else, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/else", false);
            uri.AppendQuery("else", @else, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithExceptRequest(string except, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/except", false);
            uri.AppendQuery("except", except, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithExecRequest(string exec, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/exec", false);
            uri.AppendQuery("exec", exec, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithFinallyRequest(string @finally, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/finally", false);
            uri.AppendQuery("finally", @finally, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithForRequest(string @for, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/for", false);
            uri.AppendQuery("for", @for, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithFromRequest(string @from, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/from", false);
            uri.AppendQuery("from", @from, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithGlobalRequest(string @global, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/global", false);
            uri.AppendQuery("global", @global, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithIfRequest(string @if, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/if", false);
            uri.AppendQuery("if", @if, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithImportRequest(string import, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/import", false);
            uri.AppendQuery("import", import, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithInRequest(string @in, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/in", false);
            uri.AppendQuery("in", @in, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithIsRequest(string @is, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/is", false);
            uri.AppendQuery("is", @is, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithLambdaRequest(string lambda, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/lambda", false);
            uri.AppendQuery("lambda", lambda, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithNotRequest(string @not, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/not", false);
            uri.AppendQuery("not", @not, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithOrRequest(string @or, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/or", false);
            uri.AppendQuery("or", @or, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithPassRequest(string pass, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/pass", false);
            uri.AppendQuery("pass", pass, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithRaiseRequest(string raise, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/raise", false);
            uri.AppendQuery("raise", raise, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithReturnRequest(string @return, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/return", false);
            uri.AppendQuery("return", @return, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithTryRequest(string @try, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/try", false);
            uri.AppendQuery("try", @try, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithWhileRequest(string @while, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/while", false);
            uri.AppendQuery("while", @while, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithWithRequest(string @with, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/with", false);
            uri.AppendQuery("with", @with, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithYieldRequest(string @yield, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/yield", false);
            uri.AppendQuery("yield", @yield, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateWithCancellationTokenRequest(string cancellationToken, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/special-words/parameters/cancellationToken", false);
            uri.AppendQuery("cancellationToken", cancellationToken, true);
            request.Uri = uri;
            return message;
        }
    }
}
