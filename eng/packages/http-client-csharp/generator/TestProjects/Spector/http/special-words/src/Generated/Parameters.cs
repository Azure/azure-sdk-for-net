// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;

namespace SpecialWords
{
    public partial class Parameters
    {
        protected Parameters() => throw null;

        public HttpPipeline Pipeline => throw null;

        public virtual Response WithAnd(string @and, RequestContext context) => throw null;

        public virtual Task<Response> WithAndAsync(string @and, RequestContext context) => throw null;

        public virtual Response WithAnd(string @and, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithAndAsync(string @and, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithAs(string @as, RequestContext context) => throw null;

        public virtual Task<Response> WithAsAsync(string @as, RequestContext context) => throw null;

        public virtual Response WithAs(string @as, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithAsAsync(string @as, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithAssert(string assert, RequestContext context) => throw null;

        public virtual Task<Response> WithAssertAsync(string assert, RequestContext context) => throw null;

        public virtual Response WithAssert(string assert, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithAssertAsync(string assert, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithAsync(string @async, RequestContext context) => throw null;

        public virtual Task<Response> WithAsyncAsync(string @async, RequestContext context) => throw null;

        public virtual Response WithAsync(string @async, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithAsyncAsync(string @async, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithAwait(string @await, RequestContext context) => throw null;

        public virtual Task<Response> WithAwaitAsync(string @await, RequestContext context) => throw null;

        public virtual Response WithAwait(string @await, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithAwaitAsync(string @await, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithBreak(string @break, RequestContext context) => throw null;

        public virtual Task<Response> WithBreakAsync(string @break, RequestContext context) => throw null;

        public virtual Response WithBreak(string @break, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithBreakAsync(string @break, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithClass(string @class, RequestContext context) => throw null;

        public virtual Task<Response> WithClassAsync(string @class, RequestContext context) => throw null;

        public virtual Response WithClass(string @class, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithClassAsync(string @class, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithConstructor(string constructor, RequestContext context) => throw null;

        public virtual Task<Response> WithConstructorAsync(string constructor, RequestContext context) => throw null;

        public virtual Response WithConstructor(string constructor, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithConstructorAsync(string constructor, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithContinue(string @continue, RequestContext context) => throw null;

        public virtual Task<Response> WithContinueAsync(string @continue, RequestContext context) => throw null;

        public virtual Response WithContinue(string @continue, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithContinueAsync(string @continue, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithDef(string def, RequestContext context) => throw null;

        public virtual Task<Response> WithDefAsync(string def, RequestContext context) => throw null;

        public virtual Response WithDef(string def, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithDefAsync(string def, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithDel(string del, RequestContext context) => throw null;

        public virtual Task<Response> WithDelAsync(string del, RequestContext context) => throw null;

        public virtual Response WithDel(string del, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithDelAsync(string del, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithElif(string elif, RequestContext context) => throw null;

        public virtual Task<Response> WithElifAsync(string elif, RequestContext context) => throw null;

        public virtual Response WithElif(string elif, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithElifAsync(string elif, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithElse(string @else, RequestContext context) => throw null;

        public virtual Task<Response> WithElseAsync(string @else, RequestContext context) => throw null;

        public virtual Response WithElse(string @else, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithElseAsync(string @else, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithExcept(string except, RequestContext context) => throw null;

        public virtual Task<Response> WithExceptAsync(string except, RequestContext context) => throw null;

        public virtual Response WithExcept(string except, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithExceptAsync(string except, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithExec(string exec, RequestContext context) => throw null;

        public virtual Task<Response> WithExecAsync(string exec, RequestContext context) => throw null;

        public virtual Response WithExec(string exec, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithExecAsync(string exec, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithFinally(string @finally, RequestContext context) => throw null;

        public virtual Task<Response> WithFinallyAsync(string @finally, RequestContext context) => throw null;

        public virtual Response WithFinally(string @finally, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithFinallyAsync(string @finally, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithFor(string @for, RequestContext context) => throw null;

        public virtual Task<Response> WithForAsync(string @for, RequestContext context) => throw null;

        public virtual Response WithFor(string @for, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithForAsync(string @for, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithFrom(string @from, RequestContext context) => throw null;

        public virtual Task<Response> WithFromAsync(string @from, RequestContext context) => throw null;

        public virtual Response WithFrom(string @from, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithFromAsync(string @from, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithGlobal(string @global, RequestContext context) => throw null;

        public virtual Task<Response> WithGlobalAsync(string @global, RequestContext context) => throw null;

        public virtual Response WithGlobal(string @global, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithGlobalAsync(string @global, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithIf(string @if, RequestContext context) => throw null;

        public virtual Task<Response> WithIfAsync(string @if, RequestContext context) => throw null;

        public virtual Response WithIf(string @if, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithIfAsync(string @if, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithImport(string import, RequestContext context) => throw null;

        public virtual Task<Response> WithImportAsync(string import, RequestContext context) => throw null;

        public virtual Response WithImport(string import, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithImportAsync(string import, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithIn(string @in, RequestContext context) => throw null;

        public virtual Task<Response> WithInAsync(string @in, RequestContext context) => throw null;

        public virtual Response WithIn(string @in, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithInAsync(string @in, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithIs(string @is, RequestContext context) => throw null;

        public virtual Task<Response> WithIsAsync(string @is, RequestContext context) => throw null;

        public virtual Response WithIs(string @is, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithIsAsync(string @is, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithLambda(string lambda, RequestContext context) => throw null;

        public virtual Task<Response> WithLambdaAsync(string lambda, RequestContext context) => throw null;

        public virtual Response WithLambda(string lambda, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithLambdaAsync(string lambda, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithNot(string @not, RequestContext context) => throw null;

        public virtual Task<Response> WithNotAsync(string @not, RequestContext context) => throw null;

        public virtual Response WithNot(string @not, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithNotAsync(string @not, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithOr(string @or, RequestContext context) => throw null;

        public virtual Task<Response> WithOrAsync(string @or, RequestContext context) => throw null;

        public virtual Response WithOr(string @or, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithOrAsync(string @or, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithPass(string pass, RequestContext context) => throw null;

        public virtual Task<Response> WithPassAsync(string pass, RequestContext context) => throw null;

        public virtual Response WithPass(string pass, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithPassAsync(string pass, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithRaise(string raise, RequestContext context) => throw null;

        public virtual Task<Response> WithRaiseAsync(string raise, RequestContext context) => throw null;

        public virtual Response WithRaise(string raise, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithRaiseAsync(string raise, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithReturn(string @return, RequestContext context) => throw null;

        public virtual Task<Response> WithReturnAsync(string @return, RequestContext context) => throw null;

        public virtual Response WithReturn(string @return, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithReturnAsync(string @return, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithTry(string @try, RequestContext context) => throw null;

        public virtual Task<Response> WithTryAsync(string @try, RequestContext context) => throw null;

        public virtual Response WithTry(string @try, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithTryAsync(string @try, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithWhile(string @while, RequestContext context) => throw null;

        public virtual Task<Response> WithWhileAsync(string @while, RequestContext context) => throw null;

        public virtual Response WithWhile(string @while, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithWhileAsync(string @while, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithWith(string @with, RequestContext context) => throw null;

        public virtual Task<Response> WithWithAsync(string @with, RequestContext context) => throw null;

        public virtual Response WithWith(string @with, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithWithAsync(string @with, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithYield(string @yield, RequestContext context) => throw null;

        public virtual Task<Response> WithYieldAsync(string @yield, RequestContext context) => throw null;

        public virtual Response WithYield(string @yield, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithYieldAsync(string @yield, CancellationToken cancellationToken = default) => throw null;

        public virtual Response WithCancellationToken(string cancellationToken, RequestContext context) => throw null;

        public virtual Task<Response> WithCancellationTokenAsync(string cancellationToken, RequestContext context) => throw null;

        public virtual Response WithCancellationToken(string cancellationToken, CancellationToken cancellationToken0 = default) => throw null;

        public virtual Task<Response> WithCancellationTokenAsync(string cancellationToken, CancellationToken cancellationToken0 = default) => throw null;
    }
}
