// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure;
using Azure.Core;

namespace Encode.Datetime
{
    /// <summary></summary>
    public partial class Header
    {
        private static ResponseClassifier _pipelineMessageClassifier204;

        private static ResponseClassifier PipelineMessageClassifier204 => _pipelineMessageClassifier204 = new StatusCodeClassifier(stackalloc ushort[] { 204 });

        internal HttpMessage CreateDefaultRequest(DateTimeOffset value, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/encode/datetime/header/default", false);
            request.Uri = uri;
            request.Headers.SetValue("value", TypeFormatters.ConvertToString(value, "R"));
            return message;
        }

        internal HttpMessage CreateRfc3339Request(DateTimeOffset value, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/encode/datetime/header/rfc3339", false);
            request.Uri = uri;
            request.Headers.SetValue("value", TypeFormatters.ConvertToString(value, "O"));
            return message;
        }

        internal HttpMessage CreateRfc7231Request(DateTimeOffset value, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/encode/datetime/header/rfc7231", false);
            request.Uri = uri;
            request.Headers.SetValue("value", TypeFormatters.ConvertToString(value, "R"));
            return message;
        }

        internal HttpMessage CreateUnixTimestampRequest(DateTimeOffset value, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/encode/datetime/header/unix-timestamp", false);
            request.Uri = uri;
            request.Headers.SetValue("value", TypeFormatters.ConvertToString(value, "U"));
            return message;
        }

        internal HttpMessage CreateUnixTimestampArrayRequest(IEnumerable<DateTimeOffset> value, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/encode/datetime/header/unix-timestamp-array", false);
            request.Uri = uri;
            if (value != null && !(value is ChangeTrackingList<DateTimeOffset> changeTrackingList && changeTrackingList.IsUndefined))
            {
                request.Headers.SetDelimited("value", value, ",", "U");
            }
            return message;
        }
    }
}
