// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Encode.Datetime
{
    /// <summary> A factory class for creating instances of the models for mocking. </summary>
    public static partial class EncodeDatetimeModelFactory
    {
        /// <summary> The DefaultDatetimeProperty. </summary>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Datetime.DefaultDatetimeProperty"/> instance for mocking. </returns>
        public static DefaultDatetimeProperty DefaultDatetimeProperty(DateTimeOffset value = default)
        {

            return new DefaultDatetimeProperty(value, additionalBinaryDataProperties: null);
        }

        /// <summary> The Rfc3339DatetimeProperty. </summary>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Datetime.Rfc3339DatetimeProperty"/> instance for mocking. </returns>
        public static Rfc3339DatetimeProperty Rfc3339DatetimeProperty(DateTimeOffset value = default)
        {

            return new Rfc3339DatetimeProperty(value, additionalBinaryDataProperties: null);
        }

        /// <summary> The Rfc7231DatetimeProperty. </summary>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Datetime.Rfc7231DatetimeProperty"/> instance for mocking. </returns>
        public static Rfc7231DatetimeProperty Rfc7231DatetimeProperty(DateTimeOffset value = default)
        {

            return new Rfc7231DatetimeProperty(value, additionalBinaryDataProperties: null);
        }

        /// <summary> The UnixTimestampDatetimeProperty. </summary>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Datetime.UnixTimestampDatetimeProperty"/> instance for mocking. </returns>
        public static UnixTimestampDatetimeProperty UnixTimestampDatetimeProperty(DateTimeOffset value = default)
        {

            return new UnixTimestampDatetimeProperty(value, additionalBinaryDataProperties: null);
        }

        /// <summary> The UnixTimestampArrayDatetimeProperty. </summary>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Datetime.UnixTimestampArrayDatetimeProperty"/> instance for mocking. </returns>
        public static UnixTimestampArrayDatetimeProperty UnixTimestampArrayDatetimeProperty(IEnumerable<DateTimeOffset> value = default)
        {
            value ??= new ChangeTrackingList<DateTimeOffset>();

            return new UnixTimestampArrayDatetimeProperty(value?.ToList(), additionalBinaryDataProperties: null);
        }
    }
}
