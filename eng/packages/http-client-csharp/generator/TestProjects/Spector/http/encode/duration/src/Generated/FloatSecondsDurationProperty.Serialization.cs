// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Encode.Duration._Property
{
    public partial class FloatSecondsDurationProperty : IJsonModel<FloatSecondsDurationProperty>
    {
        internal FloatSecondsDurationProperty() 
        {
        }

        void IJsonModel<FloatSecondsDurationProperty>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options) 
        {
            JsonModelWriteCore(writer, options);
        }

        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options) 
        {
            writer.WriteStartObject();
            writer.WritePropertyName("value"u8);
            writer.WriteNumberValue((float)Value.TotalSeconds);
            writer.WriteEndObject();
        }

        FloatSecondsDurationProperty IJsonModel<FloatSecondsDurationProperty>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) 
        {
            return JsonModelCreateCore(ref reader, options);
        }

        protected virtual FloatSecondsDurationProperty JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options) 
        {
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException("Expected StartObject token");
            }

            TimeSpan value = default;
            while (reader.Read())
            {
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }

                if (reader.TokenType == JsonTokenType.PropertyName)
                {
                    string propertyName = reader.GetString();
                    reader.Read();

                    if (propertyName == "value")
                    {
                        float seconds = reader.GetSingle();
                        value = TimeSpan.FromSeconds(seconds);
                    }
                }
            }

            return new FloatSecondsDurationProperty(value);
        }

        BinaryData IPersistableModel<FloatSecondsDurationProperty>.Write(ModelReaderWriterOptions options) 
        {
            return PersistableModelWriteCore(options);
        }

        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options) 
        {
            using var document = JsonDocument.Parse(ModelReaderWriter.Write(this, options));
            return BinaryData.FromObjectAsJson(document.RootElement);
        }

        FloatSecondsDurationProperty IPersistableModel<FloatSecondsDurationProperty>.Create(BinaryData data, ModelReaderWriterOptions options) 
        {
            return PersistableModelCreateCore(data, options);
        }

        protected virtual FloatSecondsDurationProperty PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options) 
        {
            using var document = JsonDocument.Parse(data);
            return DeserializeFloatSecondsDurationProperty(document.RootElement, options);
        }

        internal static FloatSecondsDurationProperty DeserializeFloatSecondsDurationProperty(JsonElement element, ModelReaderWriterOptions options = null)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }

            TimeSpan value = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("value"u8))
                {
                    float seconds = property.Value.GetSingle();
                    value = TimeSpan.FromSeconds(seconds);
                }
            }

            return new FloatSecondsDurationProperty(value);
        }

        string IPersistableModel<FloatSecondsDurationProperty>.GetFormatFromOptions(ModelReaderWriterOptions options) 
        {
            return "J";
        }

        /// <param name="floatSecondsDurationProperty"> The <see cref="FloatSecondsDurationProperty"/> to serialize into <see cref="RequestContent"/>. </param>
        public static implicit operator RequestContent(FloatSecondsDurationProperty floatSecondsDurationProperty) 
        {
            if (floatSecondsDurationProperty == null) return null;
            return RequestContent.Create(ModelReaderWriter.Write(floatSecondsDurationProperty, new ModelReaderWriterOptions("W")));
        }

        public static explicit operator FloatSecondsDurationProperty(Response result) 
        {
            using var document = JsonDocument.Parse(result.Content);
            return DeserializeFloatSecondsDurationProperty(document.RootElement);
        }
    }
}
