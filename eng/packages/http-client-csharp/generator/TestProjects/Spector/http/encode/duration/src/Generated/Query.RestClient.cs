// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure;
using Azure.Core;

namespace Encode.Duration
{
    /// <summary></summary>
    public partial class Query
    {
        private static ResponseClassifier _pipelineMessageClassifier204;

        private static ResponseClassifier PipelineMessageClassifier204 => _pipelineMessageClassifier204 = new StatusCodeClassifier(stackalloc ushort[] { 204 });

        internal HttpMessage CreateDefaultRequest(TimeSpan input, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/encode/duration/query/default", false);
            uri.AppendQuery("input", TypeFormatters.ConvertToString(input, "P"), true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateIso8601Request(TimeSpan input, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/encode/duration/query/iso8601", false);
            uri.AppendQuery("input", TypeFormatters.ConvertToString(input, "P"), true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateInt32SecondsRequest(TimeSpan input, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/encode/duration/query/int32-seconds", false);
            uri.AppendQuery("input", TypeFormatters.ConvertToString(input, "%s"), true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateFloatSecondsRequest(TimeSpan input, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/encode/duration/query/float-seconds", false);
            uri.AppendQuery("input", TypeFormatters.ConvertToString(input, "s\\.FFF"), true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateFloat64SecondsRequest(TimeSpan input, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/encode/duration/query/float64-seconds", false);
            uri.AppendQuery("input", TypeFormatters.ConvertToString(input, "s\\.FFFFFF"), true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateInt32SecondsArrayRequest(IEnumerable<TimeSpan> input, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/encode/duration/query/int32-seconds-array", false);
            if (input != null && !(input is ChangeTrackingList<TimeSpan> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("input", input, ",", "%s", true);
            }
            request.Uri = uri;
            return message;
        }
    }
}
