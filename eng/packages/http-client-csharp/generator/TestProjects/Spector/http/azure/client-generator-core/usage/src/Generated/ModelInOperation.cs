// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using _Specs_.Azure.ClientGenerator.Core.Usage._ModelInOperation;

namespace _Specs_.Azure.ClientGenerator.Core.Usage
{
    public partial class ModelInOperation
    {
        protected ModelInOperation() => throw null;

        public HttpPipeline Pipeline => throw null;

        public virtual Response InputToInputOutput(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> InputToInputOutputAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response InputToInputOutput(InputModel body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> InputToInputOutputAsync(InputModel body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response OutputToInputOutput(RequestContext context) => throw null;

        public virtual Task<Response> OutputToInputOutputAsync(RequestContext context) => throw null;

        public virtual Response<OutputModel> OutputToInputOutput(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response<OutputModel>> OutputToInputOutputAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response ModelInReadOnlyProperty(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> ModelInReadOnlyPropertyAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response<RoundTripModel> ModelInReadOnlyProperty(RoundTripModel body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response<RoundTripModel>> ModelInReadOnlyPropertyAsync(RoundTripModel body, CancellationToken cancellationToken = default) => throw null;

        public virtual Response OrphanModelSerializable(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> OrphanModelSerializableAsync(RequestContent content, RequestContext context = null) => throw null;
    }
}
