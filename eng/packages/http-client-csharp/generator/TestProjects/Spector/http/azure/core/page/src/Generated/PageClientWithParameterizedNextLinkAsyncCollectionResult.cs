// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace _Specs_.Azure.Core.Page
{
    internal partial class PageClientWithParameterizedNextLinkAsyncCollectionResult : AsyncPageable<BinaryData>
    {
        private readonly PageClient _client;
        private readonly string _select;
        private readonly bool? _includePending;
        private readonly RequestContext _context;

        /// <summary> Initializes a new instance of PageClientWithParameterizedNextLinkAsyncCollectionResult, which is used to iterate over the pages of a collection. </summary>
        /// <param name="client"> The PageClient client used to send requests. </param>
        /// <param name="select"></param>
        /// <param name="includePending"></param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="select"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="select"/> is an empty string, and was expected to be non-empty. </exception>
        public PageClientWithParameterizedNextLinkAsyncCollectionResult(PageClient client, string @select, bool? includePending, RequestContext context) : base(context?.CancellationToken ?? default)
        {
            Argument.AssertNotNullOrEmpty(@select, nameof(@select));

            _client = client;
            _select = @select;
            _includePending = includePending;
            _context = context;
        }

        /// <summary> Gets the pages of PageClientWithParameterizedNextLinkAsyncCollectionResult as an enumerable collection. </summary>
        /// <param name="continuationToken"> A continuation token indicating where to resume paging. </param>
        /// <param name="pageSizeHint"> The number of items per page. </param>
        /// <returns> The pages of PageClientWithParameterizedNextLinkAsyncCollectionResult as an enumerable collection. </returns>
        public override async IAsyncEnumerable<Page<BinaryData>> AsPages(string continuationToken, int? pageSizeHint)
        {
            Uri nextPage = continuationToken != null ? new Uri(continuationToken) : null;
            do
            {
                Response response = await GetNextResponse(pageSizeHint, nextPage).ConfigureAwait(false);
                if (response is null)
                {
                    yield break;
                }
                ParameterizedNextLinkPagingResult responseWithType = (ParameterizedNextLinkPagingResult)response;
                List<BinaryData> items = new List<BinaryData>();
                foreach (var item in responseWithType.Values)
                {
                    items.Add(BinaryData.FromObjectAsJson(item));
                }
                nextPage = responseWithType.NextLink;
                yield return Page<BinaryData>.FromValues(items, nextPage?.AbsoluteUri, response);
            }
            while (nextPage != null);
        }

        /// <summary> Get next page. </summary>
        /// <param name="pageSizeHint"> The number of items per page. </param>
        /// <param name="nextLink"> The next link to use for the next page of results. </param>
        private async ValueTask<Response> GetNextResponse(int? pageSizeHint, Uri nextLink)
        {
            HttpMessage message = nextLink != null ? _client.CreateNextWithParameterizedNextLinkRequest(nextLink, _select, _includePending, _context) : _client.CreateWithParameterizedNextLinkRequest(_select, _includePending, _context);
            using DiagnosticScope scope = _client.ClientDiagnostics.CreateScope("PageClient.WithParameterizedNextLink");
            scope.Start();
            try
            {
                return await _client.Pipeline.ProcessMessageAsync(message, _context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
