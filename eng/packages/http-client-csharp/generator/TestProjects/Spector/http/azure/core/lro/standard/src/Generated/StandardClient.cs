// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace _Specs_.Azure.Core.Lro.Standard
{
    public partial class StandardClient
    {
        public StandardClient() : this(new Uri("http://localhost:3000"), new StandardClientOptions()) => throw null;

        public StandardClient(Uri endpoint, StandardClientOptions options) => throw null;

        public virtual HttpPipeline Pipeline => throw null;

        public virtual Operation<BinaryData> CreateOrReplace(WaitUntil waitUntil, string name, RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Operation<BinaryData>> CreateOrReplaceAsync(WaitUntil waitUntil, string name, RequestContent content, RequestContext context = null) => throw null;

        public virtual Operation<User> CreateOrReplace(WaitUntil waitUntil, string name, User resource, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Operation<User>> CreateOrReplaceAsync(WaitUntil waitUntil, string name, User resource, CancellationToken cancellationToken = default) => throw null;

        public virtual Operation Delete(WaitUntil waitUntil, string name, RequestContext context) => throw null;

        public virtual Task<Operation> DeleteAsync(WaitUntil waitUntil, string name, RequestContext context) => throw null;

        public virtual Operation Delete(WaitUntil waitUntil, string name, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Operation> DeleteAsync(WaitUntil waitUntil, string name, CancellationToken cancellationToken = default) => throw null;

        public virtual Operation<BinaryData> Export(WaitUntil waitUntil, string name, string format, RequestContext context) => throw null;

        public virtual Task<Operation<BinaryData>> ExportAsync(WaitUntil waitUntil, string name, string format, RequestContext context) => throw null;

        public virtual Operation<ExportedUser> Export(WaitUntil waitUntil, string name, string format, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Operation<ExportedUser>> ExportAsync(WaitUntil waitUntil, string name, string format, CancellationToken cancellationToken = default) => throw null;
    }
}
