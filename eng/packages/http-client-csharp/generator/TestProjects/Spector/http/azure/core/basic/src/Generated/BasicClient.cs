// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace _Specs_.Azure.Core.Basic
{
    public partial class BasicClient
    {
        public BasicClient() : this(new Uri("http://localhost:3000"), new BasicClientOptions()) => throw null;

        public BasicClient(Uri endpoint, BasicClientOptions options) => throw null;

        public virtual HttpPipeline Pipeline => throw null;

        public virtual Response CreateOrUpdate(int id, RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> CreateOrUpdateAsync(int id, RequestContent content, RequestContext context = null) => throw null;

        public virtual Response CreateOrReplace(int id, RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> CreateOrReplaceAsync(int id, RequestContent content, RequestContext context = null) => throw null;

        public virtual Response<User> CreateOrReplace(int id, User resource, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response<User>> CreateOrReplaceAsync(int id, User resource, CancellationToken cancellationToken = default) => throw null;

        public virtual Response Get(int id, RequestContext context) => throw null;

        public virtual Task<Response> GetAsync(int id, RequestContext context) => throw null;

        public virtual Response<User> Get(int id, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response<User>> GetAsync(int id, CancellationToken cancellationToken = default) => throw null;

        public virtual Pageable<BinaryData> Get(int? top, int? skip, int? maxpagesize, IEnumerable<string> @orderby, string filter, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context) => throw null;

        public virtual AsyncPageable<BinaryData> GetAsync(int? top, int? skip, int? maxpagesize, IEnumerable<string> @orderby, string filter, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context) => throw null;

        public virtual Pageable<User> Get(int? top = default, int? skip = default, int? maxpagesize = default, IEnumerable<string> @orderby = default, string filter = default, IEnumerable<string> @select = default, IEnumerable<string> expand = default, CancellationToken cancellationToken = default) => throw null;

        public virtual AsyncPageable<User> GetAsync(int? top = default, int? skip = default, int? maxpagesize = default, IEnumerable<string> @orderby = default, string filter = default, IEnumerable<string> @select = default, IEnumerable<string> expand = default, CancellationToken cancellationToken = default) => throw null;

        public virtual Response Delete(int id, RequestContext context) => throw null;

        public virtual Task<Response> DeleteAsync(int id, RequestContext context) => throw null;

        public virtual Response Delete(int id, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> DeleteAsync(int id, CancellationToken cancellationToken = default) => throw null;

        public virtual Response Export(int id, string format, RequestContext context) => throw null;

        public virtual Task<Response> ExportAsync(int id, string format, RequestContext context) => throw null;

        public virtual Response<User> Export(int id, string format, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response<User>> ExportAsync(int id, string format, CancellationToken cancellationToken = default) => throw null;

        public virtual Response ExportAllUsers(string format, RequestContext context) => throw null;

        public virtual Task<Response> ExportAllUsersAsync(string format, RequestContext context) => throw null;

        public virtual Response<UserList> ExportAllUsers(string format, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response<UserList>> ExportAllUsersAsync(string format, CancellationToken cancellationToken = default) => throw null;
    }
}
