// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure;
using Azure.Core;
using Azure.Core.Foundations;
using Azure.Core.Pipeline;

namespace _Specs_.Azure.Core.Basic
{
    internal partial class BasicClientGetCollectionResult : Pageable<BinaryData>
    {
        private readonly BasicClient _client;
        private readonly int? _top;
        private readonly int? _skip;
        private readonly int? _maxpagesize;
        private readonly IEnumerable<string> _orderby;
        private readonly string _filter;
        private readonly IEnumerable<string> _select;
        private readonly IEnumerable<string> _expand;
        private readonly RequestContext _context;

        /// <summary> Initializes a new instance of BasicClientGetCollectionResult, which is used to iterate over the pages of a collection. </summary>
        /// <param name="client"> The BasicClient client used to send requests. </param>
        /// <param name="top"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="orderby"> Expressions that specify the order of returned results. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="select"> Select the specified fields to be included in the response. </param>
        /// <param name="expand"> Expand the indicated resources into the response. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        public BasicClientGetCollectionResult(BasicClient client, int? top, int? skip, int? maxpagesize, IEnumerable<string> @orderby, string filter, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context) : base(context?.CancellationToken ?? default)
        {
            _client = client;
            _top = top;
            _skip = skip;
            _maxpagesize = maxpagesize;
            _orderby = @orderby;
            _filter = filter;
            _select = @select;
            _expand = expand;
            _context = context;
        }

        /// <summary> Gets the pages of BasicClientGetCollectionResult as an enumerable collection. </summary>
        /// <param name="continuationToken"> A continuation token indicating where to resume paging. </param>
        /// <param name="pageSizeHint"> The number of items per page. </param>
        /// <returns> The pages of BasicClientGetCollectionResult as an enumerable collection. </returns>
        public override IEnumerable<Page<BinaryData>> AsPages(string continuationToken, int? pageSizeHint)
        {
            Uri nextPage = continuationToken != null ? new Uri(continuationToken) : null;
            do
            {
                Response response = GetNextResponse(pageSizeHint, nextPage);
                if (response is null)
                {
                    yield break;
                }
                PagedUser responseWithType = (PagedUser)response;
                List<BinaryData> items = new List<BinaryData>();
                foreach (var item in responseWithType.Value)
                {
                    items.Add(BinaryData.FromObjectAsJson(item));
                }
                nextPage = responseWithType.NextLink;
                yield return Page<BinaryData>.FromValues(items, nextPage?.AbsoluteUri, response);
            }
            while (nextPage != null);
        }

        /// <summary> Get next page. </summary>
        /// <param name="pageSizeHint"> The number of items per page. </param>
        /// <param name="nextLink"> The next link to use for the next page of results. </param>
        private Response GetNextResponse(int? pageSizeHint, Uri nextLink)
        {
            HttpMessage message = nextLink != null ? _client.CreateNextGetRequest(nextLink, _top, _skip, _maxpagesize, _orderby, _filter, _select, _expand, _context) : _client.CreateGetRequest(_top, _skip, _maxpagesize, _orderby, _filter, _select, _expand, _context);
            using DiagnosticScope scope = _client.ClientDiagnostics.CreateScope("BasicClient.Get");
            scope.Start();
            try
            {
                return _client.Pipeline.ProcessMessage(message, _context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
