// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Client.Structure.Service.Models;

namespace Client.Structure.Service
{
    /// <summary>
    /// Test that we can use @client and @operationGroup decorators to customize client side code structure, such as:
    /// 1. have everything as default.
    /// 2. to rename client or operation group
    /// 3. one client can have more than one operations groups
    /// 4. split one interface into two clients
    /// 5. have two clients with operations come from different interfaces
    /// 6. have two clients with a hierarchy relation.
    /// </summary>
    public partial class ServiceClient
    {
        private readonly Uri _endpoint;
        private readonly ClientType _client;
        private Baz _cachedBaz;
        private Qux _cachedQux;
        private Foo _cachedFoo;
        private Bar _cachedBar;

        /// <summary> Initializes a new instance of ServiceClient for mocking. </summary>
        protected ServiceClient()
        {
        }

        /// <summary> Initializes a new instance of ServiceClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="client"> Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public ServiceClient(Uri endpoint, ClientType client) : this(endpoint, client, new ServiceClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ServiceClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="client"> Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public ServiceClient(Uri endpoint, ClientType client, ServiceClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));

            options ??= new ServiceClientOptions();

            _endpoint = endpoint;
            _client = client;
            Pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>());
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public HttpPipeline Pipeline { get; }

        /// <summary>
        /// [Protocol Method] one
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response One(RequestContext context)
        {
            using HttpMessage message = CreateOneRequest(context);
            return Pipeline.ProcessMessage(message, context);
        }

        /// <summary>
        /// [Protocol Method] one
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> OneAsync(RequestContext context)
        {
            using HttpMessage message = CreateOneRequest(context);
            return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
        }

        /// <summary> one. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response One(CancellationToken cancellationToken = default)
        {
            return One(cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> one. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> OneAsync(CancellationToken cancellationToken = default)
        {
            return await OneAsync(cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] two
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response Two(RequestContext context)
        {
            using HttpMessage message = CreateTwoRequest(context);
            return Pipeline.ProcessMessage(message, context);
        }

        /// <summary>
        /// [Protocol Method] two
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> TwoAsync(RequestContext context)
        {
            using HttpMessage message = CreateTwoRequest(context);
            return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
        }

        /// <summary> two. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response Two(CancellationToken cancellationToken = default)
        {
            return Two(cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> two. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> TwoAsync(CancellationToken cancellationToken = default)
        {
            return await TwoAsync(cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary> Initializes a new instance of Baz. </summary>
        public virtual Baz GetBazClient()
        {
            return Volatile.Read(ref _cachedBaz) ?? Interlocked.CompareExchange(ref _cachedBaz, new Baz(Pipeline, _endpoint, _client), null) ?? _cachedBaz;
        }

        /// <summary> Initializes a new instance of Qux. </summary>
        public virtual Qux GetQuxClient()
        {
            return Volatile.Read(ref _cachedQux) ?? Interlocked.CompareExchange(ref _cachedQux, new Qux(Pipeline, _endpoint, _client), null) ?? _cachedQux;
        }

        /// <summary> Initializes a new instance of Foo. </summary>
        public virtual Foo GetFooClient()
        {
            return Volatile.Read(ref _cachedFoo) ?? Interlocked.CompareExchange(ref _cachedFoo, new Foo(Pipeline, _endpoint, _client), null) ?? _cachedFoo;
        }

        /// <summary> Initializes a new instance of Bar. </summary>
        public virtual Bar GetBarClient()
        {
            return Volatile.Read(ref _cachedBar) ?? Interlocked.CompareExchange(ref _cachedBar, new Bar(Pipeline, _endpoint, _client), null) ?? _cachedBar;
        }
    }
}
