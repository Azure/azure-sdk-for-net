// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Client.Structure.Service.Models;

namespace Client.Structure.Service
{
    /// <summary></summary>
    public partial class Qux
    {
        private readonly Uri _endpoint;
        private readonly ClientType _client;
        private QuxBar _cachedQuxBar;

        /// <summary> Initializes a new instance of Qux for mocking. </summary>
        protected Qux()
        {
        }

        internal Qux(HttpPipeline pipeline, Uri endpoint, ClientType client)
        {
            _endpoint = endpoint;
            Pipeline = pipeline;
            _client = client;
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public HttpPipeline Pipeline { get; }

        /// <summary>
        /// [Protocol Method] eight
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response Eight(RequestContext context)
        {
            using HttpMessage message = CreateEightRequest(context);
            return Pipeline.ProcessMessage(message, context);
        }

        /// <summary>
        /// [Protocol Method] eight
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> EightAsync(RequestContext context)
        {
            using HttpMessage message = CreateEightRequest(context);
            return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
        }

        /// <summary> eight. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response Eight(CancellationToken cancellationToken = default)
        {
            return Eight(cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> eight. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> EightAsync(CancellationToken cancellationToken = default)
        {
            return await EightAsync(cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary> Initializes a new instance of QuxBar. </summary>
        public virtual QuxBar GetQuxBarClient()
        {
            return Volatile.Read(ref _cachedQuxBar) ?? Interlocked.CompareExchange(ref _cachedQuxBar, new QuxBar(Pipeline, _endpoint, _client), null) ?? _cachedQuxBar;
        }
    }
}
