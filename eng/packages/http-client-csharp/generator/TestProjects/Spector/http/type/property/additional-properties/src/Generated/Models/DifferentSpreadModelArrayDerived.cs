// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace _Type.Property.AdditionalProperties
{
    /// <summary> The model extends from a model that spread Record&lt;ModelForRecord[]&gt; with the different known property type. </summary>
    public partial class DifferentSpreadModelArrayDerived : DifferentSpreadModelArrayRecord
    {
        /// <summary> Initializes a new instance of <see cref="DifferentSpreadModelArrayDerived"/>. </summary>
        /// <param name="knownProp"></param>
        /// <param name="derivedProp"> The index property. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="knownProp"/> or <paramref name="derivedProp"/> is null. </exception>
        public DifferentSpreadModelArrayDerived(string knownProp, IEnumerable<ModelForRecord> derivedProp) : base(knownProp)
        {
            Argument.AssertNotNull(knownProp, nameof(knownProp));
            Argument.AssertNotNull(derivedProp, nameof(derivedProp));

            DerivedProp = derivedProp.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="DifferentSpreadModelArrayDerived"/>. </summary>
        /// <param name="knownProp"></param>
        /// <param name="additionalProperties"></param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        /// <param name="derivedProp"> The index property. </param>
        internal DifferentSpreadModelArrayDerived(string knownProp, IDictionary<string, IList<BinaryData>> additionalProperties, IDictionary<string, BinaryData> additionalBinaryDataProperties, IList<ModelForRecord> derivedProp) : base(knownProp, additionalProperties, additionalBinaryDataProperties)
        {
            DerivedProp = derivedProp;
        }

        /// <summary> The index property. </summary>
        public IList<ModelForRecord> DerivedProp { get; }
    }
}
