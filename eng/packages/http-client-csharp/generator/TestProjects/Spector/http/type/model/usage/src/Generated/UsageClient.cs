// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using _Type.Model.Usage.Models;

namespace _Type.Model.Usage
{
    public partial class UsageClient
    {
        public UsageClient() : this(new Uri("http://localhost:3000"), new UsageClientOptions()) => throw null;

        public UsageClient(Uri endpoint, UsageClientOptions options) => throw null;

        public HttpPipeline Pipeline => throw null;

        public virtual Response Input(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> InputAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response Input(InputRecord input, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> InputAsync(InputRecord input, CancellationToken cancellationToken = default) => throw null;

        public virtual Response Output(RequestContext context) => throw null;

        public virtual Task<Response> OutputAsync(RequestContext context) => throw null;

        public virtual Response<OutputRecord> Output(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response<OutputRecord>> OutputAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response InputAndOutput(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> InputAndOutputAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response<InputOutputRecord> InputAndOutput(InputOutputRecord body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response<InputOutputRecord>> InputAndOutputAsync(InputOutputRecord body, CancellationToken cancellationToken = default) => throw null;
    }
}
