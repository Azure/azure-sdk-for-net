// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using _Type.Model.Visibility.Models;

namespace _Type.Model.Visibility
{
    public partial class VisibilityClient
    {
        public VisibilityClient() : this(new Uri("http://localhost:3000"), new VisibilityClientOptions()) => throw null;

        public VisibilityClient(Uri endpoint, VisibilityClientOptions options) => throw null;

        public HttpPipeline Pipeline => throw null;

        public virtual Response GetModel(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> GetModelAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response<VisibilityModel> GetModel(VisibilityModel input, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response<VisibilityModel>> GetModelAsync(VisibilityModel input, CancellationToken cancellationToken = default) => throw null;

        public virtual Response HeadModel(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> HeadModelAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response HeadModel(VisibilityModel input, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> HeadModelAsync(VisibilityModel input, CancellationToken cancellationToken = default) => throw null;

        public virtual Response PutModel(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> PutModelAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response PutModel(VisibilityModel input, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> PutModelAsync(VisibilityModel input, CancellationToken cancellationToken = default) => throw null;

        public virtual Response PatchModel(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> PatchModelAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response PostModel(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> PostModelAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response PostModel(VisibilityModel input, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> PostModelAsync(VisibilityModel input, CancellationToken cancellationToken = default) => throw null;

        public virtual Response DeleteModel(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> DeleteModelAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response DeleteModel(VisibilityModel input, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> DeleteModelAsync(VisibilityModel input, CancellationToken cancellationToken = default) => throw null;

        public virtual Response PutReadOnlyModel(RequestContent content, RequestContext context = null) => throw null;

        public virtual Task<Response> PutReadOnlyModelAsync(RequestContent content, RequestContext context = null) => throw null;

        public virtual Response<ReadOnlyModel> PutReadOnlyModel(ReadOnlyModel input, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response<ReadOnlyModel>> PutReadOnlyModelAsync(ReadOnlyModel input, CancellationToken cancellationToken = default) => throw null;
    }
}
