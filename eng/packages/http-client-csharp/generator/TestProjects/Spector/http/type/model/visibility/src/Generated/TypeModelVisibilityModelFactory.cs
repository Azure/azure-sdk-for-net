// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;

namespace _Type.Model.Visibility
{
    /// <summary> A factory class for creating instances of the models for mocking. </summary>
    public static partial class TypeModelVisibilityModelFactory
    {
        /// <summary> Output model with visibility properties. </summary>
        /// <param name="readProp"> Required string, illustrating a readonly property. </param>
        /// <param name="queryProp"> Required int32, illustrating a query property. </param>
        /// <param name="createProp"> Required string[], illustrating a create property. </param>
        /// <param name="updateProp"> Required int32[], illustrating a update property. </param>
        /// <param name="deleteProp"> Required bool, illustrating a delete property. </param>
        /// <returns> A new <see cref="Visibility.VisibilityModel"/> instance for mocking. </returns>
        public static VisibilityModel VisibilityModel(string readProp = default, int queryProp = default, IEnumerable<string> createProp = default, IEnumerable<int> updateProp = default, bool deleteProp = default)
        {
            createProp ??= new ChangeTrackingList<string>();
            updateProp ??= new ChangeTrackingList<int>();

            return new VisibilityModel(
                readProp,
                queryProp,
                createProp?.ToList(),
                updateProp?.ToList(),
                deleteProp,
                additionalBinaryDataProperties: null);
        }

        /// <summary> RoundTrip model with readonly optional properties. </summary>
        /// <param name="optionalNullableIntList"> Optional readonly nullable int list. </param>
        /// <param name="optionalStringRecord"> Optional readonly string dictionary. </param>
        /// <returns> A new <see cref="Visibility.ReadOnlyModel"/> instance for mocking. </returns>
        public static ReadOnlyModel ReadOnlyModel(IEnumerable<int> optionalNullableIntList = default, IReadOnlyDictionary<string, string> optionalStringRecord = default)
        {
            optionalNullableIntList ??= new ChangeTrackingList<int>();
            optionalStringRecord ??= new ChangeTrackingDictionary<string, string>();

            return new ReadOnlyModel(optionalNullableIntList?.ToList(), optionalStringRecord, additionalBinaryDataProperties: null);
        }
    }
}
