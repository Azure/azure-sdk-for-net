// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace _Type.Model.Visibility
{
    /// <summary> RoundTrip model with readonly optional properties. </summary>
    public partial class ReadOnlyModel
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="ReadOnlyModel"/>. </summary>
        public ReadOnlyModel()
        {
            OptionalNullableIntList = new ChangeTrackingList<int>();
            OptionalStringRecord = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="ReadOnlyModel"/>. </summary>
        /// <param name="optionalNullableIntList"> Optional readonly nullable int list. </param>
        /// <param name="optionalStringRecord"> Optional readonly string dictionary. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal ReadOnlyModel(IReadOnlyList<int> optionalNullableIntList, IReadOnlyDictionary<string, string> optionalStringRecord, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            OptionalNullableIntList = optionalNullableIntList;
            OptionalStringRecord = optionalStringRecord;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Optional readonly nullable int list. </summary>
        public IReadOnlyList<int> OptionalNullableIntList { get; }

        /// <summary> Optional readonly string dictionary. </summary>
        public IReadOnlyDictionary<string, string> OptionalStringRecord { get; }
    }
}
