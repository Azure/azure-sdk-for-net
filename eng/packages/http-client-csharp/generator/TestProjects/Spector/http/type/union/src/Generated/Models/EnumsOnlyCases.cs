// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace _Type.Union
{
    /// <summary> The EnumsOnlyCases. </summary>
    public partial class EnumsOnlyCases
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="EnumsOnlyCases"/>. </summary>
        /// <param name="lr"> This should be receive/send the left variant. </param>
        /// <param name="ud"> This should be receive/send the up variant. </param>
        public EnumsOnlyCases(EnumsOnlyCasesLr lr, EnumsOnlyCasesUd ud)
        {
            Lr = lr;
            Ud = ud;
        }

        /// <summary> Initializes a new instance of <see cref="EnumsOnlyCases"/>. </summary>
        /// <param name="lr"> This should be receive/send the left variant. </param>
        /// <param name="ud"> This should be receive/send the up variant. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal EnumsOnlyCases(EnumsOnlyCasesLr lr, EnumsOnlyCasesUd ud, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Lr = lr;
            Ud = ud;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> This should be receive/send the left variant. </summary>
        public EnumsOnlyCasesLr Lr { get; set; }

        /// <summary> This should be receive/send the up variant. </summary>
        public EnumsOnlyCasesUd Ud { get; set; }
    }
}
