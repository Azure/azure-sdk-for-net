// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;

namespace _Type.Union
{
    /// <summary> The MixedLiteralsCases. </summary>
    public partial class MixedLiteralsCases
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="MixedLiteralsCases"/>. </summary>
        /// <param name="stringLiteral"> This should be receive/send the "a" variant. </param>
        /// <param name="intLiteral"> This should be receive/send the 2 variant. </param>
        /// <param name="floatLiteral"> This should be receive/send the 3.3 variant. </param>
        /// <param name="booleanLiteral"> This should be receive/send the true variant. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="stringLiteral"/>, <paramref name="intLiteral"/>, <paramref name="floatLiteral"/> or <paramref name="booleanLiteral"/> is null. </exception>
        public MixedLiteralsCases(BinaryData stringLiteral, BinaryData intLiteral, BinaryData floatLiteral, BinaryData booleanLiteral)
        {
            Argument.AssertNotNull(stringLiteral, nameof(stringLiteral));
            Argument.AssertNotNull(intLiteral, nameof(intLiteral));
            Argument.AssertNotNull(floatLiteral, nameof(floatLiteral));
            Argument.AssertNotNull(booleanLiteral, nameof(booleanLiteral));

            StringLiteral = stringLiteral;
            IntLiteral = intLiteral;
            FloatLiteral = floatLiteral;
            BooleanLiteral = booleanLiteral;
        }

        /// <summary> Initializes a new instance of <see cref="MixedLiteralsCases"/>. </summary>
        /// <param name="stringLiteral"> This should be receive/send the "a" variant. </param>
        /// <param name="intLiteral"> This should be receive/send the 2 variant. </param>
        /// <param name="floatLiteral"> This should be receive/send the 3.3 variant. </param>
        /// <param name="booleanLiteral"> This should be receive/send the true variant. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal MixedLiteralsCases(BinaryData stringLiteral, BinaryData intLiteral, BinaryData floatLiteral, BinaryData booleanLiteral, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            StringLiteral = stringLiteral;
            IntLiteral = intLiteral;
            FloatLiteral = floatLiteral;
            BooleanLiteral = booleanLiteral;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary>
        /// This should be receive/send the "a" variant
        /// <para> To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, JsonSerializerOptions?)"/>. </para>
        /// <para> To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>. </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description> "a". </description>
        /// </item>
        /// <item>
        /// <description> 2. </description>
        /// </item>
        /// <item>
        /// <description> 3.3. </description>
        /// </item>
        /// <item>
        /// <description> True. </description>
        /// </item>
        /// </list>
        /// </remarks>
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromObjectAsJson("foo"). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("\"foo\""). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromObjectAsJson(new { key = "value" }). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("{\"key\": \"value\"}"). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData StringLiteral { get; set; }

        /// <summary>
        /// This should be receive/send the 2 variant
        /// <para> To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, JsonSerializerOptions?)"/>. </para>
        /// <para> To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>. </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description> "a". </description>
        /// </item>
        /// <item>
        /// <description> 2. </description>
        /// </item>
        /// <item>
        /// <description> 3.3. </description>
        /// </item>
        /// <item>
        /// <description> True. </description>
        /// </item>
        /// </list>
        /// </remarks>
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromObjectAsJson("foo"). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("\"foo\""). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromObjectAsJson(new { key = "value" }). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("{\"key\": \"value\"}"). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData IntLiteral { get; set; }

        /// <summary>
        /// This should be receive/send the 3.3 variant
        /// <para> To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, JsonSerializerOptions?)"/>. </para>
        /// <para> To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>. </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description> "a". </description>
        /// </item>
        /// <item>
        /// <description> 2. </description>
        /// </item>
        /// <item>
        /// <description> 3.3. </description>
        /// </item>
        /// <item>
        /// <description> True. </description>
        /// </item>
        /// </list>
        /// </remarks>
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromObjectAsJson("foo"). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("\"foo\""). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromObjectAsJson(new { key = "value" }). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("{\"key\": \"value\"}"). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData FloatLiteral { get; set; }

        /// <summary>
        /// This should be receive/send the true variant
        /// <para> To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, JsonSerializerOptions?)"/>. </para>
        /// <para> To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>. </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description> "a". </description>
        /// </item>
        /// <item>
        /// <description> 2. </description>
        /// </item>
        /// <item>
        /// <description> 3.3. </description>
        /// </item>
        /// <item>
        /// <description> True. </description>
        /// </item>
        /// </list>
        /// </remarks>
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromObjectAsJson("foo"). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("\"foo\""). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromObjectAsJson(new { key = "value" }). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("{\"key\": \"value\"}"). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData BooleanLiteral { get; set; }
    }
}
