// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Routes
{
    /// <summary></summary>
    public partial class PathParameters
    {
        private readonly Uri _endpoint;
        private PathParametersReservedExpansion _cachedPathParametersReservedExpansion;
        private PathParametersSimpleExpansion _cachedPathParametersSimpleExpansion;
        private PathParametersPathExpansion _cachedPathParametersPathExpansion;
        private PathParametersLabelExpansion _cachedPathParametersLabelExpansion;
        private PathParametersMatrixExpansion _cachedPathParametersMatrixExpansion;

        /// <summary> Initializes a new instance of PathParameters for mocking. </summary>
        protected PathParameters()
        {
        }

        /// <summary> Initializes a new instance of PathParameters. </summary>
        /// <param name="clientDiagnostics"> The ClientDiagnostics is used to provide tracing support for the client library. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Service endpoint. </param>
        internal PathParameters(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint)
        {
            ClientDiagnostics = clientDiagnostics;
            _endpoint = endpoint;
            Pipeline = pipeline;
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary>
        /// [Protocol Method] templateOnly
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="param"></param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response TemplateOnly(string @param, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PathParameters.TemplateOnly");
            scope.Start();
            try
            {
                Argument.AssertNotNull(@param, nameof(@param));

                using HttpMessage message = CreateTemplateOnlyRequest(@param, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] templateOnly
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="param"></param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> TemplateOnlyAsync(string @param, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PathParameters.TemplateOnly");
            scope.Start();
            try
            {
                Argument.AssertNotNull(@param, nameof(@param));

                using HttpMessage message = CreateTemplateOnlyRequest(@param, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> templateOnly. </summary>
        /// <param name="param"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response TemplateOnly(string @param, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(@param, nameof(@param));

            return TemplateOnly(@param, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> templateOnly. </summary>
        /// <param name="param"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> TemplateOnlyAsync(string @param, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(@param, nameof(@param));

            return await TemplateOnlyAsync(@param, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] explicit
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="param"></param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response Explicit(string @param, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PathParameters.Explicit");
            scope.Start();
            try
            {
                Argument.AssertNotNull(@param, nameof(@param));

                using HttpMessage message = CreateExplicitRequest(@param, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] explicit
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="param"></param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> ExplicitAsync(string @param, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PathParameters.Explicit");
            scope.Start();
            try
            {
                Argument.AssertNotNull(@param, nameof(@param));

                using HttpMessage message = CreateExplicitRequest(@param, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> explicit. </summary>
        /// <param name="param"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response Explicit(string @param, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(@param, nameof(@param));

            return Explicit(@param, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> explicit. </summary>
        /// <param name="param"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> ExplicitAsync(string @param, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(@param, nameof(@param));

            return await ExplicitAsync(@param, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] annotationOnly
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="param"></param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response AnnotationOnly(string @param, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PathParameters.AnnotationOnly");
            scope.Start();
            try
            {
                Argument.AssertNotNull(@param, nameof(@param));

                using HttpMessage message = CreateAnnotationOnlyRequest(@param, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] annotationOnly
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="param"></param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> AnnotationOnlyAsync(string @param, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PathParameters.AnnotationOnly");
            scope.Start();
            try
            {
                Argument.AssertNotNull(@param, nameof(@param));

                using HttpMessage message = CreateAnnotationOnlyRequest(@param, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> annotationOnly. </summary>
        /// <param name="param"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response AnnotationOnly(string @param, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(@param, nameof(@param));

            return AnnotationOnly(@param, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> annotationOnly. </summary>
        /// <param name="param"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> AnnotationOnlyAsync(string @param, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(@param, nameof(@param));

            return await AnnotationOnlyAsync(@param, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary> Initializes a new instance of PathParametersReservedExpansion. </summary>
        public virtual PathParametersReservedExpansion GetPathParametersReservedExpansionClient()
        {
            return Volatile.Read(ref _cachedPathParametersReservedExpansion) ?? Interlocked.CompareExchange(ref _cachedPathParametersReservedExpansion, new PathParametersReservedExpansion(ClientDiagnostics, Pipeline, _endpoint), null) ?? _cachedPathParametersReservedExpansion;
        }

        /// <summary> Initializes a new instance of PathParametersSimpleExpansion. </summary>
        public virtual PathParametersSimpleExpansion GetPathParametersSimpleExpansionClient()
        {
            return Volatile.Read(ref _cachedPathParametersSimpleExpansion) ?? Interlocked.CompareExchange(ref _cachedPathParametersSimpleExpansion, new PathParametersSimpleExpansion(ClientDiagnostics, Pipeline, _endpoint), null) ?? _cachedPathParametersSimpleExpansion;
        }

        /// <summary> Initializes a new instance of PathParametersPathExpansion. </summary>
        public virtual PathParametersPathExpansion GetPathParametersPathExpansionClient()
        {
            return Volatile.Read(ref _cachedPathParametersPathExpansion) ?? Interlocked.CompareExchange(ref _cachedPathParametersPathExpansion, new PathParametersPathExpansion(ClientDiagnostics, Pipeline, _endpoint), null) ?? _cachedPathParametersPathExpansion;
        }

        /// <summary> Initializes a new instance of PathParametersLabelExpansion. </summary>
        public virtual PathParametersLabelExpansion GetPathParametersLabelExpansionClient()
        {
            return Volatile.Read(ref _cachedPathParametersLabelExpansion) ?? Interlocked.CompareExchange(ref _cachedPathParametersLabelExpansion, new PathParametersLabelExpansion(ClientDiagnostics, Pipeline, _endpoint), null) ?? _cachedPathParametersLabelExpansion;
        }

        /// <summary> Initializes a new instance of PathParametersMatrixExpansion. </summary>
        public virtual PathParametersMatrixExpansion GetPathParametersMatrixExpansionClient()
        {
            return Volatile.Read(ref _cachedPathParametersMatrixExpansion) ?? Interlocked.CompareExchange(ref _cachedPathParametersMatrixExpansion, new PathParametersMatrixExpansion(ClientDiagnostics, Pipeline, _endpoint), null) ?? _cachedPathParametersMatrixExpansion;
        }
    }
}
