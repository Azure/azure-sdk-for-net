// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure;
using Azure.Core;

namespace Routes
{
    /// <summary></summary>
    public partial class QueryParametersQueryExpansionExplode
    {
        private static ResponseClassifier _pipelineMessageClassifier204;

        private static ResponseClassifier PipelineMessageClassifier204 => _pipelineMessageClassifier204 = new StatusCodeClassifier(stackalloc ushort[] { 204 });

        internal HttpMessage CreatePrimitiveRequest(string @param, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/routes/query/query-expansion/explode/primitive", false);
            uri.AppendQuery("param", @param, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateArrayRequest(IEnumerable<string> @param, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/routes/query/query-expansion/explode/array", false);
            if (@param != null && !(@param is ChangeTrackingList<string> changeTrackingList && changeTrackingList.IsUndefined))
            {
                foreach (var param0 in @param)
                {
                    uri.AppendQuery("param", param0, true);
                }
            }
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateRecordRequest(IDictionary<string, int> @param, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/routes/query/query-expansion/explode/record", false);
            if (@param != null && !(@param is ChangeTrackingDictionary<string, int> changeTrackingDictionary && changeTrackingDictionary.IsUndefined))
            {
                foreach (var param0 in @param)
                {
                    uri.AppendQuery(param0.Key, param0.Value, true);
                }
            }
            request.Uri = uri;
            return message;
        }
    }
}
