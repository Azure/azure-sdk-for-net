// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;

namespace SpecialHeaders.ConditionalRequest
{
    public partial class ConditionalRequestClient
    {
        public ConditionalRequestClient() : this(new Uri("http://localhost:3000"), new ConditionalRequestClientOptions()) => throw null;

        public ConditionalRequestClient(Uri endpoint, ConditionalRequestClientOptions options) => throw null;

        public virtual HttpPipeline Pipeline => throw null;

        public virtual Response PostIfMatch(ETag? ifMatch, RequestContext context) => throw null;

        public virtual Task<Response> PostIfMatchAsync(ETag? ifMatch, RequestContext context) => throw null;

        public virtual Response PostIfMatch(ETag? ifMatch = default, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> PostIfMatchAsync(ETag? ifMatch = default, CancellationToken cancellationToken = default) => throw null;

        public virtual Response PostIfNoneMatch(ETag? ifNoneMatch, RequestContext context) => throw null;

        public virtual Task<Response> PostIfNoneMatchAsync(ETag? ifNoneMatch, RequestContext context) => throw null;

        public virtual Response PostIfNoneMatch(ETag? ifNoneMatch = default, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> PostIfNoneMatchAsync(ETag? ifNoneMatch = default, CancellationToken cancellationToken = default) => throw null;

        public virtual Response HeadIfModifiedSince(RequestConditions requestConditions, RequestContext context) => throw null;

        public virtual Task<Response> HeadIfModifiedSinceAsync(RequestConditions requestConditions, RequestContext context) => throw null;

        public virtual Response HeadIfModifiedSince(RequestConditions requestConditions = default, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> HeadIfModifiedSinceAsync(RequestConditions requestConditions = default, CancellationToken cancellationToken = default) => throw null;

        public virtual Response PostIfUnmodifiedSince(RequestConditions requestConditions, RequestContext context) => throw null;

        public virtual Task<Response> PostIfUnmodifiedSinceAsync(RequestConditions requestConditions, RequestContext context) => throw null;

        public virtual Response PostIfUnmodifiedSince(RequestConditions requestConditions = default, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> PostIfUnmodifiedSinceAsync(RequestConditions requestConditions = default, CancellationToken cancellationToken = default) => throw null;
    }
}
