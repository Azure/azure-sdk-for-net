// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;
using Client.Structure.Service.Models;

namespace Client.Structure.Service
{
    /// <summary></summary>
    public partial class ServiceClient
    {
        /// <summary> Initializes a new instance of ServiceClient for mocking. </summary>
        protected ServiceClient() => throw null;

        /// <summary> Initializes a new instance of ServiceClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="client"> Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public ServiceClient(Uri endpoint, ClientType client) : this(endpoint, client, new ServiceClientOptions()) => throw null;

        /// <summary> Initializes a new instance of ServiceClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="client"> Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public ServiceClient(Uri endpoint, ClientType client, ServiceClientOptions options) => throw null;

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public ClientPipeline Pipeline => throw null;

        /// <summary>
        /// [Protocol Method] one
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult One(RequestOptions options) => throw null;

        /// <summary>
        /// [Protocol Method] one
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> OneAsync(RequestOptions options) => throw null;

        /// <summary> one. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult One(CancellationToken cancellationToken = default) => throw null;

        /// <summary> one. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual Task<ClientResult> OneAsync(CancellationToken cancellationToken = default) => throw null;

        /// <summary>
        /// [Protocol Method] two
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult Two(RequestOptions options) => throw null;

        /// <summary>
        /// [Protocol Method] two
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> TwoAsync(RequestOptions options) => throw null;

        /// <summary> two. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult Two(CancellationToken cancellationToken = default) => throw null;

        /// <summary> two. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual Task<ClientResult> TwoAsync(CancellationToken cancellationToken = default) => throw null;

        /// <summary> Initializes a new instance of Baz. </summary>
        public virtual Baz GetBazClient() => throw null;

        /// <summary> Initializes a new instance of Qux. </summary>
        public virtual Qux GetQuxClient() => throw null;

        /// <summary> Initializes a new instance of Foo. </summary>
        public virtual Foo GetFooClient() => throw null;

        /// <summary> Initializes a new instance of Bar. </summary>
        public virtual Bar GetBarClient() => throw null;
    }
}
