// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;

namespace Routes
{
    /// <summary></summary>
    public partial class PathParameters
    {
        /// <summary> Initializes a new instance of PathParameters for mocking. </summary>
        protected PathParameters() => throw null;

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public HttpPipeline Pipeline => throw null;

        /// <summary>
        /// [Protocol Method] templateOnly
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="param"></param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response TemplateOnly(string @param, RequestContext context) => throw null;

        /// <summary>
        /// [Protocol Method] templateOnly
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="param"></param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<Response> TemplateOnlyAsync(string @param, RequestContext context) => throw null;

        /// <summary> templateOnly. </summary>
        /// <param name="param"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response TemplateOnly(string @param, CancellationToken cancellationToken = default) => throw null;

        /// <summary> templateOnly. </summary>
        /// <param name="param"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Task<Response> TemplateOnlyAsync(string @param, CancellationToken cancellationToken = default) => throw null;

        /// <summary>
        /// [Protocol Method] explicit
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="param"></param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response Explicit(string @param, RequestContext context) => throw null;

        /// <summary>
        /// [Protocol Method] explicit
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="param"></param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<Response> ExplicitAsync(string @param, RequestContext context) => throw null;

        /// <summary> explicit. </summary>
        /// <param name="param"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response Explicit(string @param, CancellationToken cancellationToken = default) => throw null;

        /// <summary> explicit. </summary>
        /// <param name="param"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Task<Response> ExplicitAsync(string @param, CancellationToken cancellationToken = default) => throw null;

        /// <summary>
        /// [Protocol Method] annotationOnly
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="param"></param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response AnnotationOnly(string @param, RequestContext context) => throw null;

        /// <summary>
        /// [Protocol Method] annotationOnly
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="param"></param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<Response> AnnotationOnlyAsync(string @param, RequestContext context) => throw null;

        /// <summary> annotationOnly. </summary>
        /// <param name="param"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response AnnotationOnly(string @param, CancellationToken cancellationToken = default) => throw null;

        /// <summary> annotationOnly. </summary>
        /// <param name="param"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Task<Response> AnnotationOnlyAsync(string @param, CancellationToken cancellationToken = default) => throw null;

        /// <summary> Initializes a new instance of PathParametersReservedExpansion. </summary>
        public virtual PathParametersReservedExpansion GetPathParametersReservedExpansionClient() => throw null;

        /// <summary> Initializes a new instance of PathParametersSimpleExpansion. </summary>
        public virtual PathParametersSimpleExpansion GetPathParametersSimpleExpansionClient() => throw null;

        /// <summary> Initializes a new instance of PathParametersPathExpansion. </summary>
        public virtual PathParametersPathExpansion GetPathParametersPathExpansionClient() => throw null;

        /// <summary> Initializes a new instance of PathParametersLabelExpansion. </summary>
        public virtual PathParametersLabelExpansion GetPathParametersLabelExpansionClient() => throw null;

        /// <summary> Initializes a new instance of PathParametersMatrixExpansion. </summary>
        public virtual PathParametersMatrixExpansion GetPathParametersMatrixExpansionClient() => throw null;
    }
}
