// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Encode.Duration
{
    public partial class Header
    {
        protected Header() => throw null;

        public ClientPipeline Pipeline => throw null;

        public virtual ClientResult Default(TimeSpan duration, RequestOptions options) => throw null;

        public virtual Task<ClientResult> DefaultAsync(TimeSpan duration, RequestOptions options) => throw null;

        public virtual ClientResult Default(TimeSpan duration, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> DefaultAsync(TimeSpan duration, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult Iso8601(TimeSpan duration, RequestOptions options) => throw null;

        public virtual Task<ClientResult> Iso8601Async(TimeSpan duration, RequestOptions options) => throw null;

        public virtual ClientResult Iso8601(TimeSpan duration, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> Iso8601Async(TimeSpan duration, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult Iso8601Array(IEnumerable<TimeSpan> duration, RequestOptions options) => throw null;

        public virtual Task<ClientResult> Iso8601ArrayAsync(IEnumerable<TimeSpan> duration, RequestOptions options) => throw null;

        public virtual ClientResult Iso8601Array(IEnumerable<TimeSpan> duration, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> Iso8601ArrayAsync(IEnumerable<TimeSpan> duration, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult Int32Seconds(TimeSpan duration, RequestOptions options) => throw null;

        public virtual Task<ClientResult> Int32SecondsAsync(TimeSpan duration, RequestOptions options) => throw null;

        public virtual ClientResult Int32Seconds(TimeSpan duration, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> Int32SecondsAsync(TimeSpan duration, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult FloatSeconds(TimeSpan duration, RequestOptions options) => throw null;

        public virtual Task<ClientResult> FloatSecondsAsync(TimeSpan duration, RequestOptions options) => throw null;

        public virtual ClientResult FloatSeconds(TimeSpan duration, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> FloatSecondsAsync(TimeSpan duration, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult Float64Seconds(TimeSpan duration, RequestOptions options) => throw null;

        public virtual Task<ClientResult> Float64SecondsAsync(TimeSpan duration, RequestOptions options) => throw null;

        public virtual ClientResult Float64Seconds(TimeSpan duration, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> Float64SecondsAsync(TimeSpan duration, CancellationToken cancellationToken = default) => throw null;
    }
}
