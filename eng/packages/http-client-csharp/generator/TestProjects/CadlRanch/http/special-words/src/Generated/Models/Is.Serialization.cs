// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Text.Json;

namespace SpecialWords.Models
{
    /// <summary></summary>
    public partial class Is : IJsonModel<Is>
    {
        void IJsonModel<Is>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options) => throw null;

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options) => throw null;

        Is IJsonModel<Is>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => throw null;

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual Is JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => throw null;

        BinaryData IPersistableModel<Is>.Write(ModelReaderWriterOptions options) => throw null;

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options) => throw null;

        Is IPersistableModel<Is>.Create(BinaryData data, ModelReaderWriterOptions options) => throw null;

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual Is PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options) => throw null;

        string IPersistableModel<Is>.GetFormatFromOptions(ModelReaderWriterOptions options) => throw null;

        /// <param name="is"> The <see cref="Is"/> to serialize into <see cref="BinaryContent"/>. </param>
        public static implicit operator BinaryContent(Is @is) => throw null;

        /// <param name="result"> The <see cref="ClientResult"/> to deserialize the <see cref="Is"/> from. </param>
        public static explicit operator Is(ClientResult result) => throw null;
    }
}
