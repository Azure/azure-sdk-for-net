// <auto-generated/>

#nullable disable

using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;

namespace SpecialWords
{
    public partial class Parameters
    {
        protected Parameters() => throw null;

        public ClientPipeline Pipeline => throw null;

        public virtual ClientResult WithAnd(string @and, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithAndAsync(string @and, RequestOptions options) => throw null;

        public virtual ClientResult WithAnd(string @and, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithAndAsync(string @and, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithAs(string @as, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithAsAsync(string @as, RequestOptions options) => throw null;

        public virtual ClientResult WithAs(string @as, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithAsAsync(string @as, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithAssert(string assert, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithAssertAsync(string assert, RequestOptions options) => throw null;

        public virtual ClientResult WithAssert(string assert, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithAssertAsync(string assert, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithAsync(string @async, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithAsyncAsync(string @async, RequestOptions options) => throw null;

        public virtual ClientResult WithAsync(string @async, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithAsyncAsync(string @async, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithAwait(string @await, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithAwaitAsync(string @await, RequestOptions options) => throw null;

        public virtual ClientResult WithAwait(string @await, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithAwaitAsync(string @await, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithBreak(string @break, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithBreakAsync(string @break, RequestOptions options) => throw null;

        public virtual ClientResult WithBreak(string @break, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithBreakAsync(string @break, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithClass(string @class, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithClassAsync(string @class, RequestOptions options) => throw null;

        public virtual ClientResult WithClass(string @class, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithClassAsync(string @class, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithConstructor(string constructor, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithConstructorAsync(string constructor, RequestOptions options) => throw null;

        public virtual ClientResult WithConstructor(string constructor, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithConstructorAsync(string constructor, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithContinue(string @continue, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithContinueAsync(string @continue, RequestOptions options) => throw null;

        public virtual ClientResult WithContinue(string @continue, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithContinueAsync(string @continue, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithDef(string def, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithDefAsync(string def, RequestOptions options) => throw null;

        public virtual ClientResult WithDef(string def, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithDefAsync(string def, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithDel(string del, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithDelAsync(string del, RequestOptions options) => throw null;

        public virtual ClientResult WithDel(string del, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithDelAsync(string del, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithElif(string elif, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithElifAsync(string elif, RequestOptions options) => throw null;

        public virtual ClientResult WithElif(string elif, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithElifAsync(string elif, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithElse(string @else, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithElseAsync(string @else, RequestOptions options) => throw null;

        public virtual ClientResult WithElse(string @else, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithElseAsync(string @else, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithExcept(string except, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithExceptAsync(string except, RequestOptions options) => throw null;

        public virtual ClientResult WithExcept(string except, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithExceptAsync(string except, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithExec(string exec, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithExecAsync(string exec, RequestOptions options) => throw null;

        public virtual ClientResult WithExec(string exec, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithExecAsync(string exec, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithFinally(string @finally, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithFinallyAsync(string @finally, RequestOptions options) => throw null;

        public virtual ClientResult WithFinally(string @finally, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithFinallyAsync(string @finally, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithFor(string @for, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithForAsync(string @for, RequestOptions options) => throw null;

        public virtual ClientResult WithFor(string @for, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithForAsync(string @for, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithFrom(string @from, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithFromAsync(string @from, RequestOptions options) => throw null;

        public virtual ClientResult WithFrom(string @from, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithFromAsync(string @from, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithGlobal(string @global, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithGlobalAsync(string @global, RequestOptions options) => throw null;

        public virtual ClientResult WithGlobal(string @global, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithGlobalAsync(string @global, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithIf(string @if, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithIfAsync(string @if, RequestOptions options) => throw null;

        public virtual ClientResult WithIf(string @if, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithIfAsync(string @if, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithImport(string import, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithImportAsync(string import, RequestOptions options) => throw null;

        public virtual ClientResult WithImport(string import, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithImportAsync(string import, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithIn(string @in, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithInAsync(string @in, RequestOptions options) => throw null;

        public virtual ClientResult WithIn(string @in, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithInAsync(string @in, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithIs(string @is, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithIsAsync(string @is, RequestOptions options) => throw null;

        public virtual ClientResult WithIs(string @is, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithIsAsync(string @is, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithLambda(string lambda, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithLambdaAsync(string lambda, RequestOptions options) => throw null;

        public virtual ClientResult WithLambda(string lambda, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithLambdaAsync(string lambda, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithNot(string @not, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithNotAsync(string @not, RequestOptions options) => throw null;

        public virtual ClientResult WithNot(string @not, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithNotAsync(string @not, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithOr(string @or, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithOrAsync(string @or, RequestOptions options) => throw null;

        public virtual ClientResult WithOr(string @or, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithOrAsync(string @or, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithPass(string pass, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithPassAsync(string pass, RequestOptions options) => throw null;

        public virtual ClientResult WithPass(string pass, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithPassAsync(string pass, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithRaise(string raise, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithRaiseAsync(string raise, RequestOptions options) => throw null;

        public virtual ClientResult WithRaise(string raise, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithRaiseAsync(string raise, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithReturn(string @return, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithReturnAsync(string @return, RequestOptions options) => throw null;

        public virtual ClientResult WithReturn(string @return, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithReturnAsync(string @return, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithTry(string @try, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithTryAsync(string @try, RequestOptions options) => throw null;

        public virtual ClientResult WithTry(string @try, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithTryAsync(string @try, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithWhile(string @while, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithWhileAsync(string @while, RequestOptions options) => throw null;

        public virtual ClientResult WithWhile(string @while, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithWhileAsync(string @while, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithWith(string @with, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithWithAsync(string @with, RequestOptions options) => throw null;

        public virtual ClientResult WithWith(string @with, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithWithAsync(string @with, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithYield(string @yield, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithYieldAsync(string @yield, RequestOptions options) => throw null;

        public virtual ClientResult WithYield(string @yield, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithYieldAsync(string @yield, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithCancellationToken(string cancellationToken, RequestOptions options) => throw null;

        public virtual Task<ClientResult> WithCancellationTokenAsync(string cancellationToken, RequestOptions options) => throw null;

        public virtual ClientResult WithCancellationToken(string cancellationToken, CancellationToken cancellationToken0 = default) => throw null;

        public virtual Task<ClientResult> WithCancellationTokenAsync(string cancellationToken, CancellationToken cancellationToken0 = default) => throw null;
    }
}
