// <auto-generated/>

#nullable disable

using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;
using SpecialWords.Models;

namespace SpecialWords
{
    public partial class ModelsOps
    {
        protected ModelsOps() => throw null;

        public ClientPipeline Pipeline => throw null;

        public virtual ClientResult WithAnd(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithAndAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithAnd(And body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithAndAsync(And body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithAs(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithAsAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithAs(As body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithAsAsync(As body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithAssert(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithAssertAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithAssert(Assert body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithAssertAsync(Assert body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithAsyncAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithAsync(Async body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithAsyncAsync(Async body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithAwait(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithAwaitAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithAwait(Await body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithAwaitAsync(Await body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithBreak(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithBreakAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithBreak(Break body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithBreakAsync(Break body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithClass(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithClassAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithClass(Class body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithClassAsync(Class body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithConstructor(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithConstructorAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithConstructor(Constructor body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithConstructorAsync(Constructor body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithContinue(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithContinueAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithContinue(Continue body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithContinueAsync(Continue body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithDef(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithDefAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithDef(Def body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithDefAsync(Def body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithDel(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithDelAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithDel(Del body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithDelAsync(Del body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithElif(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithElifAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithElif(Elif body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithElifAsync(Elif body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithElse(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithElseAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithElse(Else body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithElseAsync(Else body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithExcept(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithExceptAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithExcept(Except body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithExceptAsync(Except body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithExec(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithExecAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithExec(Exec body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithExecAsync(Exec body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithFinally(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithFinallyAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithFinally(Finally body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithFinallyAsync(Finally body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithFor(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithForAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithFor(For body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithForAsync(For body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithFrom(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithFromAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithFrom(From body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithFromAsync(From body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithGlobal(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithGlobalAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithGlobal(Global body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithGlobalAsync(Global body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithIf(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithIfAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithIf(If body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithIfAsync(If body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithImport(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithImportAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithImport(Import body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithImportAsync(Import body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithIn(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithInAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithIn(In body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithInAsync(In body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithIs(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithIsAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithIs(Is body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithIsAsync(Is body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithLambda(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithLambdaAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithLambda(Lambda body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithLambdaAsync(Lambda body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithNot(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithNotAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithNot(Not body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithNotAsync(Not body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithOr(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithOrAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithOr(Or body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithOrAsync(Or body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithPass(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithPassAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithPass(Pass body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithPassAsync(Pass body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithRaise(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithRaiseAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithRaise(Raise body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithRaiseAsync(Raise body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithReturn(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithReturnAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithReturn(Return body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithReturnAsync(Return body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithTry(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithTryAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithTry(Try body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithTryAsync(Try body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithWhile(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithWhileAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithWhile(While body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithWhileAsync(While body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithWith(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithWithAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithWith(With body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithWithAsync(With body, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult WithYield(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual Task<ClientResult> WithYieldAsync(BinaryContent content, RequestOptions options = null) => throw null;

        public virtual ClientResult WithYield(Yield body, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult> WithYieldAsync(Yield body, CancellationToken cancellationToken = default) => throw null;
    }
}
