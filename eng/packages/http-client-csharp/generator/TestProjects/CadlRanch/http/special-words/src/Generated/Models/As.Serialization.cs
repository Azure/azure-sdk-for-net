// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace SpecialWords.Models
{
    /// <summary></summary>
    public partial class As : IJsonModel<As>
    {
        void IJsonModel<As>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options) => throw null;

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options) => throw null;

        As IJsonModel<As>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => throw null;

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual As JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => throw null;

        BinaryData IPersistableModel<As>.Write(ModelReaderWriterOptions options) => throw null;

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options) => throw null;

        As IPersistableModel<As>.Create(BinaryData data, ModelReaderWriterOptions options) => throw null;

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual As PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options) => throw null;

        string IPersistableModel<As>.GetFormatFromOptions(ModelReaderWriterOptions options) => throw null;

        /// <param name="as"> The <see cref="As"/> to serialize into <see cref="RequestContent"/>. </param>
        public static implicit operator RequestContent(As @as) => throw null;

        /// <param name="result"> The <see cref="Response"/> to deserialize the <see cref="As"/> from. </param>
        public static explicit operator As(Response result) => throw null;
    }
}
