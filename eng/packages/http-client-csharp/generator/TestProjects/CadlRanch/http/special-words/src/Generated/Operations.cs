// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;

namespace SpecialWords
{
    public partial class Operations
    {
        protected Operations() => throw null;

        public HttpPipeline Pipeline => throw null;

        public virtual Response And(RequestContext context) => throw null;

        public virtual Task<Response> AndAsync(RequestContext context) => throw null;

        public virtual Response And(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> AndAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response As(RequestContext context) => throw null;

        public virtual Task<Response> AsAsync(RequestContext context) => throw null;

        public virtual Response As(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> AsAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response Assert(RequestContext context) => throw null;

        public virtual Task<Response> AssertAsync(RequestContext context) => throw null;

        public virtual Response Assert(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> AssertAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response Async(RequestContext context) => throw null;

        public virtual Task<Response> AsyncAsync(RequestContext context) => throw null;

        public virtual Response Async(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> AsyncAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response Await(RequestContext context) => throw null;

        public virtual Task<Response> AwaitAsync(RequestContext context) => throw null;

        public virtual Response Await(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> AwaitAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response Break(RequestContext context) => throw null;

        public virtual Task<Response> BreakAsync(RequestContext context) => throw null;

        public virtual Response Break(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> BreakAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response Class(RequestContext context) => throw null;

        public virtual Task<Response> ClassAsync(RequestContext context) => throw null;

        public virtual Response Class(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> ClassAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response Constructor(RequestContext context) => throw null;

        public virtual Task<Response> ConstructorAsync(RequestContext context) => throw null;

        public virtual Response Constructor(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> ConstructorAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response Continue(RequestContext context) => throw null;

        public virtual Task<Response> ContinueAsync(RequestContext context) => throw null;

        public virtual Response Continue(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> ContinueAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response Def(RequestContext context) => throw null;

        public virtual Task<Response> DefAsync(RequestContext context) => throw null;

        public virtual Response Def(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> DefAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response Del(RequestContext context) => throw null;

        public virtual Task<Response> DelAsync(RequestContext context) => throw null;

        public virtual Response Del(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> DelAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response Elif(RequestContext context) => throw null;

        public virtual Task<Response> ElifAsync(RequestContext context) => throw null;

        public virtual Response Elif(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> ElifAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response Else(RequestContext context) => throw null;

        public virtual Task<Response> ElseAsync(RequestContext context) => throw null;

        public virtual Response Else(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> ElseAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response Except(RequestContext context) => throw null;

        public virtual Task<Response> ExceptAsync(RequestContext context) => throw null;

        public virtual Response Except(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> ExceptAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response Exec(RequestContext context) => throw null;

        public virtual Task<Response> ExecAsync(RequestContext context) => throw null;

        public virtual Response Exec(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> ExecAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response Finally(RequestContext context) => throw null;

        public virtual Task<Response> FinallyAsync(RequestContext context) => throw null;

        public virtual Response Finally(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> FinallyAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response For(RequestContext context) => throw null;

        public virtual Task<Response> ForAsync(RequestContext context) => throw null;

        public virtual Response For(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> ForAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response From(RequestContext context) => throw null;

        public virtual Task<Response> FromAsync(RequestContext context) => throw null;

        public virtual Response From(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> FromAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response Global(RequestContext context) => throw null;

        public virtual Task<Response> GlobalAsync(RequestContext context) => throw null;

        public virtual Response Global(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> GlobalAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response If(RequestContext context) => throw null;

        public virtual Task<Response> IfAsync(RequestContext context) => throw null;

        public virtual Response If(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> IfAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response Import(RequestContext context) => throw null;

        public virtual Task<Response> ImportAsync(RequestContext context) => throw null;

        public virtual Response Import(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> ImportAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response In(RequestContext context) => throw null;

        public virtual Task<Response> InAsync(RequestContext context) => throw null;

        public virtual Response In(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> InAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response Is(RequestContext context) => throw null;

        public virtual Task<Response> IsAsync(RequestContext context) => throw null;

        public virtual Response Is(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> IsAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response Lambda(RequestContext context) => throw null;

        public virtual Task<Response> LambdaAsync(RequestContext context) => throw null;

        public virtual Response Lambda(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> LambdaAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response Not(RequestContext context) => throw null;

        public virtual Task<Response> NotAsync(RequestContext context) => throw null;

        public virtual Response Not(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> NotAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response Or(RequestContext context) => throw null;

        public virtual Task<Response> OrAsync(RequestContext context) => throw null;

        public virtual Response Or(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> OrAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response Pass(RequestContext context) => throw null;

        public virtual Task<Response> PassAsync(RequestContext context) => throw null;

        public virtual Response Pass(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> PassAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response Raise(RequestContext context) => throw null;

        public virtual Task<Response> RaiseAsync(RequestContext context) => throw null;

        public virtual Response Raise(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> RaiseAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response Return(RequestContext context) => throw null;

        public virtual Task<Response> ReturnAsync(RequestContext context) => throw null;

        public virtual Response Return(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> ReturnAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response Try(RequestContext context) => throw null;

        public virtual Task<Response> TryAsync(RequestContext context) => throw null;

        public virtual Response Try(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> TryAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response While(RequestContext context) => throw null;

        public virtual Task<Response> WhileAsync(RequestContext context) => throw null;

        public virtual Response While(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WhileAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response With(RequestContext context) => throw null;

        public virtual Task<Response> WithAsync(RequestContext context) => throw null;

        public virtual Response With(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> WithAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual Response Yield(RequestContext context) => throw null;

        public virtual Task<Response> YieldAsync(RequestContext context) => throw null;

        public virtual Response Yield(CancellationToken cancellationToken = default) => throw null;

        public virtual Task<Response> YieldAsync(CancellationToken cancellationToken = default) => throw null;
    }
}
