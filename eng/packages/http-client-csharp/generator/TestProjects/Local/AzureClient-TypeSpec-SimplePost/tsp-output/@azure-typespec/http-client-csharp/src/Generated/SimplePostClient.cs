// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace SimplePost
{
    /// <summary></summary>
    public partial class SimplePostClient
    {
        private readonly Uri _endpoint;
        private SimplePostClient _cachedSimplePostClient;

        /// <summary> Initializes a new instance of SimplePostClient for mocking. </summary>
        protected SimplePostClient()
        {
        }

        internal SimplePostClient(HttpPipeline pipeline, Uri endpoint)
        {
            _endpoint = endpoint;
            Pipeline = pipeline;
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public HttpPipeline Pipeline { get; }

        /// <summary>
        /// [Protocol Method] IncrementCount
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="addend"></param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response IncrementCount(int addend, RequestContext context)
        {
            using HttpMessage message = CreateIncrementCountRequest(addend, context);
            return Pipeline.ProcessMessage(message, context);
        }

        /// <summary>
        /// [Protocol Method] IncrementCount
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="addend"></param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> IncrementCountAsync(int addend, RequestContext context)
        {
            using HttpMessage message = CreateIncrementCountRequest(addend, context);
            return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
        }

        /// <summary> IncrementCount. </summary>
        /// <param name="addend"></param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<int> IncrementCount(int addend)
        {
            Response result = IncrementCount(addend, null);
            return Response.FromValue(result.Content.ToObjectFromJson<int>(), result);
        }

        /// <summary> IncrementCount. </summary>
        /// <param name="addend"></param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<int>> IncrementCountAsync(int addend)
        {
            Response result = await IncrementCountAsync(addend, null).ConfigureAwait(false);
            return Response.FromValue(result.Content.ToObjectFromJson<int>(), result);
        }

        /// <summary> Initializes a new instance of SimplePostClient. </summary>
        public virtual SimplePostClient GetSimplePostClient()
        {
            return Volatile.Read(ref _cachedSimplePostClient) ?? Interlocked.CompareExchange(ref _cachedSimplePostClient, new SimplePostClient(Pipeline, _endpoint), null) ?? _cachedSimplePostClient;
        }
    }
}
