// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using BasicTypeSpec.Models;

namespace BasicTypeSpec
{
    /// <summary></summary>
    public partial class BasicTypeSpecClient
    {
        private readonly System.Uri _endpoint;
        private const string AuthorizationHeader = "my-api-key";
        /// <summary> A credential used to authenticate to the service. </summary>
        private readonly System.ClientModel.ApiKeyCredential _keyCredential;

        /// <summary> Initializes a new instance of BasicTypeSpecClient for mocking. </summary>
        protected BasicTypeSpecClient()
        {
        }

        /// <summary> Initializes a new instance of BasicTypeSpecClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="keyCredential"> A credential used to authenticate to the service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="keyCredential"/> is null. </exception>
        public BasicTypeSpecClient(System.Uri endpoint, System.ClientModel.ApiKeyCredential keyCredential) : this(endpoint, keyCredential, new BasicTypeSpecClientOptions())
        {
        }

        /// <summary> Initializes a new instance of BasicTypeSpecClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="keyCredential"> A credential used to authenticate to the service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="keyCredential"/> is null. </exception>
        public BasicTypeSpecClient(System.Uri endpoint, System.ClientModel.ApiKeyCredential keyCredential, BasicTypeSpecClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(keyCredential, nameof(keyCredential));

            options ??= new BasicTypeSpecClientOptions();

            _endpoint = endpoint;
            _keyCredential = keyCredential;
            Pipeline = System.ClientModel.Primitives.ClientPipeline.Create(options, Array.Empty<System.ClientModel.Primitives.PipelinePolicy>(), new System.ClientModel.Primitives.PipelinePolicy[] { System.ClientModel.Primitives.ApiKeyAuthenticationPolicy.CreateHeaderApiKeyPolicy(_keyCredential, AuthorizationHeader) }, Array.Empty<System.ClientModel.Primitives.PipelinePolicy>());
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public System.ClientModel.Primitives.ClientPipeline Pipeline { get; }

        /// <summary>
        /// [Protocol Method] Return hi
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="headParameter"></param>
        /// <param name="queryParameter"></param>
        /// <param name="optionalQuery"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="headParameter"/> or <paramref name="queryParameter"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual System.ClientModel.ClientResult SayHi(string headParameter, string queryParameter, string optionalQuery, System.ClientModel.Primitives.RequestOptions options)
        {
            Argument.AssertNotNull(headParameter, nameof(headParameter));
            Argument.AssertNotNull(queryParameter, nameof(queryParameter));

            using System.ClientModel.Primitives.PipelineMessage message = CreateSayHiRequest(headParameter, queryParameter, optionalQuery, options);
            return System.ClientModel.ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Return hi
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="headParameter"></param>
        /// <param name="queryParameter"></param>
        /// <param name="optionalQuery"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="headParameter"/> or <paramref name="queryParameter"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<System.ClientModel.ClientResult> SayHiAsync(string headParameter, string queryParameter, string optionalQuery, System.ClientModel.Primitives.RequestOptions options)
        {
            Argument.AssertNotNull(headParameter, nameof(headParameter));
            Argument.AssertNotNull(queryParameter, nameof(queryParameter));

            using System.ClientModel.Primitives.PipelineMessage message = CreateSayHiRequest(headParameter, queryParameter, optionalQuery, options);
            return System.ClientModel.ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Return hi. </summary>
        /// <param name="headParameter"></param>
        /// <param name="queryParameter"></param>
        /// <param name="optionalQuery"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="headParameter"/> or <paramref name="queryParameter"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual System.ClientModel.ClientResult<Thing> SayHi(string headParameter, string queryParameter, string optionalQuery)
        {
            Argument.AssertNotNull(headParameter, nameof(headParameter));
            Argument.AssertNotNull(queryParameter, nameof(queryParameter));

            System.ClientModel.ClientResult result = SayHi(headParameter, queryParameter, optionalQuery, null);
            return System.ClientModel.ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary> Return hi. </summary>
        /// <param name="headParameter"></param>
        /// <param name="queryParameter"></param>
        /// <param name="optionalQuery"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="headParameter"/> or <paramref name="queryParameter"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<System.ClientModel.ClientResult<Thing>> SayHiAsync(string headParameter, string queryParameter, string optionalQuery)
        {
            Argument.AssertNotNull(headParameter, nameof(headParameter));
            Argument.AssertNotNull(queryParameter, nameof(queryParameter));

            System.ClientModel.ClientResult result = await SayHiAsync(headParameter, queryParameter, optionalQuery, null).ConfigureAwait(false);
            return System.ClientModel.ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Return hi again
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="p2"></param>
        /// <param name="p1"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="p2"/>, <paramref name="p1"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual System.ClientModel.ClientResult HelloAgain(string p2, string p1, System.ClientModel.BinaryContent content, System.ClientModel.Primitives.RequestOptions options)
        {
            Argument.AssertNotNull(p2, nameof(p2));
            Argument.AssertNotNull(p1, nameof(p1));
            Argument.AssertNotNull(content, nameof(content));

            using System.ClientModel.Primitives.PipelineMessage message = CreateHelloAgainRequest(p2, p1, content, options);
            return System.ClientModel.ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Return hi again
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="p2"></param>
        /// <param name="p1"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="p2"/>, <paramref name="p1"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<System.ClientModel.ClientResult> HelloAgainAsync(string p2, string p1, System.ClientModel.BinaryContent content, System.ClientModel.Primitives.RequestOptions options)
        {
            Argument.AssertNotNull(p2, nameof(p2));
            Argument.AssertNotNull(p1, nameof(p1));
            Argument.AssertNotNull(content, nameof(content));

            using System.ClientModel.Primitives.PipelineMessage message = CreateHelloAgainRequest(p2, p1, content, options);
            return System.ClientModel.ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Return hi again. </summary>
        /// <param name="p2"></param>
        /// <param name="p1"></param>
        /// <param name="action"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="p2"/>, <paramref name="p1"/> or <paramref name="action"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual System.ClientModel.ClientResult<RoundTripModel> HelloAgain(string p2, string p1, RoundTripModel action)
        {
            Argument.AssertNotNull(p2, nameof(p2));
            Argument.AssertNotNull(p1, nameof(p1));
            Argument.AssertNotNull(action, nameof(action));

            System.ClientModel.ClientResult result = this.HelloAgain(p2, p1, action, null);
            return System.ClientModel.ClientResult.FromValue((RoundTripModel)result, result.GetRawResponse());
        }

        /// <summary> Return hi again. </summary>
        /// <param name="p2"></param>
        /// <param name="p1"></param>
        /// <param name="action"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="p2"/>, <paramref name="p1"/> or <paramref name="action"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<System.ClientModel.ClientResult<RoundTripModel>> HelloAgainAsync(string p2, string p1, RoundTripModel action)
        {
            Argument.AssertNotNull(p2, nameof(p2));
            Argument.AssertNotNull(p1, nameof(p1));
            Argument.AssertNotNull(action, nameof(action));

            System.ClientModel.ClientResult result = await this.HelloAgainAsync(p2, p1, action, null).ConfigureAwait(false);
            return System.ClientModel.ClientResult.FromValue((RoundTripModel)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Return hi again
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="p2"></param>
        /// <param name="p1"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="p2"/>, <paramref name="p1"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual System.ClientModel.ClientResult NoContentType(string p2, string p1, System.ClientModel.BinaryContent content, System.ClientModel.Primitives.RequestOptions options)
        {
            Argument.AssertNotNull(p2, nameof(p2));
            Argument.AssertNotNull(p1, nameof(p1));
            Argument.AssertNotNull(content, nameof(content));

            using System.ClientModel.Primitives.PipelineMessage message = CreateNoContentTypeRequest(p2, p1, content, options);
            return System.ClientModel.ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Return hi again
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="p2"></param>
        /// <param name="p1"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="p2"/>, <paramref name="p1"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<System.ClientModel.ClientResult> NoContentTypeAsync(string p2, string p1, System.ClientModel.BinaryContent content, System.ClientModel.Primitives.RequestOptions options)
        {
            Argument.AssertNotNull(p2, nameof(p2));
            Argument.AssertNotNull(p1, nameof(p1));
            Argument.AssertNotNull(content, nameof(content));

            using System.ClientModel.Primitives.PipelineMessage message = CreateNoContentTypeRequest(p2, p1, content, options);
            return System.ClientModel.ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] Return hi in demo2
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual System.ClientModel.ClientResult HelloDemo2(System.ClientModel.Primitives.RequestOptions options)
        {
            using System.ClientModel.Primitives.PipelineMessage message = CreateHelloDemo2Request(options);
            return System.ClientModel.ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Return hi in demo2
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<System.ClientModel.ClientResult> HelloDemo2Async(System.ClientModel.Primitives.RequestOptions options)
        {
            using System.ClientModel.Primitives.PipelineMessage message = CreateHelloDemo2Request(options);
            return System.ClientModel.ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Return hi in demo2. </summary>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual System.ClientModel.ClientResult<Thing> HelloDemo2()
        {
            System.ClientModel.ClientResult result = HelloDemo2(null);
            return System.ClientModel.ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary> Return hi in demo2. </summary>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<System.ClientModel.ClientResult<Thing>> HelloDemo2Async()
        {
            System.ClientModel.ClientResult result = await HelloDemo2Async(null).ConfigureAwait(false);
            return System.ClientModel.ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Create with literal value
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual System.ClientModel.ClientResult CreateLiteral(System.ClientModel.BinaryContent content, System.ClientModel.Primitives.RequestOptions options)
        {
            Argument.AssertNotNull(content, nameof(content));

            using System.ClientModel.Primitives.PipelineMessage message = CreateCreateLiteralRequest(content, options);
            return System.ClientModel.ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Create with literal value
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<System.ClientModel.ClientResult> CreateLiteralAsync(System.ClientModel.BinaryContent content, System.ClientModel.Primitives.RequestOptions options)
        {
            Argument.AssertNotNull(content, nameof(content));

            using System.ClientModel.Primitives.PipelineMessage message = CreateCreateLiteralRequest(content, options);
            return System.ClientModel.ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Create with literal value. </summary>
        /// <param name="body"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual System.ClientModel.ClientResult<Thing> CreateLiteral(Thing body)
        {
            Argument.AssertNotNull(body, nameof(body));

            System.ClientModel.ClientResult result = this.CreateLiteral(body, null);
            return System.ClientModel.ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary> Create with literal value. </summary>
        /// <param name="body"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<System.ClientModel.ClientResult<Thing>> CreateLiteralAsync(Thing body)
        {
            Argument.AssertNotNull(body, nameof(body));

            System.ClientModel.ClientResult result = await this.CreateLiteralAsync(body, null).ConfigureAwait(false);
            return System.ClientModel.ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Send literal parameters
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual System.ClientModel.ClientResult HelloLiteral(System.ClientModel.Primitives.RequestOptions options)
        {
            using System.ClientModel.Primitives.PipelineMessage message = CreateHelloLiteralRequest(options);
            return System.ClientModel.ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Send literal parameters
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<System.ClientModel.ClientResult> HelloLiteralAsync(System.ClientModel.Primitives.RequestOptions options)
        {
            using System.ClientModel.Primitives.PipelineMessage message = CreateHelloLiteralRequest(options);
            return System.ClientModel.ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Send literal parameters. </summary>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual System.ClientModel.ClientResult<Thing> HelloLiteral()
        {
            System.ClientModel.ClientResult result = HelloLiteral(null);
            return System.ClientModel.ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary> Send literal parameters. </summary>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<System.ClientModel.ClientResult<Thing>> HelloLiteralAsync()
        {
            System.ClientModel.ClientResult result = await HelloLiteralAsync(null).ConfigureAwait(false);
            return System.ClientModel.ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] top level method
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="action"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual System.ClientModel.ClientResult TopAction(DateTimeOffset action, System.ClientModel.Primitives.RequestOptions options)
        {
            using System.ClientModel.Primitives.PipelineMessage message = CreateTopActionRequest(action, options);
            return System.ClientModel.ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] top level method
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="action"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<System.ClientModel.ClientResult> TopActionAsync(DateTimeOffset action, System.ClientModel.Primitives.RequestOptions options)
        {
            using System.ClientModel.Primitives.PipelineMessage message = CreateTopActionRequest(action, options);
            return System.ClientModel.ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> top level method. </summary>
        /// <param name="action"></param>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual System.ClientModel.ClientResult<Thing> TopAction(DateTimeOffset action)
        {
            System.ClientModel.ClientResult result = TopAction(action, null);
            return System.ClientModel.ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary> top level method. </summary>
        /// <param name="action"></param>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<System.ClientModel.ClientResult<Thing>> TopActionAsync(DateTimeOffset action)
        {
            System.ClientModel.ClientResult result = await TopActionAsync(action, null).ConfigureAwait(false);
            return System.ClientModel.ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] top level method2
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual System.ClientModel.ClientResult TopAction2(System.ClientModel.Primitives.RequestOptions options)
        {
            using System.ClientModel.Primitives.PipelineMessage message = CreateTopAction2Request(options);
            return System.ClientModel.ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] top level method2
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<System.ClientModel.ClientResult> TopAction2Async(System.ClientModel.Primitives.RequestOptions options)
        {
            using System.ClientModel.Primitives.PipelineMessage message = CreateTopAction2Request(options);
            return System.ClientModel.ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] top level patch
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual System.ClientModel.ClientResult PatchAction(System.ClientModel.BinaryContent content, System.ClientModel.Primitives.RequestOptions options)
        {
            Argument.AssertNotNull(content, nameof(content));

            using System.ClientModel.Primitives.PipelineMessage message = CreatePatchActionRequest(content, options);
            return System.ClientModel.ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] top level patch
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<System.ClientModel.ClientResult> PatchActionAsync(System.ClientModel.BinaryContent content, System.ClientModel.Primitives.RequestOptions options)
        {
            Argument.AssertNotNull(content, nameof(content));

            using System.ClientModel.Primitives.PipelineMessage message = CreatePatchActionRequest(content, options);
            return System.ClientModel.ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] body parameter without body decorator
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual System.ClientModel.ClientResult AnonymousBody(System.ClientModel.BinaryContent content, System.ClientModel.Primitives.RequestOptions options)
        {
            Argument.AssertNotNull(content, nameof(content));

            using System.ClientModel.Primitives.PipelineMessage message = CreateAnonymousBodyRequest(content, options);
            return System.ClientModel.ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] body parameter without body decorator
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<System.ClientModel.ClientResult> AnonymousBodyAsync(System.ClientModel.BinaryContent content, System.ClientModel.Primitives.RequestOptions options)
        {
            Argument.AssertNotNull(content, nameof(content));

            using System.ClientModel.Primitives.PipelineMessage message = CreateAnonymousBodyRequest(content, options);
            return System.ClientModel.ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> body parameter without body decorator. </summary>
        /// <param name="name"></param>
        /// <param name="requiredUnion"></param>
        /// <param name="requiredLiteralString"></param>
        /// <param name="requiredLiteralInt"></param>
        /// <param name="requiredLiteralFloat"></param>
        /// <param name="requiredLiteralBool"></param>
        /// <param name="requiredBadDescription"></param>
        /// <param name="requiredNullableList"></param>
        /// <param name="optionalLiteralString"></param>
        /// <param name="optionalLiteralInt"></param>
        /// <param name="optionalLiteralFloat"></param>
        /// <param name="optionalLiteralBool"></param>
        /// <param name="optionalNullableList"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="requiredUnion"/> or <paramref name="requiredBadDescription"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual System.ClientModel.ClientResult<Thing> AnonymousBody(string name, System.BinaryData requiredUnion, ThingRequiredLiteralString requiredLiteralString, ThingRequiredLiteralInt requiredLiteralInt, ThingRequiredLiteralFloat requiredLiteralFloat, bool requiredLiteralBool, string requiredBadDescription, IEnumerable<int> requiredNullableList, ThingOptionalLiteralString? optionalLiteralString = default, ThingOptionalLiteralInt? optionalLiteralInt = default, ThingOptionalLiteralFloat? optionalLiteralFloat = default, bool? optionalLiteralBool = default, IEnumerable<int> optionalNullableList = default)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(requiredUnion, nameof(requiredUnion));
            Argument.AssertNotNull(requiredBadDescription, nameof(requiredBadDescription));

            Thing spreadModel = new Thing(
                name,
                requiredUnion,
                requiredLiteralString,
                requiredLiteralInt,
                requiredLiteralFloat,
                requiredLiteralBool,
                optionalLiteralString,
                optionalLiteralInt,
                optionalLiteralFloat,
                optionalLiteralBool,
                requiredBadDescription,
                optionalNullableList?.ToList() as IList<int> ?? new ChangeTrackingList<int>(),
                requiredNullableList?.ToList() as IList<int> ?? new ChangeTrackingList<int>(),
                null);
            System.ClientModel.ClientResult result = this.AnonymousBody(spreadModel, null);
            return System.ClientModel.ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary> body parameter without body decorator. </summary>
        /// <param name="name"></param>
        /// <param name="requiredUnion"></param>
        /// <param name="requiredLiteralString"></param>
        /// <param name="requiredLiteralInt"></param>
        /// <param name="requiredLiteralFloat"></param>
        /// <param name="requiredLiteralBool"></param>
        /// <param name="requiredBadDescription"></param>
        /// <param name="requiredNullableList"></param>
        /// <param name="optionalLiteralString"></param>
        /// <param name="optionalLiteralInt"></param>
        /// <param name="optionalLiteralFloat"></param>
        /// <param name="optionalLiteralBool"></param>
        /// <param name="optionalNullableList"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="requiredUnion"/> or <paramref name="requiredBadDescription"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<System.ClientModel.ClientResult<Thing>> AnonymousBodyAsync(string name, System.BinaryData requiredUnion, ThingRequiredLiteralString requiredLiteralString, ThingRequiredLiteralInt requiredLiteralInt, ThingRequiredLiteralFloat requiredLiteralFloat, bool requiredLiteralBool, string requiredBadDescription, IEnumerable<int> requiredNullableList, ThingOptionalLiteralString? optionalLiteralString = default, ThingOptionalLiteralInt? optionalLiteralInt = default, ThingOptionalLiteralFloat? optionalLiteralFloat = default, bool? optionalLiteralBool = default, IEnumerable<int> optionalNullableList = default)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(requiredUnion, nameof(requiredUnion));
            Argument.AssertNotNull(requiredBadDescription, nameof(requiredBadDescription));

            Thing spreadModel = new Thing(
                name,
                requiredUnion,
                requiredLiteralString,
                requiredLiteralInt,
                requiredLiteralFloat,
                requiredLiteralBool,
                optionalLiteralString,
                optionalLiteralInt,
                optionalLiteralFloat,
                optionalLiteralBool,
                requiredBadDescription,
                optionalNullableList?.ToList() as IList<int> ?? new ChangeTrackingList<int>(),
                requiredNullableList?.ToList() as IList<int> ?? new ChangeTrackingList<int>(),
                null);
            System.ClientModel.ClientResult result = await this.AnonymousBodyAsync(spreadModel, null).ConfigureAwait(false);
            return System.ClientModel.ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Model can have its friendly name
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual System.ClientModel.ClientResult FriendlyModel(System.ClientModel.BinaryContent content, System.ClientModel.Primitives.RequestOptions options)
        {
            Argument.AssertNotNull(content, nameof(content));

            using System.ClientModel.Primitives.PipelineMessage message = CreateFriendlyModelRequest(content, options);
            return System.ClientModel.ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Model can have its friendly name
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<System.ClientModel.ClientResult> FriendlyModelAsync(System.ClientModel.BinaryContent content, System.ClientModel.Primitives.RequestOptions options)
        {
            Argument.AssertNotNull(content, nameof(content));

            using System.ClientModel.Primitives.PipelineMessage message = CreateFriendlyModelRequest(content, options);
            return System.ClientModel.ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Model can have its friendly name. </summary>
        /// <param name="name"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual System.ClientModel.ClientResult<Friend> FriendlyModel(string name)
        {
            Argument.AssertNotNull(name, nameof(name));

            Friend spreadModel = new Friend(name, null);
            System.ClientModel.ClientResult result = this.FriendlyModel(spreadModel, null);
            return System.ClientModel.ClientResult.FromValue((Friend)result, result.GetRawResponse());
        }

        /// <summary> Model can have its friendly name. </summary>
        /// <param name="name"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<System.ClientModel.ClientResult<Friend>> FriendlyModelAsync(string name)
        {
            Argument.AssertNotNull(name, nameof(name));

            Friend spreadModel = new Friend(name, null);
            System.ClientModel.ClientResult result = await this.FriendlyModelAsync(spreadModel, null).ConfigureAwait(false);
            return System.ClientModel.ClientResult.FromValue((Friend)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] addTimeHeader
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual System.ClientModel.ClientResult AddTimeHeader(System.ClientModel.Primitives.RequestOptions options)
        {
            using System.ClientModel.Primitives.PipelineMessage message = CreateAddTimeHeaderRequest(options);
            return System.ClientModel.ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] addTimeHeader
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<System.ClientModel.ClientResult> AddTimeHeaderAsync(System.ClientModel.Primitives.RequestOptions options)
        {
            using System.ClientModel.Primitives.PipelineMessage message = CreateAddTimeHeaderRequest(options);
            return System.ClientModel.ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> addTimeHeader. </summary>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual System.ClientModel.ClientResult AddTimeHeader()
        {
            return AddTimeHeader(null);
        }

        /// <summary> addTimeHeader. </summary>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<System.ClientModel.ClientResult> AddTimeHeaderAsync()
        {
            return await AddTimeHeaderAsync(null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Model can have its projected name
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual System.ClientModel.ClientResult ProjectedNameModel(System.ClientModel.BinaryContent content, System.ClientModel.Primitives.RequestOptions options)
        {
            Argument.AssertNotNull(content, nameof(content));

            using System.ClientModel.Primitives.PipelineMessage message = CreateProjectedNameModelRequest(content, options);
            return System.ClientModel.ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Model can have its projected name
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<System.ClientModel.ClientResult> ProjectedNameModelAsync(System.ClientModel.BinaryContent content, System.ClientModel.Primitives.RequestOptions options)
        {
            Argument.AssertNotNull(content, nameof(content));

            using System.ClientModel.Primitives.PipelineMessage message = CreateProjectedNameModelRequest(content, options);
            return System.ClientModel.ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Model can have its projected name. </summary>
        /// <param name="name"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual System.ClientModel.ClientResult<ProjectedModel> ProjectedNameModel(string name)
        {
            Argument.AssertNotNull(name, nameof(name));

            ProjectedModel spreadModel = new ProjectedModel(name, null);
            System.ClientModel.ClientResult result = this.ProjectedNameModel(spreadModel, null);
            return System.ClientModel.ClientResult.FromValue((ProjectedModel)result, result.GetRawResponse());
        }

        /// <summary> Model can have its projected name. </summary>
        /// <param name="name"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<System.ClientModel.ClientResult<ProjectedModel>> ProjectedNameModelAsync(string name)
        {
            Argument.AssertNotNull(name, nameof(name));

            ProjectedModel spreadModel = new ProjectedModel(name, null);
            System.ClientModel.ClientResult result = await this.ProjectedNameModelAsync(spreadModel, null).ConfigureAwait(false);
            return System.ClientModel.ClientResult.FromValue((ProjectedModel)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] return anonymous model
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual System.ClientModel.ClientResult ReturnsAnonymousModel(System.ClientModel.Primitives.RequestOptions options)
        {
            using System.ClientModel.Primitives.PipelineMessage message = CreateReturnsAnonymousModelRequest(options);
            return System.ClientModel.ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] return anonymous model
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<System.ClientModel.ClientResult> ReturnsAnonymousModelAsync(System.ClientModel.Primitives.RequestOptions options)
        {
            using System.ClientModel.Primitives.PipelineMessage message = CreateReturnsAnonymousModelRequest(options);
            return System.ClientModel.ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> return anonymous model. </summary>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual System.ClientModel.ClientResult<ReturnsAnonymousModelResponse> ReturnsAnonymousModel()
        {
            System.ClientModel.ClientResult result = ReturnsAnonymousModel(null);
            return System.ClientModel.ClientResult.FromValue((ReturnsAnonymousModelResponse)result, result.GetRawResponse());
        }

        /// <summary> return anonymous model. </summary>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<System.ClientModel.ClientResult<ReturnsAnonymousModelResponse>> ReturnsAnonymousModelAsync()
        {
            System.ClientModel.ClientResult result = await ReturnsAnonymousModelAsync(null).ConfigureAwait(false);
            return System.ClientModel.ClientResult.FromValue((ReturnsAnonymousModelResponse)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] get extensible enum
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accept"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accept"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual System.ClientModel.ClientResult GetUnknownValue(string accept, System.ClientModel.Primitives.RequestOptions options)
        {
            Argument.AssertNotNull(accept, nameof(accept));

            using System.ClientModel.Primitives.PipelineMessage message = CreateGetUnknownValueRequest(accept, options);
            return System.ClientModel.ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] get extensible enum
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accept"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accept"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<System.ClientModel.ClientResult> GetUnknownValueAsync(string accept, System.ClientModel.Primitives.RequestOptions options)
        {
            Argument.AssertNotNull(accept, nameof(accept));

            using System.ClientModel.Primitives.PipelineMessage message = CreateGetUnknownValueRequest(accept, options);
            return System.ClientModel.ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> get extensible enum. </summary>
        /// <param name="accept"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="accept"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual System.ClientModel.ClientResult<string> GetUnknownValue(string accept)
        {
            Argument.AssertNotNull(accept, nameof(accept));

            System.ClientModel.ClientResult result = GetUnknownValue(accept, null);
            return System.ClientModel.ClientResult.FromValue(result.GetRawResponse().Content.ToObjectFromJson<string>(), result.GetRawResponse());
        }

        /// <summary> get extensible enum. </summary>
        /// <param name="accept"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="accept"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<System.ClientModel.ClientResult<string>> GetUnknownValueAsync(string accept)
        {
            Argument.AssertNotNull(accept, nameof(accept));

            System.ClientModel.ClientResult result = await GetUnknownValueAsync(accept, null).ConfigureAwait(false);
            return System.ClientModel.ClientResult.FromValue(result.GetRawResponse().Content.ToObjectFromJson<string>(), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] When set protocol false and convenient true, then the protocol method should be internal
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual System.ClientModel.ClientResult InternalProtocol(System.ClientModel.BinaryContent content, System.ClientModel.Primitives.RequestOptions options)
        {
            Argument.AssertNotNull(content, nameof(content));

            using System.ClientModel.Primitives.PipelineMessage message = CreateInternalProtocolRequest(content, options);
            return System.ClientModel.ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] When set protocol false and convenient true, then the protocol method should be internal
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<System.ClientModel.ClientResult> InternalProtocolAsync(System.ClientModel.BinaryContent content, System.ClientModel.Primitives.RequestOptions options)
        {
            Argument.AssertNotNull(content, nameof(content));

            using System.ClientModel.Primitives.PipelineMessage message = CreateInternalProtocolRequest(content, options);
            return System.ClientModel.ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> When set protocol false and convenient true, then the protocol method should be internal. </summary>
        /// <param name="body"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual System.ClientModel.ClientResult<Thing> InternalProtocol(Thing body)
        {
            Argument.AssertNotNull(body, nameof(body));

            System.ClientModel.ClientResult result = this.InternalProtocol(body, null);
            return System.ClientModel.ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary> When set protocol false and convenient true, then the protocol method should be internal. </summary>
        /// <param name="body"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<System.ClientModel.ClientResult<Thing>> InternalProtocolAsync(Thing body)
        {
            Argument.AssertNotNull(body, nameof(body));

            System.ClientModel.ClientResult result = await this.InternalProtocolAsync(body, null).ConfigureAwait(false);
            return System.ClientModel.ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] When set protocol false and convenient true, the convenient method should be generated even it has the same signature as protocol one
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual System.ClientModel.ClientResult StillConvenient(System.ClientModel.Primitives.RequestOptions options)
        {
            using System.ClientModel.Primitives.PipelineMessage message = CreateStillConvenientRequest(options);
            return System.ClientModel.ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] When set protocol false and convenient true, the convenient method should be generated even it has the same signature as protocol one
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<System.ClientModel.ClientResult> StillConvenientAsync(System.ClientModel.Primitives.RequestOptions options)
        {
            using System.ClientModel.Primitives.PipelineMessage message = CreateStillConvenientRequest(options);
            return System.ClientModel.ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> When set protocol false and convenient true, the convenient method should be generated even it has the same signature as protocol one. </summary>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual System.ClientModel.ClientResult StillConvenient()
        {
            return StillConvenient(null);
        }

        /// <summary> When set protocol false and convenient true, the convenient method should be generated even it has the same signature as protocol one. </summary>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<System.ClientModel.ClientResult> StillConvenientAsync()
        {
            return await StillConvenientAsync(null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] head as boolean.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="id"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual System.ClientModel.ClientResult HeadAsBoolean(string id, System.ClientModel.Primitives.RequestOptions options)
        {
            Argument.AssertNotNull(id, nameof(id));

            using System.ClientModel.Primitives.PipelineMessage message = CreateHeadAsBooleanRequest(id, options);
            return System.ClientModel.ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] head as boolean.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="id"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<System.ClientModel.ClientResult> HeadAsBooleanAsync(string id, System.ClientModel.Primitives.RequestOptions options)
        {
            Argument.AssertNotNull(id, nameof(id));

            using System.ClientModel.Primitives.PipelineMessage message = CreateHeadAsBooleanRequest(id, options);
            return System.ClientModel.ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> head as boolean. </summary>
        /// <param name="id"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual System.ClientModel.ClientResult HeadAsBoolean(string id)
        {
            Argument.AssertNotNull(id, nameof(id));

            return HeadAsBoolean(id, null);
        }

        /// <summary> head as boolean. </summary>
        /// <param name="id"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<System.ClientModel.ClientResult> HeadAsBooleanAsync(string id)
        {
            Argument.AssertNotNull(id, nameof(id));

            return await HeadAsBooleanAsync(id, null).ConfigureAwait(false);
        }
    }
}
