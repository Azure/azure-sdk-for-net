// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace BasicTypeSpec
{
    internal partial class BasicTypeSpecClientListWithNextLinkCollectionResult : Pageable<BinaryData>
    {
        private readonly BasicTypeSpecClient _client;
        private readonly Uri _nextPage;
        private readonly RequestContext _context;

        /// <summary> Initializes a new instance of BasicTypeSpecClientListWithNextLinkCollectionResult, which is used to iterate over the pages of a collection. </summary>
        /// <param name="client"> The BasicTypeSpecClient client used to send requests. </param>
        /// <param name="nextPage"> The url of the next page of responses. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        public BasicTypeSpecClientListWithNextLinkCollectionResult(BasicTypeSpecClient client, Uri nextPage, RequestContext context)
        {
            _client = client;
            _nextPage = nextPage;
            _context = context;
        }

        /// <summary> Gets the pages of BasicTypeSpecClientListWithNextLinkCollectionResult as an enumerable collection. </summary>
        /// <param name="continuationToken"> The continuation token. </param>
        /// <param name="pageSizeHint"> The page size hint. </param>
        /// <returns> The pages of BasicTypeSpecClientListWithNextLinkCollectionResult as an enumerable collection. </returns>
        public override IEnumerable<Page<BinaryData>> AsPages(string continuationToken, int? pageSizeHint)
        {
            return null;
        }

        /// <summary> Get response from next link. </summary>
        /// <param name="pageSizeHint"> The page size hint. </param>
        /// <param name="continuationToken"> The continuation token. </param>
        private Response GetNextResponse(int? pageSizeHint, string continuationToken)
        {
            HttpMessage message = _client.CreateListWithNextLinkRequest(_nextPage, _context);
            using DiagnosticScope scope = _client.ClientDiagnostics.CreateScope("BasicTypeSpecClient.ListWithNextLink");
            scope.Start();
            try
            {
                _client.Pipeline.Send(message, default);
                return GetResponse(message);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get response from message. </summary>
        /// <param name="message"> Http message. </param>
        private Response GetResponse(HttpMessage message)
        {
            if (message.Response.IsError && _context.ErrorOptions != ErrorOptions.NoThrow)
            {
                throw new RequestFailedException(message.Response);
            }
            return message.Response;
        }
    }
}
