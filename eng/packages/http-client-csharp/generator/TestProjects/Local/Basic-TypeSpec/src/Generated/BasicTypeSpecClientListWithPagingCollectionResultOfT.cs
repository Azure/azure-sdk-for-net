// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace BasicTypeSpec
{
    internal partial class BasicTypeSpecClientListWithPagingCollectionResultOfT : Pageable<ThingModel>
    {
        private readonly BasicTypeSpecClient _client;
        private readonly RequestContext _context;

        /// <summary> Initializes a new instance of BasicTypeSpecClientListWithPagingCollectionResultOfT, which is used to iterate over the pages of a collection. </summary>
        /// <param name="client"> The BasicTypeSpecClient client used to send requests. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        public BasicTypeSpecClientListWithPagingCollectionResultOfT(BasicTypeSpecClient client, RequestContext context)
        {
            _client = client;
            _context = context;
        }

        /// <summary> Gets the pages of BasicTypeSpecClientListWithPagingCollectionResultOfT as an enumerable collection. </summary>
        /// <param name="continuationToken"> A continuation token indicating where to resume paging. </param>
        /// <param name="pageSizeHint"> The number of items per page. </param>
        /// <returns> The pages of BasicTypeSpecClientListWithPagingCollectionResultOfT as an enumerable collection. </returns>
        public override IEnumerable<Page<ThingModel>> AsPages(string continuationToken, int? pageSizeHint)
        {
            do
            {
                Response response = GetNextResponse(pageSizeHint, continuationToken);
                if (response is null)
                {
                    yield break;
                }
                PageThingModel responseWithType = (PageThingModel)response;
                continuationToken = null;
                yield return Page<ThingModel>.FromValues((IReadOnlyList<ThingModel>)responseWithType.Items, continuationToken, response);
            }
            while (!string.IsNullOrEmpty(continuationToken));
        }

        /// <summary> Get response from next link. </summary>
        /// <param name="pageSizeHint"> The number of items per page. </param>
        /// <param name="continuationToken"> A continuation token indicating where to resume paging. </param>
        private Response GetNextResponse(int? pageSizeHint, string continuationToken)
        {
            HttpMessage message = _client.CreateListWithPagingRequest(_context);
            using DiagnosticScope scope = _client.ClientDiagnostics.CreateScope("BasicTypeSpecClient.ListWithPaging");
            scope.Start();
            try
            {
                _client.Pipeline.Send(message, _context.CancellationToken);
                if (message.Response.IsError && _context.ErrorOptions != ErrorOptions.NoThrow)
                {
                    throw new RequestFailedException(message.Response);
                }
                return message.Response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
