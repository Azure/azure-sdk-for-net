// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using BasicTypeSpec;

namespace BasicTypeSpec.Models
{
    /// <summary></summary>
    public partial class Friend : System.ClientModel.Primitives.IJsonModel<Friend>
    {
        internal Friend()
        {
        }

        void System.ClientModel.Primitives.IJsonModel<Friend>.Write(System.Text.Json.Utf8JsonWriter writer, System.ClientModel.Primitives.ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(System.Text.Json.Utf8JsonWriter writer, System.ClientModel.Primitives.ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((System.ClientModel.Primitives.IPersistableModel<Friend>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(Friend)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (System.Text.Json.JsonDocument document = System.Text.Json.JsonDocument.Parse(item.Value))
                    {
                        System.Text.Json.JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        Friend System.ClientModel.Primitives.IJsonModel<Friend>.Create(ref System.Text.Json.Utf8JsonReader reader, System.ClientModel.Primitives.ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual Friend JsonModelCreateCore(ref System.Text.Json.Utf8JsonReader reader, System.ClientModel.Primitives.ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((System.ClientModel.Primitives.IPersistableModel<Friend>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(Friend)} does not support reading '{format}' format.");
            }
            using System.Text.Json.JsonDocument document = System.Text.Json.JsonDocument.ParseValue(ref reader);
            return Friend.DeserializeFriend(document.RootElement, options);
        }

        internal static Friend DeserializeFriend(System.Text.Json.JsonElement element, System.ClientModel.Primitives.ModelReaderWriterOptions options)
        {
            if (element.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            IDictionary<string, System.BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, System.BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("name"u8))
                {
                    name = prop.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, System.BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new Friend(name, additionalBinaryDataProperties);
        }

        System.BinaryData System.ClientModel.Primitives.IPersistableModel<Friend>.Write(System.ClientModel.Primitives.ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual System.BinaryData PersistableModelWriteCore(System.ClientModel.Primitives.ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((System.ClientModel.Primitives.IPersistableModel<Friend>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return System.ClientModel.Primitives.ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(Friend)} does not support writing '{options.Format}' format.");
            }
        }

        Friend System.ClientModel.Primitives.IPersistableModel<Friend>.Create(System.BinaryData data, System.ClientModel.Primitives.ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual Friend PersistableModelCreateCore(System.BinaryData data, System.ClientModel.Primitives.ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((System.ClientModel.Primitives.IPersistableModel<Friend>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (System.Text.Json.JsonDocument document = System.Text.Json.JsonDocument.Parse(data))
                    {
                        return Friend.DeserializeFriend(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(Friend)} does not support reading '{options.Format}' format.");
            }
        }

        string System.ClientModel.Primitives.IPersistableModel<Friend>.GetFormatFromOptions(System.ClientModel.Primitives.ModelReaderWriterOptions options) => "J";

        /// <param name="friend"> The <see cref="Friend"/> to serialize into <see cref="System.ClientModel.BinaryContent"/>. </param>
        public static implicit operator BinaryContent(Friend friend)
        {
            return System.ClientModel.BinaryContent.Create(friend, ModelSerializationExtensions.WireOptions);
        }

        /// <param name="result"> The <see cref="System.ClientModel.ClientResult"/> to deserialize the <see cref="Friend"/> from. </param>
        public static explicit operator Friend(System.ClientModel.ClientResult result)
        {
            using System.ClientModel.Primitives.PipelineResponse response = result.GetRawResponse();
            using System.Text.Json.JsonDocument document = System.Text.Json.JsonDocument.Parse(response.Content);
            return Friend.DeserializeFriend(document.RootElement, ModelSerializationExtensions.WireOptions);
        }
    }
}
