// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Diagnostics.CodeAnalysis;
using Azure;
using Azure.Core.Extensions;
using BasicTypeSpec;

namespace Microsoft.Extensions.Azure
{
    /// <summary> Extension methods to add clients to <see cref="IAzureClientBuilder{TClient,TOptions}"/>. </summary>
    public static partial class BasicTypeSpecClientBuilderExtensions
    {
        /// <summary> Registers a <see cref="BasicTypeSpecClient"/> client with the specified <see cref="IAzureClientBuilder{TClient,TOptions}"/>. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public static IAzureClientBuilder<BasicTypeSpecClient, BasicTypeSpecClientOptions> AddBasicTypeSpecClient<TBuilder>(this TBuilder builder, Uri endpoint, AzureKeyCredential credential)
            where TBuilder : IAzureClientFactoryBuilder
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));

            return builder.RegisterClientFactory<BasicTypeSpecClient, BasicTypeSpecClientOptions>(options => new BasicTypeSpecClient(endpoint, credential, options));
        }

        /// <summary> Registers a <see cref="BasicTypeSpecClient"/> client with the specified <see cref="IAzureClientBuilder{TClient,TOptions}"/>. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public static IAzureClientBuilder<BasicTypeSpecClient, BasicTypeSpecClientOptions> AddBasicTypeSpecClient<TBuilder>(this TBuilder builder, Uri endpoint)
            where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));

            return builder.RegisterClientFactory<BasicTypeSpecClient, BasicTypeSpecClientOptions>((options, credential) => new BasicTypeSpecClient(endpoint, credential, options));
        }

        /// <summary> Registers a <see cref="BasicTypeSpecClient"/> client with the specified <see cref="IAzureClientBuilder{TClient,TOptions}"/>. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration to use for the client. </param>
        [RequiresUnreferencedCode("Requires unreferenced code until we opt into EnableConfigurationBindingGenerator.")]
        [RequiresDynamicCode("Requires unreferenced code until we opt into EnableConfigurationBindingGenerator.")]
        public static IAzureClientBuilder<BasicTypeSpecClient, BasicTypeSpecClientOptions> AddBasicTypeSpecClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
            where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<BasicTypeSpecClient, BasicTypeSpecClientOptions>(configuration);
        }
    }
}
