// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace BasicTypeSpec
{
    internal static partial class ClientPipelineExtensions
    {
        public static async ValueTask<Response> ProcessMessageAsync(this HttpPipeline pipeline, HttpMessage message, RequestContext context)
        {
            (CancellationToken userCancellationToken, ErrorOptions statusOption) = context.Parse();
            await pipeline.SendAsync(message, userCancellationToken).ConfigureAwait(false);

            if (message.Response.IsError && (context?.ErrorOptions & ErrorOptions.NoThrow) != ErrorOptions.NoThrow)
            {
                throw new RequestFailedException(message.Response);
            }

            return message.Response;
        }

        public static Response ProcessMessage(this HttpPipeline pipeline, HttpMessage message, RequestContext context)
        {
            (CancellationToken userCancellationToken, ErrorOptions statusOption) = context.Parse();
            pipeline.Send(message, userCancellationToken);

            if (message.Response.IsError && (context?.ErrorOptions & ErrorOptions.NoThrow) != ErrorOptions.NoThrow)
            {
                throw new RequestFailedException(message.Response);
            }

            return message.Response;
        }

        public static async ValueTask<Response<bool>> ProcessHeadAsBoolMessageAsync(this HttpPipeline pipeline, HttpMessage message, RequestContext context)
        {
            Response response = await pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            switch (response.Status)
            {
                case >= 200 and < 300:
                    return Response.FromValue(true, response);
                case >= 400 and < 500:
                    return Response.FromValue(false, response);
                default:
                    return new ErrorResult<bool>(response, new RequestFailedException(response));
            }
        }

        public static Response<bool> ProcessHeadAsBoolMessage(this HttpPipeline pipeline, HttpMessage message, RequestContext context)
        {
            Response response = pipeline.ProcessMessage(message, context);
            switch (response.Status)
            {
                case >= 200 and < 300:
                    return Response.FromValue(true, response);
                case >= 400 and < 500:
                    return Response.FromValue(false, response);
                default:
                    return new ErrorResult<bool>(response, new RequestFailedException(response));
            }
        }
    }
}
