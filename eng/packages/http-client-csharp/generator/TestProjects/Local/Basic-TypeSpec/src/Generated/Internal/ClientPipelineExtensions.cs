// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading.Tasks;

namespace BasicTypeSpec
{
    internal static partial class ClientPipelineExtensions
    {
        public static async ValueTask<System.ClientModel.Primitives.PipelineResponse> ProcessMessageAsync(this System.ClientModel.Primitives.ClientPipeline pipeline, System.ClientModel.Primitives.PipelineMessage message, System.ClientModel.Primitives.RequestOptions options)
        {
            await pipeline.SendAsync(message).ConfigureAwait(false);

            if (message.Response.IsError && (options?.ErrorOptions & System.ClientModel.Primitives.ClientErrorBehaviors.NoThrow) != System.ClientModel.Primitives.ClientErrorBehaviors.NoThrow)
            {
                throw await System.ClientModel.ClientResultException.CreateAsync(message.Response).ConfigureAwait(false);
            }

            System.ClientModel.Primitives.PipelineResponse response = message.BufferResponse ? message.Response : message.ExtractResponse();
            return response;
        }

        public static System.ClientModel.Primitives.PipelineResponse ProcessMessage(this System.ClientModel.Primitives.ClientPipeline pipeline, System.ClientModel.Primitives.PipelineMessage message, System.ClientModel.Primitives.RequestOptions options)
        {
            pipeline.Send(message);

            if (message.Response.IsError && (options?.ErrorOptions & System.ClientModel.Primitives.ClientErrorBehaviors.NoThrow) != System.ClientModel.Primitives.ClientErrorBehaviors.NoThrow)
            {
                throw new System.ClientModel.ClientResultException(message.Response);
            }

            System.ClientModel.Primitives.PipelineResponse response = message.BufferResponse ? message.Response : message.ExtractResponse();
            return response;
        }

        public static async ValueTask<System.ClientModel.ClientResult<bool>> ProcessHeadAsBoolMessageAsync(this System.ClientModel.Primitives.ClientPipeline pipeline, System.ClientModel.Primitives.PipelineMessage message, System.ClientModel.Primitives.RequestOptions options)
        {
            System.ClientModel.Primitives.PipelineResponse response = await pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false);
            switch (response.Status)
            {
                case >= 200 and < 300:
                    return System.ClientModel.ClientResult.FromValue<bool>(true, response);
                case >= 400 and < 500:
                    return System.ClientModel.ClientResult.FromValue<bool>(false, response);
                default:
                    return new ErrorResult<bool>(response, new System.ClientModel.ClientResultException(response));
            }
        }

        public static System.ClientModel.ClientResult<bool> ProcessHeadAsBoolMessage(this System.ClientModel.Primitives.ClientPipeline pipeline, System.ClientModel.Primitives.PipelineMessage message, System.ClientModel.Primitives.RequestOptions options)
        {
            System.ClientModel.Primitives.PipelineResponse response = pipeline.ProcessMessage(message, options);
            switch (response.Status)
            {
                case >= 200 and < 300:
                    return System.ClientModel.ClientResult.FromValue<bool>(true, response);
                case >= 400 and < 500:
                    return System.ClientModel.ClientResult.FromValue<bool>(false, response);
                default:
                    return new ErrorResult<bool>(response, new System.ClientModel.ClientResultException(response));
            }
        }
    }
}
