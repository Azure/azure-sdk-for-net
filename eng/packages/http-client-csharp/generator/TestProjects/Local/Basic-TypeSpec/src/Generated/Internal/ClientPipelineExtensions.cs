// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.ClientModel.Primitives;
using System.Threading.Tasks;
using Azure;

namespace BasicTypeSpec
{
    internal static partial class ClientPipelineExtensions
    {
        public static async ValueTask<global::Azure.Response> ProcessMessageAsync(this ClientPipeline pipeline, PipelineMessage message, RequestOptions options)
        {
            await pipeline.SendAsync(message).ConfigureAwait(false);

            if (message.Response.IsError && (options?.ErrorOptions & ClientErrorBehaviors.NoThrow) != ClientErrorBehaviors.NoThrow)
            {
                throw await global::Azure.RequestFailedException.CreateAsync(message.Response).ConfigureAwait(false);
            }

            PipelineResponse response = message.BufferResponse ? message.Response : message.ExtractResponse();
            return response;
        }

        public static global::Azure.Response ProcessMessage(this ClientPipeline pipeline, PipelineMessage message, RequestOptions options)
        {
            pipeline.Send(message);

            if (message.Response.IsError && (options?.ErrorOptions & ClientErrorBehaviors.NoThrow) != ClientErrorBehaviors.NoThrow)
            {
                throw new global::Azure.RequestFailedException(message.Response);
            }

            global::Azure.Response response = message.BufferResponse ? message.Response : message.ExtractResponse();
            return response;
        }

        public static async ValueTask<global::Azure.Response<bool>> ProcessHeadAsBoolMessageAsync(this ClientPipeline pipeline, PipelineMessage message, RequestOptions options)
        {
            global::Azure.Response response = await pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false);
            switch (response.Status)
            {
                case >= 200 and < 300:
                    return global::Azure.Response.FromValue<bool>(true, response);
                case >= 400 and < 500:
                    return global::Azure.Response.FromValue<bool>(false, response);
                default:
                    return new ErrorResult<bool>(response, new global::Azure.RequestFailedException(response));
            }
        }

        public static global::Azure.Response<bool> ProcessHeadAsBoolMessage(this ClientPipeline pipeline, PipelineMessage message, RequestOptions options)
        {
            global::Azure.Response response = pipeline.ProcessMessage(message, options);
            switch (response.Status)
            {
                case >= 200 and < 300:
                    return global::Azure.Response.FromValue<bool>(true, response);
                case >= 400 and < 500:
                    return global::Azure.Response.FromValue<bool>(false, response);
                default:
                    return new ErrorResult<bool>(response, new global::Azure.RequestFailedException(response));
            }
        }
    }
}
