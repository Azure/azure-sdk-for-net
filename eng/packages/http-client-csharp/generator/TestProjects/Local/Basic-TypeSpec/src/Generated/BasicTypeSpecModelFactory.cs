// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using BasicTypeSpec;

namespace BasicTypeSpec.Models
{
    /// <summary> A factory class for creating instances of the models for mocking. </summary>
    public static partial class BasicTypeSpecModelFactory
    {
        /// <summary> The Thing. </summary>
        /// <param name="name"></param>
        /// <param name="requiredUnion"></param>
        /// <param name="requiredLiteralString"></param>
        /// <param name="requiredLiteralInt"></param>
        /// <param name="requiredLiteralFloat"></param>
        /// <param name="requiredLiteralBool"></param>
        /// <param name="optionalLiteralString"></param>
        /// <param name="optionalLiteralInt"></param>
        /// <param name="optionalLiteralFloat"></param>
        /// <param name="optionalLiteralBool"></param>
        /// <param name="requiredBadDescription"></param>
        /// <param name="optionalNullableList"></param>
        /// <param name="requiredNullableList"></param>
        /// <returns> A new <see cref="Models.Thing"/> instance for mocking. </returns>
        public static Thing Thing(string name = default, BinaryData requiredUnion = default, ThingRequiredLiteralString requiredLiteralString = default, ThingRequiredLiteralInt requiredLiteralInt = default, ThingRequiredLiteralFloat requiredLiteralFloat = default, bool requiredLiteralBool = default, ThingOptionalLiteralString? optionalLiteralString = default, ThingOptionalLiteralInt? optionalLiteralInt = default, ThingOptionalLiteralFloat? optionalLiteralFloat = default, bool? optionalLiteralBool = default, string requiredBadDescription = default, IEnumerable<int> optionalNullableList = default, IEnumerable<int> requiredNullableList = default)
        {
            optionalNullableList ??= new ChangeTrackingList<int>();
            requiredNullableList ??= new ChangeTrackingList<int>();

            return new Thing(
                name,
                requiredUnion,
                requiredLiteralString,
                requiredLiteralInt,
                requiredLiteralFloat,
                requiredLiteralBool,
                optionalLiteralString,
                optionalLiteralInt,
                optionalLiteralFloat,
                optionalLiteralBool,
                requiredBadDescription,
                optionalNullableList?.ToList(),
                requiredNullableList?.ToList(),
                null);
        }

        /// <summary> The RoundTripModel. </summary>
        /// <param name="requiredString"></param>
        /// <param name="requiredInt"></param>
        /// <param name="requiredCollection"></param>
        /// <param name="requiredDictionary"></param>
        /// <param name="requiredModel"></param>
        /// <param name="intExtensibleEnum"></param>
        /// <param name="intExtensibleEnumCollection"></param>
        /// <param name="floatExtensibleEnum"></param>
        /// <param name="floatExtensibleEnumWithIntValue"></param>
        /// <param name="floatExtensibleEnumCollection"></param>
        /// <param name="floatFixedEnum"></param>
        /// <param name="floatFixedEnumWithIntValue"></param>
        /// <param name="floatFixedEnumCollection"></param>
        /// <param name="intFixedEnum"></param>
        /// <param name="intFixedEnumCollection"></param>
        /// <param name="stringFixedEnum"></param>
        /// <param name="requiredUnknown"></param>
        /// <param name="optionalUnknown"></param>
        /// <param name="requiredRecordUnknown"></param>
        /// <param name="optionalRecordUnknown"></param>
        /// <param name="readOnlyRequiredRecordUnknown"></param>
        /// <param name="readOnlyOptionalRecordUnknown"></param>
        /// <param name="modelWithRequiredNullable"></param>
        /// <param name="requiredBytes"></param>
        /// <returns> A new <see cref="Models.RoundTripModel"/> instance for mocking. </returns>
        public static RoundTripModel RoundTripModel(string requiredString = default, int requiredInt = default, IEnumerable<StringFixedEnum> requiredCollection = default, IDictionary<string, StringExtensibleEnum> requiredDictionary = default, Thing requiredModel = default, IntExtensibleEnum? intExtensibleEnum = default, IEnumerable<IntExtensibleEnum> intExtensibleEnumCollection = default, FloatExtensibleEnum? floatExtensibleEnum = default, FloatExtensibleEnumWithIntValue? floatExtensibleEnumWithIntValue = default, IEnumerable<FloatExtensibleEnum> floatExtensibleEnumCollection = default, FloatFixedEnum? floatFixedEnum = default, FloatFixedEnumWithIntValue? floatFixedEnumWithIntValue = default, IEnumerable<FloatFixedEnum> floatFixedEnumCollection = default, IntFixedEnum? intFixedEnum = default, IEnumerable<IntFixedEnum> intFixedEnumCollection = default, StringFixedEnum? stringFixedEnum = default, BinaryData requiredUnknown = default, BinaryData optionalUnknown = default, IDictionary<string, BinaryData> requiredRecordUnknown = default, IDictionary<string, BinaryData> optionalRecordUnknown = default, IReadOnlyDictionary<string, BinaryData> readOnlyRequiredRecordUnknown = default, IReadOnlyDictionary<string, BinaryData> readOnlyOptionalRecordUnknown = default, ModelWithRequiredNullableProperties modelWithRequiredNullable = default, BinaryData requiredBytes = default)
        {
            requiredCollection ??= new ChangeTrackingList<StringFixedEnum>();
            requiredDictionary ??= new ChangeTrackingDictionary<string, StringExtensibleEnum>();
            intExtensibleEnumCollection ??= new ChangeTrackingList<IntExtensibleEnum>();
            floatExtensibleEnumCollection ??= new ChangeTrackingList<FloatExtensibleEnum>();
            floatFixedEnumCollection ??= new ChangeTrackingList<FloatFixedEnum>();
            intFixedEnumCollection ??= new ChangeTrackingList<IntFixedEnum>();
            requiredRecordUnknown ??= new ChangeTrackingDictionary<string, BinaryData>();
            optionalRecordUnknown ??= new ChangeTrackingDictionary<string, BinaryData>();
            readOnlyRequiredRecordUnknown ??= new ChangeTrackingDictionary<string, BinaryData>();
            readOnlyOptionalRecordUnknown ??= new ChangeTrackingDictionary<string, BinaryData>();

            return new RoundTripModel(
                requiredString,
                requiredInt,
                requiredCollection?.ToList(),
                requiredDictionary,
                requiredModel,
                intExtensibleEnum,
                intExtensibleEnumCollection?.ToList(),
                floatExtensibleEnum,
                floatExtensibleEnumWithIntValue,
                floatExtensibleEnumCollection?.ToList(),
                floatFixedEnum,
                floatFixedEnumWithIntValue,
                floatFixedEnumCollection?.ToList(),
                intFixedEnum,
                intFixedEnumCollection?.ToList(),
                stringFixedEnum,
                requiredUnknown,
                optionalUnknown,
                requiredRecordUnknown,
                optionalRecordUnknown,
                readOnlyRequiredRecordUnknown,
                readOnlyOptionalRecordUnknown,
                modelWithRequiredNullable,
                requiredBytes,
                null);
        }

        /// <summary> The ModelWithRequiredNullableProperties. </summary>
        /// <param name="requiredNullablePrimitive"></param>
        /// <param name="requiredExtensibleEnum"></param>
        /// <param name="requiredFixedEnum"></param>
        /// <returns> A new <see cref="Models.ModelWithRequiredNullableProperties"/> instance for mocking. </returns>
        public static ModelWithRequiredNullableProperties ModelWithRequiredNullableProperties(int? requiredNullablePrimitive = default, StringExtensibleEnum? requiredExtensibleEnum = default, StringFixedEnum? requiredFixedEnum = default)
        {

            return new ModelWithRequiredNullableProperties(requiredNullablePrimitive, requiredExtensibleEnum, requiredFixedEnum, null);
        }

        /// <summary> The Friend. </summary>
        /// <param name="name"></param>
        /// <returns> A new <see cref="Models.Friend"/> instance for mocking. </returns>
        public static Friend Friend(string name = default)
        {

            return new Friend(name, null);
        }

        /// <summary> The ProjectedModel. </summary>
        /// <param name="name"></param>
        /// <returns> A new <see cref="Models.ProjectedModel"/> instance for mocking. </returns>
        public static ProjectedModel ProjectedModel(string name = default)
        {

            return new ProjectedModel(name, null);
        }

        /// <summary> The ReturnsAnonymousModelResponse. </summary>
        /// <returns> A new <see cref="Models.ReturnsAnonymousModelResponse"/> instance for mocking. </returns>
        public static ReturnsAnonymousModelResponse ReturnsAnonymousModelResponse()
        {

            return new ReturnsAnonymousModelResponse(null);
        }
    }
}
