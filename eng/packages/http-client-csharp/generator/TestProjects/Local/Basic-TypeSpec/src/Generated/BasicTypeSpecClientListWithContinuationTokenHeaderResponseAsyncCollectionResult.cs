// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace BasicTypeSpec
{
    internal partial class BasicTypeSpecClientListWithContinuationTokenHeaderResponseAsyncCollectionResult : AsyncPageable<BinaryData>
    {
        private readonly BasicTypeSpecClient _client;
        private readonly string _token;
        private readonly RequestContext _context;

        /// <summary> Initializes a new instance of BasicTypeSpecClientListWithContinuationTokenHeaderResponseAsyncCollectionResult, which is used to iterate over the pages of a collection. </summary>
        /// <param name="client"> The BasicTypeSpecClient client used to send requests. </param>
        /// <param name="token"></param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        public BasicTypeSpecClientListWithContinuationTokenHeaderResponseAsyncCollectionResult(BasicTypeSpecClient client, string token, RequestContext context)
        {
            _client = client;
            _token = token;
            _context = context;
        }

        /// <summary> Gets the pages of BasicTypeSpecClientListWithContinuationTokenHeaderResponseAsyncCollectionResult as an enumerable collection. </summary>
        /// <param name="continuationToken"> The continuation token. </param>
        /// <param name="pageSizeHint"> The page size hint. </param>
        /// <returns> The pages of BasicTypeSpecClientListWithContinuationTokenHeaderResponseAsyncCollectionResult as an enumerable collection. </returns>
        public override async IAsyncEnumerable<Page<BinaryData>> AsPages(string continuationToken, int? pageSizeHint)
        {
            string nextLink = continuationToken;
            do
            {
                Response response = await GetNextResponse(pageSizeHint, nextLink).ConfigureAwait(false);
                if (response is null)
                {
                    yield break;
                }
                using JsonDocument jsonDoc = JsonDocument.Parse(response.Content.ToString());
                JsonElement root = jsonDoc.RootElement;
                List<BinaryData> items = new List<BinaryData>();
                if (root.TryGetProperty("Things", out JsonElement itemsArray))
                {
                    foreach (var item in itemsArray.EnumerateArray())
                    {
                        items.Add(BinaryData.FromString(item.ToString()));
                    }
                }
                nextLink = (response.Headers.TryGetValue("next-token", out string value) ? value : null);
                yield return Page<BinaryData>.FromValues(items, nextLink, response);
            }
            while (!string.IsNullOrEmpty(nextLink));
        }

        /// <summary> Get response from next link. </summary>
        /// <param name="pageSizeHint"> The page size hint. </param>
        /// <param name="continuationToken"> The continuation token. </param>
        private async ValueTask<Response> GetNextResponse(int? pageSizeHint, string continuationToken)
        {
            HttpMessage message = _client.CreateListWithContinuationTokenHeaderResponseRequest(_token, _context);
            using DiagnosticScope scope = _client.ClientDiagnostics.CreateScope("BasicTypeSpecClient.ListWithContinuationTokenHeaderResponse");
            scope.Start();
            try
            {
                await _client.Pipeline.SendAsync(message, default).ConfigureAwait(false);
                return GetResponse(message);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get response from message. </summary>
        /// <param name="message"> Http message. </param>
        private Response GetResponse(HttpMessage message)
        {
            if (message.Response.IsError && _context.ErrorOptions != ErrorOptions.NoThrow)
            {
                throw new RequestFailedException(message.Response);
            }
            return message.Response;
        }
    }
}
