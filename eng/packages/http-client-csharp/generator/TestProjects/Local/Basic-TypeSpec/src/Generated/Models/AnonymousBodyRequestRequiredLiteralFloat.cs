// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Globalization;

namespace BasicTypeSpec.Models
{
    /// <summary> The AnonymousBodyRequest_requiredLiteralFloat. </summary>
    public readonly partial struct AnonymousBodyRequestRequiredLiteralFloat : IEquatable<AnonymousBodyRequestRequiredLiteralFloat>
    {
        private readonly float _value;
        /// <summary> 1.23. </summary>
        private const float _123Value = 1.23F;

        /// <summary> Initializes a new instance of <see cref="AnonymousBodyRequestRequiredLiteralFloat"/>. </summary>
        /// <param name="value"> The value. </param>
        public AnonymousBodyRequestRequiredLiteralFloat(float value)
        {
            _value = value;
        }

        /// <summary> 1.23. </summary>
        public static AnonymousBodyRequestRequiredLiteralFloat _123 { get; } = new AnonymousBodyRequestRequiredLiteralFloat(_123Value);

        /// <summary> Determines if two <see cref="AnonymousBodyRequestRequiredLiteralFloat"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(AnonymousBodyRequestRequiredLiteralFloat left, AnonymousBodyRequestRequiredLiteralFloat right) => left.Equals(right);

        /// <summary> Determines if two <see cref="AnonymousBodyRequestRequiredLiteralFloat"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(AnonymousBodyRequestRequiredLiteralFloat left, AnonymousBodyRequestRequiredLiteralFloat right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="AnonymousBodyRequestRequiredLiteralFloat"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator AnonymousBodyRequestRequiredLiteralFloat(float value) => new AnonymousBodyRequestRequiredLiteralFloat(value);

        /// <param name="obj"> The object to compare. </param>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AnonymousBodyRequestRequiredLiteralFloat other && Equals(other);

        /// <param name="other"> The instance to compare. </param>
        public bool Equals(AnonymousBodyRequestRequiredLiteralFloat other) => Equals(_value, other._value);

        /// <inheritdoc/>
        public override int GetHashCode() => _value.GetHashCode();

        /// <inheritdoc/>
        public override string ToString() => _value.ToString(CultureInfo.InvariantCulture);
    }
}
