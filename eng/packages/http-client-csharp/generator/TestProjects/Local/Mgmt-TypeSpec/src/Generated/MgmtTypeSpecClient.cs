// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using Azure.Core.Pipeline;

namespace MgmtTypeSpec
{
    /// <summary></summary>
    public partial class MgmtTypeSpecClient
    {
        private readonly Uri _endpoint;
        private Operations _cachedOperations;
        private PrivateLinks _cachedPrivateLinks;
        private Foos _cachedFoos;

        /// <summary> Initializes a new instance of MgmtTypeSpecClient. </summary>
        public MgmtTypeSpecClient() : this(new Uri("https://management.azure.com"), new MgmtTypeSpecClientOptions())
        {
        }

        /// <summary> Initializes a new instance of MgmtTypeSpecClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public MgmtTypeSpecClient(Uri endpoint, MgmtTypeSpecClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));

            options ??= new MgmtTypeSpecClientOptions();

            _endpoint = endpoint;
            Pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>());
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public HttpPipeline Pipeline { get; }

        /// <summary> Initializes a new instance of Operations. </summary>
        public virtual Operations GetOperationsClient()
        {
            return Volatile.Read(ref _cachedOperations) ?? Interlocked.CompareExchange(ref _cachedOperations, new Operations(Pipeline, _endpoint), null) ?? _cachedOperations;
        }

        /// <summary> Initializes a new instance of PrivateLinks. </summary>
        public virtual PrivateLinks GetPrivateLinksClient()
        {
            return Volatile.Read(ref _cachedPrivateLinks) ?? Interlocked.CompareExchange(ref _cachedPrivateLinks, new PrivateLinks(Pipeline, _endpoint), null) ?? _cachedPrivateLinks;
        }

        /// <summary> Initializes a new instance of Foos. </summary>
        public virtual Foos GetFoosClient()
        {
            return Volatile.Read(ref _cachedFoos) ?? Interlocked.CompareExchange(ref _cachedFoos, new Foos(Pipeline, _endpoint), null) ?? _cachedFoos;
        }
    }
}
