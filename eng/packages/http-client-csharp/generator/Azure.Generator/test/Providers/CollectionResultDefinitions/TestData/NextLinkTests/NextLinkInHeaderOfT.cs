// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Samples.Models;

namespace Samples
{
    internal partial class CatClientGetCatsCollectionResultOfT : global::Azure.Pageable<global::Samples.Models.Cat>
    {
        private readonly global::Samples.CatClient _client;
        private readonly global::System.Uri _nextPage;
        private readonly global::Azure.RequestContext _context;

        /// <summary> Initializes a new instance of CatClientGetCatsCollectionResultOfT, which is used to iterate over the pages of a collection. </summary>
        /// <param name="client"> The CatClient client used to send requests. </param>
        /// <param name="nextPage"> The url of the next page of responses. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        public CatClientGetCatsCollectionResultOfT(global::Samples.CatClient client, global::System.Uri nextPage, global::Azure.RequestContext context)
        {
            _client = client;
            _nextPage = nextPage;
            _context = context;
        }

        /// <summary> Gets the pages of CatClientGetCatsCollectionResultOfT as an enumerable collection. </summary>
        /// <param name="continuationToken"> A continuation token indicating where to resume paging. </param>
        /// <param name="pageSizeHint"> The number of items per page. </param>
        /// <returns> The pages of CatClientGetCatsCollectionResultOfT as an enumerable collection. </returns>
        public override global::System.Collections.Generic.IEnumerable<global::Azure.Page<global::Samples.Models.Cat>> AsPages(string continuationToken, int? pageSizeHint)
        {
            do
            {
                global::Azure.Response response = this.GetNextResponse(pageSizeHint, continuationToken);
                if ((response is null))
                {
                    yield break;
                }
                global::Samples.Models.Page responseWithType = ((global::Samples.Models.Page)response);
                continuationToken = response.Headers.TryGetValue("nextCat", out string value) ? value : null;
                yield return global::Azure.Page<global::Samples.Models.Cat>.FromValues(((global::System.Collections.Generic.IReadOnlyList<global::Samples.Models.Cat>)responseWithType.Cats), continuationToken, response);
            }
            while (!string.IsNullOrEmpty(continuationToken));
        }

        /// <summary> Get response from next link. </summary>
        /// <param name="pageSizeHint"> The number of items per page. </param>
        /// <param name="continuationToken"> A continuation token indicating where to resume paging. </param>
        private global::Azure.Response GetNextResponse(int? pageSizeHint, string continuationToken)
        {
            global::Azure.Core.HttpMessage message = _client.CreateGetCatsRequest(_nextPage, _context);
            using global::Azure.Core.Pipeline.DiagnosticScope scope = _client.ClientDiagnostics.CreateScope("CatClient.GetCats");
            scope.Start();
            try
            {
                _client.Pipeline.Send(message, _context.CancellationToken);
                if ((message.Response.IsError && (_context.ErrorOptions != global::Azure.ErrorOptions.NoThrow)))
                {
                    throw new global::Azure.RequestFailedException(message.Response);
                }
                return message.Response;
            }
            catch (global::System.Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
