// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Samples
{
    internal partial class CatClientgetCatsAsyncCollectionResult : global::Azure.AsyncPageable<global::System.BinaryData>
    {
        private readonly global::Samples.CatClient _client;
        private readonly string _myToken;
        private readonly global::Azure.RequestContext _context;

        /// <summary> Initializes a new instance of CatClientgetCatsAsyncCollectionResult, which is used to iterate over the pages of a collection. </summary>
        /// <param name="client"> The CatClient client used to send requests. </param>
        /// <param name="myToken"> myToken description. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="global::System.ArgumentNullException"> <paramref name="myToken"/> is null. </exception>
        public CatClientgetCatsAsyncCollectionResult(global::Samples.CatClient client, string myToken, global::Azure.RequestContext context)
        {
            global::Samples.Argument.AssertNotNull(myToken, nameof(myToken));

            _client = client;
            _myToken = myToken;
            _context = context;
        }

        /// <summary> Gets the pages of CatClientgetCatsAsyncCollectionResult as an enumerable collection. </summary>
        /// <param name="continuationToken"> The continuation token. </param>
        /// <param name="pageSizeHint"> The page size hint. </param>
        /// <returns> The pages of CatClientgetCatsAsyncCollectionResult as an enumerable collection. </returns>
        public override async global::System.Collections.Generic.IAsyncEnumerable<global::Azure.Page<global::System.BinaryData>> AsPages(string continuationToken, int? pageSizeHint)
        {
            string nextLink = continuationToken;
            do
            {
                global::Azure.Response response = await this.GetNextResponse(pageSizeHint, nextLink).ConfigureAwait(false);
                if ((response is null))
                {
                    yield break;
                }
                using global::System.Text.Json.JsonDocument jsonDoc = global::System.Text.Json.JsonDocument.Parse(response.Content.ToString());
                global::System.Text.Json.JsonElement root = jsonDoc.RootElement;
                global::System.Collections.Generic.List<global::System.BinaryData> items = new global::System.Collections.Generic.List<global::System.BinaryData>();
                if (root.TryGetProperty("Cats", out global::System.Text.Json.JsonElement itemsArray))
                {
                    foreach (var item in itemsArray.EnumerateArray())
                    {
                        items.Add(global::System.BinaryData.FromString(item.ToString()));
                    }
                }
                nextLink = ((response.Headers.TryGetValue("nextPage", out string value) ? value) : null);
                yield return global::Azure.Page<global::System.BinaryData>.FromValues(items, nextLink, response);
            }
            while (!string.IsNullOrEmpty(nextLink));
        }

        /// <summary> Get response from next link. </summary>
        /// <param name="pageSizeHint"> The page size hint. </param>
        /// <param name="continuationToken"> The continuation token. </param>
        private async global::System.Threading.Tasks.ValueTask<global::Azure.Response> GetNextResponse(int? pageSizeHint, string continuationToken)
        {
            global::Azure.Core.HttpMessage message = _client.CreategetCatsRequest(_myToken, _context);
            using global::Azure.Core.Pipeline.DiagnosticScope scope = _client.ClientDiagnostics.CreateScope("CatClient.getCats");
            scope.Start();
            try
            {
                await _client.Pipeline.SendAsync(message, default).ConfigureAwait(false);
                return this.GetResponse(message);
            }
            catch (global::System.Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get response from message. </summary>
        /// <param name="message"> Http message. </param>
        private global::Azure.Response GetResponse(global::Azure.Core.HttpMessage message)
        {
            if ((message.Response.IsError && (_context.ErrorOptions != global::Azure.ErrorOptions.NoThrow)))
            {
                throw new global::Azure.RequestFailedException(message.Response);
            }
            return message.Response;
        }
    }
}
