// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Samples.Models;

namespace Samples
{
    internal partial class CatClientGetCatsAsyncCollectionResult : global::Azure.AsyncPageable<global::System.BinaryData>
    {
        private readonly global::Samples.CatClient _client;
        private readonly string _animalKind;
        private readonly global::Azure.RequestContext _context;

        /// <summary> Initializes a new instance of CatClientGetCatsAsyncCollectionResult, which is used to iterate over the pages of a collection. </summary>
        /// <param name="client"> The CatClient client used to send requests. </param>
        /// <param name="animalKind"> animalKind description. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="global::System.ArgumentNullException"> <paramref name="animalKind"/> is null. </exception>
        public CatClientGetCatsAsyncCollectionResult(global::Samples.CatClient client, string animalKind, global::Azure.RequestContext context)
        {
            global::Samples.Argument.AssertNotNull(animalKind, nameof(animalKind));

            _client = client;
            _animalKind = animalKind;
            _context = context;
        }

        /// <summary> Gets the pages of CatClientGetCatsAsyncCollectionResult as an enumerable collection. </summary>
        /// <param name="continuationToken"> A continuation token indicating where to resume paging. </param>
        /// <param name="pageSizeHint"> The number of items per page. </param>
        /// <returns> The pages of CatClientGetCatsAsyncCollectionResult as an enumerable collection. </returns>
        public override async global::System.Collections.Generic.IAsyncEnumerable<global::Azure.Page<global::System.BinaryData>> AsPages(string continuationToken, int? pageSizeHint)
        {
            do
            {
                global::Azure.Response response = await this.GetNextResponse(pageSizeHint, continuationToken).ConfigureAwait(false);
                if ((response is null))
                {
                    yield break;
                }
                global::Samples.Models.Page responseWithType = ((global::Samples.Models.Page)response);
                global::System.Collections.Generic.List<global::System.BinaryData> items = new global::System.Collections.Generic.List<global::System.BinaryData>();
                foreach (var item in responseWithType.Cats)
                {
                    items.Add(global::System.BinaryData.FromObjectAsJson(item));
                }
                continuationToken = null;
                yield return global::Azure.Page<global::System.BinaryData>.FromValues(items, continuationToken, response);
            }
            while (!string.IsNullOrEmpty(continuationToken));
        }

        /// <summary> Get response from next link. </summary>
        /// <param name="pageSizeHint"> The number of items per page. </param>
        /// <param name="continuationToken"> A continuation token indicating where to resume paging. </param>
        private async global::System.Threading.Tasks.ValueTask<global::Azure.Response> GetNextResponse(int? pageSizeHint, string continuationToken)
        {
            global::Azure.Core.HttpMessage message = _client.CreateGetCatsRequest(_animalKind, _context);
            using global::Azure.Core.Pipeline.DiagnosticScope scope = _client.ClientDiagnostics.CreateScope("CatClient.GetCats");
            scope.Start();
            try
            {
                await _client.Pipeline.SendAsync(message, _context.CancellationToken).ConfigureAwait(false);
                if ((message.Response.IsError && (_context.ErrorOptions != global::Azure.ErrorOptions.NoThrow)))
                {
                    throw new global::Azure.RequestFailedException(message.Response);
                }
                return message.Response;
            }
            catch (global::System.Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
