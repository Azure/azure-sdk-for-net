// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using sample.test.Models;

namespace sample.test
{
    /// <summary></summary>
    public partial class ResponseTypeResource : global::Azure.ResourceManager.ArmResource
    {
        private global::sample.test.Models.ResponseTypeData _data;
        private global::Azure.Core.Pipeline.ClientDiagnostics _responsetypeClientDiagnostics;
        private global::sample.test.TestClient _restClient;
        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly global::Azure.Core.ResourceType ResourceType = "a/test";

        /// <summary> Initializes a new instance of ResponseTypeResource for mocking. </summary>
        protected ResponseTypeResource()
        {
        }

        internal ResponseTypeResource(global::Azure.ResourceManager.ArmClient client, global::sample.test.Models.ResponseTypeData data) : this(client, data.Id)
        {
            this.HasData = true;
            _data = data;
        }

        internal ResponseTypeResource(global::Azure.ResourceManager.ArmClient client, global::Azure.Core.ResourceIdentifier id) : base(client, id)
        {
            _responsetypeClientDiagnostics = new global::Azure.Core.Pipeline.ClientDiagnostics("sample.test", ResourceType.Namespace, this.Diagnostics);
            this.TryGetApiVersion(ResourceType, out string responsetypeApiVersion);
            _restClient = new global::sample.test.TestClient(this.Pipeline, this.Endpoint, responsetypeApiVersion);
#if DEBUG
            global::sample.test.ResponseTypeResource.ValidateResourceId(id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        public virtual global::sample.test.Models.ResponseTypeData Data
        {
            get
            {
                if (!HasData)
                {
                    throw new global::System.InvalidOperationException("The current instance does not have data, you must call Get first.");
                }
                return _data;
            }
        }

        internal static void ValidateResourceId(global::Azure.Core.ResourceIdentifier id)
        {
            if ((id != ResourceType))
            {
                throw new global::System.ArgumentException(string.Format("Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), id);
            }
        }

        /// <summary> GetOperation description. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        public virtual global::Azure.Response<global::sample.test.ResponseTypeResource> GetOperation(global::System.Threading.CancellationToken cancellationToken = default)
        {
            using global::Azure.Core.Pipeline.DiagnosticScope scope = _responsetypeClientDiagnostics.CreateScope("sample.test.GetOperation");
            scope.Start();
            try
            {
                global::Azure.Response<global::sample.test.Models.ResponseTypeData> response = _restClient.GetOperation(this.Id.Name, cancellationToken);
                if ((response.Value == null))
                {
                    throw new global::Azure.RequestFailedException(response.GetRawResponse());
                }
                return global::Azure.Response.FromValue(new global::sample.test.ResponseTypeResource(this.Client, response.Value), response.GetRawResponse());
            }
            catch (global::System.Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> GetOperation description. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        public virtual async global::System.Threading.Tasks.Task<global::Azure.Response<global::sample.test.ResponseTypeResource>> GetOperationAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            using global::Azure.Core.Pipeline.DiagnosticScope scope = _responsetypeClientDiagnostics.CreateScope("sample.test.GetOperation");
            scope.Start();
            try
            {
                global::Azure.Response<global::sample.test.Models.ResponseTypeData> response = await _restClient.GetOperationAsync(this.Id.Name, cancellationToken).ConfigureAwait(false);
                if ((response.Value == null))
                {
                    throw new global::Azure.RequestFailedException(response.GetRawResponse());
                }
                return global::Azure.Response.FromValue(new global::sample.test.ResponseTypeResource(this.Client, response.Value), response.GetRawResponse());
            }
            catch (global::System.Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
