// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Samples.Models;

namespace Samples
{
    /// <summary></summary>
    public partial class ResponseTypeResource : global::Azure.ResourceManager.ArmResource
    {
        /// <summary> Get description. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        public virtual async global::System.Threading.Tasks.Task<global::Azure.Response<global::Samples.ResponseTypeResource>> GetAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            using global::Azure.Core.Pipeline.DiagnosticScope scope = _responsetypeClientDiagnostics.CreateScope("Samples.Get");
            scope.Start();
            try
            {
                global::Azure.RequestContext context = new global::Azure.RequestContext
                {
                    CancellationToken = cancellationToken
                }
                ;
                global::Azure.Core.HttpMessage message = _responsetypeRestClient.CreateGetRequest(this.Id.Name, context);
                global::Azure.Response result = await this.Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                global::Azure.Response<global::Samples.Models.ResponseTypeData> response = global::Azure.Response.FromValue(((global::Samples.Models.ResponseTypeData)result), result);
                if ((response.Value == null))
                {
                    throw new global::Azure.RequestFailedException(response.GetRawResponse());
                }
                return global::Azure.Response.FromValue(new global::Samples.ResponseTypeResource(this.Client, response.Value), response.GetRawResponse());
            }
            catch (global::System.Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
