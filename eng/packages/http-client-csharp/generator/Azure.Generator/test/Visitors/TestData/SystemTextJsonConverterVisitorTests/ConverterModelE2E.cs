// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Samples;

namespace Samples.Models
{
    /// <summary> TestModel description. </summary>
    [global::System.Text.Json.Serialization.JsonConverter(typeof(global::Samples.Models.TestModel.TestModelConverter))]
    public partial class TestModel : global::System.ClientModel.Primitives.IJsonModel<global::Samples.Models.TestModel>
    {
        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void global::System.ClientModel.Primitives.IJsonModel<global::Samples.Models.TestModel>.Write(global::System.Text.Json.Utf8JsonWriter writer, global::System.ClientModel.Primitives.ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            this.JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(global::System.Text.Json.Utf8JsonWriter writer, global::System.ClientModel.Primitives.ModelReaderWriterOptions options)
        {
            string format = (options.Format == "W") ? ((global::System.ClientModel.Primitives.IPersistableModel<global::Samples.Models.TestModel>)this).GetFormatFromOptions(options) : options.Format;
            if ((format != "J"))
            {
                throw new global::System.FormatException($"The model {nameof(global::Samples.Models.TestModel)} does not support writing '{format}' format.");
            }
            if (global::Samples.Optional.IsDefined(StringProperty))
            {
                writer.WritePropertyName("stringProperty"u8);
                writer.WriteStringValue(StringProperty);
            }
            if (((options.Format != "W") && (_additionalBinaryDataProperties != null)))
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (global::System.Text.Json.JsonDocument document = global::System.Text.Json.JsonDocument.Parse(item.Value))
                    {
                        global::System.Text.Json.JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        global::Samples.Models.TestModel global::System.ClientModel.Primitives.IJsonModel<global::Samples.Models.TestModel>.Create(ref global::System.Text.Json.Utf8JsonReader reader, global::System.ClientModel.Primitives.ModelReaderWriterOptions options) => this.JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual global::Samples.Models.TestModel JsonModelCreateCore(ref global::System.Text.Json.Utf8JsonReader reader, global::System.ClientModel.Primitives.ModelReaderWriterOptions options)
        {
            string format = (options.Format == "W") ? ((global::System.ClientModel.Primitives.IPersistableModel<global::Samples.Models.TestModel>)this).GetFormatFromOptions(options) : options.Format;
            if ((format != "J"))
            {
                throw new global::System.FormatException($"The model {nameof(global::Samples.Models.TestModel)} does not support reading '{format}' format.");
            }
            using global::System.Text.Json.JsonDocument document = global::System.Text.Json.JsonDocument.ParseValue(ref reader);
            return global::Samples.Models.TestModel.DeserializeTestModel(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static global::Samples.Models.TestModel DeserializeTestModel(global::System.Text.Json.JsonElement element, global::System.ClientModel.Primitives.ModelReaderWriterOptions options)
        {
            if ((element.ValueKind == global::System.Text.Json.JsonValueKind.Null))
            {
                return null;
            }
            string stringProperty = default;
            global::System.Collections.Generic.IDictionary<string, global::System.BinaryData> additionalBinaryDataProperties = new global::Samples.ChangeTrackingDictionary<string, global::System.BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("stringProperty"u8))
                {
                    stringProperty = prop.Value.GetString();
                    continue;
                }
                if ((options.Format != "W"))
                {
                    additionalBinaryDataProperties.Add(prop.Name, global::System.BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new global::Samples.Models.TestModel(stringProperty, additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        global::System.BinaryData global::System.ClientModel.Primitives.IPersistableModel<global::Samples.Models.TestModel>.Write(global::System.ClientModel.Primitives.ModelReaderWriterOptions options) => this.PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual global::System.BinaryData PersistableModelWriteCore(global::System.ClientModel.Primitives.ModelReaderWriterOptions options)
        {
            string format = (options.Format == "W") ? ((global::System.ClientModel.Primitives.IPersistableModel<global::Samples.Models.TestModel>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return global::System.ClientModel.Primitives.ModelReaderWriter.Write(this, options, global::Samples.SamplesContext.Default);
                default:
                    throw new global::System.FormatException($"The model {nameof(global::Samples.Models.TestModel)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        global::Samples.Models.TestModel global::System.ClientModel.Primitives.IPersistableModel<global::Samples.Models.TestModel>.Create(global::System.BinaryData data, global::System.ClientModel.Primitives.ModelReaderWriterOptions options) => this.PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual global::Samples.Models.TestModel PersistableModelCreateCore(global::System.BinaryData data, global::System.ClientModel.Primitives.ModelReaderWriterOptions options)
        {
            string format = (options.Format == "W") ? ((global::System.ClientModel.Primitives.IPersistableModel<global::Samples.Models.TestModel>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (global::System.Text.Json.JsonDocument document = global::System.Text.Json.JsonDocument.Parse(data))
                    {
                        return global::Samples.Models.TestModel.DeserializeTestModel(document.RootElement, options);
                    }
                default:
                    throw new global::System.FormatException($"The model {nameof(global::Samples.Models.TestModel)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string global::System.ClientModel.Primitives.IPersistableModel<global::Samples.Models.TestModel>.GetFormatFromOptions(global::System.ClientModel.Primitives.ModelReaderWriterOptions options) => "J";

        internal partial class TestModelConverter : global::System.Text.Json.Serialization.JsonConverter<global::Samples.Models.TestModel>
        {
            /// <summary> Writes the JSON representation of the model. </summary>
            /// <param name="writer"> The writer. </param>
            /// <param name="model"> The model to write. </param>
            /// <param name="options"> The serialization options. </param>
            public override void Write(global::System.Text.Json.Utf8JsonWriter writer, global::Samples.Models.TestModel model, global::System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteObjectValue<global::System.ClientModel.Primitives.IJsonModel<global::Samples.Models.TestModel>>(model, global::Samples.ModelSerializationExtensions.WireOptions);
            }

            /// <summary> Reads the JSON representation and converts into the model. </summary>
            /// <param name="reader"> The reader. </param>
            /// <param name="typeToConvert"> The type to convert. </param>
            /// <param name="options"> The serialization options. </param>
            public override global::Samples.Models.TestModel Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                using global::System.Text.Json.JsonDocument document = global::System.Text.Json.JsonDocument.ParseValue(ref reader);
                return DeserializeTestModel(document.RootElement, global::Samples.ModelSerializationExtensions.WireOptions);
            }
        }
    }
}
