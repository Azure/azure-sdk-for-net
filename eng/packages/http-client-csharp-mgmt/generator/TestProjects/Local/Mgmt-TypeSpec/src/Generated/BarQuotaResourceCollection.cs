// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using MgmtTypeSpec.Models;

namespace MgmtTypeSpec
{
    /// <summary>
    /// A class representing a collection of <see cref="BarQuotaResource"/> and their operations.
    /// Each <see cref="BarQuotaResource"/> in the collection will belong to the same instance of a parent resource (TODO: add parent resource information).
    /// To get a <see cref="BarQuotaResourceCollection"/> instance call the GetBarQuotaResources method from an instance of the parent resource.
    /// </summary>
    public partial class BarQuotaResourceCollection : ArmCollection
    {
        private readonly ClientDiagnostics _barQuotaOperationsClientDiagnostics;
        private readonly BarQuotaOperations _barQuotaOperationsRestClient;

        /// <summary> Initializes a new instance of BarQuotaResourceCollection for mocking. </summary>
        protected BarQuotaResourceCollection()
        {
        }

        /// <summary> Initializes a new instance of <see cref="BarQuotaResourceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal BarQuotaResourceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            TryGetApiVersion(BarQuotaResource.ResourceType, out string barQuotaResourceApiVersion);
            _barQuotaOperationsClientDiagnostics = new ClientDiagnostics("MgmtTypeSpec", BarQuotaResource.ResourceType.Namespace, Diagnostics);
            _barQuotaOperationsRestClient = new BarQuotaOperations(_barQuotaOperationsClientDiagnostics, Pipeline, Endpoint, barQuotaResourceApiVersion ?? "2024-05-01");
            ValidateResourceId(id);
        }

        /// <param name="id"></param>
        [Conditional("DEBUG")]
        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
            {
                throw new ArgumentException(string.Format("Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), id);
            }
        }

        /// <summary> Get a BarQuotaResource. </summary>
        /// <param name="barQuotaResourceName"> The name of the BarQuotaResource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<BarQuotaResource>> GetAsync(QuotaName barQuotaResourceName, CancellationToken cancellationToken = default)
        {
            using DiagnosticScope scope = _barQuotaOperationsClientDiagnostics.CreateScope("BarQuotaResourceCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _barQuotaOperationsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Parent.Name, Id.Name, barQuotaResourceName.ToString(), context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<BarQuotaResourceData> response = Response.FromValue(BarQuotaResourceData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new BarQuotaResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a BarQuotaResource. </summary>
        /// <param name="barQuotaResourceName"> The name of the BarQuotaResource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<BarQuotaResource> Get(QuotaName barQuotaResourceName, CancellationToken cancellationToken = default)
        {
            using DiagnosticScope scope = _barQuotaOperationsClientDiagnostics.CreateScope("BarQuotaResourceCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _barQuotaOperationsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Parent.Name, Id.Name, barQuotaResourceName.ToString(), context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<BarQuotaResourceData> response = Response.FromValue(BarQuotaResourceData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new BarQuotaResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="barQuotaResourceName"> The name of the BarQuotaResource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<bool>> ExistsAsync(QuotaName barQuotaResourceName, CancellationToken cancellationToken = default)
        {
            using DiagnosticScope scope = _barQuotaOperationsClientDiagnostics.CreateScope("BarQuotaResourceCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _barQuotaOperationsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Parent.Name, Id.Name, barQuotaResourceName.ToString(), context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<BarQuotaResourceData> response = Response.FromValue(BarQuotaResourceData.FromResponse(result), result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="barQuotaResourceName"> The name of the BarQuotaResource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<bool> Exists(QuotaName barQuotaResourceName, CancellationToken cancellationToken = default)
        {
            using DiagnosticScope scope = _barQuotaOperationsClientDiagnostics.CreateScope("BarQuotaResourceCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _barQuotaOperationsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Parent.Name, Id.Name, barQuotaResourceName.ToString(), context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<BarQuotaResourceData> response = Response.FromValue(BarQuotaResourceData.FromResponse(result), result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="barQuotaResourceName"> The name of the BarQuotaResource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<NullableResponse<BarQuotaResource>> GetIfExistsAsync(QuotaName barQuotaResourceName, CancellationToken cancellationToken = default)
        {
            using DiagnosticScope scope = _barQuotaOperationsClientDiagnostics.CreateScope("BarQuotaResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _barQuotaOperationsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Parent.Name, Id.Name, barQuotaResourceName.ToString(), context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<BarQuotaResourceData> response = Response.FromValue(BarQuotaResourceData.FromResponse(result), result);
                if (response.Value == null)
                {
                    return new NoValueResponse<BarQuotaResource>(response.GetRawResponse());
                }
                return Response.FromValue(new BarQuotaResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="barQuotaResourceName"> The name of the BarQuotaResource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual NullableResponse<BarQuotaResource> GetIfExists(QuotaName barQuotaResourceName, CancellationToken cancellationToken = default)
        {
            using DiagnosticScope scope = _barQuotaOperationsClientDiagnostics.CreateScope("BarQuotaResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _barQuotaOperationsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Parent.Name, Id.Name, barQuotaResourceName.ToString(), context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<BarQuotaResourceData> response = Response.FromValue(BarQuotaResourceData.FromResponse(result), result);
                if (response.Value == null)
                {
                    return new NoValueResponse<BarQuotaResource>(response.GetRawResponse());
                }
                return Response.FromValue(new BarQuotaResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
