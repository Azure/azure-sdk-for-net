// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using MgmtTypeSpec;

namespace MgmtTypeSpec.Models
{
    /// <summary> The BarNestedQuotaProperties. </summary>
    internal partial class BarNestedQuotaProperties : BarMiddleNestedQuotaProperties
    {
        /// <summary> Initializes a new instance of <see cref="BarNestedQuotaProperties"/>. </summary>
        /// <param name="innerProp2"></param>
        /// <param name="middleProp1"></param>
        /// <param name="middleProp2"></param>
        /// <param name="prop1"></param>
        /// <param name="prop2"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="innerProp2"/>, <paramref name="middleProp2"/> or <paramref name="prop1"/> is null. </exception>
        public BarNestedQuotaProperties(string innerProp2, int middleProp1, IDictionary<string, string> middleProp2, IEnumerable<string> prop1, int prop2) : base(innerProp2, middleProp1, middleProp2)
        {
            Argument.AssertNotNull(innerProp2, nameof(innerProp2));
            Argument.AssertNotNull(middleProp2, nameof(middleProp2));
            Argument.AssertNotNull(prop1, nameof(prop1));

            Prop1 = prop1.ToList();
            Prop2 = prop2;
        }

        /// <summary> Initializes a new instance of <see cref="BarNestedQuotaProperties"/>. </summary>
        /// <param name="innerProp1"></param>
        /// <param name="innerProp2"></param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        /// <param name="middleProp1"></param>
        /// <param name="middleProp2"></param>
        /// <param name="prop1"></param>
        /// <param name="prop2"></param>
        internal BarNestedQuotaProperties(int? innerProp1, string innerProp2, IDictionary<string, BinaryData> additionalBinaryDataProperties, int middleProp1, IDictionary<string, string> middleProp2, IList<string> prop1, int prop2) : base(innerProp1, innerProp2, additionalBinaryDataProperties, middleProp1, middleProp2)
        {
            Prop1 = prop1;
            Prop2 = prop2;
        }

        /// <summary> Gets the Prop1. </summary>
        public IList<string> Prop1 { get; } = new ChangeTrackingList<string>();

        /// <summary> Gets or sets the Prop2. </summary>
        public int Prop2 { get; set; }
    }
}
