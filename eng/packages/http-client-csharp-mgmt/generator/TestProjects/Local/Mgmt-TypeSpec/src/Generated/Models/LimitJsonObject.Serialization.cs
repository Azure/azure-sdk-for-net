// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using MgmtTypeSpec;

<<<<<<<< HEAD:sdk/ai/Azure.AI.VoiceLive/src/Generated/VideoBackground.Serialization.cs
namespace Azure.AI.VoiceLive
{
    /// <summary> Defines a video background, either a solid color or an image URL (mutually exclusive). </summary>
    public partial class VideoBackground : IJsonModel<VideoBackground>
========
namespace MgmtTypeSpec.Models
{
    /// <summary>
    /// LimitJson abstract class.
    /// Please note this is the abstract base class. The derived classes available for instantiation are: 
    /// </summary>
    [PersistableModelProxy(typeof(UnknownLimitJsonObject))]
    public abstract partial class LimitJsonObject : IJsonModel<LimitJsonObject>
>>>>>>>> main:eng/packages/http-client-csharp-mgmt/generator/TestProjects/Local/Mgmt-TypeSpec/src/Generated/Models/LimitJsonObject.Serialization.cs
    {
        /// <summary> Initializes a new instance of <see cref="LimitJsonObject"/> for deserialization. </summary>
        internal LimitJsonObject()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
<<<<<<<< HEAD:sdk/ai/Azure.AI.VoiceLive/src/Generated/VideoBackground.Serialization.cs
        void IJsonModel<VideoBackground>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
========
        void IJsonModel<LimitJsonObject>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
>>>>>>>> main:eng/packages/http-client-csharp-mgmt/generator/TestProjects/Local/Mgmt-TypeSpec/src/Generated/Models/LimitJsonObject.Serialization.cs
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
<<<<<<<< HEAD:sdk/ai/Azure.AI.VoiceLive/src/Generated/VideoBackground.Serialization.cs
            string format = options.Format == "W" ? ((IPersistableModel<VideoBackground>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VideoBackground)} does not support writing '{format}' format.");
            }
            if (Optional.IsDefined(Color))
            {
                writer.WritePropertyName("color"u8);
                writer.WriteStringValue(Color);
            }
            if (Optional.IsDefined(ImageUrl))
            {
                writer.WritePropertyName("image_url"u8);
                writer.WriteStringValue(ImageUrl);
========
            string format = options.Format == "W" ? ((IPersistableModel<LimitJsonObject>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(LimitJsonObject)} does not support writing '{format}' format.");
>>>>>>>> main:eng/packages/http-client-csharp-mgmt/generator/TestProjects/Local/Mgmt-TypeSpec/src/Generated/Models/LimitJsonObject.Serialization.cs
            }
            writer.WritePropertyName("limitObjectType"u8);
            writer.WriteStringValue(LimitObjectType.ToString());
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
<<<<<<<< HEAD:sdk/ai/Azure.AI.VoiceLive/src/Generated/VideoBackground.Serialization.cs
        VideoBackground IJsonModel<VideoBackground>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual VideoBackground JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<VideoBackground>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VideoBackground)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeVideoBackground(document.RootElement, options);
========
        LimitJsonObject IJsonModel<LimitJsonObject>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual LimitJsonObject JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<LimitJsonObject>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(LimitJsonObject)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeLimitJsonObject(document.RootElement, options);
>>>>>>>> main:eng/packages/http-client-csharp-mgmt/generator/TestProjects/Local/Mgmt-TypeSpec/src/Generated/Models/LimitJsonObject.Serialization.cs
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
<<<<<<<< HEAD:sdk/ai/Azure.AI.VoiceLive/src/Generated/VideoBackground.Serialization.cs
        internal static VideoBackground DeserializeVideoBackground(JsonElement element, ModelReaderWriterOptions options)
========
        internal static LimitJsonObject DeserializeLimitJsonObject(JsonElement element, ModelReaderWriterOptions options)
>>>>>>>> main:eng/packages/http-client-csharp-mgmt/generator/TestProjects/Local/Mgmt-TypeSpec/src/Generated/Models/LimitJsonObject.Serialization.cs
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
<<<<<<<< HEAD:sdk/ai/Azure.AI.VoiceLive/src/Generated/VideoBackground.Serialization.cs
            string color = default;
            string imageUrl = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("color"u8))
                {
                    color = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("image_url"u8))
                {
                    imageUrl = prop.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new VideoBackground(color, imageUrl, additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<VideoBackground>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);
========
            return UnknownLimitJsonObject.DeserializeUnknownLimitJsonObject(element, options);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<LimitJsonObject>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);
>>>>>>>> main:eng/packages/http-client-csharp-mgmt/generator/TestProjects/Local/Mgmt-TypeSpec/src/Generated/Models/LimitJsonObject.Serialization.cs

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
<<<<<<<< HEAD:sdk/ai/Azure.AI.VoiceLive/src/Generated/VideoBackground.Serialization.cs
            string format = options.Format == "W" ? ((IPersistableModel<VideoBackground>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIVoiceLiveContext.Default);
                default:
                    throw new FormatException($"The model {nameof(VideoBackground)} does not support writing '{options.Format}' format.");
========
            string format = options.Format == "W" ? ((IPersistableModel<LimitJsonObject>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, MgmtTypeSpecContext.Default);
                default:
                    throw new FormatException($"The model {nameof(LimitJsonObject)} does not support writing '{options.Format}' format.");
>>>>>>>> main:eng/packages/http-client-csharp-mgmt/generator/TestProjects/Local/Mgmt-TypeSpec/src/Generated/Models/LimitJsonObject.Serialization.cs
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
<<<<<<<< HEAD:sdk/ai/Azure.AI.VoiceLive/src/Generated/VideoBackground.Serialization.cs
        VideoBackground IPersistableModel<VideoBackground>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual VideoBackground PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<VideoBackground>)this).GetFormatFromOptions(options) : options.Format;
========
        LimitJsonObject IPersistableModel<LimitJsonObject>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual LimitJsonObject PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<LimitJsonObject>)this).GetFormatFromOptions(options) : options.Format;
>>>>>>>> main:eng/packages/http-client-csharp-mgmt/generator/TestProjects/Local/Mgmt-TypeSpec/src/Generated/Models/LimitJsonObject.Serialization.cs
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
<<<<<<<< HEAD:sdk/ai/Azure.AI.VoiceLive/src/Generated/VideoBackground.Serialization.cs
                        return DeserializeVideoBackground(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(VideoBackground)} does not support reading '{options.Format}' format.");
========
                        return DeserializeLimitJsonObject(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(LimitJsonObject)} does not support reading '{options.Format}' format.");
>>>>>>>> main:eng/packages/http-client-csharp-mgmt/generator/TestProjects/Local/Mgmt-TypeSpec/src/Generated/Models/LimitJsonObject.Serialization.cs
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
<<<<<<<< HEAD:sdk/ai/Azure.AI.VoiceLive/src/Generated/VideoBackground.Serialization.cs
        string IPersistableModel<VideoBackground>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
========
        string IPersistableModel<LimitJsonObject>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
>>>>>>>> main:eng/packages/http-client-csharp-mgmt/generator/TestProjects/Local/Mgmt-TypeSpec/src/Generated/Models/LimitJsonObject.Serialization.cs
    }
}
