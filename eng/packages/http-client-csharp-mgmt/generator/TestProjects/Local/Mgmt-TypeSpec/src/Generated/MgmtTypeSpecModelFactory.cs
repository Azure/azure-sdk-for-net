// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using MgmtTypeSpec;

namespace MgmtTypeSpec.Models
{
    /// <summary> A factory class for creating instances of the models for mocking. </summary>
    public static partial class MgmtTypeSpecModelFactory
    {

        /// <summary> Concrete tracked resource types can be created by aliasing this type using a specific property type. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"></param>
        /// <returns> A new <see cref="MgmtTypeSpec.FooData"/> instance for mocking. </returns>
        public static FooData FooData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, IDictionary<string, string> tags = default, string location = default, FooProperties properties = default, ExtendedLocation extendedLocation = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new FooData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                tags,
                location,
                properties,
                extendedLocation);
        }

        /// <summary> Concrete proxy resource types can be created by aliasing this type using a specific property type. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="MgmtTypeSpec.FooSettingsData"/> instance for mocking. </returns>
        public static FooSettingsData FooSettingsData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, FooSettingsProperties properties = default)
        {
            return new FooSettingsData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                properties);
        }

        /// <summary> The FooSettingsProperties. </summary>
        /// <param name="accessControlEnabled"></param>
        /// <param name="provisioningState"></param>
        /// <returns> A new <see cref="Models.FooSettingsProperties"/> instance for mocking. </returns>
        public static FooSettingsProperties FooSettingsProperties(bool accessControlEnabled = default, ResourceProvisioningState? provisioningState = default)
        {
            return new FooSettingsProperties(accessControlEnabled, provisioningState, additionalBinaryDataProperties: null);
        }

        /// <summary> Concrete tracked resource types can be created by aliasing this type using a specific property type. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="MgmtTypeSpec.BarData"/> instance for mocking. </returns>
        public static BarData BarData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, IDictionary<string, string> tags = default, string location = default, BarProperties properties = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new BarData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                tags,
                location,
                properties);
        }

        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="propertiesIsEnabled"> enabled. </param>
        /// <param name="stringArray"></param>
        /// <returns> A new <see cref="MgmtTypeSpec.BarSettingsData"/> instance for mocking. </returns>
        public static BarSettingsData BarSettingsData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, bool? propertiesIsEnabled = default, IEnumerable<string> stringArray = default)
        {
            stringArray ??= new ChangeTrackingList<string>();

            return new BarSettingsData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                propertiesIsEnabled is null ? default : new BarSettingsProperties(propertiesIsEnabled, new Dictionary<string, BinaryData>()),
                stringArray.ToList());
        }

        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="propertiesSomething"> something. </param>
        /// <param name="extendedLocation"></param>
        /// <returns> A new <see cref="MgmtTypeSpec.ZooData"/> instance for mocking. </returns>
        public static ZooData ZooData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, IDictionary<string, string> tags = default, string location = default, string propertiesSomething = default, ExtendedLocation extendedLocation = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new ZooData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                tags,
                location,
                propertiesSomething is null ? default : new ZooProperties(propertiesSomething, new Dictionary<string, BinaryData>()),
                extendedLocation);
        }

        /// <param name="tags"> Resource tags. </param>
        /// <param name="propertiesSomething"> something. </param>
        /// <returns> A new <see cref="Models.ZooPatch"/> instance for mocking. </returns>
        public static ZooPatch ZooPatch(IDictionary<string, string> tags = default, string propertiesSomething = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new ZooPatch(tags, propertiesSomething is null ? default : new ZooUpdateProperties(propertiesSomething, new Dictionary<string, BinaryData>()), additionalBinaryDataProperties: null);
        }

        /// <summary> The ZooRecommendation. </summary>
        /// <param name="recommendedValue"> The recommended value. </param>
        /// <param name="reason"> The reason for the recommendation. </param>
        /// <returns> A new <see cref="Models.ZooRecommendation"/> instance for mocking. </returns>
        public static ZooRecommendation ZooRecommendation(string recommendedValue = default, string reason = default)
        {
            return new ZooRecommendation(recommendedValue, reason, additionalBinaryDataProperties: null);
        }
    }
}
