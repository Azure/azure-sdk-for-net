// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using MgmtTypeSpec;

namespace MgmtTypeSpec.Models
{
    /// <summary> A factory class for creating instances of the models for mocking. </summary>
    public static partial class MgmtTypeSpecModelFactory
    {

        /// <summary> Concrete tracked resource types can be created by aliasing this type using a specific property type. </summary>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"></param>
        /// <returns> A new <see cref="Models.FooData"/> instance for mocking. </returns>
        public static FooData FooData(FooProperties properties = default, ExtendedLocation extendedLocation = default)
        {

            return new FooData(properties, extendedLocation, additionalBinaryDataProperties: null);
        }

        /// <summary> The FooProperties. </summary>
        /// <param name="serviceUrl"> the service url. </param>
        /// <param name="something"> something. </param>
        /// <param name="boolValue"> boolean value. </param>
        /// <param name="floatValue"> float value. </param>
        /// <param name="doubleValue"> double value. </param>
        /// <returns> A new <see cref="Models.FooProperties"/> instance for mocking. </returns>
        public static FooProperties FooProperties(Uri serviceUrl = default, string something = default, bool? boolValue = default, float? floatValue = default, double? doubleValue = default)
        {

            return new FooProperties(
                serviceUrl,
                something,
                boolValue,
                floatValue,
                doubleValue,
                additionalBinaryDataProperties: null);
        }
    }
}
