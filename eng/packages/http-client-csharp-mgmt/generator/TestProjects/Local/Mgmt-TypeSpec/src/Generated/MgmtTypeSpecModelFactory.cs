// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using MgmtTypeSpec;

namespace MgmtTypeSpec.Models
{
    /// <summary> A factory class for creating instances of the models for mocking. </summary>
    public static partial class MgmtTypeSpecModelFactory
    {

        /// <summary> Concrete tracked resource types can be created by aliasing this type using a specific property type. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="type"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="name"> The name of the Foo. </param>
        /// <param name="extendedLocation"></param>
        /// <returns> A new <see cref="MgmtTypeSpec.FooData"/> instance for mocking. </returns>
        public static FooData FooData(ResourceIdentifier id = default, string @type = default, SystemData systemData = default, IDictionary<string, string> tags = default, string location = default, FooProperties properties = default, string name = default, ExtendedLocation extendedLocation = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new FooData(
                id,
                @type,
                systemData,
                additionalBinaryDataProperties: null,
                tags,
                location,
                properties,
                name,
                extendedLocation);
        }

        /// <summary> The FooProperties. </summary>
        /// <param name="serviceUri"> the service url. </param>
        /// <param name="something"> something. </param>
        /// <param name="boolValue"> boolean value. </param>
        /// <param name="floatValue"> float value. </param>
        /// <param name="doubleValue"> double value. </param>
        /// <returns> A new <see cref="Models.FooProperties"/> instance for mocking. </returns>
        public static FooProperties FooProperties(Uri serviceUri = default, string something = default, bool? boolValue = default, float? floatValue = default, double? doubleValue = default)
        {
            return new FooProperties(
                serviceUri,
                something,
                boolValue,
                floatValue,
                doubleValue,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Concrete proxy resource types can be created by aliasing this type using a specific property type. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="type"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="name"> The default Foo settings. </param>
        /// <returns> A new <see cref="MgmtTypeSpec.FooSettingsData"/> instance for mocking. </returns>
        public static FooSettingsData FooSettingsData(ResourceIdentifier id = default, string @type = default, SystemData systemData = default, FooSettingsProperties properties = default, string name = default)
        {
            return new FooSettingsData(
                id,
                @type,
                systemData,
                additionalBinaryDataProperties: null,
                properties,
                name);
        }

        /// <summary> The FooSettingsProperties. </summary>
        /// <param name="accessControlEnabled"></param>
        /// <param name="provisioningState"></param>
        /// <returns> A new <see cref="Models.FooSettingsProperties"/> instance for mocking. </returns>
        public static FooSettingsProperties FooSettingsProperties(bool accessControlEnabled = default, ResourceProvisioningState? provisioningState = default)
        {
            return new FooSettingsProperties(accessControlEnabled, provisioningState, additionalBinaryDataProperties: null);
        }
    }
}
