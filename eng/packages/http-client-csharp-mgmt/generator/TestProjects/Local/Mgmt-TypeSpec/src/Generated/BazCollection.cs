// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace MgmtTypeSpec
{
    /// <summary>
    /// A class representing a collection of <see cref="BazResource"/> and their operations.
    /// Each <see cref="BazResource"/> in the collection will belong to the same instance of a parent resource (TODO: add parent resource information).
    /// To get a <see cref="BazCollection"/> instance call the GetBazs method from an instance of the parent resource.
    /// </summary>
    public partial class BazCollection : ArmCollection, IEnumerable<BazResource>, IAsyncEnumerable<BazResource>
    {
        private readonly ClientDiagnostics _bazsClientDiagnostics;
        private readonly Bazs _bazsRestClient;

        /// <summary> Initializes a new instance of BazCollection for mocking. </summary>
        protected BazCollection()
        {
        }

        /// <summary> Initializes a new instance of <see cref="BazCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal BazCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            TryGetApiVersion(BazResource.ResourceType, out string bazApiVersion);
            _bazsClientDiagnostics = new ClientDiagnostics("MgmtTypeSpec", BazResource.ResourceType.Namespace, Diagnostics);
            _bazsRestClient = new Bazs(_bazsClientDiagnostics, Pipeline, Endpoint, bazApiVersion ?? "2024-05-01");
            ValidateResourceId(id);
        }

        /// <param name="id"></param>
        [Conditional("DEBUG")]
        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
            {
                throw new ArgumentException(string.Format("Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), id);
            }
        }

        /// <summary> Create a Baz. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="bazName"> The name of the Baz. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="bazName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="bazName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<ArmOperation<BazResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string bazName, BazData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(bazName, nameof(bazName));
            Argument.AssertNotNull(data, nameof(data));

            using DiagnosticScope scope = _bazsClientDiagnostics.CreateScope("BazCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _bazsRestClient.CreateCreateOrUpdateRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, bazName, BazData.ToRequestContent(data), context);
                Response response = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                MgmtTypeSpecArmOperation<BazResource> operation = new MgmtTypeSpecArmOperation<BazResource>(
                    new BazOperationSource(Client),
                    _bazsClientDiagnostics,
                    Pipeline,
                    message.Request,
                    response,
                    OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                {
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                }
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a Baz. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="bazName"> The name of the Baz. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="bazName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="bazName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ArmOperation<BazResource> CreateOrUpdate(WaitUntil waitUntil, string bazName, BazData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(bazName, nameof(bazName));
            Argument.AssertNotNull(data, nameof(data));

            using DiagnosticScope scope = _bazsClientDiagnostics.CreateScope("BazCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _bazsRestClient.CreateCreateOrUpdateRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, bazName, BazData.ToRequestContent(data), context);
                Response response = Pipeline.ProcessMessage(message, context);
                MgmtTypeSpecArmOperation<BazResource> operation = new MgmtTypeSpecArmOperation<BazResource>(
                    new BazOperationSource(Client),
                    _bazsClientDiagnostics,
                    Pipeline,
                    message.Request,
                    response,
                    OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                {
                    operation.WaitForCompletion(cancellationToken);
                }
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a Baz. </summary>
        /// <param name="bazName"> The name of the Baz. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="bazName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="bazName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<BazResource>> GetAsync(string bazName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(bazName, nameof(bazName));

            using DiagnosticScope scope = _bazsClientDiagnostics.CreateScope("BazCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _bazsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, bazName, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<BazData> response = Response.FromValue(BazData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new BazResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a Baz. </summary>
        /// <param name="bazName"> The name of the Baz. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="bazName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="bazName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<BazResource> Get(string bazName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(bazName, nameof(bazName));

            using DiagnosticScope scope = _bazsClientDiagnostics.CreateScope("BazCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _bazsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, bazName, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<BazData> response = Response.FromValue(BazData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new BazResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List Baz resources by resource group. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="BazResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<BazResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<BazData, BazResource>(new BazsGetAllAsyncCollectionResultOfT(_bazsRestClient, Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, context), data => new BazResource(Client, data));
        }

        /// <summary> List Baz resources by resource group. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="BazResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<BazResource> GetAll(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<BazData, BazResource>(new BazsGetAllCollectionResultOfT(_bazsRestClient, Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, context), data => new BazResource(Client, data));
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="bazName"> The name of the Baz. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="bazName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="bazName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string bazName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(bazName, nameof(bazName));

            using DiagnosticScope scope = _bazsClientDiagnostics.CreateScope("BazCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _bazsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, bazName, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<BazData> response = Response.FromValue(BazData.FromResponse(result), result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="bazName"> The name of the Baz. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="bazName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="bazName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<bool> Exists(string bazName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(bazName, nameof(bazName));

            using DiagnosticScope scope = _bazsClientDiagnostics.CreateScope("BazCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _bazsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, bazName, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<BazData> response = Response.FromValue(BazData.FromResponse(result), result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="bazName"> The name of the Baz. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="bazName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="bazName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<NullableResponse<BazResource>> GetIfExistsAsync(string bazName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(bazName, nameof(bazName));

            using DiagnosticScope scope = _bazsClientDiagnostics.CreateScope("BazCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _bazsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, bazName, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<BazData> response = Response.FromValue(BazData.FromResponse(result), result);
                if (response.Value == null)
                {
                    return new NoValueResponse<BazResource>(response.GetRawResponse());
                }
                return Response.FromValue(new BazResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="bazName"> The name of the Baz. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="bazName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="bazName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual NullableResponse<BazResource> GetIfExists(string bazName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(bazName, nameof(bazName));

            using DiagnosticScope scope = _bazsClientDiagnostics.CreateScope("BazCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _bazsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, bazName, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<BazData> response = Response.FromValue(BazData.FromResponse(result), result);
                if (response.Value == null)
                {
                    return new NoValueResponse<BazResource>(response.GetRawResponse());
                }
                return Response.FromValue(new BazResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<BazResource> IEnumerable<BazResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        IAsyncEnumerator<BazResource> IAsyncEnumerable<BazResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
