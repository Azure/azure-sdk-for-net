// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Generator.MgmtTypeSpec.Tests;

namespace Azure.Generator.MgmtTypeSpec.Tests.Models
{
    /// <summary> The BarMiddleNestedQuotaProperties. </summary>
    internal partial class BarMiddleNestedQuotaProperties : BarDeeplyNestedQuotaProperties, IJsonModel<BarMiddleNestedQuotaProperties>
    {
        /// <summary> Initializes a new instance of <see cref="BarMiddleNestedQuotaProperties"/> for deserialization. </summary>
        internal BarMiddleNestedQuotaProperties()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<BarMiddleNestedQuotaProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BarMiddleNestedQuotaProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BarMiddleNestedQuotaProperties)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("middleProp1"u8);
            writer.WriteNumberValue(MiddleProp1);
            writer.WritePropertyName("middleProp2"u8);
            writer.WriteStartObject();
            foreach (var item in MiddleProp2)
            {
                writer.WritePropertyName(item.Key);
                if (item.Value == null)
                {
                    writer.WriteNullValue();
                    continue;
                }
                writer.WriteStringValue(item.Value);
            }
            writer.WriteEndObject();
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        BarMiddleNestedQuotaProperties IJsonModel<BarMiddleNestedQuotaProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (BarMiddleNestedQuotaProperties)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BarDeeplyNestedQuotaProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BarMiddleNestedQuotaProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BarMiddleNestedQuotaProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeBarMiddleNestedQuotaProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static BarMiddleNestedQuotaProperties DeserializeBarMiddleNestedQuotaProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int? innerProp1 = default;
            string innerProp2 = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            int middleProp1 = default;
            IDictionary<string, string> middleProp2 = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("innerProp1"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    innerProp1 = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("innerProp2"u8))
                {
                    innerProp2 = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("middleProp1"u8))
                {
                    middleProp1 = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("middleProp2"u8))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        if (prop0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(prop0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(prop0.Name, prop0.Value.GetString());
                        }
                    }
                    middleProp2 = dictionary;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new BarMiddleNestedQuotaProperties(innerProp1, innerProp2, additionalBinaryDataProperties, middleProp1, middleProp2);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<BarMiddleNestedQuotaProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BarMiddleNestedQuotaProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureGeneratorMgmtTypeSpecTestsContext.Default);
                default:
                    throw new FormatException($"The model {nameof(BarMiddleNestedQuotaProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        BarMiddleNestedQuotaProperties IPersistableModel<BarMiddleNestedQuotaProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => (BarMiddleNestedQuotaProperties)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BarDeeplyNestedQuotaProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BarMiddleNestedQuotaProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeBarMiddleNestedQuotaProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(BarMiddleNestedQuotaProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<BarMiddleNestedQuotaProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
