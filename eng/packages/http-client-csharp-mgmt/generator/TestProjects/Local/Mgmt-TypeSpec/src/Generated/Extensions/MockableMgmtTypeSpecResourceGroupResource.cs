// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace MgmtTypeSpec
{
    /// <summary></summary>
    public partial class MockableMgmtTypeSpecResourceGroupResource : ArmResource
    {
        /// <summary> Initializes a new instance of MockableMgmtTypeSpecResourceGroupResource for mocking. </summary>
        protected MockableMgmtTypeSpecResourceGroupResource()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MockableMgmtTypeSpecResourceGroupResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableMgmtTypeSpecResourceGroupResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        /// <summary> Gets a collection of Foos in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of Foos and their operations over a FooResource. </returns>
        public virtual FooCollection GetFoos()
        {
            return GetCachedClient(client => new FooCollection(client, Id));
        }

        /// <summary> Get a Foo. </summary>
        /// <param name="fooName"> The name of the Foo. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fooName"/> is null. </exception>
        public virtual Response<FooResource> GetFoo(string fooName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(fooName, nameof(fooName));

            return GetFoos().Get(fooName, cancellationToken);
        }

        /// <summary> Get a Foo. </summary>
        /// <param name="fooName"> The name of the Foo. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fooName"/> is null. </exception>
        public virtual async Task<Response<FooResource>> GetFooAsync(string fooName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(fooName, nameof(fooName));

            return await GetFoos().GetAsync(fooName, cancellationToken).ConfigureAwait(false);
        }
    }
}
