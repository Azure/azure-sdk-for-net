// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using MgmtTypeSpec;

namespace MgmtTypeSpec.Mocking
{
    /// <summary></summary>
    public partial class MockableMgmtTypeSpecResourceGroupResource : ArmResource
    {
        /// <summary> Initializes a new instance of MockableMgmtTypeSpecResourceGroupResource for mocking. </summary>
        protected MockableMgmtTypeSpecResourceGroupResource()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MockableMgmtTypeSpecResourceGroupResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableMgmtTypeSpecResourceGroupResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        /// <summary> Gets a collection of Foos in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of Foos and their operations over a FooResource. </returns>
        public virtual FooCollection GetFoos()
        {
            return GetCachedClient(client => new FooCollection(client, Id));
        }

        /// <summary> Get a Foo. </summary>
        /// <param name="fooName"> The name of the Foo. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fooName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="fooName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<FooResource> GetFoo(string fooName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(fooName, nameof(fooName));

            return GetFoos().Get(fooName, cancellationToken);
        }

        /// <summary> Get a Foo. </summary>
        /// <param name="fooName"> The name of the Foo. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fooName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="fooName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<FooResource>> GetFooAsync(string fooName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(fooName, nameof(fooName));

            return await GetFoos().GetAsync(fooName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets an object representing a <see cref="FooSettingsResource"/> along with the instance operations that can be performed on it in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> Returns a <see cref="FooSettingsResource"/> object. </returns>
        public virtual FooSettingsResource GetFooSettings()
        {
            return new FooSettingsResource(Client, Id.AppendProviderResource("MgmtTypeSpec", "FooSettings", "default"));
        }

        /// <summary> Gets a collection of Zoos in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of Zoos and their operations over a ZooResource. </returns>
        public virtual ZooCollection GetZoos()
        {
            return GetCachedClient(client => new ZooCollection(client, Id));
        }

        /// <summary> Get a Zoo. </summary>
        /// <param name="zooName"> The name of the Zoo. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="zooName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="zooName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<ZooResource> GetZoo(string zooName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(zooName, nameof(zooName));

            return GetZoos().Get(zooName, cancellationToken);
        }

        /// <summary> Get a Zoo. </summary>
        /// <param name="zooName"> The name of the Zoo. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="zooName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="zooName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<ZooResource>> GetZooAsync(string zooName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(zooName, nameof(zooName));

            return await GetZoos().GetAsync(zooName, cancellationToken).ConfigureAwait(false);
        }
    }
}
