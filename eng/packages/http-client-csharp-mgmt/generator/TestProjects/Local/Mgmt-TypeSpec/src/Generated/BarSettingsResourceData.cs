// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using MgmtTypeSpec.Models;

namespace MgmtTypeSpec
{
    /// <summary> Concrete proxy resource types can be created by aliasing this type using a specific property type. </summary>
    public partial class BarSettingsResourceData : ResourceData
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="BarSettingsResourceData"/>. </summary>
        /// <param name="property"></param>
        /// <param name="anotherProperty"></param>
        /// <param name="flattenedNestedProperty"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="property"/>, <paramref name="anotherProperty"/> or <paramref name="flattenedNestedProperty"/> is null. </exception>
        public BarSettingsResourceData(BarQuotaProperties @property, BarQuotaProperties anotherProperty, BarNestedQuotaProperties flattenedNestedProperty)
        {
            Argument.AssertNotNull(@property, nameof(@property));
            Argument.AssertNotNull(anotherProperty, nameof(anotherProperty));
            Argument.AssertNotNull(flattenedNestedProperty, nameof(flattenedNestedProperty));

            StringArray = new ChangeTrackingList<string>();
            Property = @property;
            AnotherProperty = anotherProperty;
            FlattenedNestedProperty = flattenedNestedProperty;
        }

        /// <summary> Initializes a new instance of <see cref="BarSettingsResourceData"/>. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="stringArray"></param>
        /// <param name="property"></param>
        /// <param name="anotherProperty"></param>
        /// <param name="flattenedNestedProperty"></param>
        internal BarSettingsResourceData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, BinaryData> additionalBinaryDataProperties, BarSettingsProperties properties, IList<string> stringArray, BarQuotaProperties @property, BarQuotaProperties anotherProperty, BarNestedQuotaProperties flattenedNestedProperty) : base(id, name, resourceType, systemData)
        {
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
            Properties = properties;
            StringArray = stringArray;
            Property = @property;
            AnotherProperty = anotherProperty;
            FlattenedNestedProperty = flattenedNestedProperty;
        }

        /// <summary> The resource-specific properties for this resource. </summary>
        internal BarSettingsProperties Properties { get; set; }

        /// <summary> Gets the StringArray. </summary>
        public IList<string> StringArray { get; }

        /// <summary> Gets or sets the Property. </summary>
        internal BarQuotaProperties Property { get; set; }

        /// <summary> Gets or sets the AnotherProperty. </summary>
        internal BarQuotaProperties AnotherProperty { get; set; }

        /// <summary> Gets or sets the FlattenedNestedProperty. </summary>
        internal BarNestedQuotaProperties FlattenedNestedProperty { get; set; }

        /// <summary> Gets or sets the InnerProp1. </summary>
        public int? FlattenedNestedPropertyInnerProp1
        {
            get
            {
                return FlattenedNestedProperty is null ? default : FlattenedNestedProperty.InnerProp1;
            }
            set
            {
                FlattenedNestedProperty.InnerProp1 = value.Value;
            }
        }

        /// <summary> Gets or sets the InnerProp2. </summary>
        public string FlattenedNestedPropertyInnerProp2
        {
            get
            {
                return FlattenedNestedProperty is null ? default : FlattenedNestedProperty.InnerProp2;
            }
            set
            {
                FlattenedNestedProperty.InnerProp2 = value;
            }
        }

        /// <summary> Gets or sets the MiddleProp1. </summary>
        public int? FlattenedNestedPropertyMiddleProp1
        {
            get
            {
                return FlattenedNestedProperty is null ? default : FlattenedNestedProperty.MiddleProp1;
            }
            set
            {
                FlattenedNestedProperty.MiddleProp1 = value.Value;
            }
        }

        /// <summary> Gets or sets the MiddleProp2. </summary>
        public string FlattenedNestedPropertyMiddleProp2
        {
            get
            {
                return FlattenedNestedProperty is null ? default : FlattenedNestedProperty.MiddleProp2;
            }
            set
            {
                FlattenedNestedProperty.MiddleProp2 = value;
            }
        }

        /// <summary> Gets or sets the Prop1. </summary>
        public string FlattenedNestedPropertyProp1
        {
            get
            {
                return FlattenedNestedProperty is null ? default : FlattenedNestedProperty.Prop1;
            }
            set
            {
                FlattenedNestedProperty.Prop1 = value;
            }
        }

        /// <summary> Gets or sets the Prop2. </summary>
        public int? FlattenedNestedPropertyProp2
        {
            get
            {
                return FlattenedNestedProperty is null ? default : FlattenedNestedProperty.Prop2;
            }
            set
            {
                FlattenedNestedProperty.Prop2 = value.Value;
            }
        }

        /// <summary> enabled. </summary>
        public bool? IsEnabled
        {
            get
            {
                return Properties is null ? default : Properties.IsEnabled;
            }
        }

        /// <summary> enabled. </summary>
        public int? PropertyLeft
        {
            get
            {
                return Property is null ? default : Property.Left;
            }
            set
            {
                Property = value.HasValue ? new BarQuotaProperties(value.Value) : default;
            }
        }

        /// <summary> enabled. </summary>
        public int? AnotherPropertyLeft
        {
            get
            {
                return AnotherProperty is null ? default : AnotherProperty.Left;
            }
            set
            {
                AnotherProperty = value.HasValue ? new BarQuotaProperties(value.Value) : default;
            }
        }
    }
}
