// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using MgmtTypeSpec;

namespace MgmtTypeSpec.Mocking
{
    /// <summary> A class to add extension methods to <see cref="TenantResource"/>. </summary>
    public partial class MockableMgmtTypeSpecTenantResource : ArmResource
    {
        private ClientDiagnostics _privateLinksClientDiagnostics;
        private PrivateLinks _privateLinksRestClient;

        /// <summary> Initializes a new instance of MockableMgmtTypeSpecTenantResource for mocking. </summary>
        protected MockableMgmtTypeSpecTenantResource()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MockableMgmtTypeSpecTenantResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableMgmtTypeSpecTenantResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics PrivateLinksClientDiagnostics => _privateLinksClientDiagnostics ??= new ClientDiagnostics("MgmtTypeSpec.Mocking", ProviderConstants.DefaultProviderNamespace, Diagnostics);

        private PrivateLinks PrivateLinksRestClient => _privateLinksRestClient ??= new PrivateLinks(PrivateLinksClientDiagnostics, Pipeline, Endpoint, "2024-05-01");

        /// <summary> Starts a failed runtime resource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> StartFailedServerlessRuntimeAsync(CancellationToken cancellationToken = default)
        {
            using DiagnosticScope scope = PrivateLinksClientDiagnostics.CreateScope("MockableMgmtTypeSpecTenantResource.StartFailedServerlessRuntime");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = PrivateLinksRestClient.CreateStartFailedServerlessRuntimeRequest(context);
                Response response = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Starts a failed runtime resource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response StartFailedServerlessRuntime(CancellationToken cancellationToken = default)
        {
            using DiagnosticScope scope = PrivateLinksClientDiagnostics.CreateScope("MockableMgmtTypeSpecTenantResource.StartFailedServerlessRuntime");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = PrivateLinksRestClient.CreateStartFailedServerlessRuntimeRequest(context);
                Response response = Pipeline.ProcessMessage(message, context);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
