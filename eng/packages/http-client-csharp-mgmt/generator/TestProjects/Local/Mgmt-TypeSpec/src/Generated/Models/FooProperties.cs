// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Generator.MgmtTypeSpec.Tests;

namespace Azure.Generator.MgmtTypeSpec.Tests.Models
{
    /// <summary> The FooProperties. </summary>
    public partial class FooProperties
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="FooProperties"/>. </summary>
        /// <param name="something"> something. </param>
        /// <param name="prop1"></param>
        /// <param name="nestedProperty"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="something"/>, <paramref name="prop1"/> or <paramref name="nestedProperty"/> is null. </exception>
        public FooProperties(string something, IEnumerable<string> prop1, NestedFooModel nestedProperty)
        {
            Argument.AssertNotNull(something, nameof(something));
            Argument.AssertNotNull(prop1, nameof(prop1));
            Argument.AssertNotNull(nestedProperty, nameof(nestedProperty));

            Something = something;
            Prop1 = prop1.ToList();
            Prop2 = new ChangeTrackingList<int>();
            NestedProperty = nestedProperty;
        }

        /// <summary> Initializes a new instance of <see cref="FooProperties"/>. </summary>
        /// <param name="serviceUri"> the service url. </param>
        /// <param name="something"> something. </param>
        /// <param name="boolValue"> boolean value. </param>
        /// <param name="floatValue"> float value. </param>
        /// <param name="doubleValue"> double value. </param>
        /// <param name="prop1"></param>
        /// <param name="prop2"></param>
        /// <param name="nestedProperty"></param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal FooProperties(Uri serviceUri, string something, bool? boolValue, float? floatValue, double? doubleValue, IList<string> prop1, IList<int> prop2, NestedFooModel nestedProperty, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            ServiceUri = serviceUri;
            Something = something;
            BoolValue = boolValue;
            FloatValue = floatValue;
            DoubleValue = doubleValue;
            Prop1 = prop1;
            Prop2 = prop2;
            NestedProperty = nestedProperty;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> the service url. </summary>
        public Uri ServiceUri { get; set; }

        /// <summary> something. </summary>
        public string Something { get; set; }

        /// <summary> boolean value. </summary>
        public bool? BoolValue { get; set; }

        /// <summary> float value. </summary>
        public float? FloatValue { get; set; }

        /// <summary> double value. </summary>
        public double? DoubleValue { get; set; }

        /// <summary> Gets the Prop1. </summary>
        public IList<string> Prop1 { get; } = new ChangeTrackingList<string>();

        /// <summary> Gets the Prop2. </summary>
        public IList<int> Prop2 { get; } = new ChangeTrackingList<int>();

        /// <summary> Gets or sets the NestedProperty. </summary>
        internal NestedFooModel NestedProperty { get; set; }

        /// <summary> Gets or sets the Properties. </summary>
        public FooProperties NestedPropertyProperties
        {
            get
            {
                return NestedProperty is null ? default : NestedProperty.Properties;
            }
            set
            {
                NestedProperty = new NestedFooModel(value);
            }
        }
    }
}
