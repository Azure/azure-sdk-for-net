<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="ValidateTargetFrameworks" BeforeTargets="Build">
    <ItemGroup>
      <RequiredTargetFrameworks Include="$(RequiredTargetFrameworks)" />
      <ConfiguredTargetFrameworks Include="$(TargetFrameworks)" />
      <MissingTargetFrameworks Include="@(RequiredTargetFrameworks)" Exclude="@(ConfiguredTargetFrameworks)" />
    </ItemGroup>

    <Error Condition="'@(RequiredTargetFrameworks)' == ''" Text="List of required target frameworks is empty something must have messed up property RequiredTargetFrameworks[$(RequiredTargetFrameworks)]." />
    <Error Condition="'@(MissingTargetFrameworks)' != ''" Text="Missing required target frameworks '@(MissingTargetFrameworks)'. Please ensure you add those frameworks." />
  </Target>

  <!-- Set PackageProjectUrl and PackageReleaseNotes to the package README.md and CHANGELOG.md respectively for DataPlane Libraries -->
  <Target Name="SetPackageProjectUrlandReleaseNotes" BeforeTargets="GenerateNuspec" DependsOnTargets="InitializeSourceControlInformationFromSourceControlManager" Condition="'$(IsShippingDataPlaneLibrary)' == 'true' and '$(SourceRevisionId)' != ''">
    <Error Condition="'$(IsClientLibrary)' == 'true' and '$(PackageReleaseNotes)' != ''" Text="Do NOT set PackageReleaseNotes property in the project. Release notes are added automatically from package changelog" />
    <PropertyGroup>
      <PackageRootPath>$([MSBuild]::NormalizeDirectory($(MSBuildProjectDirectory)/../))</PackageRootPath>
      <DirectoryPartofPath>$(PackageRootPath.Replace($(RepoRoot), ''))</DirectoryPartofPath>
      <PackageProjectUrl Condition="Exists('$(PackageRootPath)/README.md')">$([System.UriBuilder]::new($(RepositoryUrl)/blob/$(SourceRevisionId)/$(DirectoryPartofPath)README.md).Uri)</PackageProjectUrl>
      <PackageReleaseNotes Condition="Exists('$(PackageRootPath)/CHANGELOG.md')">$([System.UriBuilder]::new($(RepositoryUrl)/blob/$(SourceRevisionId)/$(DirectoryPartofPath)CHANGELOG.md).Uri)</PackageReleaseNotes>
      <PackageReleaseNotes Condition="'@(ExtractedReleaseNotes)' != ''">@(ExtractedReleaseNotes->'%(Identity)', '%0a')%0a%0a$(PackageReleaseNotes)</PackageReleaseNotes>
    </PropertyGroup>
  </Target>

  <!--Extract release notes for the current version being built -->
  <Target Name="GetCurrentReleaseNotes" BeforeTargets="SetPackageProjectUrlandReleaseNotes" Condition="'$(SkipDevBuildNumber)' == 'true' and '$(IsShippingDataPlaneLibrary)' == 'true'" >
    <PropertyGroup>
      <PowerShellExe Condition=" '$(PowerShellExe)'=='' ">"%ProgramFiles%\PowerShell\6\pwsh.exe"</PowerShellExe>
      <PowerShellExe Condition="!Exists('$(PowerShellExe)')">pwsh</PowerShellExe>
      <GetReleaseNotesScriptPath Condition=" '$(GetReleaseNotesScriptPath)'=='' ">$(MSBuildThisFileDirectory)/common/Extract-ReleaseNotes.ps1</GetReleaseNotesScriptPath>
      <ChangeLogPath>$([MSBuild]::NormalizeDirectory($(MSBuildProjectDirectory)/../))CHANGELOG.md</ChangeLogPath>
    </PropertyGroup>
    <Exec Condition="Exists('$(ChangeLogPath)')" ContinueOnError="true" ConsoleToMSBuild="true" Command="$(PowerShellExe) -NonInteractive -executionpolicy Unrestricted -File $(GetReleaseNotesScriptPath) $(ChangeLogPath) $(Version)">
      <Output TaskParameter="ConsoleOutput" ItemName="ExtractedReleaseNotesTemp" />
      <Output TaskParameter="ExitCode" PropertyName="SetReleaseNotesErrorCode" />
    </Exec>
    <Error Condition="Exists('$(ChangeLogPath)') and '$(SetReleaseNotesErrorCode)' != '0'" Text="Release Notes for the specified version was not found. @(ExtractedReleaseNotesTemp)" />
    <ItemGroup Condition="Exists('$(ChangeLogPath)')">
      <ExtractedReleaseNotes Condition="'$(SetReleaseNotesErrorCode)'=='0'" Include="@(ExtractedReleaseNotesTemp)" />
    </ItemGroup>
  </Target>

  <!-- This allows us to build .NET Framework targets on non-windows
    TODO: Move the NETFramework reference assemblies to a feed other then the roslyn feed.
  -->
  <ItemGroup Condition="'$(IsTargetingNetFx)' == 'true' and '$(OS)' != 'Windows_NT'">
    <PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" PrivateAssets="all" IsImplicitlyDefined="true" />
  </ItemGroup>

  <!-- Add Client SDK Analyzers -->
  <ItemGroup>
    <PackageReference Condition="'$(GenerateAPIListing)' == 'true'" Include="Microsoft.DotNet.GenAPI" PrivateAssets="All" />

    <PackageReference Condition="'$(EnableClientSdkAnalyzers)' == 'true'" Include="Azure.ClientSdk.Analyzers" PrivateAssets="All" />

    <PackageReference Condition="'$(EnableFxCopAnalyzers)' == 'true'" Include="Microsoft.CodeAnalysis.FxCopAnalyzers">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <!-- Add Package Icon to DataPlane Packages -->
  <ItemGroup>
    <None Include="$(RepoEngPath)/images/pkgicon.png" Pack="true" PackagePath=""/>
    <None Condition="Exists('$(MSBuildProjectDirectory)/../CHANGELOG.md')" Include="$(MSBuildProjectDirectory)/../CHANGELOG.md" Pack="true" PackagePath=""/>
    <None Condition="Exists('$(MSBuildProjectDirectory)/../README.md')" Include="$(MSBuildProjectDirectory)/../README.md" Pack="true" PackagePath=""/>
  </ItemGroup>

  <!-- Add StyleCop Analyzers -->
  <ItemGroup Condition="'$(EnableStyleCopAnalyzers)' == 'true'"  >
    <PackageReference Include="StyleCop.Analyzers">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
    <AdditionalFiles Include="$(RepoEngPath)\stylecop.json">
      <Visible>false</Visible>
    </AdditionalFiles>
  </ItemGroup>

  <!-- Enable SourceLink  -->
  <ItemGroup>
    <PackageReference Include="Microsoft.SourceLink.GitHub" PrivateAssets="All" />
  </ItemGroup>
  
  <!-- Enable ApiCompat  -->
  <ItemGroup>
    <ProjectReference Include="$(RepoRoot)/eng/ApiCompat/ApiCompat.csproj" ReferenceOutputAssembly="false" BuildReference="false" Condition="'$(EnableApiCompat)' == 'true'" />
  </ItemGroup>

  <PropertyGroup>
    <ImportDefaultReferences Condition="'$(ImportDefaultReferences)' == ''">true</ImportDefaultReferences>
    <DefaultReferenceTargets>AzSdk.reference.targets</DefaultReferenceTargets>
    <DefaultReferenceTargets Condition="'$(IsTestProject)' == 'true' or '$(IsTestSupportProject)' == 'true'">AzSdk.test.reference.targets</DefaultReferenceTargets>

    <!-- Disable running of tests for test helper libraries -->
    <IsTestProject Condition="'$(IsTestSupportProject)' == 'true'">false</IsTestProject>
  </PropertyGroup>

  <Import Project="$(DefaultReferenceTargets)" Condition="Exists('$(DefaultReferenceTargets)') And '$(ImportDefaultReferences)'=='true'" />

  <Import Project="Versioning.targets" />

  <Import Project="ApiListing.targets" />

  <Import Project="CodeGeneration.targets" />

  <!-- CentralPackageVersions properties -->
  <PropertyGroup>
    <CentralPackagesFile>$(MSBuildThisFileDirectory)Packages.Data.props</CentralPackagesFile>
    <CentralPackageVersionPackagePath>$(MSBuildThisFileDirectory)Microsoft.Build.CentralPackageVersions\2.0.46\Sdk</CentralPackageVersionPackagePath>
    <UseProjectReferenceToAzureClients Condition="'$(UseProjectReferenceToAzureClients)' == ''">false</UseProjectReferenceToAzureClients>
  </PropertyGroup>

  <!--Generate Assembly Attributes file in IntermediateOutputPath -->
  <PropertyGroup>
    <TargetFrameworkMonikerAssemblyAttributesPath>$(IntermediateOutputPath)$(TargetFrameworkMoniker).AssemblyAttributes$(DefaultLanguageSourceExtension)</TargetFrameworkMonikerAssemblyAttributesPath>
  </PropertyGroup>

  <ItemGroup Condition="'$(UseProjectReferenceToAzureClients)' == 'true'">
    <!-- Find all Azure projects -->
    <AzureProjects Include="$(RepoRoot)/sdk/*/Azure.*/src/Azure.*.csproj" ProjectPath="%(Identity)" />
    <PossibleProjectsToConvert Include="@(AzureProjects -> '%(Filename)')"/>

    <!-- Compute set of projects that intersect with the PackageReference's -->
    <_NotPackageReferences Include="@(PossibleProjectsToConvert)" Exclude="@(PackageReference)" />
    <ProjectsToConvert Include="@(PossibleProjectsToConvert)" Exclude="@(_NotPackageReferences)" />

    <!-- Remove PackageReferences -->
    <PackageReference Remove="@(ProjectsToConvert)" />

    <!-- Add ProjectReferences -->
    <ProjectReference Include="@(ProjectsToConvert -> '%(ProjectPath)')" />
  </ItemGroup>

  <!-- Added layer of checks to make sure we correctly switched to project references -->
  <Target Name="VerifyProjectReferencesReferences" AfterTargets="Build">
    <ItemGroup>
      <AzureReferences Include="@(ReferencePath)" Condition="$([System.String]::Copy('%(Filename)').StartsWith('Azure.'))" />
    </ItemGroup>

    <ItemGroup Condition="'$(UseProjectReferenceToAzureClients)' == 'true'">
      <ShouldBeProjectReference Include="@(AzureReferences)" Exclude="@(AzureReferences->HasMetadata('MSBuildSourceProjectFile'))" />
    </ItemGroup>

    <Error Condition="'$(UseProjectReferenceToAzureClients)' == 'true' and '@(ShouldBeProjectReference)' != ''"
           Text="When UseProjectReferenceToAzureClients=true all Azure.* references should be Project References, but the following are not [@(ShouldBeProjectReference)]" />
  </Target>

   <Target Name="RunApiCompat" AfterTargets="CoreBuild" Condition="'$(EnableApiCompat)' == 'true' and '$(DesignTimeBuild)' != 'true'">
    <MSBuild
      Projects="$(MSBuildThisFileDirectory)/ApiCompat/ApiCompat.csproj"
      Properties="TargetPackageName=$(PackageId);TargetOutputPath=$(IntermediateOutputPath)"
      Targets="ApiCompatVerification"
     />
  </Target>
  
  <Import Project="$(CentralPackageVersionPackagePath)\Sdk.targets" />
</Project>