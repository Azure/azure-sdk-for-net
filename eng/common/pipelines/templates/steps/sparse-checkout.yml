parameters:
  - name: Paths
    type: object
    default: []
  - name: Repositories
    type: object
    default:
      - Name: $(Build.Repository.Name)
        Commitish: $(Build.SourceVersion)
        WorkingDirectory: $(System.DefaultWorkingDirectory)
  - name: SkipDefaultCheckout
    type: boolean
    default: false

steps:
  - ${{ if not(parameters.SkipDefaultCheckout) }}:
    - checkout: none

  - task: PowerShell@2
    displayName: 'Sparse checkout repositories'
    inputs:
      targetType: inline
      # Define this inline, because of the chicken/egg problem with loading a script when nothing
      # has been checked out yet.
      script: |
        function SparseCheckout([Array]$paths, [Array]$Repositories)
        {
            $paths = $paths -Join ' '

            foreach ($repo in $Repositories) {
                $dir = $repo.WorkingDirectory
                if (!$dir) {
                  $dir = "./$($repo.Name)"
                }
                New-Item $dir -ItemType Directory -Force
                Push-Location $dir

                if (Test-Path .git/info/sparse-checkout) {
                  $hasInitialized = $true
                  Write-Host "Repository $($repo.Name) has already been initialized. Skipping this step."
                } else {
                  Write-Host "Repository $($repo.Name) is being initialized."
                  git clone --no-checkout --filter=tree:0 git://github.com/$($repo.Name) .
                  git sparse-checkout init
                  git sparse-checkout set eng
                }

                Invoke-Expression -Command "git sparse-checkout add $paths"

                Write-Host "Set sparse checkout paths to:"
                Get-Content .git/info/sparse-checkout

                # sparse-checkout commands after initial checkout will auto-checkout again
                if (!$hasInitialized) {
                  git checkout $($repo.Commitish)  # this will use the default branch if repo.Commitish is empty
                }

                Pop-Location
            }
        }

        # Paths may be sourced as a yaml object literal OR a dynamically generated variable json string.
        # If the latter, convertToJson will wrap the 'string' in quotes, so remove them.
        $paths = '${{ convertToJson(parameters.Paths) }}'.Trim('"') | ConvertFrom-Json
        # Escape windows backslash paths
        $repositories = '${{ convertToJson(parameters.Repositories) }}' -replace '\\', '\\' | ConvertFrom-Json
        SparseCheckout $paths $Repositories
      pwsh: true
      workingDirectory: $(System.DefaultWorkingDirectory)
