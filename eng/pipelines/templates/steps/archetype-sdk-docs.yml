steps:
  - pwsh: |
      # Download and Extract or restore Packages required for Doc Generation
      Write-Host "Download and Extract mdoc to Build.BinariesDirectory/mdoc"
      Invoke-WebRequest -MaximumRetryCount 10 -Uri "https://github.com/mono/api-doc-tools/releases/download/mdoc-5.7.4.9/mdoc-5.7.4.9.zip" `
      -OutFile "mdoc.zip" | Wait-Process; Expand-Archive -Path "mdoc.zip" -DestinationPath "./mdoc/"

      Write-Host "Download and Extract docfx to Build.BinariesDirectory/docfx"
      Invoke-WebRequest -MaximumRetryCount 10 -Uri "https://github.com/dotnet/docfx/releases/download/$(DocFxVersion)/docfx.zip" `
      -OutFile "docfx.zip" | Wait-Process; Expand-Archive -Path "docfx.zip" -DestinationPath "./docfx/"

      Write-Host "Restore ${{parameters.DocGenerationDir}}/assets/docgen.csproj, to get ECMA2Yml and popimport"
      dotnet restore "${{parameters.DocGenerationDir}}/assets/docgen.csproj" /p:BuildBinariesDirectory=$(Build.BinariesDirectory)
    workingDirectory: $(Build.BinariesDirectory)
    displayName: Download and Extract Required Software

  - ${{ each artifact in parameters.Artifacts }}:
    - task: PowerShell@2
      displayName: Build DocFx Documenttion Site for ${{artifact.name}}
      inputs:
        pwsh: true
        filePath: $(Build.SourcesDirectory)/doc/ApiDocGeneration/Generate-Api-Docs.ps1
        arguments: >
          -ArtifactName '${{artifact.name}}'
          -ServiceDirectory '${{parameters.ServiceDirectory}}'
          -ArtifactsDirectoryName '${{artifact.directoryName}}'
          -LibType '${{parameters.LibType}}'
          -RepoRoot $(Build.SourcesDirectory)
          -BinDirectory $(Build.BinariesDirectory)
          -DocGenDir ${{parameters.DocGenerationDir}}
          -ArtifactStagingDirectory '$(Build.ArtifactStagingDirectory)'
          -verbose