parameters:
  - name: PublishingArtifactName
    type: string
  - name: ServiceDirectory
    type: string
  - name: ForceDirect
    type: boolean
    default: false

steps:
  - script: |
      echo "##vso[task.setvariable variable=DISCOVER_DEPENDENT_PACKAGES]1"
    displayName: Enable AdditionalDependency Calculation

  - template: /eng/pipelines/templates/steps/install-dotnet.yml

  - template: /eng/common/pipelines/templates/steps/save-package-properties.yml
    parameters:
      ServiceDirectory: ${{parameters.ServiceDirectory}}
      PackageInfoDirectory: $(Build.ArtifactStagingDirectory)/PackageInfoPublishing

  # when we publish the packageinfo as an artifact, it actually cleans up the original files. Since we need them during matrix generation steps
  # that will execute directly after the pregeneration steps here, we output them to a publishing directory, copy from there into the target PackageInfoDirectory,
  # and then publish the originals
  - pwsh: |
      mkdir "$(Build.ArtifactStagingDirectory)/PackageInfo"
      Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)/PackageInfoPublishing" -File `
        | Copy-Item -Destination "$(Build.ArtifactStagingDirectory)/PackageInfo/$($_.Name)" -Force
    displayName: Copy ArtifactInfo from Publishing Directory

  - template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
    parameters:
      ArtifactName: '${{ parameters.PublishingArtifactName }}'
      ArtifactPath: '$(Build.ArtifactStagingDirectory)/PackageInfoPublishing'

  - pwsh: |
      $packageInfos = Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)/PackageInfo" -Filter "*.json" -Recurse
      $packageInfos | ForEach-Object {
        $content = Get-Content -Raw -Path $_.FullName | ConvertFrom-Json
        $content.IncludedForValidation = $false
        $content | ConvertTo-Json -Depth 32 | Out-File $_.FullName
      }
    displayName: Set all packages to direct
    condition: and(succeededOrFailed(), eq(${{ parameters.ForceDirect }}, true))

