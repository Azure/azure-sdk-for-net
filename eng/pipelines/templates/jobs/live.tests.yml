parameters:
- name: PreSteps
  type: object
  default: []
- name: PostSteps
  type: object
  default: []
- name: EnvVars
  type: object
  default: {}
- name: MaxParallel
  type: number
  default: 0
- name: BuildInParallel
  type: boolean
  default: true
- name: TimeoutInMinutes
  type: number
  default: 60
- name: Location
  type: string
  default: ''
- name: SDKType
  type: string
  default: all
- name: ServiceDirectory
  type: string
  default: not-specified
- name: TestResourceDirectories
  type: object
  default:
- name: Project
  type: string
  default: '**'
- name: TestSetupSteps
  type: stepList
  default: []
- name: DeployTestResources
  type: boolean
  default: true
- name: CloudConfig
  type: object
  default: {}
- name: Platforms
  type: object
  default: {}
- name: Matrix
  type: string
- name: DependsOn
  type: string
  default: ''
- name: UsePlatformContainer
  type: boolean
  default: false

jobs:
  - job:
    dependsOn: ${{ parameters.DependsOn }}
    condition: ne(${{ parameters.Matrix }}, '{}')
    strategy:
      maxParallel: ${{ parameters.MaxParallel }}
      matrix: $[ ${{ parameters.Matrix }} ]

    variables:
      # ServiceDirectory references must get passed down by the caller as variable references
      - name: ServiceDirectory
        value: ${{ parameters.ServiceDirectory }}
      - name: AdditionalTestArguments
        value: ''
      - name: ArmTemplateParameters
        value: '@{}'
      - name: TestMode
        value: 'None'

    timeoutInMinutes: ${{ parameters.TimeoutInMinutes }}

    pool:
      name: $(Pool)
      vmImage: $(OSVmImage)

    ${{ if eq(parameters.UsePlatformContainer, 'true') }}:
      # Add a default so the job doesn't fail when the matrix is empty
      container: $[ variables['Container'] ]

    steps:
      - ${{ if not(contains(variables['Build.DefinitionName'], '-pr - ')) }}:
        - template: /eng/common/pipelines/templates/steps/sparse-checkout.yml
          parameters:
              Paths:
                - "/*"
                - "!SessionRecords"

      - ${{ parameters.PreSteps }}

      - template: /eng/common/pipelines/templates/steps/verify-agent-os.yml
        parameters:
          AgentImage: $(OSVmImage)

      - ${{ each step in parameters.TestSetupSteps }}:
        - ${{ each pair in step }}:
            ${{ pair.key }}: ${{ pair.value }}

      - template: /eng/common/TestResources/build-test-resource-config.yml
        parameters:
          SubscriptionConfiguration: ${{ parameters.CloudConfig.SubscriptionConfiguration }}
          SubscriptionConfigurations: ${{ parameters.CloudConfig.SubscriptionConfigurations }}
          EnvVars: ${{ parameters.EnvVars }}

      - pwsh: |
          $project = "${{ parameters.Project }}"
          $directory = "${{ parameters.ServiceDirectory }}"
          if ($project -and $project -ne "**" -and (Test-Path "$(Build.SourcesDirectory)/sdk/$directory/$project/test-resources.*")) {
            $directory = "$directory/$project"
          }
          Write-Host "Setting TestResourcesDirectory to '$directory'"
          Write-Host "##vso[task.setvariable variable=TestResourcesDirectory]$directory"
        displayName: Set TestResources Location

      - ${{ if parameters.DeployTestResources }}:
        - ${{ if parameters.TestResourceDirectories }}:
          - ${{ each directory in parameters.TestResourceDirectories }}:
            - template: /eng/common/TestResources/deploy-test-resources.yml
              parameters:
                ${{ if or(parameters.Location, parameters.CloudConfig.Location) }}:
                  Location: ${{ coalesce(parameters.Location, parameters.CloudConfig.Location) }}
                ServiceDirectory: '${{ directory }}'
                TestResourcesDirectory: '$(TestResourcesDirectory)'
                SubscriptionConfiguration: $(SubscriptionConfiguration)
                ArmTemplateParameters: $(ArmTemplateParameters)
        - ${{ if not(parameters.TestResourceDirectories) }}:
          - template: /eng/common/TestResources/deploy-test-resources.yml
            parameters:
              ${{ if or(parameters.Location, parameters.CloudConfig.Location) }}:
                Location: ${{ coalesce(parameters.Location, parameters.CloudConfig.Location) }}
              ServiceDirectory: '${{ parameters.ServiceDirectory }}'
              TestResourcesDirectory: '$(TestResourcesDirectory)'
              SubscriptionConfiguration: $(SubscriptionConfiguration)
              ArmTemplateParameters: $(ArmTemplateParameters)

      - pwsh: |
          if ($env:SupportsRecording -and $env:Record) {
            Write-Host "Enabling Record mode"
            Write-Host "##vso[task.setvariable variable=TestMode]Record"
          }
        displayName: Set Test Mode
      - template: /eng/pipelines/templates/steps/install-dotnet.yml
        parameters:
          Container: ${{ parameters.UsePlatformContainer }}
      - script: >
          dotnet test eng/service.proj
          --framework $(TestTargetFramework)
          --filter "TestCategory!=Manually & ($(AdditionalTestFilters))"
          --logger "trx"
          --logger:"console;verbosity=normal"
          --blame-crash-dump-type full --blame-hang-dump-type full --blame-hang-timeout ${{parameters.TimeoutInMinutes}}minutes
          /p:SDKType=${{ parameters.SDKType }}
          /p:ServiceDirectory=${{ parameters.ServiceDirectory }}
          /p:Project=${{ parameters.Project }}
          /p:IncludeSrc=false /p:IncludeSamples=false /p:IncludePerf=false /p:IncludeStress=false
          /p:BuildInParallel=${{ parameters.BuildInParallel }}
          /p:CollectCoverage=$(CollectCoverage) /p:CodeCoverageDirectory=$(Build.SourcesDirectory)\sdk\${{parameters.ServiceDirectory}}
          /p:EnableSourceLink=false
          $(AdditionalTestArguments)

        displayName: "Build & Test (all tests for $(TestTargetFramework))"
        env:
          AZURE_TEST_MODE: $(TestMode)
          ${{ each var in parameters.EnvVars }}:
            ${{ var.key }}: ${{ var.value }}

      - ${{ if parameters.DeployTestResources }}:
        - ${{ if parameters.TestResourceDirectories }}:
          - ${{ each directory in parameters.TestResourceDirectories }}:
            - template: /eng/common/TestResources/remove-test-resources.yml
              parameters:
                ServiceDirectory: '${{ directory }}'
                SubscriptionConfiguration: $(SubscriptionConfiguration)
        - ${{ if not(parameters.TestResourceDirectories) }}:
            - template: /eng/common/TestResources/remove-test-resources.yml
              parameters:
                ServiceDirectory: '${{ parameters.ServiceDirectory }}'
                SubscriptionConfiguration: $(SubscriptionConfiguration)

      - task: PublishTestResults@2
        condition: always()
        displayName: "Publish Results ($(TestTargetFramework))"
        inputs:
          testResultsFiles: "**/*.trx"
          testRunTitle: "${{ parameters.ServiceDirectory }} ${{ parameters.CloudConfig.Cloud }} $(Agent.JobName)"
          testResultsFormat: "VSTest"
          mergeTestResults: true

      - template: /eng/pipelines/templates/steps/upload-dumps.yml

      - task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
        condition: and(succeededOrFailed(), eq(variables['CollectCoverage'], 'true'), eq(variables['coverage.collected'], 'true'))
        displayName: Generate Code Coverage Reports
        inputs:
          reports: $(Build.SourcesDirectory)\sdk\${{parameters.ServiceDirectory}}\**\coverage.cobertura.xml
          targetdir: $(Build.ArtifactStagingDirectory)\coverage
          reporttypes: Cobertura
          filefilters: +$(Build.SourcesDirectory)\sdk\${{parameters.ServiceDirectory}}\**
          verbosity: Verbose

      - task: PublishCodeCoverageResults@1
        condition: and(succeededOrFailed(), eq(variables['CollectCoverage'], 'true'), eq(variables['coverage.collected'], 'true'))
        displayName: Publish Code Coverage Reports
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(Build.ArtifactStagingDirectory)\coverage\Cobertura.xml

      - ${{ parameters.PostSteps }}
