parameters:
- name: ShouldPublish
  type: boolean
  default: false
- name: Scope
  type: string
  default: ''

jobs:
  - job: Build
    timeoutInMinutes: 100
    pool:
      name: azsdk-pool-mms-win-2022-general
      vmImage: windows-2022
    steps:
      #- script: "echo $(system.pullrequest.pullrequestnumber), https://github.com/$(build.repository.id), https://github.com/$(build.repository.ID)"
      - template: /eng/pipelines/templates/steps/install-dotnet.yml
      - task: UseDotNet@2
        displayName: 'Use .NET Core 3.1 SDK' # We still need .NET Core 3.1 for .NET Track 1 SDK
        retryCountOnTaskFailure: 3
        inputs:
          # AspNetCore runtime pack can't be installed outside of SDK and we need it for intergation tests
          packageType: sdk
          performMultiLevelLookup: true
          version: "3.1.x"
      - script: |
          if "$(BuildConfiguration)" == "Release" (set SkipTests=true) else (set SkipTests=false)
          dotnet msbuild mgmt.proj /v:m /t:CreateNugetPackage /p:Configuration=$(BuildConfiguration) /p:SkipTests=%SkipTests% /p:PackageOutputPath=$(Build.ArtifactStagingDirectory) /p:Scope=${{ parameters.Scope }} /p:ForPublishing=${{ parameters.ShouldPublish }} $(loggingArgs) $(RPScopeArgs)"
        displayName: "Build & Package"
      - task: PowerShell@2
        displayName: "Verify generated code"
        condition: and(succeeded(), ne(variables['System.TeamProject'],'internal'), not(contains(variables['System.PullRequest.TargetBranch'], 'feature/cplat')))
        inputs:
          filePath: "eng/scripts/Track1CodeCheck.ps1"
          pwsh: true
          failOnStderr:  false
        env:
          REPOSITORY_NAME: $(Build.Repository.Name)
          PULLREQUEST_ID: $(System.PullRequest.PullRequestNumber)
      - task: PublishBuildArtifacts@1
        condition: succeededOrFailed()
        inputs:
          pathtoPublish: $(msBuildLogDir)
          artifactName: MsBuildLogs
      - task: PublishPipelineArtifact@0
        condition: succeeded()
        inputs:
          artifactName: packages
          targetPath: $(Build.ArtifactStagingDirectory)
      - pwsh: |
          $releaseTag = "FOR_SIGNING"
          if ("${{ parameters.ShouldPublish }}" -eq "true") { $releaseTag = "FOR_PUBLISHING" }
          echo "Tagging build with $releaseTag"
          echo "##vso[build.addbuildtag]$releaseTag"
        displayName: "Tagging the build"
        condition: ne(variables['System.TeamProject'], 'public')

  - job: Test
    timeoutInMinutes: 90
    strategy:
      maxParallel: $[ variables['MaxParallelTestJobs'] ]
      matrix:
        Linux:
          Pool: azsdk-pool-mms-ubuntu-2004-general
          OSVmImage: "MMSUbuntu20.04"
        Windows:
          Pool: azsdk-pool-mms-win-2022-general
          OSVmImage: windows-2022
        MacOs:
          Pool: Azure Pipelines
          OSVmImage: "macos-11"
    pool:
      name: $(Pool)
      vmImage: $(OSVmImage)
    steps:
      - template: /eng/common/pipelines/templates/steps/verify-agent-os.yml
        parameters:
          AgentImage: $(OSVmImage)
      - script: "echo $(system.pullrequest.pullrequestnumber), http://github.com/$(build.repository.id), http://github.com/$(build.repository.ID)"
      - template: /eng/pipelines/templates/steps/install-dotnet.yml
      - task: UseDotNet@2
        displayName: 'Use .NET Core 3.1 SDK' # We still need .NET Core 3.1 for .NET Track 1 SDK
        retryCountOnTaskFailure: 3
        inputs:
          # AspNetCore runtime pack can't be installed outside of SDK and we need it for intergation tests
          packageType: sdk
          performMultiLevelLookup: true
          version: "3.1.x"
      - script: "dotnet msbuild mgmt.proj /v:n /t:RunTests /p:Scope=${{ parameters.Scope }} /p:ForPublishing=${{ parameters.ShouldPublish }} /clp:ShowtimeStamp $(RPScopeArgs)"
        displayName: "Build & Run Tests"
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: "**/*.trx"
          testRunTitle: "$(OSName) Test Results"
          testResultsFormat: "VSTest"
          mergeTestResults: true
      # - task: PublishBuildArtifacts@1
      #   condition: succeededOrFailed()
      #   inputs:
      #       pathtoPublish: $(msBuildLogDir)
      #       artifactName: MsBuildLogs
  - job: "Analyze"
    dependsOn:
      - Build
    pool:
      name: azsdk-pool-mms-win-2022-general
      vmImage: windows-2022
    steps:
      - task: UsePythonVersion@0
        displayName: "Use Python 3.9"
        inputs:
          versionSpec: "3.9"
      - template: /eng/common/pipelines/templates/steps/verify-path-length.yml
        parameters:
          SourceDirectory: $(Build.SourcesDirectory)
      - task: PowerShell@2
        inputs:
          targetType: "inline"
          script: |
            if (Test-Path "src/SDKs/_metadata/") {
                Write-Error "'src/SDKs/_metadata/' is not empty. This might be caused by outdated build tools. Please follow this guide to update them and make sure the metadata txt file is generated in 'eng/mgmt/mgmtmetadata': https://github.com/Azure/adx-documentation-pr/blob/master/engineering/adx_netsdk_process.md#updating-build-tools"
            }
          failOnStderr: true
          pwsh: true

  - job: Compliance
    pool:
      name: azsdk-pool-mms-win-2022-general
      vmImage: windows-2022
    steps:
      - template: /eng/common/pipelines/templates/steps/credscan.yml
        parameters:
          BaselineFilePath: $(Build.sourcesdirectory)/eng/dotnet.gdnbaselines
