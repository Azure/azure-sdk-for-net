jobs:
  - job: "Analyze"
    condition: ne(variables['Skip.Analyze'], true)
    variables:
      - template: ../variables/globals.yml
    pool:
      vmImage: "windows-2019"
    steps:
      - pwsh: |
          Install-Module -Name powershell-yaml -RequiredVersion 0.4.1 -Force -Scope CurrentUser
          $remoteHEAD = git rev-parse origin/master
          $localHEAD = git rev-parse HEAD
          $ymlfilesChanged = (git diff --name-only $remoteHEAD...$localHEAD) | Where-Object {$_ -like '*.yml'}
          
          foreach ($file in $ymlfilesChanged)
          {
            Write-Host $file
            $ymlContent = Get-Content "$(Build.SourcesDirectory)/$file" -Raw
            $ymlObject = ConvertFrom-Yaml $ymlContent -Ordered

            if ($ymlObject.Contains("resources"))
            {
              if ($ymlObject["resources"].Contains("repositories"))
              {
                $repositories = $ymlObject["resources"]["repositories"]
                foreach ($repo in $repositories)
                {
                  $repoName = $repo["repository"]
                  if (-not ($repo.Contains("ref")))
                  {
                    Write-Error "Ref not found. Please ensure you add a Ref: when using repository resource"
                    exit 1
                  }
                }
              }
            }
          }
        displayName: "Test files changed in PR"
      - task: UsePythonVersion@0
        displayName: "Use Python 3.6"
        inputs:
          versionSpec: "3.6"
      - script: |
          pip install setuptools wheel
          pip install doc-warden==$(DocWardenVersion)
          ward scan -d $(Build.SourcesDirectory) -c $(Build.SourcesDirectory)/eng/.docsettings.yml
        displayName: "Verify Readmes"
      - task: UseDotNet@2
        displayName: "Use .NET Core sdk $(DotNetCoreSDKVersion)"
        inputs:
          version: "$(DotNetCoreSDKVersion)"
      - task: UseDotNet@2
        displayName: "Use .NET Core runtime $(DotNetCoreRuntimeVersion)"
        inputs:
          packageType: runtime
          version: "$(DotNetCoreRuntimeVersion)"
      - task: DownloadPipelineArtifact@2
        displayName: "Download Build Artifacts"
        condition: succeededOrFailed()
        inputs:
          artifact: packages
          path: $(Pipeline.Workspace)/packages
          patterns: "*.nupkg"
      - template: /eng/common/pipelines/templates/steps/verify-path-length.yml
        parameters:
          SourceDirectory: $(Build.SourcesDirectory)
      - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
        displayName: "Component Detection"
        # ComponentGovernance is currently unable to run on pull requests of public projects.  Running on
        # scheduled builds should be good enough.
        inputs:
          ignoreDirectories: "sdk/storage/Azure.Storage.Common/swagger/Generator"
        condition: and(succeededOrFailed(), ne(variables['Build.Reason'],'PullRequest'))
      - task: NodeTool@0
        inputs:
          # AutoRest doesn't work with versions 12.x
          versionSpec: '10.15.0'
        displayName: 'Install NodeJS'
      - task: PowerShell@2
        displayName: "Verify generated code"
        env:
          DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
          DOTNET_CLI_TELEMETRY_OPTOUT: 1
          DOTNET_MULTILEVEL_LOOKUP: 0
        inputs:
          filePath: "eng/scripts/CodeChecks.ps1"
          arguments: -ServiceDirectory ${{parameters.ServiceToBuild}}
          pwsh: true
          failOnStderr:  false