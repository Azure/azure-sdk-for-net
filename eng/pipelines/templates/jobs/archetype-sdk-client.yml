jobs:
  - job: Build
    variables:
      - template: ../variables/globals.yml
    pool:
      vmImage: vs2017-win2016
    steps:
      - task: DotNetCoreInstaller@2
        displayName: "Use .NET Core sdk $(DotNetCoreSDKVersion)"
        inputs:
          version: "$(DotNetCoreSDKVersion)"
      - script: "dotnet pack $(ProjectFile) -o $(Build.ArtifactStagingDirectory) -warnaserror /p:PublicSign=false"
        displayName: "Build and Package"
        env:
          DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
          DOTNET_CLI_TELEMETRY_OPTOUT: 1
          DOTNET_MULTILEVEL_LOOKUP: 0
      - task: PublishPipelineArtifact@0
        condition: succeededOrFailed()
        inputs:
          artifactName: packages
          targetPath: $(Build.ArtifactStagingDirectory)
  - job: "Analyze"
    variables:
      - template: ../variables/globals.yml
    dependsOn:
      - Build
    pool:
      vmImage: "vs2017-win2016"
    steps:
      - task: UsePythonVersion@0
        displayName: "Use Python 3.6"
        inputs:
          versionSpec: "3.6"
      - script: |
          pip install setuptools wheel
          pip install doc-warden
          ward scan -d $(Build.SourcesDirectory) -c $(Build.SourcesDirectory)/eng/.docsettings.yml
        displayName: "Verify Readmes"
      - task: DownloadPipelineArtifact@1
        displayName: "Download Build Artifacts"
        condition: and(succeededOrFailed(), ne(variables['Build.Reason'],'PullRequest'))
        inputs:
          artifactName: packages
          targetPath: $(System.DefaultWorkingDirectory)
      - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
        displayName: "Component Detection"
        # ComponentGovernance is currently unable to run on pull requests of public projects.  Running on
        # scheduled builds should be good enough.
        condition: and(succeededOrFailed(), ne(variables['Build.Reason'],'PullRequest'))
  - job: "Test"
    variables:
      - template: ../variables/globals.yml
    strategy:
      maxParallel: $[ variables['MaxParallelTestJobs'] ]
      matrix:
        Linux:
          OSName: "Linux"
          OSVmImage: "ubuntu-16.04"
        Windows:
          OSName: "Windows"
          OSVmImage: "vs2017-win2016"
        MacOs:
          OSName: "MacOS"
          OSVmImage: "macOS-10.13"
    pool:
      vmImage: "$(OSVmImage)"
    steps:
      - powershell: |
          Invoke-WebRequest -Uri "https://github.com/Azure/azure-sdk-tools/releases/download/sdk-tools_14793/sdk-tools.zip" `
          -OutFile "sdk-tools.zip" | Wait-Process; Expand-Archive -Path "sdk-tools.zip" -DestinationPath "./sdk-tools/"
        workingDirectory: "$(Build.BinariesDirectory)"
        displayName: "Download Tools Archive From Github Release and Extract it"
      - task: PythonScript@0
        displayName: "Run VerifyAgentOS script"
        inputs:
          scriptPath: "$(Build.BinariesDirectory)/sdk-tools/scripts/python/verify_agent_os.py"
          arguments: $(OSName)
      - task: DotNetCoreInstaller@2
        displayName: "Use .NET Core runtime $(DotNetCoreRuntimeVersion)"
        inputs:
          packageType: runtime
          version: "$(DotNetCoreRuntimeVersion)"
      - task: DotNetCoreInstaller@2
        displayName: "Use .NET Core sdk $(DotNetCoreSDKVersion)"
        inputs:
          packageType: sdk
          version: "$(DotNetCoreSDKVersion)"
      - script: "dotnet test $(ProjectFile) --filter TestCategory!=Live --logger trx"
        displayName: "Build & Test"
        env:
          DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
          DOTNET_CLI_TELEMETRY_OPTOUT: 1
          DOTNET_MULTILEVEL_LOOKUP: 0
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: "**/*.trx"
          testRunTitle: "$(OSName) DotNet $(DotNetCoreRuntimeVersion)"
          testResultsFormat: "VSTest"
          mergeTestResults: true
