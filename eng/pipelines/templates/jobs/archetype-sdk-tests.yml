parameters:
  PreSteps: []
  PostSteps: []
  EnvVars: {}
  MaxParallel: 0
  BuildInParallel: true
  TimeoutInMinutes: 60

jobs:
  - job: "Test"
    variables:
      - template: ../variables/globals.yml

    timeoutInMinutes: ${{ parameters.TimeoutInMinutes }}

    strategy:
      maxParallel: ${{ parameters.MaxParallel }}
      matrix:
        Linux:
          OSName: "Linux"
          OSVmImage: "ubuntu-16.04"
          TestTargetFramework: netcoreapp2.1
        Windows_NetCoreApp:
          OSName: "Windows"
          OSVmImage: "windows-2019"
          TestTargetFramework: netcoreapp2.1
        Windows_NetFramework:
          OSName: "Windows"
          OSVmImage: "windows-2019"
          TestTargetFramework: net461
        MacOs:
          OSName: "MacOS"
          OSVmImage: "macOS-10.13"
          TestTargetFramework: netcoreapp2.1
    pool:
      vmImage: "$(OSVmImage)"

    steps:
      - ${{ parameters.PreSteps }}

      - template: eng/pipelines/templates/scripts/verify-agent-os.yml@azure-sdk-tools
        parameters:
          OSName: $(OSName)

      - task: DotNetCoreInstaller@2
        displayName: "Use .NET Core runtime $(DotNetCoreRuntimeVersion)"
        inputs:
          packageType: runtime
          version: "$(DotNetCoreRuntimeVersion)"

      - task: DotNetCoreInstaller@2
        displayName: "Use .NET Core sdk $(DotNetCoreSDKVersion)"
        inputs:
          packageType: sdk
          version: "$(DotNetCoreSDKVersion)"

      # TODO: Remove when eng/New-TestResources.ps1 bootstraps the Az module.
      - pwsh: Install-Module -Name Az -Scope CurrentUser -Force
        displayName: "Install Azure PowerShell module"

        # Chomp the string literal to more easily read and update the New-TestResources parameters.
      - pwsh: >
          $baseName = 't' + (New-Guid).ToString('n').Substring(0, 16);
          eng/New-TestResources.ps1
          -BaseName $baseName
          -ServiceDirectory '${{ parameters.ServiceDirectory }}'
          -TenantId "${env:AZURE_TENANT_ID}"
          -ProvisionerApplicationId "${env:AZURE_CLIENT_ID}"
          -ProvisionerApplicationSecret "${env:AZURE_CLIENT_SECRET}"
          -TestApplicationId "${env:AZURE_CLIENT_ID}"
          -TestApplicationSecret "${env:AZURE_CLIENT_SECRET}"
          -DeleteAfterHours 24
          -Force
          -Verbose
        displayName: "Create test resources"
        env:
          # TODO: Should use separate provisioner and test runner principals.
          AZURE_TENANT_ID: $(aad-azure-sdk-test-tenant-id)
          AZURE_CLIENT_ID: $(aad-azure-sdk-test-client-id)
          AZURE_CLIENT_SECRET: $(aad-azure-sdk-test-client-secret)

      - script: dotnet test eng/service.proj --framework $(TestTargetFramework) --logger "trx;LogFileName=$(TestTargetFramework).trx" --logger:"console;verbosity=normal" /p:ServiceDirectory=${{ parameters.ServiceDirectory }} /p:IncludeSrc=false /p:IncludeSamples=false /p:BuildInParallel=${{ parameters.BuildInParallel }}
        displayName: "Build & Test (all tests for $(TestTargetFramework))"
        env:
          DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
          DOTNET_CLI_TELEMETRY_OPTOUT: 1
          DOTNET_MULTILEVEL_LOOKUP: 0
          AZURE_TEST_MODE: "None"
          ${{ insert }}: ${{ parameters.EnvVars }}

      - pwsh: >
          eng/Remove-TestResources.ps1
          -ResourceGroupName "${env:AZURE_RESOURCEGROUP_NAME}"
          -TenantId "${env:AZURE_TENANT_ID}"
          -ProvisionerApplicationId "${env:AZURE_CLIENT_ID}"
          -ProvisionerApplicationSecret "${env:AZURE_CLIENT_SECRET}"
          -Force
          -Verbose
        displayName: "Clean up test resources"
        condition: ne(variables['AZURE_RESOURCEGROUP_NAME'], '')
        continueOnError: true
        env:
          # TODO: Should use separate provisioner and test runner principals.
          AZURE_TENANT_ID: $(aad-azure-sdk-test-tenant-id)
          AZURE_CLIENT_ID: $(aad-azure-sdk-test-client-id)
          AZURE_CLIENT_SECRET: $(aad-azure-sdk-test-client-secret)

      - task: PublishTestResults@2
        condition: always()
        displayName: "Publish Results ($(TestTargetFramework))"
        inputs:
          testResultsFiles: "**/$(TestTargetFramework)*.trx"
          testRunTitle: "$(OSName) $(TestTargetFramework)"
          testResultsFormat: "VSTest"
          mergeTestResults: true

      - ${{ parameters.PostSteps }}
