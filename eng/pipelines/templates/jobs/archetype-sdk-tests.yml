parameters:
  PreSteps: []
  EnvVars: {}
  MaxParallel: 0

jobs:

  - job: 'Test'
    variables:
    - template: ../variables/globals.yml

    # Increase timeout so Event Hubs tests do not timeout (Windows runs for ~2h 35m, on average due to having two target platforms)
    # https://github.com/Azure/azure-sdk-for-net/issues/5982
    timeoutInMinutes: 175

    strategy:
      maxParallel: ${{ parameters.MaxParallel }}
      matrix:
        Linux:
          OSName: 'Linux'
          OSVmImage: 'ubuntu-16.04'
        Windows:
          OSName: 'Windows'
          OSVmImage: 'vs2017-win2016'
        MacOs:
          OSName: 'MacOS'
          OSVmImage: 'macOS-10.13'

    pool:
      vmImage: '$(OSVmImage)'

    steps:
      - ${{ parameters.PreSteps }}

      - powershell: |
          Invoke-WebRequest -Uri "https://github.com/Azure/azure-sdk-tools/releases/download/sdk-tools_14793/sdk-tools.zip" `
          -OutFile "sdk-tools.zip" | Wait-Process; Expand-Archive -Path "sdk-tools.zip" -DestinationPath "./sdk-tools/"
        workingDirectory: '$(Build.BinariesDirectory)'
        displayName: 'Download Tools Archive From Github Release and Extract it'

      - task: PythonScript@0
        displayName: 'Run VerifyAgentOS script'
        inputs:
          scriptPath: '$(Build.BinariesDirectory)/sdk-tools/scripts/python/verify_agent_os.py'
          arguments: $(OSName)

      - task: DotNetCoreInstaller@2
        displayName: "Use .NET Core runtime $(DotNetCoreRuntimeVersion)"
        inputs:
          packageType: runtime
          version: "$(DotNetCoreRuntimeVersion)"

      - task: DotNetCoreInstaller@2
        displayName: "Use .NET Core sdk $(DotNetCoreSDKVersion)"
        inputs:
          packageType: sdk
          version: "$(DotNetCoreSDKVersion)"

      - script: "dotnet test eng/service.proj --logger trx /p:ServiceDirectory=${{ parameters.ServiceDirectory }}"
        displayName: 'Build & Test (all tests)'
        env:
          DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
          DOTNET_CLI_TELEMETRY_OPTOUT: 1
          DOTNET_MULTILEVEL_LOOKUP: 0
          AZURE_TEST_MODE: "None"
          ${{ insert }}: ${{  parameters.EnvVars }}

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/*.trx'
          testRunTitle: '$(OSName) DotNet $(DotNetCoreRuntimeVersion)'
          testResultsFormat: 'VSTest'
          mergeTestResults: true
