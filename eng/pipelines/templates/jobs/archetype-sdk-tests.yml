parameters:
- name: PreSteps
  type: object
  default: []
- name: PostSteps
  type: object
  default: []
- name: EnvVars
  type: object
  default: {}
- name: MaxParallel
  type: number
  default: 0
- name: BuildInParallel
  type: boolean
  default: true
- name: TimeoutInMinutes
  type: number
  default: 60
- name: Location
  type: string
  default: ''
- name: SubscriptionConfiguration
  type: string
  default: $(sub-config-azure-cloud-test-resources)
- name: ServiceDirectory
  type: string
  default: not-specified

jobs:
  - job: "Test"
    variables:
      - template: ../variables/globals.yml
      - name: SubscriptionConfiguration
        value: ${{ parameters.SubscriptionConfiguration }}
      - name: Location
        value: ${{ parameters.Location }}

    timeoutInMinutes: ${{ parameters.TimeoutInMinutes }}

    strategy:
      maxParallel: ${{ parameters.MaxParallel }}
      matrix:
        Windows_NetCoreApp:
          OSVmImage: "windows-2019"
          TestTargetFramework: netcoreapp2.1
        ${{if eq(variables['Record'], 'true')}}:
          Linux:
            OSVmImage: "ubuntu-18.04"
            TestTargetFramework: netcoreapp2.1
          Windows_NetCoreApp_ProjectReferences:
            OSVmImage: "windows-2019"
            TestTargetFramework: netcoreapp2.1
            ConvertToProjectReferenceOption: /p:UseProjectReferenceToAzureClients=true
          Windows_NetFramework:
            OSVmImage: "windows-2019"
            TestTargetFramework: net461
          Windows_NetFramework_ProjectReferences:
            OSVmImage: "windows-2019"
            TestTargetFramework: net461
            ConvertToProjectReferenceOption: /p:UseProjectReferenceToAzureClients=true
          MacOs:
            OSVmImage: "macOS-10.15"
            TestTargetFramework: netcoreapp2.1
    pool:
      vmImage: "$(OSVmImage)"

    steps:
      - template: /eng/common/pipelines/templates/steps/bypass-local-dns.yml
      
      - ${{ parameters.PreSteps }}

      - template: /eng/common/pipelines/templates/steps/verify-agent-os.yml

      - task: UseDotNet@2
        displayName: "Use .NET Core runtime $(DotNetCoreRuntimeVersion)"
        inputs:
          packageType: runtime
          version: "$(DotNetCoreRuntimeVersion)"

      - task: UseDotNet@2
        displayName: "Use .NET Core sdk $(DotNetCoreSDKVersion)"
        inputs:
          packageType: sdk
          version: "$(DotNetCoreSDKVersion)"

      - template: /eng/common/TestResources/deploy-test-resources.yml
        parameters:
          Location: $(Location)
          ServiceDirectory: '${{ parameters.ServiceDirectory }}'
          SubscriptionConfiguration: $(SubscriptionConfiguration)

      - script: >
          dotnet test eng/service.proj
          --framework $(TestTargetFramework)
          --filter "TestCategory!=Manually"
          --logger "trx"
          --logger:"console;verbosity=normal"
          /p:ServiceDirectory=${{ parameters.ServiceDirectory }}
          /p:IncludeSrc=false /p:IncludeSamples=false
          /p:BuildInParallel=${{ parameters.BuildInParallel }}
          /p:AutoUpdateSessionRecords=true
          $(ConvertToProjectReferenceOption)

        displayName: "Build & Test (all tests for $(TestTargetFramework))"
        env:
          ${{if eq(variables['Record'], 'true')}}:
            AZURE_TEST_MODE: "Record"
          ${{if ne(variables['Record'], 'true')}}:
            AZURE_TEST_MODE: "None"
          DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
          DOTNET_CLI_TELEMETRY_OPTOUT: 1
          DOTNET_MULTILEVEL_LOOKUP: 0
          ${{ insert }}: ${{ parameters.EnvVars }}

      - template: /eng/common/TestResources/remove-test-resources.yml
        parameters:
          ServiceDirectory: '${{ parameters.ServiceDirectory }}'
          SubscriptionConfiguration: $(SubscriptionConfiguration)

      - ${{if eq(variables['Record'], 'true')}}:
        - task: CopyFiles@2
          displayName: "Copy Test Recordings"
          inputs:
            sourceFolder: '$(Build.SourcesDirectory)'
            contents: 'sdk/${{ parameters.ServiceDirectory }}/**/SessionRecords/**/*.json'
            targetFolder: '$(Build.ArtifactStagingDirectory)/SessionRecords'
        - task: PublishBuildArtifacts@1
          displayName: "Publish Test Recordings"
          inputs:
            pathToPublish: '$(Build.ArtifactStagingDirectory)/SessionRecords'
            artifactName: SessionRecords

      - task: PublishTestResults@2
        condition: always()
        displayName: "Publish Results ($(TestTargetFramework))"
        inputs:
          testResultsFiles: "**/*.trx"
          testRunTitle: "$(OSName) $(TestTargetFramework)"
          testResultsFormat: "VSTest"
          mergeTestResults: true

      - ${{ parameters.PostSteps }}
