<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<Import Project="dirs.proj" />
	
  
	<PropertyGroup>
		<LibraryRoot>$(MSBuildThisFileDirectory)</LibraryRoot>
		<LibrarySourceFolder>$(LibraryRoot)src</LibrarySourceFolder>
		<LibraryToolsFolder>$(LibraryRoot)tools</LibraryToolsFolder>
		<LibraryNugetPackageFolder>$(LibraryRoot)\restoredPackages</LibraryNugetPackageFolder>
		<LibraryFriendlyName>Microsoft Azure Management Libraries</LibraryFriendlyName>
		<AuthenticationSolution>src\Authentication\Authentication.sln</AuthenticationSolution>
		<ManagementLibrariesSolution>AzureManagementLibraries.sln</ManagementLibrariesSolution>
		<BinariesFolder>$(LibraryRoot)binaries</BinariesFolder>
		<BuiltPackageOutputDir>$(BinariesFolder)\packages</BuiltPackageOutputDir>
		<DelaySign Condition =" '$(DelaySign)' == '' ">false</DelaySign>
		<CodeSign Condition=" '$(CodeSign)' == '' ">false</CodeSign>
		<Scope Condition=" '$(Scope)' == '' ">All</Scope>
		<NuGetCommand>&quot;$(LibraryToolsFolder)\nuget.exe&quot;</NuGetCommand>
    <NuGetKey Condition=" '$(NuGetKey)' == '' ">1234</NuGetKey>
    <NugetPackageName/>
    <ImportDirectoryBuildTargets>true</ImportDirectoryBuildTargets>
	</PropertyGroup>
  <PropertyGroup>
    <!--OnPremiseBuildTasks is not a good name, but CI server is using that, will update across soon-->
    <CIToolsPath>$(OnPremiseBuildTasks)</CIToolsPath>
    <OnPremiseBuild Condition=" Exists($(OnPremiseBuildTasks)) ">true</OnPremiseBuild>
    <OnPremiseBuild Condition=" ! Exists($(OnPremiseBuildTasks)) ">false</OnPremiseBuild>
  </PropertyGroup>
	
	<PropertyGroup>
		<BuildInParallel>true</BuildInParallel>
	</PropertyGroup>

	<ItemGroup Condition="'$(PublishTestProjects)' == 'false' Or '$(PublishTestProjects)' == ''">
		<LibrariesToBuild Include="$(LibrarySourceFolder)\$(Scope)\*.sln" Condition=" '$(Scope)' != 'all'  " />
		<LibrariesToBuild Include="$(LibrarySourceFolder)\**\*.sln" Exclude="$(LibrarySourceFolder)\KeyVault\Microsoft.Azure.KeyVault.Samples\Microsoft.Azure.KeyVault.Samples.sln" Condition=" '$(Scope)' == 'all'  " />
		<LibraryFxTargetList Include="$(FxTargetList)" />
		<AutoRestLibraryFxTargetList Include="portable;net45" />
		<ClientRuntimeProjects Include="$(LibrarySourceFolder)\ClientRuntime\**\*.xproj"/>
		<ClientRuntimeTests Include="$(LibrarySourceFolder)\ClientRuntime\*.Tests\*.xproj"/>
		<ClientRuntimeRootDir Include="%(ClientRuntimeProjects.RootDir)"/>
	</ItemGroup>

  <PropertyGroup Label="Well Known Properties">
    <ClientRuntimeRootDir>$(LibraryRoot)src\UpgradeVS17\SdkCommon\ClientRuntime</ClientRuntimeRootDir>
    <SdkCommonRootDir>$(LibraryRoot)src\UpgradeVS17\SdkCommon\ClientRuntime</SdkCommonRootDir>
  </PropertyGroup>

    <Target Name="PublishLocal">
			<Exec Command="$(NuGetCommand) push &quot;$(PackageOutputDir)\%(SdkNuGetPackage.Identity).%(SdkNuGetPackage.PackageVersion).nupkg&quot; $(NuGetKey)$(ActualSource)"
			  IgnoreExitCode="true"
			  Condition=" '%(SdkNuGetPackage.Publish)' != 'false' " />

  </Target>
  
  
	<Import Project="tools\buildTargets\common.Build.props"/>
	<Import Project="tools\buildTargets\common.NugetPackage.props" />	
</Project>
