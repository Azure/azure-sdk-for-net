<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorAssetZeroFileCount" xml:space="preserve">
    <value>Can not create Asset with zero files.</value>
  </data>
  <data name="ErrorInvalidAssetType" xml:space="preserve">
    <value>Asset must be created with call from CloudMediaContext.Assets.Create.</value>
  </data>
  <data name="ErrorInvalidJobType" xml:space="preserve">
    <value>Job must be created with call from CloudMediaContext.Jobs.Create.</value>
  </data>
  <data name="ErrorInvalidTaskType" xml:space="preserve">
    <value>Task must be created with call from CloudMediaContext.Jobs.CreateTask.</value>
  </data>
  <data name="ErrorInvalidTaskInput" xml:space="preserve">
    <value>Task input/output must be created with call from CloudMediaContext.Assets or a TaskOutputAsset.</value>
  </data>
  <data name="ErrorInvalidFileInfoType" xml:space="preserve">
    <value>File must be returned from a call to IAsset.Files.</value>
  </data>
  <data name="ErrorInvalidAccessPolicyType" xml:space="preserve">
    <value>Access policy must be created with call from AccessPolicyContext.Create.</value>
  </data>
  <data name="ErrorInvalidLinkType" xml:space="preserve">
    <value>Invalid type to create link.</value>
  </data>
  <data name="ErrorInvalidContentKeyType" xml:space="preserve">
    <value>ContentKey must be returned from a call to IAsset.ContentKeys.</value>
  </data>
  <data name="ErrorInvalidPrimaryFile" xml:space="preserve">
    <value>Primary file not in passed in directory.</value>
  </data>
  <data name="BulkIngestFolderDoesNotExist" xml:space="preserve">
    <value>The folder specified does not exist</value>
    <comment>This message is used when a bulk ingest media context with an output folder does not exist   </comment>
  </data>
  <data name="BulkIngestAssetEncryptionRequiresAnOutputFolderSpecified" xml:space="preserve">
    <value>To encrypt assets on ingest the bulk ingest context must be created with an output folder specified.</value>
  </data>
  <data name="UnknownMediaProcessor" xml:space="preserve">
    <value>Unknown media processor {0}.</value>
  </data>
  <data name="EmptyInputArray" xml:space="preserve">
    <value>Task must have at least one input asset.</value>
  </data>
  <data name="EmptyOutputArray" xml:space="preserve">
    <value>Task must have at least one output asset.</value>
  </data>
  <data name="NoPermanentOutputs" xml:space="preserve">
    <value>Job must have at least one non temporary output asset.</value>
  </data>
  <data name="EmptyTaskArray" xml:space="preserve">
    <value>There must be at least one task.</value>
  </data>
  <data name="ErrorPrimaryFileNotFound" xml:space="preserve">
    <value>The provided primary file was not found - '{0}'</value>
  </data>
  <data name="ErrorCreatingAssetWithEmptyFileName" xml:space="preserve">
    <value>An asset file must not be null or empty.</value>
  </data>
  <data name="ErrorCreatingAssetWithDuplicateFileNames" xml:space="preserve">
    <value>An asset cannot contain files with the same name.</value>
  </data>
  <data name="ErrorInputTypeNotSupported" xml:space="preserve">
    <value>Input type not supported</value>
  </data>
  <data name="ErrorInvalidNumberOfInputs" xml:space="preserve">
    <value>Incorrect number of inputs</value>
  </data>
  <data name="BulkIngestProvidedFileDoesNotExist" xml:space="preserve">
    <value>The specified file '{0}' does not exist.</value>
  </data>
  <data name="ErrorCommonEncryptionKeySize" xml:space="preserve">
    <value>Content Keys for Common Encryption must be 128-bits (16 bytes) in length.</value>
  </data>
  <data name="ErrorArgCannotBeNullOrEmpty" xml:space="preserve">
    <value>The {0} cannot be null or empty.</value>
  </data>
  <data name="ErrorArgCannotBeNull" xml:space="preserve">
    <value>The {0} cannot be null.</value>
  </data>
  <data name="ErrorBlobTooBigToUpload" xml:space="preserve">
    <value>Specified blob is too big to be uploaded.</value>
  </data>
  <data name="ErrorCannotParseInput" xml:space="preserve">
    <value>Input asset cannot be parsed.</value>
  </data>
  <data name="ErrorCannotParseOutout" xml:space="preserve">
    <value>Output asset cannot be parsed.</value>
  </data>
  <data name="ErrorCreateKey_EmptyGuidNotAllowed" xml:space="preserve">
    <value>Guid.Empty is not allowed as a key identifier.</value>
  </data>
  <data name="ErrorCreateKey_KeyMustBe128Bits" xml:space="preserve">
    <value>Content Keys for common encryption must be 128-bits (16 bytes) in length.</value>
  </data>
  <data name="ErrorLocalFilenameIsNullOrEmpty" xml:space="preserve">
    <value>Specified localFileName is null or empty.</value>
  </data>
  <data name="ErrorNoOutputFolderSpecified" xml:space="preserve">
    <value>No output folder specified. The default save changes operation cannot be used without an output folder.</value>
  </data>
  <data name="ErrorTaskBodyMalformed" xml:space="preserve">
    <value>TaskBody is not well-formed. Asset cannot be parsed.</value>
  </data>
  <data name="InvalidLocatorType" xml:space="preserve">
    <value>Invalid locator type.</value>
  </data>
  <data name="ErrorAssetNameNullorEmpty" xml:space="preserve">
    <value>Asset name is null or empty string</value>
  </data>
  <data name="InvalidOperationPublishForPublishedAsset" xml:space="preserve">
    <value>Asset already in a published state</value>
  </data>
  <data name="InvalidOperationUploadFilesForPublishedAsset" xml:space="preserve">
    <value>Files can't be uploaded to asset with Published state.</value>
  </data>
  <data name="CommonEncryptionContentKeyIsMissing" xml:space="preserve">
    <value>Asset creation options indicates that common encryption is used for given asset.Please verify that asset has corresponsing content key.</value>
  </data>
  <data name="StorageEncryptionContentKeyIsMissing" xml:space="preserve">
    <value>Asset creation options indicates that storage encryption is used for given asset.Please verify that asset has corresponsing content key.</value>
  </data>
  <data name="ArgumentExceptionForEmptyFileArray" xml:space="preserve">
    <value>files array need to have at least one element</value>
  </data>
  <data name="InvalidOperationException_CloudMediaContextIsNotInitialized" xml:space="preserve">
    <value>Operation can't be complited since cloudMediaContext is notInitialized. Call method InitCloudMediaContext.</value>
  </data>
  <data name="ErrorAddingNewTaskToSubmittedJob" xml:space="preserve">
    <value>New output can't be added to submitted job task</value>
  </data>
  <data name="NotSupportedFiles" xml:space="preserve">
    <value>Output asset for non submitted job does not contain Files</value>
  </data>
  <data name="NotSupportedLocators" xml:space="preserve">
    <value>Output asset for non submitted job does not contain Locators</value>
  </data>
  <data name="NotSupportedPublish" xml:space="preserve">
    <value>Publish method is not supported for for asset of type OutputAsset</value>
  </data>
  <data name="NotSupportedUploadFilesAsync" xml:space="preserve">
    <value>UploadFilesAsync method is not supported for asset of type OutputAsset</value>
  </data>
  <data name="ErrorReadOnlyCollectionToSubmittedTask" xml:space="preserve">
    <value>Collection {0} is readonly for submitted Task</value>
  </data>
  <data name="NotSupportedFileInfoSave" xml:space="preserve">
    <value>IFileInfo.Save operation is not supported when asset is not in initialized state</value>
  </data>
</root>