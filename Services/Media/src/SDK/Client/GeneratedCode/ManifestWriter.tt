// Copyright 2012 Microsoft Corporation
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ include file="..\..\..\Common\Contracts\DataModel\GeneratedCode\RecordClassesModel.ttinclude" #>
<# IEnumerable<ClassInfo> classes = LoadClassInfo(@"..\..\..\Common\Contracts\DataModel\GeneratedCode").Where(c => c.AvailableInManifest); #>
using System;
using System.Globalization;
using System.Xml;

namespace Microsoft.WindowsAzure.MediaServices.Client.BulkIngest
{
	internal partial class ManifestWriter
	{
	}

<#	foreach(var classInfo in classes) 
	{ #>
	internal partial class <#= classInfo.Name #>Writer : XmlTypeWriterBase<I<#= classInfo.Name #>>
	{
		public <#= classInfo.Name #>Writer() : base("<#= classInfo.Name #>")
	    {
	    }

	    protected override void WriteAttributes(I<#= classInfo.Name #> entity, XmlWriter writer)
	    {
            if(entity == null)
            {
                throw new ArgumentNullException("entity");
            }
            if(writer == null)
            {
                throw new ArgumentNullException("writer");
            }

<#		foreach(var prop in classInfo.Props)
		{
			if(prop.ApiHidden || prop.ExcludeFromManifest) continue;

			if (prop.PrimaryKey)
			{
#>
	            writer.WriteAttributeString("<#= prop.Name #>", entity.Id);
<#			}
			else
			{
#>
	            writer.WriteAttributeString("<#= prop.Name #>", Convert.ToString(entity.<#= prop.Name #>, CultureInfo.InvariantCulture));
<#          }
#>
<#		}
#>
	    }
	}
<#	} #>
}
