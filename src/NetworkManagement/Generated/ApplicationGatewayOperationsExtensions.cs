// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.WindowsAzure.Management.Network;
using Microsoft.WindowsAzure.Management.Network.Models;

namespace Microsoft.WindowsAzure.Management.Network
{
    /// <summary>
    /// The Service Management API includes operations for managing the virtual
    /// networks for your subscription.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157182.aspx for
    /// more information)
    /// </summary>
    public static partial class ApplicationGatewayOperationsExtensions
    {
        /// <summary>
        /// The Add certificate operation adds the ssl certificate to the
        /// application gateway  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <param name='certificateName'>
        /// Required. Certificate name
        /// </param>
        /// <param name='certificate'>
        /// Required. The application gateway ssl certificate
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ApplicationGatewayOperationResponse AddCertificate(this IApplicationGatewayOperations operations, string gatewayName, string certificateName, ApplicationGatewayCertificate certificate)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationGatewayOperations)s).AddCertificateAsync(gatewayName, certificateName, certificate);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Add certificate operation adds the ssl certificate to the
        /// application gateway  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <param name='certificateName'>
        /// Required. Certificate name
        /// </param>
        /// <param name='certificate'>
        /// Required. The application gateway ssl certificate
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ApplicationGatewayOperationResponse> AddCertificateAsync(this IApplicationGatewayOperations operations, string gatewayName, string certificateName, ApplicationGatewayCertificate certificate)
        {
            return operations.AddCertificateAsync(gatewayName, certificateName, certificate, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Add certificate operation adds the ssl certificate to the
        /// application gateway  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <param name='certificateName'>
        /// Required. Certificate name
        /// </param>
        /// <param name='certificate'>
        /// Required. The application gateway ssl certificate
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static GatewayOperationResponse BeginAddCertificate(this IApplicationGatewayOperations operations, string gatewayName, string certificateName, ApplicationGatewayCertificate certificate)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationGatewayOperations)s).BeginAddCertificateAsync(gatewayName, certificateName, certificate);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Add certificate operation adds the ssl certificate to the
        /// application gateway  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <param name='certificateName'>
        /// Required. Certificate name
        /// </param>
        /// <param name='certificate'>
        /// Required. The application gateway ssl certificate
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<GatewayOperationResponse> BeginAddCertificateAsync(this IApplicationGatewayOperations operations, string gatewayName, string certificateName, ApplicationGatewayCertificate certificate)
        {
            return operations.BeginAddCertificateAsync(gatewayName, certificateName, certificate, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Create Application Gateway operation  creates Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin CreateApplication
        /// Gateway request.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static GatewayOperationResponse BeginCreateApplicationGateway(this IApplicationGatewayOperations operations, CreateApplicationGatewayParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationGatewayOperations)s).BeginCreateApplicationGatewayAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Create Application Gateway operation  creates Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin CreateApplication
        /// Gateway request.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<GatewayOperationResponse> BeginCreateApplicationGatewayAsync(this IApplicationGatewayOperations operations, CreateApplicationGatewayParameters parameters)
        {
            return operations.BeginCreateApplicationGatewayAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Delete Application Gateway operation  deletes Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static GatewayOperationResponse BeginDeleteApplicationGateway(this IApplicationGatewayOperations operations, string gatewayName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationGatewayOperations)s).BeginDeleteApplicationGatewayAsync(gatewayName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Delete Application Gateway operation  deletes Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<GatewayOperationResponse> BeginDeleteApplicationGatewayAsync(this IApplicationGatewayOperations operations, string gatewayName)
        {
            return operations.BeginDeleteApplicationGatewayAsync(gatewayName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Delete Application Gateway certificate.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <param name='certificateName'>
        /// Required. The name of the certificate.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static GatewayOperationResponse BeginDeleteApplicationGatewayCertificate(this IApplicationGatewayOperations operations, string gatewayName, string certificateName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationGatewayOperations)s).BeginDeleteApplicationGatewayCertificateAsync(gatewayName, certificateName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Delete Application Gateway certificate.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <param name='certificateName'>
        /// Required. The name of the certificate.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<GatewayOperationResponse> BeginDeleteApplicationGatewayCertificateAsync(this IApplicationGatewayOperations operations, string gatewayName, string certificateName)
        {
            return operations.BeginDeleteApplicationGatewayCertificateAsync(gatewayName, certificateName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Execute Application Gateway Operation executes specified
        /// operation on Application Gateway .  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. Name of the gateway
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Execute Operation
        /// request.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static GatewayOperationResponse BeginExecuteOperation(this IApplicationGatewayOperations operations, string gatewayName, ApplicationGatewayOperation parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationGatewayOperations)s).BeginExecuteOperationAsync(gatewayName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Execute Application Gateway Operation executes specified
        /// operation on Application Gateway .  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. Name of the gateway
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Execute Operation
        /// request.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<GatewayOperationResponse> BeginExecuteOperationAsync(this IApplicationGatewayOperations operations, string gatewayName, ApplicationGatewayOperation parameters)
        {
            return operations.BeginExecuteOperationAsync(gatewayName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Set Application Gateway config operation  sets the
        /// specified config on the application gateway  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <param name='config'>
        /// Required. The Begin Set Application Gateway Config operation  sets
        /// the specified config on the application gateway
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static GatewayOperationResponse BeginSetConfig(this IApplicationGatewayOperations operations, string gatewayName, ApplicationGatewaySetConfiguration config)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationGatewayOperations)s).BeginSetConfigAsync(gatewayName, config);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Set Application Gateway config operation  sets the
        /// specified config on the application gateway  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <param name='config'>
        /// Required. The Begin Set Application Gateway Config operation  sets
        /// the specified config on the application gateway
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<GatewayOperationResponse> BeginSetConfigAsync(this IApplicationGatewayOperations operations, string gatewayName, ApplicationGatewaySetConfiguration config)
        {
            return operations.BeginSetConfigAsync(gatewayName, config, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Update Application Gateway operation  updates Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <param name='updateParameters'>
        /// Required. Parameters supplied to the Begin UpdateApplication
        /// Gateway request.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static GatewayOperationResponse BeginUpdateApplicationGateway(this IApplicationGatewayOperations operations, string gatewayName, UpdateApplicationGatewayParameters updateParameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationGatewayOperations)s).BeginUpdateApplicationGatewayAsync(gatewayName, updateParameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Update Application Gateway operation  updates Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <param name='updateParameters'>
        /// Required. Parameters supplied to the Begin UpdateApplication
        /// Gateway request.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<GatewayOperationResponse> BeginUpdateApplicationGatewayAsync(this IApplicationGatewayOperations operations, string gatewayName, UpdateApplicationGatewayParameters updateParameters)
        {
            return operations.BeginUpdateApplicationGatewayAsync(gatewayName, updateParameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Create Application Gateway operation  creates Application
        /// Gateway with the specified parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to CreateApplication Gateway request.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ApplicationGatewayOperationResponse Create(this IApplicationGatewayOperations operations, CreateApplicationGatewayParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationGatewayOperations)s).CreateAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Create Application Gateway operation  creates Application
        /// Gateway with the specified parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to CreateApplication Gateway request.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ApplicationGatewayOperationResponse> CreateAsync(this IApplicationGatewayOperations operations, CreateApplicationGatewayParameters parameters)
        {
            return operations.CreateAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Delete Application Gateway operation  deletes Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ApplicationGatewayOperationResponse Delete(this IApplicationGatewayOperations operations, string gatewayName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationGatewayOperations)s).DeleteAsync(gatewayName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Delete Application Gateway operation  deletes Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ApplicationGatewayOperationResponse> DeleteAsync(this IApplicationGatewayOperations operations, string gatewayName)
        {
            return operations.DeleteAsync(gatewayName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Delete Application Gateway certificate operation.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <param name='certificateName'>
        /// Required. The name of the certificate.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ApplicationGatewayOperationResponse DeleteCertificate(this IApplicationGatewayOperations operations, string gatewayName, string certificateName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationGatewayOperations)s).DeleteCertificateAsync(gatewayName, certificateName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Delete Application Gateway certificate operation.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <param name='certificateName'>
        /// Required. The name of the certificate.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ApplicationGatewayOperationResponse> DeleteCertificateAsync(this IApplicationGatewayOperations operations, string gatewayName, string certificateName)
        {
            return operations.DeleteCertificateAsync(gatewayName, certificateName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Execute Application Gateway Operation executes specofoed
        /// operation in the Application Gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. Name of the gateway
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to Execute Operation request.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ApplicationGatewayOperationResponse ExecuteOperation(this IApplicationGatewayOperations operations, string gatewayName, ApplicationGatewayOperation parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationGatewayOperations)s).ExecuteOperationAsync(gatewayName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Execute Application Gateway Operation executes specofoed
        /// operation in the Application Gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. Name of the gateway
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to Execute Operation request.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ApplicationGatewayOperationResponse> ExecuteOperationAsync(this IApplicationGatewayOperations operations, string gatewayName, ApplicationGatewayOperation parameters)
        {
            return operations.ExecuteOperationAsync(gatewayName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Application Gateway operation retrieves the application
        /// gateway provisioned for the given subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <returns>
        /// The response body contains details of the application gateway.
        /// </returns>
        public static ApplicationGatewayGetResponse Get(this IApplicationGatewayOperations operations, string gatewayName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationGatewayOperations)s).GetAsync(gatewayName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Application Gateway operation retrieves the application
        /// gateway provisioned for the given subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <returns>
        /// The response body contains details of the application gateway.
        /// </returns>
        public static Task<ApplicationGatewayGetResponse> GetAsync(this IApplicationGatewayOperations operations, string gatewayName)
        {
            return operations.GetAsync(gatewayName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Application Gateway certificate operation retrieves the ssl
        /// certificate provisioned for the given gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <param name='certificateName'>
        /// Required. The name of the certificate.
        /// </param>
        /// <returns>
        /// Response of GetApplicationGatewayCertificate request.
        /// </returns>
        public static ApplicationGatewayGetCertificate GetCertificate(this IApplicationGatewayOperations operations, string gatewayName, string certificateName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationGatewayOperations)s).GetCertificateAsync(gatewayName, certificateName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Application Gateway certificate operation retrieves the ssl
        /// certificate provisioned for the given gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <param name='certificateName'>
        /// Required. The name of the certificate.
        /// </param>
        /// <returns>
        /// Response of GetApplicationGatewayCertificate request.
        /// </returns>
        public static Task<ApplicationGatewayGetCertificate> GetCertificateAsync(this IApplicationGatewayOperations operations, string gatewayName, string certificateName)
        {
            return operations.GetCertificateAsync(gatewayName, certificateName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Application Gateway Configuration operation retrieves the
        /// configuration of the gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. The id  of the gateway.
        /// </param>
        /// <returns>
        /// The response to a GetApplicationGatewayConfiguation  request.
        /// </returns>
        public static ApplicationGatewayGetConfiguration GetConfig(this IApplicationGatewayOperations operations, string gatewayName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationGatewayOperations)s).GetConfigAsync(gatewayName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Application Gateway Configuration operation retrieves the
        /// configuration of the gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. The id  of the gateway.
        /// </param>
        /// <returns>
        /// The response to a GetApplicationGatewayConfiguation  request.
        /// </returns>
        public static Task<ApplicationGatewayGetConfiguration> GetConfigAsync(this IApplicationGatewayOperations operations, string gatewayName)
        {
            return operations.GetConfigAsync(gatewayName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460783.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='requestId'>
        /// Required. The request ID for the request you wish to track. The
        /// request ID is returned in the x-ms-request-id response header for
        /// every request.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ApplicationGatewayOperationResponse GetOperationStatus(this IApplicationGatewayOperations operations, string requestId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationGatewayOperations)s).GetOperationStatusAsync(requestId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460783.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='requestId'>
        /// Required. The request ID for the request you wish to track. The
        /// request ID is returned in the x-ms-request-id response header for
        /// every request.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ApplicationGatewayOperationResponse> GetOperationStatusAsync(this IApplicationGatewayOperations operations, string requestId)
        {
            return operations.GetOperationStatusAsync(requestId, CancellationToken.None);
        }
        
        /// <summary>
        /// The List Application Gateway operation retrieves all application
        /// gateays for the given subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <returns>
        /// The response of ListApplicationGateways request.
        /// </returns>
        public static ApplicationGatewayListResponse List(this IApplicationGatewayOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationGatewayOperations)s).ListAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The List Application Gateway operation retrieves all application
        /// gateays for the given subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <returns>
        /// The response of ListApplicationGateways request.
        /// </returns>
        public static Task<ApplicationGatewayListResponse> ListAsync(this IApplicationGatewayOperations operations)
        {
            return operations.ListAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// The List Application Gateway certificates.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <returns>
        /// The response to a ListApplicationGatewayCertificate request.
        /// </returns>
        public static ApplicationGatewayListCertificate ListCertificate(this IApplicationGatewayOperations operations, string gatewayName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationGatewayOperations)s).ListCertificateAsync(gatewayName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The List Application Gateway certificates.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <returns>
        /// The response to a ListApplicationGatewayCertificate request.
        /// </returns>
        public static Task<ApplicationGatewayListCertificate> ListCertificateAsync(this IApplicationGatewayOperations operations, string gatewayName)
        {
            return operations.ListCertificateAsync(gatewayName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Set Application Gateway Config operation  sets the specified
        /// config on the application gateway  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <param name='config'>
        /// Required. Parameters supplied to Set Application Gateway config
        /// request.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ApplicationGatewayOperationResponse SetConfig(this IApplicationGatewayOperations operations, string gatewayName, ApplicationGatewaySetConfiguration config)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationGatewayOperations)s).SetConfigAsync(gatewayName, config);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Set Application Gateway Config operation  sets the specified
        /// config on the application gateway  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <param name='config'>
        /// Required. Parameters supplied to Set Application Gateway config
        /// request.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ApplicationGatewayOperationResponse> SetConfigAsync(this IApplicationGatewayOperations operations, string gatewayName, ApplicationGatewaySetConfiguration config)
        {
            return operations.SetConfigAsync(gatewayName, config, CancellationToken.None);
        }
        
        /// <summary>
        /// The Update Application Gateway operation  updates Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <param name='updateParameters'>
        /// Required. Parameters supplied to UpdateApplication Gateway request.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ApplicationGatewayOperationResponse Update(this IApplicationGatewayOperations operations, string gatewayName, UpdateApplicationGatewayParameters updateParameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IApplicationGatewayOperations)s).UpdateAsync(gatewayName, updateParameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Update Application Gateway operation  updates Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IApplicationGatewayOperations.
        /// </param>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <param name='updateParameters'>
        /// Required. Parameters supplied to UpdateApplication Gateway request.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ApplicationGatewayOperationResponse> UpdateAsync(this IApplicationGatewayOperations operations, string gatewayName, UpdateApplicationGatewayParameters updateParameters)
        {
            return operations.UpdateAsync(gatewayName, updateParameters, CancellationToken.None);
        }
    }
}
