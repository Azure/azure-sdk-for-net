// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.Management.TrafficManager;
using Microsoft.WindowsAzure.Management.TrafficManager.Models;

namespace Microsoft.WindowsAzure.Management.TrafficManager
{
    /// <summary>
    /// The Traffic Manager API includes operations for managing definitions
    /// for a specified profile.
    /// </summary>
    internal partial class DefinitionOperations : IServiceOperations<TrafficManagerClient>, IDefinitionOperations
    {
        /// <summary>
        /// Initializes a new instance of the DefinitionOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal DefinitionOperations(TrafficManagerClient client)
        {
            this._client = client;
        }
        
        private TrafficManagerClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.TrafficManager.TrafficManagerClient.
        /// </summary>
        public TrafficManagerClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Creates a new definition for a specified profile.  (see
        /// http://msdn.microsoft.com/en-us/library/hh758254.aspx for more
        /// information)
        /// </summary>
        /// <param name='profileName'>
        /// The name of the profile to create a new definition for.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Definition operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> CreateAsync(string profileName, DefinitionCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (profileName == null)
            {
                throw new ArgumentNullException("profileName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.DnsOptions == null)
            {
                throw new ArgumentNullException("parameters.DnsOptions");
            }
            if (parameters.Monitors == null)
            {
                throw new ArgumentNullException("parameters.Monitors");
            }
            if (parameters.Policy == null)
            {
                throw new ArgumentNullException("parameters.Policy");
            }
            if (parameters.Policy.Endpoints == null)
            {
                throw new ArgumentNullException("parameters.Policy.Endpoints");
            }
            if (parameters.Policy.Endpoints != null)
            {
                foreach (DefinitionEndpointCreateParameters endpointsParameterItem in parameters.Policy.Endpoints)
                {
                    if (endpointsParameterItem.DomainName == null)
                    {
                        throw new ArgumentNullException("parameters.Policy.Endpoints.DomainName");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("profileName", profileName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WATM/profiles/" + profileName + "/definitions";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2011-10-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement definitionElement = new XElement(XName.Get("Definition", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(definitionElement);
                
                XElement dnsOptionsElement = new XElement(XName.Get("DnsOptions", "http://schemas.microsoft.com/windowsazure"));
                definitionElement.Add(dnsOptionsElement);
                
                XElement timeToLiveInSecondsElement = new XElement(XName.Get("TimeToLiveInSeconds", "http://schemas.microsoft.com/windowsazure"));
                timeToLiveInSecondsElement.Value = parameters.DnsOptions.TimeToLiveInSeconds.ToString();
                dnsOptionsElement.Add(timeToLiveInSecondsElement);
                
                XElement monitorsSequenceElement = new XElement(XName.Get("Monitors", "http://schemas.microsoft.com/windowsazure"));
                foreach (DefinitionMonitor monitorsItem in parameters.Monitors)
                {
                    XElement monitorElement = new XElement(XName.Get("Monitor", "http://schemas.microsoft.com/windowsazure"));
                    monitorsSequenceElement.Add(monitorElement);
                    
                    XElement intervalInSecondsElement = new XElement(XName.Get("IntervalInSeconds", "http://schemas.microsoft.com/windowsazure"));
                    intervalInSecondsElement.Value = monitorsItem.IntervalInSeconds.ToString();
                    monitorElement.Add(intervalInSecondsElement);
                    
                    XElement timeoutInSecondsElement = new XElement(XName.Get("TimeoutInSeconds", "http://schemas.microsoft.com/windowsazure"));
                    timeoutInSecondsElement.Value = monitorsItem.TimeoutInSeconds.ToString();
                    monitorElement.Add(timeoutInSecondsElement);
                    
                    XElement toleratedNumberOfFailuresElement = new XElement(XName.Get("ToleratedNumberOfFailures", "http://schemas.microsoft.com/windowsazure"));
                    toleratedNumberOfFailuresElement.Value = monitorsItem.ToleratedNumberOfFailures.ToString();
                    monitorElement.Add(toleratedNumberOfFailuresElement);
                    
                    XElement protocolElement = new XElement(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                    protocolElement.Value = TrafficManagerClient.DefinitionMonitorProtocolToString(monitorsItem.Protocol);
                    monitorElement.Add(protocolElement);
                    
                    XElement portElement = new XElement(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                    portElement.Value = monitorsItem.Port.ToString();
                    monitorElement.Add(portElement);
                    
                    if (monitorsItem.HttpOptions != null)
                    {
                        XElement httpOptionsElement = new XElement(XName.Get("HttpOptions", "http://schemas.microsoft.com/windowsazure"));
                        monitorElement.Add(httpOptionsElement);
                        
                        if (monitorsItem.HttpOptions.Verb != null)
                        {
                            XElement verbElement = new XElement(XName.Get("Verb", "http://schemas.microsoft.com/windowsazure"));
                            verbElement.Value = "GET";
                            httpOptionsElement.Add(verbElement);
                        }
                        
                        if (monitorsItem.HttpOptions.RelativePath != null)
                        {
                            XElement relativePathElement = new XElement(XName.Get("RelativePath", "http://schemas.microsoft.com/windowsazure"));
                            relativePathElement.Value = monitorsItem.HttpOptions.RelativePath;
                            httpOptionsElement.Add(relativePathElement);
                        }
                        
                        XElement expectedStatusCodeElement = new XElement(XName.Get("ExpectedStatusCode", "http://schemas.microsoft.com/windowsazure"));
                        expectedStatusCodeElement.Value = "200";
                        httpOptionsElement.Add(expectedStatusCodeElement);
                    }
                }
                definitionElement.Add(monitorsSequenceElement);
                
                XElement policyElement = new XElement(XName.Get("Policy", "http://schemas.microsoft.com/windowsazure"));
                definitionElement.Add(policyElement);
                
                XElement loadBalancingMethodElement = new XElement(XName.Get("LoadBalancingMethod", "http://schemas.microsoft.com/windowsazure"));
                loadBalancingMethodElement.Value = parameters.Policy.LoadBalancingMethod.ToString();
                policyElement.Add(loadBalancingMethodElement);
                
                XElement endpointsSequenceElement = new XElement(XName.Get("Endpoints", "http://schemas.microsoft.com/windowsazure"));
                foreach (DefinitionEndpointCreateParameters endpointsItem in parameters.Policy.Endpoints)
                {
                    XElement endpointElement = new XElement(XName.Get("Endpoint", "http://schemas.microsoft.com/windowsazure"));
                    endpointsSequenceElement.Add(endpointElement);
                    
                    XElement domainNameElement = new XElement(XName.Get("DomainName", "http://schemas.microsoft.com/windowsazure"));
                    domainNameElement.Value = endpointsItem.DomainName;
                    endpointElement.Add(domainNameElement);
                    
                    XElement statusElement = new XElement(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                    statusElement.Value = endpointsItem.Status.ToString();
                    endpointElement.Add(statusElement);
                }
                policyElement.Add(endpointsSequenceElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns an existing profile definition.  (see
        /// http://msdn.microsoft.com/en-us/library/hh758248.aspx for more
        /// information)
        /// </summary>
        /// <param name='profileName'>
        /// The name of the profile to get definition from.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Definition operation response.
        /// </returns>
        public async Task<DefinitionGetResponse> GetAsync(string profileName, CancellationToken cancellationToken)
        {
            // Validate
            if (profileName == null)
            {
                throw new ArgumentNullException("profileName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("profileName", profileName);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WATM/profiles/" + profileName + "/definitions/1";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2011-10-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DefinitionGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new DefinitionGetResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement definitionElement = responseDoc.Element(XName.Get("Definition", "http://schemas.microsoft.com/windowsazure"));
                    if (definitionElement != null)
                    {
                        Definition definitionInstance = new Definition();
                        result.Definition = definitionInstance;
                        
                        XElement dnsOptionsElement = definitionElement.Element(XName.Get("DnsOptions", "http://schemas.microsoft.com/windowsazure"));
                        if (dnsOptionsElement != null)
                        {
                            DefinitionDnsOptions dnsOptionsInstance = new DefinitionDnsOptions();
                            definitionInstance.DnsOptions = dnsOptionsInstance;
                            
                            XElement timeToLiveInSecondsElement = dnsOptionsElement.Element(XName.Get("TimeToLiveInSeconds", "http://schemas.microsoft.com/windowsazure"));
                            if (timeToLiveInSecondsElement != null)
                            {
                                int timeToLiveInSecondsInstance = int.Parse(timeToLiveInSecondsElement.Value, CultureInfo.InvariantCulture);
                                dnsOptionsInstance.TimeToLiveInSeconds = timeToLiveInSecondsInstance;
                            }
                        }
                        
                        XElement statusElement = definitionElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                        if (statusElement != null)
                        {
                            ProfileDefinitionStatus statusInstance = (ProfileDefinitionStatus)Enum.Parse(typeof(ProfileDefinitionStatus), statusElement.Value, false);
                            definitionInstance.Status = statusInstance;
                        }
                        
                        XElement versionElement = definitionElement.Element(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                        if (versionElement != null)
                        {
                            int versionInstance = int.Parse(versionElement.Value, CultureInfo.InvariantCulture);
                            definitionInstance.Version = versionInstance;
                        }
                        
                        XElement monitorsSequenceElement = definitionElement.Element(XName.Get("Monitors", "http://schemas.microsoft.com/windowsazure"));
                        if (monitorsSequenceElement != null)
                        {
                            foreach (XElement monitorsElement in monitorsSequenceElement.Elements(XName.Get("Monitor", "http://schemas.microsoft.com/windowsazure")))
                            {
                                DefinitionMonitor monitorInstance = new DefinitionMonitor();
                                definitionInstance.Monitors.Add(monitorInstance);
                                
                                XElement intervalInSecondsElement = monitorsElement.Element(XName.Get("IntervalInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                if (intervalInSecondsElement != null)
                                {
                                    int intervalInSecondsInstance = int.Parse(intervalInSecondsElement.Value, CultureInfo.InvariantCulture);
                                    monitorInstance.IntervalInSeconds = intervalInSecondsInstance;
                                }
                                
                                XElement timeoutInSecondsElement = monitorsElement.Element(XName.Get("TimeoutInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                if (timeoutInSecondsElement != null)
                                {
                                    int timeoutInSecondsInstance = int.Parse(timeoutInSecondsElement.Value, CultureInfo.InvariantCulture);
                                    monitorInstance.TimeoutInSeconds = timeoutInSecondsInstance;
                                }
                                
                                XElement toleratedNumberOfFailuresElement = monitorsElement.Element(XName.Get("ToleratedNumberOfFailures", "http://schemas.microsoft.com/windowsazure"));
                                if (toleratedNumberOfFailuresElement != null)
                                {
                                    int toleratedNumberOfFailuresInstance = int.Parse(toleratedNumberOfFailuresElement.Value, CultureInfo.InvariantCulture);
                                    monitorInstance.ToleratedNumberOfFailures = toleratedNumberOfFailuresInstance;
                                }
                                
                                XElement protocolElement = monitorsElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                if (protocolElement != null)
                                {
                                    DefinitionMonitorProtocol protocolInstance = TrafficManagerClient.ParseDefinitionMonitorProtocol(protocolElement.Value);
                                    monitorInstance.Protocol = protocolInstance;
                                }
                                
                                XElement portElement = monitorsElement.Element(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                if (portElement != null)
                                {
                                    int portInstance = int.Parse(portElement.Value, CultureInfo.InvariantCulture);
                                    monitorInstance.Port = portInstance;
                                }
                                
                                XElement httpOptionsElement = monitorsElement.Element(XName.Get("HttpOptions", "http://schemas.microsoft.com/windowsazure"));
                                if (httpOptionsElement != null)
                                {
                                    DefinitionMonitorHTTPOptions httpOptionsInstance = new DefinitionMonitorHTTPOptions();
                                    monitorInstance.HttpOptions = httpOptionsInstance;
                                    
                                    XElement verbElement = httpOptionsElement.Element(XName.Get("Verb", "http://schemas.microsoft.com/windowsazure"));
                                    if (verbElement != null)
                                    {
                                        string verbInstance = verbElement.Value;
                                        httpOptionsInstance.Verb = verbInstance;
                                    }
                                    
                                    XElement relativePathElement = httpOptionsElement.Element(XName.Get("RelativePath", "http://schemas.microsoft.com/windowsazure"));
                                    if (relativePathElement != null)
                                    {
                                        string relativePathInstance = relativePathElement.Value;
                                        httpOptionsInstance.RelativePath = relativePathInstance;
                                    }
                                    
                                    XElement expectedStatusCodeElement = httpOptionsElement.Element(XName.Get("ExpectedStatusCode", "http://schemas.microsoft.com/windowsazure"));
                                    if (expectedStatusCodeElement != null)
                                    {
                                        int expectedStatusCodeInstance = int.Parse(expectedStatusCodeElement.Value, CultureInfo.InvariantCulture);
                                        httpOptionsInstance.ExpectedStatusCode = expectedStatusCodeInstance;
                                    }
                                }
                            }
                        }
                        
                        XElement policyElement = definitionElement.Element(XName.Get("Policy", "http://schemas.microsoft.com/windowsazure"));
                        if (policyElement != null)
                        {
                            DefinitionPolicyResponse policyInstance = new DefinitionPolicyResponse();
                            definitionInstance.Policy = policyInstance;
                            
                            XElement loadBalancingMethodElement = policyElement.Element(XName.Get("LoadBalancingMethod", "http://schemas.microsoft.com/windowsazure"));
                            if (loadBalancingMethodElement != null)
                            {
                                LoadBalancingMethod loadBalancingMethodInstance = (LoadBalancingMethod)Enum.Parse(typeof(LoadBalancingMethod), loadBalancingMethodElement.Value, false);
                                policyInstance.LoadBalancingMethod = loadBalancingMethodInstance;
                            }
                            
                            XElement endpointsSequenceElement = policyElement.Element(XName.Get("Endpoints", "http://schemas.microsoft.com/windowsazure"));
                            if (endpointsSequenceElement != null)
                            {
                                foreach (XElement endpointsElement in endpointsSequenceElement.Elements(XName.Get("Endpoint", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    DefinitionEndpointResponse endpointInstance = new DefinitionEndpointResponse();
                                    policyInstance.Endpoints.Add(endpointInstance);
                                    
                                    XElement domainNameElement = endpointsElement.Element(XName.Get("DomainName", "http://schemas.microsoft.com/windowsazure"));
                                    if (domainNameElement != null)
                                    {
                                        string domainNameInstance = domainNameElement.Value;
                                        endpointInstance.DomainName = domainNameInstance;
                                    }
                                    
                                    XElement statusElement2 = endpointsElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                                    if (statusElement2 != null)
                                    {
                                        EndpointStatus statusInstance2 = (EndpointStatus)Enum.Parse(typeof(EndpointStatus), statusElement2.Value, false);
                                        endpointInstance.Status = statusInstance2;
                                    }
                                    
                                    XElement monitorStatusElement = endpointsElement.Element(XName.Get("MonitorStatus", "http://schemas.microsoft.com/windowsazure"));
                                    if (monitorStatusElement != null)
                                    {
                                        DefinitionEndpointMonitorStatus monitorStatusInstance = (DefinitionEndpointMonitorStatus)Enum.Parse(typeof(DefinitionEndpointMonitorStatus), monitorStatusElement.Value, false);
                                        endpointInstance.MonitorStatus = monitorStatusInstance;
                                    }
                                }
                            }
                            
                            XElement monitorStatusElement2 = policyElement.Element(XName.Get("MonitorStatus", "http://schemas.microsoft.com/windowsazure"));
                            if (monitorStatusElement2 != null)
                            {
                                DefinitionPolicyMonitorStatus monitorStatusInstance2 = (DefinitionPolicyMonitorStatus)Enum.Parse(typeof(DefinitionPolicyMonitorStatus), monitorStatusElement2.Value, false);
                                policyInstance.MonitorStatus = monitorStatusInstance2;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns all definitions of a profile  (see
        /// http://msdn.microsoft.com/en-us/library/hh758248.aspx for more
        /// information)
        /// </summary>
        /// <param name='profileName'>
        /// The name of the profile to return all definitions
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Definitions operation response.
        /// </returns>
        public async Task<DefinitionsListResponse> ListAsync(string profileName, CancellationToken cancellationToken)
        {
            // Validate
            if (profileName == null)
            {
                throw new ArgumentNullException("profileName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("profileName", profileName);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WATM/profiles/" + profileName + "/definitions";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2011-10-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DefinitionsListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new DefinitionsListResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement definitionsSequenceElement = responseDoc.Element(XName.Get("Definitions", "http://schemas.microsoft.com/windowsazure"));
                    if (definitionsSequenceElement != null)
                    {
                        foreach (XElement definitionsElement in definitionsSequenceElement.Elements(XName.Get("Definition", "http://schemas.microsoft.com/windowsazure")))
                        {
                            Definition definitionInstance = new Definition();
                            result.Definitions.Add(definitionInstance);
                            
                            XElement dnsOptionsElement = definitionsElement.Element(XName.Get("DnsOptions", "http://schemas.microsoft.com/windowsazure"));
                            if (dnsOptionsElement != null)
                            {
                                DefinitionDnsOptions dnsOptionsInstance = new DefinitionDnsOptions();
                                definitionInstance.DnsOptions = dnsOptionsInstance;
                                
                                XElement timeToLiveInSecondsElement = dnsOptionsElement.Element(XName.Get("TimeToLiveInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                if (timeToLiveInSecondsElement != null)
                                {
                                    int timeToLiveInSecondsInstance = int.Parse(timeToLiveInSecondsElement.Value, CultureInfo.InvariantCulture);
                                    dnsOptionsInstance.TimeToLiveInSeconds = timeToLiveInSecondsInstance;
                                }
                            }
                            
                            XElement statusElement = definitionsElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                            if (statusElement != null)
                            {
                                ProfileDefinitionStatus statusInstance = (ProfileDefinitionStatus)Enum.Parse(typeof(ProfileDefinitionStatus), statusElement.Value, false);
                                definitionInstance.Status = statusInstance;
                            }
                            
                            XElement versionElement = definitionsElement.Element(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                            if (versionElement != null)
                            {
                                int versionInstance = int.Parse(versionElement.Value, CultureInfo.InvariantCulture);
                                definitionInstance.Version = versionInstance;
                            }
                            
                            XElement monitorsSequenceElement = definitionsElement.Element(XName.Get("Monitors", "http://schemas.microsoft.com/windowsazure"));
                            if (monitorsSequenceElement != null)
                            {
                                foreach (XElement monitorsElement in monitorsSequenceElement.Elements(XName.Get("Monitor", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    DefinitionMonitor monitorInstance = new DefinitionMonitor();
                                    definitionInstance.Monitors.Add(monitorInstance);
                                    
                                    XElement intervalInSecondsElement = monitorsElement.Element(XName.Get("IntervalInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                    if (intervalInSecondsElement != null)
                                    {
                                        int intervalInSecondsInstance = int.Parse(intervalInSecondsElement.Value, CultureInfo.InvariantCulture);
                                        monitorInstance.IntervalInSeconds = intervalInSecondsInstance;
                                    }
                                    
                                    XElement timeoutInSecondsElement = monitorsElement.Element(XName.Get("TimeoutInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                    if (timeoutInSecondsElement != null)
                                    {
                                        int timeoutInSecondsInstance = int.Parse(timeoutInSecondsElement.Value, CultureInfo.InvariantCulture);
                                        monitorInstance.TimeoutInSeconds = timeoutInSecondsInstance;
                                    }
                                    
                                    XElement toleratedNumberOfFailuresElement = monitorsElement.Element(XName.Get("ToleratedNumberOfFailures", "http://schemas.microsoft.com/windowsazure"));
                                    if (toleratedNumberOfFailuresElement != null)
                                    {
                                        int toleratedNumberOfFailuresInstance = int.Parse(toleratedNumberOfFailuresElement.Value, CultureInfo.InvariantCulture);
                                        monitorInstance.ToleratedNumberOfFailures = toleratedNumberOfFailuresInstance;
                                    }
                                    
                                    XElement protocolElement = monitorsElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                    if (protocolElement != null)
                                    {
                                        DefinitionMonitorProtocol protocolInstance = TrafficManagerClient.ParseDefinitionMonitorProtocol(protocolElement.Value);
                                        monitorInstance.Protocol = protocolInstance;
                                    }
                                    
                                    XElement portElement = monitorsElement.Element(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                    if (portElement != null)
                                    {
                                        int portInstance = int.Parse(portElement.Value, CultureInfo.InvariantCulture);
                                        monitorInstance.Port = portInstance;
                                    }
                                    
                                    XElement httpOptionsElement = monitorsElement.Element(XName.Get("HttpOptions", "http://schemas.microsoft.com/windowsazure"));
                                    if (httpOptionsElement != null)
                                    {
                                        DefinitionMonitorHTTPOptions httpOptionsInstance = new DefinitionMonitorHTTPOptions();
                                        monitorInstance.HttpOptions = httpOptionsInstance;
                                        
                                        XElement verbElement = httpOptionsElement.Element(XName.Get("Verb", "http://schemas.microsoft.com/windowsazure"));
                                        if (verbElement != null)
                                        {
                                            string verbInstance = verbElement.Value;
                                            httpOptionsInstance.Verb = verbInstance;
                                        }
                                        
                                        XElement relativePathElement = httpOptionsElement.Element(XName.Get("RelativePath", "http://schemas.microsoft.com/windowsazure"));
                                        if (relativePathElement != null)
                                        {
                                            string relativePathInstance = relativePathElement.Value;
                                            httpOptionsInstance.RelativePath = relativePathInstance;
                                        }
                                        
                                        XElement expectedStatusCodeElement = httpOptionsElement.Element(XName.Get("ExpectedStatusCode", "http://schemas.microsoft.com/windowsazure"));
                                        if (expectedStatusCodeElement != null)
                                        {
                                            int expectedStatusCodeInstance = int.Parse(expectedStatusCodeElement.Value, CultureInfo.InvariantCulture);
                                            httpOptionsInstance.ExpectedStatusCode = expectedStatusCodeInstance;
                                        }
                                    }
                                }
                            }
                            
                            XElement policyElement = definitionsElement.Element(XName.Get("Policy", "http://schemas.microsoft.com/windowsazure"));
                            if (policyElement != null)
                            {
                                DefinitionPolicyResponse policyInstance = new DefinitionPolicyResponse();
                                definitionInstance.Policy = policyInstance;
                                
                                XElement loadBalancingMethodElement = policyElement.Element(XName.Get("LoadBalancingMethod", "http://schemas.microsoft.com/windowsazure"));
                                if (loadBalancingMethodElement != null)
                                {
                                    LoadBalancingMethod loadBalancingMethodInstance = (LoadBalancingMethod)Enum.Parse(typeof(LoadBalancingMethod), loadBalancingMethodElement.Value, false);
                                    policyInstance.LoadBalancingMethod = loadBalancingMethodInstance;
                                }
                                
                                XElement endpointsSequenceElement = policyElement.Element(XName.Get("Endpoints", "http://schemas.microsoft.com/windowsazure"));
                                if (endpointsSequenceElement != null)
                                {
                                    foreach (XElement endpointsElement in endpointsSequenceElement.Elements(XName.Get("Endpoint", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        DefinitionEndpointResponse endpointInstance = new DefinitionEndpointResponse();
                                        policyInstance.Endpoints.Add(endpointInstance);
                                        
                                        XElement domainNameElement = endpointsElement.Element(XName.Get("DomainName", "http://schemas.microsoft.com/windowsazure"));
                                        if (domainNameElement != null)
                                        {
                                            string domainNameInstance = domainNameElement.Value;
                                            endpointInstance.DomainName = domainNameInstance;
                                        }
                                        
                                        XElement statusElement2 = endpointsElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                                        if (statusElement2 != null)
                                        {
                                            EndpointStatus statusInstance2 = (EndpointStatus)Enum.Parse(typeof(EndpointStatus), statusElement2.Value, false);
                                            endpointInstance.Status = statusInstance2;
                                        }
                                        
                                        XElement monitorStatusElement = endpointsElement.Element(XName.Get("MonitorStatus", "http://schemas.microsoft.com/windowsazure"));
                                        if (monitorStatusElement != null)
                                        {
                                            DefinitionEndpointMonitorStatus monitorStatusInstance = (DefinitionEndpointMonitorStatus)Enum.Parse(typeof(DefinitionEndpointMonitorStatus), monitorStatusElement.Value, false);
                                            endpointInstance.MonitorStatus = monitorStatusInstance;
                                        }
                                    }
                                }
                                
                                XElement monitorStatusElement2 = policyElement.Element(XName.Get("MonitorStatus", "http://schemas.microsoft.com/windowsazure"));
                                if (monitorStatusElement2 != null)
                                {
                                    DefinitionPolicyMonitorStatus monitorStatusInstance2 = (DefinitionPolicyMonitorStatus)Enum.Parse(typeof(DefinitionPolicyMonitorStatus), monitorStatusElement2.Value, false);
                                    policyInstance.MonitorStatus = monitorStatusInstance2;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
