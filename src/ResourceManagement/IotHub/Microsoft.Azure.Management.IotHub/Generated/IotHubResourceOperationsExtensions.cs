// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.IotHub
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for IotHubResourceOperations.
    /// </summary>
    public static partial class IotHubResourceOperationsExtensions
    {
            /// <summary>
            /// Get an IotHub.
            /// </summary>
            /// Get an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            public static IotHubDescription Get(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).GetAsync(resourceGroupName, resourceName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an IotHub.
            /// </summary>
            /// Get an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotHubDescription> GetAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update an IotHub.
            /// </summary>
            /// Create or update an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='iotHubDescription'>
            /// The Iot hub description.
            /// </param>
            public static IotHubDescription CreateOrUpdate(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, IotHubDescription iotHubDescription)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).CreateOrUpdateAsync(resourceGroupName, resourceName, iotHubDescription), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an IotHub.
            /// </summary>
            /// Create or update an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='iotHubDescription'>
            /// The Iot hub description.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotHubDescription> CreateOrUpdateAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, IotHubDescription iotHubDescription, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, iotHubDescription, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update an IotHub.
            /// </summary>
            /// Create or update an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='iotHubDescription'>
            /// The Iot hub description.
            /// </param>
            public static IotHubDescription BeginCreateOrUpdate(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, IotHubDescription iotHubDescription)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).BeginCreateOrUpdateAsync(resourceGroupName, resourceName, iotHubDescription), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an IotHub.
            /// </summary>
            /// Create or update an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='iotHubDescription'>
            /// The Iot hub description.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotHubDescription> BeginCreateOrUpdateAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, IotHubDescription iotHubDescription, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, iotHubDescription, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an IotHub.
            /// </summary>
            /// Delete an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            public static IotHubDescription Delete(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).DeleteAsync(resourceGroupName, resourceName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an IotHub.
            /// </summary>
            /// Delete an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotHubDescription> DeleteAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an IotHub.
            /// </summary>
            /// Delete an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            public static IotHubDescription BeginDelete(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).BeginDeleteAsync(resourceGroupName, resourceName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an IotHub.
            /// </summary>
            /// Delete an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotHubDescription> BeginDeleteAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all IotHubs in a subscription.
            /// </summary>
            /// Get all IotHubs in a subscription.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<IotHubDescription> ListBySubscription(this IIotHubResourceOperations operations)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).ListBySubscriptionAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all IotHubs in a subscription.
            /// </summary>
            /// Get all IotHubs in a subscription.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IotHubDescription>> ListBySubscriptionAsync(this IIotHubResourceOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all IotHubs in a Resourcegroup.
            /// </summary>
            /// Get all IotHubs in a Resource group.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            public static IPage<IotHubDescription> ListByResourceGroup(this IIotHubResourceOperations operations, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).ListByResourceGroupAsync(resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all IotHubs in a Resourcegroup.
            /// </summary>
            /// Get all IotHubs in a Resource group.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IotHubDescription>> ListByResourceGroupAsync(this IIotHubResourceOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get IotHub Stats.
            /// </summary>
            /// Get IotHub Stats.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            public static RegistryStatistics GetStats(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).GetStatsAsync(resourceGroupName, resourceName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get IotHub Stats.
            /// </summary>
            /// Get IotHub Stats.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RegistryStatistics> GetStatsAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStatsWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Valid Skus.
            /// </summary>
            /// Get Valid Skus.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            public static IPage<IotHubSkuDescription> GetValidSkus(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).GetValidSkusAsync(resourceGroupName, resourceName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Valid Skus.
            /// </summary>
            /// Get Valid Skus.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IotHubSkuDescription>> GetValidSkusAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetValidSkusWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get EventHub Consumer Groups for an IotHub.
            /// </summary>
            /// Get EventHub Consumer Groups for an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='eventHubEndpointName'>
            /// The name of the event hub endpoint.
            /// </param>
            public static IPage<string> ListEventHubConsumerGroups(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string eventHubEndpointName)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).ListEventHubConsumerGroupsAsync(resourceGroupName, resourceName, eventHubEndpointName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get EventHub Consumer Groups for an IotHub.
            /// </summary>
            /// Get EventHub Consumer Groups for an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='eventHubEndpointName'>
            /// The name of the event hub endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<string>> ListEventHubConsumerGroupsAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string eventHubEndpointName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListEventHubConsumerGroupsWithHttpMessagesAsync(resourceGroupName, resourceName, eventHubEndpointName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get EventHub Consumer Group for an IotHub.
            /// </summary>
            /// Get EventHub Consumer Group for an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='eventHubEndpointName'>
            /// The name of the event hub endpoint.
            /// </param>
            /// <param name='name'>
            /// The name of the consumer group.
            /// </param>
            public static EventHubConsumerGroupInfo GetEventHubConsumerGroup(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string eventHubEndpointName, string name)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).GetEventHubConsumerGroupAsync(resourceGroupName, resourceName, eventHubEndpointName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get EventHub Consumer Group for an IotHub.
            /// </summary>
            /// Get EventHub Consumer Group for an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='eventHubEndpointName'>
            /// The name of the event hub endpoint.
            /// </param>
            /// <param name='name'>
            /// The name of the consumer group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventHubConsumerGroupInfo> GetEventHubConsumerGroupAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string eventHubEndpointName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEventHubConsumerGroupWithHttpMessagesAsync(resourceGroupName, resourceName, eventHubEndpointName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add an EventHub Consumer Group to an IotHub.
            /// </summary>
            /// Add an EventHub Consumer Group to an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='eventHubEndpointName'>
            /// The name of the event hub endpoint.
            /// </param>
            /// <param name='name'>
            /// The name of the consumer group.
            /// </param>
            public static EventHubConsumerGroupInfo CreateEventHubConsumerGroup(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string eventHubEndpointName, string name)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).CreateEventHubConsumerGroupAsync(resourceGroupName, resourceName, eventHubEndpointName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add an EventHub Consumer Group to an IotHub.
            /// </summary>
            /// Add an EventHub Consumer Group to an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='eventHubEndpointName'>
            /// The name of the event hub endpoint.
            /// </param>
            /// <param name='name'>
            /// The name of the consumer group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventHubConsumerGroupInfo> CreateEventHubConsumerGroupAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string eventHubEndpointName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateEventHubConsumerGroupWithHttpMessagesAsync(resourceGroupName, resourceName, eventHubEndpointName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete EventHub Consumer Group for an IotHub.
            /// </summary>
            /// Delete EventHub Consumer Group for an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='eventHubEndpointName'>
            /// The name of the event hub endpoint.
            /// </param>
            /// <param name='name'>
            /// The name of the consumer group.
            /// </param>
            public static void DeleteEventHubConsumerGroup(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string eventHubEndpointName, string name)
            {
                Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).DeleteEventHubConsumerGroupAsync(resourceGroupName, resourceName, eventHubEndpointName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete EventHub Consumer Group for an IotHub.
            /// </summary>
            /// Delete EventHub Consumer Group for an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='eventHubEndpointName'>
            /// The name of the event hub endpoint.
            /// </param>
            /// <param name='name'>
            /// The name of the consumer group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteEventHubConsumerGroupAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string eventHubEndpointName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteEventHubConsumerGroupWithHttpMessagesAsync(resourceGroupName, resourceName, eventHubEndpointName, name, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get all the jobs in an IotHub.
            /// </summary>
            /// Get all the jobs in an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            public static IPage<JobResponse> ListJobs(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).ListJobsAsync(resourceGroupName, resourceName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the jobs in an IotHub.
            /// </summary>
            /// Get all the jobs in an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<JobResponse>> ListJobsAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListJobsWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a job in an IotHub.
            /// </summary>
            /// Get a job in an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='jobId'>
            /// The job identifier.
            /// </param>
            public static JobResponse GetJob(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string jobId)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).GetJobAsync(resourceGroupName, resourceName, jobId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a job in an IotHub.
            /// </summary>
            /// Get a job in an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='jobId'>
            /// The job identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobResponse> GetJobAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetJobWithHttpMessagesAsync(resourceGroupName, resourceName, jobId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get quota metrics for an IotHub.
            /// </summary>
            /// Get quota metrics for an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            public static IPage<IotHubQuotaMetricInfo> GetQuotaMetrics(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).GetQuotaMetricsAsync(resourceGroupName, resourceName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get quota metrics for an IotHub.
            /// </summary>
            /// Get quota metrics for an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IotHubQuotaMetricInfo>> GetQuotaMetricsAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetQuotaMetricsWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check if an IotHub name is available.
            /// </summary>
            /// Check if an IotHub name is available.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='operationInputs'>
            /// The operation inputs. Set the name parameter in the operationInputs
            /// structure to the desired iothub name.
            /// </param>
            public static IotHubNameAvailabilityInfo CheckNameAvailability(this IIotHubResourceOperations operations, OperationInputs operationInputs)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).CheckNameAvailabilityAsync(operationInputs), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if an IotHub name is available.
            /// </summary>
            /// Check if an IotHub name is available.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='operationInputs'>
            /// The operation inputs. Set the name parameter in the operationInputs
            /// structure to the desired iothub name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotHubNameAvailabilityInfo> CheckNameAvailabilityAsync(this IIotHubResourceOperations operations, OperationInputs operationInputs, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckNameAvailabilityWithHttpMessagesAsync(operationInputs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all keys for an IotHub.
            /// </summary>
            /// Get all keys for an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            public static IPage<SharedAccessSignatureAuthorizationRule> ListKeys(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).ListKeysAsync(resourceGroupName, resourceName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all keys for an IotHub.
            /// </summary>
            /// Get all keys for an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SharedAccessSignatureAuthorizationRule>> ListKeysAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListKeysWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the Key given a specific KeyName for an IotHub.
            /// </summary>
            /// Get the Key given a specific KeyName for an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key.
            /// </param>
            public static SharedAccessSignatureAuthorizationRule GetKeysForKeyName(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string keyName)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).GetKeysForKeyNameAsync(resourceGroupName, resourceName, keyName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the Key given a specific KeyName for an IotHub.
            /// </summary>
            /// Get the Key given a specific KeyName for an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SharedAccessSignatureAuthorizationRule> GetKeysForKeyNameAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string keyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeysForKeyNameWithHttpMessagesAsync(resourceGroupName, resourceName, keyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Export all the devices in an IotHub.
            /// </summary>
            /// Export all the devices in an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='exportDevicesParameters'>
            /// The export devices parameters.
            /// </param>
            public static JobResponse ExportDevices(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, ExportDevicesRequest exportDevicesParameters)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).ExportDevicesAsync(resourceGroupName, resourceName, exportDevicesParameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Export all the devices in an IotHub.
            /// </summary>
            /// Export all the devices in an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='exportDevicesParameters'>
            /// The export devices parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobResponse> ExportDevicesAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, ExportDevicesRequest exportDevicesParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExportDevicesWithHttpMessagesAsync(resourceGroupName, resourceName, exportDevicesParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Import all the devices in an IotHub.
            /// </summary>
            /// Import all the devices in an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='importDevicesParameters'>
            /// The import devices parameters.
            /// </param>
            public static JobResponse ImportDevices(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, ImportDevicesRequest importDevicesParameters)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).ImportDevicesAsync(resourceGroupName, resourceName, importDevicesParameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Import all the devices in an IotHub.
            /// </summary>
            /// Import all the devices in an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='importDevicesParameters'>
            /// The import devices parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobResponse> ImportDevicesAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, ImportDevicesRequest importDevicesParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ImportDevicesWithHttpMessagesAsync(resourceGroupName, resourceName, importDevicesParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all IotHubs in a subscription.
            /// </summary>
            /// Get all IotHubs in a subscription.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<IotHubDescription> ListBySubscriptionNext(this IIotHubResourceOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).ListBySubscriptionNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all IotHubs in a subscription.
            /// </summary>
            /// Get all IotHubs in a subscription.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IotHubDescription>> ListBySubscriptionNextAsync(this IIotHubResourceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all IotHubs in a Resourcegroup.
            /// </summary>
            /// Get all IotHubs in a Resource group.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<IotHubDescription> ListByResourceGroupNext(this IIotHubResourceOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).ListByResourceGroupNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all IotHubs in a Resourcegroup.
            /// </summary>
            /// Get all IotHubs in a Resource group.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IotHubDescription>> ListByResourceGroupNextAsync(this IIotHubResourceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Valid Skus.
            /// </summary>
            /// Get Valid Skus.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<IotHubSkuDescription> GetValidSkusNext(this IIotHubResourceOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).GetValidSkusNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Valid Skus.
            /// </summary>
            /// Get Valid Skus.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IotHubSkuDescription>> GetValidSkusNextAsync(this IIotHubResourceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetValidSkusNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get EventHub Consumer Groups for an IotHub.
            /// </summary>
            /// Get EventHub Consumer Groups for an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<string> ListEventHubConsumerGroupsNext(this IIotHubResourceOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).ListEventHubConsumerGroupsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get EventHub Consumer Groups for an IotHub.
            /// </summary>
            /// Get EventHub Consumer Groups for an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<string>> ListEventHubConsumerGroupsNextAsync(this IIotHubResourceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListEventHubConsumerGroupsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all the jobs in an IotHub.
            /// </summary>
            /// Get all the jobs in an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<JobResponse> ListJobsNext(this IIotHubResourceOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).ListJobsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the jobs in an IotHub.
            /// </summary>
            /// Get all the jobs in an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<JobResponse>> ListJobsNextAsync(this IIotHubResourceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListJobsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get quota metrics for an IotHub.
            /// </summary>
            /// Get quota metrics for an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<IotHubQuotaMetricInfo> GetQuotaMetricsNext(this IIotHubResourceOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).GetQuotaMetricsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get quota metrics for an IotHub.
            /// </summary>
            /// Get quota metrics for an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IotHubQuotaMetricInfo>> GetQuotaMetricsNextAsync(this IIotHubResourceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetQuotaMetricsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all keys for an IotHub.
            /// </summary>
            /// Get all keys for an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SharedAccessSignatureAuthorizationRule> ListKeysNext(this IIotHubResourceOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IIotHubResourceOperations)s).ListKeysNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all keys for an IotHub.
            /// </summary>
            /// Get all keys for an IotHub.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SharedAccessSignatureAuthorizationRule>> ListKeysNextAsync(this IIotHubResourceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListKeysNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
