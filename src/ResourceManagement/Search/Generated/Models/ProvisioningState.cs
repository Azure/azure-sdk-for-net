// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Search.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.Search;
    using Microsoft.Azure.Management.Search.Fluent;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for ProvisioningState.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ProvisioningState
    {
        [EnumMember(Value = "succeeded")]
        Succeeded,
        [EnumMember(Value = "provisioning")]
        Provisioning,
        [EnumMember(Value = "failed")]
        Failed
    }
    internal static class ProvisioningStateEnumExtension
    {
        internal static string ToSerializedValue(this ProvisioningState? value)  =>
            value == null ? null : ((ProvisioningState)value).ToSerializedValue();

        internal static string ToSerializedValue(this ProvisioningState value)
        {
            switch( value )
            {
                case ProvisioningState.Succeeded:
                    return "succeeded";
                case ProvisioningState.Provisioning:
                    return "provisioning";
                case ProvisioningState.Failed:
                    return "failed";
            }
            return null;
        }

        internal static ProvisioningState? ParseProvisioningState(this string value)
        {
            switch( value )
            {
                case "succeeded":
                    return ProvisioningState.Succeeded;
                case "provisioning":
                    return ProvisioningState.Provisioning;
                case "failed":
                    return ProvisioningState.Failed;
            }
            return null;
        }
    }
}
