// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.Sql;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Contains information about a server Threat Detection policy.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ServerSecurityAlertPolicy : SqlTypedSubResource
    {
        /// <summary>
        /// Initializes a new instance of the ServerSecurityAlertPolicy class.
        /// </summary>
        public ServerSecurityAlertPolicy() { }

        /// <summary>
        /// Initializes a new instance of the ServerSecurityAlertPolicy class.
        /// </summary>
        /// <param name="name">Resource name</param>
        /// <param name="id">The resource ID.</param>
        /// <param name="type">Resource type</param>
        /// <param name="state">Specifies the state of the policy. Options are
        /// Enabled or Disabled. Possible values include: 'New', 'Enabled',
        /// 'Disabled'</param>
        /// <param name="disabledAlerts">Specifies the comma-separated list of
        /// alerts that are disabled, or empty string to disable no alerts.
        /// Possible values include: 'Sql_Injection',
        /// 'Sql_Injection_Vulnerability', 'Access_Anomaly', 'Usage_Anomaly',
        /// 'Preview'</param>
        /// <param name="emailAddresses">Specifies the semicolon-separated list
        /// of e-mail addresses to which the alert is sent.</param>
        /// <param name="emailAccountAdmins">Specifies that the alert is sent
        /// to the account administrators. Options are Enabled or Disabled.
        /// Possible values include: 'Enabled', 'Disabled'</param>
        /// <param name="storageEndpoint">Specifies the blob storage endpoint
        /// (e.g. https://MyAccount.blob.core.windows.net). This blob storage
        /// will hold all Threat Detection audit logs.</param>
        /// <param name="storageAccountAccessKey">Specifies the identifier key
        /// of the Threat Detection audit storage account.</param>
        /// <param name="retentionDays">Specifies the number of days to keep in
        /// the Threat Detection audit logs.</param>
        public ServerSecurityAlertPolicy(string name = default(string), string id = default(string), string type = default(string), SecurityAlertPolicyState? state = default(SecurityAlertPolicyState?), string disabledAlerts = default(string), string emailAddresses = default(string), SecurityAlertPolicyEmailAccountAdmins? emailAccountAdmins = default(SecurityAlertPolicyEmailAccountAdmins?), string storageEndpoint = default(string), string storageAccountAccessKey = default(string), int? retentionDays = default(int?))
            : base(name, id, type)
        {
            State = state;
            DisabledAlerts = disabledAlerts;
            EmailAddresses = emailAddresses;
            EmailAccountAdmins = emailAccountAdmins;
            StorageEndpoint = storageEndpoint;
            StorageAccountAccessKey = storageAccountAccessKey;
            RetentionDays = retentionDays;
        }

        /// <summary>
        /// Gets or sets specifies the state of the policy. Options are Enabled
        /// or Disabled. Possible values include: 'New', 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.state")]
        public SecurityAlertPolicyState? State { get; set; }

        /// <summary>
        /// Gets or sets specifies the comma-separated list of alerts that are
        /// disabled, or empty string to disable no alerts. Possible values
        /// include: 'Sql_Injection', 'Sql_Injection_Vulnerability',
        /// 'Access_Anomaly', 'Usage_Anomaly', 'Preview'
        /// </summary>
        [JsonProperty(PropertyName = "properties.disabledAlerts")]
        public string DisabledAlerts { get; set; }

        /// <summary>
        /// Gets or sets specifies the semicolon-separated list of e-mail
        /// addresses to which the alert is sent.
        /// </summary>
        [JsonProperty(PropertyName = "properties.emailAddresses")]
        public string EmailAddresses { get; set; }

        /// <summary>
        /// Gets or sets specifies that the alert is sent to the account
        /// administrators. Options are Enabled or Disabled. Possible values
        /// include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.emailAccountAdmins")]
        public SecurityAlertPolicyEmailAccountAdmins? EmailAccountAdmins { get; set; }

        /// <summary>
        /// Gets or sets specifies the blob storage endpoint (e.g.
        /// https://MyAccount.blob.core.windows.net). This blob storage will
        /// hold all Threat Detection audit logs.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageEndpoint")]
        public string StorageEndpoint { get; set; }

        /// <summary>
        /// Gets or sets specifies the identifier key of the Threat Detection
        /// audit storage account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageAccountAccessKey")]
        public string StorageAccountAccessKey { get; set; }

        /// <summary>
        /// Gets or sets specifies the number of days to keep in the Threat
        /// Detection audit logs.
        /// </summary>
        [JsonProperty(PropertyName = "properties.retentionDays")]
        public int? RetentionDays { get; set; }

    }
}
