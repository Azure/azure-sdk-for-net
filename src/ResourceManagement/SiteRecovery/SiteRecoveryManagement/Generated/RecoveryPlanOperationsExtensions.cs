// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.SiteRecovery;
using Microsoft.Azure.Management.SiteRecovery.Models;

namespace Microsoft.Azure.Management.SiteRecovery
{
    public static partial class RecoveryPlanOperationsExtensions
    {
        /// <summary>
        /// Commit the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse BeginCommit(this IRecoveryPlanOperations operations, string name, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).BeginCommitAsync(name, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Commit the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> BeginCommitAsync(this IRecoveryPlanOperations operations, string name, CustomRequestHeaders customRequestHeaders)
        {
            return operations.BeginCommitAsync(name, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Create the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='input'>
        /// Required. Create recovery plan input parameters.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse BeginCreateRecoveryPlan(this IRecoveryPlanOperations operations, RecoveryPlanXmlData input, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).BeginCreateRecoveryPlanAsync(input, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Create the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='input'>
        /// Required. Create recovery plan input parameters.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> BeginCreateRecoveryPlanAsync(this IRecoveryPlanOperations operations, RecoveryPlanXmlData input, CustomRequestHeaders customRequestHeaders)
        {
            return operations.BeginCreateRecoveryPlanAsync(input, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Remove a Recovery Plan from the current Azure Site Recovery Vault.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse BeginDelete(this IRecoveryPlanOperations operations, string name, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).BeginDeleteAsync(name, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Remove a Recovery Plan from the current Azure Site Recovery Vault.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> BeginDeleteAsync(this IRecoveryPlanOperations operations, string name, CustomRequestHeaders customRequestHeaders)
        {
            return operations.BeginDeleteAsync(name, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// PlannedFailover for the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan Name.
        /// </param>
        /// <param name='input'>
        /// Required. Input to do planned failover of a recovery plan.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse BeginRecoveryPlanPlannedFailover(this IRecoveryPlanOperations operations, string name, RpPlannedFailoverRequest input, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).BeginRecoveryPlanPlannedFailoverAsync(name, input, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// PlannedFailover for the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan Name.
        /// </param>
        /// <param name='input'>
        /// Required. Input to do planned failover of a recovery plan.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> BeginRecoveryPlanPlannedFailoverAsync(this IRecoveryPlanOperations operations, string name, RpPlannedFailoverRequest input, CustomRequestHeaders customRequestHeaders)
        {
            return operations.BeginRecoveryPlanPlannedFailoverAsync(name, input, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// TestFailover for the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan Name.
        /// </param>
        /// <param name='input'>
        /// Required. Input to do test failover of a recovery plan.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse BeginRecoveryPlanTestFailover(this IRecoveryPlanOperations operations, string name, RpTestFailoverRequest input, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).BeginRecoveryPlanTestFailoverAsync(name, input, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// TestFailover for the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan Name.
        /// </param>
        /// <param name='input'>
        /// Required. Input to do test failover of a recovery plan.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> BeginRecoveryPlanTestFailoverAsync(this IRecoveryPlanOperations operations, string name, RpTestFailoverRequest input, CustomRequestHeaders customRequestHeaders)
        {
            return operations.BeginRecoveryPlanTestFailoverAsync(name, input, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// UnplannedFailover for the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan ID.
        /// </param>
        /// <param name='input'>
        /// Required. Input to do unplanned failover of a recovery plan.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse BeginRecoveryPlanUnplannedFailover(this IRecoveryPlanOperations operations, string name, RpUnplannedFailoverRequest input, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).BeginRecoveryPlanUnplannedFailoverAsync(name, input, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// UnplannedFailover for the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan ID.
        /// </param>
        /// <param name='input'>
        /// Required. Input to do unplanned failover of a recovery plan.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> BeginRecoveryPlanUnplannedFailoverAsync(this IRecoveryPlanOperations operations, string name, RpUnplannedFailoverRequest input, CustomRequestHeaders customRequestHeaders)
        {
            return operations.BeginRecoveryPlanUnplannedFailoverAsync(name, input, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Reprotect the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse BeginReprotect(this IRecoveryPlanOperations operations, string name, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).BeginReprotectAsync(name, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Reprotect the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> BeginReprotectAsync(this IRecoveryPlanOperations operations, string name, CustomRequestHeaders customRequestHeaders)
        {
            return operations.BeginReprotectAsync(name, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Update the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='input'>
        /// Required. Update recovery plan input parameters.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse BeginUpdateRecoveryPlan(this IRecoveryPlanOperations operations, RecoveryPlanXmlData input, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).BeginUpdateRecoveryPlanAsync(input, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Update the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='input'>
        /// Required. Update recovery plan input parameters.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> BeginUpdateRecoveryPlanAsync(this IRecoveryPlanOperations operations, RecoveryPlanXmlData input, CustomRequestHeaders customRequestHeaders)
        {
            return operations.BeginUpdateRecoveryPlanAsync(input, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Commit the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse Commit(this IRecoveryPlanOperations operations, string name, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).CommitAsync(name, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Commit the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> CommitAsync(this IRecoveryPlanOperations operations, string name, CustomRequestHeaders customRequestHeaders)
        {
            return operations.CommitAsync(name, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Create the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='input'>
        /// Required. Create recovery plan input parameters.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse CreateRecoveryPlan(this IRecoveryPlanOperations operations, RecoveryPlanXmlData input, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).CreateRecoveryPlanAsync(input, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Create the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='input'>
        /// Required. Create recovery plan input parameters.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> CreateRecoveryPlanAsync(this IRecoveryPlanOperations operations, RecoveryPlanXmlData input, CustomRequestHeaders customRequestHeaders)
        {
            return operations.CreateRecoveryPlanAsync(input, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Remove a Recovery Plan from the current Azure Site Recovery Vault.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse Delete(this IRecoveryPlanOperations operations, string name, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).DeleteAsync(name, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Remove a Recovery Plan from the current Azure Site Recovery Vault.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> DeleteAsync(this IRecoveryPlanOperations operations, string name, CustomRequestHeaders customRequestHeaders)
        {
            return operations.DeleteAsync(name, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the recovery plan by the ID.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the Recovery Plan object.
        /// </returns>
        public static RecoveryPlanResponse Get(this IRecoveryPlanOperations operations, string name, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).GetAsync(name, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the recovery plan by the ID.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the Recovery Plan object.
        /// </returns>
        public static Task<RecoveryPlanResponse> GetAsync(this IRecoveryPlanOperations operations, string name, CustomRequestHeaders customRequestHeaders)
        {
            return operations.GetAsync(name, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static RecoveryPlanOperationResponse GetRecoveryPlanCommitStatus(this IRecoveryPlanOperations operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).GetRecoveryPlanCommitStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<RecoveryPlanOperationResponse> GetRecoveryPlanCommitStatusAsync(this IRecoveryPlanOperations operations, string operationStatusLink)
        {
            return operations.GetRecoveryPlanCommitStatusAsync(operationStatusLink, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static RecoveryPlanOperationResponse GetRecoveryPlanCreateStatus(this IRecoveryPlanOperations operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).GetRecoveryPlanCreateStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<RecoveryPlanOperationResponse> GetRecoveryPlanCreateStatusAsync(this IRecoveryPlanOperations operations, string operationStatusLink)
        {
            return operations.GetRecoveryPlanCreateStatusAsync(operationStatusLink, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static RecoveryPlanOperationResponse GetRecoveryPlanDeleteStatus(this IRecoveryPlanOperations operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).GetRecoveryPlanDeleteStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<RecoveryPlanOperationResponse> GetRecoveryPlanDeleteStatusAsync(this IRecoveryPlanOperations operations, string operationStatusLink)
        {
            return operations.GetRecoveryPlanDeleteStatusAsync(operationStatusLink, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static RecoveryPlanOperationResponse GetRecoveryPlanPlannedFailoverStatus(this IRecoveryPlanOperations operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).GetRecoveryPlanPlannedFailoverStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<RecoveryPlanOperationResponse> GetRecoveryPlanPlannedFailoverStatusAsync(this IRecoveryPlanOperations operations, string operationStatusLink)
        {
            return operations.GetRecoveryPlanPlannedFailoverStatusAsync(operationStatusLink, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static RecoveryPlanOperationResponse GetRecoveryPlanReprotectStatus(this IRecoveryPlanOperations operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).GetRecoveryPlanReprotectStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<RecoveryPlanOperationResponse> GetRecoveryPlanReprotectStatusAsync(this IRecoveryPlanOperations operations, string operationStatusLink)
        {
            return operations.GetRecoveryPlanReprotectStatusAsync(operationStatusLink, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static RecoveryPlanOperationResponse GetRecoveryPlanTestFailoverStatus(this IRecoveryPlanOperations operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).GetRecoveryPlanTestFailoverStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<RecoveryPlanOperationResponse> GetRecoveryPlanTestFailoverStatusAsync(this IRecoveryPlanOperations operations, string operationStatusLink)
        {
            return operations.GetRecoveryPlanTestFailoverStatusAsync(operationStatusLink, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static RecoveryPlanOperationResponse GetRecoveryPlanUnplannedFailoverStatus(this IRecoveryPlanOperations operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).GetRecoveryPlanUnplannedFailoverStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<RecoveryPlanOperationResponse> GetRecoveryPlanUnplannedFailoverStatusAsync(this IRecoveryPlanOperations operations, string operationStatusLink)
        {
            return operations.GetRecoveryPlanUnplannedFailoverStatusAsync(operationStatusLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the recovery plan xml by the ID.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The xml output for the recoveryplan object.
        /// </returns>
        public static RecoveryPlanXmlOuput GetRecoveryPlanXml(this IRecoveryPlanOperations operations, string name, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).GetRecoveryPlanXmlAsync(name, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the recovery plan xml by the ID.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The xml output for the recoveryplan object.
        /// </returns>
        public static Task<RecoveryPlanXmlOuput> GetRecoveryPlanXmlAsync(this IRecoveryPlanOperations operations, string name, CustomRequestHeaders customRequestHeaders)
        {
            return operations.GetRecoveryPlanXmlAsync(name, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static RecoveryPlanOperationResponse GetUpdateRecoveryPlanUpdateStatus(this IRecoveryPlanOperations operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).GetUpdateRecoveryPlanUpdateStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<RecoveryPlanOperationResponse> GetUpdateRecoveryPlanUpdateStatusAsync(this IRecoveryPlanOperations operations, string operationStatusLink)
        {
            return operations.GetUpdateRecoveryPlanUpdateStatusAsync(operationStatusLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the list of all recoveryplans under the resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the list recoveryplans operation.
        /// </returns>
        public static RecoveryPlanListResponse List(this IRecoveryPlanOperations operations, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).ListAsync(customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the list of all recoveryplans under the resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the list recoveryplans operation.
        /// </returns>
        public static Task<RecoveryPlanListResponse> ListAsync(this IRecoveryPlanOperations operations, CustomRequestHeaders customRequestHeaders)
        {
            return operations.ListAsync(customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// PlannedFailover for the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan Name.
        /// </param>
        /// <param name='input'>
        /// Required. Input to do planned failover of a recovery plan.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse RecoveryPlanPlannedFailover(this IRecoveryPlanOperations operations, string name, RpPlannedFailoverRequest input, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).RecoveryPlanPlannedFailoverAsync(name, input, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// PlannedFailover for the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan Name.
        /// </param>
        /// <param name='input'>
        /// Required. Input to do planned failover of a recovery plan.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> RecoveryPlanPlannedFailoverAsync(this IRecoveryPlanOperations operations, string name, RpPlannedFailoverRequest input, CustomRequestHeaders customRequestHeaders)
        {
            return operations.RecoveryPlanPlannedFailoverAsync(name, input, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// TestFailover for the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan Name.
        /// </param>
        /// <param name='input'>
        /// Required. Input to do test failover of a recovery plan.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse RecoveryPlanTestFailover(this IRecoveryPlanOperations operations, string name, RpTestFailoverRequest input, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).RecoveryPlanTestFailoverAsync(name, input, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// TestFailover for the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan Name.
        /// </param>
        /// <param name='input'>
        /// Required. Input to do test failover of a recovery plan.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> RecoveryPlanTestFailoverAsync(this IRecoveryPlanOperations operations, string name, RpTestFailoverRequest input, CustomRequestHeaders customRequestHeaders)
        {
            return operations.RecoveryPlanTestFailoverAsync(name, input, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// UnplannedFailover for the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan Name.
        /// </param>
        /// <param name='input'>
        /// Required. Input to do unplanned failover of a recovery plan.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse RecoveryPlanUnplannedFailover(this IRecoveryPlanOperations operations, string name, RpUnplannedFailoverRequest input, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).RecoveryPlanUnplannedFailoverAsync(name, input, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// UnplannedFailover for the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan Name.
        /// </param>
        /// <param name='input'>
        /// Required. Input to do unplanned failover of a recovery plan.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> RecoveryPlanUnplannedFailoverAsync(this IRecoveryPlanOperations operations, string name, RpUnplannedFailoverRequest input, CustomRequestHeaders customRequestHeaders)
        {
            return operations.RecoveryPlanUnplannedFailoverAsync(name, input, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Reprotect the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse Reprotect(this IRecoveryPlanOperations operations, string name, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).ReprotectAsync(name, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Reprotect the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='name'>
        /// Required. RecoveryPlan Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> ReprotectAsync(this IRecoveryPlanOperations operations, string name, CustomRequestHeaders customRequestHeaders)
        {
            return operations.ReprotectAsync(name, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Update the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='input'>
        /// Required. Update recovery plan input parameters.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse UpdateRecoveryPlan(this IRecoveryPlanOperations operations, RecoveryPlanXmlData input, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryPlanOperations)s).UpdateRecoveryPlanAsync(input, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Update the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IRecoveryPlanOperations.
        /// </param>
        /// <param name='input'>
        /// Required. Update recovery plan input parameters.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> UpdateRecoveryPlanAsync(this IRecoveryPlanOperations operations, RecoveryPlanXmlData input, CustomRequestHeaders customRequestHeaders)
        {
            return operations.UpdateRecoveryPlanAsync(input, customRequestHeaders, CancellationToken.None);
        }
    }
}
