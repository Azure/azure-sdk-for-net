// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure.Management.SiteRecovery;
using Microsoft.Azure.Management.SiteRecovery.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.SiteRecovery
{
    /// <summary>
    /// Definition of Protection Container operations for the Site Recovery
    /// extension.
    /// </summary>
    internal partial class ProtectionContainerOperations : IServiceOperations<SiteRecoveryManagementClient>, IProtectionContainerOperations
    {
        /// <summary>
        /// Initializes a new instance of the ProtectionContainerOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ProtectionContainerOperations(SiteRecoveryManagementClient client)
        {
            this._client = client;
        }
        
        private SiteRecoveryManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.SiteRecovery.SiteRecoveryManagementClient.
        /// </summary>
        public SiteRecoveryManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Get the protected container by Id.
        /// </summary>
        /// <param name='protectionContainerId'>
        /// Required. Protection Container ID.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the Protection Container object.
        /// </returns>
        public async Task<ProtectionContainerResponse> GetAsync(string protectionContainerId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (protectionContainerId == null)
            {
                throw new ArgumentNullException("protectionContainerId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("protectionContainerId", protectionContainerId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.SiteRecovery";
            url = url + "/";
            url = url + "SiteRecoveryVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/ProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-08-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProtectionContainerResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProtectionContainerResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProtectionContainer protectionContainerInstance = new ProtectionContainer();
                            result.ProtectionContainer = protectionContainerInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ProtectionContainerProperties propertiesInstance = new ProtectionContainerProperties();
                                protectionContainerInstance.Properties = propertiesInstance;
                                
                                JToken serverIdValue = propertiesValue["serverId"];
                                if (serverIdValue != null && serverIdValue.Type != JTokenType.Null)
                                {
                                    string serverIdInstance = ((string)serverIdValue);
                                    propertiesInstance.ServerId = serverIdInstance;
                                }
                                
                                JToken fabricObjectIdValue = propertiesValue["fabricObjectId"];
                                if (fabricObjectIdValue != null && fabricObjectIdValue.Type != JTokenType.Null)
                                {
                                    string fabricObjectIdInstance = ((string)fabricObjectIdValue);
                                    propertiesInstance.FabricObjectId = fabricObjectIdInstance;
                                }
                                
                                JToken roleValue = propertiesValue["role"];
                                if (roleValue != null && roleValue.Type != JTokenType.Null)
                                {
                                    string roleInstance = ((string)roleValue);
                                    propertiesInstance.Role = roleInstance;
                                }
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken fabricTypeValue = propertiesValue["fabricType"];
                                if (fabricTypeValue != null && fabricTypeValue.Type != JTokenType.Null)
                                {
                                    string fabricTypeInstance = ((string)fabricTypeValue);
                                    propertiesInstance.FabricType = fabricTypeInstance;
                                }
                                
                                JToken availableProtectionProfilesArray = propertiesValue["availableProtectionProfiles"];
                                if (availableProtectionProfilesArray != null && availableProtectionProfilesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken availableProtectionProfilesValue in ((JArray)availableProtectionProfilesArray))
                                    {
                                        ProtectionProfile protectionProfileInstance = new ProtectionProfile();
                                        propertiesInstance.AvailableProtectionProfiles.Add(protectionProfileInstance);
                                        
                                        JToken propertiesValue2 = availableProtectionProfilesValue["properties"];
                                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                        {
                                            ProtectionProfileProperties propertiesInstance2 = new ProtectionProfileProperties();
                                            protectionProfileInstance.CustomData = propertiesInstance2;
                                            
                                            JToken friendlyNameValue2 = propertiesValue2["friendlyName"];
                                            if (friendlyNameValue2 != null && friendlyNameValue2.Type != JTokenType.Null)
                                            {
                                                string friendlyNameInstance2 = ((string)friendlyNameValue2);
                                                propertiesInstance2.FriendlyName = friendlyNameInstance2;
                                            }
                                            
                                            JToken protectedEntityCountValue = propertiesValue2["protectedEntityCount"];
                                            if (protectedEntityCountValue != null && protectedEntityCountValue.Type != JTokenType.Null)
                                            {
                                                int protectedEntityCountInstance = ((int)protectedEntityCountValue);
                                                propertiesInstance2.ProtectedEntityCount = protectedEntityCountInstance;
                                            }
                                            
                                            JToken replicationProviderValue = propertiesValue2["replicationProvider"];
                                            if (replicationProviderValue != null && replicationProviderValue.Type != JTokenType.Null)
                                            {
                                                string replicationProviderInstance = ((string)replicationProviderValue);
                                                propertiesInstance2.ReplicationProvider = replicationProviderInstance;
                                            }
                                            
                                            JToken replicationProviderSettingsValue = propertiesValue2["replicationProviderSettings"];
                                            if (replicationProviderSettingsValue != null && replicationProviderSettingsValue.Type != JTokenType.Null)
                                            {
                                                string typeName = ((string)replicationProviderSettingsValue["__type"]);
                                                if (typeName == "HyperVReplicaProtectionProfileDetails")
                                                {
                                                    HyperVReplicaProtectionProfileDetails hyperVReplicaProtectionProfileDetailsInstance = new HyperVReplicaProtectionProfileDetails();
                                                    
                                                    JToken recoveryPointsValue = replicationProviderSettingsValue["recoveryPoints"];
                                                    if (recoveryPointsValue != null && recoveryPointsValue.Type != JTokenType.Null)
                                                    {
                                                        int recoveryPointsInstance = ((int)recoveryPointsValue);
                                                        hyperVReplicaProtectionProfileDetailsInstance.RecoveryPoints = recoveryPointsInstance;
                                                    }
                                                    
                                                    JToken applicationConsistentSnapshotFrequencyInHoursValue = replicationProviderSettingsValue["applicationConsistentSnapshotFrequencyInHours"];
                                                    if (applicationConsistentSnapshotFrequencyInHoursValue != null && applicationConsistentSnapshotFrequencyInHoursValue.Type != JTokenType.Null)
                                                    {
                                                        int applicationConsistentSnapshotFrequencyInHoursInstance = ((int)applicationConsistentSnapshotFrequencyInHoursValue);
                                                        hyperVReplicaProtectionProfileDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance;
                                                    }
                                                    
                                                    JToken compressionValue = replicationProviderSettingsValue["compression"];
                                                    if (compressionValue != null && compressionValue.Type != JTokenType.Null)
                                                    {
                                                        string compressionInstance = ((string)compressionValue);
                                                        hyperVReplicaProtectionProfileDetailsInstance.Compression = compressionInstance;
                                                    }
                                                    
                                                    JToken initialReplicationMethodValue = replicationProviderSettingsValue["initialReplicationMethod"];
                                                    if (initialReplicationMethodValue != null && initialReplicationMethodValue.Type != JTokenType.Null)
                                                    {
                                                        string initialReplicationMethodInstance = ((string)initialReplicationMethodValue);
                                                        hyperVReplicaProtectionProfileDetailsInstance.InitialReplicationMethod = initialReplicationMethodInstance;
                                                    }
                                                    
                                                    JToken onlineReplicationStartTimeValue = replicationProviderSettingsValue["onlineReplicationStartTime"];
                                                    if (onlineReplicationStartTimeValue != null && onlineReplicationStartTimeValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan onlineReplicationStartTimeInstance = TimeSpan.Parse(((string)onlineReplicationStartTimeValue), CultureInfo.InvariantCulture);
                                                        hyperVReplicaProtectionProfileDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance;
                                                    }
                                                    
                                                    JToken offlineReplicationImportPathValue = replicationProviderSettingsValue["offlineReplicationImportPath"];
                                                    if (offlineReplicationImportPathValue != null && offlineReplicationImportPathValue.Type != JTokenType.Null)
                                                    {
                                                        string offlineReplicationImportPathInstance = ((string)offlineReplicationImportPathValue);
                                                        hyperVReplicaProtectionProfileDetailsInstance.OfflineReplicationImportPath = offlineReplicationImportPathInstance;
                                                    }
                                                    
                                                    JToken offlineReplicationExportPathValue = replicationProviderSettingsValue["offlineReplicationExportPath"];
                                                    if (offlineReplicationExportPathValue != null && offlineReplicationExportPathValue.Type != JTokenType.Null)
                                                    {
                                                        string offlineReplicationExportPathInstance = ((string)offlineReplicationExportPathValue);
                                                        hyperVReplicaProtectionProfileDetailsInstance.OfflineReplicationExportPath = offlineReplicationExportPathInstance;
                                                    }
                                                    
                                                    JToken replicationPortValue = replicationProviderSettingsValue["replicationPort"];
                                                    if (replicationPortValue != null && replicationPortValue.Type != JTokenType.Null)
                                                    {
                                                        ushort replicationPortInstance = ((ushort)replicationPortValue);
                                                        hyperVReplicaProtectionProfileDetailsInstance.ReplicationPort = replicationPortInstance;
                                                    }
                                                    
                                                    JToken allowedAuthenticationTypeValue = replicationProviderSettingsValue["allowedAuthenticationType"];
                                                    if (allowedAuthenticationTypeValue != null && allowedAuthenticationTypeValue.Type != JTokenType.Null)
                                                    {
                                                        ushort allowedAuthenticationTypeInstance = ((ushort)allowedAuthenticationTypeValue);
                                                        hyperVReplicaProtectionProfileDetailsInstance.AllowedAuthenticationType = allowedAuthenticationTypeInstance;
                                                    }
                                                    
                                                    JToken replicaDeletionOptionValue = replicationProviderSettingsValue["replicaDeletionOption"];
                                                    if (replicaDeletionOptionValue != null && replicaDeletionOptionValue.Type != JTokenType.Null)
                                                    {
                                                        string replicaDeletionOptionInstance = ((string)replicaDeletionOptionValue);
                                                        hyperVReplicaProtectionProfileDetailsInstance.ReplicaDeletionOption = replicaDeletionOptionInstance;
                                                    }
                                                    
                                                    JToken replicationFrequencyInSecondsValue = replicationProviderSettingsValue["replicationFrequencyInSeconds"];
                                                    if (replicationFrequencyInSecondsValue != null && replicationFrequencyInSecondsValue.Type != JTokenType.Null)
                                                    {
                                                        ushort replicationFrequencyInSecondsInstance = ((ushort)replicationFrequencyInSecondsValue);
                                                        hyperVReplicaProtectionProfileDetailsInstance.ReplicationFrequencyInSeconds = replicationFrequencyInSecondsInstance;
                                                    }
                                                    propertiesInstance2.ReplicationProviderSettings = hyperVReplicaProtectionProfileDetailsInstance;
                                                }
                                                if (typeName == "HyperVReplicaAzureProtectionProfileDetails")
                                                {
                                                    HyperVReplicaAzureProtectionProfileDetails hyperVReplicaAzureProtectionProfileDetailsInstance = new HyperVReplicaAzureProtectionProfileDetails();
                                                    
                                                    JToken recoveryPointHistoryDurationValue = replicationProviderSettingsValue["recoveryPointHistoryDuration"];
                                                    if (recoveryPointHistoryDurationValue != null && recoveryPointHistoryDurationValue.Type != JTokenType.Null)
                                                    {
                                                        int recoveryPointHistoryDurationInstance = ((int)recoveryPointHistoryDurationValue);
                                                        hyperVReplicaAzureProtectionProfileDetailsInstance.RecoveryPointHistoryDuration = recoveryPointHistoryDurationInstance;
                                                    }
                                                    
                                                    JToken applicationConsistentSnapshotFrequencyInHoursValue2 = replicationProviderSettingsValue["applicationConsistentSnapshotFrequencyInHours"];
                                                    if (applicationConsistentSnapshotFrequencyInHoursValue2 != null && applicationConsistentSnapshotFrequencyInHoursValue2.Type != JTokenType.Null)
                                                    {
                                                        int applicationConsistentSnapshotFrequencyInHoursInstance2 = ((int)applicationConsistentSnapshotFrequencyInHoursValue2);
                                                        hyperVReplicaAzureProtectionProfileDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance2;
                                                    }
                                                    
                                                    JToken replicationIntervalValue = replicationProviderSettingsValue["replicationInterval"];
                                                    if (replicationIntervalValue != null && replicationIntervalValue.Type != JTokenType.Null)
                                                    {
                                                        int replicationIntervalInstance = ((int)replicationIntervalValue);
                                                        hyperVReplicaAzureProtectionProfileDetailsInstance.ReplicationInterval = replicationIntervalInstance;
                                                    }
                                                    
                                                    JToken onlineReplicationStartTimeValue2 = replicationProviderSettingsValue["onlineReplicationStartTime"];
                                                    if (onlineReplicationStartTimeValue2 != null && onlineReplicationStartTimeValue2.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan onlineReplicationStartTimeInstance2 = TimeSpan.Parse(((string)onlineReplicationStartTimeValue2), CultureInfo.InvariantCulture);
                                                        hyperVReplicaAzureProtectionProfileDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance2;
                                                    }
                                                    
                                                    JToken encryptionValue = replicationProviderSettingsValue["encryption"];
                                                    if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                                    {
                                                        string encryptionInstance = ((string)encryptionValue);
                                                        hyperVReplicaAzureProtectionProfileDetailsInstance.Encryption = encryptionInstance;
                                                    }
                                                    
                                                    JToken activeStorageAccountValue = replicationProviderSettingsValue["activeStorageAccount"];
                                                    if (activeStorageAccountValue != null && activeStorageAccountValue.Type != JTokenType.Null)
                                                    {
                                                        CustomerStorageAccount activeStorageAccountInstance = new CustomerStorageAccount();
                                                        hyperVReplicaAzureProtectionProfileDetailsInstance.ActiveStorageAccount = activeStorageAccountInstance;
                                                        
                                                        JToken storageAccountNameValue = activeStorageAccountValue["storageAccountName"];
                                                        if (storageAccountNameValue != null && storageAccountNameValue.Type != JTokenType.Null)
                                                        {
                                                            string storageAccountNameInstance = ((string)storageAccountNameValue);
                                                            activeStorageAccountInstance.StorageAccountName = storageAccountNameInstance;
                                                        }
                                                        
                                                        JToken subscriptionIdValue = activeStorageAccountValue["subscriptionId"];
                                                        if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                                        {
                                                            string subscriptionIdInstance = ((string)subscriptionIdValue);
                                                            activeStorageAccountInstance.SubscriptionId = subscriptionIdInstance;
                                                        }
                                                    }
                                                    propertiesInstance2.ReplicationProviderSettings = hyperVReplicaAzureProtectionProfileDetailsInstance;
                                                }
                                            }
                                            
                                            JToken associationStatusValue = propertiesValue2["associationStatus"];
                                            if (associationStatusValue != null && associationStatusValue.Type != JTokenType.Null)
                                            {
                                                string associationStatusInstance = ((string)associationStatusValue);
                                                propertiesInstance2.AssociationStatus = associationStatusInstance;
                                            }
                                            
                                            JToken associationDetailArray = propertiesValue2["associationDetail"];
                                            if (associationDetailArray != null && associationDetailArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken associationDetailValue in ((JArray)associationDetailArray))
                                                {
                                                    ProtectionProfileAssociationDetails protectionProfileAssociationDetailsInstance = new ProtectionProfileAssociationDetails();
                                                    propertiesInstance2.AssociationDetail.Add(protectionProfileAssociationDetailsInstance);
                                                    
                                                    JToken primaryProtectionContainerIdValue = associationDetailValue["primaryProtectionContainerId"];
                                                    if (primaryProtectionContainerIdValue != null && primaryProtectionContainerIdValue.Type != JTokenType.Null)
                                                    {
                                                        string primaryProtectionContainerIdInstance = ((string)primaryProtectionContainerIdValue);
                                                        protectionProfileAssociationDetailsInstance.PrimaryProtectionContainerId = primaryProtectionContainerIdInstance;
                                                    }
                                                    
                                                    JToken recoveryProtectionContainerIdValue = associationDetailValue["recoveryProtectionContainerId"];
                                                    if (recoveryProtectionContainerIdValue != null && recoveryProtectionContainerIdValue.Type != JTokenType.Null)
                                                    {
                                                        string recoveryProtectionContainerIdInstance = ((string)recoveryProtectionContainerIdValue);
                                                        protectionProfileAssociationDetailsInstance.RecoveryProtectionContainerId = recoveryProtectionContainerIdInstance;
                                                    }
                                                    
                                                    JToken associationStatusValue2 = associationDetailValue["associationStatus"];
                                                    if (associationStatusValue2 != null && associationStatusValue2.Type != JTokenType.Null)
                                                    {
                                                        string associationStatusInstance2 = ((string)associationStatusValue2);
                                                        protectionProfileAssociationDetailsInstance.AssociationStatus = associationStatusInstance2;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken idValue = availableProtectionProfilesValue["id"];
                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                        {
                                            string idInstance = ((string)idValue);
                                            protectionProfileInstance.Id = idInstance;
                                        }
                                        
                                        JToken nameValue = availableProtectionProfilesValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            protectionProfileInstance.Name = nameInstance;
                                        }
                                        
                                        JToken typeValue = availableProtectionProfilesValue["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            protectionProfileInstance.Type = typeInstance;
                                        }
                                        
                                        JToken locationValue = availableProtectionProfilesValue["location"];
                                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                                        {
                                            string locationInstance = ((string)locationValue);
                                            protectionProfileInstance.Location = locationInstance;
                                        }
                                        
                                        JToken tagsSequenceElement = ((JToken)availableProtectionProfilesValue["tags"]);
                                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in tagsSequenceElement)
                                            {
                                                string tagsKey = ((string)property.Name);
                                                string tagsValue = ((string)property.Value);
                                                protectionProfileInstance.Tags.Add(tagsKey, tagsValue);
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                protectionContainerInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                protectionContainerInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue2 = responseDoc["type"];
                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                            {
                                string typeInstance2 = ((string)typeValue2);
                                protectionContainerInstance.Type = typeInstance2;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                protectionContainerInstance.Location = locationInstance2;
                            }
                            
                            JToken tagsSequenceElement2 = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                            {
                                foreach (JProperty property2 in tagsSequenceElement2)
                                {
                                    string tagsKey2 = ((string)property2.Name);
                                    string tagsValue2 = ((string)property2.Value);
                                    protectionContainerInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the list of all ProtectionContainers for the given server.
        /// </summary>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list ProtectionContainers operation.
        /// </returns>
        public async Task<ProtectionContainerListResponse> ListAsync(CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.SiteRecovery";
            url = url + "/";
            url = url + "SiteRecoveryVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/ProtectionContainers";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-08-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProtectionContainerListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProtectionContainerListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ProtectionContainer protectionContainerInstance = new ProtectionContainer();
                                    result.ProtectionContainers.Add(protectionContainerInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        ProtectionContainerProperties propertiesInstance = new ProtectionContainerProperties();
                                        protectionContainerInstance.Properties = propertiesInstance;
                                        
                                        JToken serverIdValue = propertiesValue["serverId"];
                                        if (serverIdValue != null && serverIdValue.Type != JTokenType.Null)
                                        {
                                            string serverIdInstance = ((string)serverIdValue);
                                            propertiesInstance.ServerId = serverIdInstance;
                                        }
                                        
                                        JToken fabricObjectIdValue = propertiesValue["fabricObjectId"];
                                        if (fabricObjectIdValue != null && fabricObjectIdValue.Type != JTokenType.Null)
                                        {
                                            string fabricObjectIdInstance = ((string)fabricObjectIdValue);
                                            propertiesInstance.FabricObjectId = fabricObjectIdInstance;
                                        }
                                        
                                        JToken roleValue = propertiesValue["role"];
                                        if (roleValue != null && roleValue.Type != JTokenType.Null)
                                        {
                                            string roleInstance = ((string)roleValue);
                                            propertiesInstance.Role = roleInstance;
                                        }
                                        
                                        JToken friendlyNameValue = propertiesValue["friendlyName"];
                                        if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string friendlyNameInstance = ((string)friendlyNameValue);
                                            propertiesInstance.FriendlyName = friendlyNameInstance;
                                        }
                                        
                                        JToken fabricTypeValue = propertiesValue["fabricType"];
                                        if (fabricTypeValue != null && fabricTypeValue.Type != JTokenType.Null)
                                        {
                                            string fabricTypeInstance = ((string)fabricTypeValue);
                                            propertiesInstance.FabricType = fabricTypeInstance;
                                        }
                                        
                                        JToken availableProtectionProfilesArray = propertiesValue["availableProtectionProfiles"];
                                        if (availableProtectionProfilesArray != null && availableProtectionProfilesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken availableProtectionProfilesValue in ((JArray)availableProtectionProfilesArray))
                                            {
                                                ProtectionProfile protectionProfileInstance = new ProtectionProfile();
                                                propertiesInstance.AvailableProtectionProfiles.Add(protectionProfileInstance);
                                                
                                                JToken propertiesValue2 = availableProtectionProfilesValue["properties"];
                                                if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                {
                                                    ProtectionProfileProperties propertiesInstance2 = new ProtectionProfileProperties();
                                                    protectionProfileInstance.CustomData = propertiesInstance2;
                                                    
                                                    JToken friendlyNameValue2 = propertiesValue2["friendlyName"];
                                                    if (friendlyNameValue2 != null && friendlyNameValue2.Type != JTokenType.Null)
                                                    {
                                                        string friendlyNameInstance2 = ((string)friendlyNameValue2);
                                                        propertiesInstance2.FriendlyName = friendlyNameInstance2;
                                                    }
                                                    
                                                    JToken protectedEntityCountValue = propertiesValue2["protectedEntityCount"];
                                                    if (protectedEntityCountValue != null && protectedEntityCountValue.Type != JTokenType.Null)
                                                    {
                                                        int protectedEntityCountInstance = ((int)protectedEntityCountValue);
                                                        propertiesInstance2.ProtectedEntityCount = protectedEntityCountInstance;
                                                    }
                                                    
                                                    JToken replicationProviderValue = propertiesValue2["replicationProvider"];
                                                    if (replicationProviderValue != null && replicationProviderValue.Type != JTokenType.Null)
                                                    {
                                                        string replicationProviderInstance = ((string)replicationProviderValue);
                                                        propertiesInstance2.ReplicationProvider = replicationProviderInstance;
                                                    }
                                                    
                                                    JToken replicationProviderSettingsValue = propertiesValue2["replicationProviderSettings"];
                                                    if (replicationProviderSettingsValue != null && replicationProviderSettingsValue.Type != JTokenType.Null)
                                                    {
                                                        string typeName = ((string)replicationProviderSettingsValue["__type"]);
                                                        if (typeName == "HyperVReplicaProtectionProfileDetails")
                                                        {
                                                            HyperVReplicaProtectionProfileDetails hyperVReplicaProtectionProfileDetailsInstance = new HyperVReplicaProtectionProfileDetails();
                                                            
                                                            JToken recoveryPointsValue = replicationProviderSettingsValue["recoveryPoints"];
                                                            if (recoveryPointsValue != null && recoveryPointsValue.Type != JTokenType.Null)
                                                            {
                                                                int recoveryPointsInstance = ((int)recoveryPointsValue);
                                                                hyperVReplicaProtectionProfileDetailsInstance.RecoveryPoints = recoveryPointsInstance;
                                                            }
                                                            
                                                            JToken applicationConsistentSnapshotFrequencyInHoursValue = replicationProviderSettingsValue["applicationConsistentSnapshotFrequencyInHours"];
                                                            if (applicationConsistentSnapshotFrequencyInHoursValue != null && applicationConsistentSnapshotFrequencyInHoursValue.Type != JTokenType.Null)
                                                            {
                                                                int applicationConsistentSnapshotFrequencyInHoursInstance = ((int)applicationConsistentSnapshotFrequencyInHoursValue);
                                                                hyperVReplicaProtectionProfileDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance;
                                                            }
                                                            
                                                            JToken compressionValue = replicationProviderSettingsValue["compression"];
                                                            if (compressionValue != null && compressionValue.Type != JTokenType.Null)
                                                            {
                                                                string compressionInstance = ((string)compressionValue);
                                                                hyperVReplicaProtectionProfileDetailsInstance.Compression = compressionInstance;
                                                            }
                                                            
                                                            JToken initialReplicationMethodValue = replicationProviderSettingsValue["initialReplicationMethod"];
                                                            if (initialReplicationMethodValue != null && initialReplicationMethodValue.Type != JTokenType.Null)
                                                            {
                                                                string initialReplicationMethodInstance = ((string)initialReplicationMethodValue);
                                                                hyperVReplicaProtectionProfileDetailsInstance.InitialReplicationMethod = initialReplicationMethodInstance;
                                                            }
                                                            
                                                            JToken onlineReplicationStartTimeValue = replicationProviderSettingsValue["onlineReplicationStartTime"];
                                                            if (onlineReplicationStartTimeValue != null && onlineReplicationStartTimeValue.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan onlineReplicationStartTimeInstance = TimeSpan.Parse(((string)onlineReplicationStartTimeValue), CultureInfo.InvariantCulture);
                                                                hyperVReplicaProtectionProfileDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance;
                                                            }
                                                            
                                                            JToken offlineReplicationImportPathValue = replicationProviderSettingsValue["offlineReplicationImportPath"];
                                                            if (offlineReplicationImportPathValue != null && offlineReplicationImportPathValue.Type != JTokenType.Null)
                                                            {
                                                                string offlineReplicationImportPathInstance = ((string)offlineReplicationImportPathValue);
                                                                hyperVReplicaProtectionProfileDetailsInstance.OfflineReplicationImportPath = offlineReplicationImportPathInstance;
                                                            }
                                                            
                                                            JToken offlineReplicationExportPathValue = replicationProviderSettingsValue["offlineReplicationExportPath"];
                                                            if (offlineReplicationExportPathValue != null && offlineReplicationExportPathValue.Type != JTokenType.Null)
                                                            {
                                                                string offlineReplicationExportPathInstance = ((string)offlineReplicationExportPathValue);
                                                                hyperVReplicaProtectionProfileDetailsInstance.OfflineReplicationExportPath = offlineReplicationExportPathInstance;
                                                            }
                                                            
                                                            JToken replicationPortValue = replicationProviderSettingsValue["replicationPort"];
                                                            if (replicationPortValue != null && replicationPortValue.Type != JTokenType.Null)
                                                            {
                                                                ushort replicationPortInstance = ((ushort)replicationPortValue);
                                                                hyperVReplicaProtectionProfileDetailsInstance.ReplicationPort = replicationPortInstance;
                                                            }
                                                            
                                                            JToken allowedAuthenticationTypeValue = replicationProviderSettingsValue["allowedAuthenticationType"];
                                                            if (allowedAuthenticationTypeValue != null && allowedAuthenticationTypeValue.Type != JTokenType.Null)
                                                            {
                                                                ushort allowedAuthenticationTypeInstance = ((ushort)allowedAuthenticationTypeValue);
                                                                hyperVReplicaProtectionProfileDetailsInstance.AllowedAuthenticationType = allowedAuthenticationTypeInstance;
                                                            }
                                                            
                                                            JToken replicaDeletionOptionValue = replicationProviderSettingsValue["replicaDeletionOption"];
                                                            if (replicaDeletionOptionValue != null && replicaDeletionOptionValue.Type != JTokenType.Null)
                                                            {
                                                                string replicaDeletionOptionInstance = ((string)replicaDeletionOptionValue);
                                                                hyperVReplicaProtectionProfileDetailsInstance.ReplicaDeletionOption = replicaDeletionOptionInstance;
                                                            }
                                                            
                                                            JToken replicationFrequencyInSecondsValue = replicationProviderSettingsValue["replicationFrequencyInSeconds"];
                                                            if (replicationFrequencyInSecondsValue != null && replicationFrequencyInSecondsValue.Type != JTokenType.Null)
                                                            {
                                                                ushort replicationFrequencyInSecondsInstance = ((ushort)replicationFrequencyInSecondsValue);
                                                                hyperVReplicaProtectionProfileDetailsInstance.ReplicationFrequencyInSeconds = replicationFrequencyInSecondsInstance;
                                                            }
                                                            propertiesInstance2.ReplicationProviderSettings = hyperVReplicaProtectionProfileDetailsInstance;
                                                        }
                                                        if (typeName == "HyperVReplicaAzureProtectionProfileDetails")
                                                        {
                                                            HyperVReplicaAzureProtectionProfileDetails hyperVReplicaAzureProtectionProfileDetailsInstance = new HyperVReplicaAzureProtectionProfileDetails();
                                                            
                                                            JToken recoveryPointHistoryDurationValue = replicationProviderSettingsValue["recoveryPointHistoryDuration"];
                                                            if (recoveryPointHistoryDurationValue != null && recoveryPointHistoryDurationValue.Type != JTokenType.Null)
                                                            {
                                                                int recoveryPointHistoryDurationInstance = ((int)recoveryPointHistoryDurationValue);
                                                                hyperVReplicaAzureProtectionProfileDetailsInstance.RecoveryPointHistoryDuration = recoveryPointHistoryDurationInstance;
                                                            }
                                                            
                                                            JToken applicationConsistentSnapshotFrequencyInHoursValue2 = replicationProviderSettingsValue["applicationConsistentSnapshotFrequencyInHours"];
                                                            if (applicationConsistentSnapshotFrequencyInHoursValue2 != null && applicationConsistentSnapshotFrequencyInHoursValue2.Type != JTokenType.Null)
                                                            {
                                                                int applicationConsistentSnapshotFrequencyInHoursInstance2 = ((int)applicationConsistentSnapshotFrequencyInHoursValue2);
                                                                hyperVReplicaAzureProtectionProfileDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance2;
                                                            }
                                                            
                                                            JToken replicationIntervalValue = replicationProviderSettingsValue["replicationInterval"];
                                                            if (replicationIntervalValue != null && replicationIntervalValue.Type != JTokenType.Null)
                                                            {
                                                                int replicationIntervalInstance = ((int)replicationIntervalValue);
                                                                hyperVReplicaAzureProtectionProfileDetailsInstance.ReplicationInterval = replicationIntervalInstance;
                                                            }
                                                            
                                                            JToken onlineReplicationStartTimeValue2 = replicationProviderSettingsValue["onlineReplicationStartTime"];
                                                            if (onlineReplicationStartTimeValue2 != null && onlineReplicationStartTimeValue2.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan onlineReplicationStartTimeInstance2 = TimeSpan.Parse(((string)onlineReplicationStartTimeValue2), CultureInfo.InvariantCulture);
                                                                hyperVReplicaAzureProtectionProfileDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance2;
                                                            }
                                                            
                                                            JToken encryptionValue = replicationProviderSettingsValue["encryption"];
                                                            if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                                            {
                                                                string encryptionInstance = ((string)encryptionValue);
                                                                hyperVReplicaAzureProtectionProfileDetailsInstance.Encryption = encryptionInstance;
                                                            }
                                                            
                                                            JToken activeStorageAccountValue = replicationProviderSettingsValue["activeStorageAccount"];
                                                            if (activeStorageAccountValue != null && activeStorageAccountValue.Type != JTokenType.Null)
                                                            {
                                                                CustomerStorageAccount activeStorageAccountInstance = new CustomerStorageAccount();
                                                                hyperVReplicaAzureProtectionProfileDetailsInstance.ActiveStorageAccount = activeStorageAccountInstance;
                                                                
                                                                JToken storageAccountNameValue = activeStorageAccountValue["storageAccountName"];
                                                                if (storageAccountNameValue != null && storageAccountNameValue.Type != JTokenType.Null)
                                                                {
                                                                    string storageAccountNameInstance = ((string)storageAccountNameValue);
                                                                    activeStorageAccountInstance.StorageAccountName = storageAccountNameInstance;
                                                                }
                                                                
                                                                JToken subscriptionIdValue = activeStorageAccountValue["subscriptionId"];
                                                                if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                                                {
                                                                    string subscriptionIdInstance = ((string)subscriptionIdValue);
                                                                    activeStorageAccountInstance.SubscriptionId = subscriptionIdInstance;
                                                                }
                                                            }
                                                            propertiesInstance2.ReplicationProviderSettings = hyperVReplicaAzureProtectionProfileDetailsInstance;
                                                        }
                                                    }
                                                    
                                                    JToken associationStatusValue = propertiesValue2["associationStatus"];
                                                    if (associationStatusValue != null && associationStatusValue.Type != JTokenType.Null)
                                                    {
                                                        string associationStatusInstance = ((string)associationStatusValue);
                                                        propertiesInstance2.AssociationStatus = associationStatusInstance;
                                                    }
                                                    
                                                    JToken associationDetailArray = propertiesValue2["associationDetail"];
                                                    if (associationDetailArray != null && associationDetailArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken associationDetailValue in ((JArray)associationDetailArray))
                                                        {
                                                            ProtectionProfileAssociationDetails protectionProfileAssociationDetailsInstance = new ProtectionProfileAssociationDetails();
                                                            propertiesInstance2.AssociationDetail.Add(protectionProfileAssociationDetailsInstance);
                                                            
                                                            JToken primaryProtectionContainerIdValue = associationDetailValue["primaryProtectionContainerId"];
                                                            if (primaryProtectionContainerIdValue != null && primaryProtectionContainerIdValue.Type != JTokenType.Null)
                                                            {
                                                                string primaryProtectionContainerIdInstance = ((string)primaryProtectionContainerIdValue);
                                                                protectionProfileAssociationDetailsInstance.PrimaryProtectionContainerId = primaryProtectionContainerIdInstance;
                                                            }
                                                            
                                                            JToken recoveryProtectionContainerIdValue = associationDetailValue["recoveryProtectionContainerId"];
                                                            if (recoveryProtectionContainerIdValue != null && recoveryProtectionContainerIdValue.Type != JTokenType.Null)
                                                            {
                                                                string recoveryProtectionContainerIdInstance = ((string)recoveryProtectionContainerIdValue);
                                                                protectionProfileAssociationDetailsInstance.RecoveryProtectionContainerId = recoveryProtectionContainerIdInstance;
                                                            }
                                                            
                                                            JToken associationStatusValue2 = associationDetailValue["associationStatus"];
                                                            if (associationStatusValue2 != null && associationStatusValue2.Type != JTokenType.Null)
                                                            {
                                                                string associationStatusInstance2 = ((string)associationStatusValue2);
                                                                protectionProfileAssociationDetailsInstance.AssociationStatus = associationStatusInstance2;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken idValue = availableProtectionProfilesValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    protectionProfileInstance.Id = idInstance;
                                                }
                                                
                                                JToken nameValue = availableProtectionProfilesValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    protectionProfileInstance.Name = nameInstance;
                                                }
                                                
                                                JToken typeValue = availableProtectionProfilesValue["type"];
                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                {
                                                    string typeInstance = ((string)typeValue);
                                                    protectionProfileInstance.Type = typeInstance;
                                                }
                                                
                                                JToken locationValue = availableProtectionProfilesValue["location"];
                                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                                {
                                                    string locationInstance = ((string)locationValue);
                                                    protectionProfileInstance.Location = locationInstance;
                                                }
                                                
                                                JToken tagsSequenceElement = ((JToken)availableProtectionProfilesValue["tags"]);
                                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property in tagsSequenceElement)
                                                    {
                                                        string tagsKey = ((string)property.Name);
                                                        string tagsValue = ((string)property.Value);
                                                        protectionProfileInstance.Tags.Add(tagsKey, tagsValue);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue2 = valueValue["id"];
                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                    {
                                        string idInstance2 = ((string)idValue2);
                                        protectionContainerInstance.Id = idInstance2;
                                    }
                                    
                                    JToken nameValue2 = valueValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        protectionContainerInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken typeValue2 = valueValue["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        protectionContainerInstance.Type = typeInstance2;
                                    }
                                    
                                    JToken locationValue2 = valueValue["location"];
                                    if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                    {
                                        string locationInstance2 = ((string)locationValue2);
                                        protectionContainerInstance.Location = locationInstance2;
                                    }
                                    
                                    JToken tagsSequenceElement2 = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in tagsSequenceElement2)
                                        {
                                            string tagsKey2 = ((string)property2.Name);
                                            string tagsValue2 = ((string)property2.Value);
                                            protectionContainerInstance.Tags.Add(tagsKey2, tagsValue2);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
