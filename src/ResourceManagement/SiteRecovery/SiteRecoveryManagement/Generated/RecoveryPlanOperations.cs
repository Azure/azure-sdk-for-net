// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.SiteRecovery;
using Microsoft.Azure.Management.SiteRecovery.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.SiteRecovery
{
    /// <summary>
    /// Definition of recovery plan operations for the Site Recovery extension.
    /// </summary>
    internal partial class RecoveryPlanOperations : IServiceOperations<SiteRecoveryManagementClient>, IRecoveryPlanOperations
    {
        /// <summary>
        /// Initializes a new instance of the RecoveryPlanOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal RecoveryPlanOperations(SiteRecoveryManagementClient client)
        {
            this._client = client;
        }
        
        private SiteRecoveryManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.SiteRecovery.SiteRecoveryManagementClient.
        /// </summary>
        public SiteRecoveryManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Commit failover of the recovery plan.
        /// </summary>
        /// <param name='recoveryPlanName'>
        /// Required. Recovery plan name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginCommitFailoverAsync(string recoveryPlanName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (recoveryPlanName == null)
            {
                throw new ArgumentNullException("recoveryPlanName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("recoveryPlanName", recoveryPlanName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginCommitFailoverAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationRecoveryPlans/";
            url = url + Uri.EscapeDataString(recoveryPlanName);
            url = url + "/failoverCommit";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Creates a recovery plan.
        /// </summary>
        /// <param name='recoveryPlanName'>
        /// Required. Recovery plan name.
        /// </param>
        /// <param name='input'>
        /// Required. Create recovery plan input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginCreatingAsync(string recoveryPlanName, CreateRecoveryPlanInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (recoveryPlanName == null)
            {
                throw new ArgumentNullException("recoveryPlanName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            if (input.Properties == null)
            {
                throw new ArgumentNullException("input.Properties");
            }
            if (input.Properties.Groups == null)
            {
                throw new ArgumentNullException("input.Properties.Groups");
            }
            if (input.Properties.Groups != null)
            {
                foreach (RecoveryPlanGroup groupsParameterItem in input.Properties.Groups)
                {
                    if (groupsParameterItem.EndGroupActions != null)
                    {
                        foreach (RecoveryPlanAction endGroupActionsParameterItem in groupsParameterItem.EndGroupActions)
                        {
                            if (endGroupActionsParameterItem.ActionName == null)
                            {
                                throw new ArgumentNullException("input.Properties.Groups.EndGroupActions.ActionName");
                            }
                            if (endGroupActionsParameterItem.CustomDetails == null)
                            {
                                throw new ArgumentNullException("input.Properties.Groups.EndGroupActions.CustomDetails");
                            }
                            if (endGroupActionsParameterItem.FailoverDirections == null)
                            {
                                throw new ArgumentNullException("input.Properties.Groups.EndGroupActions.FailoverDirections");
                            }
                            if (endGroupActionsParameterItem.FailoverTypes == null)
                            {
                                throw new ArgumentNullException("input.Properties.Groups.EndGroupActions.FailoverTypes");
                            }
                        }
                    }
                    if (groupsParameterItem.GroupType == null)
                    {
                        throw new ArgumentNullException("input.Properties.Groups.GroupType");
                    }
                    if (groupsParameterItem.ReplicationProtectedItems != null)
                    {
                        foreach (RecoveryPlanProtectedItem replicationProtectedItemsParameterItem in groupsParameterItem.ReplicationProtectedItems)
                        {
                            if (replicationProtectedItemsParameterItem.Id == null)
                            {
                                throw new ArgumentNullException("input.Properties.Groups.ReplicationProtectedItems.Id");
                            }
                        }
                    }
                    if (groupsParameterItem.StartGroupActions != null)
                    {
                        foreach (RecoveryPlanAction startGroupActionsParameterItem in groupsParameterItem.StartGroupActions)
                        {
                            if (startGroupActionsParameterItem.ActionName == null)
                            {
                                throw new ArgumentNullException("input.Properties.Groups.StartGroupActions.ActionName");
                            }
                            if (startGroupActionsParameterItem.CustomDetails == null)
                            {
                                throw new ArgumentNullException("input.Properties.Groups.StartGroupActions.CustomDetails");
                            }
                            if (startGroupActionsParameterItem.FailoverDirections == null)
                            {
                                throw new ArgumentNullException("input.Properties.Groups.StartGroupActions.FailoverDirections");
                            }
                            if (startGroupActionsParameterItem.FailoverTypes == null)
                            {
                                throw new ArgumentNullException("input.Properties.Groups.StartGroupActions.FailoverTypes");
                            }
                        }
                    }
                }
            }
            if (input.Properties.PrimaryFabricId == null)
            {
                throw new ArgumentNullException("input.Properties.PrimaryFabricId");
            }
            if (input.Properties.RecoveryFabricId == null)
            {
                throw new ArgumentNullException("input.Properties.RecoveryFabricId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("recoveryPlanName", recoveryPlanName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginCreatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationRecoveryPlans/";
            url = url + Uri.EscapeDataString(recoveryPlanName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject createRecoveryPlanInputValue = new JObject();
                requestDoc = createRecoveryPlanInputValue;
                
                JObject propertiesValue = new JObject();
                createRecoveryPlanInputValue["properties"] = propertiesValue;
                
                propertiesValue["primaryFabricId"] = input.Properties.PrimaryFabricId;
                
                propertiesValue["recoveryFabricId"] = input.Properties.RecoveryFabricId;
                
                if (input.Properties.FailoverDeploymentModel != null)
                {
                    propertiesValue["failoverDeploymentModel"] = input.Properties.FailoverDeploymentModel;
                }
                
                if (input.Properties.Groups != null)
                {
                    if (input.Properties.Groups is ILazyCollection == false || ((ILazyCollection)input.Properties.Groups).IsInitialized)
                    {
                        JArray groupsArray = new JArray();
                        foreach (RecoveryPlanGroup groupsItem in input.Properties.Groups)
                        {
                            JObject recoveryPlanGroupValue = new JObject();
                            groupsArray.Add(recoveryPlanGroupValue);
                            
                            recoveryPlanGroupValue["groupType"] = groupsItem.GroupType;
                            
                            if (groupsItem.ReplicationProtectedItems != null)
                            {
                                if (groupsItem.ReplicationProtectedItems is ILazyCollection == false || ((ILazyCollection)groupsItem.ReplicationProtectedItems).IsInitialized)
                                {
                                    JArray replicationProtectedItemsArray = new JArray();
                                    foreach (RecoveryPlanProtectedItem replicationProtectedItemsItem in groupsItem.ReplicationProtectedItems)
                                    {
                                        JObject recoveryPlanProtectedItemValue = new JObject();
                                        replicationProtectedItemsArray.Add(recoveryPlanProtectedItemValue);
                                        
                                        recoveryPlanProtectedItemValue["id"] = replicationProtectedItemsItem.Id;
                                        
                                        if (replicationProtectedItemsItem.VirtualMachineId != null)
                                        {
                                            recoveryPlanProtectedItemValue["virtualMachineId"] = replicationProtectedItemsItem.VirtualMachineId;
                                        }
                                    }
                                    recoveryPlanGroupValue["replicationProtectedItems"] = replicationProtectedItemsArray;
                                }
                            }
                            
                            if (groupsItem.StartGroupActions != null)
                            {
                                if (groupsItem.StartGroupActions is ILazyCollection == false || ((ILazyCollection)groupsItem.StartGroupActions).IsInitialized)
                                {
                                    JArray startGroupActionsArray = new JArray();
                                    foreach (RecoveryPlanAction startGroupActionsItem in groupsItem.StartGroupActions)
                                    {
                                        JObject recoveryPlanActionValue = new JObject();
                                        startGroupActionsArray.Add(recoveryPlanActionValue);
                                        
                                        recoveryPlanActionValue["actionName"] = startGroupActionsItem.ActionName;
                                        
                                        if (startGroupActionsItem.FailoverTypes != null)
                                        {
                                            if (startGroupActionsItem.FailoverTypes is ILazyCollection == false || ((ILazyCollection)startGroupActionsItem.FailoverTypes).IsInitialized)
                                            {
                                                JArray failoverTypesArray = new JArray();
                                                foreach (string failoverTypesItem in startGroupActionsItem.FailoverTypes)
                                                {
                                                    failoverTypesArray.Add(failoverTypesItem);
                                                }
                                                recoveryPlanActionValue["failoverTypes"] = failoverTypesArray;
                                            }
                                        }
                                        
                                        if (startGroupActionsItem.FailoverDirections != null)
                                        {
                                            if (startGroupActionsItem.FailoverDirections is ILazyCollection == false || ((ILazyCollection)startGroupActionsItem.FailoverDirections).IsInitialized)
                                            {
                                                JArray failoverDirectionsArray = new JArray();
                                                foreach (string failoverDirectionsItem in startGroupActionsItem.FailoverDirections)
                                                {
                                                    failoverDirectionsArray.Add(failoverDirectionsItem);
                                                }
                                                recoveryPlanActionValue["failoverDirections"] = failoverDirectionsArray;
                                            }
                                        }
                                        
                                        JObject customDetailsValue = new JObject();
                                        recoveryPlanActionValue["customDetails"] = customDetailsValue;
                                        if (startGroupActionsItem.CustomDetails is RecoveryPlanScriptActionDetails)
                                        {
                                            customDetailsValue["instanceType"] = "ScriptActionDetails";
                                            RecoveryPlanScriptActionDetails derived = ((RecoveryPlanScriptActionDetails)startGroupActionsItem.CustomDetails);
                                            
                                            customDetailsValue["path"] = derived.Path;
                                            
                                            if (derived.Timeout != null)
                                            {
                                                customDetailsValue["timeout"] = derived.Timeout.Value.ToString();
                                            }
                                            
                                            customDetailsValue["fabricLocation"] = derived.FabricLocation;
                                            
                                            if (derived.InstanceType != null)
                                            {
                                                customDetailsValue["instanceType"] = derived.InstanceType;
                                            }
                                        }
                                        if (startGroupActionsItem.CustomDetails is RecoveryPlanAutomationRunbookActionDetails)
                                        {
                                            customDetailsValue["instanceType"] = "AutomationRunbookActionDetails";
                                            RecoveryPlanAutomationRunbookActionDetails derived2 = ((RecoveryPlanAutomationRunbookActionDetails)startGroupActionsItem.CustomDetails);
                                            
                                            customDetailsValue["runbookId"] = derived2.RunbookId;
                                            
                                            if (derived2.Timeout != null)
                                            {
                                                customDetailsValue["timeout"] = derived2.Timeout.Value.ToString();
                                            }
                                            
                                            customDetailsValue["fabricLocation"] = derived2.FabricLocation;
                                            
                                            if (derived2.InstanceType != null)
                                            {
                                                customDetailsValue["instanceType"] = derived2.InstanceType;
                                            }
                                        }
                                        if (startGroupActionsItem.CustomDetails is RecoveryPlanManualActionDetails)
                                        {
                                            customDetailsValue["instanceType"] = "ManualActionDetails";
                                            RecoveryPlanManualActionDetails derived3 = ((RecoveryPlanManualActionDetails)startGroupActionsItem.CustomDetails);
                                            
                                            if (derived3.Description != null)
                                            {
                                                customDetailsValue["description"] = derived3.Description;
                                            }
                                            
                                            if (derived3.InstanceType != null)
                                            {
                                                customDetailsValue["instanceType"] = derived3.InstanceType;
                                            }
                                        }
                                    }
                                    recoveryPlanGroupValue["startGroupActions"] = startGroupActionsArray;
                                }
                            }
                            
                            if (groupsItem.EndGroupActions != null)
                            {
                                if (groupsItem.EndGroupActions is ILazyCollection == false || ((ILazyCollection)groupsItem.EndGroupActions).IsInitialized)
                                {
                                    JArray endGroupActionsArray = new JArray();
                                    foreach (RecoveryPlanAction endGroupActionsItem in groupsItem.EndGroupActions)
                                    {
                                        JObject recoveryPlanActionValue2 = new JObject();
                                        endGroupActionsArray.Add(recoveryPlanActionValue2);
                                        
                                        recoveryPlanActionValue2["actionName"] = endGroupActionsItem.ActionName;
                                        
                                        if (endGroupActionsItem.FailoverTypes != null)
                                        {
                                            if (endGroupActionsItem.FailoverTypes is ILazyCollection == false || ((ILazyCollection)endGroupActionsItem.FailoverTypes).IsInitialized)
                                            {
                                                JArray failoverTypesArray2 = new JArray();
                                                foreach (string failoverTypesItem2 in endGroupActionsItem.FailoverTypes)
                                                {
                                                    failoverTypesArray2.Add(failoverTypesItem2);
                                                }
                                                recoveryPlanActionValue2["failoverTypes"] = failoverTypesArray2;
                                            }
                                        }
                                        
                                        if (endGroupActionsItem.FailoverDirections != null)
                                        {
                                            if (endGroupActionsItem.FailoverDirections is ILazyCollection == false || ((ILazyCollection)endGroupActionsItem.FailoverDirections).IsInitialized)
                                            {
                                                JArray failoverDirectionsArray2 = new JArray();
                                                foreach (string failoverDirectionsItem2 in endGroupActionsItem.FailoverDirections)
                                                {
                                                    failoverDirectionsArray2.Add(failoverDirectionsItem2);
                                                }
                                                recoveryPlanActionValue2["failoverDirections"] = failoverDirectionsArray2;
                                            }
                                        }
                                        
                                        JObject customDetailsValue2 = new JObject();
                                        recoveryPlanActionValue2["customDetails"] = customDetailsValue2;
                                        if (endGroupActionsItem.CustomDetails is RecoveryPlanScriptActionDetails)
                                        {
                                            customDetailsValue2["instanceType"] = "ScriptActionDetails";
                                            RecoveryPlanScriptActionDetails derived4 = ((RecoveryPlanScriptActionDetails)endGroupActionsItem.CustomDetails);
                                            
                                            customDetailsValue2["path"] = derived4.Path;
                                            
                                            if (derived4.Timeout != null)
                                            {
                                                customDetailsValue2["timeout"] = derived4.Timeout.Value.ToString();
                                            }
                                            
                                            customDetailsValue2["fabricLocation"] = derived4.FabricLocation;
                                            
                                            if (derived4.InstanceType != null)
                                            {
                                                customDetailsValue2["instanceType"] = derived4.InstanceType;
                                            }
                                        }
                                        if (endGroupActionsItem.CustomDetails is RecoveryPlanAutomationRunbookActionDetails)
                                        {
                                            customDetailsValue2["instanceType"] = "AutomationRunbookActionDetails";
                                            RecoveryPlanAutomationRunbookActionDetails derived5 = ((RecoveryPlanAutomationRunbookActionDetails)endGroupActionsItem.CustomDetails);
                                            
                                            customDetailsValue2["runbookId"] = derived5.RunbookId;
                                            
                                            if (derived5.Timeout != null)
                                            {
                                                customDetailsValue2["timeout"] = derived5.Timeout.Value.ToString();
                                            }
                                            
                                            customDetailsValue2["fabricLocation"] = derived5.FabricLocation;
                                            
                                            if (derived5.InstanceType != null)
                                            {
                                                customDetailsValue2["instanceType"] = derived5.InstanceType;
                                            }
                                        }
                                        if (endGroupActionsItem.CustomDetails is RecoveryPlanManualActionDetails)
                                        {
                                            customDetailsValue2["instanceType"] = "ManualActionDetails";
                                            RecoveryPlanManualActionDetails derived6 = ((RecoveryPlanManualActionDetails)endGroupActionsItem.CustomDetails);
                                            
                                            if (derived6.Description != null)
                                            {
                                                customDetailsValue2["description"] = derived6.Description;
                                            }
                                            
                                            if (derived6.InstanceType != null)
                                            {
                                                customDetailsValue2["instanceType"] = derived6.InstanceType;
                                            }
                                        }
                                    }
                                    recoveryPlanGroupValue["endGroupActions"] = endGroupActionsArray;
                                }
                            }
                        }
                        propertiesValue["groups"] = groupsArray;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes a recovery plan.
        /// </summary>
        /// <param name='recoveryPlanName'>
        /// Required. Recovery plan name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginDeletingAsync(string recoveryPlanName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (recoveryPlanName == null)
            {
                throw new ArgumentNullException("recoveryPlanName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("recoveryPlanName", recoveryPlanName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationRecoveryPlans/";
            url = url + Uri.EscapeDataString(recoveryPlanName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Planned failover of the recovery plan.
        /// </summary>
        /// <param name='recoveryPlanName'>
        /// Required. Recovery plan name.
        /// </param>
        /// <param name='input'>
        /// Required. Recovery plan planned failover input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginPlannedFailoverAsync(string recoveryPlanName, RecoveryPlanPlannedFailoverInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (recoveryPlanName == null)
            {
                throw new ArgumentNullException("recoveryPlanName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            if (input.Properties == null)
            {
                throw new ArgumentNullException("input.Properties");
            }
            if (input.Properties.FailoverDirection == null)
            {
                throw new ArgumentNullException("input.Properties.FailoverDirection");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("recoveryPlanName", recoveryPlanName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginPlannedFailoverAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationRecoveryPlans/";
            url = url + Uri.EscapeDataString(recoveryPlanName);
            url = url + "/plannedFailover";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject recoveryPlanPlannedFailoverInputValue = new JObject();
                requestDoc = recoveryPlanPlannedFailoverInputValue;
                
                JObject propertiesValue = new JObject();
                recoveryPlanPlannedFailoverInputValue["properties"] = propertiesValue;
                
                propertiesValue["failoverDirection"] = input.Properties.FailoverDirection;
                
                if (input.Properties.ProviderSpecificDetails != null)
                {
                    if (input.Properties.ProviderSpecificDetails is ILazyCollection == false || ((ILazyCollection)input.Properties.ProviderSpecificDetails).IsInitialized)
                    {
                        JArray providerSpecificDetailsArray = new JArray();
                        foreach (RecoveryPlanProviderSpecificFailoverInput providerSpecificDetailsItem in input.Properties.ProviderSpecificDetails)
                        {
                            JObject recoveryPlanProviderSpecificFailoverInputValue = new JObject();
                            providerSpecificDetailsArray.Add(recoveryPlanProviderSpecificFailoverInputValue);
                            if (providerSpecificDetailsItem is RecoveryPlanHyperVReplicaAzureFailoverInput)
                            {
                                recoveryPlanProviderSpecificFailoverInputValue["instanceType"] = "HyperVReplicaAzure";
                                RecoveryPlanHyperVReplicaAzureFailoverInput derived = ((RecoveryPlanHyperVReplicaAzureFailoverInput)providerSpecificDetailsItem);
                                
                                recoveryPlanProviderSpecificFailoverInputValue["vaultLocation"] = derived.VaultLocation;
                                
                                if (derived.PrimaryKekCertificatePfx != null)
                                {
                                    recoveryPlanProviderSpecificFailoverInputValue["primaryKekCertificatePfx"] = derived.PrimaryKekCertificatePfx;
                                }
                                
                                if (derived.SecondaryKekCertificatePfx != null)
                                {
                                    recoveryPlanProviderSpecificFailoverInputValue["secondaryKekCertificatePfx"] = derived.SecondaryKekCertificatePfx;
                                }
                                
                                if (derived.InstanceType != null)
                                {
                                    recoveryPlanProviderSpecificFailoverInputValue["instanceType"] = derived.InstanceType;
                                }
                            }
                            if (providerSpecificDetailsItem is RecoveryPlanHyperVReplicaAzureFailbackInput)
                            {
                                recoveryPlanProviderSpecificFailoverInputValue["instanceType"] = "HyperVReplicaAzureFailback";
                                RecoveryPlanHyperVReplicaAzureFailbackInput derived2 = ((RecoveryPlanHyperVReplicaAzureFailbackInput)providerSpecificDetailsItem);
                                
                                recoveryPlanProviderSpecificFailoverInputValue["dataSyncOption"] = derived2.DataSyncOption;
                                
                                recoveryPlanProviderSpecificFailoverInputValue["recoveryVmCreationOption"] = derived2.RecoveryVmCreationOption;
                                
                                if (derived2.InstanceType != null)
                                {
                                    recoveryPlanProviderSpecificFailoverInputValue["instanceType"] = derived2.InstanceType;
                                }
                            }
                            if (providerSpecificDetailsItem is RecoveryPlanInMageAzureV2FailoverInput)
                            {
                                recoveryPlanProviderSpecificFailoverInputValue["instanceType"] = "InMageAzureV2";
                                RecoveryPlanInMageAzureV2FailoverInput derived3 = ((RecoveryPlanInMageAzureV2FailoverInput)providerSpecificDetailsItem);
                                
                                recoveryPlanProviderSpecificFailoverInputValue["vaultLocation"] = derived3.VaultLocation;
                                
                                recoveryPlanProviderSpecificFailoverInputValue["recoveryPointType"] = derived3.RecoveryPointType;
                                
                                if (derived3.InstanceType != null)
                                {
                                    recoveryPlanProviderSpecificFailoverInputValue["instanceType"] = derived3.InstanceType;
                                }
                            }
                            if (providerSpecificDetailsItem is RecoveryPlanInMageFailoverInput)
                            {
                                recoveryPlanProviderSpecificFailoverInputValue["instanceType"] = "InMage";
                                RecoveryPlanInMageFailoverInput derived4 = ((RecoveryPlanInMageFailoverInput)providerSpecificDetailsItem);
                                
                                recoveryPlanProviderSpecificFailoverInputValue["recoveryPointType"] = derived4.RecoveryPointType;
                                
                                if (derived4.InstanceType != null)
                                {
                                    recoveryPlanProviderSpecificFailoverInputValue["instanceType"] = derived4.InstanceType;
                                }
                            }
                        }
                        propertiesValue["providerSpecificDetails"] = providerSpecificDetailsArray;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Reprotects the recovery plan.
        /// </summary>
        /// <param name='recoveryPlanName'>
        /// Required. Recovery plan name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginReprotectAsync(string recoveryPlanName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (recoveryPlanName == null)
            {
                throw new ArgumentNullException("recoveryPlanName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("recoveryPlanName", recoveryPlanName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginReprotectAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationRecoveryPlans/";
            url = url + Uri.EscapeDataString(recoveryPlanName);
            url = url + "/reProtect";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Test failover of the recovery plan.
        /// </summary>
        /// <param name='recoveryPlanName'>
        /// Required. Recovery plan name.
        /// </param>
        /// <param name='input'>
        /// Required. Recovery plan test failover input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginTestFailoverAsync(string recoveryPlanName, RecoveryPlanTestFailoverInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (recoveryPlanName == null)
            {
                throw new ArgumentNullException("recoveryPlanName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            if (input.Properties == null)
            {
                throw new ArgumentNullException("input.Properties");
            }
            if (input.Properties.FailoverDirection == null)
            {
                throw new ArgumentNullException("input.Properties.FailoverDirection");
            }
            if (input.Properties.NetworkType == null)
            {
                throw new ArgumentNullException("input.Properties.NetworkType");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("recoveryPlanName", recoveryPlanName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginTestFailoverAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationRecoveryPlans/";
            url = url + Uri.EscapeDataString(recoveryPlanName);
            url = url + "/testFailover";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject recoveryPlanTestFailoverInputValue = new JObject();
                requestDoc = recoveryPlanTestFailoverInputValue;
                
                JObject propertiesValue = new JObject();
                recoveryPlanTestFailoverInputValue["properties"] = propertiesValue;
                
                propertiesValue["failoverDirection"] = input.Properties.FailoverDirection;
                
                propertiesValue["networkType"] = input.Properties.NetworkType;
                
                if (input.Properties.NetworkId != null)
                {
                    propertiesValue["networkId"] = input.Properties.NetworkId;
                }
                
                if (input.Properties.ProviderSpecificDetails != null)
                {
                    if (input.Properties.ProviderSpecificDetails is ILazyCollection == false || ((ILazyCollection)input.Properties.ProviderSpecificDetails).IsInitialized)
                    {
                        JArray providerSpecificDetailsArray = new JArray();
                        foreach (RecoveryPlanProviderSpecificFailoverInput providerSpecificDetailsItem in input.Properties.ProviderSpecificDetails)
                        {
                            JObject recoveryPlanProviderSpecificFailoverInputValue = new JObject();
                            providerSpecificDetailsArray.Add(recoveryPlanProviderSpecificFailoverInputValue);
                            if (providerSpecificDetailsItem is RecoveryPlanHyperVReplicaAzureFailoverInput)
                            {
                                recoveryPlanProviderSpecificFailoverInputValue["instanceType"] = "HyperVReplicaAzure";
                                RecoveryPlanHyperVReplicaAzureFailoverInput derived = ((RecoveryPlanHyperVReplicaAzureFailoverInput)providerSpecificDetailsItem);
                                
                                recoveryPlanProviderSpecificFailoverInputValue["vaultLocation"] = derived.VaultLocation;
                                
                                if (derived.PrimaryKekCertificatePfx != null)
                                {
                                    recoveryPlanProviderSpecificFailoverInputValue["primaryKekCertificatePfx"] = derived.PrimaryKekCertificatePfx;
                                }
                                
                                if (derived.SecondaryKekCertificatePfx != null)
                                {
                                    recoveryPlanProviderSpecificFailoverInputValue["secondaryKekCertificatePfx"] = derived.SecondaryKekCertificatePfx;
                                }
                                
                                if (derived.InstanceType != null)
                                {
                                    recoveryPlanProviderSpecificFailoverInputValue["instanceType"] = derived.InstanceType;
                                }
                            }
                            if (providerSpecificDetailsItem is RecoveryPlanHyperVReplicaAzureFailbackInput)
                            {
                                recoveryPlanProviderSpecificFailoverInputValue["instanceType"] = "HyperVReplicaAzureFailback";
                                RecoveryPlanHyperVReplicaAzureFailbackInput derived2 = ((RecoveryPlanHyperVReplicaAzureFailbackInput)providerSpecificDetailsItem);
                                
                                recoveryPlanProviderSpecificFailoverInputValue["dataSyncOption"] = derived2.DataSyncOption;
                                
                                recoveryPlanProviderSpecificFailoverInputValue["recoveryVmCreationOption"] = derived2.RecoveryVmCreationOption;
                                
                                if (derived2.InstanceType != null)
                                {
                                    recoveryPlanProviderSpecificFailoverInputValue["instanceType"] = derived2.InstanceType;
                                }
                            }
                            if (providerSpecificDetailsItem is RecoveryPlanInMageAzureV2FailoverInput)
                            {
                                recoveryPlanProviderSpecificFailoverInputValue["instanceType"] = "InMageAzureV2";
                                RecoveryPlanInMageAzureV2FailoverInput derived3 = ((RecoveryPlanInMageAzureV2FailoverInput)providerSpecificDetailsItem);
                                
                                recoveryPlanProviderSpecificFailoverInputValue["vaultLocation"] = derived3.VaultLocation;
                                
                                recoveryPlanProviderSpecificFailoverInputValue["recoveryPointType"] = derived3.RecoveryPointType;
                                
                                if (derived3.InstanceType != null)
                                {
                                    recoveryPlanProviderSpecificFailoverInputValue["instanceType"] = derived3.InstanceType;
                                }
                            }
                            if (providerSpecificDetailsItem is RecoveryPlanInMageFailoverInput)
                            {
                                recoveryPlanProviderSpecificFailoverInputValue["instanceType"] = "InMage";
                                RecoveryPlanInMageFailoverInput derived4 = ((RecoveryPlanInMageFailoverInput)providerSpecificDetailsItem);
                                
                                recoveryPlanProviderSpecificFailoverInputValue["recoveryPointType"] = derived4.RecoveryPointType;
                                
                                if (derived4.InstanceType != null)
                                {
                                    recoveryPlanProviderSpecificFailoverInputValue["instanceType"] = derived4.InstanceType;
                                }
                            }
                        }
                        propertiesValue["providerSpecificDetails"] = providerSpecificDetailsArray;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Unplanned failover of the recovery plan.
        /// </summary>
        /// <param name='recoveryPlanName'>
        /// Required. Recovery plan name.
        /// </param>
        /// <param name='input'>
        /// Required. Recovery plan unplanned failover input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginUnplannedFailoverAsync(string recoveryPlanName, RecoveryPlanUnplannedFailoverInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (recoveryPlanName == null)
            {
                throw new ArgumentNullException("recoveryPlanName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            if (input.Properties == null)
            {
                throw new ArgumentNullException("input.Properties");
            }
            if (input.Properties.FailoverDirection == null)
            {
                throw new ArgumentNullException("input.Properties.FailoverDirection");
            }
            if (input.Properties.SourceSiteOperations == null)
            {
                throw new ArgumentNullException("input.Properties.SourceSiteOperations");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("recoveryPlanName", recoveryPlanName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginUnplannedFailoverAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationRecoveryPlans/";
            url = url + Uri.EscapeDataString(recoveryPlanName);
            url = url + "/unplannedFailover";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject recoveryPlanUnplannedFailoverInputValue = new JObject();
                requestDoc = recoveryPlanUnplannedFailoverInputValue;
                
                JObject propertiesValue = new JObject();
                recoveryPlanUnplannedFailoverInputValue["properties"] = propertiesValue;
                
                propertiesValue["failoverDirection"] = input.Properties.FailoverDirection;
                
                propertiesValue["sourceSiteOperations"] = input.Properties.SourceSiteOperations;
                
                if (input.Properties.ProviderSpecificDetails != null)
                {
                    if (input.Properties.ProviderSpecificDetails is ILazyCollection == false || ((ILazyCollection)input.Properties.ProviderSpecificDetails).IsInitialized)
                    {
                        JArray providerSpecificDetailsArray = new JArray();
                        foreach (RecoveryPlanProviderSpecificFailoverInput providerSpecificDetailsItem in input.Properties.ProviderSpecificDetails)
                        {
                            JObject recoveryPlanProviderSpecificFailoverInputValue = new JObject();
                            providerSpecificDetailsArray.Add(recoveryPlanProviderSpecificFailoverInputValue);
                            if (providerSpecificDetailsItem is RecoveryPlanHyperVReplicaAzureFailoverInput)
                            {
                                recoveryPlanProviderSpecificFailoverInputValue["instanceType"] = "HyperVReplicaAzure";
                                RecoveryPlanHyperVReplicaAzureFailoverInput derived = ((RecoveryPlanHyperVReplicaAzureFailoverInput)providerSpecificDetailsItem);
                                
                                recoveryPlanProviderSpecificFailoverInputValue["vaultLocation"] = derived.VaultLocation;
                                
                                if (derived.PrimaryKekCertificatePfx != null)
                                {
                                    recoveryPlanProviderSpecificFailoverInputValue["primaryKekCertificatePfx"] = derived.PrimaryKekCertificatePfx;
                                }
                                
                                if (derived.SecondaryKekCertificatePfx != null)
                                {
                                    recoveryPlanProviderSpecificFailoverInputValue["secondaryKekCertificatePfx"] = derived.SecondaryKekCertificatePfx;
                                }
                                
                                if (derived.InstanceType != null)
                                {
                                    recoveryPlanProviderSpecificFailoverInputValue["instanceType"] = derived.InstanceType;
                                }
                            }
                            if (providerSpecificDetailsItem is RecoveryPlanHyperVReplicaAzureFailbackInput)
                            {
                                recoveryPlanProviderSpecificFailoverInputValue["instanceType"] = "HyperVReplicaAzureFailback";
                                RecoveryPlanHyperVReplicaAzureFailbackInput derived2 = ((RecoveryPlanHyperVReplicaAzureFailbackInput)providerSpecificDetailsItem);
                                
                                recoveryPlanProviderSpecificFailoverInputValue["dataSyncOption"] = derived2.DataSyncOption;
                                
                                recoveryPlanProviderSpecificFailoverInputValue["recoveryVmCreationOption"] = derived2.RecoveryVmCreationOption;
                                
                                if (derived2.InstanceType != null)
                                {
                                    recoveryPlanProviderSpecificFailoverInputValue["instanceType"] = derived2.InstanceType;
                                }
                            }
                            if (providerSpecificDetailsItem is RecoveryPlanInMageAzureV2FailoverInput)
                            {
                                recoveryPlanProviderSpecificFailoverInputValue["instanceType"] = "InMageAzureV2";
                                RecoveryPlanInMageAzureV2FailoverInput derived3 = ((RecoveryPlanInMageAzureV2FailoverInput)providerSpecificDetailsItem);
                                
                                recoveryPlanProviderSpecificFailoverInputValue["vaultLocation"] = derived3.VaultLocation;
                                
                                recoveryPlanProviderSpecificFailoverInputValue["recoveryPointType"] = derived3.RecoveryPointType;
                                
                                if (derived3.InstanceType != null)
                                {
                                    recoveryPlanProviderSpecificFailoverInputValue["instanceType"] = derived3.InstanceType;
                                }
                            }
                            if (providerSpecificDetailsItem is RecoveryPlanInMageFailoverInput)
                            {
                                recoveryPlanProviderSpecificFailoverInputValue["instanceType"] = "InMage";
                                RecoveryPlanInMageFailoverInput derived4 = ((RecoveryPlanInMageFailoverInput)providerSpecificDetailsItem);
                                
                                recoveryPlanProviderSpecificFailoverInputValue["recoveryPointType"] = derived4.RecoveryPointType;
                                
                                if (derived4.InstanceType != null)
                                {
                                    recoveryPlanProviderSpecificFailoverInputValue["instanceType"] = derived4.InstanceType;
                                }
                            }
                        }
                        propertiesValue["providerSpecificDetails"] = providerSpecificDetailsArray;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Updates the given recovery plan.
        /// </summary>
        /// <param name='recoveryPlanName'>
        /// Required. Recovery plan name.
        /// </param>
        /// <param name='input'>
        /// Required. Update recovery plan input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginUpdatingAsync(string recoveryPlanName, UpdateRecoveryPlanInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (recoveryPlanName == null)
            {
                throw new ArgumentNullException("recoveryPlanName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            if (input.Properties == null)
            {
                throw new ArgumentNullException("input.Properties");
            }
            if (input.Properties.Groups == null)
            {
                throw new ArgumentNullException("input.Properties.Groups");
            }
            if (input.Properties.Groups != null)
            {
                foreach (RecoveryPlanGroup groupsParameterItem in input.Properties.Groups)
                {
                    if (groupsParameterItem.EndGroupActions != null)
                    {
                        foreach (RecoveryPlanAction endGroupActionsParameterItem in groupsParameterItem.EndGroupActions)
                        {
                            if (endGroupActionsParameterItem.ActionName == null)
                            {
                                throw new ArgumentNullException("input.Properties.Groups.EndGroupActions.ActionName");
                            }
                            if (endGroupActionsParameterItem.CustomDetails == null)
                            {
                                throw new ArgumentNullException("input.Properties.Groups.EndGroupActions.CustomDetails");
                            }
                            if (endGroupActionsParameterItem.FailoverDirections == null)
                            {
                                throw new ArgumentNullException("input.Properties.Groups.EndGroupActions.FailoverDirections");
                            }
                            if (endGroupActionsParameterItem.FailoverTypes == null)
                            {
                                throw new ArgumentNullException("input.Properties.Groups.EndGroupActions.FailoverTypes");
                            }
                        }
                    }
                    if (groupsParameterItem.GroupType == null)
                    {
                        throw new ArgumentNullException("input.Properties.Groups.GroupType");
                    }
                    if (groupsParameterItem.ReplicationProtectedItems != null)
                    {
                        foreach (RecoveryPlanProtectedItem replicationProtectedItemsParameterItem in groupsParameterItem.ReplicationProtectedItems)
                        {
                            if (replicationProtectedItemsParameterItem.Id == null)
                            {
                                throw new ArgumentNullException("input.Properties.Groups.ReplicationProtectedItems.Id");
                            }
                        }
                    }
                    if (groupsParameterItem.StartGroupActions != null)
                    {
                        foreach (RecoveryPlanAction startGroupActionsParameterItem in groupsParameterItem.StartGroupActions)
                        {
                            if (startGroupActionsParameterItem.ActionName == null)
                            {
                                throw new ArgumentNullException("input.Properties.Groups.StartGroupActions.ActionName");
                            }
                            if (startGroupActionsParameterItem.CustomDetails == null)
                            {
                                throw new ArgumentNullException("input.Properties.Groups.StartGroupActions.CustomDetails");
                            }
                            if (startGroupActionsParameterItem.FailoverDirections == null)
                            {
                                throw new ArgumentNullException("input.Properties.Groups.StartGroupActions.FailoverDirections");
                            }
                            if (startGroupActionsParameterItem.FailoverTypes == null)
                            {
                                throw new ArgumentNullException("input.Properties.Groups.StartGroupActions.FailoverTypes");
                            }
                        }
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("recoveryPlanName", recoveryPlanName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginUpdatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationRecoveryPlans/";
            url = url + Uri.EscapeDataString(recoveryPlanName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject updateRecoveryPlanInputValue = new JObject();
                requestDoc = updateRecoveryPlanInputValue;
                
                JObject propertiesValue = new JObject();
                updateRecoveryPlanInputValue["properties"] = propertiesValue;
                
                if (input.Properties.Groups != null)
                {
                    if (input.Properties.Groups is ILazyCollection == false || ((ILazyCollection)input.Properties.Groups).IsInitialized)
                    {
                        JArray groupsArray = new JArray();
                        foreach (RecoveryPlanGroup groupsItem in input.Properties.Groups)
                        {
                            JObject recoveryPlanGroupValue = new JObject();
                            groupsArray.Add(recoveryPlanGroupValue);
                            
                            recoveryPlanGroupValue["groupType"] = groupsItem.GroupType;
                            
                            if (groupsItem.ReplicationProtectedItems != null)
                            {
                                if (groupsItem.ReplicationProtectedItems is ILazyCollection == false || ((ILazyCollection)groupsItem.ReplicationProtectedItems).IsInitialized)
                                {
                                    JArray replicationProtectedItemsArray = new JArray();
                                    foreach (RecoveryPlanProtectedItem replicationProtectedItemsItem in groupsItem.ReplicationProtectedItems)
                                    {
                                        JObject recoveryPlanProtectedItemValue = new JObject();
                                        replicationProtectedItemsArray.Add(recoveryPlanProtectedItemValue);
                                        
                                        recoveryPlanProtectedItemValue["id"] = replicationProtectedItemsItem.Id;
                                        
                                        if (replicationProtectedItemsItem.VirtualMachineId != null)
                                        {
                                            recoveryPlanProtectedItemValue["virtualMachineId"] = replicationProtectedItemsItem.VirtualMachineId;
                                        }
                                    }
                                    recoveryPlanGroupValue["replicationProtectedItems"] = replicationProtectedItemsArray;
                                }
                            }
                            
                            if (groupsItem.StartGroupActions != null)
                            {
                                if (groupsItem.StartGroupActions is ILazyCollection == false || ((ILazyCollection)groupsItem.StartGroupActions).IsInitialized)
                                {
                                    JArray startGroupActionsArray = new JArray();
                                    foreach (RecoveryPlanAction startGroupActionsItem in groupsItem.StartGroupActions)
                                    {
                                        JObject recoveryPlanActionValue = new JObject();
                                        startGroupActionsArray.Add(recoveryPlanActionValue);
                                        
                                        recoveryPlanActionValue["actionName"] = startGroupActionsItem.ActionName;
                                        
                                        if (startGroupActionsItem.FailoverTypes != null)
                                        {
                                            if (startGroupActionsItem.FailoverTypes is ILazyCollection == false || ((ILazyCollection)startGroupActionsItem.FailoverTypes).IsInitialized)
                                            {
                                                JArray failoverTypesArray = new JArray();
                                                foreach (string failoverTypesItem in startGroupActionsItem.FailoverTypes)
                                                {
                                                    failoverTypesArray.Add(failoverTypesItem);
                                                }
                                                recoveryPlanActionValue["failoverTypes"] = failoverTypesArray;
                                            }
                                        }
                                        
                                        if (startGroupActionsItem.FailoverDirections != null)
                                        {
                                            if (startGroupActionsItem.FailoverDirections is ILazyCollection == false || ((ILazyCollection)startGroupActionsItem.FailoverDirections).IsInitialized)
                                            {
                                                JArray failoverDirectionsArray = new JArray();
                                                foreach (string failoverDirectionsItem in startGroupActionsItem.FailoverDirections)
                                                {
                                                    failoverDirectionsArray.Add(failoverDirectionsItem);
                                                }
                                                recoveryPlanActionValue["failoverDirections"] = failoverDirectionsArray;
                                            }
                                        }
                                        
                                        JObject customDetailsValue = new JObject();
                                        recoveryPlanActionValue["customDetails"] = customDetailsValue;
                                        if (startGroupActionsItem.CustomDetails is RecoveryPlanScriptActionDetails)
                                        {
                                            customDetailsValue["instanceType"] = "ScriptActionDetails";
                                            RecoveryPlanScriptActionDetails derived = ((RecoveryPlanScriptActionDetails)startGroupActionsItem.CustomDetails);
                                            
                                            customDetailsValue["path"] = derived.Path;
                                            
                                            if (derived.Timeout != null)
                                            {
                                                customDetailsValue["timeout"] = derived.Timeout.Value.ToString();
                                            }
                                            
                                            customDetailsValue["fabricLocation"] = derived.FabricLocation;
                                            
                                            if (derived.InstanceType != null)
                                            {
                                                customDetailsValue["instanceType"] = derived.InstanceType;
                                            }
                                        }
                                        if (startGroupActionsItem.CustomDetails is RecoveryPlanAutomationRunbookActionDetails)
                                        {
                                            customDetailsValue["instanceType"] = "AutomationRunbookActionDetails";
                                            RecoveryPlanAutomationRunbookActionDetails derived2 = ((RecoveryPlanAutomationRunbookActionDetails)startGroupActionsItem.CustomDetails);
                                            
                                            customDetailsValue["runbookId"] = derived2.RunbookId;
                                            
                                            if (derived2.Timeout != null)
                                            {
                                                customDetailsValue["timeout"] = derived2.Timeout.Value.ToString();
                                            }
                                            
                                            customDetailsValue["fabricLocation"] = derived2.FabricLocation;
                                            
                                            if (derived2.InstanceType != null)
                                            {
                                                customDetailsValue["instanceType"] = derived2.InstanceType;
                                            }
                                        }
                                        if (startGroupActionsItem.CustomDetails is RecoveryPlanManualActionDetails)
                                        {
                                            customDetailsValue["instanceType"] = "ManualActionDetails";
                                            RecoveryPlanManualActionDetails derived3 = ((RecoveryPlanManualActionDetails)startGroupActionsItem.CustomDetails);
                                            
                                            if (derived3.Description != null)
                                            {
                                                customDetailsValue["description"] = derived3.Description;
                                            }
                                            
                                            if (derived3.InstanceType != null)
                                            {
                                                customDetailsValue["instanceType"] = derived3.InstanceType;
                                            }
                                        }
                                    }
                                    recoveryPlanGroupValue["startGroupActions"] = startGroupActionsArray;
                                }
                            }
                            
                            if (groupsItem.EndGroupActions != null)
                            {
                                if (groupsItem.EndGroupActions is ILazyCollection == false || ((ILazyCollection)groupsItem.EndGroupActions).IsInitialized)
                                {
                                    JArray endGroupActionsArray = new JArray();
                                    foreach (RecoveryPlanAction endGroupActionsItem in groupsItem.EndGroupActions)
                                    {
                                        JObject recoveryPlanActionValue2 = new JObject();
                                        endGroupActionsArray.Add(recoveryPlanActionValue2);
                                        
                                        recoveryPlanActionValue2["actionName"] = endGroupActionsItem.ActionName;
                                        
                                        if (endGroupActionsItem.FailoverTypes != null)
                                        {
                                            if (endGroupActionsItem.FailoverTypes is ILazyCollection == false || ((ILazyCollection)endGroupActionsItem.FailoverTypes).IsInitialized)
                                            {
                                                JArray failoverTypesArray2 = new JArray();
                                                foreach (string failoverTypesItem2 in endGroupActionsItem.FailoverTypes)
                                                {
                                                    failoverTypesArray2.Add(failoverTypesItem2);
                                                }
                                                recoveryPlanActionValue2["failoverTypes"] = failoverTypesArray2;
                                            }
                                        }
                                        
                                        if (endGroupActionsItem.FailoverDirections != null)
                                        {
                                            if (endGroupActionsItem.FailoverDirections is ILazyCollection == false || ((ILazyCollection)endGroupActionsItem.FailoverDirections).IsInitialized)
                                            {
                                                JArray failoverDirectionsArray2 = new JArray();
                                                foreach (string failoverDirectionsItem2 in endGroupActionsItem.FailoverDirections)
                                                {
                                                    failoverDirectionsArray2.Add(failoverDirectionsItem2);
                                                }
                                                recoveryPlanActionValue2["failoverDirections"] = failoverDirectionsArray2;
                                            }
                                        }
                                        
                                        JObject customDetailsValue2 = new JObject();
                                        recoveryPlanActionValue2["customDetails"] = customDetailsValue2;
                                        if (endGroupActionsItem.CustomDetails is RecoveryPlanScriptActionDetails)
                                        {
                                            customDetailsValue2["instanceType"] = "ScriptActionDetails";
                                            RecoveryPlanScriptActionDetails derived4 = ((RecoveryPlanScriptActionDetails)endGroupActionsItem.CustomDetails);
                                            
                                            customDetailsValue2["path"] = derived4.Path;
                                            
                                            if (derived4.Timeout != null)
                                            {
                                                customDetailsValue2["timeout"] = derived4.Timeout.Value.ToString();
                                            }
                                            
                                            customDetailsValue2["fabricLocation"] = derived4.FabricLocation;
                                            
                                            if (derived4.InstanceType != null)
                                            {
                                                customDetailsValue2["instanceType"] = derived4.InstanceType;
                                            }
                                        }
                                        if (endGroupActionsItem.CustomDetails is RecoveryPlanAutomationRunbookActionDetails)
                                        {
                                            customDetailsValue2["instanceType"] = "AutomationRunbookActionDetails";
                                            RecoveryPlanAutomationRunbookActionDetails derived5 = ((RecoveryPlanAutomationRunbookActionDetails)endGroupActionsItem.CustomDetails);
                                            
                                            customDetailsValue2["runbookId"] = derived5.RunbookId;
                                            
                                            if (derived5.Timeout != null)
                                            {
                                                customDetailsValue2["timeout"] = derived5.Timeout.Value.ToString();
                                            }
                                            
                                            customDetailsValue2["fabricLocation"] = derived5.FabricLocation;
                                            
                                            if (derived5.InstanceType != null)
                                            {
                                                customDetailsValue2["instanceType"] = derived5.InstanceType;
                                            }
                                        }
                                        if (endGroupActionsItem.CustomDetails is RecoveryPlanManualActionDetails)
                                        {
                                            customDetailsValue2["instanceType"] = "ManualActionDetails";
                                            RecoveryPlanManualActionDetails derived6 = ((RecoveryPlanManualActionDetails)endGroupActionsItem.CustomDetails);
                                            
                                            if (derived6.Description != null)
                                            {
                                                customDetailsValue2["description"] = derived6.Description;
                                            }
                                            
                                            if (derived6.InstanceType != null)
                                            {
                                                customDetailsValue2["instanceType"] = derived6.InstanceType;
                                            }
                                        }
                                    }
                                    recoveryPlanGroupValue["endGroupActions"] = endGroupActionsArray;
                                }
                            }
                        }
                        propertiesValue["groups"] = groupsArray;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Commit failover of the recovery plan.
        /// </summary>
        /// <param name='recoveryPlanName'>
        /// Required. Recovery plan name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> CommitFailoverAsync(string recoveryPlanName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("recoveryPlanName", recoveryPlanName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "CommitFailoverAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.RecoveryPlan.BeginCommitFailoverAsync(recoveryPlanName, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            RecoveryPlanOperationResponse result = await client.RecoveryPlan.GetCommitFailoverStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.RecoveryPlan.GetCommitFailoverStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Creates a recovery plan.
        /// </summary>
        /// <param name='recoveryPlanName'>
        /// Required. Recovery plan name.
        /// </param>
        /// <param name='input'>
        /// Required. Create recovery plan input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> CreateAsync(string recoveryPlanName, CreateRecoveryPlanInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("recoveryPlanName", recoveryPlanName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.RecoveryPlan.BeginCreatingAsync(recoveryPlanName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            CreateRecoveryPlanOperationResponse result = await client.RecoveryPlan.GetCreateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.RecoveryPlan.GetCreateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Deletes a recovery plan
        /// </summary>
        /// <param name='recoveryPlanName'>
        /// Required. Recovery plan name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> DeleteAsync(string recoveryPlanName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("recoveryPlanName", recoveryPlanName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.RecoveryPlan.BeginDeletingAsync(recoveryPlanName, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            DeleteRecoveryPlanOperationResponse result = await client.RecoveryPlan.GetDeleteStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.RecoveryPlan.GetDeleteStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Gets the recovery plan by Id.
        /// </summary>
        /// <param name='recoveryPlanName'>
        /// Required. Recovery plan name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the recovery plan object.
        /// </returns>
        public async Task<RecoveryPlanResponse> GetAsync(string recoveryPlanName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (recoveryPlanName == null)
            {
                throw new ArgumentNullException("recoveryPlanName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("recoveryPlanName", recoveryPlanName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationRecoveryPlans/";
            url = url + Uri.EscapeDataString(recoveryPlanName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RecoveryPlanResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RecoveryPlanResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            RecoveryPlan recoveryPlanInstance = new RecoveryPlan();
                            result.RecoveryPlan = recoveryPlanInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                RecoveryPlanProperties propertiesInstance = new RecoveryPlanProperties();
                                recoveryPlanInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken primaryFabricIdValue = propertiesValue["primaryFabricId"];
                                if (primaryFabricIdValue != null && primaryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricIdInstance = ((string)primaryFabricIdValue);
                                    propertiesInstance.PrimaryFabricId = primaryFabricIdInstance;
                                }
                                
                                JToken primaryFabricFriendlyNameValue = propertiesValue["primaryFabricFriendlyName"];
                                if (primaryFabricFriendlyNameValue != null && primaryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricFriendlyNameInstance = ((string)primaryFabricFriendlyNameValue);
                                    propertiesInstance.PrimaryFabricFriendlyName = primaryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricIdValue = propertiesValue["recoveryFabricId"];
                                if (recoveryFabricIdValue != null && recoveryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricIdInstance = ((string)recoveryFabricIdValue);
                                    propertiesInstance.RecoveryFabricId = recoveryFabricIdInstance;
                                }
                                
                                JToken recoveryFabricFriendlyNameValue = propertiesValue["recoveryFabricFriendlyName"];
                                if (recoveryFabricFriendlyNameValue != null && recoveryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricFriendlyNameInstance = ((string)recoveryFabricFriendlyNameValue);
                                    propertiesInstance.RecoveryFabricFriendlyName = recoveryFabricFriendlyNameInstance;
                                }
                                
                                JToken failoverDeploymentModelValue = propertiesValue["failoverDeploymentModel"];
                                if (failoverDeploymentModelValue != null && failoverDeploymentModelValue.Type != JTokenType.Null)
                                {
                                    string failoverDeploymentModelInstance = ((string)failoverDeploymentModelValue);
                                    propertiesInstance.FailoverDeploymentModel = failoverDeploymentModelInstance;
                                }
                                
                                JToken replicationProvidersArray = propertiesValue["replicationProviders"];
                                if (replicationProvidersArray != null && replicationProvidersArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationProvidersValue in ((JArray)replicationProvidersArray))
                                    {
                                        propertiesInstance.ReplicationProviders.Add(((string)replicationProvidersValue));
                                    }
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken lastPlannedFailoverTimeValue = propertiesValue["lastPlannedFailoverTime"];
                                if (lastPlannedFailoverTimeValue != null && lastPlannedFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastPlannedFailoverTimeInstance = ((DateTime)lastPlannedFailoverTimeValue);
                                    propertiesInstance.LastPlannedFailoverTime = lastPlannedFailoverTimeInstance;
                                }
                                
                                JToken lastTestFailoverTimeValue = propertiesValue["lastTestFailoverTime"];
                                if (lastTestFailoverTimeValue != null && lastTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastTestFailoverTimeInstance = ((DateTime)lastTestFailoverTimeValue);
                                    propertiesInstance.LastTestFailoverTime = lastTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    CurrentScenarioDetails currentScenarioInstance = new CurrentScenarioDetails();
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                    
                                    JToken scenarioNameValue = currentScenarioValue["scenarioName"];
                                    if (scenarioNameValue != null && scenarioNameValue.Type != JTokenType.Null)
                                    {
                                        string scenarioNameInstance = ((string)scenarioNameValue);
                                        currentScenarioInstance.ScenarioName = scenarioNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentScenarioValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentScenarioInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentScenarioValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentScenarioInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken currentScenarioStatusValue = propertiesValue["currentScenarioStatus"];
                                if (currentScenarioStatusValue != null && currentScenarioStatusValue.Type != JTokenType.Null)
                                {
                                    string currentScenarioStatusInstance = ((string)currentScenarioStatusValue);
                                    propertiesInstance.CurrentScenarioStatus = currentScenarioStatusInstance;
                                }
                                
                                JToken currentScenarioStatusDescriptionValue = propertiesValue["currentScenarioStatusDescription"];
                                if (currentScenarioStatusDescriptionValue != null && currentScenarioStatusDescriptionValue.Type != JTokenType.Null)
                                {
                                    string currentScenarioStatusDescriptionInstance = ((string)currentScenarioStatusDescriptionValue);
                                    propertiesInstance.CurrentScenarioStatusDescription = currentScenarioStatusDescriptionInstance;
                                }
                                
                                JToken groupsArray = propertiesValue["groups"];
                                if (groupsArray != null && groupsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken groupsValue in ((JArray)groupsArray))
                                    {
                                        RecoveryPlanGroup recoveryPlanGroupInstance = new RecoveryPlanGroup();
                                        propertiesInstance.Groups.Add(recoveryPlanGroupInstance);
                                        
                                        JToken groupTypeValue = groupsValue["groupType"];
                                        if (groupTypeValue != null && groupTypeValue.Type != JTokenType.Null)
                                        {
                                            string groupTypeInstance = ((string)groupTypeValue);
                                            recoveryPlanGroupInstance.GroupType = groupTypeInstance;
                                        }
                                        
                                        JToken replicationProtectedItemsArray = groupsValue["replicationProtectedItems"];
                                        if (replicationProtectedItemsArray != null && replicationProtectedItemsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken replicationProtectedItemsValue in ((JArray)replicationProtectedItemsArray))
                                            {
                                                RecoveryPlanProtectedItem recoveryPlanProtectedItemInstance = new RecoveryPlanProtectedItem();
                                                recoveryPlanGroupInstance.ReplicationProtectedItems.Add(recoveryPlanProtectedItemInstance);
                                                
                                                JToken idValue = replicationProtectedItemsValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    recoveryPlanProtectedItemInstance.Id = idInstance;
                                                }
                                                
                                                JToken virtualMachineIdValue = replicationProtectedItemsValue["virtualMachineId"];
                                                if (virtualMachineIdValue != null && virtualMachineIdValue.Type != JTokenType.Null)
                                                {
                                                    string virtualMachineIdInstance = ((string)virtualMachineIdValue);
                                                    recoveryPlanProtectedItemInstance.VirtualMachineId = virtualMachineIdInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken startGroupActionsArray = groupsValue["startGroupActions"];
                                        if (startGroupActionsArray != null && startGroupActionsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken startGroupActionsValue in ((JArray)startGroupActionsArray))
                                            {
                                                RecoveryPlanAction recoveryPlanActionInstance = new RecoveryPlanAction();
                                                recoveryPlanGroupInstance.StartGroupActions.Add(recoveryPlanActionInstance);
                                                
                                                JToken actionNameValue = startGroupActionsValue["actionName"];
                                                if (actionNameValue != null && actionNameValue.Type != JTokenType.Null)
                                                {
                                                    string actionNameInstance = ((string)actionNameValue);
                                                    recoveryPlanActionInstance.ActionName = actionNameInstance;
                                                }
                                                
                                                JToken failoverTypesArray = startGroupActionsValue["failoverTypes"];
                                                if (failoverTypesArray != null && failoverTypesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverTypesValue in ((JArray)failoverTypesArray))
                                                    {
                                                        recoveryPlanActionInstance.FailoverTypes.Add(((string)failoverTypesValue));
                                                    }
                                                }
                                                
                                                JToken failoverDirectionsArray = startGroupActionsValue["failoverDirections"];
                                                if (failoverDirectionsArray != null && failoverDirectionsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverDirectionsValue in ((JArray)failoverDirectionsArray))
                                                    {
                                                        recoveryPlanActionInstance.FailoverDirections.Add(((string)failoverDirectionsValue));
                                                    }
                                                }
                                                
                                                JToken customDetailsValue = startGroupActionsValue["customDetails"];
                                                if (customDetailsValue != null && customDetailsValue.Type != JTokenType.Null)
                                                {
                                                    string typeName = ((string)customDetailsValue["instanceType"]);
                                                    if (typeName == "ScriptActionDetails")
                                                    {
                                                        RecoveryPlanScriptActionDetails recoveryPlanScriptActionDetailsInstance = new RecoveryPlanScriptActionDetails();
                                                        
                                                        JToken pathValue = customDetailsValue["path"];
                                                        if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                        {
                                                            string pathInstance = ((string)pathValue);
                                                            recoveryPlanScriptActionDetailsInstance.Path = pathInstance;
                                                        }
                                                        
                                                        JToken timeoutValue = customDetailsValue["timeout"];
                                                        if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                            recoveryPlanScriptActionDetailsInstance.Timeout = timeoutInstance;
                                                        }
                                                        
                                                        JToken fabricLocationValue = customDetailsValue["fabricLocation"];
                                                        if (fabricLocationValue != null && fabricLocationValue.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance = ((string)fabricLocationValue);
                                                            recoveryPlanScriptActionDetailsInstance.FabricLocation = fabricLocationInstance;
                                                        }
                                                        
                                                        JToken instanceTypeValue = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                                            recoveryPlanScriptActionDetailsInstance.InstanceType = instanceTypeInstance;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanScriptActionDetailsInstance;
                                                    }
                                                    if (typeName == "AutomationRunbookActionDetails")
                                                    {
                                                        RecoveryPlanAutomationRunbookActionDetails recoveryPlanAutomationRunbookActionDetailsInstance = new RecoveryPlanAutomationRunbookActionDetails();
                                                        
                                                        JToken runbookIdValue = customDetailsValue["runbookId"];
                                                        if (runbookIdValue != null && runbookIdValue.Type != JTokenType.Null)
                                                        {
                                                            string runbookIdInstance = ((string)runbookIdValue);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.RunbookId = runbookIdInstance;
                                                        }
                                                        
                                                        JToken timeoutValue2 = customDetailsValue["timeout"];
                                                        if (timeoutValue2 != null && timeoutValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance2 = TimeSpan.Parse(((string)timeoutValue2), CultureInfo.InvariantCulture);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.Timeout = timeoutInstance2;
                                                        }
                                                        
                                                        JToken fabricLocationValue2 = customDetailsValue["fabricLocation"];
                                                        if (fabricLocationValue2 != null && fabricLocationValue2.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance2 = ((string)fabricLocationValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.FabricLocation = fabricLocationInstance2;
                                                        }
                                                        
                                                        JToken instanceTypeValue2 = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.InstanceType = instanceTypeInstance2;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanAutomationRunbookActionDetailsInstance;
                                                    }
                                                    if (typeName == "ManualActionDetails")
                                                    {
                                                        RecoveryPlanManualActionDetails recoveryPlanManualActionDetailsInstance = new RecoveryPlanManualActionDetails();
                                                        
                                                        JToken descriptionValue = customDetailsValue["description"];
                                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                                        {
                                                            string descriptionInstance = ((string)descriptionValue);
                                                            recoveryPlanManualActionDetailsInstance.Description = descriptionInstance;
                                                        }
                                                        
                                                        JToken instanceTypeValue3 = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                                            recoveryPlanManualActionDetailsInstance.InstanceType = instanceTypeInstance3;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanManualActionDetailsInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken endGroupActionsArray = groupsValue["endGroupActions"];
                                        if (endGroupActionsArray != null && endGroupActionsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken endGroupActionsValue in ((JArray)endGroupActionsArray))
                                            {
                                                RecoveryPlanAction recoveryPlanActionInstance2 = new RecoveryPlanAction();
                                                recoveryPlanGroupInstance.EndGroupActions.Add(recoveryPlanActionInstance2);
                                                
                                                JToken actionNameValue2 = endGroupActionsValue["actionName"];
                                                if (actionNameValue2 != null && actionNameValue2.Type != JTokenType.Null)
                                                {
                                                    string actionNameInstance2 = ((string)actionNameValue2);
                                                    recoveryPlanActionInstance2.ActionName = actionNameInstance2;
                                                }
                                                
                                                JToken failoverTypesArray2 = endGroupActionsValue["failoverTypes"];
                                                if (failoverTypesArray2 != null && failoverTypesArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverTypesValue2 in ((JArray)failoverTypesArray2))
                                                    {
                                                        recoveryPlanActionInstance2.FailoverTypes.Add(((string)failoverTypesValue2));
                                                    }
                                                }
                                                
                                                JToken failoverDirectionsArray2 = endGroupActionsValue["failoverDirections"];
                                                if (failoverDirectionsArray2 != null && failoverDirectionsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverDirectionsValue2 in ((JArray)failoverDirectionsArray2))
                                                    {
                                                        recoveryPlanActionInstance2.FailoverDirections.Add(((string)failoverDirectionsValue2));
                                                    }
                                                }
                                                
                                                JToken customDetailsValue2 = endGroupActionsValue["customDetails"];
                                                if (customDetailsValue2 != null && customDetailsValue2.Type != JTokenType.Null)
                                                {
                                                    string typeName2 = ((string)customDetailsValue2["instanceType"]);
                                                    if (typeName2 == "ScriptActionDetails")
                                                    {
                                                        RecoveryPlanScriptActionDetails recoveryPlanScriptActionDetailsInstance2 = new RecoveryPlanScriptActionDetails();
                                                        
                                                        JToken pathValue2 = customDetailsValue2["path"];
                                                        if (pathValue2 != null && pathValue2.Type != JTokenType.Null)
                                                        {
                                                            string pathInstance2 = ((string)pathValue2);
                                                            recoveryPlanScriptActionDetailsInstance2.Path = pathInstance2;
                                                        }
                                                        
                                                        JToken timeoutValue3 = customDetailsValue2["timeout"];
                                                        if (timeoutValue3 != null && timeoutValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance3 = TimeSpan.Parse(((string)timeoutValue3), CultureInfo.InvariantCulture);
                                                            recoveryPlanScriptActionDetailsInstance2.Timeout = timeoutInstance3;
                                                        }
                                                        
                                                        JToken fabricLocationValue3 = customDetailsValue2["fabricLocation"];
                                                        if (fabricLocationValue3 != null && fabricLocationValue3.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance3 = ((string)fabricLocationValue3);
                                                            recoveryPlanScriptActionDetailsInstance2.FabricLocation = fabricLocationInstance3;
                                                        }
                                                        
                                                        JToken instanceTypeValue4 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                                            recoveryPlanScriptActionDetailsInstance2.InstanceType = instanceTypeInstance4;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanScriptActionDetailsInstance2;
                                                    }
                                                    if (typeName2 == "AutomationRunbookActionDetails")
                                                    {
                                                        RecoveryPlanAutomationRunbookActionDetails recoveryPlanAutomationRunbookActionDetailsInstance2 = new RecoveryPlanAutomationRunbookActionDetails();
                                                        
                                                        JToken runbookIdValue2 = customDetailsValue2["runbookId"];
                                                        if (runbookIdValue2 != null && runbookIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string runbookIdInstance2 = ((string)runbookIdValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.RunbookId = runbookIdInstance2;
                                                        }
                                                        
                                                        JToken timeoutValue4 = customDetailsValue2["timeout"];
                                                        if (timeoutValue4 != null && timeoutValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance4 = TimeSpan.Parse(((string)timeoutValue4), CultureInfo.InvariantCulture);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.Timeout = timeoutInstance4;
                                                        }
                                                        
                                                        JToken fabricLocationValue4 = customDetailsValue2["fabricLocation"];
                                                        if (fabricLocationValue4 != null && fabricLocationValue4.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance4 = ((string)fabricLocationValue4);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.FabricLocation = fabricLocationInstance4;
                                                        }
                                                        
                                                        JToken instanceTypeValue5 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue5 != null && instanceTypeValue5.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance5 = ((string)instanceTypeValue5);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.InstanceType = instanceTypeInstance5;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanAutomationRunbookActionDetailsInstance2;
                                                    }
                                                    if (typeName2 == "ManualActionDetails")
                                                    {
                                                        RecoveryPlanManualActionDetails recoveryPlanManualActionDetailsInstance2 = new RecoveryPlanManualActionDetails();
                                                        
                                                        JToken descriptionValue2 = customDetailsValue2["description"];
                                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                                        {
                                                            string descriptionInstance2 = ((string)descriptionValue2);
                                                            recoveryPlanManualActionDetailsInstance2.Description = descriptionInstance2;
                                                        }
                                                        
                                                        JToken instanceTypeValue6 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue6 != null && instanceTypeValue6.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance6 = ((string)instanceTypeValue6);
                                                            recoveryPlanManualActionDetailsInstance2.InstanceType = instanceTypeInstance6;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanManualActionDetailsInstance2;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                recoveryPlanInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                recoveryPlanInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                recoveryPlanInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                recoveryPlanInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    recoveryPlanInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<RecoveryPlanOperationResponse> GetCommitFailoverStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetCommitFailoverStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RecoveryPlanOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RecoveryPlanOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            RecoveryPlan recoveryPlanInstance = new RecoveryPlan();
                            result.RecoveryPlan = recoveryPlanInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                RecoveryPlanProperties propertiesInstance = new RecoveryPlanProperties();
                                recoveryPlanInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken primaryFabricIdValue = propertiesValue["primaryFabricId"];
                                if (primaryFabricIdValue != null && primaryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricIdInstance = ((string)primaryFabricIdValue);
                                    propertiesInstance.PrimaryFabricId = primaryFabricIdInstance;
                                }
                                
                                JToken primaryFabricFriendlyNameValue = propertiesValue["primaryFabricFriendlyName"];
                                if (primaryFabricFriendlyNameValue != null && primaryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricFriendlyNameInstance = ((string)primaryFabricFriendlyNameValue);
                                    propertiesInstance.PrimaryFabricFriendlyName = primaryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricIdValue = propertiesValue["recoveryFabricId"];
                                if (recoveryFabricIdValue != null && recoveryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricIdInstance = ((string)recoveryFabricIdValue);
                                    propertiesInstance.RecoveryFabricId = recoveryFabricIdInstance;
                                }
                                
                                JToken recoveryFabricFriendlyNameValue = propertiesValue["recoveryFabricFriendlyName"];
                                if (recoveryFabricFriendlyNameValue != null && recoveryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricFriendlyNameInstance = ((string)recoveryFabricFriendlyNameValue);
                                    propertiesInstance.RecoveryFabricFriendlyName = recoveryFabricFriendlyNameInstance;
                                }
                                
                                JToken failoverDeploymentModelValue = propertiesValue["failoverDeploymentModel"];
                                if (failoverDeploymentModelValue != null && failoverDeploymentModelValue.Type != JTokenType.Null)
                                {
                                    string failoverDeploymentModelInstance = ((string)failoverDeploymentModelValue);
                                    propertiesInstance.FailoverDeploymentModel = failoverDeploymentModelInstance;
                                }
                                
                                JToken replicationProvidersArray = propertiesValue["replicationProviders"];
                                if (replicationProvidersArray != null && replicationProvidersArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationProvidersValue in ((JArray)replicationProvidersArray))
                                    {
                                        propertiesInstance.ReplicationProviders.Add(((string)replicationProvidersValue));
                                    }
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken lastPlannedFailoverTimeValue = propertiesValue["lastPlannedFailoverTime"];
                                if (lastPlannedFailoverTimeValue != null && lastPlannedFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastPlannedFailoverTimeInstance = ((DateTime)lastPlannedFailoverTimeValue);
                                    propertiesInstance.LastPlannedFailoverTime = lastPlannedFailoverTimeInstance;
                                }
                                
                                JToken lastTestFailoverTimeValue = propertiesValue["lastTestFailoverTime"];
                                if (lastTestFailoverTimeValue != null && lastTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastTestFailoverTimeInstance = ((DateTime)lastTestFailoverTimeValue);
                                    propertiesInstance.LastTestFailoverTime = lastTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    CurrentScenarioDetails currentScenarioInstance = new CurrentScenarioDetails();
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                    
                                    JToken scenarioNameValue = currentScenarioValue["scenarioName"];
                                    if (scenarioNameValue != null && scenarioNameValue.Type != JTokenType.Null)
                                    {
                                        string scenarioNameInstance = ((string)scenarioNameValue);
                                        currentScenarioInstance.ScenarioName = scenarioNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentScenarioValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentScenarioInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentScenarioValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentScenarioInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken currentScenarioStatusValue = propertiesValue["currentScenarioStatus"];
                                if (currentScenarioStatusValue != null && currentScenarioStatusValue.Type != JTokenType.Null)
                                {
                                    string currentScenarioStatusInstance = ((string)currentScenarioStatusValue);
                                    propertiesInstance.CurrentScenarioStatus = currentScenarioStatusInstance;
                                }
                                
                                JToken currentScenarioStatusDescriptionValue = propertiesValue["currentScenarioStatusDescription"];
                                if (currentScenarioStatusDescriptionValue != null && currentScenarioStatusDescriptionValue.Type != JTokenType.Null)
                                {
                                    string currentScenarioStatusDescriptionInstance = ((string)currentScenarioStatusDescriptionValue);
                                    propertiesInstance.CurrentScenarioStatusDescription = currentScenarioStatusDescriptionInstance;
                                }
                                
                                JToken groupsArray = propertiesValue["groups"];
                                if (groupsArray != null && groupsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken groupsValue in ((JArray)groupsArray))
                                    {
                                        RecoveryPlanGroup recoveryPlanGroupInstance = new RecoveryPlanGroup();
                                        propertiesInstance.Groups.Add(recoveryPlanGroupInstance);
                                        
                                        JToken groupTypeValue = groupsValue["groupType"];
                                        if (groupTypeValue != null && groupTypeValue.Type != JTokenType.Null)
                                        {
                                            string groupTypeInstance = ((string)groupTypeValue);
                                            recoveryPlanGroupInstance.GroupType = groupTypeInstance;
                                        }
                                        
                                        JToken replicationProtectedItemsArray = groupsValue["replicationProtectedItems"];
                                        if (replicationProtectedItemsArray != null && replicationProtectedItemsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken replicationProtectedItemsValue in ((JArray)replicationProtectedItemsArray))
                                            {
                                                RecoveryPlanProtectedItem recoveryPlanProtectedItemInstance = new RecoveryPlanProtectedItem();
                                                recoveryPlanGroupInstance.ReplicationProtectedItems.Add(recoveryPlanProtectedItemInstance);
                                                
                                                JToken idValue = replicationProtectedItemsValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    recoveryPlanProtectedItemInstance.Id = idInstance;
                                                }
                                                
                                                JToken virtualMachineIdValue = replicationProtectedItemsValue["virtualMachineId"];
                                                if (virtualMachineIdValue != null && virtualMachineIdValue.Type != JTokenType.Null)
                                                {
                                                    string virtualMachineIdInstance = ((string)virtualMachineIdValue);
                                                    recoveryPlanProtectedItemInstance.VirtualMachineId = virtualMachineIdInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken startGroupActionsArray = groupsValue["startGroupActions"];
                                        if (startGroupActionsArray != null && startGroupActionsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken startGroupActionsValue in ((JArray)startGroupActionsArray))
                                            {
                                                RecoveryPlanAction recoveryPlanActionInstance = new RecoveryPlanAction();
                                                recoveryPlanGroupInstance.StartGroupActions.Add(recoveryPlanActionInstance);
                                                
                                                JToken actionNameValue = startGroupActionsValue["actionName"];
                                                if (actionNameValue != null && actionNameValue.Type != JTokenType.Null)
                                                {
                                                    string actionNameInstance = ((string)actionNameValue);
                                                    recoveryPlanActionInstance.ActionName = actionNameInstance;
                                                }
                                                
                                                JToken failoverTypesArray = startGroupActionsValue["failoverTypes"];
                                                if (failoverTypesArray != null && failoverTypesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverTypesValue in ((JArray)failoverTypesArray))
                                                    {
                                                        recoveryPlanActionInstance.FailoverTypes.Add(((string)failoverTypesValue));
                                                    }
                                                }
                                                
                                                JToken failoverDirectionsArray = startGroupActionsValue["failoverDirections"];
                                                if (failoverDirectionsArray != null && failoverDirectionsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverDirectionsValue in ((JArray)failoverDirectionsArray))
                                                    {
                                                        recoveryPlanActionInstance.FailoverDirections.Add(((string)failoverDirectionsValue));
                                                    }
                                                }
                                                
                                                JToken customDetailsValue = startGroupActionsValue["customDetails"];
                                                if (customDetailsValue != null && customDetailsValue.Type != JTokenType.Null)
                                                {
                                                    string typeName = ((string)customDetailsValue["instanceType"]);
                                                    if (typeName == "ScriptActionDetails")
                                                    {
                                                        RecoveryPlanScriptActionDetails recoveryPlanScriptActionDetailsInstance = new RecoveryPlanScriptActionDetails();
                                                        
                                                        JToken pathValue = customDetailsValue["path"];
                                                        if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                        {
                                                            string pathInstance = ((string)pathValue);
                                                            recoveryPlanScriptActionDetailsInstance.Path = pathInstance;
                                                        }
                                                        
                                                        JToken timeoutValue = customDetailsValue["timeout"];
                                                        if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                            recoveryPlanScriptActionDetailsInstance.Timeout = timeoutInstance;
                                                        }
                                                        
                                                        JToken fabricLocationValue = customDetailsValue["fabricLocation"];
                                                        if (fabricLocationValue != null && fabricLocationValue.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance = ((string)fabricLocationValue);
                                                            recoveryPlanScriptActionDetailsInstance.FabricLocation = fabricLocationInstance;
                                                        }
                                                        
                                                        JToken instanceTypeValue = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                                            recoveryPlanScriptActionDetailsInstance.InstanceType = instanceTypeInstance;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanScriptActionDetailsInstance;
                                                    }
                                                    if (typeName == "AutomationRunbookActionDetails")
                                                    {
                                                        RecoveryPlanAutomationRunbookActionDetails recoveryPlanAutomationRunbookActionDetailsInstance = new RecoveryPlanAutomationRunbookActionDetails();
                                                        
                                                        JToken runbookIdValue = customDetailsValue["runbookId"];
                                                        if (runbookIdValue != null && runbookIdValue.Type != JTokenType.Null)
                                                        {
                                                            string runbookIdInstance = ((string)runbookIdValue);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.RunbookId = runbookIdInstance;
                                                        }
                                                        
                                                        JToken timeoutValue2 = customDetailsValue["timeout"];
                                                        if (timeoutValue2 != null && timeoutValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance2 = TimeSpan.Parse(((string)timeoutValue2), CultureInfo.InvariantCulture);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.Timeout = timeoutInstance2;
                                                        }
                                                        
                                                        JToken fabricLocationValue2 = customDetailsValue["fabricLocation"];
                                                        if (fabricLocationValue2 != null && fabricLocationValue2.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance2 = ((string)fabricLocationValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.FabricLocation = fabricLocationInstance2;
                                                        }
                                                        
                                                        JToken instanceTypeValue2 = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.InstanceType = instanceTypeInstance2;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanAutomationRunbookActionDetailsInstance;
                                                    }
                                                    if (typeName == "ManualActionDetails")
                                                    {
                                                        RecoveryPlanManualActionDetails recoveryPlanManualActionDetailsInstance = new RecoveryPlanManualActionDetails();
                                                        
                                                        JToken descriptionValue = customDetailsValue["description"];
                                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                                        {
                                                            string descriptionInstance = ((string)descriptionValue);
                                                            recoveryPlanManualActionDetailsInstance.Description = descriptionInstance;
                                                        }
                                                        
                                                        JToken instanceTypeValue3 = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                                            recoveryPlanManualActionDetailsInstance.InstanceType = instanceTypeInstance3;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanManualActionDetailsInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken endGroupActionsArray = groupsValue["endGroupActions"];
                                        if (endGroupActionsArray != null && endGroupActionsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken endGroupActionsValue in ((JArray)endGroupActionsArray))
                                            {
                                                RecoveryPlanAction recoveryPlanActionInstance2 = new RecoveryPlanAction();
                                                recoveryPlanGroupInstance.EndGroupActions.Add(recoveryPlanActionInstance2);
                                                
                                                JToken actionNameValue2 = endGroupActionsValue["actionName"];
                                                if (actionNameValue2 != null && actionNameValue2.Type != JTokenType.Null)
                                                {
                                                    string actionNameInstance2 = ((string)actionNameValue2);
                                                    recoveryPlanActionInstance2.ActionName = actionNameInstance2;
                                                }
                                                
                                                JToken failoverTypesArray2 = endGroupActionsValue["failoverTypes"];
                                                if (failoverTypesArray2 != null && failoverTypesArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverTypesValue2 in ((JArray)failoverTypesArray2))
                                                    {
                                                        recoveryPlanActionInstance2.FailoverTypes.Add(((string)failoverTypesValue2));
                                                    }
                                                }
                                                
                                                JToken failoverDirectionsArray2 = endGroupActionsValue["failoverDirections"];
                                                if (failoverDirectionsArray2 != null && failoverDirectionsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverDirectionsValue2 in ((JArray)failoverDirectionsArray2))
                                                    {
                                                        recoveryPlanActionInstance2.FailoverDirections.Add(((string)failoverDirectionsValue2));
                                                    }
                                                }
                                                
                                                JToken customDetailsValue2 = endGroupActionsValue["customDetails"];
                                                if (customDetailsValue2 != null && customDetailsValue2.Type != JTokenType.Null)
                                                {
                                                    string typeName2 = ((string)customDetailsValue2["instanceType"]);
                                                    if (typeName2 == "ScriptActionDetails")
                                                    {
                                                        RecoveryPlanScriptActionDetails recoveryPlanScriptActionDetailsInstance2 = new RecoveryPlanScriptActionDetails();
                                                        
                                                        JToken pathValue2 = customDetailsValue2["path"];
                                                        if (pathValue2 != null && pathValue2.Type != JTokenType.Null)
                                                        {
                                                            string pathInstance2 = ((string)pathValue2);
                                                            recoveryPlanScriptActionDetailsInstance2.Path = pathInstance2;
                                                        }
                                                        
                                                        JToken timeoutValue3 = customDetailsValue2["timeout"];
                                                        if (timeoutValue3 != null && timeoutValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance3 = TimeSpan.Parse(((string)timeoutValue3), CultureInfo.InvariantCulture);
                                                            recoveryPlanScriptActionDetailsInstance2.Timeout = timeoutInstance3;
                                                        }
                                                        
                                                        JToken fabricLocationValue3 = customDetailsValue2["fabricLocation"];
                                                        if (fabricLocationValue3 != null && fabricLocationValue3.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance3 = ((string)fabricLocationValue3);
                                                            recoveryPlanScriptActionDetailsInstance2.FabricLocation = fabricLocationInstance3;
                                                        }
                                                        
                                                        JToken instanceTypeValue4 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                                            recoveryPlanScriptActionDetailsInstance2.InstanceType = instanceTypeInstance4;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanScriptActionDetailsInstance2;
                                                    }
                                                    if (typeName2 == "AutomationRunbookActionDetails")
                                                    {
                                                        RecoveryPlanAutomationRunbookActionDetails recoveryPlanAutomationRunbookActionDetailsInstance2 = new RecoveryPlanAutomationRunbookActionDetails();
                                                        
                                                        JToken runbookIdValue2 = customDetailsValue2["runbookId"];
                                                        if (runbookIdValue2 != null && runbookIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string runbookIdInstance2 = ((string)runbookIdValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.RunbookId = runbookIdInstance2;
                                                        }
                                                        
                                                        JToken timeoutValue4 = customDetailsValue2["timeout"];
                                                        if (timeoutValue4 != null && timeoutValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance4 = TimeSpan.Parse(((string)timeoutValue4), CultureInfo.InvariantCulture);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.Timeout = timeoutInstance4;
                                                        }
                                                        
                                                        JToken fabricLocationValue4 = customDetailsValue2["fabricLocation"];
                                                        if (fabricLocationValue4 != null && fabricLocationValue4.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance4 = ((string)fabricLocationValue4);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.FabricLocation = fabricLocationInstance4;
                                                        }
                                                        
                                                        JToken instanceTypeValue5 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue5 != null && instanceTypeValue5.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance5 = ((string)instanceTypeValue5);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.InstanceType = instanceTypeInstance5;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanAutomationRunbookActionDetailsInstance2;
                                                    }
                                                    if (typeName2 == "ManualActionDetails")
                                                    {
                                                        RecoveryPlanManualActionDetails recoveryPlanManualActionDetailsInstance2 = new RecoveryPlanManualActionDetails();
                                                        
                                                        JToken descriptionValue2 = customDetailsValue2["description"];
                                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                                        {
                                                            string descriptionInstance2 = ((string)descriptionValue2);
                                                            recoveryPlanManualActionDetailsInstance2.Description = descriptionInstance2;
                                                        }
                                                        
                                                        JToken instanceTypeValue6 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue6 != null && instanceTypeValue6.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance6 = ((string)instanceTypeValue6);
                                                            recoveryPlanManualActionDetailsInstance2.InstanceType = instanceTypeInstance6;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanManualActionDetailsInstance2;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                recoveryPlanInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                recoveryPlanInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                recoveryPlanInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                recoveryPlanInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    recoveryPlanInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<CreateRecoveryPlanOperationResponse> GetCreateStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetCreateStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CreateRecoveryPlanOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CreateRecoveryPlanOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            RecoveryPlan recoveryPlanInstance = new RecoveryPlan();
                            result.RecoveryPlan = recoveryPlanInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                RecoveryPlanProperties propertiesInstance = new RecoveryPlanProperties();
                                recoveryPlanInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken primaryFabricIdValue = propertiesValue["primaryFabricId"];
                                if (primaryFabricIdValue != null && primaryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricIdInstance = ((string)primaryFabricIdValue);
                                    propertiesInstance.PrimaryFabricId = primaryFabricIdInstance;
                                }
                                
                                JToken primaryFabricFriendlyNameValue = propertiesValue["primaryFabricFriendlyName"];
                                if (primaryFabricFriendlyNameValue != null && primaryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricFriendlyNameInstance = ((string)primaryFabricFriendlyNameValue);
                                    propertiesInstance.PrimaryFabricFriendlyName = primaryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricIdValue = propertiesValue["recoveryFabricId"];
                                if (recoveryFabricIdValue != null && recoveryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricIdInstance = ((string)recoveryFabricIdValue);
                                    propertiesInstance.RecoveryFabricId = recoveryFabricIdInstance;
                                }
                                
                                JToken recoveryFabricFriendlyNameValue = propertiesValue["recoveryFabricFriendlyName"];
                                if (recoveryFabricFriendlyNameValue != null && recoveryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricFriendlyNameInstance = ((string)recoveryFabricFriendlyNameValue);
                                    propertiesInstance.RecoveryFabricFriendlyName = recoveryFabricFriendlyNameInstance;
                                }
                                
                                JToken failoverDeploymentModelValue = propertiesValue["failoverDeploymentModel"];
                                if (failoverDeploymentModelValue != null && failoverDeploymentModelValue.Type != JTokenType.Null)
                                {
                                    string failoverDeploymentModelInstance = ((string)failoverDeploymentModelValue);
                                    propertiesInstance.FailoverDeploymentModel = failoverDeploymentModelInstance;
                                }
                                
                                JToken replicationProvidersArray = propertiesValue["replicationProviders"];
                                if (replicationProvidersArray != null && replicationProvidersArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationProvidersValue in ((JArray)replicationProvidersArray))
                                    {
                                        propertiesInstance.ReplicationProviders.Add(((string)replicationProvidersValue));
                                    }
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken lastPlannedFailoverTimeValue = propertiesValue["lastPlannedFailoverTime"];
                                if (lastPlannedFailoverTimeValue != null && lastPlannedFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastPlannedFailoverTimeInstance = ((DateTime)lastPlannedFailoverTimeValue);
                                    propertiesInstance.LastPlannedFailoverTime = lastPlannedFailoverTimeInstance;
                                }
                                
                                JToken lastTestFailoverTimeValue = propertiesValue["lastTestFailoverTime"];
                                if (lastTestFailoverTimeValue != null && lastTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastTestFailoverTimeInstance = ((DateTime)lastTestFailoverTimeValue);
                                    propertiesInstance.LastTestFailoverTime = lastTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    CurrentScenarioDetails currentScenarioInstance = new CurrentScenarioDetails();
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                    
                                    JToken scenarioNameValue = currentScenarioValue["scenarioName"];
                                    if (scenarioNameValue != null && scenarioNameValue.Type != JTokenType.Null)
                                    {
                                        string scenarioNameInstance = ((string)scenarioNameValue);
                                        currentScenarioInstance.ScenarioName = scenarioNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentScenarioValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentScenarioInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentScenarioValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentScenarioInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken currentScenarioStatusValue = propertiesValue["currentScenarioStatus"];
                                if (currentScenarioStatusValue != null && currentScenarioStatusValue.Type != JTokenType.Null)
                                {
                                    string currentScenarioStatusInstance = ((string)currentScenarioStatusValue);
                                    propertiesInstance.CurrentScenarioStatus = currentScenarioStatusInstance;
                                }
                                
                                JToken currentScenarioStatusDescriptionValue = propertiesValue["currentScenarioStatusDescription"];
                                if (currentScenarioStatusDescriptionValue != null && currentScenarioStatusDescriptionValue.Type != JTokenType.Null)
                                {
                                    string currentScenarioStatusDescriptionInstance = ((string)currentScenarioStatusDescriptionValue);
                                    propertiesInstance.CurrentScenarioStatusDescription = currentScenarioStatusDescriptionInstance;
                                }
                                
                                JToken groupsArray = propertiesValue["groups"];
                                if (groupsArray != null && groupsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken groupsValue in ((JArray)groupsArray))
                                    {
                                        RecoveryPlanGroup recoveryPlanGroupInstance = new RecoveryPlanGroup();
                                        propertiesInstance.Groups.Add(recoveryPlanGroupInstance);
                                        
                                        JToken groupTypeValue = groupsValue["groupType"];
                                        if (groupTypeValue != null && groupTypeValue.Type != JTokenType.Null)
                                        {
                                            string groupTypeInstance = ((string)groupTypeValue);
                                            recoveryPlanGroupInstance.GroupType = groupTypeInstance;
                                        }
                                        
                                        JToken replicationProtectedItemsArray = groupsValue["replicationProtectedItems"];
                                        if (replicationProtectedItemsArray != null && replicationProtectedItemsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken replicationProtectedItemsValue in ((JArray)replicationProtectedItemsArray))
                                            {
                                                RecoveryPlanProtectedItem recoveryPlanProtectedItemInstance = new RecoveryPlanProtectedItem();
                                                recoveryPlanGroupInstance.ReplicationProtectedItems.Add(recoveryPlanProtectedItemInstance);
                                                
                                                JToken idValue = replicationProtectedItemsValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    recoveryPlanProtectedItemInstance.Id = idInstance;
                                                }
                                                
                                                JToken virtualMachineIdValue = replicationProtectedItemsValue["virtualMachineId"];
                                                if (virtualMachineIdValue != null && virtualMachineIdValue.Type != JTokenType.Null)
                                                {
                                                    string virtualMachineIdInstance = ((string)virtualMachineIdValue);
                                                    recoveryPlanProtectedItemInstance.VirtualMachineId = virtualMachineIdInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken startGroupActionsArray = groupsValue["startGroupActions"];
                                        if (startGroupActionsArray != null && startGroupActionsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken startGroupActionsValue in ((JArray)startGroupActionsArray))
                                            {
                                                RecoveryPlanAction recoveryPlanActionInstance = new RecoveryPlanAction();
                                                recoveryPlanGroupInstance.StartGroupActions.Add(recoveryPlanActionInstance);
                                                
                                                JToken actionNameValue = startGroupActionsValue["actionName"];
                                                if (actionNameValue != null && actionNameValue.Type != JTokenType.Null)
                                                {
                                                    string actionNameInstance = ((string)actionNameValue);
                                                    recoveryPlanActionInstance.ActionName = actionNameInstance;
                                                }
                                                
                                                JToken failoverTypesArray = startGroupActionsValue["failoverTypes"];
                                                if (failoverTypesArray != null && failoverTypesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverTypesValue in ((JArray)failoverTypesArray))
                                                    {
                                                        recoveryPlanActionInstance.FailoverTypes.Add(((string)failoverTypesValue));
                                                    }
                                                }
                                                
                                                JToken failoverDirectionsArray = startGroupActionsValue["failoverDirections"];
                                                if (failoverDirectionsArray != null && failoverDirectionsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverDirectionsValue in ((JArray)failoverDirectionsArray))
                                                    {
                                                        recoveryPlanActionInstance.FailoverDirections.Add(((string)failoverDirectionsValue));
                                                    }
                                                }
                                                
                                                JToken customDetailsValue = startGroupActionsValue["customDetails"];
                                                if (customDetailsValue != null && customDetailsValue.Type != JTokenType.Null)
                                                {
                                                    string typeName = ((string)customDetailsValue["instanceType"]);
                                                    if (typeName == "ScriptActionDetails")
                                                    {
                                                        RecoveryPlanScriptActionDetails recoveryPlanScriptActionDetailsInstance = new RecoveryPlanScriptActionDetails();
                                                        
                                                        JToken pathValue = customDetailsValue["path"];
                                                        if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                        {
                                                            string pathInstance = ((string)pathValue);
                                                            recoveryPlanScriptActionDetailsInstance.Path = pathInstance;
                                                        }
                                                        
                                                        JToken timeoutValue = customDetailsValue["timeout"];
                                                        if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                            recoveryPlanScriptActionDetailsInstance.Timeout = timeoutInstance;
                                                        }
                                                        
                                                        JToken fabricLocationValue = customDetailsValue["fabricLocation"];
                                                        if (fabricLocationValue != null && fabricLocationValue.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance = ((string)fabricLocationValue);
                                                            recoveryPlanScriptActionDetailsInstance.FabricLocation = fabricLocationInstance;
                                                        }
                                                        
                                                        JToken instanceTypeValue = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                                            recoveryPlanScriptActionDetailsInstance.InstanceType = instanceTypeInstance;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanScriptActionDetailsInstance;
                                                    }
                                                    if (typeName == "AutomationRunbookActionDetails")
                                                    {
                                                        RecoveryPlanAutomationRunbookActionDetails recoveryPlanAutomationRunbookActionDetailsInstance = new RecoveryPlanAutomationRunbookActionDetails();
                                                        
                                                        JToken runbookIdValue = customDetailsValue["runbookId"];
                                                        if (runbookIdValue != null && runbookIdValue.Type != JTokenType.Null)
                                                        {
                                                            string runbookIdInstance = ((string)runbookIdValue);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.RunbookId = runbookIdInstance;
                                                        }
                                                        
                                                        JToken timeoutValue2 = customDetailsValue["timeout"];
                                                        if (timeoutValue2 != null && timeoutValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance2 = TimeSpan.Parse(((string)timeoutValue2), CultureInfo.InvariantCulture);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.Timeout = timeoutInstance2;
                                                        }
                                                        
                                                        JToken fabricLocationValue2 = customDetailsValue["fabricLocation"];
                                                        if (fabricLocationValue2 != null && fabricLocationValue2.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance2 = ((string)fabricLocationValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.FabricLocation = fabricLocationInstance2;
                                                        }
                                                        
                                                        JToken instanceTypeValue2 = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.InstanceType = instanceTypeInstance2;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanAutomationRunbookActionDetailsInstance;
                                                    }
                                                    if (typeName == "ManualActionDetails")
                                                    {
                                                        RecoveryPlanManualActionDetails recoveryPlanManualActionDetailsInstance = new RecoveryPlanManualActionDetails();
                                                        
                                                        JToken descriptionValue = customDetailsValue["description"];
                                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                                        {
                                                            string descriptionInstance = ((string)descriptionValue);
                                                            recoveryPlanManualActionDetailsInstance.Description = descriptionInstance;
                                                        }
                                                        
                                                        JToken instanceTypeValue3 = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                                            recoveryPlanManualActionDetailsInstance.InstanceType = instanceTypeInstance3;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanManualActionDetailsInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken endGroupActionsArray = groupsValue["endGroupActions"];
                                        if (endGroupActionsArray != null && endGroupActionsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken endGroupActionsValue in ((JArray)endGroupActionsArray))
                                            {
                                                RecoveryPlanAction recoveryPlanActionInstance2 = new RecoveryPlanAction();
                                                recoveryPlanGroupInstance.EndGroupActions.Add(recoveryPlanActionInstance2);
                                                
                                                JToken actionNameValue2 = endGroupActionsValue["actionName"];
                                                if (actionNameValue2 != null && actionNameValue2.Type != JTokenType.Null)
                                                {
                                                    string actionNameInstance2 = ((string)actionNameValue2);
                                                    recoveryPlanActionInstance2.ActionName = actionNameInstance2;
                                                }
                                                
                                                JToken failoverTypesArray2 = endGroupActionsValue["failoverTypes"];
                                                if (failoverTypesArray2 != null && failoverTypesArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverTypesValue2 in ((JArray)failoverTypesArray2))
                                                    {
                                                        recoveryPlanActionInstance2.FailoverTypes.Add(((string)failoverTypesValue2));
                                                    }
                                                }
                                                
                                                JToken failoverDirectionsArray2 = endGroupActionsValue["failoverDirections"];
                                                if (failoverDirectionsArray2 != null && failoverDirectionsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverDirectionsValue2 in ((JArray)failoverDirectionsArray2))
                                                    {
                                                        recoveryPlanActionInstance2.FailoverDirections.Add(((string)failoverDirectionsValue2));
                                                    }
                                                }
                                                
                                                JToken customDetailsValue2 = endGroupActionsValue["customDetails"];
                                                if (customDetailsValue2 != null && customDetailsValue2.Type != JTokenType.Null)
                                                {
                                                    string typeName2 = ((string)customDetailsValue2["instanceType"]);
                                                    if (typeName2 == "ScriptActionDetails")
                                                    {
                                                        RecoveryPlanScriptActionDetails recoveryPlanScriptActionDetailsInstance2 = new RecoveryPlanScriptActionDetails();
                                                        
                                                        JToken pathValue2 = customDetailsValue2["path"];
                                                        if (pathValue2 != null && pathValue2.Type != JTokenType.Null)
                                                        {
                                                            string pathInstance2 = ((string)pathValue2);
                                                            recoveryPlanScriptActionDetailsInstance2.Path = pathInstance2;
                                                        }
                                                        
                                                        JToken timeoutValue3 = customDetailsValue2["timeout"];
                                                        if (timeoutValue3 != null && timeoutValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance3 = TimeSpan.Parse(((string)timeoutValue3), CultureInfo.InvariantCulture);
                                                            recoveryPlanScriptActionDetailsInstance2.Timeout = timeoutInstance3;
                                                        }
                                                        
                                                        JToken fabricLocationValue3 = customDetailsValue2["fabricLocation"];
                                                        if (fabricLocationValue3 != null && fabricLocationValue3.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance3 = ((string)fabricLocationValue3);
                                                            recoveryPlanScriptActionDetailsInstance2.FabricLocation = fabricLocationInstance3;
                                                        }
                                                        
                                                        JToken instanceTypeValue4 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                                            recoveryPlanScriptActionDetailsInstance2.InstanceType = instanceTypeInstance4;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanScriptActionDetailsInstance2;
                                                    }
                                                    if (typeName2 == "AutomationRunbookActionDetails")
                                                    {
                                                        RecoveryPlanAutomationRunbookActionDetails recoveryPlanAutomationRunbookActionDetailsInstance2 = new RecoveryPlanAutomationRunbookActionDetails();
                                                        
                                                        JToken runbookIdValue2 = customDetailsValue2["runbookId"];
                                                        if (runbookIdValue2 != null && runbookIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string runbookIdInstance2 = ((string)runbookIdValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.RunbookId = runbookIdInstance2;
                                                        }
                                                        
                                                        JToken timeoutValue4 = customDetailsValue2["timeout"];
                                                        if (timeoutValue4 != null && timeoutValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance4 = TimeSpan.Parse(((string)timeoutValue4), CultureInfo.InvariantCulture);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.Timeout = timeoutInstance4;
                                                        }
                                                        
                                                        JToken fabricLocationValue4 = customDetailsValue2["fabricLocation"];
                                                        if (fabricLocationValue4 != null && fabricLocationValue4.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance4 = ((string)fabricLocationValue4);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.FabricLocation = fabricLocationInstance4;
                                                        }
                                                        
                                                        JToken instanceTypeValue5 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue5 != null && instanceTypeValue5.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance5 = ((string)instanceTypeValue5);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.InstanceType = instanceTypeInstance5;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanAutomationRunbookActionDetailsInstance2;
                                                    }
                                                    if (typeName2 == "ManualActionDetails")
                                                    {
                                                        RecoveryPlanManualActionDetails recoveryPlanManualActionDetailsInstance2 = new RecoveryPlanManualActionDetails();
                                                        
                                                        JToken descriptionValue2 = customDetailsValue2["description"];
                                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                                        {
                                                            string descriptionInstance2 = ((string)descriptionValue2);
                                                            recoveryPlanManualActionDetailsInstance2.Description = descriptionInstance2;
                                                        }
                                                        
                                                        JToken instanceTypeValue6 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue6 != null && instanceTypeValue6.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance6 = ((string)instanceTypeValue6);
                                                            recoveryPlanManualActionDetailsInstance2.InstanceType = instanceTypeInstance6;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanManualActionDetailsInstance2;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                recoveryPlanInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                recoveryPlanInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                recoveryPlanInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                recoveryPlanInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    recoveryPlanInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<DeleteRecoveryPlanOperationResponse> GetDeleteStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetDeleteStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DeleteRecoveryPlanOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DeleteRecoveryPlanOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            RecoveryPlan recoveryPlanInstance = new RecoveryPlan();
                            result.RecoveryPlan = recoveryPlanInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                RecoveryPlanProperties propertiesInstance = new RecoveryPlanProperties();
                                recoveryPlanInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken primaryFabricIdValue = propertiesValue["primaryFabricId"];
                                if (primaryFabricIdValue != null && primaryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricIdInstance = ((string)primaryFabricIdValue);
                                    propertiesInstance.PrimaryFabricId = primaryFabricIdInstance;
                                }
                                
                                JToken primaryFabricFriendlyNameValue = propertiesValue["primaryFabricFriendlyName"];
                                if (primaryFabricFriendlyNameValue != null && primaryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricFriendlyNameInstance = ((string)primaryFabricFriendlyNameValue);
                                    propertiesInstance.PrimaryFabricFriendlyName = primaryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricIdValue = propertiesValue["recoveryFabricId"];
                                if (recoveryFabricIdValue != null && recoveryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricIdInstance = ((string)recoveryFabricIdValue);
                                    propertiesInstance.RecoveryFabricId = recoveryFabricIdInstance;
                                }
                                
                                JToken recoveryFabricFriendlyNameValue = propertiesValue["recoveryFabricFriendlyName"];
                                if (recoveryFabricFriendlyNameValue != null && recoveryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricFriendlyNameInstance = ((string)recoveryFabricFriendlyNameValue);
                                    propertiesInstance.RecoveryFabricFriendlyName = recoveryFabricFriendlyNameInstance;
                                }
                                
                                JToken failoverDeploymentModelValue = propertiesValue["failoverDeploymentModel"];
                                if (failoverDeploymentModelValue != null && failoverDeploymentModelValue.Type != JTokenType.Null)
                                {
                                    string failoverDeploymentModelInstance = ((string)failoverDeploymentModelValue);
                                    propertiesInstance.FailoverDeploymentModel = failoverDeploymentModelInstance;
                                }
                                
                                JToken replicationProvidersArray = propertiesValue["replicationProviders"];
                                if (replicationProvidersArray != null && replicationProvidersArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationProvidersValue in ((JArray)replicationProvidersArray))
                                    {
                                        propertiesInstance.ReplicationProviders.Add(((string)replicationProvidersValue));
                                    }
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken lastPlannedFailoverTimeValue = propertiesValue["lastPlannedFailoverTime"];
                                if (lastPlannedFailoverTimeValue != null && lastPlannedFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastPlannedFailoverTimeInstance = ((DateTime)lastPlannedFailoverTimeValue);
                                    propertiesInstance.LastPlannedFailoverTime = lastPlannedFailoverTimeInstance;
                                }
                                
                                JToken lastTestFailoverTimeValue = propertiesValue["lastTestFailoverTime"];
                                if (lastTestFailoverTimeValue != null && lastTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastTestFailoverTimeInstance = ((DateTime)lastTestFailoverTimeValue);
                                    propertiesInstance.LastTestFailoverTime = lastTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    CurrentScenarioDetails currentScenarioInstance = new CurrentScenarioDetails();
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                    
                                    JToken scenarioNameValue = currentScenarioValue["scenarioName"];
                                    if (scenarioNameValue != null && scenarioNameValue.Type != JTokenType.Null)
                                    {
                                        string scenarioNameInstance = ((string)scenarioNameValue);
                                        currentScenarioInstance.ScenarioName = scenarioNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentScenarioValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentScenarioInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentScenarioValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentScenarioInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken currentScenarioStatusValue = propertiesValue["currentScenarioStatus"];
                                if (currentScenarioStatusValue != null && currentScenarioStatusValue.Type != JTokenType.Null)
                                {
                                    string currentScenarioStatusInstance = ((string)currentScenarioStatusValue);
                                    propertiesInstance.CurrentScenarioStatus = currentScenarioStatusInstance;
                                }
                                
                                JToken currentScenarioStatusDescriptionValue = propertiesValue["currentScenarioStatusDescription"];
                                if (currentScenarioStatusDescriptionValue != null && currentScenarioStatusDescriptionValue.Type != JTokenType.Null)
                                {
                                    string currentScenarioStatusDescriptionInstance = ((string)currentScenarioStatusDescriptionValue);
                                    propertiesInstance.CurrentScenarioStatusDescription = currentScenarioStatusDescriptionInstance;
                                }
                                
                                JToken groupsArray = propertiesValue["groups"];
                                if (groupsArray != null && groupsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken groupsValue in ((JArray)groupsArray))
                                    {
                                        RecoveryPlanGroup recoveryPlanGroupInstance = new RecoveryPlanGroup();
                                        propertiesInstance.Groups.Add(recoveryPlanGroupInstance);
                                        
                                        JToken groupTypeValue = groupsValue["groupType"];
                                        if (groupTypeValue != null && groupTypeValue.Type != JTokenType.Null)
                                        {
                                            string groupTypeInstance = ((string)groupTypeValue);
                                            recoveryPlanGroupInstance.GroupType = groupTypeInstance;
                                        }
                                        
                                        JToken replicationProtectedItemsArray = groupsValue["replicationProtectedItems"];
                                        if (replicationProtectedItemsArray != null && replicationProtectedItemsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken replicationProtectedItemsValue in ((JArray)replicationProtectedItemsArray))
                                            {
                                                RecoveryPlanProtectedItem recoveryPlanProtectedItemInstance = new RecoveryPlanProtectedItem();
                                                recoveryPlanGroupInstance.ReplicationProtectedItems.Add(recoveryPlanProtectedItemInstance);
                                                
                                                JToken idValue = replicationProtectedItemsValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    recoveryPlanProtectedItemInstance.Id = idInstance;
                                                }
                                                
                                                JToken virtualMachineIdValue = replicationProtectedItemsValue["virtualMachineId"];
                                                if (virtualMachineIdValue != null && virtualMachineIdValue.Type != JTokenType.Null)
                                                {
                                                    string virtualMachineIdInstance = ((string)virtualMachineIdValue);
                                                    recoveryPlanProtectedItemInstance.VirtualMachineId = virtualMachineIdInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken startGroupActionsArray = groupsValue["startGroupActions"];
                                        if (startGroupActionsArray != null && startGroupActionsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken startGroupActionsValue in ((JArray)startGroupActionsArray))
                                            {
                                                RecoveryPlanAction recoveryPlanActionInstance = new RecoveryPlanAction();
                                                recoveryPlanGroupInstance.StartGroupActions.Add(recoveryPlanActionInstance);
                                                
                                                JToken actionNameValue = startGroupActionsValue["actionName"];
                                                if (actionNameValue != null && actionNameValue.Type != JTokenType.Null)
                                                {
                                                    string actionNameInstance = ((string)actionNameValue);
                                                    recoveryPlanActionInstance.ActionName = actionNameInstance;
                                                }
                                                
                                                JToken failoverTypesArray = startGroupActionsValue["failoverTypes"];
                                                if (failoverTypesArray != null && failoverTypesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverTypesValue in ((JArray)failoverTypesArray))
                                                    {
                                                        recoveryPlanActionInstance.FailoverTypes.Add(((string)failoverTypesValue));
                                                    }
                                                }
                                                
                                                JToken failoverDirectionsArray = startGroupActionsValue["failoverDirections"];
                                                if (failoverDirectionsArray != null && failoverDirectionsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverDirectionsValue in ((JArray)failoverDirectionsArray))
                                                    {
                                                        recoveryPlanActionInstance.FailoverDirections.Add(((string)failoverDirectionsValue));
                                                    }
                                                }
                                                
                                                JToken customDetailsValue = startGroupActionsValue["customDetails"];
                                                if (customDetailsValue != null && customDetailsValue.Type != JTokenType.Null)
                                                {
                                                    string typeName = ((string)customDetailsValue["instanceType"]);
                                                    if (typeName == "ScriptActionDetails")
                                                    {
                                                        RecoveryPlanScriptActionDetails recoveryPlanScriptActionDetailsInstance = new RecoveryPlanScriptActionDetails();
                                                        
                                                        JToken pathValue = customDetailsValue["path"];
                                                        if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                        {
                                                            string pathInstance = ((string)pathValue);
                                                            recoveryPlanScriptActionDetailsInstance.Path = pathInstance;
                                                        }
                                                        
                                                        JToken timeoutValue = customDetailsValue["timeout"];
                                                        if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                            recoveryPlanScriptActionDetailsInstance.Timeout = timeoutInstance;
                                                        }
                                                        
                                                        JToken fabricLocationValue = customDetailsValue["fabricLocation"];
                                                        if (fabricLocationValue != null && fabricLocationValue.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance = ((string)fabricLocationValue);
                                                            recoveryPlanScriptActionDetailsInstance.FabricLocation = fabricLocationInstance;
                                                        }
                                                        
                                                        JToken instanceTypeValue = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                                            recoveryPlanScriptActionDetailsInstance.InstanceType = instanceTypeInstance;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanScriptActionDetailsInstance;
                                                    }
                                                    if (typeName == "AutomationRunbookActionDetails")
                                                    {
                                                        RecoveryPlanAutomationRunbookActionDetails recoveryPlanAutomationRunbookActionDetailsInstance = new RecoveryPlanAutomationRunbookActionDetails();
                                                        
                                                        JToken runbookIdValue = customDetailsValue["runbookId"];
                                                        if (runbookIdValue != null && runbookIdValue.Type != JTokenType.Null)
                                                        {
                                                            string runbookIdInstance = ((string)runbookIdValue);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.RunbookId = runbookIdInstance;
                                                        }
                                                        
                                                        JToken timeoutValue2 = customDetailsValue["timeout"];
                                                        if (timeoutValue2 != null && timeoutValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance2 = TimeSpan.Parse(((string)timeoutValue2), CultureInfo.InvariantCulture);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.Timeout = timeoutInstance2;
                                                        }
                                                        
                                                        JToken fabricLocationValue2 = customDetailsValue["fabricLocation"];
                                                        if (fabricLocationValue2 != null && fabricLocationValue2.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance2 = ((string)fabricLocationValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.FabricLocation = fabricLocationInstance2;
                                                        }
                                                        
                                                        JToken instanceTypeValue2 = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.InstanceType = instanceTypeInstance2;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanAutomationRunbookActionDetailsInstance;
                                                    }
                                                    if (typeName == "ManualActionDetails")
                                                    {
                                                        RecoveryPlanManualActionDetails recoveryPlanManualActionDetailsInstance = new RecoveryPlanManualActionDetails();
                                                        
                                                        JToken descriptionValue = customDetailsValue["description"];
                                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                                        {
                                                            string descriptionInstance = ((string)descriptionValue);
                                                            recoveryPlanManualActionDetailsInstance.Description = descriptionInstance;
                                                        }
                                                        
                                                        JToken instanceTypeValue3 = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                                            recoveryPlanManualActionDetailsInstance.InstanceType = instanceTypeInstance3;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanManualActionDetailsInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken endGroupActionsArray = groupsValue["endGroupActions"];
                                        if (endGroupActionsArray != null && endGroupActionsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken endGroupActionsValue in ((JArray)endGroupActionsArray))
                                            {
                                                RecoveryPlanAction recoveryPlanActionInstance2 = new RecoveryPlanAction();
                                                recoveryPlanGroupInstance.EndGroupActions.Add(recoveryPlanActionInstance2);
                                                
                                                JToken actionNameValue2 = endGroupActionsValue["actionName"];
                                                if (actionNameValue2 != null && actionNameValue2.Type != JTokenType.Null)
                                                {
                                                    string actionNameInstance2 = ((string)actionNameValue2);
                                                    recoveryPlanActionInstance2.ActionName = actionNameInstance2;
                                                }
                                                
                                                JToken failoverTypesArray2 = endGroupActionsValue["failoverTypes"];
                                                if (failoverTypesArray2 != null && failoverTypesArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverTypesValue2 in ((JArray)failoverTypesArray2))
                                                    {
                                                        recoveryPlanActionInstance2.FailoverTypes.Add(((string)failoverTypesValue2));
                                                    }
                                                }
                                                
                                                JToken failoverDirectionsArray2 = endGroupActionsValue["failoverDirections"];
                                                if (failoverDirectionsArray2 != null && failoverDirectionsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverDirectionsValue2 in ((JArray)failoverDirectionsArray2))
                                                    {
                                                        recoveryPlanActionInstance2.FailoverDirections.Add(((string)failoverDirectionsValue2));
                                                    }
                                                }
                                                
                                                JToken customDetailsValue2 = endGroupActionsValue["customDetails"];
                                                if (customDetailsValue2 != null && customDetailsValue2.Type != JTokenType.Null)
                                                {
                                                    string typeName2 = ((string)customDetailsValue2["instanceType"]);
                                                    if (typeName2 == "ScriptActionDetails")
                                                    {
                                                        RecoveryPlanScriptActionDetails recoveryPlanScriptActionDetailsInstance2 = new RecoveryPlanScriptActionDetails();
                                                        
                                                        JToken pathValue2 = customDetailsValue2["path"];
                                                        if (pathValue2 != null && pathValue2.Type != JTokenType.Null)
                                                        {
                                                            string pathInstance2 = ((string)pathValue2);
                                                            recoveryPlanScriptActionDetailsInstance2.Path = pathInstance2;
                                                        }
                                                        
                                                        JToken timeoutValue3 = customDetailsValue2["timeout"];
                                                        if (timeoutValue3 != null && timeoutValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance3 = TimeSpan.Parse(((string)timeoutValue3), CultureInfo.InvariantCulture);
                                                            recoveryPlanScriptActionDetailsInstance2.Timeout = timeoutInstance3;
                                                        }
                                                        
                                                        JToken fabricLocationValue3 = customDetailsValue2["fabricLocation"];
                                                        if (fabricLocationValue3 != null && fabricLocationValue3.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance3 = ((string)fabricLocationValue3);
                                                            recoveryPlanScriptActionDetailsInstance2.FabricLocation = fabricLocationInstance3;
                                                        }
                                                        
                                                        JToken instanceTypeValue4 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                                            recoveryPlanScriptActionDetailsInstance2.InstanceType = instanceTypeInstance4;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanScriptActionDetailsInstance2;
                                                    }
                                                    if (typeName2 == "AutomationRunbookActionDetails")
                                                    {
                                                        RecoveryPlanAutomationRunbookActionDetails recoveryPlanAutomationRunbookActionDetailsInstance2 = new RecoveryPlanAutomationRunbookActionDetails();
                                                        
                                                        JToken runbookIdValue2 = customDetailsValue2["runbookId"];
                                                        if (runbookIdValue2 != null && runbookIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string runbookIdInstance2 = ((string)runbookIdValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.RunbookId = runbookIdInstance2;
                                                        }
                                                        
                                                        JToken timeoutValue4 = customDetailsValue2["timeout"];
                                                        if (timeoutValue4 != null && timeoutValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance4 = TimeSpan.Parse(((string)timeoutValue4), CultureInfo.InvariantCulture);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.Timeout = timeoutInstance4;
                                                        }
                                                        
                                                        JToken fabricLocationValue4 = customDetailsValue2["fabricLocation"];
                                                        if (fabricLocationValue4 != null && fabricLocationValue4.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance4 = ((string)fabricLocationValue4);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.FabricLocation = fabricLocationInstance4;
                                                        }
                                                        
                                                        JToken instanceTypeValue5 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue5 != null && instanceTypeValue5.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance5 = ((string)instanceTypeValue5);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.InstanceType = instanceTypeInstance5;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanAutomationRunbookActionDetailsInstance2;
                                                    }
                                                    if (typeName2 == "ManualActionDetails")
                                                    {
                                                        RecoveryPlanManualActionDetails recoveryPlanManualActionDetailsInstance2 = new RecoveryPlanManualActionDetails();
                                                        
                                                        JToken descriptionValue2 = customDetailsValue2["description"];
                                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                                        {
                                                            string descriptionInstance2 = ((string)descriptionValue2);
                                                            recoveryPlanManualActionDetailsInstance2.Description = descriptionInstance2;
                                                        }
                                                        
                                                        JToken instanceTypeValue6 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue6 != null && instanceTypeValue6.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance6 = ((string)instanceTypeValue6);
                                                            recoveryPlanManualActionDetailsInstance2.InstanceType = instanceTypeInstance6;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanManualActionDetailsInstance2;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                recoveryPlanInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                recoveryPlanInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                recoveryPlanInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                recoveryPlanInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    recoveryPlanInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<RecoveryPlanOperationResponse> GetPlannedFailoverStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetPlannedFailoverStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RecoveryPlanOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RecoveryPlanOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            RecoveryPlan recoveryPlanInstance = new RecoveryPlan();
                            result.RecoveryPlan = recoveryPlanInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                RecoveryPlanProperties propertiesInstance = new RecoveryPlanProperties();
                                recoveryPlanInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken primaryFabricIdValue = propertiesValue["primaryFabricId"];
                                if (primaryFabricIdValue != null && primaryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricIdInstance = ((string)primaryFabricIdValue);
                                    propertiesInstance.PrimaryFabricId = primaryFabricIdInstance;
                                }
                                
                                JToken primaryFabricFriendlyNameValue = propertiesValue["primaryFabricFriendlyName"];
                                if (primaryFabricFriendlyNameValue != null && primaryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricFriendlyNameInstance = ((string)primaryFabricFriendlyNameValue);
                                    propertiesInstance.PrimaryFabricFriendlyName = primaryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricIdValue = propertiesValue["recoveryFabricId"];
                                if (recoveryFabricIdValue != null && recoveryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricIdInstance = ((string)recoveryFabricIdValue);
                                    propertiesInstance.RecoveryFabricId = recoveryFabricIdInstance;
                                }
                                
                                JToken recoveryFabricFriendlyNameValue = propertiesValue["recoveryFabricFriendlyName"];
                                if (recoveryFabricFriendlyNameValue != null && recoveryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricFriendlyNameInstance = ((string)recoveryFabricFriendlyNameValue);
                                    propertiesInstance.RecoveryFabricFriendlyName = recoveryFabricFriendlyNameInstance;
                                }
                                
                                JToken failoverDeploymentModelValue = propertiesValue["failoverDeploymentModel"];
                                if (failoverDeploymentModelValue != null && failoverDeploymentModelValue.Type != JTokenType.Null)
                                {
                                    string failoverDeploymentModelInstance = ((string)failoverDeploymentModelValue);
                                    propertiesInstance.FailoverDeploymentModel = failoverDeploymentModelInstance;
                                }
                                
                                JToken replicationProvidersArray = propertiesValue["replicationProviders"];
                                if (replicationProvidersArray != null && replicationProvidersArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationProvidersValue in ((JArray)replicationProvidersArray))
                                    {
                                        propertiesInstance.ReplicationProviders.Add(((string)replicationProvidersValue));
                                    }
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken lastPlannedFailoverTimeValue = propertiesValue["lastPlannedFailoverTime"];
                                if (lastPlannedFailoverTimeValue != null && lastPlannedFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastPlannedFailoverTimeInstance = ((DateTime)lastPlannedFailoverTimeValue);
                                    propertiesInstance.LastPlannedFailoverTime = lastPlannedFailoverTimeInstance;
                                }
                                
                                JToken lastTestFailoverTimeValue = propertiesValue["lastTestFailoverTime"];
                                if (lastTestFailoverTimeValue != null && lastTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastTestFailoverTimeInstance = ((DateTime)lastTestFailoverTimeValue);
                                    propertiesInstance.LastTestFailoverTime = lastTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    CurrentScenarioDetails currentScenarioInstance = new CurrentScenarioDetails();
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                    
                                    JToken scenarioNameValue = currentScenarioValue["scenarioName"];
                                    if (scenarioNameValue != null && scenarioNameValue.Type != JTokenType.Null)
                                    {
                                        string scenarioNameInstance = ((string)scenarioNameValue);
                                        currentScenarioInstance.ScenarioName = scenarioNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentScenarioValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentScenarioInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentScenarioValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentScenarioInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken currentScenarioStatusValue = propertiesValue["currentScenarioStatus"];
                                if (currentScenarioStatusValue != null && currentScenarioStatusValue.Type != JTokenType.Null)
                                {
                                    string currentScenarioStatusInstance = ((string)currentScenarioStatusValue);
                                    propertiesInstance.CurrentScenarioStatus = currentScenarioStatusInstance;
                                }
                                
                                JToken currentScenarioStatusDescriptionValue = propertiesValue["currentScenarioStatusDescription"];
                                if (currentScenarioStatusDescriptionValue != null && currentScenarioStatusDescriptionValue.Type != JTokenType.Null)
                                {
                                    string currentScenarioStatusDescriptionInstance = ((string)currentScenarioStatusDescriptionValue);
                                    propertiesInstance.CurrentScenarioStatusDescription = currentScenarioStatusDescriptionInstance;
                                }
                                
                                JToken groupsArray = propertiesValue["groups"];
                                if (groupsArray != null && groupsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken groupsValue in ((JArray)groupsArray))
                                    {
                                        RecoveryPlanGroup recoveryPlanGroupInstance = new RecoveryPlanGroup();
                                        propertiesInstance.Groups.Add(recoveryPlanGroupInstance);
                                        
                                        JToken groupTypeValue = groupsValue["groupType"];
                                        if (groupTypeValue != null && groupTypeValue.Type != JTokenType.Null)
                                        {
                                            string groupTypeInstance = ((string)groupTypeValue);
                                            recoveryPlanGroupInstance.GroupType = groupTypeInstance;
                                        }
                                        
                                        JToken replicationProtectedItemsArray = groupsValue["replicationProtectedItems"];
                                        if (replicationProtectedItemsArray != null && replicationProtectedItemsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken replicationProtectedItemsValue in ((JArray)replicationProtectedItemsArray))
                                            {
                                                RecoveryPlanProtectedItem recoveryPlanProtectedItemInstance = new RecoveryPlanProtectedItem();
                                                recoveryPlanGroupInstance.ReplicationProtectedItems.Add(recoveryPlanProtectedItemInstance);
                                                
                                                JToken idValue = replicationProtectedItemsValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    recoveryPlanProtectedItemInstance.Id = idInstance;
                                                }
                                                
                                                JToken virtualMachineIdValue = replicationProtectedItemsValue["virtualMachineId"];
                                                if (virtualMachineIdValue != null && virtualMachineIdValue.Type != JTokenType.Null)
                                                {
                                                    string virtualMachineIdInstance = ((string)virtualMachineIdValue);
                                                    recoveryPlanProtectedItemInstance.VirtualMachineId = virtualMachineIdInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken startGroupActionsArray = groupsValue["startGroupActions"];
                                        if (startGroupActionsArray != null && startGroupActionsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken startGroupActionsValue in ((JArray)startGroupActionsArray))
                                            {
                                                RecoveryPlanAction recoveryPlanActionInstance = new RecoveryPlanAction();
                                                recoveryPlanGroupInstance.StartGroupActions.Add(recoveryPlanActionInstance);
                                                
                                                JToken actionNameValue = startGroupActionsValue["actionName"];
                                                if (actionNameValue != null && actionNameValue.Type != JTokenType.Null)
                                                {
                                                    string actionNameInstance = ((string)actionNameValue);
                                                    recoveryPlanActionInstance.ActionName = actionNameInstance;
                                                }
                                                
                                                JToken failoverTypesArray = startGroupActionsValue["failoverTypes"];
                                                if (failoverTypesArray != null && failoverTypesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverTypesValue in ((JArray)failoverTypesArray))
                                                    {
                                                        recoveryPlanActionInstance.FailoverTypes.Add(((string)failoverTypesValue));
                                                    }
                                                }
                                                
                                                JToken failoverDirectionsArray = startGroupActionsValue["failoverDirections"];
                                                if (failoverDirectionsArray != null && failoverDirectionsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverDirectionsValue in ((JArray)failoverDirectionsArray))
                                                    {
                                                        recoveryPlanActionInstance.FailoverDirections.Add(((string)failoverDirectionsValue));
                                                    }
                                                }
                                                
                                                JToken customDetailsValue = startGroupActionsValue["customDetails"];
                                                if (customDetailsValue != null && customDetailsValue.Type != JTokenType.Null)
                                                {
                                                    string typeName = ((string)customDetailsValue["instanceType"]);
                                                    if (typeName == "ScriptActionDetails")
                                                    {
                                                        RecoveryPlanScriptActionDetails recoveryPlanScriptActionDetailsInstance = new RecoveryPlanScriptActionDetails();
                                                        
                                                        JToken pathValue = customDetailsValue["path"];
                                                        if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                        {
                                                            string pathInstance = ((string)pathValue);
                                                            recoveryPlanScriptActionDetailsInstance.Path = pathInstance;
                                                        }
                                                        
                                                        JToken timeoutValue = customDetailsValue["timeout"];
                                                        if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                            recoveryPlanScriptActionDetailsInstance.Timeout = timeoutInstance;
                                                        }
                                                        
                                                        JToken fabricLocationValue = customDetailsValue["fabricLocation"];
                                                        if (fabricLocationValue != null && fabricLocationValue.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance = ((string)fabricLocationValue);
                                                            recoveryPlanScriptActionDetailsInstance.FabricLocation = fabricLocationInstance;
                                                        }
                                                        
                                                        JToken instanceTypeValue = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                                            recoveryPlanScriptActionDetailsInstance.InstanceType = instanceTypeInstance;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanScriptActionDetailsInstance;
                                                    }
                                                    if (typeName == "AutomationRunbookActionDetails")
                                                    {
                                                        RecoveryPlanAutomationRunbookActionDetails recoveryPlanAutomationRunbookActionDetailsInstance = new RecoveryPlanAutomationRunbookActionDetails();
                                                        
                                                        JToken runbookIdValue = customDetailsValue["runbookId"];
                                                        if (runbookIdValue != null && runbookIdValue.Type != JTokenType.Null)
                                                        {
                                                            string runbookIdInstance = ((string)runbookIdValue);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.RunbookId = runbookIdInstance;
                                                        }
                                                        
                                                        JToken timeoutValue2 = customDetailsValue["timeout"];
                                                        if (timeoutValue2 != null && timeoutValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance2 = TimeSpan.Parse(((string)timeoutValue2), CultureInfo.InvariantCulture);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.Timeout = timeoutInstance2;
                                                        }
                                                        
                                                        JToken fabricLocationValue2 = customDetailsValue["fabricLocation"];
                                                        if (fabricLocationValue2 != null && fabricLocationValue2.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance2 = ((string)fabricLocationValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.FabricLocation = fabricLocationInstance2;
                                                        }
                                                        
                                                        JToken instanceTypeValue2 = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.InstanceType = instanceTypeInstance2;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanAutomationRunbookActionDetailsInstance;
                                                    }
                                                    if (typeName == "ManualActionDetails")
                                                    {
                                                        RecoveryPlanManualActionDetails recoveryPlanManualActionDetailsInstance = new RecoveryPlanManualActionDetails();
                                                        
                                                        JToken descriptionValue = customDetailsValue["description"];
                                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                                        {
                                                            string descriptionInstance = ((string)descriptionValue);
                                                            recoveryPlanManualActionDetailsInstance.Description = descriptionInstance;
                                                        }
                                                        
                                                        JToken instanceTypeValue3 = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                                            recoveryPlanManualActionDetailsInstance.InstanceType = instanceTypeInstance3;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanManualActionDetailsInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken endGroupActionsArray = groupsValue["endGroupActions"];
                                        if (endGroupActionsArray != null && endGroupActionsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken endGroupActionsValue in ((JArray)endGroupActionsArray))
                                            {
                                                RecoveryPlanAction recoveryPlanActionInstance2 = new RecoveryPlanAction();
                                                recoveryPlanGroupInstance.EndGroupActions.Add(recoveryPlanActionInstance2);
                                                
                                                JToken actionNameValue2 = endGroupActionsValue["actionName"];
                                                if (actionNameValue2 != null && actionNameValue2.Type != JTokenType.Null)
                                                {
                                                    string actionNameInstance2 = ((string)actionNameValue2);
                                                    recoveryPlanActionInstance2.ActionName = actionNameInstance2;
                                                }
                                                
                                                JToken failoverTypesArray2 = endGroupActionsValue["failoverTypes"];
                                                if (failoverTypesArray2 != null && failoverTypesArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverTypesValue2 in ((JArray)failoverTypesArray2))
                                                    {
                                                        recoveryPlanActionInstance2.FailoverTypes.Add(((string)failoverTypesValue2));
                                                    }
                                                }
                                                
                                                JToken failoverDirectionsArray2 = endGroupActionsValue["failoverDirections"];
                                                if (failoverDirectionsArray2 != null && failoverDirectionsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverDirectionsValue2 in ((JArray)failoverDirectionsArray2))
                                                    {
                                                        recoveryPlanActionInstance2.FailoverDirections.Add(((string)failoverDirectionsValue2));
                                                    }
                                                }
                                                
                                                JToken customDetailsValue2 = endGroupActionsValue["customDetails"];
                                                if (customDetailsValue2 != null && customDetailsValue2.Type != JTokenType.Null)
                                                {
                                                    string typeName2 = ((string)customDetailsValue2["instanceType"]);
                                                    if (typeName2 == "ScriptActionDetails")
                                                    {
                                                        RecoveryPlanScriptActionDetails recoveryPlanScriptActionDetailsInstance2 = new RecoveryPlanScriptActionDetails();
                                                        
                                                        JToken pathValue2 = customDetailsValue2["path"];
                                                        if (pathValue2 != null && pathValue2.Type != JTokenType.Null)
                                                        {
                                                            string pathInstance2 = ((string)pathValue2);
                                                            recoveryPlanScriptActionDetailsInstance2.Path = pathInstance2;
                                                        }
                                                        
                                                        JToken timeoutValue3 = customDetailsValue2["timeout"];
                                                        if (timeoutValue3 != null && timeoutValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance3 = TimeSpan.Parse(((string)timeoutValue3), CultureInfo.InvariantCulture);
                                                            recoveryPlanScriptActionDetailsInstance2.Timeout = timeoutInstance3;
                                                        }
                                                        
                                                        JToken fabricLocationValue3 = customDetailsValue2["fabricLocation"];
                                                        if (fabricLocationValue3 != null && fabricLocationValue3.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance3 = ((string)fabricLocationValue3);
                                                            recoveryPlanScriptActionDetailsInstance2.FabricLocation = fabricLocationInstance3;
                                                        }
                                                        
                                                        JToken instanceTypeValue4 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                                            recoveryPlanScriptActionDetailsInstance2.InstanceType = instanceTypeInstance4;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanScriptActionDetailsInstance2;
                                                    }
                                                    if (typeName2 == "AutomationRunbookActionDetails")
                                                    {
                                                        RecoveryPlanAutomationRunbookActionDetails recoveryPlanAutomationRunbookActionDetailsInstance2 = new RecoveryPlanAutomationRunbookActionDetails();
                                                        
                                                        JToken runbookIdValue2 = customDetailsValue2["runbookId"];
                                                        if (runbookIdValue2 != null && runbookIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string runbookIdInstance2 = ((string)runbookIdValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.RunbookId = runbookIdInstance2;
                                                        }
                                                        
                                                        JToken timeoutValue4 = customDetailsValue2["timeout"];
                                                        if (timeoutValue4 != null && timeoutValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance4 = TimeSpan.Parse(((string)timeoutValue4), CultureInfo.InvariantCulture);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.Timeout = timeoutInstance4;
                                                        }
                                                        
                                                        JToken fabricLocationValue4 = customDetailsValue2["fabricLocation"];
                                                        if (fabricLocationValue4 != null && fabricLocationValue4.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance4 = ((string)fabricLocationValue4);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.FabricLocation = fabricLocationInstance4;
                                                        }
                                                        
                                                        JToken instanceTypeValue5 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue5 != null && instanceTypeValue5.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance5 = ((string)instanceTypeValue5);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.InstanceType = instanceTypeInstance5;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanAutomationRunbookActionDetailsInstance2;
                                                    }
                                                    if (typeName2 == "ManualActionDetails")
                                                    {
                                                        RecoveryPlanManualActionDetails recoveryPlanManualActionDetailsInstance2 = new RecoveryPlanManualActionDetails();
                                                        
                                                        JToken descriptionValue2 = customDetailsValue2["description"];
                                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                                        {
                                                            string descriptionInstance2 = ((string)descriptionValue2);
                                                            recoveryPlanManualActionDetailsInstance2.Description = descriptionInstance2;
                                                        }
                                                        
                                                        JToken instanceTypeValue6 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue6 != null && instanceTypeValue6.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance6 = ((string)instanceTypeValue6);
                                                            recoveryPlanManualActionDetailsInstance2.InstanceType = instanceTypeInstance6;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanManualActionDetailsInstance2;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                recoveryPlanInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                recoveryPlanInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                recoveryPlanInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                recoveryPlanInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    recoveryPlanInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<RecoveryPlanOperationResponse> GetReprotectStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetReprotectStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RecoveryPlanOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RecoveryPlanOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            RecoveryPlan recoveryPlanInstance = new RecoveryPlan();
                            result.RecoveryPlan = recoveryPlanInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                RecoveryPlanProperties propertiesInstance = new RecoveryPlanProperties();
                                recoveryPlanInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken primaryFabricIdValue = propertiesValue["primaryFabricId"];
                                if (primaryFabricIdValue != null && primaryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricIdInstance = ((string)primaryFabricIdValue);
                                    propertiesInstance.PrimaryFabricId = primaryFabricIdInstance;
                                }
                                
                                JToken primaryFabricFriendlyNameValue = propertiesValue["primaryFabricFriendlyName"];
                                if (primaryFabricFriendlyNameValue != null && primaryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricFriendlyNameInstance = ((string)primaryFabricFriendlyNameValue);
                                    propertiesInstance.PrimaryFabricFriendlyName = primaryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricIdValue = propertiesValue["recoveryFabricId"];
                                if (recoveryFabricIdValue != null && recoveryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricIdInstance = ((string)recoveryFabricIdValue);
                                    propertiesInstance.RecoveryFabricId = recoveryFabricIdInstance;
                                }
                                
                                JToken recoveryFabricFriendlyNameValue = propertiesValue["recoveryFabricFriendlyName"];
                                if (recoveryFabricFriendlyNameValue != null && recoveryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricFriendlyNameInstance = ((string)recoveryFabricFriendlyNameValue);
                                    propertiesInstance.RecoveryFabricFriendlyName = recoveryFabricFriendlyNameInstance;
                                }
                                
                                JToken failoverDeploymentModelValue = propertiesValue["failoverDeploymentModel"];
                                if (failoverDeploymentModelValue != null && failoverDeploymentModelValue.Type != JTokenType.Null)
                                {
                                    string failoverDeploymentModelInstance = ((string)failoverDeploymentModelValue);
                                    propertiesInstance.FailoverDeploymentModel = failoverDeploymentModelInstance;
                                }
                                
                                JToken replicationProvidersArray = propertiesValue["replicationProviders"];
                                if (replicationProvidersArray != null && replicationProvidersArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationProvidersValue in ((JArray)replicationProvidersArray))
                                    {
                                        propertiesInstance.ReplicationProviders.Add(((string)replicationProvidersValue));
                                    }
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken lastPlannedFailoverTimeValue = propertiesValue["lastPlannedFailoverTime"];
                                if (lastPlannedFailoverTimeValue != null && lastPlannedFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastPlannedFailoverTimeInstance = ((DateTime)lastPlannedFailoverTimeValue);
                                    propertiesInstance.LastPlannedFailoverTime = lastPlannedFailoverTimeInstance;
                                }
                                
                                JToken lastTestFailoverTimeValue = propertiesValue["lastTestFailoverTime"];
                                if (lastTestFailoverTimeValue != null && lastTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastTestFailoverTimeInstance = ((DateTime)lastTestFailoverTimeValue);
                                    propertiesInstance.LastTestFailoverTime = lastTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    CurrentScenarioDetails currentScenarioInstance = new CurrentScenarioDetails();
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                    
                                    JToken scenarioNameValue = currentScenarioValue["scenarioName"];
                                    if (scenarioNameValue != null && scenarioNameValue.Type != JTokenType.Null)
                                    {
                                        string scenarioNameInstance = ((string)scenarioNameValue);
                                        currentScenarioInstance.ScenarioName = scenarioNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentScenarioValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentScenarioInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentScenarioValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentScenarioInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken currentScenarioStatusValue = propertiesValue["currentScenarioStatus"];
                                if (currentScenarioStatusValue != null && currentScenarioStatusValue.Type != JTokenType.Null)
                                {
                                    string currentScenarioStatusInstance = ((string)currentScenarioStatusValue);
                                    propertiesInstance.CurrentScenarioStatus = currentScenarioStatusInstance;
                                }
                                
                                JToken currentScenarioStatusDescriptionValue = propertiesValue["currentScenarioStatusDescription"];
                                if (currentScenarioStatusDescriptionValue != null && currentScenarioStatusDescriptionValue.Type != JTokenType.Null)
                                {
                                    string currentScenarioStatusDescriptionInstance = ((string)currentScenarioStatusDescriptionValue);
                                    propertiesInstance.CurrentScenarioStatusDescription = currentScenarioStatusDescriptionInstance;
                                }
                                
                                JToken groupsArray = propertiesValue["groups"];
                                if (groupsArray != null && groupsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken groupsValue in ((JArray)groupsArray))
                                    {
                                        RecoveryPlanGroup recoveryPlanGroupInstance = new RecoveryPlanGroup();
                                        propertiesInstance.Groups.Add(recoveryPlanGroupInstance);
                                        
                                        JToken groupTypeValue = groupsValue["groupType"];
                                        if (groupTypeValue != null && groupTypeValue.Type != JTokenType.Null)
                                        {
                                            string groupTypeInstance = ((string)groupTypeValue);
                                            recoveryPlanGroupInstance.GroupType = groupTypeInstance;
                                        }
                                        
                                        JToken replicationProtectedItemsArray = groupsValue["replicationProtectedItems"];
                                        if (replicationProtectedItemsArray != null && replicationProtectedItemsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken replicationProtectedItemsValue in ((JArray)replicationProtectedItemsArray))
                                            {
                                                RecoveryPlanProtectedItem recoveryPlanProtectedItemInstance = new RecoveryPlanProtectedItem();
                                                recoveryPlanGroupInstance.ReplicationProtectedItems.Add(recoveryPlanProtectedItemInstance);
                                                
                                                JToken idValue = replicationProtectedItemsValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    recoveryPlanProtectedItemInstance.Id = idInstance;
                                                }
                                                
                                                JToken virtualMachineIdValue = replicationProtectedItemsValue["virtualMachineId"];
                                                if (virtualMachineIdValue != null && virtualMachineIdValue.Type != JTokenType.Null)
                                                {
                                                    string virtualMachineIdInstance = ((string)virtualMachineIdValue);
                                                    recoveryPlanProtectedItemInstance.VirtualMachineId = virtualMachineIdInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken startGroupActionsArray = groupsValue["startGroupActions"];
                                        if (startGroupActionsArray != null && startGroupActionsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken startGroupActionsValue in ((JArray)startGroupActionsArray))
                                            {
                                                RecoveryPlanAction recoveryPlanActionInstance = new RecoveryPlanAction();
                                                recoveryPlanGroupInstance.StartGroupActions.Add(recoveryPlanActionInstance);
                                                
                                                JToken actionNameValue = startGroupActionsValue["actionName"];
                                                if (actionNameValue != null && actionNameValue.Type != JTokenType.Null)
                                                {
                                                    string actionNameInstance = ((string)actionNameValue);
                                                    recoveryPlanActionInstance.ActionName = actionNameInstance;
                                                }
                                                
                                                JToken failoverTypesArray = startGroupActionsValue["failoverTypes"];
                                                if (failoverTypesArray != null && failoverTypesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverTypesValue in ((JArray)failoverTypesArray))
                                                    {
                                                        recoveryPlanActionInstance.FailoverTypes.Add(((string)failoverTypesValue));
                                                    }
                                                }
                                                
                                                JToken failoverDirectionsArray = startGroupActionsValue["failoverDirections"];
                                                if (failoverDirectionsArray != null && failoverDirectionsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverDirectionsValue in ((JArray)failoverDirectionsArray))
                                                    {
                                                        recoveryPlanActionInstance.FailoverDirections.Add(((string)failoverDirectionsValue));
                                                    }
                                                }
                                                
                                                JToken customDetailsValue = startGroupActionsValue["customDetails"];
                                                if (customDetailsValue != null && customDetailsValue.Type != JTokenType.Null)
                                                {
                                                    string typeName = ((string)customDetailsValue["instanceType"]);
                                                    if (typeName == "ScriptActionDetails")
                                                    {
                                                        RecoveryPlanScriptActionDetails recoveryPlanScriptActionDetailsInstance = new RecoveryPlanScriptActionDetails();
                                                        
                                                        JToken pathValue = customDetailsValue["path"];
                                                        if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                        {
                                                            string pathInstance = ((string)pathValue);
                                                            recoveryPlanScriptActionDetailsInstance.Path = pathInstance;
                                                        }
                                                        
                                                        JToken timeoutValue = customDetailsValue["timeout"];
                                                        if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                            recoveryPlanScriptActionDetailsInstance.Timeout = timeoutInstance;
                                                        }
                                                        
                                                        JToken fabricLocationValue = customDetailsValue["fabricLocation"];
                                                        if (fabricLocationValue != null && fabricLocationValue.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance = ((string)fabricLocationValue);
                                                            recoveryPlanScriptActionDetailsInstance.FabricLocation = fabricLocationInstance;
                                                        }
                                                        
                                                        JToken instanceTypeValue = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                                            recoveryPlanScriptActionDetailsInstance.InstanceType = instanceTypeInstance;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanScriptActionDetailsInstance;
                                                    }
                                                    if (typeName == "AutomationRunbookActionDetails")
                                                    {
                                                        RecoveryPlanAutomationRunbookActionDetails recoveryPlanAutomationRunbookActionDetailsInstance = new RecoveryPlanAutomationRunbookActionDetails();
                                                        
                                                        JToken runbookIdValue = customDetailsValue["runbookId"];
                                                        if (runbookIdValue != null && runbookIdValue.Type != JTokenType.Null)
                                                        {
                                                            string runbookIdInstance = ((string)runbookIdValue);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.RunbookId = runbookIdInstance;
                                                        }
                                                        
                                                        JToken timeoutValue2 = customDetailsValue["timeout"];
                                                        if (timeoutValue2 != null && timeoutValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance2 = TimeSpan.Parse(((string)timeoutValue2), CultureInfo.InvariantCulture);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.Timeout = timeoutInstance2;
                                                        }
                                                        
                                                        JToken fabricLocationValue2 = customDetailsValue["fabricLocation"];
                                                        if (fabricLocationValue2 != null && fabricLocationValue2.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance2 = ((string)fabricLocationValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.FabricLocation = fabricLocationInstance2;
                                                        }
                                                        
                                                        JToken instanceTypeValue2 = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.InstanceType = instanceTypeInstance2;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanAutomationRunbookActionDetailsInstance;
                                                    }
                                                    if (typeName == "ManualActionDetails")
                                                    {
                                                        RecoveryPlanManualActionDetails recoveryPlanManualActionDetailsInstance = new RecoveryPlanManualActionDetails();
                                                        
                                                        JToken descriptionValue = customDetailsValue["description"];
                                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                                        {
                                                            string descriptionInstance = ((string)descriptionValue);
                                                            recoveryPlanManualActionDetailsInstance.Description = descriptionInstance;
                                                        }
                                                        
                                                        JToken instanceTypeValue3 = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                                            recoveryPlanManualActionDetailsInstance.InstanceType = instanceTypeInstance3;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanManualActionDetailsInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken endGroupActionsArray = groupsValue["endGroupActions"];
                                        if (endGroupActionsArray != null && endGroupActionsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken endGroupActionsValue in ((JArray)endGroupActionsArray))
                                            {
                                                RecoveryPlanAction recoveryPlanActionInstance2 = new RecoveryPlanAction();
                                                recoveryPlanGroupInstance.EndGroupActions.Add(recoveryPlanActionInstance2);
                                                
                                                JToken actionNameValue2 = endGroupActionsValue["actionName"];
                                                if (actionNameValue2 != null && actionNameValue2.Type != JTokenType.Null)
                                                {
                                                    string actionNameInstance2 = ((string)actionNameValue2);
                                                    recoveryPlanActionInstance2.ActionName = actionNameInstance2;
                                                }
                                                
                                                JToken failoverTypesArray2 = endGroupActionsValue["failoverTypes"];
                                                if (failoverTypesArray2 != null && failoverTypesArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverTypesValue2 in ((JArray)failoverTypesArray2))
                                                    {
                                                        recoveryPlanActionInstance2.FailoverTypes.Add(((string)failoverTypesValue2));
                                                    }
                                                }
                                                
                                                JToken failoverDirectionsArray2 = endGroupActionsValue["failoverDirections"];
                                                if (failoverDirectionsArray2 != null && failoverDirectionsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverDirectionsValue2 in ((JArray)failoverDirectionsArray2))
                                                    {
                                                        recoveryPlanActionInstance2.FailoverDirections.Add(((string)failoverDirectionsValue2));
                                                    }
                                                }
                                                
                                                JToken customDetailsValue2 = endGroupActionsValue["customDetails"];
                                                if (customDetailsValue2 != null && customDetailsValue2.Type != JTokenType.Null)
                                                {
                                                    string typeName2 = ((string)customDetailsValue2["instanceType"]);
                                                    if (typeName2 == "ScriptActionDetails")
                                                    {
                                                        RecoveryPlanScriptActionDetails recoveryPlanScriptActionDetailsInstance2 = new RecoveryPlanScriptActionDetails();
                                                        
                                                        JToken pathValue2 = customDetailsValue2["path"];
                                                        if (pathValue2 != null && pathValue2.Type != JTokenType.Null)
                                                        {
                                                            string pathInstance2 = ((string)pathValue2);
                                                            recoveryPlanScriptActionDetailsInstance2.Path = pathInstance2;
                                                        }
                                                        
                                                        JToken timeoutValue3 = customDetailsValue2["timeout"];
                                                        if (timeoutValue3 != null && timeoutValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance3 = TimeSpan.Parse(((string)timeoutValue3), CultureInfo.InvariantCulture);
                                                            recoveryPlanScriptActionDetailsInstance2.Timeout = timeoutInstance3;
                                                        }
                                                        
                                                        JToken fabricLocationValue3 = customDetailsValue2["fabricLocation"];
                                                        if (fabricLocationValue3 != null && fabricLocationValue3.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance3 = ((string)fabricLocationValue3);
                                                            recoveryPlanScriptActionDetailsInstance2.FabricLocation = fabricLocationInstance3;
                                                        }
                                                        
                                                        JToken instanceTypeValue4 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                                            recoveryPlanScriptActionDetailsInstance2.InstanceType = instanceTypeInstance4;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanScriptActionDetailsInstance2;
                                                    }
                                                    if (typeName2 == "AutomationRunbookActionDetails")
                                                    {
                                                        RecoveryPlanAutomationRunbookActionDetails recoveryPlanAutomationRunbookActionDetailsInstance2 = new RecoveryPlanAutomationRunbookActionDetails();
                                                        
                                                        JToken runbookIdValue2 = customDetailsValue2["runbookId"];
                                                        if (runbookIdValue2 != null && runbookIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string runbookIdInstance2 = ((string)runbookIdValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.RunbookId = runbookIdInstance2;
                                                        }
                                                        
                                                        JToken timeoutValue4 = customDetailsValue2["timeout"];
                                                        if (timeoutValue4 != null && timeoutValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance4 = TimeSpan.Parse(((string)timeoutValue4), CultureInfo.InvariantCulture);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.Timeout = timeoutInstance4;
                                                        }
                                                        
                                                        JToken fabricLocationValue4 = customDetailsValue2["fabricLocation"];
                                                        if (fabricLocationValue4 != null && fabricLocationValue4.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance4 = ((string)fabricLocationValue4);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.FabricLocation = fabricLocationInstance4;
                                                        }
                                                        
                                                        JToken instanceTypeValue5 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue5 != null && instanceTypeValue5.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance5 = ((string)instanceTypeValue5);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.InstanceType = instanceTypeInstance5;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanAutomationRunbookActionDetailsInstance2;
                                                    }
                                                    if (typeName2 == "ManualActionDetails")
                                                    {
                                                        RecoveryPlanManualActionDetails recoveryPlanManualActionDetailsInstance2 = new RecoveryPlanManualActionDetails();
                                                        
                                                        JToken descriptionValue2 = customDetailsValue2["description"];
                                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                                        {
                                                            string descriptionInstance2 = ((string)descriptionValue2);
                                                            recoveryPlanManualActionDetailsInstance2.Description = descriptionInstance2;
                                                        }
                                                        
                                                        JToken instanceTypeValue6 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue6 != null && instanceTypeValue6.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance6 = ((string)instanceTypeValue6);
                                                            recoveryPlanManualActionDetailsInstance2.InstanceType = instanceTypeInstance6;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanManualActionDetailsInstance2;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                recoveryPlanInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                recoveryPlanInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                recoveryPlanInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                recoveryPlanInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    recoveryPlanInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<RecoveryPlanOperationResponse> GetTestFailoverStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetTestFailoverStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RecoveryPlanOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RecoveryPlanOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            RecoveryPlan recoveryPlanInstance = new RecoveryPlan();
                            result.RecoveryPlan = recoveryPlanInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                RecoveryPlanProperties propertiesInstance = new RecoveryPlanProperties();
                                recoveryPlanInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken primaryFabricIdValue = propertiesValue["primaryFabricId"];
                                if (primaryFabricIdValue != null && primaryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricIdInstance = ((string)primaryFabricIdValue);
                                    propertiesInstance.PrimaryFabricId = primaryFabricIdInstance;
                                }
                                
                                JToken primaryFabricFriendlyNameValue = propertiesValue["primaryFabricFriendlyName"];
                                if (primaryFabricFriendlyNameValue != null && primaryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricFriendlyNameInstance = ((string)primaryFabricFriendlyNameValue);
                                    propertiesInstance.PrimaryFabricFriendlyName = primaryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricIdValue = propertiesValue["recoveryFabricId"];
                                if (recoveryFabricIdValue != null && recoveryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricIdInstance = ((string)recoveryFabricIdValue);
                                    propertiesInstance.RecoveryFabricId = recoveryFabricIdInstance;
                                }
                                
                                JToken recoveryFabricFriendlyNameValue = propertiesValue["recoveryFabricFriendlyName"];
                                if (recoveryFabricFriendlyNameValue != null && recoveryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricFriendlyNameInstance = ((string)recoveryFabricFriendlyNameValue);
                                    propertiesInstance.RecoveryFabricFriendlyName = recoveryFabricFriendlyNameInstance;
                                }
                                
                                JToken failoverDeploymentModelValue = propertiesValue["failoverDeploymentModel"];
                                if (failoverDeploymentModelValue != null && failoverDeploymentModelValue.Type != JTokenType.Null)
                                {
                                    string failoverDeploymentModelInstance = ((string)failoverDeploymentModelValue);
                                    propertiesInstance.FailoverDeploymentModel = failoverDeploymentModelInstance;
                                }
                                
                                JToken replicationProvidersArray = propertiesValue["replicationProviders"];
                                if (replicationProvidersArray != null && replicationProvidersArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationProvidersValue in ((JArray)replicationProvidersArray))
                                    {
                                        propertiesInstance.ReplicationProviders.Add(((string)replicationProvidersValue));
                                    }
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken lastPlannedFailoverTimeValue = propertiesValue["lastPlannedFailoverTime"];
                                if (lastPlannedFailoverTimeValue != null && lastPlannedFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastPlannedFailoverTimeInstance = ((DateTime)lastPlannedFailoverTimeValue);
                                    propertiesInstance.LastPlannedFailoverTime = lastPlannedFailoverTimeInstance;
                                }
                                
                                JToken lastTestFailoverTimeValue = propertiesValue["lastTestFailoverTime"];
                                if (lastTestFailoverTimeValue != null && lastTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastTestFailoverTimeInstance = ((DateTime)lastTestFailoverTimeValue);
                                    propertiesInstance.LastTestFailoverTime = lastTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    CurrentScenarioDetails currentScenarioInstance = new CurrentScenarioDetails();
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                    
                                    JToken scenarioNameValue = currentScenarioValue["scenarioName"];
                                    if (scenarioNameValue != null && scenarioNameValue.Type != JTokenType.Null)
                                    {
                                        string scenarioNameInstance = ((string)scenarioNameValue);
                                        currentScenarioInstance.ScenarioName = scenarioNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentScenarioValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentScenarioInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentScenarioValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentScenarioInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken currentScenarioStatusValue = propertiesValue["currentScenarioStatus"];
                                if (currentScenarioStatusValue != null && currentScenarioStatusValue.Type != JTokenType.Null)
                                {
                                    string currentScenarioStatusInstance = ((string)currentScenarioStatusValue);
                                    propertiesInstance.CurrentScenarioStatus = currentScenarioStatusInstance;
                                }
                                
                                JToken currentScenarioStatusDescriptionValue = propertiesValue["currentScenarioStatusDescription"];
                                if (currentScenarioStatusDescriptionValue != null && currentScenarioStatusDescriptionValue.Type != JTokenType.Null)
                                {
                                    string currentScenarioStatusDescriptionInstance = ((string)currentScenarioStatusDescriptionValue);
                                    propertiesInstance.CurrentScenarioStatusDescription = currentScenarioStatusDescriptionInstance;
                                }
                                
                                JToken groupsArray = propertiesValue["groups"];
                                if (groupsArray != null && groupsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken groupsValue in ((JArray)groupsArray))
                                    {
                                        RecoveryPlanGroup recoveryPlanGroupInstance = new RecoveryPlanGroup();
                                        propertiesInstance.Groups.Add(recoveryPlanGroupInstance);
                                        
                                        JToken groupTypeValue = groupsValue["groupType"];
                                        if (groupTypeValue != null && groupTypeValue.Type != JTokenType.Null)
                                        {
                                            string groupTypeInstance = ((string)groupTypeValue);
                                            recoveryPlanGroupInstance.GroupType = groupTypeInstance;
                                        }
                                        
                                        JToken replicationProtectedItemsArray = groupsValue["replicationProtectedItems"];
                                        if (replicationProtectedItemsArray != null && replicationProtectedItemsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken replicationProtectedItemsValue in ((JArray)replicationProtectedItemsArray))
                                            {
                                                RecoveryPlanProtectedItem recoveryPlanProtectedItemInstance = new RecoveryPlanProtectedItem();
                                                recoveryPlanGroupInstance.ReplicationProtectedItems.Add(recoveryPlanProtectedItemInstance);
                                                
                                                JToken idValue = replicationProtectedItemsValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    recoveryPlanProtectedItemInstance.Id = idInstance;
                                                }
                                                
                                                JToken virtualMachineIdValue = replicationProtectedItemsValue["virtualMachineId"];
                                                if (virtualMachineIdValue != null && virtualMachineIdValue.Type != JTokenType.Null)
                                                {
                                                    string virtualMachineIdInstance = ((string)virtualMachineIdValue);
                                                    recoveryPlanProtectedItemInstance.VirtualMachineId = virtualMachineIdInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken startGroupActionsArray = groupsValue["startGroupActions"];
                                        if (startGroupActionsArray != null && startGroupActionsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken startGroupActionsValue in ((JArray)startGroupActionsArray))
                                            {
                                                RecoveryPlanAction recoveryPlanActionInstance = new RecoveryPlanAction();
                                                recoveryPlanGroupInstance.StartGroupActions.Add(recoveryPlanActionInstance);
                                                
                                                JToken actionNameValue = startGroupActionsValue["actionName"];
                                                if (actionNameValue != null && actionNameValue.Type != JTokenType.Null)
                                                {
                                                    string actionNameInstance = ((string)actionNameValue);
                                                    recoveryPlanActionInstance.ActionName = actionNameInstance;
                                                }
                                                
                                                JToken failoverTypesArray = startGroupActionsValue["failoverTypes"];
                                                if (failoverTypesArray != null && failoverTypesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverTypesValue in ((JArray)failoverTypesArray))
                                                    {
                                                        recoveryPlanActionInstance.FailoverTypes.Add(((string)failoverTypesValue));
                                                    }
                                                }
                                                
                                                JToken failoverDirectionsArray = startGroupActionsValue["failoverDirections"];
                                                if (failoverDirectionsArray != null && failoverDirectionsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverDirectionsValue in ((JArray)failoverDirectionsArray))
                                                    {
                                                        recoveryPlanActionInstance.FailoverDirections.Add(((string)failoverDirectionsValue));
                                                    }
                                                }
                                                
                                                JToken customDetailsValue = startGroupActionsValue["customDetails"];
                                                if (customDetailsValue != null && customDetailsValue.Type != JTokenType.Null)
                                                {
                                                    string typeName = ((string)customDetailsValue["instanceType"]);
                                                    if (typeName == "ScriptActionDetails")
                                                    {
                                                        RecoveryPlanScriptActionDetails recoveryPlanScriptActionDetailsInstance = new RecoveryPlanScriptActionDetails();
                                                        
                                                        JToken pathValue = customDetailsValue["path"];
                                                        if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                        {
                                                            string pathInstance = ((string)pathValue);
                                                            recoveryPlanScriptActionDetailsInstance.Path = pathInstance;
                                                        }
                                                        
                                                        JToken timeoutValue = customDetailsValue["timeout"];
                                                        if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                            recoveryPlanScriptActionDetailsInstance.Timeout = timeoutInstance;
                                                        }
                                                        
                                                        JToken fabricLocationValue = customDetailsValue["fabricLocation"];
                                                        if (fabricLocationValue != null && fabricLocationValue.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance = ((string)fabricLocationValue);
                                                            recoveryPlanScriptActionDetailsInstance.FabricLocation = fabricLocationInstance;
                                                        }
                                                        
                                                        JToken instanceTypeValue = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                                            recoveryPlanScriptActionDetailsInstance.InstanceType = instanceTypeInstance;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanScriptActionDetailsInstance;
                                                    }
                                                    if (typeName == "AutomationRunbookActionDetails")
                                                    {
                                                        RecoveryPlanAutomationRunbookActionDetails recoveryPlanAutomationRunbookActionDetailsInstance = new RecoveryPlanAutomationRunbookActionDetails();
                                                        
                                                        JToken runbookIdValue = customDetailsValue["runbookId"];
                                                        if (runbookIdValue != null && runbookIdValue.Type != JTokenType.Null)
                                                        {
                                                            string runbookIdInstance = ((string)runbookIdValue);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.RunbookId = runbookIdInstance;
                                                        }
                                                        
                                                        JToken timeoutValue2 = customDetailsValue["timeout"];
                                                        if (timeoutValue2 != null && timeoutValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance2 = TimeSpan.Parse(((string)timeoutValue2), CultureInfo.InvariantCulture);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.Timeout = timeoutInstance2;
                                                        }
                                                        
                                                        JToken fabricLocationValue2 = customDetailsValue["fabricLocation"];
                                                        if (fabricLocationValue2 != null && fabricLocationValue2.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance2 = ((string)fabricLocationValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.FabricLocation = fabricLocationInstance2;
                                                        }
                                                        
                                                        JToken instanceTypeValue2 = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.InstanceType = instanceTypeInstance2;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanAutomationRunbookActionDetailsInstance;
                                                    }
                                                    if (typeName == "ManualActionDetails")
                                                    {
                                                        RecoveryPlanManualActionDetails recoveryPlanManualActionDetailsInstance = new RecoveryPlanManualActionDetails();
                                                        
                                                        JToken descriptionValue = customDetailsValue["description"];
                                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                                        {
                                                            string descriptionInstance = ((string)descriptionValue);
                                                            recoveryPlanManualActionDetailsInstance.Description = descriptionInstance;
                                                        }
                                                        
                                                        JToken instanceTypeValue3 = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                                            recoveryPlanManualActionDetailsInstance.InstanceType = instanceTypeInstance3;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanManualActionDetailsInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken endGroupActionsArray = groupsValue["endGroupActions"];
                                        if (endGroupActionsArray != null && endGroupActionsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken endGroupActionsValue in ((JArray)endGroupActionsArray))
                                            {
                                                RecoveryPlanAction recoveryPlanActionInstance2 = new RecoveryPlanAction();
                                                recoveryPlanGroupInstance.EndGroupActions.Add(recoveryPlanActionInstance2);
                                                
                                                JToken actionNameValue2 = endGroupActionsValue["actionName"];
                                                if (actionNameValue2 != null && actionNameValue2.Type != JTokenType.Null)
                                                {
                                                    string actionNameInstance2 = ((string)actionNameValue2);
                                                    recoveryPlanActionInstance2.ActionName = actionNameInstance2;
                                                }
                                                
                                                JToken failoverTypesArray2 = endGroupActionsValue["failoverTypes"];
                                                if (failoverTypesArray2 != null && failoverTypesArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverTypesValue2 in ((JArray)failoverTypesArray2))
                                                    {
                                                        recoveryPlanActionInstance2.FailoverTypes.Add(((string)failoverTypesValue2));
                                                    }
                                                }
                                                
                                                JToken failoverDirectionsArray2 = endGroupActionsValue["failoverDirections"];
                                                if (failoverDirectionsArray2 != null && failoverDirectionsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverDirectionsValue2 in ((JArray)failoverDirectionsArray2))
                                                    {
                                                        recoveryPlanActionInstance2.FailoverDirections.Add(((string)failoverDirectionsValue2));
                                                    }
                                                }
                                                
                                                JToken customDetailsValue2 = endGroupActionsValue["customDetails"];
                                                if (customDetailsValue2 != null && customDetailsValue2.Type != JTokenType.Null)
                                                {
                                                    string typeName2 = ((string)customDetailsValue2["instanceType"]);
                                                    if (typeName2 == "ScriptActionDetails")
                                                    {
                                                        RecoveryPlanScriptActionDetails recoveryPlanScriptActionDetailsInstance2 = new RecoveryPlanScriptActionDetails();
                                                        
                                                        JToken pathValue2 = customDetailsValue2["path"];
                                                        if (pathValue2 != null && pathValue2.Type != JTokenType.Null)
                                                        {
                                                            string pathInstance2 = ((string)pathValue2);
                                                            recoveryPlanScriptActionDetailsInstance2.Path = pathInstance2;
                                                        }
                                                        
                                                        JToken timeoutValue3 = customDetailsValue2["timeout"];
                                                        if (timeoutValue3 != null && timeoutValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance3 = TimeSpan.Parse(((string)timeoutValue3), CultureInfo.InvariantCulture);
                                                            recoveryPlanScriptActionDetailsInstance2.Timeout = timeoutInstance3;
                                                        }
                                                        
                                                        JToken fabricLocationValue3 = customDetailsValue2["fabricLocation"];
                                                        if (fabricLocationValue3 != null && fabricLocationValue3.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance3 = ((string)fabricLocationValue3);
                                                            recoveryPlanScriptActionDetailsInstance2.FabricLocation = fabricLocationInstance3;
                                                        }
                                                        
                                                        JToken instanceTypeValue4 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                                            recoveryPlanScriptActionDetailsInstance2.InstanceType = instanceTypeInstance4;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanScriptActionDetailsInstance2;
                                                    }
                                                    if (typeName2 == "AutomationRunbookActionDetails")
                                                    {
                                                        RecoveryPlanAutomationRunbookActionDetails recoveryPlanAutomationRunbookActionDetailsInstance2 = new RecoveryPlanAutomationRunbookActionDetails();
                                                        
                                                        JToken runbookIdValue2 = customDetailsValue2["runbookId"];
                                                        if (runbookIdValue2 != null && runbookIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string runbookIdInstance2 = ((string)runbookIdValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.RunbookId = runbookIdInstance2;
                                                        }
                                                        
                                                        JToken timeoutValue4 = customDetailsValue2["timeout"];
                                                        if (timeoutValue4 != null && timeoutValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance4 = TimeSpan.Parse(((string)timeoutValue4), CultureInfo.InvariantCulture);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.Timeout = timeoutInstance4;
                                                        }
                                                        
                                                        JToken fabricLocationValue4 = customDetailsValue2["fabricLocation"];
                                                        if (fabricLocationValue4 != null && fabricLocationValue4.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance4 = ((string)fabricLocationValue4);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.FabricLocation = fabricLocationInstance4;
                                                        }
                                                        
                                                        JToken instanceTypeValue5 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue5 != null && instanceTypeValue5.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance5 = ((string)instanceTypeValue5);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.InstanceType = instanceTypeInstance5;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanAutomationRunbookActionDetailsInstance2;
                                                    }
                                                    if (typeName2 == "ManualActionDetails")
                                                    {
                                                        RecoveryPlanManualActionDetails recoveryPlanManualActionDetailsInstance2 = new RecoveryPlanManualActionDetails();
                                                        
                                                        JToken descriptionValue2 = customDetailsValue2["description"];
                                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                                        {
                                                            string descriptionInstance2 = ((string)descriptionValue2);
                                                            recoveryPlanManualActionDetailsInstance2.Description = descriptionInstance2;
                                                        }
                                                        
                                                        JToken instanceTypeValue6 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue6 != null && instanceTypeValue6.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance6 = ((string)instanceTypeValue6);
                                                            recoveryPlanManualActionDetailsInstance2.InstanceType = instanceTypeInstance6;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanManualActionDetailsInstance2;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                recoveryPlanInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                recoveryPlanInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                recoveryPlanInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                recoveryPlanInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    recoveryPlanInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<RecoveryPlanOperationResponse> GetUnplannedFailoverStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetUnplannedFailoverStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RecoveryPlanOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RecoveryPlanOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            RecoveryPlan recoveryPlanInstance = new RecoveryPlan();
                            result.RecoveryPlan = recoveryPlanInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                RecoveryPlanProperties propertiesInstance = new RecoveryPlanProperties();
                                recoveryPlanInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken primaryFabricIdValue = propertiesValue["primaryFabricId"];
                                if (primaryFabricIdValue != null && primaryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricIdInstance = ((string)primaryFabricIdValue);
                                    propertiesInstance.PrimaryFabricId = primaryFabricIdInstance;
                                }
                                
                                JToken primaryFabricFriendlyNameValue = propertiesValue["primaryFabricFriendlyName"];
                                if (primaryFabricFriendlyNameValue != null && primaryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricFriendlyNameInstance = ((string)primaryFabricFriendlyNameValue);
                                    propertiesInstance.PrimaryFabricFriendlyName = primaryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricIdValue = propertiesValue["recoveryFabricId"];
                                if (recoveryFabricIdValue != null && recoveryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricIdInstance = ((string)recoveryFabricIdValue);
                                    propertiesInstance.RecoveryFabricId = recoveryFabricIdInstance;
                                }
                                
                                JToken recoveryFabricFriendlyNameValue = propertiesValue["recoveryFabricFriendlyName"];
                                if (recoveryFabricFriendlyNameValue != null && recoveryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricFriendlyNameInstance = ((string)recoveryFabricFriendlyNameValue);
                                    propertiesInstance.RecoveryFabricFriendlyName = recoveryFabricFriendlyNameInstance;
                                }
                                
                                JToken failoverDeploymentModelValue = propertiesValue["failoverDeploymentModel"];
                                if (failoverDeploymentModelValue != null && failoverDeploymentModelValue.Type != JTokenType.Null)
                                {
                                    string failoverDeploymentModelInstance = ((string)failoverDeploymentModelValue);
                                    propertiesInstance.FailoverDeploymentModel = failoverDeploymentModelInstance;
                                }
                                
                                JToken replicationProvidersArray = propertiesValue["replicationProviders"];
                                if (replicationProvidersArray != null && replicationProvidersArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationProvidersValue in ((JArray)replicationProvidersArray))
                                    {
                                        propertiesInstance.ReplicationProviders.Add(((string)replicationProvidersValue));
                                    }
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken lastPlannedFailoverTimeValue = propertiesValue["lastPlannedFailoverTime"];
                                if (lastPlannedFailoverTimeValue != null && lastPlannedFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastPlannedFailoverTimeInstance = ((DateTime)lastPlannedFailoverTimeValue);
                                    propertiesInstance.LastPlannedFailoverTime = lastPlannedFailoverTimeInstance;
                                }
                                
                                JToken lastTestFailoverTimeValue = propertiesValue["lastTestFailoverTime"];
                                if (lastTestFailoverTimeValue != null && lastTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastTestFailoverTimeInstance = ((DateTime)lastTestFailoverTimeValue);
                                    propertiesInstance.LastTestFailoverTime = lastTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    CurrentScenarioDetails currentScenarioInstance = new CurrentScenarioDetails();
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                    
                                    JToken scenarioNameValue = currentScenarioValue["scenarioName"];
                                    if (scenarioNameValue != null && scenarioNameValue.Type != JTokenType.Null)
                                    {
                                        string scenarioNameInstance = ((string)scenarioNameValue);
                                        currentScenarioInstance.ScenarioName = scenarioNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentScenarioValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentScenarioInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentScenarioValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentScenarioInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken currentScenarioStatusValue = propertiesValue["currentScenarioStatus"];
                                if (currentScenarioStatusValue != null && currentScenarioStatusValue.Type != JTokenType.Null)
                                {
                                    string currentScenarioStatusInstance = ((string)currentScenarioStatusValue);
                                    propertiesInstance.CurrentScenarioStatus = currentScenarioStatusInstance;
                                }
                                
                                JToken currentScenarioStatusDescriptionValue = propertiesValue["currentScenarioStatusDescription"];
                                if (currentScenarioStatusDescriptionValue != null && currentScenarioStatusDescriptionValue.Type != JTokenType.Null)
                                {
                                    string currentScenarioStatusDescriptionInstance = ((string)currentScenarioStatusDescriptionValue);
                                    propertiesInstance.CurrentScenarioStatusDescription = currentScenarioStatusDescriptionInstance;
                                }
                                
                                JToken groupsArray = propertiesValue["groups"];
                                if (groupsArray != null && groupsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken groupsValue in ((JArray)groupsArray))
                                    {
                                        RecoveryPlanGroup recoveryPlanGroupInstance = new RecoveryPlanGroup();
                                        propertiesInstance.Groups.Add(recoveryPlanGroupInstance);
                                        
                                        JToken groupTypeValue = groupsValue["groupType"];
                                        if (groupTypeValue != null && groupTypeValue.Type != JTokenType.Null)
                                        {
                                            string groupTypeInstance = ((string)groupTypeValue);
                                            recoveryPlanGroupInstance.GroupType = groupTypeInstance;
                                        }
                                        
                                        JToken replicationProtectedItemsArray = groupsValue["replicationProtectedItems"];
                                        if (replicationProtectedItemsArray != null && replicationProtectedItemsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken replicationProtectedItemsValue in ((JArray)replicationProtectedItemsArray))
                                            {
                                                RecoveryPlanProtectedItem recoveryPlanProtectedItemInstance = new RecoveryPlanProtectedItem();
                                                recoveryPlanGroupInstance.ReplicationProtectedItems.Add(recoveryPlanProtectedItemInstance);
                                                
                                                JToken idValue = replicationProtectedItemsValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    recoveryPlanProtectedItemInstance.Id = idInstance;
                                                }
                                                
                                                JToken virtualMachineIdValue = replicationProtectedItemsValue["virtualMachineId"];
                                                if (virtualMachineIdValue != null && virtualMachineIdValue.Type != JTokenType.Null)
                                                {
                                                    string virtualMachineIdInstance = ((string)virtualMachineIdValue);
                                                    recoveryPlanProtectedItemInstance.VirtualMachineId = virtualMachineIdInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken startGroupActionsArray = groupsValue["startGroupActions"];
                                        if (startGroupActionsArray != null && startGroupActionsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken startGroupActionsValue in ((JArray)startGroupActionsArray))
                                            {
                                                RecoveryPlanAction recoveryPlanActionInstance = new RecoveryPlanAction();
                                                recoveryPlanGroupInstance.StartGroupActions.Add(recoveryPlanActionInstance);
                                                
                                                JToken actionNameValue = startGroupActionsValue["actionName"];
                                                if (actionNameValue != null && actionNameValue.Type != JTokenType.Null)
                                                {
                                                    string actionNameInstance = ((string)actionNameValue);
                                                    recoveryPlanActionInstance.ActionName = actionNameInstance;
                                                }
                                                
                                                JToken failoverTypesArray = startGroupActionsValue["failoverTypes"];
                                                if (failoverTypesArray != null && failoverTypesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverTypesValue in ((JArray)failoverTypesArray))
                                                    {
                                                        recoveryPlanActionInstance.FailoverTypes.Add(((string)failoverTypesValue));
                                                    }
                                                }
                                                
                                                JToken failoverDirectionsArray = startGroupActionsValue["failoverDirections"];
                                                if (failoverDirectionsArray != null && failoverDirectionsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverDirectionsValue in ((JArray)failoverDirectionsArray))
                                                    {
                                                        recoveryPlanActionInstance.FailoverDirections.Add(((string)failoverDirectionsValue));
                                                    }
                                                }
                                                
                                                JToken customDetailsValue = startGroupActionsValue["customDetails"];
                                                if (customDetailsValue != null && customDetailsValue.Type != JTokenType.Null)
                                                {
                                                    string typeName = ((string)customDetailsValue["instanceType"]);
                                                    if (typeName == "ScriptActionDetails")
                                                    {
                                                        RecoveryPlanScriptActionDetails recoveryPlanScriptActionDetailsInstance = new RecoveryPlanScriptActionDetails();
                                                        
                                                        JToken pathValue = customDetailsValue["path"];
                                                        if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                        {
                                                            string pathInstance = ((string)pathValue);
                                                            recoveryPlanScriptActionDetailsInstance.Path = pathInstance;
                                                        }
                                                        
                                                        JToken timeoutValue = customDetailsValue["timeout"];
                                                        if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                            recoveryPlanScriptActionDetailsInstance.Timeout = timeoutInstance;
                                                        }
                                                        
                                                        JToken fabricLocationValue = customDetailsValue["fabricLocation"];
                                                        if (fabricLocationValue != null && fabricLocationValue.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance = ((string)fabricLocationValue);
                                                            recoveryPlanScriptActionDetailsInstance.FabricLocation = fabricLocationInstance;
                                                        }
                                                        
                                                        JToken instanceTypeValue = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                                            recoveryPlanScriptActionDetailsInstance.InstanceType = instanceTypeInstance;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanScriptActionDetailsInstance;
                                                    }
                                                    if (typeName == "AutomationRunbookActionDetails")
                                                    {
                                                        RecoveryPlanAutomationRunbookActionDetails recoveryPlanAutomationRunbookActionDetailsInstance = new RecoveryPlanAutomationRunbookActionDetails();
                                                        
                                                        JToken runbookIdValue = customDetailsValue["runbookId"];
                                                        if (runbookIdValue != null && runbookIdValue.Type != JTokenType.Null)
                                                        {
                                                            string runbookIdInstance = ((string)runbookIdValue);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.RunbookId = runbookIdInstance;
                                                        }
                                                        
                                                        JToken timeoutValue2 = customDetailsValue["timeout"];
                                                        if (timeoutValue2 != null && timeoutValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance2 = TimeSpan.Parse(((string)timeoutValue2), CultureInfo.InvariantCulture);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.Timeout = timeoutInstance2;
                                                        }
                                                        
                                                        JToken fabricLocationValue2 = customDetailsValue["fabricLocation"];
                                                        if (fabricLocationValue2 != null && fabricLocationValue2.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance2 = ((string)fabricLocationValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.FabricLocation = fabricLocationInstance2;
                                                        }
                                                        
                                                        JToken instanceTypeValue2 = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.InstanceType = instanceTypeInstance2;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanAutomationRunbookActionDetailsInstance;
                                                    }
                                                    if (typeName == "ManualActionDetails")
                                                    {
                                                        RecoveryPlanManualActionDetails recoveryPlanManualActionDetailsInstance = new RecoveryPlanManualActionDetails();
                                                        
                                                        JToken descriptionValue = customDetailsValue["description"];
                                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                                        {
                                                            string descriptionInstance = ((string)descriptionValue);
                                                            recoveryPlanManualActionDetailsInstance.Description = descriptionInstance;
                                                        }
                                                        
                                                        JToken instanceTypeValue3 = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                                            recoveryPlanManualActionDetailsInstance.InstanceType = instanceTypeInstance3;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanManualActionDetailsInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken endGroupActionsArray = groupsValue["endGroupActions"];
                                        if (endGroupActionsArray != null && endGroupActionsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken endGroupActionsValue in ((JArray)endGroupActionsArray))
                                            {
                                                RecoveryPlanAction recoveryPlanActionInstance2 = new RecoveryPlanAction();
                                                recoveryPlanGroupInstance.EndGroupActions.Add(recoveryPlanActionInstance2);
                                                
                                                JToken actionNameValue2 = endGroupActionsValue["actionName"];
                                                if (actionNameValue2 != null && actionNameValue2.Type != JTokenType.Null)
                                                {
                                                    string actionNameInstance2 = ((string)actionNameValue2);
                                                    recoveryPlanActionInstance2.ActionName = actionNameInstance2;
                                                }
                                                
                                                JToken failoverTypesArray2 = endGroupActionsValue["failoverTypes"];
                                                if (failoverTypesArray2 != null && failoverTypesArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverTypesValue2 in ((JArray)failoverTypesArray2))
                                                    {
                                                        recoveryPlanActionInstance2.FailoverTypes.Add(((string)failoverTypesValue2));
                                                    }
                                                }
                                                
                                                JToken failoverDirectionsArray2 = endGroupActionsValue["failoverDirections"];
                                                if (failoverDirectionsArray2 != null && failoverDirectionsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverDirectionsValue2 in ((JArray)failoverDirectionsArray2))
                                                    {
                                                        recoveryPlanActionInstance2.FailoverDirections.Add(((string)failoverDirectionsValue2));
                                                    }
                                                }
                                                
                                                JToken customDetailsValue2 = endGroupActionsValue["customDetails"];
                                                if (customDetailsValue2 != null && customDetailsValue2.Type != JTokenType.Null)
                                                {
                                                    string typeName2 = ((string)customDetailsValue2["instanceType"]);
                                                    if (typeName2 == "ScriptActionDetails")
                                                    {
                                                        RecoveryPlanScriptActionDetails recoveryPlanScriptActionDetailsInstance2 = new RecoveryPlanScriptActionDetails();
                                                        
                                                        JToken pathValue2 = customDetailsValue2["path"];
                                                        if (pathValue2 != null && pathValue2.Type != JTokenType.Null)
                                                        {
                                                            string pathInstance2 = ((string)pathValue2);
                                                            recoveryPlanScriptActionDetailsInstance2.Path = pathInstance2;
                                                        }
                                                        
                                                        JToken timeoutValue3 = customDetailsValue2["timeout"];
                                                        if (timeoutValue3 != null && timeoutValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance3 = TimeSpan.Parse(((string)timeoutValue3), CultureInfo.InvariantCulture);
                                                            recoveryPlanScriptActionDetailsInstance2.Timeout = timeoutInstance3;
                                                        }
                                                        
                                                        JToken fabricLocationValue3 = customDetailsValue2["fabricLocation"];
                                                        if (fabricLocationValue3 != null && fabricLocationValue3.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance3 = ((string)fabricLocationValue3);
                                                            recoveryPlanScriptActionDetailsInstance2.FabricLocation = fabricLocationInstance3;
                                                        }
                                                        
                                                        JToken instanceTypeValue4 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                                            recoveryPlanScriptActionDetailsInstance2.InstanceType = instanceTypeInstance4;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanScriptActionDetailsInstance2;
                                                    }
                                                    if (typeName2 == "AutomationRunbookActionDetails")
                                                    {
                                                        RecoveryPlanAutomationRunbookActionDetails recoveryPlanAutomationRunbookActionDetailsInstance2 = new RecoveryPlanAutomationRunbookActionDetails();
                                                        
                                                        JToken runbookIdValue2 = customDetailsValue2["runbookId"];
                                                        if (runbookIdValue2 != null && runbookIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string runbookIdInstance2 = ((string)runbookIdValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.RunbookId = runbookIdInstance2;
                                                        }
                                                        
                                                        JToken timeoutValue4 = customDetailsValue2["timeout"];
                                                        if (timeoutValue4 != null && timeoutValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance4 = TimeSpan.Parse(((string)timeoutValue4), CultureInfo.InvariantCulture);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.Timeout = timeoutInstance4;
                                                        }
                                                        
                                                        JToken fabricLocationValue4 = customDetailsValue2["fabricLocation"];
                                                        if (fabricLocationValue4 != null && fabricLocationValue4.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance4 = ((string)fabricLocationValue4);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.FabricLocation = fabricLocationInstance4;
                                                        }
                                                        
                                                        JToken instanceTypeValue5 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue5 != null && instanceTypeValue5.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance5 = ((string)instanceTypeValue5);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.InstanceType = instanceTypeInstance5;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanAutomationRunbookActionDetailsInstance2;
                                                    }
                                                    if (typeName2 == "ManualActionDetails")
                                                    {
                                                        RecoveryPlanManualActionDetails recoveryPlanManualActionDetailsInstance2 = new RecoveryPlanManualActionDetails();
                                                        
                                                        JToken descriptionValue2 = customDetailsValue2["description"];
                                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                                        {
                                                            string descriptionInstance2 = ((string)descriptionValue2);
                                                            recoveryPlanManualActionDetailsInstance2.Description = descriptionInstance2;
                                                        }
                                                        
                                                        JToken instanceTypeValue6 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue6 != null && instanceTypeValue6.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance6 = ((string)instanceTypeValue6);
                                                            recoveryPlanManualActionDetailsInstance2.InstanceType = instanceTypeInstance6;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanManualActionDetailsInstance2;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                recoveryPlanInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                recoveryPlanInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                recoveryPlanInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                recoveryPlanInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    recoveryPlanInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<UpdateRecoveryPlanOperationResponse> GetUpdateStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetUpdateStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    UpdateRecoveryPlanOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new UpdateRecoveryPlanOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            RecoveryPlan recoveryPlanInstance = new RecoveryPlan();
                            result.RecoveryPlan = recoveryPlanInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                RecoveryPlanProperties propertiesInstance = new RecoveryPlanProperties();
                                recoveryPlanInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken primaryFabricIdValue = propertiesValue["primaryFabricId"];
                                if (primaryFabricIdValue != null && primaryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricIdInstance = ((string)primaryFabricIdValue);
                                    propertiesInstance.PrimaryFabricId = primaryFabricIdInstance;
                                }
                                
                                JToken primaryFabricFriendlyNameValue = propertiesValue["primaryFabricFriendlyName"];
                                if (primaryFabricFriendlyNameValue != null && primaryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string primaryFabricFriendlyNameInstance = ((string)primaryFabricFriendlyNameValue);
                                    propertiesInstance.PrimaryFabricFriendlyName = primaryFabricFriendlyNameInstance;
                                }
                                
                                JToken recoveryFabricIdValue = propertiesValue["recoveryFabricId"];
                                if (recoveryFabricIdValue != null && recoveryFabricIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricIdInstance = ((string)recoveryFabricIdValue);
                                    propertiesInstance.RecoveryFabricId = recoveryFabricIdInstance;
                                }
                                
                                JToken recoveryFabricFriendlyNameValue = propertiesValue["recoveryFabricFriendlyName"];
                                if (recoveryFabricFriendlyNameValue != null && recoveryFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryFabricFriendlyNameInstance = ((string)recoveryFabricFriendlyNameValue);
                                    propertiesInstance.RecoveryFabricFriendlyName = recoveryFabricFriendlyNameInstance;
                                }
                                
                                JToken failoverDeploymentModelValue = propertiesValue["failoverDeploymentModel"];
                                if (failoverDeploymentModelValue != null && failoverDeploymentModelValue.Type != JTokenType.Null)
                                {
                                    string failoverDeploymentModelInstance = ((string)failoverDeploymentModelValue);
                                    propertiesInstance.FailoverDeploymentModel = failoverDeploymentModelInstance;
                                }
                                
                                JToken replicationProvidersArray = propertiesValue["replicationProviders"];
                                if (replicationProvidersArray != null && replicationProvidersArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationProvidersValue in ((JArray)replicationProvidersArray))
                                    {
                                        propertiesInstance.ReplicationProviders.Add(((string)replicationProvidersValue));
                                    }
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken lastPlannedFailoverTimeValue = propertiesValue["lastPlannedFailoverTime"];
                                if (lastPlannedFailoverTimeValue != null && lastPlannedFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastPlannedFailoverTimeInstance = ((DateTime)lastPlannedFailoverTimeValue);
                                    propertiesInstance.LastPlannedFailoverTime = lastPlannedFailoverTimeInstance;
                                }
                                
                                JToken lastTestFailoverTimeValue = propertiesValue["lastTestFailoverTime"];
                                if (lastTestFailoverTimeValue != null && lastTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastTestFailoverTimeInstance = ((DateTime)lastTestFailoverTimeValue);
                                    propertiesInstance.LastTestFailoverTime = lastTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    CurrentScenarioDetails currentScenarioInstance = new CurrentScenarioDetails();
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                    
                                    JToken scenarioNameValue = currentScenarioValue["scenarioName"];
                                    if (scenarioNameValue != null && scenarioNameValue.Type != JTokenType.Null)
                                    {
                                        string scenarioNameInstance = ((string)scenarioNameValue);
                                        currentScenarioInstance.ScenarioName = scenarioNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentScenarioValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentScenarioInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentScenarioValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentScenarioInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken currentScenarioStatusValue = propertiesValue["currentScenarioStatus"];
                                if (currentScenarioStatusValue != null && currentScenarioStatusValue.Type != JTokenType.Null)
                                {
                                    string currentScenarioStatusInstance = ((string)currentScenarioStatusValue);
                                    propertiesInstance.CurrentScenarioStatus = currentScenarioStatusInstance;
                                }
                                
                                JToken currentScenarioStatusDescriptionValue = propertiesValue["currentScenarioStatusDescription"];
                                if (currentScenarioStatusDescriptionValue != null && currentScenarioStatusDescriptionValue.Type != JTokenType.Null)
                                {
                                    string currentScenarioStatusDescriptionInstance = ((string)currentScenarioStatusDescriptionValue);
                                    propertiesInstance.CurrentScenarioStatusDescription = currentScenarioStatusDescriptionInstance;
                                }
                                
                                JToken groupsArray = propertiesValue["groups"];
                                if (groupsArray != null && groupsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken groupsValue in ((JArray)groupsArray))
                                    {
                                        RecoveryPlanGroup recoveryPlanGroupInstance = new RecoveryPlanGroup();
                                        propertiesInstance.Groups.Add(recoveryPlanGroupInstance);
                                        
                                        JToken groupTypeValue = groupsValue["groupType"];
                                        if (groupTypeValue != null && groupTypeValue.Type != JTokenType.Null)
                                        {
                                            string groupTypeInstance = ((string)groupTypeValue);
                                            recoveryPlanGroupInstance.GroupType = groupTypeInstance;
                                        }
                                        
                                        JToken replicationProtectedItemsArray = groupsValue["replicationProtectedItems"];
                                        if (replicationProtectedItemsArray != null && replicationProtectedItemsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken replicationProtectedItemsValue in ((JArray)replicationProtectedItemsArray))
                                            {
                                                RecoveryPlanProtectedItem recoveryPlanProtectedItemInstance = new RecoveryPlanProtectedItem();
                                                recoveryPlanGroupInstance.ReplicationProtectedItems.Add(recoveryPlanProtectedItemInstance);
                                                
                                                JToken idValue = replicationProtectedItemsValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    recoveryPlanProtectedItemInstance.Id = idInstance;
                                                }
                                                
                                                JToken virtualMachineIdValue = replicationProtectedItemsValue["virtualMachineId"];
                                                if (virtualMachineIdValue != null && virtualMachineIdValue.Type != JTokenType.Null)
                                                {
                                                    string virtualMachineIdInstance = ((string)virtualMachineIdValue);
                                                    recoveryPlanProtectedItemInstance.VirtualMachineId = virtualMachineIdInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken startGroupActionsArray = groupsValue["startGroupActions"];
                                        if (startGroupActionsArray != null && startGroupActionsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken startGroupActionsValue in ((JArray)startGroupActionsArray))
                                            {
                                                RecoveryPlanAction recoveryPlanActionInstance = new RecoveryPlanAction();
                                                recoveryPlanGroupInstance.StartGroupActions.Add(recoveryPlanActionInstance);
                                                
                                                JToken actionNameValue = startGroupActionsValue["actionName"];
                                                if (actionNameValue != null && actionNameValue.Type != JTokenType.Null)
                                                {
                                                    string actionNameInstance = ((string)actionNameValue);
                                                    recoveryPlanActionInstance.ActionName = actionNameInstance;
                                                }
                                                
                                                JToken failoverTypesArray = startGroupActionsValue["failoverTypes"];
                                                if (failoverTypesArray != null && failoverTypesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverTypesValue in ((JArray)failoverTypesArray))
                                                    {
                                                        recoveryPlanActionInstance.FailoverTypes.Add(((string)failoverTypesValue));
                                                    }
                                                }
                                                
                                                JToken failoverDirectionsArray = startGroupActionsValue["failoverDirections"];
                                                if (failoverDirectionsArray != null && failoverDirectionsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverDirectionsValue in ((JArray)failoverDirectionsArray))
                                                    {
                                                        recoveryPlanActionInstance.FailoverDirections.Add(((string)failoverDirectionsValue));
                                                    }
                                                }
                                                
                                                JToken customDetailsValue = startGroupActionsValue["customDetails"];
                                                if (customDetailsValue != null && customDetailsValue.Type != JTokenType.Null)
                                                {
                                                    string typeName = ((string)customDetailsValue["instanceType"]);
                                                    if (typeName == "ScriptActionDetails")
                                                    {
                                                        RecoveryPlanScriptActionDetails recoveryPlanScriptActionDetailsInstance = new RecoveryPlanScriptActionDetails();
                                                        
                                                        JToken pathValue = customDetailsValue["path"];
                                                        if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                        {
                                                            string pathInstance = ((string)pathValue);
                                                            recoveryPlanScriptActionDetailsInstance.Path = pathInstance;
                                                        }
                                                        
                                                        JToken timeoutValue = customDetailsValue["timeout"];
                                                        if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                            recoveryPlanScriptActionDetailsInstance.Timeout = timeoutInstance;
                                                        }
                                                        
                                                        JToken fabricLocationValue = customDetailsValue["fabricLocation"];
                                                        if (fabricLocationValue != null && fabricLocationValue.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance = ((string)fabricLocationValue);
                                                            recoveryPlanScriptActionDetailsInstance.FabricLocation = fabricLocationInstance;
                                                        }
                                                        
                                                        JToken instanceTypeValue = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                                            recoveryPlanScriptActionDetailsInstance.InstanceType = instanceTypeInstance;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanScriptActionDetailsInstance;
                                                    }
                                                    if (typeName == "AutomationRunbookActionDetails")
                                                    {
                                                        RecoveryPlanAutomationRunbookActionDetails recoveryPlanAutomationRunbookActionDetailsInstance = new RecoveryPlanAutomationRunbookActionDetails();
                                                        
                                                        JToken runbookIdValue = customDetailsValue["runbookId"];
                                                        if (runbookIdValue != null && runbookIdValue.Type != JTokenType.Null)
                                                        {
                                                            string runbookIdInstance = ((string)runbookIdValue);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.RunbookId = runbookIdInstance;
                                                        }
                                                        
                                                        JToken timeoutValue2 = customDetailsValue["timeout"];
                                                        if (timeoutValue2 != null && timeoutValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance2 = TimeSpan.Parse(((string)timeoutValue2), CultureInfo.InvariantCulture);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.Timeout = timeoutInstance2;
                                                        }
                                                        
                                                        JToken fabricLocationValue2 = customDetailsValue["fabricLocation"];
                                                        if (fabricLocationValue2 != null && fabricLocationValue2.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance2 = ((string)fabricLocationValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.FabricLocation = fabricLocationInstance2;
                                                        }
                                                        
                                                        JToken instanceTypeValue2 = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance.InstanceType = instanceTypeInstance2;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanAutomationRunbookActionDetailsInstance;
                                                    }
                                                    if (typeName == "ManualActionDetails")
                                                    {
                                                        RecoveryPlanManualActionDetails recoveryPlanManualActionDetailsInstance = new RecoveryPlanManualActionDetails();
                                                        
                                                        JToken descriptionValue = customDetailsValue["description"];
                                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                                        {
                                                            string descriptionInstance = ((string)descriptionValue);
                                                            recoveryPlanManualActionDetailsInstance.Description = descriptionInstance;
                                                        }
                                                        
                                                        JToken instanceTypeValue3 = customDetailsValue["instanceType"];
                                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                                            recoveryPlanManualActionDetailsInstance.InstanceType = instanceTypeInstance3;
                                                        }
                                                        recoveryPlanActionInstance.CustomDetails = recoveryPlanManualActionDetailsInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken endGroupActionsArray = groupsValue["endGroupActions"];
                                        if (endGroupActionsArray != null && endGroupActionsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken endGroupActionsValue in ((JArray)endGroupActionsArray))
                                            {
                                                RecoveryPlanAction recoveryPlanActionInstance2 = new RecoveryPlanAction();
                                                recoveryPlanGroupInstance.EndGroupActions.Add(recoveryPlanActionInstance2);
                                                
                                                JToken actionNameValue2 = endGroupActionsValue["actionName"];
                                                if (actionNameValue2 != null && actionNameValue2.Type != JTokenType.Null)
                                                {
                                                    string actionNameInstance2 = ((string)actionNameValue2);
                                                    recoveryPlanActionInstance2.ActionName = actionNameInstance2;
                                                }
                                                
                                                JToken failoverTypesArray2 = endGroupActionsValue["failoverTypes"];
                                                if (failoverTypesArray2 != null && failoverTypesArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverTypesValue2 in ((JArray)failoverTypesArray2))
                                                    {
                                                        recoveryPlanActionInstance2.FailoverTypes.Add(((string)failoverTypesValue2));
                                                    }
                                                }
                                                
                                                JToken failoverDirectionsArray2 = endGroupActionsValue["failoverDirections"];
                                                if (failoverDirectionsArray2 != null && failoverDirectionsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken failoverDirectionsValue2 in ((JArray)failoverDirectionsArray2))
                                                    {
                                                        recoveryPlanActionInstance2.FailoverDirections.Add(((string)failoverDirectionsValue2));
                                                    }
                                                }
                                                
                                                JToken customDetailsValue2 = endGroupActionsValue["customDetails"];
                                                if (customDetailsValue2 != null && customDetailsValue2.Type != JTokenType.Null)
                                                {
                                                    string typeName2 = ((string)customDetailsValue2["instanceType"]);
                                                    if (typeName2 == "ScriptActionDetails")
                                                    {
                                                        RecoveryPlanScriptActionDetails recoveryPlanScriptActionDetailsInstance2 = new RecoveryPlanScriptActionDetails();
                                                        
                                                        JToken pathValue2 = customDetailsValue2["path"];
                                                        if (pathValue2 != null && pathValue2.Type != JTokenType.Null)
                                                        {
                                                            string pathInstance2 = ((string)pathValue2);
                                                            recoveryPlanScriptActionDetailsInstance2.Path = pathInstance2;
                                                        }
                                                        
                                                        JToken timeoutValue3 = customDetailsValue2["timeout"];
                                                        if (timeoutValue3 != null && timeoutValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance3 = TimeSpan.Parse(((string)timeoutValue3), CultureInfo.InvariantCulture);
                                                            recoveryPlanScriptActionDetailsInstance2.Timeout = timeoutInstance3;
                                                        }
                                                        
                                                        JToken fabricLocationValue3 = customDetailsValue2["fabricLocation"];
                                                        if (fabricLocationValue3 != null && fabricLocationValue3.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance3 = ((string)fabricLocationValue3);
                                                            recoveryPlanScriptActionDetailsInstance2.FabricLocation = fabricLocationInstance3;
                                                        }
                                                        
                                                        JToken instanceTypeValue4 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                                            recoveryPlanScriptActionDetailsInstance2.InstanceType = instanceTypeInstance4;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanScriptActionDetailsInstance2;
                                                    }
                                                    if (typeName2 == "AutomationRunbookActionDetails")
                                                    {
                                                        RecoveryPlanAutomationRunbookActionDetails recoveryPlanAutomationRunbookActionDetailsInstance2 = new RecoveryPlanAutomationRunbookActionDetails();
                                                        
                                                        JToken runbookIdValue2 = customDetailsValue2["runbookId"];
                                                        if (runbookIdValue2 != null && runbookIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string runbookIdInstance2 = ((string)runbookIdValue2);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.RunbookId = runbookIdInstance2;
                                                        }
                                                        
                                                        JToken timeoutValue4 = customDetailsValue2["timeout"];
                                                        if (timeoutValue4 != null && timeoutValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance4 = TimeSpan.Parse(((string)timeoutValue4), CultureInfo.InvariantCulture);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.Timeout = timeoutInstance4;
                                                        }
                                                        
                                                        JToken fabricLocationValue4 = customDetailsValue2["fabricLocation"];
                                                        if (fabricLocationValue4 != null && fabricLocationValue4.Type != JTokenType.Null)
                                                        {
                                                            string fabricLocationInstance4 = ((string)fabricLocationValue4);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.FabricLocation = fabricLocationInstance4;
                                                        }
                                                        
                                                        JToken instanceTypeValue5 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue5 != null && instanceTypeValue5.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance5 = ((string)instanceTypeValue5);
                                                            recoveryPlanAutomationRunbookActionDetailsInstance2.InstanceType = instanceTypeInstance5;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanAutomationRunbookActionDetailsInstance2;
                                                    }
                                                    if (typeName2 == "ManualActionDetails")
                                                    {
                                                        RecoveryPlanManualActionDetails recoveryPlanManualActionDetailsInstance2 = new RecoveryPlanManualActionDetails();
                                                        
                                                        JToken descriptionValue2 = customDetailsValue2["description"];
                                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                                        {
                                                            string descriptionInstance2 = ((string)descriptionValue2);
                                                            recoveryPlanManualActionDetailsInstance2.Description = descriptionInstance2;
                                                        }
                                                        
                                                        JToken instanceTypeValue6 = customDetailsValue2["instanceType"];
                                                        if (instanceTypeValue6 != null && instanceTypeValue6.Type != JTokenType.Null)
                                                        {
                                                            string instanceTypeInstance6 = ((string)instanceTypeValue6);
                                                            recoveryPlanManualActionDetailsInstance2.InstanceType = instanceTypeInstance6;
                                                        }
                                                        recoveryPlanActionInstance2.CustomDetails = recoveryPlanManualActionDetailsInstance2;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                recoveryPlanInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                recoveryPlanInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                recoveryPlanInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                recoveryPlanInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    recoveryPlanInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the list of all recovery plans under the vault.
        /// </summary>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list recovery plan operation.
        /// </returns>
        public async Task<RecoveryPlanListResponse> ListAsync(CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationRecoveryPlans";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RecoveryPlanListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RecoveryPlanListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    RecoveryPlan recoveryPlanInstance = new RecoveryPlan();
                                    result.RecoveryPlans.Add(recoveryPlanInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        RecoveryPlanProperties propertiesInstance = new RecoveryPlanProperties();
                                        recoveryPlanInstance.Properties = propertiesInstance;
                                        
                                        JToken friendlyNameValue = propertiesValue["friendlyName"];
                                        if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string friendlyNameInstance = ((string)friendlyNameValue);
                                            propertiesInstance.FriendlyName = friendlyNameInstance;
                                        }
                                        
                                        JToken primaryFabricIdValue = propertiesValue["primaryFabricId"];
                                        if (primaryFabricIdValue != null && primaryFabricIdValue.Type != JTokenType.Null)
                                        {
                                            string primaryFabricIdInstance = ((string)primaryFabricIdValue);
                                            propertiesInstance.PrimaryFabricId = primaryFabricIdInstance;
                                        }
                                        
                                        JToken primaryFabricFriendlyNameValue = propertiesValue["primaryFabricFriendlyName"];
                                        if (primaryFabricFriendlyNameValue != null && primaryFabricFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string primaryFabricFriendlyNameInstance = ((string)primaryFabricFriendlyNameValue);
                                            propertiesInstance.PrimaryFabricFriendlyName = primaryFabricFriendlyNameInstance;
                                        }
                                        
                                        JToken recoveryFabricIdValue = propertiesValue["recoveryFabricId"];
                                        if (recoveryFabricIdValue != null && recoveryFabricIdValue.Type != JTokenType.Null)
                                        {
                                            string recoveryFabricIdInstance = ((string)recoveryFabricIdValue);
                                            propertiesInstance.RecoveryFabricId = recoveryFabricIdInstance;
                                        }
                                        
                                        JToken recoveryFabricFriendlyNameValue = propertiesValue["recoveryFabricFriendlyName"];
                                        if (recoveryFabricFriendlyNameValue != null && recoveryFabricFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryFabricFriendlyNameInstance = ((string)recoveryFabricFriendlyNameValue);
                                            propertiesInstance.RecoveryFabricFriendlyName = recoveryFabricFriendlyNameInstance;
                                        }
                                        
                                        JToken failoverDeploymentModelValue = propertiesValue["failoverDeploymentModel"];
                                        if (failoverDeploymentModelValue != null && failoverDeploymentModelValue.Type != JTokenType.Null)
                                        {
                                            string failoverDeploymentModelInstance = ((string)failoverDeploymentModelValue);
                                            propertiesInstance.FailoverDeploymentModel = failoverDeploymentModelInstance;
                                        }
                                        
                                        JToken replicationProvidersArray = propertiesValue["replicationProviders"];
                                        if (replicationProvidersArray != null && replicationProvidersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken replicationProvidersValue in ((JArray)replicationProvidersArray))
                                            {
                                                propertiesInstance.ReplicationProviders.Add(((string)replicationProvidersValue));
                                            }
                                        }
                                        
                                        JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                        if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                            {
                                                propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                            }
                                        }
                                        
                                        JToken lastPlannedFailoverTimeValue = propertiesValue["lastPlannedFailoverTime"];
                                        if (lastPlannedFailoverTimeValue != null && lastPlannedFailoverTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastPlannedFailoverTimeInstance = ((DateTime)lastPlannedFailoverTimeValue);
                                            propertiesInstance.LastPlannedFailoverTime = lastPlannedFailoverTimeInstance;
                                        }
                                        
                                        JToken lastTestFailoverTimeValue = propertiesValue["lastTestFailoverTime"];
                                        if (lastTestFailoverTimeValue != null && lastTestFailoverTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastTestFailoverTimeInstance = ((DateTime)lastTestFailoverTimeValue);
                                            propertiesInstance.LastTestFailoverTime = lastTestFailoverTimeInstance;
                                        }
                                        
                                        JToken currentScenarioValue = propertiesValue["currentScenario"];
                                        if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                        {
                                            CurrentScenarioDetails currentScenarioInstance = new CurrentScenarioDetails();
                                            propertiesInstance.CurrentScenario = currentScenarioInstance;
                                            
                                            JToken scenarioNameValue = currentScenarioValue["scenarioName"];
                                            if (scenarioNameValue != null && scenarioNameValue.Type != JTokenType.Null)
                                            {
                                                string scenarioNameInstance = ((string)scenarioNameValue);
                                                currentScenarioInstance.ScenarioName = scenarioNameInstance;
                                            }
                                            
                                            JToken jobIdValue = currentScenarioValue["jobId"];
                                            if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                            {
                                                string jobIdInstance = ((string)jobIdValue);
                                                currentScenarioInstance.JobId = jobIdInstance;
                                            }
                                            
                                            JToken startTimeValue = currentScenarioValue["startTime"];
                                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime startTimeInstance = ((DateTime)startTimeValue);
                                                currentScenarioInstance.StartTime = startTimeInstance;
                                            }
                                        }
                                        
                                        JToken currentScenarioStatusValue = propertiesValue["currentScenarioStatus"];
                                        if (currentScenarioStatusValue != null && currentScenarioStatusValue.Type != JTokenType.Null)
                                        {
                                            string currentScenarioStatusInstance = ((string)currentScenarioStatusValue);
                                            propertiesInstance.CurrentScenarioStatus = currentScenarioStatusInstance;
                                        }
                                        
                                        JToken currentScenarioStatusDescriptionValue = propertiesValue["currentScenarioStatusDescription"];
                                        if (currentScenarioStatusDescriptionValue != null && currentScenarioStatusDescriptionValue.Type != JTokenType.Null)
                                        {
                                            string currentScenarioStatusDescriptionInstance = ((string)currentScenarioStatusDescriptionValue);
                                            propertiesInstance.CurrentScenarioStatusDescription = currentScenarioStatusDescriptionInstance;
                                        }
                                        
                                        JToken groupsArray = propertiesValue["groups"];
                                        if (groupsArray != null && groupsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken groupsValue in ((JArray)groupsArray))
                                            {
                                                RecoveryPlanGroup recoveryPlanGroupInstance = new RecoveryPlanGroup();
                                                propertiesInstance.Groups.Add(recoveryPlanGroupInstance);
                                                
                                                JToken groupTypeValue = groupsValue["groupType"];
                                                if (groupTypeValue != null && groupTypeValue.Type != JTokenType.Null)
                                                {
                                                    string groupTypeInstance = ((string)groupTypeValue);
                                                    recoveryPlanGroupInstance.GroupType = groupTypeInstance;
                                                }
                                                
                                                JToken replicationProtectedItemsArray = groupsValue["replicationProtectedItems"];
                                                if (replicationProtectedItemsArray != null && replicationProtectedItemsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken replicationProtectedItemsValue in ((JArray)replicationProtectedItemsArray))
                                                    {
                                                        RecoveryPlanProtectedItem recoveryPlanProtectedItemInstance = new RecoveryPlanProtectedItem();
                                                        recoveryPlanGroupInstance.ReplicationProtectedItems.Add(recoveryPlanProtectedItemInstance);
                                                        
                                                        JToken idValue = replicationProtectedItemsValue["id"];
                                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                                        {
                                                            string idInstance = ((string)idValue);
                                                            recoveryPlanProtectedItemInstance.Id = idInstance;
                                                        }
                                                        
                                                        JToken virtualMachineIdValue = replicationProtectedItemsValue["virtualMachineId"];
                                                        if (virtualMachineIdValue != null && virtualMachineIdValue.Type != JTokenType.Null)
                                                        {
                                                            string virtualMachineIdInstance = ((string)virtualMachineIdValue);
                                                            recoveryPlanProtectedItemInstance.VirtualMachineId = virtualMachineIdInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken startGroupActionsArray = groupsValue["startGroupActions"];
                                                if (startGroupActionsArray != null && startGroupActionsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken startGroupActionsValue in ((JArray)startGroupActionsArray))
                                                    {
                                                        RecoveryPlanAction recoveryPlanActionInstance = new RecoveryPlanAction();
                                                        recoveryPlanGroupInstance.StartGroupActions.Add(recoveryPlanActionInstance);
                                                        
                                                        JToken actionNameValue = startGroupActionsValue["actionName"];
                                                        if (actionNameValue != null && actionNameValue.Type != JTokenType.Null)
                                                        {
                                                            string actionNameInstance = ((string)actionNameValue);
                                                            recoveryPlanActionInstance.ActionName = actionNameInstance;
                                                        }
                                                        
                                                        JToken failoverTypesArray = startGroupActionsValue["failoverTypes"];
                                                        if (failoverTypesArray != null && failoverTypesArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken failoverTypesValue in ((JArray)failoverTypesArray))
                                                            {
                                                                recoveryPlanActionInstance.FailoverTypes.Add(((string)failoverTypesValue));
                                                            }
                                                        }
                                                        
                                                        JToken failoverDirectionsArray = startGroupActionsValue["failoverDirections"];
                                                        if (failoverDirectionsArray != null && failoverDirectionsArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken failoverDirectionsValue in ((JArray)failoverDirectionsArray))
                                                            {
                                                                recoveryPlanActionInstance.FailoverDirections.Add(((string)failoverDirectionsValue));
                                                            }
                                                        }
                                                        
                                                        JToken customDetailsValue = startGroupActionsValue["customDetails"];
                                                        if (customDetailsValue != null && customDetailsValue.Type != JTokenType.Null)
                                                        {
                                                            string typeName = ((string)customDetailsValue["instanceType"]);
                                                            if (typeName == "ScriptActionDetails")
                                                            {
                                                                RecoveryPlanScriptActionDetails recoveryPlanScriptActionDetailsInstance = new RecoveryPlanScriptActionDetails();
                                                                
                                                                JToken pathValue = customDetailsValue["path"];
                                                                if (pathValue != null && pathValue.Type != JTokenType.Null)
                                                                {
                                                                    string pathInstance = ((string)pathValue);
                                                                    recoveryPlanScriptActionDetailsInstance.Path = pathInstance;
                                                                }
                                                                
                                                                JToken timeoutValue = customDetailsValue["timeout"];
                                                                if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                                    recoveryPlanScriptActionDetailsInstance.Timeout = timeoutInstance;
                                                                }
                                                                
                                                                JToken fabricLocationValue = customDetailsValue["fabricLocation"];
                                                                if (fabricLocationValue != null && fabricLocationValue.Type != JTokenType.Null)
                                                                {
                                                                    string fabricLocationInstance = ((string)fabricLocationValue);
                                                                    recoveryPlanScriptActionDetailsInstance.FabricLocation = fabricLocationInstance;
                                                                }
                                                                
                                                                JToken instanceTypeValue = customDetailsValue["instanceType"];
                                                                if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                                                {
                                                                    string instanceTypeInstance = ((string)instanceTypeValue);
                                                                    recoveryPlanScriptActionDetailsInstance.InstanceType = instanceTypeInstance;
                                                                }
                                                                recoveryPlanActionInstance.CustomDetails = recoveryPlanScriptActionDetailsInstance;
                                                            }
                                                            if (typeName == "AutomationRunbookActionDetails")
                                                            {
                                                                RecoveryPlanAutomationRunbookActionDetails recoveryPlanAutomationRunbookActionDetailsInstance = new RecoveryPlanAutomationRunbookActionDetails();
                                                                
                                                                JToken runbookIdValue = customDetailsValue["runbookId"];
                                                                if (runbookIdValue != null && runbookIdValue.Type != JTokenType.Null)
                                                                {
                                                                    string runbookIdInstance = ((string)runbookIdValue);
                                                                    recoveryPlanAutomationRunbookActionDetailsInstance.RunbookId = runbookIdInstance;
                                                                }
                                                                
                                                                JToken timeoutValue2 = customDetailsValue["timeout"];
                                                                if (timeoutValue2 != null && timeoutValue2.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan timeoutInstance2 = TimeSpan.Parse(((string)timeoutValue2), CultureInfo.InvariantCulture);
                                                                    recoveryPlanAutomationRunbookActionDetailsInstance.Timeout = timeoutInstance2;
                                                                }
                                                                
                                                                JToken fabricLocationValue2 = customDetailsValue["fabricLocation"];
                                                                if (fabricLocationValue2 != null && fabricLocationValue2.Type != JTokenType.Null)
                                                                {
                                                                    string fabricLocationInstance2 = ((string)fabricLocationValue2);
                                                                    recoveryPlanAutomationRunbookActionDetailsInstance.FabricLocation = fabricLocationInstance2;
                                                                }
                                                                
                                                                JToken instanceTypeValue2 = customDetailsValue["instanceType"];
                                                                if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                                                {
                                                                    string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                                                    recoveryPlanAutomationRunbookActionDetailsInstance.InstanceType = instanceTypeInstance2;
                                                                }
                                                                recoveryPlanActionInstance.CustomDetails = recoveryPlanAutomationRunbookActionDetailsInstance;
                                                            }
                                                            if (typeName == "ManualActionDetails")
                                                            {
                                                                RecoveryPlanManualActionDetails recoveryPlanManualActionDetailsInstance = new RecoveryPlanManualActionDetails();
                                                                
                                                                JToken descriptionValue = customDetailsValue["description"];
                                                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                                                {
                                                                    string descriptionInstance = ((string)descriptionValue);
                                                                    recoveryPlanManualActionDetailsInstance.Description = descriptionInstance;
                                                                }
                                                                
                                                                JToken instanceTypeValue3 = customDetailsValue["instanceType"];
                                                                if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                                                {
                                                                    string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                                                    recoveryPlanManualActionDetailsInstance.InstanceType = instanceTypeInstance3;
                                                                }
                                                                recoveryPlanActionInstance.CustomDetails = recoveryPlanManualActionDetailsInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken endGroupActionsArray = groupsValue["endGroupActions"];
                                                if (endGroupActionsArray != null && endGroupActionsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken endGroupActionsValue in ((JArray)endGroupActionsArray))
                                                    {
                                                        RecoveryPlanAction recoveryPlanActionInstance2 = new RecoveryPlanAction();
                                                        recoveryPlanGroupInstance.EndGroupActions.Add(recoveryPlanActionInstance2);
                                                        
                                                        JToken actionNameValue2 = endGroupActionsValue["actionName"];
                                                        if (actionNameValue2 != null && actionNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string actionNameInstance2 = ((string)actionNameValue2);
                                                            recoveryPlanActionInstance2.ActionName = actionNameInstance2;
                                                        }
                                                        
                                                        JToken failoverTypesArray2 = endGroupActionsValue["failoverTypes"];
                                                        if (failoverTypesArray2 != null && failoverTypesArray2.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken failoverTypesValue2 in ((JArray)failoverTypesArray2))
                                                            {
                                                                recoveryPlanActionInstance2.FailoverTypes.Add(((string)failoverTypesValue2));
                                                            }
                                                        }
                                                        
                                                        JToken failoverDirectionsArray2 = endGroupActionsValue["failoverDirections"];
                                                        if (failoverDirectionsArray2 != null && failoverDirectionsArray2.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken failoverDirectionsValue2 in ((JArray)failoverDirectionsArray2))
                                                            {
                                                                recoveryPlanActionInstance2.FailoverDirections.Add(((string)failoverDirectionsValue2));
                                                            }
                                                        }
                                                        
                                                        JToken customDetailsValue2 = endGroupActionsValue["customDetails"];
                                                        if (customDetailsValue2 != null && customDetailsValue2.Type != JTokenType.Null)
                                                        {
                                                            string typeName2 = ((string)customDetailsValue2["instanceType"]);
                                                            if (typeName2 == "ScriptActionDetails")
                                                            {
                                                                RecoveryPlanScriptActionDetails recoveryPlanScriptActionDetailsInstance2 = new RecoveryPlanScriptActionDetails();
                                                                
                                                                JToken pathValue2 = customDetailsValue2["path"];
                                                                if (pathValue2 != null && pathValue2.Type != JTokenType.Null)
                                                                {
                                                                    string pathInstance2 = ((string)pathValue2);
                                                                    recoveryPlanScriptActionDetailsInstance2.Path = pathInstance2;
                                                                }
                                                                
                                                                JToken timeoutValue3 = customDetailsValue2["timeout"];
                                                                if (timeoutValue3 != null && timeoutValue3.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan timeoutInstance3 = TimeSpan.Parse(((string)timeoutValue3), CultureInfo.InvariantCulture);
                                                                    recoveryPlanScriptActionDetailsInstance2.Timeout = timeoutInstance3;
                                                                }
                                                                
                                                                JToken fabricLocationValue3 = customDetailsValue2["fabricLocation"];
                                                                if (fabricLocationValue3 != null && fabricLocationValue3.Type != JTokenType.Null)
                                                                {
                                                                    string fabricLocationInstance3 = ((string)fabricLocationValue3);
                                                                    recoveryPlanScriptActionDetailsInstance2.FabricLocation = fabricLocationInstance3;
                                                                }
                                                                
                                                                JToken instanceTypeValue4 = customDetailsValue2["instanceType"];
                                                                if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                                                {
                                                                    string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                                                    recoveryPlanScriptActionDetailsInstance2.InstanceType = instanceTypeInstance4;
                                                                }
                                                                recoveryPlanActionInstance2.CustomDetails = recoveryPlanScriptActionDetailsInstance2;
                                                            }
                                                            if (typeName2 == "AutomationRunbookActionDetails")
                                                            {
                                                                RecoveryPlanAutomationRunbookActionDetails recoveryPlanAutomationRunbookActionDetailsInstance2 = new RecoveryPlanAutomationRunbookActionDetails();
                                                                
                                                                JToken runbookIdValue2 = customDetailsValue2["runbookId"];
                                                                if (runbookIdValue2 != null && runbookIdValue2.Type != JTokenType.Null)
                                                                {
                                                                    string runbookIdInstance2 = ((string)runbookIdValue2);
                                                                    recoveryPlanAutomationRunbookActionDetailsInstance2.RunbookId = runbookIdInstance2;
                                                                }
                                                                
                                                                JToken timeoutValue4 = customDetailsValue2["timeout"];
                                                                if (timeoutValue4 != null && timeoutValue4.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan timeoutInstance4 = TimeSpan.Parse(((string)timeoutValue4), CultureInfo.InvariantCulture);
                                                                    recoveryPlanAutomationRunbookActionDetailsInstance2.Timeout = timeoutInstance4;
                                                                }
                                                                
                                                                JToken fabricLocationValue4 = customDetailsValue2["fabricLocation"];
                                                                if (fabricLocationValue4 != null && fabricLocationValue4.Type != JTokenType.Null)
                                                                {
                                                                    string fabricLocationInstance4 = ((string)fabricLocationValue4);
                                                                    recoveryPlanAutomationRunbookActionDetailsInstance2.FabricLocation = fabricLocationInstance4;
                                                                }
                                                                
                                                                JToken instanceTypeValue5 = customDetailsValue2["instanceType"];
                                                                if (instanceTypeValue5 != null && instanceTypeValue5.Type != JTokenType.Null)
                                                                {
                                                                    string instanceTypeInstance5 = ((string)instanceTypeValue5);
                                                                    recoveryPlanAutomationRunbookActionDetailsInstance2.InstanceType = instanceTypeInstance5;
                                                                }
                                                                recoveryPlanActionInstance2.CustomDetails = recoveryPlanAutomationRunbookActionDetailsInstance2;
                                                            }
                                                            if (typeName2 == "ManualActionDetails")
                                                            {
                                                                RecoveryPlanManualActionDetails recoveryPlanManualActionDetailsInstance2 = new RecoveryPlanManualActionDetails();
                                                                
                                                                JToken descriptionValue2 = customDetailsValue2["description"];
                                                                if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                                                {
                                                                    string descriptionInstance2 = ((string)descriptionValue2);
                                                                    recoveryPlanManualActionDetailsInstance2.Description = descriptionInstance2;
                                                                }
                                                                
                                                                JToken instanceTypeValue6 = customDetailsValue2["instanceType"];
                                                                if (instanceTypeValue6 != null && instanceTypeValue6.Type != JTokenType.Null)
                                                                {
                                                                    string instanceTypeInstance6 = ((string)instanceTypeValue6);
                                                                    recoveryPlanManualActionDetailsInstance2.InstanceType = instanceTypeInstance6;
                                                                }
                                                                recoveryPlanActionInstance2.CustomDetails = recoveryPlanManualActionDetailsInstance2;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue2 = valueValue["id"];
                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                    {
                                        string idInstance2 = ((string)idValue2);
                                        recoveryPlanInstance.Id = idInstance2;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        recoveryPlanInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        recoveryPlanInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        recoveryPlanInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            recoveryPlanInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Planned failover of the recovery plan.
        /// </summary>
        /// <param name='recoveryPlanName'>
        /// Required. Recovery plan name.
        /// </param>
        /// <param name='input'>
        /// Required. Recovery plan planned failover input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> PlannedFailoverAsync(string recoveryPlanName, RecoveryPlanPlannedFailoverInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("recoveryPlanName", recoveryPlanName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "PlannedFailoverAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.RecoveryPlan.BeginPlannedFailoverAsync(recoveryPlanName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            RecoveryPlanOperationResponse result = await client.RecoveryPlan.GetPlannedFailoverStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.RecoveryPlan.GetPlannedFailoverStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Reprotects the recovery plan.
        /// </summary>
        /// <param name='recoveryPlanName'>
        /// Required. Recovery plan name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> ReprotectAsync(string recoveryPlanName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("recoveryPlanName", recoveryPlanName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ReprotectAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.RecoveryPlan.BeginReprotectAsync(recoveryPlanName, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            RecoveryPlanOperationResponse result = await client.RecoveryPlan.GetReprotectStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.RecoveryPlan.GetReprotectStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Test failover of the recovery plan.
        /// </summary>
        /// <param name='recoveryPlanName'>
        /// Required. Recovery plan name.
        /// </param>
        /// <param name='input'>
        /// Required. Recovery plan test failover input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> TestFailoverAsync(string recoveryPlanName, RecoveryPlanTestFailoverInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("recoveryPlanName", recoveryPlanName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "TestFailoverAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.RecoveryPlan.BeginTestFailoverAsync(recoveryPlanName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            RecoveryPlanOperationResponse result = await client.RecoveryPlan.GetTestFailoverStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.RecoveryPlan.GetTestFailoverStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Unplanned failover of the recovery plan.
        /// </summary>
        /// <param name='recoveryPlanName'>
        /// Required. Recovery plan name.
        /// </param>
        /// <param name='input'>
        /// Required. Recovery plan unplanned failover input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> UnplannedFailoverAsync(string recoveryPlanName, RecoveryPlanUnplannedFailoverInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("recoveryPlanName", recoveryPlanName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "UnplannedFailoverAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.RecoveryPlan.BeginUnplannedFailoverAsync(recoveryPlanName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            RecoveryPlanOperationResponse result = await client.RecoveryPlan.GetUnplannedFailoverStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.RecoveryPlan.GetUnplannedFailoverStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Updates the given recovery plan.
        /// </summary>
        /// <param name='recoveryPlanName'>
        /// Required. Recovery plan name.
        /// </param>
        /// <param name='input'>
        /// Required. Update recovery plan input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> UpdateAsync(string recoveryPlanName, UpdateRecoveryPlanInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("recoveryPlanName", recoveryPlanName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.RecoveryPlan.BeginUpdatingAsync(recoveryPlanName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            UpdateRecoveryPlanOperationResponse result = await client.RecoveryPlan.GetUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.RecoveryPlan.GetUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
    }
}
