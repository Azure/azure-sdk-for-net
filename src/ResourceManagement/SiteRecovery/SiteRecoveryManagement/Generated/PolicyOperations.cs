// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.SiteRecovery;
using Microsoft.Azure.Management.SiteRecovery.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.SiteRecovery
{
    /// <summary>
    /// Definition of Policy operations for the Site Recovery extension.
    /// </summary>
    internal partial class PolicyOperations : IServiceOperations<SiteRecoveryManagementClient>, IPolicyOperations
    {
        /// <summary>
        /// Initializes a new instance of the PolicyOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal PolicyOperations(SiteRecoveryManagementClient client)
        {
            this._client = client;
        }
        
        private SiteRecoveryManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.SiteRecovery.SiteRecoveryManagementClient.
        /// </summary>
        public SiteRecoveryManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Creates a profile
        /// </summary>
        /// <param name='policyName'>
        /// Required. Policy Name.
        /// </param>
        /// <param name='input'>
        /// Required. Input to create profile
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginCreatingAsync(string policyName, CreatePolicyInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (policyName == null)
            {
                throw new ArgumentNullException("policyName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("policyName", policyName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginCreatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationPolicies/";
            url = url + Uri.EscapeDataString(policyName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject createPolicyInputValue = new JObject();
                requestDoc = createPolicyInputValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    createPolicyInputValue["properties"] = propertiesValue;
                    
                    if (input.Properties.ProviderSpecificInput != null)
                    {
                        JObject providerSpecificInputValue = new JObject();
                        propertiesValue["providerSpecificInput"] = providerSpecificInputValue;
                        if (input.Properties.ProviderSpecificInput is HyperVReplica2012PolicyInput)
                        {
                            providerSpecificInputValue["instanceType"] = "HyperVReplica2012";
                            HyperVReplica2012PolicyInput derived = ((HyperVReplica2012PolicyInput)input.Properties.ProviderSpecificInput);
                            
                            providerSpecificInputValue["recoveryPoints"] = derived.RecoveryPoints;
                            
                            providerSpecificInputValue["applicationConsistentSnapshotFrequencyInHours"] = derived.ApplicationConsistentSnapshotFrequencyInHours;
                            
                            if (derived.Compression != null)
                            {
                                providerSpecificInputValue["compression"] = derived.Compression;
                            }
                            
                            if (derived.InitialReplicationMethod != null)
                            {
                                providerSpecificInputValue["initialReplicationMethod"] = derived.InitialReplicationMethod;
                            }
                            
                            if (derived.OnlineReplicationStartTime != null)
                            {
                                providerSpecificInputValue["onlineReplicationStartTime"] = derived.OnlineReplicationStartTime.Value.ToString();
                            }
                            
                            if (derived.OfflineReplicationImportPath != null)
                            {
                                providerSpecificInputValue["offlineReplicationImportPath"] = derived.OfflineReplicationImportPath;
                            }
                            
                            if (derived.OfflineReplicationExportPath != null)
                            {
                                providerSpecificInputValue["offlineReplicationExportPath"] = derived.OfflineReplicationExportPath;
                            }
                            
                            providerSpecificInputValue["replicationPort"] = derived.ReplicationPort;
                            
                            providerSpecificInputValue["allowedAuthenticationType"] = derived.AllowedAuthenticationType;
                            
                            if (derived.ReplicaDeletion != null)
                            {
                                providerSpecificInputValue["replicaDeletion"] = derived.ReplicaDeletion;
                            }
                        }
                        if (input.Properties.ProviderSpecificInput is HyperVReplica2012R2PolicyInput)
                        {
                            providerSpecificInputValue["instanceType"] = "HyperVReplica2012R2";
                            HyperVReplica2012R2PolicyInput derived2 = ((HyperVReplica2012R2PolicyInput)input.Properties.ProviderSpecificInput);
                            
                            providerSpecificInputValue["replicationFrequencyInSeconds"] = derived2.ReplicationFrequencyInSeconds;
                            
                            providerSpecificInputValue["recoveryPoints"] = derived2.RecoveryPoints;
                            
                            providerSpecificInputValue["applicationConsistentSnapshotFrequencyInHours"] = derived2.ApplicationConsistentSnapshotFrequencyInHours;
                            
                            if (derived2.Compression != null)
                            {
                                providerSpecificInputValue["compression"] = derived2.Compression;
                            }
                            
                            if (derived2.InitialReplicationMethod != null)
                            {
                                providerSpecificInputValue["initialReplicationMethod"] = derived2.InitialReplicationMethod;
                            }
                            
                            if (derived2.OnlineReplicationStartTime != null)
                            {
                                providerSpecificInputValue["onlineReplicationStartTime"] = derived2.OnlineReplicationStartTime.Value.ToString();
                            }
                            
                            if (derived2.OfflineReplicationImportPath != null)
                            {
                                providerSpecificInputValue["offlineReplicationImportPath"] = derived2.OfflineReplicationImportPath;
                            }
                            
                            if (derived2.OfflineReplicationExportPath != null)
                            {
                                providerSpecificInputValue["offlineReplicationExportPath"] = derived2.OfflineReplicationExportPath;
                            }
                            
                            providerSpecificInputValue["replicationPort"] = derived2.ReplicationPort;
                            
                            providerSpecificInputValue["allowedAuthenticationType"] = derived2.AllowedAuthenticationType;
                            
                            if (derived2.ReplicaDeletion != null)
                            {
                                providerSpecificInputValue["replicaDeletion"] = derived2.ReplicaDeletion;
                            }
                        }
                        if (input.Properties.ProviderSpecificInput is HyperVReplicaAzurePolicyInput)
                        {
                            providerSpecificInputValue["instanceType"] = "HyperVReplicaAzure";
                            HyperVReplicaAzurePolicyInput derived3 = ((HyperVReplicaAzurePolicyInput)input.Properties.ProviderSpecificInput);
                            
                            providerSpecificInputValue["recoveryPointHistoryDuration"] = derived3.RecoveryPointHistoryDuration;
                            
                            providerSpecificInputValue["applicationConsistentSnapshotFrequencyInHours"] = derived3.ApplicationConsistentSnapshotFrequencyInHours;
                            
                            providerSpecificInputValue["replicationInterval"] = derived3.ReplicationInterval;
                            
                            if (derived3.OnlineIrStartTime != null)
                            {
                                providerSpecificInputValue["onlineReplicationStartTime"] = derived3.OnlineIrStartTime.Value.ToString();
                            }
                            
                            if (derived3.StorageAccounts != null)
                            {
                                if (derived3.StorageAccounts is ILazyCollection == false || ((ILazyCollection)derived3.StorageAccounts).IsInitialized)
                                {
                                    JArray storageAccountsArray = new JArray();
                                    foreach (string storageAccountsItem in derived3.StorageAccounts)
                                    {
                                        storageAccountsArray.Add(storageAccountsItem);
                                    }
                                    providerSpecificInputValue["storageAccounts"] = storageAccountsArray;
                                }
                            }
                            
                            if (derived3.Encryption != null)
                            {
                                providerSpecificInputValue["encryption"] = derived3.Encryption;
                            }
                        }
                        if (input.Properties.ProviderSpecificInput is SanPolicyInput)
                        {
                            providerSpecificInputValue["instanceType"] = "San";
                            SanPolicyInput derived4 = ((SanPolicyInput)input.Properties.ProviderSpecificInput);
                            
                            if (derived4.CloudId != null)
                            {
                                providerSpecificInputValue["cloudId"] = derived4.CloudId;
                            }
                            
                            if (derived4.RemoteCloudId != null)
                            {
                                providerSpecificInputValue["remoteCloudId"] = derived4.RemoteCloudId;
                            }
                            
                            if (derived4.ArrayUniqueId != null)
                            {
                                providerSpecificInputValue["arrayUniqueId"] = derived4.ArrayUniqueId;
                            }
                            
                            if (derived4.RemoteArrayUniqueId != null)
                            {
                                providerSpecificInputValue["remoteArrayUniqueId"] = derived4.RemoteArrayUniqueId;
                            }
                        }
                        if (input.Properties.ProviderSpecificInput is InMageAzureV2PolicyInput)
                        {
                            providerSpecificInputValue["instanceType"] = "InMageAzureV2";
                            InMageAzureV2PolicyInput derived5 = ((InMageAzureV2PolicyInput)input.Properties.ProviderSpecificInput);
                            
                            providerSpecificInputValue["recoveryPointThresholdInMinutes"] = derived5.RecoveryPointThresholdInMinutes;
                            
                            providerSpecificInputValue["recoveryPointHistory"] = derived5.RecoveryPointHistory;
                            
                            providerSpecificInputValue["crashConsistentFrequencyInMinutes"] = derived5.CrashConsistentFrequencyInMinutes;
                            
                            providerSpecificInputValue["appConsistentFrequencyInMinutes"] = derived5.AppConsistentFrequencyInMinutes;
                            
                            if (derived5.MultiVmSyncStatus != null)
                            {
                                providerSpecificInputValue["multiVmSyncStatus"] = derived5.MultiVmSyncStatus;
                            }
                        }
                        if (input.Properties.ProviderSpecificInput is InMagePolicyInput)
                        {
                            providerSpecificInputValue["instanceType"] = "InMage";
                            InMagePolicyInput derived6 = ((InMagePolicyInput)input.Properties.ProviderSpecificInput);
                            
                            providerSpecificInputValue["recoveryPointThresholdInMinutes"] = derived6.RecoveryPointThresholdInMinutes;
                            
                            providerSpecificInputValue["recoveryPointHistory"] = derived6.RecoveryPointHistory;
                            
                            providerSpecificInputValue["appConsistentFrequencyInMinutes"] = derived6.AppConsistentFrequencyInMinutes;
                            
                            if (derived6.MultiVmSyncStatus != null)
                            {
                                providerSpecificInputValue["multiVmSyncStatus"] = derived6.MultiVmSyncStatus;
                            }
                        }
                        if (input.Properties.ProviderSpecificInput is A2APolicyCreationInput)
                        {
                            providerSpecificInputValue["instanceType"] = "A2A";
                            A2APolicyCreationInput derived7 = ((A2APolicyCreationInput)input.Properties.ProviderSpecificInput);
                            
                            providerSpecificInputValue["recoveryPointThresholdInMinutes"] = derived7.RecoveryPointThresholdInMinutes;
                            
                            providerSpecificInputValue["recoveryPointHistory"] = derived7.RecoveryPointHistory;
                            
                            providerSpecificInputValue["crashConsistentFrequencyInMinutes"] = derived7.CrashConsistentFrequencyInMinutes;
                            
                            providerSpecificInputValue["appConsistentFrequencyInMinutes"] = derived7.AppConsistentFrequencyInMinutes;
                            
                            if (derived7.MultiVmSyncStatus != null)
                            {
                                providerSpecificInputValue["multiVmSyncStatus"] = derived7.MultiVmSyncStatus;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes a Policy
        /// </summary>
        /// <param name='name'>
        /// Required. Policy name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginDeletingAsync(string name, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("name", name);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationPolicies/";
            url = url + Uri.EscapeDataString(name);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update Policy.
        /// </summary>
        /// <param name='input'>
        /// Required. input.
        /// </param>
        /// <param name='policyName'>
        /// Required. Policy Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginUpdatingAsync(UpdatePolicyInput input, string policyName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            if (input.Properties != null)
            {
                if (input.Properties.ReplicationProviderSettings == null)
                {
                    throw new ArgumentNullException("input.Properties.ReplicationProviderSettings");
                }
            }
            if (policyName == null)
            {
                throw new ArgumentNullException("policyName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("input", input);
                tracingParameters.Add("policyName", policyName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginUpdatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationPolicies/";
            url = url + Uri.EscapeDataString(policyName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject updatePolicyInputValue = new JObject();
                requestDoc = updatePolicyInputValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    updatePolicyInputValue["properties"] = propertiesValue;
                    
                    JObject replicationProviderSettingsValue = new JObject();
                    propertiesValue["replicationProviderSettings"] = replicationProviderSettingsValue;
                    if (input.Properties.ReplicationProviderSettings is HyperVReplica2012PolicyInput)
                    {
                        replicationProviderSettingsValue["instanceType"] = "HyperVReplica2012";
                        HyperVReplica2012PolicyInput derived = ((HyperVReplica2012PolicyInput)input.Properties.ReplicationProviderSettings);
                        
                        replicationProviderSettingsValue["recoveryPoints"] = derived.RecoveryPoints;
                        
                        replicationProviderSettingsValue["applicationConsistentSnapshotFrequencyInHours"] = derived.ApplicationConsistentSnapshotFrequencyInHours;
                        
                        if (derived.Compression != null)
                        {
                            replicationProviderSettingsValue["compression"] = derived.Compression;
                        }
                        
                        if (derived.InitialReplicationMethod != null)
                        {
                            replicationProviderSettingsValue["initialReplicationMethod"] = derived.InitialReplicationMethod;
                        }
                        
                        if (derived.OnlineReplicationStartTime != null)
                        {
                            replicationProviderSettingsValue["onlineReplicationStartTime"] = derived.OnlineReplicationStartTime.Value.ToString();
                        }
                        
                        if (derived.OfflineReplicationImportPath != null)
                        {
                            replicationProviderSettingsValue["offlineReplicationImportPath"] = derived.OfflineReplicationImportPath;
                        }
                        
                        if (derived.OfflineReplicationExportPath != null)
                        {
                            replicationProviderSettingsValue["offlineReplicationExportPath"] = derived.OfflineReplicationExportPath;
                        }
                        
                        replicationProviderSettingsValue["replicationPort"] = derived.ReplicationPort;
                        
                        replicationProviderSettingsValue["allowedAuthenticationType"] = derived.AllowedAuthenticationType;
                        
                        if (derived.ReplicaDeletion != null)
                        {
                            replicationProviderSettingsValue["replicaDeletion"] = derived.ReplicaDeletion;
                        }
                    }
                    if (input.Properties.ReplicationProviderSettings is HyperVReplica2012R2PolicyInput)
                    {
                        replicationProviderSettingsValue["instanceType"] = "HyperVReplica2012R2";
                        HyperVReplica2012R2PolicyInput derived2 = ((HyperVReplica2012R2PolicyInput)input.Properties.ReplicationProviderSettings);
                        
                        replicationProviderSettingsValue["replicationFrequencyInSeconds"] = derived2.ReplicationFrequencyInSeconds;
                        
                        replicationProviderSettingsValue["recoveryPoints"] = derived2.RecoveryPoints;
                        
                        replicationProviderSettingsValue["applicationConsistentSnapshotFrequencyInHours"] = derived2.ApplicationConsistentSnapshotFrequencyInHours;
                        
                        if (derived2.Compression != null)
                        {
                            replicationProviderSettingsValue["compression"] = derived2.Compression;
                        }
                        
                        if (derived2.InitialReplicationMethod != null)
                        {
                            replicationProviderSettingsValue["initialReplicationMethod"] = derived2.InitialReplicationMethod;
                        }
                        
                        if (derived2.OnlineReplicationStartTime != null)
                        {
                            replicationProviderSettingsValue["onlineReplicationStartTime"] = derived2.OnlineReplicationStartTime.Value.ToString();
                        }
                        
                        if (derived2.OfflineReplicationImportPath != null)
                        {
                            replicationProviderSettingsValue["offlineReplicationImportPath"] = derived2.OfflineReplicationImportPath;
                        }
                        
                        if (derived2.OfflineReplicationExportPath != null)
                        {
                            replicationProviderSettingsValue["offlineReplicationExportPath"] = derived2.OfflineReplicationExportPath;
                        }
                        
                        replicationProviderSettingsValue["replicationPort"] = derived2.ReplicationPort;
                        
                        replicationProviderSettingsValue["allowedAuthenticationType"] = derived2.AllowedAuthenticationType;
                        
                        if (derived2.ReplicaDeletion != null)
                        {
                            replicationProviderSettingsValue["replicaDeletion"] = derived2.ReplicaDeletion;
                        }
                    }
                    if (input.Properties.ReplicationProviderSettings is HyperVReplicaAzurePolicyInput)
                    {
                        replicationProviderSettingsValue["instanceType"] = "HyperVReplicaAzure";
                        HyperVReplicaAzurePolicyInput derived3 = ((HyperVReplicaAzurePolicyInput)input.Properties.ReplicationProviderSettings);
                        
                        replicationProviderSettingsValue["recoveryPointHistoryDuration"] = derived3.RecoveryPointHistoryDuration;
                        
                        replicationProviderSettingsValue["applicationConsistentSnapshotFrequencyInHours"] = derived3.ApplicationConsistentSnapshotFrequencyInHours;
                        
                        replicationProviderSettingsValue["replicationInterval"] = derived3.ReplicationInterval;
                        
                        if (derived3.OnlineIrStartTime != null)
                        {
                            replicationProviderSettingsValue["onlineReplicationStartTime"] = derived3.OnlineIrStartTime.Value.ToString();
                        }
                        
                        if (derived3.StorageAccounts != null)
                        {
                            if (derived3.StorageAccounts is ILazyCollection == false || ((ILazyCollection)derived3.StorageAccounts).IsInitialized)
                            {
                                JArray storageAccountsArray = new JArray();
                                foreach (string storageAccountsItem in derived3.StorageAccounts)
                                {
                                    storageAccountsArray.Add(storageAccountsItem);
                                }
                                replicationProviderSettingsValue["storageAccounts"] = storageAccountsArray;
                            }
                        }
                        
                        if (derived3.Encryption != null)
                        {
                            replicationProviderSettingsValue["encryption"] = derived3.Encryption;
                        }
                    }
                    if (input.Properties.ReplicationProviderSettings is SanPolicyInput)
                    {
                        replicationProviderSettingsValue["instanceType"] = "San";
                        SanPolicyInput derived4 = ((SanPolicyInput)input.Properties.ReplicationProviderSettings);
                        
                        if (derived4.CloudId != null)
                        {
                            replicationProviderSettingsValue["cloudId"] = derived4.CloudId;
                        }
                        
                        if (derived4.RemoteCloudId != null)
                        {
                            replicationProviderSettingsValue["remoteCloudId"] = derived4.RemoteCloudId;
                        }
                        
                        if (derived4.ArrayUniqueId != null)
                        {
                            replicationProviderSettingsValue["arrayUniqueId"] = derived4.ArrayUniqueId;
                        }
                        
                        if (derived4.RemoteArrayUniqueId != null)
                        {
                            replicationProviderSettingsValue["remoteArrayUniqueId"] = derived4.RemoteArrayUniqueId;
                        }
                    }
                    if (input.Properties.ReplicationProviderSettings is InMageAzureV2PolicyInput)
                    {
                        replicationProviderSettingsValue["instanceType"] = "InMageAzureV2";
                        InMageAzureV2PolicyInput derived5 = ((InMageAzureV2PolicyInput)input.Properties.ReplicationProviderSettings);
                        
                        replicationProviderSettingsValue["recoveryPointThresholdInMinutes"] = derived5.RecoveryPointThresholdInMinutes;
                        
                        replicationProviderSettingsValue["recoveryPointHistory"] = derived5.RecoveryPointHistory;
                        
                        replicationProviderSettingsValue["crashConsistentFrequencyInMinutes"] = derived5.CrashConsistentFrequencyInMinutes;
                        
                        replicationProviderSettingsValue["appConsistentFrequencyInMinutes"] = derived5.AppConsistentFrequencyInMinutes;
                        
                        if (derived5.MultiVmSyncStatus != null)
                        {
                            replicationProviderSettingsValue["multiVmSyncStatus"] = derived5.MultiVmSyncStatus;
                        }
                    }
                    if (input.Properties.ReplicationProviderSettings is InMagePolicyInput)
                    {
                        replicationProviderSettingsValue["instanceType"] = "InMage";
                        InMagePolicyInput derived6 = ((InMagePolicyInput)input.Properties.ReplicationProviderSettings);
                        
                        replicationProviderSettingsValue["recoveryPointThresholdInMinutes"] = derived6.RecoveryPointThresholdInMinutes;
                        
                        replicationProviderSettingsValue["recoveryPointHistory"] = derived6.RecoveryPointHistory;
                        
                        replicationProviderSettingsValue["appConsistentFrequencyInMinutes"] = derived6.AppConsistentFrequencyInMinutes;
                        
                        if (derived6.MultiVmSyncStatus != null)
                        {
                            replicationProviderSettingsValue["multiVmSyncStatus"] = derived6.MultiVmSyncStatus;
                        }
                    }
                    if (input.Properties.ReplicationProviderSettings is A2APolicyCreationInput)
                    {
                        replicationProviderSettingsValue["instanceType"] = "A2A";
                        A2APolicyCreationInput derived7 = ((A2APolicyCreationInput)input.Properties.ReplicationProviderSettings);
                        
                        replicationProviderSettingsValue["recoveryPointThresholdInMinutes"] = derived7.RecoveryPointThresholdInMinutes;
                        
                        replicationProviderSettingsValue["recoveryPointHistory"] = derived7.RecoveryPointHistory;
                        
                        replicationProviderSettingsValue["crashConsistentFrequencyInMinutes"] = derived7.CrashConsistentFrequencyInMinutes;
                        
                        replicationProviderSettingsValue["appConsistentFrequencyInMinutes"] = derived7.AppConsistentFrequencyInMinutes;
                        
                        if (derived7.MultiVmSyncStatus != null)
                        {
                            replicationProviderSettingsValue["multiVmSyncStatus"] = derived7.MultiVmSyncStatus;
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Creates a profile
        /// </summary>
        /// <param name='policyName'>
        /// Required. Policy Name.
        /// </param>
        /// <param name='input'>
        /// Required. Input to create profile
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> CreateAsync(string policyName, CreatePolicyInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("policyName", policyName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.Policies.BeginCreatingAsync(policyName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            CreatePolicyOperationResponse result = await client.Policies.GetCreateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.Policies.GetCreateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Deletes a Policy
        /// </summary>
        /// <param name='name'>
        /// Required. Policy name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> DeleteAsync(string name, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("name", name);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.Policies.BeginDeletingAsync(name, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            DeletePolicyOperationResponse result = await client.Policies.GetDeleteStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.Policies.GetDeleteStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Get the protected Profile by Id.
        /// </summary>
        /// <param name='policyName'>
        /// Required. Policy Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the Policy object.
        /// </returns>
        public async Task<PolicyResponse> GetAsync(string policyName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (policyName == null)
            {
                throw new ArgumentNullException("policyName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("policyName", policyName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationPolicies/";
            url = url + Uri.EscapeDataString(policyName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    PolicyResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new PolicyResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Policy policyInstance = new Policy();
                            result.Policy = policyInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                PolicyProperties propertiesInstance = new PolicyProperties();
                                policyInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                    if (typeName == "HyperVReplica2012")
                                    {
                                        HyperVReplica2012PolicyDetails hyperVReplica2012PolicyDetailsInstance = new HyperVReplica2012PolicyDetails();
                                        
                                        JToken recoveryPointsValue = providerSpecificDetailsValue["recoveryPoints"];
                                        if (recoveryPointsValue != null && recoveryPointsValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointsInstance = ((int)recoveryPointsValue);
                                            hyperVReplica2012PolicyDetailsInstance.RecoveryPoints = recoveryPointsInstance;
                                        }
                                        
                                        JToken applicationConsistentSnapshotFrequencyInHoursValue = providerSpecificDetailsValue["applicationConsistentSnapshotFrequencyInHours"];
                                        if (applicationConsistentSnapshotFrequencyInHoursValue != null && applicationConsistentSnapshotFrequencyInHoursValue.Type != JTokenType.Null)
                                        {
                                            int applicationConsistentSnapshotFrequencyInHoursInstance = ((int)applicationConsistentSnapshotFrequencyInHoursValue);
                                            hyperVReplica2012PolicyDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance;
                                        }
                                        
                                        JToken compressionValue = providerSpecificDetailsValue["compression"];
                                        if (compressionValue != null && compressionValue.Type != JTokenType.Null)
                                        {
                                            string compressionInstance = ((string)compressionValue);
                                            hyperVReplica2012PolicyDetailsInstance.Compression = compressionInstance;
                                        }
                                        
                                        JToken initialReplicationMethodValue = providerSpecificDetailsValue["initialReplicationMethod"];
                                        if (initialReplicationMethodValue != null && initialReplicationMethodValue.Type != JTokenType.Null)
                                        {
                                            string initialReplicationMethodInstance = ((string)initialReplicationMethodValue);
                                            hyperVReplica2012PolicyDetailsInstance.InitialReplicationMethod = initialReplicationMethodInstance;
                                        }
                                        
                                        JToken onlineReplicationStartTimeValue = providerSpecificDetailsValue["onlineReplicationStartTime"];
                                        if (onlineReplicationStartTimeValue != null && onlineReplicationStartTimeValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan onlineReplicationStartTimeInstance = TimeSpan.Parse(((string)onlineReplicationStartTimeValue), CultureInfo.InvariantCulture);
                                            hyperVReplica2012PolicyDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance;
                                        }
                                        
                                        JToken offlineReplicationImportPathValue = providerSpecificDetailsValue["offlineReplicationImportPath"];
                                        if (offlineReplicationImportPathValue != null && offlineReplicationImportPathValue.Type != JTokenType.Null)
                                        {
                                            string offlineReplicationImportPathInstance = ((string)offlineReplicationImportPathValue);
                                            hyperVReplica2012PolicyDetailsInstance.OfflineReplicationImportPath = offlineReplicationImportPathInstance;
                                        }
                                        
                                        JToken offlineReplicationExportPathValue = providerSpecificDetailsValue["offlineReplicationExportPath"];
                                        if (offlineReplicationExportPathValue != null && offlineReplicationExportPathValue.Type != JTokenType.Null)
                                        {
                                            string offlineReplicationExportPathInstance = ((string)offlineReplicationExportPathValue);
                                            hyperVReplica2012PolicyDetailsInstance.OfflineReplicationExportPath = offlineReplicationExportPathInstance;
                                        }
                                        
                                        JToken replicationPortValue = providerSpecificDetailsValue["replicationPort"];
                                        if (replicationPortValue != null && replicationPortValue.Type != JTokenType.Null)
                                        {
                                            ushort replicationPortInstance = ((ushort)replicationPortValue);
                                            hyperVReplica2012PolicyDetailsInstance.ReplicationPort = replicationPortInstance;
                                        }
                                        
                                        JToken allowedAuthenticationTypeValue = providerSpecificDetailsValue["allowedAuthenticationType"];
                                        if (allowedAuthenticationTypeValue != null && allowedAuthenticationTypeValue.Type != JTokenType.Null)
                                        {
                                            ushort allowedAuthenticationTypeInstance = ((ushort)allowedAuthenticationTypeValue);
                                            hyperVReplica2012PolicyDetailsInstance.AllowedAuthenticationType = allowedAuthenticationTypeInstance;
                                        }
                                        
                                        JToken replicaDeletionOptionValue = providerSpecificDetailsValue["replicaDeletionOption"];
                                        if (replicaDeletionOptionValue != null && replicaDeletionOptionValue.Type != JTokenType.Null)
                                        {
                                            string replicaDeletionOptionInstance = ((string)replicaDeletionOptionValue);
                                            hyperVReplica2012PolicyDetailsInstance.ReplicaDeletionOption = replicaDeletionOptionInstance;
                                        }
                                        
                                        JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            hyperVReplica2012PolicyDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012PolicyDetailsInstance;
                                    }
                                    if (typeName == "HyperVReplica2012R2")
                                    {
                                        HyperVReplica2012R2PolicyDetails hyperVReplica2012R2PolicyDetailsInstance = new HyperVReplica2012R2PolicyDetails();
                                        
                                        JToken replicationFrequencyInSecondsValue = providerSpecificDetailsValue["replicationFrequencyInSeconds"];
                                        if (replicationFrequencyInSecondsValue != null && replicationFrequencyInSecondsValue.Type != JTokenType.Null)
                                        {
                                            ushort replicationFrequencyInSecondsInstance = ((ushort)replicationFrequencyInSecondsValue);
                                            hyperVReplica2012R2PolicyDetailsInstance.ReplicationFrequencyInSeconds = replicationFrequencyInSecondsInstance;
                                        }
                                        
                                        JToken recoveryPointsValue2 = providerSpecificDetailsValue["recoveryPoints"];
                                        if (recoveryPointsValue2 != null && recoveryPointsValue2.Type != JTokenType.Null)
                                        {
                                            int recoveryPointsInstance2 = ((int)recoveryPointsValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.RecoveryPoints = recoveryPointsInstance2;
                                        }
                                        
                                        JToken applicationConsistentSnapshotFrequencyInHoursValue2 = providerSpecificDetailsValue["applicationConsistentSnapshotFrequencyInHours"];
                                        if (applicationConsistentSnapshotFrequencyInHoursValue2 != null && applicationConsistentSnapshotFrequencyInHoursValue2.Type != JTokenType.Null)
                                        {
                                            int applicationConsistentSnapshotFrequencyInHoursInstance2 = ((int)applicationConsistentSnapshotFrequencyInHoursValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance2;
                                        }
                                        
                                        JToken compressionValue2 = providerSpecificDetailsValue["compression"];
                                        if (compressionValue2 != null && compressionValue2.Type != JTokenType.Null)
                                        {
                                            string compressionInstance2 = ((string)compressionValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.Compression = compressionInstance2;
                                        }
                                        
                                        JToken initialReplicationMethodValue2 = providerSpecificDetailsValue["initialReplicationMethod"];
                                        if (initialReplicationMethodValue2 != null && initialReplicationMethodValue2.Type != JTokenType.Null)
                                        {
                                            string initialReplicationMethodInstance2 = ((string)initialReplicationMethodValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.InitialReplicationMethod = initialReplicationMethodInstance2;
                                        }
                                        
                                        JToken onlineReplicationStartTimeValue2 = providerSpecificDetailsValue["onlineReplicationStartTime"];
                                        if (onlineReplicationStartTimeValue2 != null && onlineReplicationStartTimeValue2.Type != JTokenType.Null)
                                        {
                                            TimeSpan onlineReplicationStartTimeInstance2 = TimeSpan.Parse(((string)onlineReplicationStartTimeValue2), CultureInfo.InvariantCulture);
                                            hyperVReplica2012R2PolicyDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance2;
                                        }
                                        
                                        JToken offlineReplicationImportPathValue2 = providerSpecificDetailsValue["offlineReplicationImportPath"];
                                        if (offlineReplicationImportPathValue2 != null && offlineReplicationImportPathValue2.Type != JTokenType.Null)
                                        {
                                            string offlineReplicationImportPathInstance2 = ((string)offlineReplicationImportPathValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.OfflineReplicationImportPath = offlineReplicationImportPathInstance2;
                                        }
                                        
                                        JToken offlineReplicationExportPathValue2 = providerSpecificDetailsValue["offlineReplicationExportPath"];
                                        if (offlineReplicationExportPathValue2 != null && offlineReplicationExportPathValue2.Type != JTokenType.Null)
                                        {
                                            string offlineReplicationExportPathInstance2 = ((string)offlineReplicationExportPathValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.OfflineReplicationExportPath = offlineReplicationExportPathInstance2;
                                        }
                                        
                                        JToken replicationPortValue2 = providerSpecificDetailsValue["replicationPort"];
                                        if (replicationPortValue2 != null && replicationPortValue2.Type != JTokenType.Null)
                                        {
                                            ushort replicationPortInstance2 = ((ushort)replicationPortValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.ReplicationPort = replicationPortInstance2;
                                        }
                                        
                                        JToken allowedAuthenticationTypeValue2 = providerSpecificDetailsValue["allowedAuthenticationType"];
                                        if (allowedAuthenticationTypeValue2 != null && allowedAuthenticationTypeValue2.Type != JTokenType.Null)
                                        {
                                            ushort allowedAuthenticationTypeInstance2 = ((ushort)allowedAuthenticationTypeValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.AllowedAuthenticationType = allowedAuthenticationTypeInstance2;
                                        }
                                        
                                        JToken replicaDeletionOptionValue2 = providerSpecificDetailsValue["replicaDeletionOption"];
                                        if (replicaDeletionOptionValue2 != null && replicaDeletionOptionValue2.Type != JTokenType.Null)
                                        {
                                            string replicaDeletionOptionInstance2 = ((string)replicaDeletionOptionValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.ReplicaDeletionOption = replicaDeletionOptionInstance2;
                                        }
                                        
                                        JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012R2PolicyDetailsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzure")
                                    {
                                        HyperVReplicaAzurePolicyDetails hyperVReplicaAzurePolicyDetailsInstance = new HyperVReplicaAzurePolicyDetails();
                                        
                                        JToken recoveryPointHistoryDurationInHoursValue = providerSpecificDetailsValue["recoveryPointHistoryDurationInHours"];
                                        if (recoveryPointHistoryDurationInHoursValue != null && recoveryPointHistoryDurationInHoursValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointHistoryDurationInHoursInstance = ((int)recoveryPointHistoryDurationInHoursValue);
                                            hyperVReplicaAzurePolicyDetailsInstance.RecoveryPointHistoryDurationInHours = recoveryPointHistoryDurationInHoursInstance;
                                        }
                                        
                                        JToken applicationConsistentSnapshotFrequencyInHoursValue3 = providerSpecificDetailsValue["applicationConsistentSnapshotFrequencyInHours"];
                                        if (applicationConsistentSnapshotFrequencyInHoursValue3 != null && applicationConsistentSnapshotFrequencyInHoursValue3.Type != JTokenType.Null)
                                        {
                                            int applicationConsistentSnapshotFrequencyInHoursInstance3 = ((int)applicationConsistentSnapshotFrequencyInHoursValue3);
                                            hyperVReplicaAzurePolicyDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance3;
                                        }
                                        
                                        JToken replicationIntervalValue = providerSpecificDetailsValue["replicationInterval"];
                                        if (replicationIntervalValue != null && replicationIntervalValue.Type != JTokenType.Null)
                                        {
                                            int replicationIntervalInstance = ((int)replicationIntervalValue);
                                            hyperVReplicaAzurePolicyDetailsInstance.ReplicationInterval = replicationIntervalInstance;
                                        }
                                        
                                        JToken onlineReplicationStartTimeValue3 = providerSpecificDetailsValue["onlineReplicationStartTime"];
                                        if (onlineReplicationStartTimeValue3 != null && onlineReplicationStartTimeValue3.Type != JTokenType.Null)
                                        {
                                            TimeSpan onlineReplicationStartTimeInstance3 = TimeSpan.Parse(((string)onlineReplicationStartTimeValue3), CultureInfo.InvariantCulture);
                                            hyperVReplicaAzurePolicyDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance3;
                                        }
                                        
                                        JToken encryptionValue = providerSpecificDetailsValue["encryption"];
                                        if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                        {
                                            string encryptionInstance = ((string)encryptionValue);
                                            hyperVReplicaAzurePolicyDetailsInstance.Encryption = encryptionInstance;
                                        }
                                        
                                        JToken activeStorageAccountIdValue = providerSpecificDetailsValue["activeStorageAccountId"];
                                        if (activeStorageAccountIdValue != null && activeStorageAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string activeStorageAccountIdInstance = ((string)activeStorageAccountIdValue);
                                            hyperVReplicaAzurePolicyDetailsInstance.ActiveStorageAccountId = activeStorageAccountIdInstance;
                                        }
                                        
                                        JToken instanceTypeValue3 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                            hyperVReplicaAzurePolicyDetailsInstance.InstanceType = instanceTypeInstance3;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplicaAzurePolicyDetailsInstance;
                                    }
                                    if (typeName == "InMageAzureV2")
                                    {
                                        InMageAzureV2PolicyDetails inMageAzureV2PolicyDetailsInstance = new InMageAzureV2PolicyDetails();
                                        
                                        JToken recoveryPointThresholdInMinutesValue = providerSpecificDetailsValue["recoveryPointThresholdInMinutes"];
                                        if (recoveryPointThresholdInMinutesValue != null && recoveryPointThresholdInMinutesValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointThresholdInMinutesInstance = ((int)recoveryPointThresholdInMinutesValue);
                                            inMageAzureV2PolicyDetailsInstance.RecoveryPointThresholdInMinutes = recoveryPointThresholdInMinutesInstance;
                                        }
                                        
                                        JToken recoveryPointHistoryValue = providerSpecificDetailsValue["recoveryPointHistory"];
                                        if (recoveryPointHistoryValue != null && recoveryPointHistoryValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointHistoryInstance = ((int)recoveryPointHistoryValue);
                                            inMageAzureV2PolicyDetailsInstance.RecoveryPointHistory = recoveryPointHistoryInstance;
                                        }
                                        
                                        JToken crashConsistentFrequencyInMinutesValue = providerSpecificDetailsValue["crashConsistentFrequencyInMinutes"];
                                        if (crashConsistentFrequencyInMinutesValue != null && crashConsistentFrequencyInMinutesValue.Type != JTokenType.Null)
                                        {
                                            int crashConsistentFrequencyInMinutesInstance = ((int)crashConsistentFrequencyInMinutesValue);
                                            inMageAzureV2PolicyDetailsInstance.CrashConsistentFrequencyInMinutes = crashConsistentFrequencyInMinutesInstance;
                                        }
                                        
                                        JToken appConsistentFrequencyInMinutesValue = providerSpecificDetailsValue["appConsistentFrequencyInMinutes"];
                                        if (appConsistentFrequencyInMinutesValue != null && appConsistentFrequencyInMinutesValue.Type != JTokenType.Null)
                                        {
                                            int appConsistentFrequencyInMinutesInstance = ((int)appConsistentFrequencyInMinutesValue);
                                            inMageAzureV2PolicyDetailsInstance.AppConsistentFrequencyInMinutes = appConsistentFrequencyInMinutesInstance;
                                        }
                                        
                                        JToken multiVmSyncStatusValue = providerSpecificDetailsValue["multiVmSyncStatus"];
                                        if (multiVmSyncStatusValue != null && multiVmSyncStatusValue.Type != JTokenType.Null)
                                        {
                                            string multiVmSyncStatusInstance = ((string)multiVmSyncStatusValue);
                                            inMageAzureV2PolicyDetailsInstance.MultiVmSyncStatus = multiVmSyncStatusInstance;
                                        }
                                        
                                        JToken instanceTypeValue4 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                            inMageAzureV2PolicyDetailsInstance.InstanceType = instanceTypeInstance4;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = inMageAzureV2PolicyDetailsInstance;
                                    }
                                    if (typeName == "InMage")
                                    {
                                        InMagePolicyDetails inMagePolicyDetailsInstance = new InMagePolicyDetails();
                                        
                                        JToken recoveryPointThresholdInMinutesValue2 = providerSpecificDetailsValue["recoveryPointThresholdInMinutes"];
                                        if (recoveryPointThresholdInMinutesValue2 != null && recoveryPointThresholdInMinutesValue2.Type != JTokenType.Null)
                                        {
                                            int recoveryPointThresholdInMinutesInstance2 = ((int)recoveryPointThresholdInMinutesValue2);
                                            inMagePolicyDetailsInstance.RecoveryPointThresholdInMinutes = recoveryPointThresholdInMinutesInstance2;
                                        }
                                        
                                        JToken recoveryPointHistoryValue2 = providerSpecificDetailsValue["recoveryPointHistory"];
                                        if (recoveryPointHistoryValue2 != null && recoveryPointHistoryValue2.Type != JTokenType.Null)
                                        {
                                            int recoveryPointHistoryInstance2 = ((int)recoveryPointHistoryValue2);
                                            inMagePolicyDetailsInstance.RecoveryPointHistory = recoveryPointHistoryInstance2;
                                        }
                                        
                                        JToken appConsistentFrequencyInMinutesValue2 = providerSpecificDetailsValue["appConsistentFrequencyInMinutes"];
                                        if (appConsistentFrequencyInMinutesValue2 != null && appConsistentFrequencyInMinutesValue2.Type != JTokenType.Null)
                                        {
                                            int appConsistentFrequencyInMinutesInstance2 = ((int)appConsistentFrequencyInMinutesValue2);
                                            inMagePolicyDetailsInstance.AppConsistentFrequencyInMinutes = appConsistentFrequencyInMinutesInstance2;
                                        }
                                        
                                        JToken multiVmSyncStatusValue2 = providerSpecificDetailsValue["multiVmSyncStatus"];
                                        if (multiVmSyncStatusValue2 != null && multiVmSyncStatusValue2.Type != JTokenType.Null)
                                        {
                                            string multiVmSyncStatusInstance2 = ((string)multiVmSyncStatusValue2);
                                            inMagePolicyDetailsInstance.MultiVmSyncStatus = multiVmSyncStatusInstance2;
                                        }
                                        
                                        JToken instanceTypeValue5 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue5 != null && instanceTypeValue5.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance5 = ((string)instanceTypeValue5);
                                            inMagePolicyDetailsInstance.InstanceType = instanceTypeInstance5;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = inMagePolicyDetailsInstance;
                                    }
                                    if (typeName == "A2A")
                                    {
                                        A2APolicyDetails a2APolicyDetailsInstance = new A2APolicyDetails();
                                        
                                        JToken recoveryPointThresholdInMinutesValue3 = providerSpecificDetailsValue["recoveryPointThresholdInMinutes"];
                                        if (recoveryPointThresholdInMinutesValue3 != null && recoveryPointThresholdInMinutesValue3.Type != JTokenType.Null)
                                        {
                                            int recoveryPointThresholdInMinutesInstance3 = ((int)recoveryPointThresholdInMinutesValue3);
                                            a2APolicyDetailsInstance.RecoveryPointThresholdInMinutes = recoveryPointThresholdInMinutesInstance3;
                                        }
                                        
                                        JToken recoveryPointHistoryValue3 = providerSpecificDetailsValue["recoveryPointHistory"];
                                        if (recoveryPointHistoryValue3 != null && recoveryPointHistoryValue3.Type != JTokenType.Null)
                                        {
                                            int recoveryPointHistoryInstance3 = ((int)recoveryPointHistoryValue3);
                                            a2APolicyDetailsInstance.RecoveryPointHistory = recoveryPointHistoryInstance3;
                                        }
                                        
                                        JToken crashConsistentFrequencyInMinutesValue2 = providerSpecificDetailsValue["crashConsistentFrequencyInMinutes"];
                                        if (crashConsistentFrequencyInMinutesValue2 != null && crashConsistentFrequencyInMinutesValue2.Type != JTokenType.Null)
                                        {
                                            int crashConsistentFrequencyInMinutesInstance2 = ((int)crashConsistentFrequencyInMinutesValue2);
                                            a2APolicyDetailsInstance.CrashConsistentFrequencyInMinutes = crashConsistentFrequencyInMinutesInstance2;
                                        }
                                        
                                        JToken appConsistentFrequencyInMinutesValue3 = providerSpecificDetailsValue["appConsistentFrequencyInMinutes"];
                                        if (appConsistentFrequencyInMinutesValue3 != null && appConsistentFrequencyInMinutesValue3.Type != JTokenType.Null)
                                        {
                                            int appConsistentFrequencyInMinutesInstance3 = ((int)appConsistentFrequencyInMinutesValue3);
                                            a2APolicyDetailsInstance.AppConsistentFrequencyInMinutes = appConsistentFrequencyInMinutesInstance3;
                                        }
                                        
                                        JToken multiVmSyncStatusValue3 = providerSpecificDetailsValue["multiVmSyncStatus"];
                                        if (multiVmSyncStatusValue3 != null && multiVmSyncStatusValue3.Type != JTokenType.Null)
                                        {
                                            string multiVmSyncStatusInstance3 = ((string)multiVmSyncStatusValue3);
                                            a2APolicyDetailsInstance.MultiVmSyncStatus = multiVmSyncStatusInstance3;
                                        }
                                        
                                        JToken instanceTypeValue6 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue6 != null && instanceTypeValue6.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance6 = ((string)instanceTypeValue6);
                                            a2APolicyDetailsInstance.InstanceType = instanceTypeInstance6;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = a2APolicyDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                policyInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                policyInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                policyInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                policyInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    policyInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<CreatePolicyOperationResponse> GetCreateStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetCreateStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CreatePolicyOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CreatePolicyOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Policy policyInstance = new Policy();
                            result.Policy = policyInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                PolicyProperties propertiesInstance = new PolicyProperties();
                                policyInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                    if (typeName == "HyperVReplica2012")
                                    {
                                        HyperVReplica2012PolicyDetails hyperVReplica2012PolicyDetailsInstance = new HyperVReplica2012PolicyDetails();
                                        
                                        JToken recoveryPointsValue = providerSpecificDetailsValue["recoveryPoints"];
                                        if (recoveryPointsValue != null && recoveryPointsValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointsInstance = ((int)recoveryPointsValue);
                                            hyperVReplica2012PolicyDetailsInstance.RecoveryPoints = recoveryPointsInstance;
                                        }
                                        
                                        JToken applicationConsistentSnapshotFrequencyInHoursValue = providerSpecificDetailsValue["applicationConsistentSnapshotFrequencyInHours"];
                                        if (applicationConsistentSnapshotFrequencyInHoursValue != null && applicationConsistentSnapshotFrequencyInHoursValue.Type != JTokenType.Null)
                                        {
                                            int applicationConsistentSnapshotFrequencyInHoursInstance = ((int)applicationConsistentSnapshotFrequencyInHoursValue);
                                            hyperVReplica2012PolicyDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance;
                                        }
                                        
                                        JToken compressionValue = providerSpecificDetailsValue["compression"];
                                        if (compressionValue != null && compressionValue.Type != JTokenType.Null)
                                        {
                                            string compressionInstance = ((string)compressionValue);
                                            hyperVReplica2012PolicyDetailsInstance.Compression = compressionInstance;
                                        }
                                        
                                        JToken initialReplicationMethodValue = providerSpecificDetailsValue["initialReplicationMethod"];
                                        if (initialReplicationMethodValue != null && initialReplicationMethodValue.Type != JTokenType.Null)
                                        {
                                            string initialReplicationMethodInstance = ((string)initialReplicationMethodValue);
                                            hyperVReplica2012PolicyDetailsInstance.InitialReplicationMethod = initialReplicationMethodInstance;
                                        }
                                        
                                        JToken onlineReplicationStartTimeValue = providerSpecificDetailsValue["onlineReplicationStartTime"];
                                        if (onlineReplicationStartTimeValue != null && onlineReplicationStartTimeValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan onlineReplicationStartTimeInstance = TimeSpan.Parse(((string)onlineReplicationStartTimeValue), CultureInfo.InvariantCulture);
                                            hyperVReplica2012PolicyDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance;
                                        }
                                        
                                        JToken offlineReplicationImportPathValue = providerSpecificDetailsValue["offlineReplicationImportPath"];
                                        if (offlineReplicationImportPathValue != null && offlineReplicationImportPathValue.Type != JTokenType.Null)
                                        {
                                            string offlineReplicationImportPathInstance = ((string)offlineReplicationImportPathValue);
                                            hyperVReplica2012PolicyDetailsInstance.OfflineReplicationImportPath = offlineReplicationImportPathInstance;
                                        }
                                        
                                        JToken offlineReplicationExportPathValue = providerSpecificDetailsValue["offlineReplicationExportPath"];
                                        if (offlineReplicationExportPathValue != null && offlineReplicationExportPathValue.Type != JTokenType.Null)
                                        {
                                            string offlineReplicationExportPathInstance = ((string)offlineReplicationExportPathValue);
                                            hyperVReplica2012PolicyDetailsInstance.OfflineReplicationExportPath = offlineReplicationExportPathInstance;
                                        }
                                        
                                        JToken replicationPortValue = providerSpecificDetailsValue["replicationPort"];
                                        if (replicationPortValue != null && replicationPortValue.Type != JTokenType.Null)
                                        {
                                            ushort replicationPortInstance = ((ushort)replicationPortValue);
                                            hyperVReplica2012PolicyDetailsInstance.ReplicationPort = replicationPortInstance;
                                        }
                                        
                                        JToken allowedAuthenticationTypeValue = providerSpecificDetailsValue["allowedAuthenticationType"];
                                        if (allowedAuthenticationTypeValue != null && allowedAuthenticationTypeValue.Type != JTokenType.Null)
                                        {
                                            ushort allowedAuthenticationTypeInstance = ((ushort)allowedAuthenticationTypeValue);
                                            hyperVReplica2012PolicyDetailsInstance.AllowedAuthenticationType = allowedAuthenticationTypeInstance;
                                        }
                                        
                                        JToken replicaDeletionOptionValue = providerSpecificDetailsValue["replicaDeletionOption"];
                                        if (replicaDeletionOptionValue != null && replicaDeletionOptionValue.Type != JTokenType.Null)
                                        {
                                            string replicaDeletionOptionInstance = ((string)replicaDeletionOptionValue);
                                            hyperVReplica2012PolicyDetailsInstance.ReplicaDeletionOption = replicaDeletionOptionInstance;
                                        }
                                        
                                        JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            hyperVReplica2012PolicyDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012PolicyDetailsInstance;
                                    }
                                    if (typeName == "HyperVReplica2012R2")
                                    {
                                        HyperVReplica2012R2PolicyDetails hyperVReplica2012R2PolicyDetailsInstance = new HyperVReplica2012R2PolicyDetails();
                                        
                                        JToken replicationFrequencyInSecondsValue = providerSpecificDetailsValue["replicationFrequencyInSeconds"];
                                        if (replicationFrequencyInSecondsValue != null && replicationFrequencyInSecondsValue.Type != JTokenType.Null)
                                        {
                                            ushort replicationFrequencyInSecondsInstance = ((ushort)replicationFrequencyInSecondsValue);
                                            hyperVReplica2012R2PolicyDetailsInstance.ReplicationFrequencyInSeconds = replicationFrequencyInSecondsInstance;
                                        }
                                        
                                        JToken recoveryPointsValue2 = providerSpecificDetailsValue["recoveryPoints"];
                                        if (recoveryPointsValue2 != null && recoveryPointsValue2.Type != JTokenType.Null)
                                        {
                                            int recoveryPointsInstance2 = ((int)recoveryPointsValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.RecoveryPoints = recoveryPointsInstance2;
                                        }
                                        
                                        JToken applicationConsistentSnapshotFrequencyInHoursValue2 = providerSpecificDetailsValue["applicationConsistentSnapshotFrequencyInHours"];
                                        if (applicationConsistentSnapshotFrequencyInHoursValue2 != null && applicationConsistentSnapshotFrequencyInHoursValue2.Type != JTokenType.Null)
                                        {
                                            int applicationConsistentSnapshotFrequencyInHoursInstance2 = ((int)applicationConsistentSnapshotFrequencyInHoursValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance2;
                                        }
                                        
                                        JToken compressionValue2 = providerSpecificDetailsValue["compression"];
                                        if (compressionValue2 != null && compressionValue2.Type != JTokenType.Null)
                                        {
                                            string compressionInstance2 = ((string)compressionValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.Compression = compressionInstance2;
                                        }
                                        
                                        JToken initialReplicationMethodValue2 = providerSpecificDetailsValue["initialReplicationMethod"];
                                        if (initialReplicationMethodValue2 != null && initialReplicationMethodValue2.Type != JTokenType.Null)
                                        {
                                            string initialReplicationMethodInstance2 = ((string)initialReplicationMethodValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.InitialReplicationMethod = initialReplicationMethodInstance2;
                                        }
                                        
                                        JToken onlineReplicationStartTimeValue2 = providerSpecificDetailsValue["onlineReplicationStartTime"];
                                        if (onlineReplicationStartTimeValue2 != null && onlineReplicationStartTimeValue2.Type != JTokenType.Null)
                                        {
                                            TimeSpan onlineReplicationStartTimeInstance2 = TimeSpan.Parse(((string)onlineReplicationStartTimeValue2), CultureInfo.InvariantCulture);
                                            hyperVReplica2012R2PolicyDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance2;
                                        }
                                        
                                        JToken offlineReplicationImportPathValue2 = providerSpecificDetailsValue["offlineReplicationImportPath"];
                                        if (offlineReplicationImportPathValue2 != null && offlineReplicationImportPathValue2.Type != JTokenType.Null)
                                        {
                                            string offlineReplicationImportPathInstance2 = ((string)offlineReplicationImportPathValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.OfflineReplicationImportPath = offlineReplicationImportPathInstance2;
                                        }
                                        
                                        JToken offlineReplicationExportPathValue2 = providerSpecificDetailsValue["offlineReplicationExportPath"];
                                        if (offlineReplicationExportPathValue2 != null && offlineReplicationExportPathValue2.Type != JTokenType.Null)
                                        {
                                            string offlineReplicationExportPathInstance2 = ((string)offlineReplicationExportPathValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.OfflineReplicationExportPath = offlineReplicationExportPathInstance2;
                                        }
                                        
                                        JToken replicationPortValue2 = providerSpecificDetailsValue["replicationPort"];
                                        if (replicationPortValue2 != null && replicationPortValue2.Type != JTokenType.Null)
                                        {
                                            ushort replicationPortInstance2 = ((ushort)replicationPortValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.ReplicationPort = replicationPortInstance2;
                                        }
                                        
                                        JToken allowedAuthenticationTypeValue2 = providerSpecificDetailsValue["allowedAuthenticationType"];
                                        if (allowedAuthenticationTypeValue2 != null && allowedAuthenticationTypeValue2.Type != JTokenType.Null)
                                        {
                                            ushort allowedAuthenticationTypeInstance2 = ((ushort)allowedAuthenticationTypeValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.AllowedAuthenticationType = allowedAuthenticationTypeInstance2;
                                        }
                                        
                                        JToken replicaDeletionOptionValue2 = providerSpecificDetailsValue["replicaDeletionOption"];
                                        if (replicaDeletionOptionValue2 != null && replicaDeletionOptionValue2.Type != JTokenType.Null)
                                        {
                                            string replicaDeletionOptionInstance2 = ((string)replicaDeletionOptionValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.ReplicaDeletionOption = replicaDeletionOptionInstance2;
                                        }
                                        
                                        JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012R2PolicyDetailsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzure")
                                    {
                                        HyperVReplicaAzurePolicyDetails hyperVReplicaAzurePolicyDetailsInstance = new HyperVReplicaAzurePolicyDetails();
                                        
                                        JToken recoveryPointHistoryDurationInHoursValue = providerSpecificDetailsValue["recoveryPointHistoryDurationInHours"];
                                        if (recoveryPointHistoryDurationInHoursValue != null && recoveryPointHistoryDurationInHoursValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointHistoryDurationInHoursInstance = ((int)recoveryPointHistoryDurationInHoursValue);
                                            hyperVReplicaAzurePolicyDetailsInstance.RecoveryPointHistoryDurationInHours = recoveryPointHistoryDurationInHoursInstance;
                                        }
                                        
                                        JToken applicationConsistentSnapshotFrequencyInHoursValue3 = providerSpecificDetailsValue["applicationConsistentSnapshotFrequencyInHours"];
                                        if (applicationConsistentSnapshotFrequencyInHoursValue3 != null && applicationConsistentSnapshotFrequencyInHoursValue3.Type != JTokenType.Null)
                                        {
                                            int applicationConsistentSnapshotFrequencyInHoursInstance3 = ((int)applicationConsistentSnapshotFrequencyInHoursValue3);
                                            hyperVReplicaAzurePolicyDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance3;
                                        }
                                        
                                        JToken replicationIntervalValue = providerSpecificDetailsValue["replicationInterval"];
                                        if (replicationIntervalValue != null && replicationIntervalValue.Type != JTokenType.Null)
                                        {
                                            int replicationIntervalInstance = ((int)replicationIntervalValue);
                                            hyperVReplicaAzurePolicyDetailsInstance.ReplicationInterval = replicationIntervalInstance;
                                        }
                                        
                                        JToken onlineReplicationStartTimeValue3 = providerSpecificDetailsValue["onlineReplicationStartTime"];
                                        if (onlineReplicationStartTimeValue3 != null && onlineReplicationStartTimeValue3.Type != JTokenType.Null)
                                        {
                                            TimeSpan onlineReplicationStartTimeInstance3 = TimeSpan.Parse(((string)onlineReplicationStartTimeValue3), CultureInfo.InvariantCulture);
                                            hyperVReplicaAzurePolicyDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance3;
                                        }
                                        
                                        JToken encryptionValue = providerSpecificDetailsValue["encryption"];
                                        if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                        {
                                            string encryptionInstance = ((string)encryptionValue);
                                            hyperVReplicaAzurePolicyDetailsInstance.Encryption = encryptionInstance;
                                        }
                                        
                                        JToken activeStorageAccountIdValue = providerSpecificDetailsValue["activeStorageAccountId"];
                                        if (activeStorageAccountIdValue != null && activeStorageAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string activeStorageAccountIdInstance = ((string)activeStorageAccountIdValue);
                                            hyperVReplicaAzurePolicyDetailsInstance.ActiveStorageAccountId = activeStorageAccountIdInstance;
                                        }
                                        
                                        JToken instanceTypeValue3 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                            hyperVReplicaAzurePolicyDetailsInstance.InstanceType = instanceTypeInstance3;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplicaAzurePolicyDetailsInstance;
                                    }
                                    if (typeName == "InMageAzureV2")
                                    {
                                        InMageAzureV2PolicyDetails inMageAzureV2PolicyDetailsInstance = new InMageAzureV2PolicyDetails();
                                        
                                        JToken recoveryPointThresholdInMinutesValue = providerSpecificDetailsValue["recoveryPointThresholdInMinutes"];
                                        if (recoveryPointThresholdInMinutesValue != null && recoveryPointThresholdInMinutesValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointThresholdInMinutesInstance = ((int)recoveryPointThresholdInMinutesValue);
                                            inMageAzureV2PolicyDetailsInstance.RecoveryPointThresholdInMinutes = recoveryPointThresholdInMinutesInstance;
                                        }
                                        
                                        JToken recoveryPointHistoryValue = providerSpecificDetailsValue["recoveryPointHistory"];
                                        if (recoveryPointHistoryValue != null && recoveryPointHistoryValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointHistoryInstance = ((int)recoveryPointHistoryValue);
                                            inMageAzureV2PolicyDetailsInstance.RecoveryPointHistory = recoveryPointHistoryInstance;
                                        }
                                        
                                        JToken crashConsistentFrequencyInMinutesValue = providerSpecificDetailsValue["crashConsistentFrequencyInMinutes"];
                                        if (crashConsistentFrequencyInMinutesValue != null && crashConsistentFrequencyInMinutesValue.Type != JTokenType.Null)
                                        {
                                            int crashConsistentFrequencyInMinutesInstance = ((int)crashConsistentFrequencyInMinutesValue);
                                            inMageAzureV2PolicyDetailsInstance.CrashConsistentFrequencyInMinutes = crashConsistentFrequencyInMinutesInstance;
                                        }
                                        
                                        JToken appConsistentFrequencyInMinutesValue = providerSpecificDetailsValue["appConsistentFrequencyInMinutes"];
                                        if (appConsistentFrequencyInMinutesValue != null && appConsistentFrequencyInMinutesValue.Type != JTokenType.Null)
                                        {
                                            int appConsistentFrequencyInMinutesInstance = ((int)appConsistentFrequencyInMinutesValue);
                                            inMageAzureV2PolicyDetailsInstance.AppConsistentFrequencyInMinutes = appConsistentFrequencyInMinutesInstance;
                                        }
                                        
                                        JToken multiVmSyncStatusValue = providerSpecificDetailsValue["multiVmSyncStatus"];
                                        if (multiVmSyncStatusValue != null && multiVmSyncStatusValue.Type != JTokenType.Null)
                                        {
                                            string multiVmSyncStatusInstance = ((string)multiVmSyncStatusValue);
                                            inMageAzureV2PolicyDetailsInstance.MultiVmSyncStatus = multiVmSyncStatusInstance;
                                        }
                                        
                                        JToken instanceTypeValue4 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                            inMageAzureV2PolicyDetailsInstance.InstanceType = instanceTypeInstance4;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = inMageAzureV2PolicyDetailsInstance;
                                    }
                                    if (typeName == "InMage")
                                    {
                                        InMagePolicyDetails inMagePolicyDetailsInstance = new InMagePolicyDetails();
                                        
                                        JToken recoveryPointThresholdInMinutesValue2 = providerSpecificDetailsValue["recoveryPointThresholdInMinutes"];
                                        if (recoveryPointThresholdInMinutesValue2 != null && recoveryPointThresholdInMinutesValue2.Type != JTokenType.Null)
                                        {
                                            int recoveryPointThresholdInMinutesInstance2 = ((int)recoveryPointThresholdInMinutesValue2);
                                            inMagePolicyDetailsInstance.RecoveryPointThresholdInMinutes = recoveryPointThresholdInMinutesInstance2;
                                        }
                                        
                                        JToken recoveryPointHistoryValue2 = providerSpecificDetailsValue["recoveryPointHistory"];
                                        if (recoveryPointHistoryValue2 != null && recoveryPointHistoryValue2.Type != JTokenType.Null)
                                        {
                                            int recoveryPointHistoryInstance2 = ((int)recoveryPointHistoryValue2);
                                            inMagePolicyDetailsInstance.RecoveryPointHistory = recoveryPointHistoryInstance2;
                                        }
                                        
                                        JToken appConsistentFrequencyInMinutesValue2 = providerSpecificDetailsValue["appConsistentFrequencyInMinutes"];
                                        if (appConsistentFrequencyInMinutesValue2 != null && appConsistentFrequencyInMinutesValue2.Type != JTokenType.Null)
                                        {
                                            int appConsistentFrequencyInMinutesInstance2 = ((int)appConsistentFrequencyInMinutesValue2);
                                            inMagePolicyDetailsInstance.AppConsistentFrequencyInMinutes = appConsistentFrequencyInMinutesInstance2;
                                        }
                                        
                                        JToken multiVmSyncStatusValue2 = providerSpecificDetailsValue["multiVmSyncStatus"];
                                        if (multiVmSyncStatusValue2 != null && multiVmSyncStatusValue2.Type != JTokenType.Null)
                                        {
                                            string multiVmSyncStatusInstance2 = ((string)multiVmSyncStatusValue2);
                                            inMagePolicyDetailsInstance.MultiVmSyncStatus = multiVmSyncStatusInstance2;
                                        }
                                        
                                        JToken instanceTypeValue5 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue5 != null && instanceTypeValue5.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance5 = ((string)instanceTypeValue5);
                                            inMagePolicyDetailsInstance.InstanceType = instanceTypeInstance5;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = inMagePolicyDetailsInstance;
                                    }
                                    if (typeName == "A2A")
                                    {
                                        A2APolicyDetails a2APolicyDetailsInstance = new A2APolicyDetails();
                                        
                                        JToken recoveryPointThresholdInMinutesValue3 = providerSpecificDetailsValue["recoveryPointThresholdInMinutes"];
                                        if (recoveryPointThresholdInMinutesValue3 != null && recoveryPointThresholdInMinutesValue3.Type != JTokenType.Null)
                                        {
                                            int recoveryPointThresholdInMinutesInstance3 = ((int)recoveryPointThresholdInMinutesValue3);
                                            a2APolicyDetailsInstance.RecoveryPointThresholdInMinutes = recoveryPointThresholdInMinutesInstance3;
                                        }
                                        
                                        JToken recoveryPointHistoryValue3 = providerSpecificDetailsValue["recoveryPointHistory"];
                                        if (recoveryPointHistoryValue3 != null && recoveryPointHistoryValue3.Type != JTokenType.Null)
                                        {
                                            int recoveryPointHistoryInstance3 = ((int)recoveryPointHistoryValue3);
                                            a2APolicyDetailsInstance.RecoveryPointHistory = recoveryPointHistoryInstance3;
                                        }
                                        
                                        JToken crashConsistentFrequencyInMinutesValue2 = providerSpecificDetailsValue["crashConsistentFrequencyInMinutes"];
                                        if (crashConsistentFrequencyInMinutesValue2 != null && crashConsistentFrequencyInMinutesValue2.Type != JTokenType.Null)
                                        {
                                            int crashConsistentFrequencyInMinutesInstance2 = ((int)crashConsistentFrequencyInMinutesValue2);
                                            a2APolicyDetailsInstance.CrashConsistentFrequencyInMinutes = crashConsistentFrequencyInMinutesInstance2;
                                        }
                                        
                                        JToken appConsistentFrequencyInMinutesValue3 = providerSpecificDetailsValue["appConsistentFrequencyInMinutes"];
                                        if (appConsistentFrequencyInMinutesValue3 != null && appConsistentFrequencyInMinutesValue3.Type != JTokenType.Null)
                                        {
                                            int appConsistentFrequencyInMinutesInstance3 = ((int)appConsistentFrequencyInMinutesValue3);
                                            a2APolicyDetailsInstance.AppConsistentFrequencyInMinutes = appConsistentFrequencyInMinutesInstance3;
                                        }
                                        
                                        JToken multiVmSyncStatusValue3 = providerSpecificDetailsValue["multiVmSyncStatus"];
                                        if (multiVmSyncStatusValue3 != null && multiVmSyncStatusValue3.Type != JTokenType.Null)
                                        {
                                            string multiVmSyncStatusInstance3 = ((string)multiVmSyncStatusValue3);
                                            a2APolicyDetailsInstance.MultiVmSyncStatus = multiVmSyncStatusInstance3;
                                        }
                                        
                                        JToken instanceTypeValue6 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue6 != null && instanceTypeValue6.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance6 = ((string)instanceTypeValue6);
                                            a2APolicyDetailsInstance.InstanceType = instanceTypeInstance6;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = a2APolicyDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                policyInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                policyInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                policyInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                policyInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    policyInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<DeletePolicyOperationResponse> GetDeleteStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetDeleteStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DeletePolicyOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DeletePolicyOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken locationValue = responseDoc["Location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                result.Location = locationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<UpdatePolicyOperationResponse> GetUpdateStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetUpdateStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    UpdatePolicyOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new UpdatePolicyOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Policy policyInstance = new Policy();
                            result.Policy = policyInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                PolicyProperties propertiesInstance = new PolicyProperties();
                                policyInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                    if (typeName == "HyperVReplica2012")
                                    {
                                        HyperVReplica2012PolicyDetails hyperVReplica2012PolicyDetailsInstance = new HyperVReplica2012PolicyDetails();
                                        
                                        JToken recoveryPointsValue = providerSpecificDetailsValue["recoveryPoints"];
                                        if (recoveryPointsValue != null && recoveryPointsValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointsInstance = ((int)recoveryPointsValue);
                                            hyperVReplica2012PolicyDetailsInstance.RecoveryPoints = recoveryPointsInstance;
                                        }
                                        
                                        JToken applicationConsistentSnapshotFrequencyInHoursValue = providerSpecificDetailsValue["applicationConsistentSnapshotFrequencyInHours"];
                                        if (applicationConsistentSnapshotFrequencyInHoursValue != null && applicationConsistentSnapshotFrequencyInHoursValue.Type != JTokenType.Null)
                                        {
                                            int applicationConsistentSnapshotFrequencyInHoursInstance = ((int)applicationConsistentSnapshotFrequencyInHoursValue);
                                            hyperVReplica2012PolicyDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance;
                                        }
                                        
                                        JToken compressionValue = providerSpecificDetailsValue["compression"];
                                        if (compressionValue != null && compressionValue.Type != JTokenType.Null)
                                        {
                                            string compressionInstance = ((string)compressionValue);
                                            hyperVReplica2012PolicyDetailsInstance.Compression = compressionInstance;
                                        }
                                        
                                        JToken initialReplicationMethodValue = providerSpecificDetailsValue["initialReplicationMethod"];
                                        if (initialReplicationMethodValue != null && initialReplicationMethodValue.Type != JTokenType.Null)
                                        {
                                            string initialReplicationMethodInstance = ((string)initialReplicationMethodValue);
                                            hyperVReplica2012PolicyDetailsInstance.InitialReplicationMethod = initialReplicationMethodInstance;
                                        }
                                        
                                        JToken onlineReplicationStartTimeValue = providerSpecificDetailsValue["onlineReplicationStartTime"];
                                        if (onlineReplicationStartTimeValue != null && onlineReplicationStartTimeValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan onlineReplicationStartTimeInstance = TimeSpan.Parse(((string)onlineReplicationStartTimeValue), CultureInfo.InvariantCulture);
                                            hyperVReplica2012PolicyDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance;
                                        }
                                        
                                        JToken offlineReplicationImportPathValue = providerSpecificDetailsValue["offlineReplicationImportPath"];
                                        if (offlineReplicationImportPathValue != null && offlineReplicationImportPathValue.Type != JTokenType.Null)
                                        {
                                            string offlineReplicationImportPathInstance = ((string)offlineReplicationImportPathValue);
                                            hyperVReplica2012PolicyDetailsInstance.OfflineReplicationImportPath = offlineReplicationImportPathInstance;
                                        }
                                        
                                        JToken offlineReplicationExportPathValue = providerSpecificDetailsValue["offlineReplicationExportPath"];
                                        if (offlineReplicationExportPathValue != null && offlineReplicationExportPathValue.Type != JTokenType.Null)
                                        {
                                            string offlineReplicationExportPathInstance = ((string)offlineReplicationExportPathValue);
                                            hyperVReplica2012PolicyDetailsInstance.OfflineReplicationExportPath = offlineReplicationExportPathInstance;
                                        }
                                        
                                        JToken replicationPortValue = providerSpecificDetailsValue["replicationPort"];
                                        if (replicationPortValue != null && replicationPortValue.Type != JTokenType.Null)
                                        {
                                            ushort replicationPortInstance = ((ushort)replicationPortValue);
                                            hyperVReplica2012PolicyDetailsInstance.ReplicationPort = replicationPortInstance;
                                        }
                                        
                                        JToken allowedAuthenticationTypeValue = providerSpecificDetailsValue["allowedAuthenticationType"];
                                        if (allowedAuthenticationTypeValue != null && allowedAuthenticationTypeValue.Type != JTokenType.Null)
                                        {
                                            ushort allowedAuthenticationTypeInstance = ((ushort)allowedAuthenticationTypeValue);
                                            hyperVReplica2012PolicyDetailsInstance.AllowedAuthenticationType = allowedAuthenticationTypeInstance;
                                        }
                                        
                                        JToken replicaDeletionOptionValue = providerSpecificDetailsValue["replicaDeletionOption"];
                                        if (replicaDeletionOptionValue != null && replicaDeletionOptionValue.Type != JTokenType.Null)
                                        {
                                            string replicaDeletionOptionInstance = ((string)replicaDeletionOptionValue);
                                            hyperVReplica2012PolicyDetailsInstance.ReplicaDeletionOption = replicaDeletionOptionInstance;
                                        }
                                        
                                        JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            hyperVReplica2012PolicyDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012PolicyDetailsInstance;
                                    }
                                    if (typeName == "HyperVReplica2012R2")
                                    {
                                        HyperVReplica2012R2PolicyDetails hyperVReplica2012R2PolicyDetailsInstance = new HyperVReplica2012R2PolicyDetails();
                                        
                                        JToken replicationFrequencyInSecondsValue = providerSpecificDetailsValue["replicationFrequencyInSeconds"];
                                        if (replicationFrequencyInSecondsValue != null && replicationFrequencyInSecondsValue.Type != JTokenType.Null)
                                        {
                                            ushort replicationFrequencyInSecondsInstance = ((ushort)replicationFrequencyInSecondsValue);
                                            hyperVReplica2012R2PolicyDetailsInstance.ReplicationFrequencyInSeconds = replicationFrequencyInSecondsInstance;
                                        }
                                        
                                        JToken recoveryPointsValue2 = providerSpecificDetailsValue["recoveryPoints"];
                                        if (recoveryPointsValue2 != null && recoveryPointsValue2.Type != JTokenType.Null)
                                        {
                                            int recoveryPointsInstance2 = ((int)recoveryPointsValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.RecoveryPoints = recoveryPointsInstance2;
                                        }
                                        
                                        JToken applicationConsistentSnapshotFrequencyInHoursValue2 = providerSpecificDetailsValue["applicationConsistentSnapshotFrequencyInHours"];
                                        if (applicationConsistentSnapshotFrequencyInHoursValue2 != null && applicationConsistentSnapshotFrequencyInHoursValue2.Type != JTokenType.Null)
                                        {
                                            int applicationConsistentSnapshotFrequencyInHoursInstance2 = ((int)applicationConsistentSnapshotFrequencyInHoursValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance2;
                                        }
                                        
                                        JToken compressionValue2 = providerSpecificDetailsValue["compression"];
                                        if (compressionValue2 != null && compressionValue2.Type != JTokenType.Null)
                                        {
                                            string compressionInstance2 = ((string)compressionValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.Compression = compressionInstance2;
                                        }
                                        
                                        JToken initialReplicationMethodValue2 = providerSpecificDetailsValue["initialReplicationMethod"];
                                        if (initialReplicationMethodValue2 != null && initialReplicationMethodValue2.Type != JTokenType.Null)
                                        {
                                            string initialReplicationMethodInstance2 = ((string)initialReplicationMethodValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.InitialReplicationMethod = initialReplicationMethodInstance2;
                                        }
                                        
                                        JToken onlineReplicationStartTimeValue2 = providerSpecificDetailsValue["onlineReplicationStartTime"];
                                        if (onlineReplicationStartTimeValue2 != null && onlineReplicationStartTimeValue2.Type != JTokenType.Null)
                                        {
                                            TimeSpan onlineReplicationStartTimeInstance2 = TimeSpan.Parse(((string)onlineReplicationStartTimeValue2), CultureInfo.InvariantCulture);
                                            hyperVReplica2012R2PolicyDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance2;
                                        }
                                        
                                        JToken offlineReplicationImportPathValue2 = providerSpecificDetailsValue["offlineReplicationImportPath"];
                                        if (offlineReplicationImportPathValue2 != null && offlineReplicationImportPathValue2.Type != JTokenType.Null)
                                        {
                                            string offlineReplicationImportPathInstance2 = ((string)offlineReplicationImportPathValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.OfflineReplicationImportPath = offlineReplicationImportPathInstance2;
                                        }
                                        
                                        JToken offlineReplicationExportPathValue2 = providerSpecificDetailsValue["offlineReplicationExportPath"];
                                        if (offlineReplicationExportPathValue2 != null && offlineReplicationExportPathValue2.Type != JTokenType.Null)
                                        {
                                            string offlineReplicationExportPathInstance2 = ((string)offlineReplicationExportPathValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.OfflineReplicationExportPath = offlineReplicationExportPathInstance2;
                                        }
                                        
                                        JToken replicationPortValue2 = providerSpecificDetailsValue["replicationPort"];
                                        if (replicationPortValue2 != null && replicationPortValue2.Type != JTokenType.Null)
                                        {
                                            ushort replicationPortInstance2 = ((ushort)replicationPortValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.ReplicationPort = replicationPortInstance2;
                                        }
                                        
                                        JToken allowedAuthenticationTypeValue2 = providerSpecificDetailsValue["allowedAuthenticationType"];
                                        if (allowedAuthenticationTypeValue2 != null && allowedAuthenticationTypeValue2.Type != JTokenType.Null)
                                        {
                                            ushort allowedAuthenticationTypeInstance2 = ((ushort)allowedAuthenticationTypeValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.AllowedAuthenticationType = allowedAuthenticationTypeInstance2;
                                        }
                                        
                                        JToken replicaDeletionOptionValue2 = providerSpecificDetailsValue["replicaDeletionOption"];
                                        if (replicaDeletionOptionValue2 != null && replicaDeletionOptionValue2.Type != JTokenType.Null)
                                        {
                                            string replicaDeletionOptionInstance2 = ((string)replicaDeletionOptionValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.ReplicaDeletionOption = replicaDeletionOptionInstance2;
                                        }
                                        
                                        JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            hyperVReplica2012R2PolicyDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplica2012R2PolicyDetailsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzure")
                                    {
                                        HyperVReplicaAzurePolicyDetails hyperVReplicaAzurePolicyDetailsInstance = new HyperVReplicaAzurePolicyDetails();
                                        
                                        JToken recoveryPointHistoryDurationInHoursValue = providerSpecificDetailsValue["recoveryPointHistoryDurationInHours"];
                                        if (recoveryPointHistoryDurationInHoursValue != null && recoveryPointHistoryDurationInHoursValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointHistoryDurationInHoursInstance = ((int)recoveryPointHistoryDurationInHoursValue);
                                            hyperVReplicaAzurePolicyDetailsInstance.RecoveryPointHistoryDurationInHours = recoveryPointHistoryDurationInHoursInstance;
                                        }
                                        
                                        JToken applicationConsistentSnapshotFrequencyInHoursValue3 = providerSpecificDetailsValue["applicationConsistentSnapshotFrequencyInHours"];
                                        if (applicationConsistentSnapshotFrequencyInHoursValue3 != null && applicationConsistentSnapshotFrequencyInHoursValue3.Type != JTokenType.Null)
                                        {
                                            int applicationConsistentSnapshotFrequencyInHoursInstance3 = ((int)applicationConsistentSnapshotFrequencyInHoursValue3);
                                            hyperVReplicaAzurePolicyDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance3;
                                        }
                                        
                                        JToken replicationIntervalValue = providerSpecificDetailsValue["replicationInterval"];
                                        if (replicationIntervalValue != null && replicationIntervalValue.Type != JTokenType.Null)
                                        {
                                            int replicationIntervalInstance = ((int)replicationIntervalValue);
                                            hyperVReplicaAzurePolicyDetailsInstance.ReplicationInterval = replicationIntervalInstance;
                                        }
                                        
                                        JToken onlineReplicationStartTimeValue3 = providerSpecificDetailsValue["onlineReplicationStartTime"];
                                        if (onlineReplicationStartTimeValue3 != null && onlineReplicationStartTimeValue3.Type != JTokenType.Null)
                                        {
                                            TimeSpan onlineReplicationStartTimeInstance3 = TimeSpan.Parse(((string)onlineReplicationStartTimeValue3), CultureInfo.InvariantCulture);
                                            hyperVReplicaAzurePolicyDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance3;
                                        }
                                        
                                        JToken encryptionValue = providerSpecificDetailsValue["encryption"];
                                        if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                        {
                                            string encryptionInstance = ((string)encryptionValue);
                                            hyperVReplicaAzurePolicyDetailsInstance.Encryption = encryptionInstance;
                                        }
                                        
                                        JToken activeStorageAccountIdValue = providerSpecificDetailsValue["activeStorageAccountId"];
                                        if (activeStorageAccountIdValue != null && activeStorageAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string activeStorageAccountIdInstance = ((string)activeStorageAccountIdValue);
                                            hyperVReplicaAzurePolicyDetailsInstance.ActiveStorageAccountId = activeStorageAccountIdInstance;
                                        }
                                        
                                        JToken instanceTypeValue3 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                            hyperVReplicaAzurePolicyDetailsInstance.InstanceType = instanceTypeInstance3;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = hyperVReplicaAzurePolicyDetailsInstance;
                                    }
                                    if (typeName == "InMageAzureV2")
                                    {
                                        InMageAzureV2PolicyDetails inMageAzureV2PolicyDetailsInstance = new InMageAzureV2PolicyDetails();
                                        
                                        JToken recoveryPointThresholdInMinutesValue = providerSpecificDetailsValue["recoveryPointThresholdInMinutes"];
                                        if (recoveryPointThresholdInMinutesValue != null && recoveryPointThresholdInMinutesValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointThresholdInMinutesInstance = ((int)recoveryPointThresholdInMinutesValue);
                                            inMageAzureV2PolicyDetailsInstance.RecoveryPointThresholdInMinutes = recoveryPointThresholdInMinutesInstance;
                                        }
                                        
                                        JToken recoveryPointHistoryValue = providerSpecificDetailsValue["recoveryPointHistory"];
                                        if (recoveryPointHistoryValue != null && recoveryPointHistoryValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointHistoryInstance = ((int)recoveryPointHistoryValue);
                                            inMageAzureV2PolicyDetailsInstance.RecoveryPointHistory = recoveryPointHistoryInstance;
                                        }
                                        
                                        JToken crashConsistentFrequencyInMinutesValue = providerSpecificDetailsValue["crashConsistentFrequencyInMinutes"];
                                        if (crashConsistentFrequencyInMinutesValue != null && crashConsistentFrequencyInMinutesValue.Type != JTokenType.Null)
                                        {
                                            int crashConsistentFrequencyInMinutesInstance = ((int)crashConsistentFrequencyInMinutesValue);
                                            inMageAzureV2PolicyDetailsInstance.CrashConsistentFrequencyInMinutes = crashConsistentFrequencyInMinutesInstance;
                                        }
                                        
                                        JToken appConsistentFrequencyInMinutesValue = providerSpecificDetailsValue["appConsistentFrequencyInMinutes"];
                                        if (appConsistentFrequencyInMinutesValue != null && appConsistentFrequencyInMinutesValue.Type != JTokenType.Null)
                                        {
                                            int appConsistentFrequencyInMinutesInstance = ((int)appConsistentFrequencyInMinutesValue);
                                            inMageAzureV2PolicyDetailsInstance.AppConsistentFrequencyInMinutes = appConsistentFrequencyInMinutesInstance;
                                        }
                                        
                                        JToken multiVmSyncStatusValue = providerSpecificDetailsValue["multiVmSyncStatus"];
                                        if (multiVmSyncStatusValue != null && multiVmSyncStatusValue.Type != JTokenType.Null)
                                        {
                                            string multiVmSyncStatusInstance = ((string)multiVmSyncStatusValue);
                                            inMageAzureV2PolicyDetailsInstance.MultiVmSyncStatus = multiVmSyncStatusInstance;
                                        }
                                        
                                        JToken instanceTypeValue4 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                            inMageAzureV2PolicyDetailsInstance.InstanceType = instanceTypeInstance4;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = inMageAzureV2PolicyDetailsInstance;
                                    }
                                    if (typeName == "InMage")
                                    {
                                        InMagePolicyDetails inMagePolicyDetailsInstance = new InMagePolicyDetails();
                                        
                                        JToken recoveryPointThresholdInMinutesValue2 = providerSpecificDetailsValue["recoveryPointThresholdInMinutes"];
                                        if (recoveryPointThresholdInMinutesValue2 != null && recoveryPointThresholdInMinutesValue2.Type != JTokenType.Null)
                                        {
                                            int recoveryPointThresholdInMinutesInstance2 = ((int)recoveryPointThresholdInMinutesValue2);
                                            inMagePolicyDetailsInstance.RecoveryPointThresholdInMinutes = recoveryPointThresholdInMinutesInstance2;
                                        }
                                        
                                        JToken recoveryPointHistoryValue2 = providerSpecificDetailsValue["recoveryPointHistory"];
                                        if (recoveryPointHistoryValue2 != null && recoveryPointHistoryValue2.Type != JTokenType.Null)
                                        {
                                            int recoveryPointHistoryInstance2 = ((int)recoveryPointHistoryValue2);
                                            inMagePolicyDetailsInstance.RecoveryPointHistory = recoveryPointHistoryInstance2;
                                        }
                                        
                                        JToken appConsistentFrequencyInMinutesValue2 = providerSpecificDetailsValue["appConsistentFrequencyInMinutes"];
                                        if (appConsistentFrequencyInMinutesValue2 != null && appConsistentFrequencyInMinutesValue2.Type != JTokenType.Null)
                                        {
                                            int appConsistentFrequencyInMinutesInstance2 = ((int)appConsistentFrequencyInMinutesValue2);
                                            inMagePolicyDetailsInstance.AppConsistentFrequencyInMinutes = appConsistentFrequencyInMinutesInstance2;
                                        }
                                        
                                        JToken multiVmSyncStatusValue2 = providerSpecificDetailsValue["multiVmSyncStatus"];
                                        if (multiVmSyncStatusValue2 != null && multiVmSyncStatusValue2.Type != JTokenType.Null)
                                        {
                                            string multiVmSyncStatusInstance2 = ((string)multiVmSyncStatusValue2);
                                            inMagePolicyDetailsInstance.MultiVmSyncStatus = multiVmSyncStatusInstance2;
                                        }
                                        
                                        JToken instanceTypeValue5 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue5 != null && instanceTypeValue5.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance5 = ((string)instanceTypeValue5);
                                            inMagePolicyDetailsInstance.InstanceType = instanceTypeInstance5;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = inMagePolicyDetailsInstance;
                                    }
                                    if (typeName == "A2A")
                                    {
                                        A2APolicyDetails a2APolicyDetailsInstance = new A2APolicyDetails();
                                        
                                        JToken recoveryPointThresholdInMinutesValue3 = providerSpecificDetailsValue["recoveryPointThresholdInMinutes"];
                                        if (recoveryPointThresholdInMinutesValue3 != null && recoveryPointThresholdInMinutesValue3.Type != JTokenType.Null)
                                        {
                                            int recoveryPointThresholdInMinutesInstance3 = ((int)recoveryPointThresholdInMinutesValue3);
                                            a2APolicyDetailsInstance.RecoveryPointThresholdInMinutes = recoveryPointThresholdInMinutesInstance3;
                                        }
                                        
                                        JToken recoveryPointHistoryValue3 = providerSpecificDetailsValue["recoveryPointHistory"];
                                        if (recoveryPointHistoryValue3 != null && recoveryPointHistoryValue3.Type != JTokenType.Null)
                                        {
                                            int recoveryPointHistoryInstance3 = ((int)recoveryPointHistoryValue3);
                                            a2APolicyDetailsInstance.RecoveryPointHistory = recoveryPointHistoryInstance3;
                                        }
                                        
                                        JToken crashConsistentFrequencyInMinutesValue2 = providerSpecificDetailsValue["crashConsistentFrequencyInMinutes"];
                                        if (crashConsistentFrequencyInMinutesValue2 != null && crashConsistentFrequencyInMinutesValue2.Type != JTokenType.Null)
                                        {
                                            int crashConsistentFrequencyInMinutesInstance2 = ((int)crashConsistentFrequencyInMinutesValue2);
                                            a2APolicyDetailsInstance.CrashConsistentFrequencyInMinutes = crashConsistentFrequencyInMinutesInstance2;
                                        }
                                        
                                        JToken appConsistentFrequencyInMinutesValue3 = providerSpecificDetailsValue["appConsistentFrequencyInMinutes"];
                                        if (appConsistentFrequencyInMinutesValue3 != null && appConsistentFrequencyInMinutesValue3.Type != JTokenType.Null)
                                        {
                                            int appConsistentFrequencyInMinutesInstance3 = ((int)appConsistentFrequencyInMinutesValue3);
                                            a2APolicyDetailsInstance.AppConsistentFrequencyInMinutes = appConsistentFrequencyInMinutesInstance3;
                                        }
                                        
                                        JToken multiVmSyncStatusValue3 = providerSpecificDetailsValue["multiVmSyncStatus"];
                                        if (multiVmSyncStatusValue3 != null && multiVmSyncStatusValue3.Type != JTokenType.Null)
                                        {
                                            string multiVmSyncStatusInstance3 = ((string)multiVmSyncStatusValue3);
                                            a2APolicyDetailsInstance.MultiVmSyncStatus = multiVmSyncStatusInstance3;
                                        }
                                        
                                        JToken instanceTypeValue6 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue6 != null && instanceTypeValue6.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance6 = ((string)instanceTypeValue6);
                                            a2APolicyDetailsInstance.InstanceType = instanceTypeInstance6;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = a2APolicyDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                policyInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                policyInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                policyInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                policyInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    policyInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the list of all ProtectionContainers for the given server.
        /// </summary>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list policies operation.
        /// </returns>
        public async Task<PolicyListResponse> ListAsync(CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationPolicies";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    PolicyListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new PolicyListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Policy policyInstance = new Policy();
                                    result.Policies.Add(policyInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        PolicyProperties propertiesInstance = new PolicyProperties();
                                        policyInstance.Properties = propertiesInstance;
                                        
                                        JToken friendlyNameValue = propertiesValue["friendlyName"];
                                        if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string friendlyNameInstance = ((string)friendlyNameValue);
                                            propertiesInstance.FriendlyName = friendlyNameInstance;
                                        }
                                        
                                        JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                        if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                        {
                                            string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                            if (typeName == "HyperVReplica2012")
                                            {
                                                HyperVReplica2012PolicyDetails hyperVReplica2012PolicyDetailsInstance = new HyperVReplica2012PolicyDetails();
                                                
                                                JToken recoveryPointsValue = providerSpecificDetailsValue["recoveryPoints"];
                                                if (recoveryPointsValue != null && recoveryPointsValue.Type != JTokenType.Null)
                                                {
                                                    int recoveryPointsInstance = ((int)recoveryPointsValue);
                                                    hyperVReplica2012PolicyDetailsInstance.RecoveryPoints = recoveryPointsInstance;
                                                }
                                                
                                                JToken applicationConsistentSnapshotFrequencyInHoursValue = providerSpecificDetailsValue["applicationConsistentSnapshotFrequencyInHours"];
                                                if (applicationConsistentSnapshotFrequencyInHoursValue != null && applicationConsistentSnapshotFrequencyInHoursValue.Type != JTokenType.Null)
                                                {
                                                    int applicationConsistentSnapshotFrequencyInHoursInstance = ((int)applicationConsistentSnapshotFrequencyInHoursValue);
                                                    hyperVReplica2012PolicyDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance;
                                                }
                                                
                                                JToken compressionValue = providerSpecificDetailsValue["compression"];
                                                if (compressionValue != null && compressionValue.Type != JTokenType.Null)
                                                {
                                                    string compressionInstance = ((string)compressionValue);
                                                    hyperVReplica2012PolicyDetailsInstance.Compression = compressionInstance;
                                                }
                                                
                                                JToken initialReplicationMethodValue = providerSpecificDetailsValue["initialReplicationMethod"];
                                                if (initialReplicationMethodValue != null && initialReplicationMethodValue.Type != JTokenType.Null)
                                                {
                                                    string initialReplicationMethodInstance = ((string)initialReplicationMethodValue);
                                                    hyperVReplica2012PolicyDetailsInstance.InitialReplicationMethod = initialReplicationMethodInstance;
                                                }
                                                
                                                JToken onlineReplicationStartTimeValue = providerSpecificDetailsValue["onlineReplicationStartTime"];
                                                if (onlineReplicationStartTimeValue != null && onlineReplicationStartTimeValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan onlineReplicationStartTimeInstance = TimeSpan.Parse(((string)onlineReplicationStartTimeValue), CultureInfo.InvariantCulture);
                                                    hyperVReplica2012PolicyDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance;
                                                }
                                                
                                                JToken offlineReplicationImportPathValue = providerSpecificDetailsValue["offlineReplicationImportPath"];
                                                if (offlineReplicationImportPathValue != null && offlineReplicationImportPathValue.Type != JTokenType.Null)
                                                {
                                                    string offlineReplicationImportPathInstance = ((string)offlineReplicationImportPathValue);
                                                    hyperVReplica2012PolicyDetailsInstance.OfflineReplicationImportPath = offlineReplicationImportPathInstance;
                                                }
                                                
                                                JToken offlineReplicationExportPathValue = providerSpecificDetailsValue["offlineReplicationExportPath"];
                                                if (offlineReplicationExportPathValue != null && offlineReplicationExportPathValue.Type != JTokenType.Null)
                                                {
                                                    string offlineReplicationExportPathInstance = ((string)offlineReplicationExportPathValue);
                                                    hyperVReplica2012PolicyDetailsInstance.OfflineReplicationExportPath = offlineReplicationExportPathInstance;
                                                }
                                                
                                                JToken replicationPortValue = providerSpecificDetailsValue["replicationPort"];
                                                if (replicationPortValue != null && replicationPortValue.Type != JTokenType.Null)
                                                {
                                                    ushort replicationPortInstance = ((ushort)replicationPortValue);
                                                    hyperVReplica2012PolicyDetailsInstance.ReplicationPort = replicationPortInstance;
                                                }
                                                
                                                JToken allowedAuthenticationTypeValue = providerSpecificDetailsValue["allowedAuthenticationType"];
                                                if (allowedAuthenticationTypeValue != null && allowedAuthenticationTypeValue.Type != JTokenType.Null)
                                                {
                                                    ushort allowedAuthenticationTypeInstance = ((ushort)allowedAuthenticationTypeValue);
                                                    hyperVReplica2012PolicyDetailsInstance.AllowedAuthenticationType = allowedAuthenticationTypeInstance;
                                                }
                                                
                                                JToken replicaDeletionOptionValue = providerSpecificDetailsValue["replicaDeletionOption"];
                                                if (replicaDeletionOptionValue != null && replicaDeletionOptionValue.Type != JTokenType.Null)
                                                {
                                                    string replicaDeletionOptionInstance = ((string)replicaDeletionOptionValue);
                                                    hyperVReplica2012PolicyDetailsInstance.ReplicaDeletionOption = replicaDeletionOptionInstance;
                                                }
                                                
                                                JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                                if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance = ((string)instanceTypeValue);
                                                    hyperVReplica2012PolicyDetailsInstance.InstanceType = instanceTypeInstance;
                                                }
                                                propertiesInstance.ProviderSpecificDetails = hyperVReplica2012PolicyDetailsInstance;
                                            }
                                            if (typeName == "HyperVReplica2012R2")
                                            {
                                                HyperVReplica2012R2PolicyDetails hyperVReplica2012R2PolicyDetailsInstance = new HyperVReplica2012R2PolicyDetails();
                                                
                                                JToken replicationFrequencyInSecondsValue = providerSpecificDetailsValue["replicationFrequencyInSeconds"];
                                                if (replicationFrequencyInSecondsValue != null && replicationFrequencyInSecondsValue.Type != JTokenType.Null)
                                                {
                                                    ushort replicationFrequencyInSecondsInstance = ((ushort)replicationFrequencyInSecondsValue);
                                                    hyperVReplica2012R2PolicyDetailsInstance.ReplicationFrequencyInSeconds = replicationFrequencyInSecondsInstance;
                                                }
                                                
                                                JToken recoveryPointsValue2 = providerSpecificDetailsValue["recoveryPoints"];
                                                if (recoveryPointsValue2 != null && recoveryPointsValue2.Type != JTokenType.Null)
                                                {
                                                    int recoveryPointsInstance2 = ((int)recoveryPointsValue2);
                                                    hyperVReplica2012R2PolicyDetailsInstance.RecoveryPoints = recoveryPointsInstance2;
                                                }
                                                
                                                JToken applicationConsistentSnapshotFrequencyInHoursValue2 = providerSpecificDetailsValue["applicationConsistentSnapshotFrequencyInHours"];
                                                if (applicationConsistentSnapshotFrequencyInHoursValue2 != null && applicationConsistentSnapshotFrequencyInHoursValue2.Type != JTokenType.Null)
                                                {
                                                    int applicationConsistentSnapshotFrequencyInHoursInstance2 = ((int)applicationConsistentSnapshotFrequencyInHoursValue2);
                                                    hyperVReplica2012R2PolicyDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance2;
                                                }
                                                
                                                JToken compressionValue2 = providerSpecificDetailsValue["compression"];
                                                if (compressionValue2 != null && compressionValue2.Type != JTokenType.Null)
                                                {
                                                    string compressionInstance2 = ((string)compressionValue2);
                                                    hyperVReplica2012R2PolicyDetailsInstance.Compression = compressionInstance2;
                                                }
                                                
                                                JToken initialReplicationMethodValue2 = providerSpecificDetailsValue["initialReplicationMethod"];
                                                if (initialReplicationMethodValue2 != null && initialReplicationMethodValue2.Type != JTokenType.Null)
                                                {
                                                    string initialReplicationMethodInstance2 = ((string)initialReplicationMethodValue2);
                                                    hyperVReplica2012R2PolicyDetailsInstance.InitialReplicationMethod = initialReplicationMethodInstance2;
                                                }
                                                
                                                JToken onlineReplicationStartTimeValue2 = providerSpecificDetailsValue["onlineReplicationStartTime"];
                                                if (onlineReplicationStartTimeValue2 != null && onlineReplicationStartTimeValue2.Type != JTokenType.Null)
                                                {
                                                    TimeSpan onlineReplicationStartTimeInstance2 = TimeSpan.Parse(((string)onlineReplicationStartTimeValue2), CultureInfo.InvariantCulture);
                                                    hyperVReplica2012R2PolicyDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance2;
                                                }
                                                
                                                JToken offlineReplicationImportPathValue2 = providerSpecificDetailsValue["offlineReplicationImportPath"];
                                                if (offlineReplicationImportPathValue2 != null && offlineReplicationImportPathValue2.Type != JTokenType.Null)
                                                {
                                                    string offlineReplicationImportPathInstance2 = ((string)offlineReplicationImportPathValue2);
                                                    hyperVReplica2012R2PolicyDetailsInstance.OfflineReplicationImportPath = offlineReplicationImportPathInstance2;
                                                }
                                                
                                                JToken offlineReplicationExportPathValue2 = providerSpecificDetailsValue["offlineReplicationExportPath"];
                                                if (offlineReplicationExportPathValue2 != null && offlineReplicationExportPathValue2.Type != JTokenType.Null)
                                                {
                                                    string offlineReplicationExportPathInstance2 = ((string)offlineReplicationExportPathValue2);
                                                    hyperVReplica2012R2PolicyDetailsInstance.OfflineReplicationExportPath = offlineReplicationExportPathInstance2;
                                                }
                                                
                                                JToken replicationPortValue2 = providerSpecificDetailsValue["replicationPort"];
                                                if (replicationPortValue2 != null && replicationPortValue2.Type != JTokenType.Null)
                                                {
                                                    ushort replicationPortInstance2 = ((ushort)replicationPortValue2);
                                                    hyperVReplica2012R2PolicyDetailsInstance.ReplicationPort = replicationPortInstance2;
                                                }
                                                
                                                JToken allowedAuthenticationTypeValue2 = providerSpecificDetailsValue["allowedAuthenticationType"];
                                                if (allowedAuthenticationTypeValue2 != null && allowedAuthenticationTypeValue2.Type != JTokenType.Null)
                                                {
                                                    ushort allowedAuthenticationTypeInstance2 = ((ushort)allowedAuthenticationTypeValue2);
                                                    hyperVReplica2012R2PolicyDetailsInstance.AllowedAuthenticationType = allowedAuthenticationTypeInstance2;
                                                }
                                                
                                                JToken replicaDeletionOptionValue2 = providerSpecificDetailsValue["replicaDeletionOption"];
                                                if (replicaDeletionOptionValue2 != null && replicaDeletionOptionValue2.Type != JTokenType.Null)
                                                {
                                                    string replicaDeletionOptionInstance2 = ((string)replicaDeletionOptionValue2);
                                                    hyperVReplica2012R2PolicyDetailsInstance.ReplicaDeletionOption = replicaDeletionOptionInstance2;
                                                }
                                                
                                                JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                                if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                                    hyperVReplica2012R2PolicyDetailsInstance.InstanceType = instanceTypeInstance2;
                                                }
                                                propertiesInstance.ProviderSpecificDetails = hyperVReplica2012R2PolicyDetailsInstance;
                                            }
                                            if (typeName == "HyperVReplicaAzure")
                                            {
                                                HyperVReplicaAzurePolicyDetails hyperVReplicaAzurePolicyDetailsInstance = new HyperVReplicaAzurePolicyDetails();
                                                
                                                JToken recoveryPointHistoryDurationInHoursValue = providerSpecificDetailsValue["recoveryPointHistoryDurationInHours"];
                                                if (recoveryPointHistoryDurationInHoursValue != null && recoveryPointHistoryDurationInHoursValue.Type != JTokenType.Null)
                                                {
                                                    int recoveryPointHistoryDurationInHoursInstance = ((int)recoveryPointHistoryDurationInHoursValue);
                                                    hyperVReplicaAzurePolicyDetailsInstance.RecoveryPointHistoryDurationInHours = recoveryPointHistoryDurationInHoursInstance;
                                                }
                                                
                                                JToken applicationConsistentSnapshotFrequencyInHoursValue3 = providerSpecificDetailsValue["applicationConsistentSnapshotFrequencyInHours"];
                                                if (applicationConsistentSnapshotFrequencyInHoursValue3 != null && applicationConsistentSnapshotFrequencyInHoursValue3.Type != JTokenType.Null)
                                                {
                                                    int applicationConsistentSnapshotFrequencyInHoursInstance3 = ((int)applicationConsistentSnapshotFrequencyInHoursValue3);
                                                    hyperVReplicaAzurePolicyDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance3;
                                                }
                                                
                                                JToken replicationIntervalValue = providerSpecificDetailsValue["replicationInterval"];
                                                if (replicationIntervalValue != null && replicationIntervalValue.Type != JTokenType.Null)
                                                {
                                                    int replicationIntervalInstance = ((int)replicationIntervalValue);
                                                    hyperVReplicaAzurePolicyDetailsInstance.ReplicationInterval = replicationIntervalInstance;
                                                }
                                                
                                                JToken onlineReplicationStartTimeValue3 = providerSpecificDetailsValue["onlineReplicationStartTime"];
                                                if (onlineReplicationStartTimeValue3 != null && onlineReplicationStartTimeValue3.Type != JTokenType.Null)
                                                {
                                                    TimeSpan onlineReplicationStartTimeInstance3 = TimeSpan.Parse(((string)onlineReplicationStartTimeValue3), CultureInfo.InvariantCulture);
                                                    hyperVReplicaAzurePolicyDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance3;
                                                }
                                                
                                                JToken encryptionValue = providerSpecificDetailsValue["encryption"];
                                                if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                                {
                                                    string encryptionInstance = ((string)encryptionValue);
                                                    hyperVReplicaAzurePolicyDetailsInstance.Encryption = encryptionInstance;
                                                }
                                                
                                                JToken activeStorageAccountIdValue = providerSpecificDetailsValue["activeStorageAccountId"];
                                                if (activeStorageAccountIdValue != null && activeStorageAccountIdValue.Type != JTokenType.Null)
                                                {
                                                    string activeStorageAccountIdInstance = ((string)activeStorageAccountIdValue);
                                                    hyperVReplicaAzurePolicyDetailsInstance.ActiveStorageAccountId = activeStorageAccountIdInstance;
                                                }
                                                
                                                JToken instanceTypeValue3 = providerSpecificDetailsValue["instanceType"];
                                                if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                                    hyperVReplicaAzurePolicyDetailsInstance.InstanceType = instanceTypeInstance3;
                                                }
                                                propertiesInstance.ProviderSpecificDetails = hyperVReplicaAzurePolicyDetailsInstance;
                                            }
                                            if (typeName == "InMageAzureV2")
                                            {
                                                InMageAzureV2PolicyDetails inMageAzureV2PolicyDetailsInstance = new InMageAzureV2PolicyDetails();
                                                
                                                JToken recoveryPointThresholdInMinutesValue = providerSpecificDetailsValue["recoveryPointThresholdInMinutes"];
                                                if (recoveryPointThresholdInMinutesValue != null && recoveryPointThresholdInMinutesValue.Type != JTokenType.Null)
                                                {
                                                    int recoveryPointThresholdInMinutesInstance = ((int)recoveryPointThresholdInMinutesValue);
                                                    inMageAzureV2PolicyDetailsInstance.RecoveryPointThresholdInMinutes = recoveryPointThresholdInMinutesInstance;
                                                }
                                                
                                                JToken recoveryPointHistoryValue = providerSpecificDetailsValue["recoveryPointHistory"];
                                                if (recoveryPointHistoryValue != null && recoveryPointHistoryValue.Type != JTokenType.Null)
                                                {
                                                    int recoveryPointHistoryInstance = ((int)recoveryPointHistoryValue);
                                                    inMageAzureV2PolicyDetailsInstance.RecoveryPointHistory = recoveryPointHistoryInstance;
                                                }
                                                
                                                JToken crashConsistentFrequencyInMinutesValue = providerSpecificDetailsValue["crashConsistentFrequencyInMinutes"];
                                                if (crashConsistentFrequencyInMinutesValue != null && crashConsistentFrequencyInMinutesValue.Type != JTokenType.Null)
                                                {
                                                    int crashConsistentFrequencyInMinutesInstance = ((int)crashConsistentFrequencyInMinutesValue);
                                                    inMageAzureV2PolicyDetailsInstance.CrashConsistentFrequencyInMinutes = crashConsistentFrequencyInMinutesInstance;
                                                }
                                                
                                                JToken appConsistentFrequencyInMinutesValue = providerSpecificDetailsValue["appConsistentFrequencyInMinutes"];
                                                if (appConsistentFrequencyInMinutesValue != null && appConsistentFrequencyInMinutesValue.Type != JTokenType.Null)
                                                {
                                                    int appConsistentFrequencyInMinutesInstance = ((int)appConsistentFrequencyInMinutesValue);
                                                    inMageAzureV2PolicyDetailsInstance.AppConsistentFrequencyInMinutes = appConsistentFrequencyInMinutesInstance;
                                                }
                                                
                                                JToken multiVmSyncStatusValue = providerSpecificDetailsValue["multiVmSyncStatus"];
                                                if (multiVmSyncStatusValue != null && multiVmSyncStatusValue.Type != JTokenType.Null)
                                                {
                                                    string multiVmSyncStatusInstance = ((string)multiVmSyncStatusValue);
                                                    inMageAzureV2PolicyDetailsInstance.MultiVmSyncStatus = multiVmSyncStatusInstance;
                                                }
                                                
                                                JToken instanceTypeValue4 = providerSpecificDetailsValue["instanceType"];
                                                if (instanceTypeValue4 != null && instanceTypeValue4.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance4 = ((string)instanceTypeValue4);
                                                    inMageAzureV2PolicyDetailsInstance.InstanceType = instanceTypeInstance4;
                                                }
                                                propertiesInstance.ProviderSpecificDetails = inMageAzureV2PolicyDetailsInstance;
                                            }
                                            if (typeName == "InMage")
                                            {
                                                InMagePolicyDetails inMagePolicyDetailsInstance = new InMagePolicyDetails();
                                                
                                                JToken recoveryPointThresholdInMinutesValue2 = providerSpecificDetailsValue["recoveryPointThresholdInMinutes"];
                                                if (recoveryPointThresholdInMinutesValue2 != null && recoveryPointThresholdInMinutesValue2.Type != JTokenType.Null)
                                                {
                                                    int recoveryPointThresholdInMinutesInstance2 = ((int)recoveryPointThresholdInMinutesValue2);
                                                    inMagePolicyDetailsInstance.RecoveryPointThresholdInMinutes = recoveryPointThresholdInMinutesInstance2;
                                                }
                                                
                                                JToken recoveryPointHistoryValue2 = providerSpecificDetailsValue["recoveryPointHistory"];
                                                if (recoveryPointHistoryValue2 != null && recoveryPointHistoryValue2.Type != JTokenType.Null)
                                                {
                                                    int recoveryPointHistoryInstance2 = ((int)recoveryPointHistoryValue2);
                                                    inMagePolicyDetailsInstance.RecoveryPointHistory = recoveryPointHistoryInstance2;
                                                }
                                                
                                                JToken appConsistentFrequencyInMinutesValue2 = providerSpecificDetailsValue["appConsistentFrequencyInMinutes"];
                                                if (appConsistentFrequencyInMinutesValue2 != null && appConsistentFrequencyInMinutesValue2.Type != JTokenType.Null)
                                                {
                                                    int appConsistentFrequencyInMinutesInstance2 = ((int)appConsistentFrequencyInMinutesValue2);
                                                    inMagePolicyDetailsInstance.AppConsistentFrequencyInMinutes = appConsistentFrequencyInMinutesInstance2;
                                                }
                                                
                                                JToken multiVmSyncStatusValue2 = providerSpecificDetailsValue["multiVmSyncStatus"];
                                                if (multiVmSyncStatusValue2 != null && multiVmSyncStatusValue2.Type != JTokenType.Null)
                                                {
                                                    string multiVmSyncStatusInstance2 = ((string)multiVmSyncStatusValue2);
                                                    inMagePolicyDetailsInstance.MultiVmSyncStatus = multiVmSyncStatusInstance2;
                                                }
                                                
                                                JToken instanceTypeValue5 = providerSpecificDetailsValue["instanceType"];
                                                if (instanceTypeValue5 != null && instanceTypeValue5.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance5 = ((string)instanceTypeValue5);
                                                    inMagePolicyDetailsInstance.InstanceType = instanceTypeInstance5;
                                                }
                                                propertiesInstance.ProviderSpecificDetails = inMagePolicyDetailsInstance;
                                            }
                                            if (typeName == "A2A")
                                            {
                                                A2APolicyDetails a2APolicyDetailsInstance = new A2APolicyDetails();
                                                
                                                JToken recoveryPointThresholdInMinutesValue3 = providerSpecificDetailsValue["recoveryPointThresholdInMinutes"];
                                                if (recoveryPointThresholdInMinutesValue3 != null && recoveryPointThresholdInMinutesValue3.Type != JTokenType.Null)
                                                {
                                                    int recoveryPointThresholdInMinutesInstance3 = ((int)recoveryPointThresholdInMinutesValue3);
                                                    a2APolicyDetailsInstance.RecoveryPointThresholdInMinutes = recoveryPointThresholdInMinutesInstance3;
                                                }
                                                
                                                JToken recoveryPointHistoryValue3 = providerSpecificDetailsValue["recoveryPointHistory"];
                                                if (recoveryPointHistoryValue3 != null && recoveryPointHistoryValue3.Type != JTokenType.Null)
                                                {
                                                    int recoveryPointHistoryInstance3 = ((int)recoveryPointHistoryValue3);
                                                    a2APolicyDetailsInstance.RecoveryPointHistory = recoveryPointHistoryInstance3;
                                                }
                                                
                                                JToken crashConsistentFrequencyInMinutesValue2 = providerSpecificDetailsValue["crashConsistentFrequencyInMinutes"];
                                                if (crashConsistentFrequencyInMinutesValue2 != null && crashConsistentFrequencyInMinutesValue2.Type != JTokenType.Null)
                                                {
                                                    int crashConsistentFrequencyInMinutesInstance2 = ((int)crashConsistentFrequencyInMinutesValue2);
                                                    a2APolicyDetailsInstance.CrashConsistentFrequencyInMinutes = crashConsistentFrequencyInMinutesInstance2;
                                                }
                                                
                                                JToken appConsistentFrequencyInMinutesValue3 = providerSpecificDetailsValue["appConsistentFrequencyInMinutes"];
                                                if (appConsistentFrequencyInMinutesValue3 != null && appConsistentFrequencyInMinutesValue3.Type != JTokenType.Null)
                                                {
                                                    int appConsistentFrequencyInMinutesInstance3 = ((int)appConsistentFrequencyInMinutesValue3);
                                                    a2APolicyDetailsInstance.AppConsistentFrequencyInMinutes = appConsistentFrequencyInMinutesInstance3;
                                                }
                                                
                                                JToken multiVmSyncStatusValue3 = providerSpecificDetailsValue["multiVmSyncStatus"];
                                                if (multiVmSyncStatusValue3 != null && multiVmSyncStatusValue3.Type != JTokenType.Null)
                                                {
                                                    string multiVmSyncStatusInstance3 = ((string)multiVmSyncStatusValue3);
                                                    a2APolicyDetailsInstance.MultiVmSyncStatus = multiVmSyncStatusInstance3;
                                                }
                                                
                                                JToken instanceTypeValue6 = providerSpecificDetailsValue["instanceType"];
                                                if (instanceTypeValue6 != null && instanceTypeValue6.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance6 = ((string)instanceTypeValue6);
                                                    a2APolicyDetailsInstance.InstanceType = instanceTypeInstance6;
                                                }
                                                propertiesInstance.ProviderSpecificDetails = a2APolicyDetailsInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        policyInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        policyInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        policyInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        policyInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            policyInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update Policy.
        /// </summary>
        /// <param name='input'>
        /// Required. input.
        /// </param>
        /// <param name='policyName'>
        /// Required. Policy name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> UpdateAsync(UpdatePolicyInput input, string policyName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("input", input);
                tracingParameters.Add("policyName", policyName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.Policies.BeginUpdatingAsync(input, policyName, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            UpdatePolicyOperationResponse result = await client.Policies.GetUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.Policies.GetUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
    }
}
