// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.Azure.Management.SiteRecovery;
using Microsoft.Azure.Management.SiteRecovery.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.SiteRecovery
{
    /// <summary>
    /// Definition of Protection Profile operations for the Site Recovery
    /// extension.
    /// </summary>
    internal partial class ProtectionProfileOperations : IServiceOperations<SiteRecoveryManagementClient>, IProtectionProfileOperations
    {
        /// <summary>
        /// Initializes a new instance of the ProtectionProfileOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ProtectionProfileOperations(SiteRecoveryManagementClient client)
        {
            this._client = client;
        }
        
        private SiteRecoveryManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.SiteRecovery.SiteRecoveryManagementClient.
        /// </summary>
        public SiteRecoveryManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Creates a profile
        /// </summary>
        /// <param name='name'>
        /// Required. Input to associate profile
        /// </param>
        /// <param name='input'>
        /// Required. Input to associate profile
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> AssociateAsync(string name, ProtectionProfileAssociationInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("name", name);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "AssociateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.ProtectionProfile.BeginAssociatingAsync(name, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            AssociateProtectionProfileOperationResponse result = await client.ProtectionProfile.GetAssociateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ProtectionProfile.GetAssociateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Creates a profile
        /// </summary>
        /// <param name='name'>
        /// Required. Input to associate profile
        /// </param>
        /// <param name='input'>
        /// Required. Input to associate profile
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginAssociatingAsync(string name, ProtectionProfileAssociationInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            if (input.PrimaryProtectionContainerId == null)
            {
                throw new ArgumentNullException("input.PrimaryProtectionContainerId");
            }
            if (input.RecoveryProtectionContainerId == null)
            {
                throw new ArgumentNullException("input.RecoveryProtectionContainerId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("name", name);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginAssociatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.SiteRecovery";
            url = url + "/";
            url = url + "SiteRecoveryVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/ProtectionProfiles/";
            url = url + Uri.EscapeDataString(name);
            url = url + "/Associate";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-08-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/Json");
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject protectionProfileAssociationInputValue = new JObject();
                requestDoc = protectionProfileAssociationInputValue;
                
                protectionProfileAssociationInputValue["primaryProtectionContainerId"] = input.PrimaryProtectionContainerId;
                
                protectionProfileAssociationInputValue["recoveryProtectionContainerId"] = input.RecoveryProtectionContainerId;
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/Json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Creates a profile
        /// </summary>
        /// <param name='input'>
        /// Required. Input to create profile
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginCreatingAsync(CreateProtectionProfileInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginCreatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.SiteRecovery";
            url = url + "/";
            url = url + "SiteRecoveryVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/ProtectionProfiles/";
            if (input.Name != null)
            {
                url = url + Uri.EscapeDataString(input.Name);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-08-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/Json");
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject createProtectionProfileInputValue = new JObject();
                requestDoc = createProtectionProfileInputValue;
                
                if (input.Name != null)
                {
                    createProtectionProfileInputValue["name"] = input.Name;
                }
                
                if (input.ReplicationProvider != null)
                {
                    createProtectionProfileInputValue["replicationProvider"] = input.ReplicationProvider;
                }
                
                if (input.ReplicationProviderSettings != null)
                {
                    JObject replicationProviderSettingsValue = new JObject();
                    createProtectionProfileInputValue["replicationProviderSettings"] = replicationProviderSettingsValue;
                    if (input.ReplicationProviderSettings is HyperVReplicaProtectionProfileInput)
                    {
                        replicationProviderSettingsValue["__type"] = "HyperVReplicaProtectionProfileInput";
                        HyperVReplicaProtectionProfileInput derived = ((HyperVReplicaProtectionProfileInput)input.ReplicationProviderSettings);
                        
                        replicationProviderSettingsValue["replicationFrequencyInSeconds"] = derived.ReplicationFrequencyInSeconds;
                        
                        replicationProviderSettingsValue["recoveryPoints"] = derived.RecoveryPoints;
                        
                        replicationProviderSettingsValue["applicationConsistentSnapshotFrequencyInHours"] = derived.ApplicationConsistentSnapshotFrequencyInHours;
                        
                        if (derived.Compression != null)
                        {
                            replicationProviderSettingsValue["compression"] = derived.Compression;
                        }
                        
                        if (derived.InitialReplicationMethod != null)
                        {
                            replicationProviderSettingsValue["initialReplicationMethod"] = derived.InitialReplicationMethod;
                        }
                        
                        if (derived.OnlineReplicationStartTime != null)
                        {
                            replicationProviderSettingsValue["onlineReplicationStartTime"] = derived.OnlineReplicationStartTime.Value.ToString();
                        }
                        
                        if (derived.OfflineReplicationImportPath != null)
                        {
                            replicationProviderSettingsValue["offlineReplicationImportPath"] = derived.OfflineReplicationImportPath;
                        }
                        
                        if (derived.OfflineReplicationExportPath != null)
                        {
                            replicationProviderSettingsValue["offlineReplicationExportPath"] = derived.OfflineReplicationExportPath;
                        }
                        
                        replicationProviderSettingsValue["replicationPort"] = derived.ReplicationPort;
                        
                        replicationProviderSettingsValue["allowedAuthenticationType"] = derived.AllowedAuthenticationType;
                        
                        if (derived.ReplicaDeletion != null)
                        {
                            replicationProviderSettingsValue["replicaDeletion"] = derived.ReplicaDeletion;
                        }
                    }
                    if (input.ReplicationProviderSettings is HyperVReplicaAzureProtectionProfileInput)
                    {
                        replicationProviderSettingsValue["__type"] = "HyperVReplicaAzureProtectionProfileInput";
                        HyperVReplicaAzureProtectionProfileInput derived2 = ((HyperVReplicaAzureProtectionProfileInput)input.ReplicationProviderSettings);
                        
                        replicationProviderSettingsValue["recoveryPointHistoryDuration"] = derived2.RecoveryPointHistoryDuration;
                        
                        replicationProviderSettingsValue["appConsistencyFreq"] = derived2.AppConsistencyFreq;
                        
                        replicationProviderSettingsValue["replicationInterval"] = derived2.ReplicationInterval;
                        
                        if (derived2.OnlineIrStartTime != null)
                        {
                            replicationProviderSettingsValue["onlineIrStartTime"] = derived2.OnlineIrStartTime.Value.ToString();
                        }
                        
                        if (derived2.StorageAccounts != null)
                        {
                            replicationProviderSettingsValue["storageAccounts"] = derived2.StorageAccounts.ToString();
                        }
                        
                        if (derived2.Encryption != null)
                        {
                            replicationProviderSettingsValue["encryption"] = derived2.Encryption;
                        }
                    }
                    if (input.ReplicationProviderSettings is SanProtectionProfileInput)
                    {
                        replicationProviderSettingsValue["__type"] = "SanProtectionProfileInput";
                        SanProtectionProfileInput derived3 = ((SanProtectionProfileInput)input.ReplicationProviderSettings);
                        
                        if (derived3.CloudId != null)
                        {
                            replicationProviderSettingsValue["cloudId"] = derived3.CloudId;
                        }
                        
                        if (derived3.RemoteCloudId != null)
                        {
                            replicationProviderSettingsValue["remoteCloudId"] = derived3.RemoteCloudId;
                        }
                        
                        if (derived3.ArrayUniqueId != null)
                        {
                            replicationProviderSettingsValue["arrayUniqueId"] = derived3.ArrayUniqueId;
                        }
                        
                        if (derived3.RemoteArrayUniqueId != null)
                        {
                            replicationProviderSettingsValue["remoteArrayUniqueId"] = derived3.RemoteArrayUniqueId;
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/Json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes a ProtectionProfile
        /// </summary>
        /// <param name='name'>
        /// Required. ProtectionProfile name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginDeletingAsync(string name, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("name", name);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.SiteRecovery";
            url = url + "/";
            url = url + "SiteRecoveryVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/ProtectionProfiles/";
            url = url + Uri.EscapeDataString(name);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-08-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/Json");
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Creates a profile
        /// </summary>
        /// <param name='name'>
        /// Required. Input to dissociate profile
        /// </param>
        /// <param name='input'>
        /// Required. Input to dissociate profile
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginDissociatingAsync(string name, DisassociateProtectionProfileInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            if (input.PrimaryProtectionContainerId == null)
            {
                throw new ArgumentNullException("input.PrimaryProtectionContainerId");
            }
            if (input.RecoveryProtectionContainerId == null)
            {
                throw new ArgumentNullException("input.RecoveryProtectionContainerId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("name", name);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginDissociatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.SiteRecovery";
            url = url + "/";
            url = url + "SiteRecoveryVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/ProtectionProfiles/";
            url = url + Uri.EscapeDataString(name);
            url = url + "/Dissociate";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-08-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/Json");
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject disassociateProtectionProfileInputValue = new JObject();
                requestDoc = disassociateProtectionProfileInputValue;
                
                if (input.Name != null)
                {
                    disassociateProtectionProfileInputValue["name"] = input.Name;
                }
                
                if (input.ReplicationProviderSettings != null)
                {
                    disassociateProtectionProfileInputValue["replicationProviderSettings"] = input.ReplicationProviderSettings;
                }
                
                disassociateProtectionProfileInputValue["primaryProtectionContainerId"] = input.PrimaryProtectionContainerId;
                
                disassociateProtectionProfileInputValue["recoveryProtectionContainerId"] = input.RecoveryProtectionContainerId;
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/Json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update protection profile.
        /// </summary>
        /// <param name='input'>
        /// Required. input.
        /// </param>
        /// <param name='protectionProfileId'>
        /// Required. Profile id.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginUpdatingAsync(UpdateProtectionProfileInput input, string protectionProfileId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            if (input.ReplicationProviderSettings == null)
            {
                throw new ArgumentNullException("input.ReplicationProviderSettings");
            }
            if (protectionProfileId == null)
            {
                throw new ArgumentNullException("protectionProfileId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("input", input);
                tracingParameters.Add("protectionProfileId", protectionProfileId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginUpdatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.SiteRecovery";
            url = url + "/";
            url = url + "SiteRecoveryVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/ProtectionProfiles/";
            url = url + Uri.EscapeDataString(protectionProfileId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-08-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/Json");
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject updateProtectionProfileInputValue = new JObject();
                requestDoc = updateProtectionProfileInputValue;
                
                JObject replicationProviderSettingsValue = new JObject();
                updateProtectionProfileInputValue["replicationProviderSettings"] = replicationProviderSettingsValue;
                if (input.ReplicationProviderSettings is HyperVReplicaProtectionProfileInput)
                {
                    replicationProviderSettingsValue["__type"] = "HyperVReplicaProtectionProfileInput";
                    HyperVReplicaProtectionProfileInput derived = ((HyperVReplicaProtectionProfileInput)input.ReplicationProviderSettings);
                    
                    replicationProviderSettingsValue["replicationFrequencyInSeconds"] = derived.ReplicationFrequencyInSeconds;
                    
                    replicationProviderSettingsValue["recoveryPoints"] = derived.RecoveryPoints;
                    
                    replicationProviderSettingsValue["applicationConsistentSnapshotFrequencyInHours"] = derived.ApplicationConsistentSnapshotFrequencyInHours;
                    
                    if (derived.Compression != null)
                    {
                        replicationProviderSettingsValue["compression"] = derived.Compression;
                    }
                    
                    if (derived.InitialReplicationMethod != null)
                    {
                        replicationProviderSettingsValue["initialReplicationMethod"] = derived.InitialReplicationMethod;
                    }
                    
                    if (derived.OnlineReplicationStartTime != null)
                    {
                        replicationProviderSettingsValue["onlineReplicationStartTime"] = derived.OnlineReplicationStartTime.Value.ToString();
                    }
                    
                    if (derived.OfflineReplicationImportPath != null)
                    {
                        replicationProviderSettingsValue["offlineReplicationImportPath"] = derived.OfflineReplicationImportPath;
                    }
                    
                    if (derived.OfflineReplicationExportPath != null)
                    {
                        replicationProviderSettingsValue["offlineReplicationExportPath"] = derived.OfflineReplicationExportPath;
                    }
                    
                    replicationProviderSettingsValue["replicationPort"] = derived.ReplicationPort;
                    
                    replicationProviderSettingsValue["allowedAuthenticationType"] = derived.AllowedAuthenticationType;
                    
                    if (derived.ReplicaDeletion != null)
                    {
                        replicationProviderSettingsValue["replicaDeletion"] = derived.ReplicaDeletion;
                    }
                }
                if (input.ReplicationProviderSettings is HyperVReplicaAzureProtectionProfileInput)
                {
                    replicationProviderSettingsValue["__type"] = "HyperVReplicaAzureProtectionProfileInput";
                    HyperVReplicaAzureProtectionProfileInput derived2 = ((HyperVReplicaAzureProtectionProfileInput)input.ReplicationProviderSettings);
                    
                    replicationProviderSettingsValue["recoveryPointHistoryDuration"] = derived2.RecoveryPointHistoryDuration;
                    
                    replicationProviderSettingsValue["appConsistencyFreq"] = derived2.AppConsistencyFreq;
                    
                    replicationProviderSettingsValue["replicationInterval"] = derived2.ReplicationInterval;
                    
                    if (derived2.OnlineIrStartTime != null)
                    {
                        replicationProviderSettingsValue["onlineIrStartTime"] = derived2.OnlineIrStartTime.Value.ToString();
                    }
                    
                    if (derived2.StorageAccounts != null)
                    {
                        replicationProviderSettingsValue["storageAccounts"] = derived2.StorageAccounts.ToString();
                    }
                    
                    if (derived2.Encryption != null)
                    {
                        replicationProviderSettingsValue["encryption"] = derived2.Encryption;
                    }
                }
                if (input.ReplicationProviderSettings is SanProtectionProfileInput)
                {
                    replicationProviderSettingsValue["__type"] = "SanProtectionProfileInput";
                    SanProtectionProfileInput derived3 = ((SanProtectionProfileInput)input.ReplicationProviderSettings);
                    
                    if (derived3.CloudId != null)
                    {
                        replicationProviderSettingsValue["cloudId"] = derived3.CloudId;
                    }
                    
                    if (derived3.RemoteCloudId != null)
                    {
                        replicationProviderSettingsValue["remoteCloudId"] = derived3.RemoteCloudId;
                    }
                    
                    if (derived3.ArrayUniqueId != null)
                    {
                        replicationProviderSettingsValue["arrayUniqueId"] = derived3.ArrayUniqueId;
                    }
                    
                    if (derived3.RemoteArrayUniqueId != null)
                    {
                        replicationProviderSettingsValue["remoteArrayUniqueId"] = derived3.RemoteArrayUniqueId;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Creates a profile
        /// </summary>
        /// <param name='input'>
        /// Required. Input to create profile
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> CreateAsync(CreateProtectionProfileInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.ProtectionProfile.BeginCreatingAsync(input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            CreateProfileOperationResponse result = await client.ProtectionProfile.GetCreateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ProtectionProfile.GetCreateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Deletes a ProtectionProfile
        /// </summary>
        /// <param name='name'>
        /// Required. ProtectionProfile name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> DeleteAsync(string name, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("name", name);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.ProtectionProfile.BeginDeletingAsync(name, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            DeleteProtectionProfileOperationResponse result = await client.ProtectionProfile.GetDeleteStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ProtectionProfile.GetDeleteStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Creates a profile
        /// </summary>
        /// <param name='name'>
        /// Required. Input to dissociate profile
        /// </param>
        /// <param name='input'>
        /// Required. Input to create profile
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> DissociateAsync(string name, DisassociateProtectionProfileInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("name", name);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "DissociateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.ProtectionProfile.BeginDissociatingAsync(name, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            DissociateProtectionProfileOperationResponse result = await client.ProtectionProfile.GetDissociateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ProtectionProfile.GetDissociateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Get the protected Profile by Id.
        /// </summary>
        /// <param name='protectionProfileId'>
        /// Required. Protection Profile ID.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the Protection Profile object.
        /// </returns>
        public async Task<ProtectionProfileResponse> GetAsync(string protectionProfileId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (protectionProfileId == null)
            {
                throw new ArgumentNullException("protectionProfileId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("protectionProfileId", protectionProfileId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.SiteRecovery";
            url = url + "/";
            url = url + "SiteRecoveryVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/ProtectionProfiles/";
            url = url + Uri.EscapeDataString(protectionProfileId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-08-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProtectionProfileResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProtectionProfileResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProtectionProfile protectionProfileInstance = new ProtectionProfile();
                            result.ProtectionProfile = protectionProfileInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ProtectionProfileProperties propertiesInstance = new ProtectionProfileProperties();
                                protectionProfileInstance.CustomData = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken protectedEntityCountValue = propertiesValue["protectedEntityCount"];
                                if (protectedEntityCountValue != null && protectedEntityCountValue.Type != JTokenType.Null)
                                {
                                    int protectedEntityCountInstance = ((int)protectedEntityCountValue);
                                    propertiesInstance.ProtectedEntityCount = protectedEntityCountInstance;
                                }
                                
                                JToken replicationProviderValue = propertiesValue["replicationProvider"];
                                if (replicationProviderValue != null && replicationProviderValue.Type != JTokenType.Null)
                                {
                                    string replicationProviderInstance = ((string)replicationProviderValue);
                                    propertiesInstance.ReplicationProvider = replicationProviderInstance;
                                }
                                
                                JToken replicationProviderSettingsValue = propertiesValue["replicationProviderSettings"];
                                if (replicationProviderSettingsValue != null && replicationProviderSettingsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)replicationProviderSettingsValue["__type"]);
                                    if (typeName == "HyperVReplicaProtectionProfileDetails")
                                    {
                                        HyperVReplicaProtectionProfileDetails hyperVReplicaProtectionProfileDetailsInstance = new HyperVReplicaProtectionProfileDetails();
                                        
                                        JToken recoveryPointsValue = replicationProviderSettingsValue["recoveryPoints"];
                                        if (recoveryPointsValue != null && recoveryPointsValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointsInstance = ((int)recoveryPointsValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.RecoveryPoints = recoveryPointsInstance;
                                        }
                                        
                                        JToken applicationConsistentSnapshotFrequencyInHoursValue = replicationProviderSettingsValue["applicationConsistentSnapshotFrequencyInHours"];
                                        if (applicationConsistentSnapshotFrequencyInHoursValue != null && applicationConsistentSnapshotFrequencyInHoursValue.Type != JTokenType.Null)
                                        {
                                            int applicationConsistentSnapshotFrequencyInHoursInstance = ((int)applicationConsistentSnapshotFrequencyInHoursValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance;
                                        }
                                        
                                        JToken compressionValue = replicationProviderSettingsValue["compression"];
                                        if (compressionValue != null && compressionValue.Type != JTokenType.Null)
                                        {
                                            string compressionInstance = ((string)compressionValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.Compression = compressionInstance;
                                        }
                                        
                                        JToken initialReplicationMethodValue = replicationProviderSettingsValue["initialReplicationMethod"];
                                        if (initialReplicationMethodValue != null && initialReplicationMethodValue.Type != JTokenType.Null)
                                        {
                                            string initialReplicationMethodInstance = ((string)initialReplicationMethodValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.InitialReplicationMethod = initialReplicationMethodInstance;
                                        }
                                        
                                        JToken onlineReplicationStartTimeValue = replicationProviderSettingsValue["onlineReplicationStartTime"];
                                        if (onlineReplicationStartTimeValue != null && onlineReplicationStartTimeValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan onlineReplicationStartTimeInstance = TimeSpan.Parse(((string)onlineReplicationStartTimeValue), CultureInfo.InvariantCulture);
                                            hyperVReplicaProtectionProfileDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance;
                                        }
                                        
                                        JToken offlineReplicationImportPathValue = replicationProviderSettingsValue["offlineReplicationImportPath"];
                                        if (offlineReplicationImportPathValue != null && offlineReplicationImportPathValue.Type != JTokenType.Null)
                                        {
                                            string offlineReplicationImportPathInstance = ((string)offlineReplicationImportPathValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.OfflineReplicationImportPath = offlineReplicationImportPathInstance;
                                        }
                                        
                                        JToken offlineReplicationExportPathValue = replicationProviderSettingsValue["offlineReplicationExportPath"];
                                        if (offlineReplicationExportPathValue != null && offlineReplicationExportPathValue.Type != JTokenType.Null)
                                        {
                                            string offlineReplicationExportPathInstance = ((string)offlineReplicationExportPathValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.OfflineReplicationExportPath = offlineReplicationExportPathInstance;
                                        }
                                        
                                        JToken replicationPortValue = replicationProviderSettingsValue["replicationPort"];
                                        if (replicationPortValue != null && replicationPortValue.Type != JTokenType.Null)
                                        {
                                            ushort replicationPortInstance = ((ushort)replicationPortValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.ReplicationPort = replicationPortInstance;
                                        }
                                        
                                        JToken allowedAuthenticationTypeValue = replicationProviderSettingsValue["allowedAuthenticationType"];
                                        if (allowedAuthenticationTypeValue != null && allowedAuthenticationTypeValue.Type != JTokenType.Null)
                                        {
                                            ushort allowedAuthenticationTypeInstance = ((ushort)allowedAuthenticationTypeValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.AllowedAuthenticationType = allowedAuthenticationTypeInstance;
                                        }
                                        
                                        JToken replicaDeletionOptionValue = replicationProviderSettingsValue["replicaDeletionOption"];
                                        if (replicaDeletionOptionValue != null && replicaDeletionOptionValue.Type != JTokenType.Null)
                                        {
                                            string replicaDeletionOptionInstance = ((string)replicaDeletionOptionValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.ReplicaDeletionOption = replicaDeletionOptionInstance;
                                        }
                                        
                                        JToken replicationFrequencyInSecondsValue = replicationProviderSettingsValue["replicationFrequencyInSeconds"];
                                        if (replicationFrequencyInSecondsValue != null && replicationFrequencyInSecondsValue.Type != JTokenType.Null)
                                        {
                                            ushort replicationFrequencyInSecondsInstance = ((ushort)replicationFrequencyInSecondsValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.ReplicationFrequencyInSeconds = replicationFrequencyInSecondsInstance;
                                        }
                                        propertiesInstance.ReplicationProviderSettings = hyperVReplicaProtectionProfileDetailsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzureProtectionProfileDetails")
                                    {
                                        HyperVReplicaAzureProtectionProfileDetails hyperVReplicaAzureProtectionProfileDetailsInstance = new HyperVReplicaAzureProtectionProfileDetails();
                                        
                                        JToken recoveryPointHistoryDurationValue = replicationProviderSettingsValue["recoveryPointHistoryDuration"];
                                        if (recoveryPointHistoryDurationValue != null && recoveryPointHistoryDurationValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointHistoryDurationInstance = ((int)recoveryPointHistoryDurationValue);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.RecoveryPointHistoryDuration = recoveryPointHistoryDurationInstance;
                                        }
                                        
                                        JToken applicationConsistentSnapshotFrequencyInHoursValue2 = replicationProviderSettingsValue["applicationConsistentSnapshotFrequencyInHours"];
                                        if (applicationConsistentSnapshotFrequencyInHoursValue2 != null && applicationConsistentSnapshotFrequencyInHoursValue2.Type != JTokenType.Null)
                                        {
                                            int applicationConsistentSnapshotFrequencyInHoursInstance2 = ((int)applicationConsistentSnapshotFrequencyInHoursValue2);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance2;
                                        }
                                        
                                        JToken replicationIntervalValue = replicationProviderSettingsValue["replicationInterval"];
                                        if (replicationIntervalValue != null && replicationIntervalValue.Type != JTokenType.Null)
                                        {
                                            int replicationIntervalInstance = ((int)replicationIntervalValue);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.ReplicationInterval = replicationIntervalInstance;
                                        }
                                        
                                        JToken onlineReplicationStartTimeValue2 = replicationProviderSettingsValue["onlineReplicationStartTime"];
                                        if (onlineReplicationStartTimeValue2 != null && onlineReplicationStartTimeValue2.Type != JTokenType.Null)
                                        {
                                            TimeSpan onlineReplicationStartTimeInstance2 = TimeSpan.Parse(((string)onlineReplicationStartTimeValue2), CultureInfo.InvariantCulture);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance2;
                                        }
                                        
                                        JToken encryptionValue = replicationProviderSettingsValue["encryption"];
                                        if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                        {
                                            string encryptionInstance = ((string)encryptionValue);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.Encryption = encryptionInstance;
                                        }
                                        
                                        JToken activeStorageAccountValue = replicationProviderSettingsValue["activeStorageAccount"];
                                        if (activeStorageAccountValue != null && activeStorageAccountValue.Type != JTokenType.Null)
                                        {
                                            CustomerStorageAccount activeStorageAccountInstance = new CustomerStorageAccount();
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.ActiveStorageAccount = activeStorageAccountInstance;
                                            
                                            JToken storageAccountNameValue = activeStorageAccountValue["storageAccountName"];
                                            if (storageAccountNameValue != null && storageAccountNameValue.Type != JTokenType.Null)
                                            {
                                                string storageAccountNameInstance = ((string)storageAccountNameValue);
                                                activeStorageAccountInstance.StorageAccountName = storageAccountNameInstance;
                                            }
                                            
                                            JToken subscriptionIdValue = activeStorageAccountValue["subscriptionId"];
                                            if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                            {
                                                string subscriptionIdInstance = ((string)subscriptionIdValue);
                                                activeStorageAccountInstance.SubscriptionId = subscriptionIdInstance;
                                            }
                                        }
                                        propertiesInstance.ReplicationProviderSettings = hyperVReplicaAzureProtectionProfileDetailsInstance;
                                    }
                                }
                                
                                JToken associationStatusValue = propertiesValue["associationStatus"];
                                if (associationStatusValue != null && associationStatusValue.Type != JTokenType.Null)
                                {
                                    string associationStatusInstance = ((string)associationStatusValue);
                                    propertiesInstance.AssociationStatus = associationStatusInstance;
                                }
                                
                                JToken associationDetailArray = propertiesValue["associationDetail"];
                                if (associationDetailArray != null && associationDetailArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken associationDetailValue in ((JArray)associationDetailArray))
                                    {
                                        ProtectionProfileAssociationDetails protectionProfileAssociationDetailsInstance = new ProtectionProfileAssociationDetails();
                                        propertiesInstance.AssociationDetail.Add(protectionProfileAssociationDetailsInstance);
                                        
                                        JToken primaryProtectionContainerIdValue = associationDetailValue["primaryProtectionContainerId"];
                                        if (primaryProtectionContainerIdValue != null && primaryProtectionContainerIdValue.Type != JTokenType.Null)
                                        {
                                            string primaryProtectionContainerIdInstance = ((string)primaryProtectionContainerIdValue);
                                            protectionProfileAssociationDetailsInstance.PrimaryProtectionContainerId = primaryProtectionContainerIdInstance;
                                        }
                                        
                                        JToken recoveryProtectionContainerIdValue = associationDetailValue["recoveryProtectionContainerId"];
                                        if (recoveryProtectionContainerIdValue != null && recoveryProtectionContainerIdValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProtectionContainerIdInstance = ((string)recoveryProtectionContainerIdValue);
                                            protectionProfileAssociationDetailsInstance.RecoveryProtectionContainerId = recoveryProtectionContainerIdInstance;
                                        }
                                        
                                        JToken associationStatusValue2 = associationDetailValue["associationStatus"];
                                        if (associationStatusValue2 != null && associationStatusValue2.Type != JTokenType.Null)
                                        {
                                            string associationStatusInstance2 = ((string)associationStatusValue2);
                                            protectionProfileAssociationDetailsInstance.AssociationStatus = associationStatusInstance2;
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                protectionProfileInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                protectionProfileInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                protectionProfileInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                protectionProfileInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    protectionProfileInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<AssociateProtectionProfileOperationResponse> GetAssociateStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetAssociateStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/Json");
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AssociateProtectionProfileOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AssociateProtectionProfileOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProtectionProfile protectionProfileInstance = new ProtectionProfile();
                            result.ProtectionProfile = protectionProfileInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ProtectionProfileProperties propertiesInstance = new ProtectionProfileProperties();
                                protectionProfileInstance.CustomData = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken protectedEntityCountValue = propertiesValue["protectedEntityCount"];
                                if (protectedEntityCountValue != null && protectedEntityCountValue.Type != JTokenType.Null)
                                {
                                    int protectedEntityCountInstance = ((int)protectedEntityCountValue);
                                    propertiesInstance.ProtectedEntityCount = protectedEntityCountInstance;
                                }
                                
                                JToken replicationProviderValue = propertiesValue["replicationProvider"];
                                if (replicationProviderValue != null && replicationProviderValue.Type != JTokenType.Null)
                                {
                                    string replicationProviderInstance = ((string)replicationProviderValue);
                                    propertiesInstance.ReplicationProvider = replicationProviderInstance;
                                }
                                
                                JToken replicationProviderSettingsValue = propertiesValue["replicationProviderSettings"];
                                if (replicationProviderSettingsValue != null && replicationProviderSettingsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)replicationProviderSettingsValue["__type"]);
                                    if (typeName == "HyperVReplicaProtectionProfileDetails")
                                    {
                                        HyperVReplicaProtectionProfileDetails hyperVReplicaProtectionProfileDetailsInstance = new HyperVReplicaProtectionProfileDetails();
                                        
                                        JToken recoveryPointsValue = replicationProviderSettingsValue["recoveryPoints"];
                                        if (recoveryPointsValue != null && recoveryPointsValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointsInstance = ((int)recoveryPointsValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.RecoveryPoints = recoveryPointsInstance;
                                        }
                                        
                                        JToken applicationConsistentSnapshotFrequencyInHoursValue = replicationProviderSettingsValue["applicationConsistentSnapshotFrequencyInHours"];
                                        if (applicationConsistentSnapshotFrequencyInHoursValue != null && applicationConsistentSnapshotFrequencyInHoursValue.Type != JTokenType.Null)
                                        {
                                            int applicationConsistentSnapshotFrequencyInHoursInstance = ((int)applicationConsistentSnapshotFrequencyInHoursValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance;
                                        }
                                        
                                        JToken compressionValue = replicationProviderSettingsValue["compression"];
                                        if (compressionValue != null && compressionValue.Type != JTokenType.Null)
                                        {
                                            string compressionInstance = ((string)compressionValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.Compression = compressionInstance;
                                        }
                                        
                                        JToken initialReplicationMethodValue = replicationProviderSettingsValue["initialReplicationMethod"];
                                        if (initialReplicationMethodValue != null && initialReplicationMethodValue.Type != JTokenType.Null)
                                        {
                                            string initialReplicationMethodInstance = ((string)initialReplicationMethodValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.InitialReplicationMethod = initialReplicationMethodInstance;
                                        }
                                        
                                        JToken onlineReplicationStartTimeValue = replicationProviderSettingsValue["onlineReplicationStartTime"];
                                        if (onlineReplicationStartTimeValue != null && onlineReplicationStartTimeValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan onlineReplicationStartTimeInstance = TimeSpan.Parse(((string)onlineReplicationStartTimeValue), CultureInfo.InvariantCulture);
                                            hyperVReplicaProtectionProfileDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance;
                                        }
                                        
                                        JToken offlineReplicationImportPathValue = replicationProviderSettingsValue["offlineReplicationImportPath"];
                                        if (offlineReplicationImportPathValue != null && offlineReplicationImportPathValue.Type != JTokenType.Null)
                                        {
                                            string offlineReplicationImportPathInstance = ((string)offlineReplicationImportPathValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.OfflineReplicationImportPath = offlineReplicationImportPathInstance;
                                        }
                                        
                                        JToken offlineReplicationExportPathValue = replicationProviderSettingsValue["offlineReplicationExportPath"];
                                        if (offlineReplicationExportPathValue != null && offlineReplicationExportPathValue.Type != JTokenType.Null)
                                        {
                                            string offlineReplicationExportPathInstance = ((string)offlineReplicationExportPathValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.OfflineReplicationExportPath = offlineReplicationExportPathInstance;
                                        }
                                        
                                        JToken replicationPortValue = replicationProviderSettingsValue["replicationPort"];
                                        if (replicationPortValue != null && replicationPortValue.Type != JTokenType.Null)
                                        {
                                            ushort replicationPortInstance = ((ushort)replicationPortValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.ReplicationPort = replicationPortInstance;
                                        }
                                        
                                        JToken allowedAuthenticationTypeValue = replicationProviderSettingsValue["allowedAuthenticationType"];
                                        if (allowedAuthenticationTypeValue != null && allowedAuthenticationTypeValue.Type != JTokenType.Null)
                                        {
                                            ushort allowedAuthenticationTypeInstance = ((ushort)allowedAuthenticationTypeValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.AllowedAuthenticationType = allowedAuthenticationTypeInstance;
                                        }
                                        
                                        JToken replicaDeletionOptionValue = replicationProviderSettingsValue["replicaDeletionOption"];
                                        if (replicaDeletionOptionValue != null && replicaDeletionOptionValue.Type != JTokenType.Null)
                                        {
                                            string replicaDeletionOptionInstance = ((string)replicaDeletionOptionValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.ReplicaDeletionOption = replicaDeletionOptionInstance;
                                        }
                                        
                                        JToken replicationFrequencyInSecondsValue = replicationProviderSettingsValue["replicationFrequencyInSeconds"];
                                        if (replicationFrequencyInSecondsValue != null && replicationFrequencyInSecondsValue.Type != JTokenType.Null)
                                        {
                                            ushort replicationFrequencyInSecondsInstance = ((ushort)replicationFrequencyInSecondsValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.ReplicationFrequencyInSeconds = replicationFrequencyInSecondsInstance;
                                        }
                                        propertiesInstance.ReplicationProviderSettings = hyperVReplicaProtectionProfileDetailsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzureProtectionProfileDetails")
                                    {
                                        HyperVReplicaAzureProtectionProfileDetails hyperVReplicaAzureProtectionProfileDetailsInstance = new HyperVReplicaAzureProtectionProfileDetails();
                                        
                                        JToken recoveryPointHistoryDurationValue = replicationProviderSettingsValue["recoveryPointHistoryDuration"];
                                        if (recoveryPointHistoryDurationValue != null && recoveryPointHistoryDurationValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointHistoryDurationInstance = ((int)recoveryPointHistoryDurationValue);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.RecoveryPointHistoryDuration = recoveryPointHistoryDurationInstance;
                                        }
                                        
                                        JToken applicationConsistentSnapshotFrequencyInHoursValue2 = replicationProviderSettingsValue["applicationConsistentSnapshotFrequencyInHours"];
                                        if (applicationConsistentSnapshotFrequencyInHoursValue2 != null && applicationConsistentSnapshotFrequencyInHoursValue2.Type != JTokenType.Null)
                                        {
                                            int applicationConsistentSnapshotFrequencyInHoursInstance2 = ((int)applicationConsistentSnapshotFrequencyInHoursValue2);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance2;
                                        }
                                        
                                        JToken replicationIntervalValue = replicationProviderSettingsValue["replicationInterval"];
                                        if (replicationIntervalValue != null && replicationIntervalValue.Type != JTokenType.Null)
                                        {
                                            int replicationIntervalInstance = ((int)replicationIntervalValue);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.ReplicationInterval = replicationIntervalInstance;
                                        }
                                        
                                        JToken onlineReplicationStartTimeValue2 = replicationProviderSettingsValue["onlineReplicationStartTime"];
                                        if (onlineReplicationStartTimeValue2 != null && onlineReplicationStartTimeValue2.Type != JTokenType.Null)
                                        {
                                            TimeSpan onlineReplicationStartTimeInstance2 = TimeSpan.Parse(((string)onlineReplicationStartTimeValue2), CultureInfo.InvariantCulture);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance2;
                                        }
                                        
                                        JToken encryptionValue = replicationProviderSettingsValue["encryption"];
                                        if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                        {
                                            string encryptionInstance = ((string)encryptionValue);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.Encryption = encryptionInstance;
                                        }
                                        
                                        JToken activeStorageAccountValue = replicationProviderSettingsValue["activeStorageAccount"];
                                        if (activeStorageAccountValue != null && activeStorageAccountValue.Type != JTokenType.Null)
                                        {
                                            CustomerStorageAccount activeStorageAccountInstance = new CustomerStorageAccount();
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.ActiveStorageAccount = activeStorageAccountInstance;
                                            
                                            JToken storageAccountNameValue = activeStorageAccountValue["storageAccountName"];
                                            if (storageAccountNameValue != null && storageAccountNameValue.Type != JTokenType.Null)
                                            {
                                                string storageAccountNameInstance = ((string)storageAccountNameValue);
                                                activeStorageAccountInstance.StorageAccountName = storageAccountNameInstance;
                                            }
                                            
                                            JToken subscriptionIdValue = activeStorageAccountValue["subscriptionId"];
                                            if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                            {
                                                string subscriptionIdInstance = ((string)subscriptionIdValue);
                                                activeStorageAccountInstance.SubscriptionId = subscriptionIdInstance;
                                            }
                                        }
                                        propertiesInstance.ReplicationProviderSettings = hyperVReplicaAzureProtectionProfileDetailsInstance;
                                    }
                                }
                                
                                JToken associationStatusValue = propertiesValue["associationStatus"];
                                if (associationStatusValue != null && associationStatusValue.Type != JTokenType.Null)
                                {
                                    string associationStatusInstance = ((string)associationStatusValue);
                                    propertiesInstance.AssociationStatus = associationStatusInstance;
                                }
                                
                                JToken associationDetailArray = propertiesValue["associationDetail"];
                                if (associationDetailArray != null && associationDetailArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken associationDetailValue in ((JArray)associationDetailArray))
                                    {
                                        ProtectionProfileAssociationDetails protectionProfileAssociationDetailsInstance = new ProtectionProfileAssociationDetails();
                                        propertiesInstance.AssociationDetail.Add(protectionProfileAssociationDetailsInstance);
                                        
                                        JToken primaryProtectionContainerIdValue = associationDetailValue["primaryProtectionContainerId"];
                                        if (primaryProtectionContainerIdValue != null && primaryProtectionContainerIdValue.Type != JTokenType.Null)
                                        {
                                            string primaryProtectionContainerIdInstance = ((string)primaryProtectionContainerIdValue);
                                            protectionProfileAssociationDetailsInstance.PrimaryProtectionContainerId = primaryProtectionContainerIdInstance;
                                        }
                                        
                                        JToken recoveryProtectionContainerIdValue = associationDetailValue["recoveryProtectionContainerId"];
                                        if (recoveryProtectionContainerIdValue != null && recoveryProtectionContainerIdValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProtectionContainerIdInstance = ((string)recoveryProtectionContainerIdValue);
                                            protectionProfileAssociationDetailsInstance.RecoveryProtectionContainerId = recoveryProtectionContainerIdInstance;
                                        }
                                        
                                        JToken associationStatusValue2 = associationDetailValue["associationStatus"];
                                        if (associationStatusValue2 != null && associationStatusValue2.Type != JTokenType.Null)
                                        {
                                            string associationStatusInstance2 = ((string)associationStatusValue2);
                                            protectionProfileAssociationDetailsInstance.AssociationStatus = associationStatusInstance2;
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                protectionProfileInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                protectionProfileInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                protectionProfileInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                protectionProfileInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    protectionProfileInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<CreateProfileOperationResponse> GetCreateStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetCreateStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/Json");
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CreateProfileOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CreateProfileOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProtectionProfile protectionProfileInstance = new ProtectionProfile();
                            result.ProtectionProfile = protectionProfileInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ProtectionProfileProperties propertiesInstance = new ProtectionProfileProperties();
                                protectionProfileInstance.CustomData = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken protectedEntityCountValue = propertiesValue["protectedEntityCount"];
                                if (protectedEntityCountValue != null && protectedEntityCountValue.Type != JTokenType.Null)
                                {
                                    int protectedEntityCountInstance = ((int)protectedEntityCountValue);
                                    propertiesInstance.ProtectedEntityCount = protectedEntityCountInstance;
                                }
                                
                                JToken replicationProviderValue = propertiesValue["replicationProvider"];
                                if (replicationProviderValue != null && replicationProviderValue.Type != JTokenType.Null)
                                {
                                    string replicationProviderInstance = ((string)replicationProviderValue);
                                    propertiesInstance.ReplicationProvider = replicationProviderInstance;
                                }
                                
                                JToken replicationProviderSettingsValue = propertiesValue["replicationProviderSettings"];
                                if (replicationProviderSettingsValue != null && replicationProviderSettingsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)replicationProviderSettingsValue["__type"]);
                                    if (typeName == "HyperVReplicaProtectionProfileDetails")
                                    {
                                        HyperVReplicaProtectionProfileDetails hyperVReplicaProtectionProfileDetailsInstance = new HyperVReplicaProtectionProfileDetails();
                                        
                                        JToken recoveryPointsValue = replicationProviderSettingsValue["recoveryPoints"];
                                        if (recoveryPointsValue != null && recoveryPointsValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointsInstance = ((int)recoveryPointsValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.RecoveryPoints = recoveryPointsInstance;
                                        }
                                        
                                        JToken applicationConsistentSnapshotFrequencyInHoursValue = replicationProviderSettingsValue["applicationConsistentSnapshotFrequencyInHours"];
                                        if (applicationConsistentSnapshotFrequencyInHoursValue != null && applicationConsistentSnapshotFrequencyInHoursValue.Type != JTokenType.Null)
                                        {
                                            int applicationConsistentSnapshotFrequencyInHoursInstance = ((int)applicationConsistentSnapshotFrequencyInHoursValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance;
                                        }
                                        
                                        JToken compressionValue = replicationProviderSettingsValue["compression"];
                                        if (compressionValue != null && compressionValue.Type != JTokenType.Null)
                                        {
                                            string compressionInstance = ((string)compressionValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.Compression = compressionInstance;
                                        }
                                        
                                        JToken initialReplicationMethodValue = replicationProviderSettingsValue["initialReplicationMethod"];
                                        if (initialReplicationMethodValue != null && initialReplicationMethodValue.Type != JTokenType.Null)
                                        {
                                            string initialReplicationMethodInstance = ((string)initialReplicationMethodValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.InitialReplicationMethod = initialReplicationMethodInstance;
                                        }
                                        
                                        JToken onlineReplicationStartTimeValue = replicationProviderSettingsValue["onlineReplicationStartTime"];
                                        if (onlineReplicationStartTimeValue != null && onlineReplicationStartTimeValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan onlineReplicationStartTimeInstance = TimeSpan.Parse(((string)onlineReplicationStartTimeValue), CultureInfo.InvariantCulture);
                                            hyperVReplicaProtectionProfileDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance;
                                        }
                                        
                                        JToken offlineReplicationImportPathValue = replicationProviderSettingsValue["offlineReplicationImportPath"];
                                        if (offlineReplicationImportPathValue != null && offlineReplicationImportPathValue.Type != JTokenType.Null)
                                        {
                                            string offlineReplicationImportPathInstance = ((string)offlineReplicationImportPathValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.OfflineReplicationImportPath = offlineReplicationImportPathInstance;
                                        }
                                        
                                        JToken offlineReplicationExportPathValue = replicationProviderSettingsValue["offlineReplicationExportPath"];
                                        if (offlineReplicationExportPathValue != null && offlineReplicationExportPathValue.Type != JTokenType.Null)
                                        {
                                            string offlineReplicationExportPathInstance = ((string)offlineReplicationExportPathValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.OfflineReplicationExportPath = offlineReplicationExportPathInstance;
                                        }
                                        
                                        JToken replicationPortValue = replicationProviderSettingsValue["replicationPort"];
                                        if (replicationPortValue != null && replicationPortValue.Type != JTokenType.Null)
                                        {
                                            ushort replicationPortInstance = ((ushort)replicationPortValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.ReplicationPort = replicationPortInstance;
                                        }
                                        
                                        JToken allowedAuthenticationTypeValue = replicationProviderSettingsValue["allowedAuthenticationType"];
                                        if (allowedAuthenticationTypeValue != null && allowedAuthenticationTypeValue.Type != JTokenType.Null)
                                        {
                                            ushort allowedAuthenticationTypeInstance = ((ushort)allowedAuthenticationTypeValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.AllowedAuthenticationType = allowedAuthenticationTypeInstance;
                                        }
                                        
                                        JToken replicaDeletionOptionValue = replicationProviderSettingsValue["replicaDeletionOption"];
                                        if (replicaDeletionOptionValue != null && replicaDeletionOptionValue.Type != JTokenType.Null)
                                        {
                                            string replicaDeletionOptionInstance = ((string)replicaDeletionOptionValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.ReplicaDeletionOption = replicaDeletionOptionInstance;
                                        }
                                        
                                        JToken replicationFrequencyInSecondsValue = replicationProviderSettingsValue["replicationFrequencyInSeconds"];
                                        if (replicationFrequencyInSecondsValue != null && replicationFrequencyInSecondsValue.Type != JTokenType.Null)
                                        {
                                            ushort replicationFrequencyInSecondsInstance = ((ushort)replicationFrequencyInSecondsValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.ReplicationFrequencyInSeconds = replicationFrequencyInSecondsInstance;
                                        }
                                        propertiesInstance.ReplicationProviderSettings = hyperVReplicaProtectionProfileDetailsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzureProtectionProfileDetails")
                                    {
                                        HyperVReplicaAzureProtectionProfileDetails hyperVReplicaAzureProtectionProfileDetailsInstance = new HyperVReplicaAzureProtectionProfileDetails();
                                        
                                        JToken recoveryPointHistoryDurationValue = replicationProviderSettingsValue["recoveryPointHistoryDuration"];
                                        if (recoveryPointHistoryDurationValue != null && recoveryPointHistoryDurationValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointHistoryDurationInstance = ((int)recoveryPointHistoryDurationValue);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.RecoveryPointHistoryDuration = recoveryPointHistoryDurationInstance;
                                        }
                                        
                                        JToken applicationConsistentSnapshotFrequencyInHoursValue2 = replicationProviderSettingsValue["applicationConsistentSnapshotFrequencyInHours"];
                                        if (applicationConsistentSnapshotFrequencyInHoursValue2 != null && applicationConsistentSnapshotFrequencyInHoursValue2.Type != JTokenType.Null)
                                        {
                                            int applicationConsistentSnapshotFrequencyInHoursInstance2 = ((int)applicationConsistentSnapshotFrequencyInHoursValue2);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance2;
                                        }
                                        
                                        JToken replicationIntervalValue = replicationProviderSettingsValue["replicationInterval"];
                                        if (replicationIntervalValue != null && replicationIntervalValue.Type != JTokenType.Null)
                                        {
                                            int replicationIntervalInstance = ((int)replicationIntervalValue);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.ReplicationInterval = replicationIntervalInstance;
                                        }
                                        
                                        JToken onlineReplicationStartTimeValue2 = replicationProviderSettingsValue["onlineReplicationStartTime"];
                                        if (onlineReplicationStartTimeValue2 != null && onlineReplicationStartTimeValue2.Type != JTokenType.Null)
                                        {
                                            TimeSpan onlineReplicationStartTimeInstance2 = TimeSpan.Parse(((string)onlineReplicationStartTimeValue2), CultureInfo.InvariantCulture);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance2;
                                        }
                                        
                                        JToken encryptionValue = replicationProviderSettingsValue["encryption"];
                                        if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                        {
                                            string encryptionInstance = ((string)encryptionValue);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.Encryption = encryptionInstance;
                                        }
                                        
                                        JToken activeStorageAccountValue = replicationProviderSettingsValue["activeStorageAccount"];
                                        if (activeStorageAccountValue != null && activeStorageAccountValue.Type != JTokenType.Null)
                                        {
                                            CustomerStorageAccount activeStorageAccountInstance = new CustomerStorageAccount();
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.ActiveStorageAccount = activeStorageAccountInstance;
                                            
                                            JToken storageAccountNameValue = activeStorageAccountValue["storageAccountName"];
                                            if (storageAccountNameValue != null && storageAccountNameValue.Type != JTokenType.Null)
                                            {
                                                string storageAccountNameInstance = ((string)storageAccountNameValue);
                                                activeStorageAccountInstance.StorageAccountName = storageAccountNameInstance;
                                            }
                                            
                                            JToken subscriptionIdValue = activeStorageAccountValue["subscriptionId"];
                                            if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                            {
                                                string subscriptionIdInstance = ((string)subscriptionIdValue);
                                                activeStorageAccountInstance.SubscriptionId = subscriptionIdInstance;
                                            }
                                        }
                                        propertiesInstance.ReplicationProviderSettings = hyperVReplicaAzureProtectionProfileDetailsInstance;
                                    }
                                }
                                
                                JToken associationStatusValue = propertiesValue["associationStatus"];
                                if (associationStatusValue != null && associationStatusValue.Type != JTokenType.Null)
                                {
                                    string associationStatusInstance = ((string)associationStatusValue);
                                    propertiesInstance.AssociationStatus = associationStatusInstance;
                                }
                                
                                JToken associationDetailArray = propertiesValue["associationDetail"];
                                if (associationDetailArray != null && associationDetailArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken associationDetailValue in ((JArray)associationDetailArray))
                                    {
                                        ProtectionProfileAssociationDetails protectionProfileAssociationDetailsInstance = new ProtectionProfileAssociationDetails();
                                        propertiesInstance.AssociationDetail.Add(protectionProfileAssociationDetailsInstance);
                                        
                                        JToken primaryProtectionContainerIdValue = associationDetailValue["primaryProtectionContainerId"];
                                        if (primaryProtectionContainerIdValue != null && primaryProtectionContainerIdValue.Type != JTokenType.Null)
                                        {
                                            string primaryProtectionContainerIdInstance = ((string)primaryProtectionContainerIdValue);
                                            protectionProfileAssociationDetailsInstance.PrimaryProtectionContainerId = primaryProtectionContainerIdInstance;
                                        }
                                        
                                        JToken recoveryProtectionContainerIdValue = associationDetailValue["recoveryProtectionContainerId"];
                                        if (recoveryProtectionContainerIdValue != null && recoveryProtectionContainerIdValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProtectionContainerIdInstance = ((string)recoveryProtectionContainerIdValue);
                                            protectionProfileAssociationDetailsInstance.RecoveryProtectionContainerId = recoveryProtectionContainerIdInstance;
                                        }
                                        
                                        JToken associationStatusValue2 = associationDetailValue["associationStatus"];
                                        if (associationStatusValue2 != null && associationStatusValue2.Type != JTokenType.Null)
                                        {
                                            string associationStatusInstance2 = ((string)associationStatusValue2);
                                            protectionProfileAssociationDetailsInstance.AssociationStatus = associationStatusInstance2;
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                protectionProfileInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                protectionProfileInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                protectionProfileInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                protectionProfileInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    protectionProfileInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<DeleteProtectionProfileOperationResponse> GetDeleteStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetDeleteStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/Json");
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DeleteProtectionProfileOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DeleteProtectionProfileOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProtectionProfile protectionProfileInstance = new ProtectionProfile();
                            result.ProtectionProfile = protectionProfileInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ProtectionProfileProperties propertiesInstance = new ProtectionProfileProperties();
                                protectionProfileInstance.CustomData = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken protectedEntityCountValue = propertiesValue["protectedEntityCount"];
                                if (protectedEntityCountValue != null && protectedEntityCountValue.Type != JTokenType.Null)
                                {
                                    int protectedEntityCountInstance = ((int)protectedEntityCountValue);
                                    propertiesInstance.ProtectedEntityCount = protectedEntityCountInstance;
                                }
                                
                                JToken replicationProviderValue = propertiesValue["replicationProvider"];
                                if (replicationProviderValue != null && replicationProviderValue.Type != JTokenType.Null)
                                {
                                    string replicationProviderInstance = ((string)replicationProviderValue);
                                    propertiesInstance.ReplicationProvider = replicationProviderInstance;
                                }
                                
                                JToken replicationProviderSettingsValue = propertiesValue["replicationProviderSettings"];
                                if (replicationProviderSettingsValue != null && replicationProviderSettingsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)replicationProviderSettingsValue["__type"]);
                                    if (typeName == "HyperVReplicaProtectionProfileDetails")
                                    {
                                        HyperVReplicaProtectionProfileDetails hyperVReplicaProtectionProfileDetailsInstance = new HyperVReplicaProtectionProfileDetails();
                                        
                                        JToken recoveryPointsValue = replicationProviderSettingsValue["recoveryPoints"];
                                        if (recoveryPointsValue != null && recoveryPointsValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointsInstance = ((int)recoveryPointsValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.RecoveryPoints = recoveryPointsInstance;
                                        }
                                        
                                        JToken applicationConsistentSnapshotFrequencyInHoursValue = replicationProviderSettingsValue["applicationConsistentSnapshotFrequencyInHours"];
                                        if (applicationConsistentSnapshotFrequencyInHoursValue != null && applicationConsistentSnapshotFrequencyInHoursValue.Type != JTokenType.Null)
                                        {
                                            int applicationConsistentSnapshotFrequencyInHoursInstance = ((int)applicationConsistentSnapshotFrequencyInHoursValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance;
                                        }
                                        
                                        JToken compressionValue = replicationProviderSettingsValue["compression"];
                                        if (compressionValue != null && compressionValue.Type != JTokenType.Null)
                                        {
                                            string compressionInstance = ((string)compressionValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.Compression = compressionInstance;
                                        }
                                        
                                        JToken initialReplicationMethodValue = replicationProviderSettingsValue["initialReplicationMethod"];
                                        if (initialReplicationMethodValue != null && initialReplicationMethodValue.Type != JTokenType.Null)
                                        {
                                            string initialReplicationMethodInstance = ((string)initialReplicationMethodValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.InitialReplicationMethod = initialReplicationMethodInstance;
                                        }
                                        
                                        JToken onlineReplicationStartTimeValue = replicationProviderSettingsValue["onlineReplicationStartTime"];
                                        if (onlineReplicationStartTimeValue != null && onlineReplicationStartTimeValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan onlineReplicationStartTimeInstance = TimeSpan.Parse(((string)onlineReplicationStartTimeValue), CultureInfo.InvariantCulture);
                                            hyperVReplicaProtectionProfileDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance;
                                        }
                                        
                                        JToken offlineReplicationImportPathValue = replicationProviderSettingsValue["offlineReplicationImportPath"];
                                        if (offlineReplicationImportPathValue != null && offlineReplicationImportPathValue.Type != JTokenType.Null)
                                        {
                                            string offlineReplicationImportPathInstance = ((string)offlineReplicationImportPathValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.OfflineReplicationImportPath = offlineReplicationImportPathInstance;
                                        }
                                        
                                        JToken offlineReplicationExportPathValue = replicationProviderSettingsValue["offlineReplicationExportPath"];
                                        if (offlineReplicationExportPathValue != null && offlineReplicationExportPathValue.Type != JTokenType.Null)
                                        {
                                            string offlineReplicationExportPathInstance = ((string)offlineReplicationExportPathValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.OfflineReplicationExportPath = offlineReplicationExportPathInstance;
                                        }
                                        
                                        JToken replicationPortValue = replicationProviderSettingsValue["replicationPort"];
                                        if (replicationPortValue != null && replicationPortValue.Type != JTokenType.Null)
                                        {
                                            ushort replicationPortInstance = ((ushort)replicationPortValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.ReplicationPort = replicationPortInstance;
                                        }
                                        
                                        JToken allowedAuthenticationTypeValue = replicationProviderSettingsValue["allowedAuthenticationType"];
                                        if (allowedAuthenticationTypeValue != null && allowedAuthenticationTypeValue.Type != JTokenType.Null)
                                        {
                                            ushort allowedAuthenticationTypeInstance = ((ushort)allowedAuthenticationTypeValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.AllowedAuthenticationType = allowedAuthenticationTypeInstance;
                                        }
                                        
                                        JToken replicaDeletionOptionValue = replicationProviderSettingsValue["replicaDeletionOption"];
                                        if (replicaDeletionOptionValue != null && replicaDeletionOptionValue.Type != JTokenType.Null)
                                        {
                                            string replicaDeletionOptionInstance = ((string)replicaDeletionOptionValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.ReplicaDeletionOption = replicaDeletionOptionInstance;
                                        }
                                        
                                        JToken replicationFrequencyInSecondsValue = replicationProviderSettingsValue["replicationFrequencyInSeconds"];
                                        if (replicationFrequencyInSecondsValue != null && replicationFrequencyInSecondsValue.Type != JTokenType.Null)
                                        {
                                            ushort replicationFrequencyInSecondsInstance = ((ushort)replicationFrequencyInSecondsValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.ReplicationFrequencyInSeconds = replicationFrequencyInSecondsInstance;
                                        }
                                        propertiesInstance.ReplicationProviderSettings = hyperVReplicaProtectionProfileDetailsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzureProtectionProfileDetails")
                                    {
                                        HyperVReplicaAzureProtectionProfileDetails hyperVReplicaAzureProtectionProfileDetailsInstance = new HyperVReplicaAzureProtectionProfileDetails();
                                        
                                        JToken recoveryPointHistoryDurationValue = replicationProviderSettingsValue["recoveryPointHistoryDuration"];
                                        if (recoveryPointHistoryDurationValue != null && recoveryPointHistoryDurationValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointHistoryDurationInstance = ((int)recoveryPointHistoryDurationValue);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.RecoveryPointHistoryDuration = recoveryPointHistoryDurationInstance;
                                        }
                                        
                                        JToken applicationConsistentSnapshotFrequencyInHoursValue2 = replicationProviderSettingsValue["applicationConsistentSnapshotFrequencyInHours"];
                                        if (applicationConsistentSnapshotFrequencyInHoursValue2 != null && applicationConsistentSnapshotFrequencyInHoursValue2.Type != JTokenType.Null)
                                        {
                                            int applicationConsistentSnapshotFrequencyInHoursInstance2 = ((int)applicationConsistentSnapshotFrequencyInHoursValue2);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance2;
                                        }
                                        
                                        JToken replicationIntervalValue = replicationProviderSettingsValue["replicationInterval"];
                                        if (replicationIntervalValue != null && replicationIntervalValue.Type != JTokenType.Null)
                                        {
                                            int replicationIntervalInstance = ((int)replicationIntervalValue);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.ReplicationInterval = replicationIntervalInstance;
                                        }
                                        
                                        JToken onlineReplicationStartTimeValue2 = replicationProviderSettingsValue["onlineReplicationStartTime"];
                                        if (onlineReplicationStartTimeValue2 != null && onlineReplicationStartTimeValue2.Type != JTokenType.Null)
                                        {
                                            TimeSpan onlineReplicationStartTimeInstance2 = TimeSpan.Parse(((string)onlineReplicationStartTimeValue2), CultureInfo.InvariantCulture);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance2;
                                        }
                                        
                                        JToken encryptionValue = replicationProviderSettingsValue["encryption"];
                                        if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                        {
                                            string encryptionInstance = ((string)encryptionValue);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.Encryption = encryptionInstance;
                                        }
                                        
                                        JToken activeStorageAccountValue = replicationProviderSettingsValue["activeStorageAccount"];
                                        if (activeStorageAccountValue != null && activeStorageAccountValue.Type != JTokenType.Null)
                                        {
                                            CustomerStorageAccount activeStorageAccountInstance = new CustomerStorageAccount();
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.ActiveStorageAccount = activeStorageAccountInstance;
                                            
                                            JToken storageAccountNameValue = activeStorageAccountValue["storageAccountName"];
                                            if (storageAccountNameValue != null && storageAccountNameValue.Type != JTokenType.Null)
                                            {
                                                string storageAccountNameInstance = ((string)storageAccountNameValue);
                                                activeStorageAccountInstance.StorageAccountName = storageAccountNameInstance;
                                            }
                                            
                                            JToken subscriptionIdValue = activeStorageAccountValue["subscriptionId"];
                                            if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                            {
                                                string subscriptionIdInstance = ((string)subscriptionIdValue);
                                                activeStorageAccountInstance.SubscriptionId = subscriptionIdInstance;
                                            }
                                        }
                                        propertiesInstance.ReplicationProviderSettings = hyperVReplicaAzureProtectionProfileDetailsInstance;
                                    }
                                }
                                
                                JToken associationStatusValue = propertiesValue["associationStatus"];
                                if (associationStatusValue != null && associationStatusValue.Type != JTokenType.Null)
                                {
                                    string associationStatusInstance = ((string)associationStatusValue);
                                    propertiesInstance.AssociationStatus = associationStatusInstance;
                                }
                                
                                JToken associationDetailArray = propertiesValue["associationDetail"];
                                if (associationDetailArray != null && associationDetailArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken associationDetailValue in ((JArray)associationDetailArray))
                                    {
                                        ProtectionProfileAssociationDetails protectionProfileAssociationDetailsInstance = new ProtectionProfileAssociationDetails();
                                        propertiesInstance.AssociationDetail.Add(protectionProfileAssociationDetailsInstance);
                                        
                                        JToken primaryProtectionContainerIdValue = associationDetailValue["primaryProtectionContainerId"];
                                        if (primaryProtectionContainerIdValue != null && primaryProtectionContainerIdValue.Type != JTokenType.Null)
                                        {
                                            string primaryProtectionContainerIdInstance = ((string)primaryProtectionContainerIdValue);
                                            protectionProfileAssociationDetailsInstance.PrimaryProtectionContainerId = primaryProtectionContainerIdInstance;
                                        }
                                        
                                        JToken recoveryProtectionContainerIdValue = associationDetailValue["recoveryProtectionContainerId"];
                                        if (recoveryProtectionContainerIdValue != null && recoveryProtectionContainerIdValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProtectionContainerIdInstance = ((string)recoveryProtectionContainerIdValue);
                                            protectionProfileAssociationDetailsInstance.RecoveryProtectionContainerId = recoveryProtectionContainerIdInstance;
                                        }
                                        
                                        JToken associationStatusValue2 = associationDetailValue["associationStatus"];
                                        if (associationStatusValue2 != null && associationStatusValue2.Type != JTokenType.Null)
                                        {
                                            string associationStatusInstance2 = ((string)associationStatusValue2);
                                            protectionProfileAssociationDetailsInstance.AssociationStatus = associationStatusInstance2;
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                protectionProfileInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                protectionProfileInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                protectionProfileInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                protectionProfileInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    protectionProfileInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<DissociateProtectionProfileOperationResponse> GetDissociateStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetDissociateStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/Json");
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DissociateProtectionProfileOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DissociateProtectionProfileOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProtectionProfile protectionProfileInstance = new ProtectionProfile();
                            result.ProtectionProfile = protectionProfileInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ProtectionProfileProperties propertiesInstance = new ProtectionProfileProperties();
                                protectionProfileInstance.CustomData = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken protectedEntityCountValue = propertiesValue["protectedEntityCount"];
                                if (protectedEntityCountValue != null && protectedEntityCountValue.Type != JTokenType.Null)
                                {
                                    int protectedEntityCountInstance = ((int)protectedEntityCountValue);
                                    propertiesInstance.ProtectedEntityCount = protectedEntityCountInstance;
                                }
                                
                                JToken replicationProviderValue = propertiesValue["replicationProvider"];
                                if (replicationProviderValue != null && replicationProviderValue.Type != JTokenType.Null)
                                {
                                    string replicationProviderInstance = ((string)replicationProviderValue);
                                    propertiesInstance.ReplicationProvider = replicationProviderInstance;
                                }
                                
                                JToken replicationProviderSettingsValue = propertiesValue["replicationProviderSettings"];
                                if (replicationProviderSettingsValue != null && replicationProviderSettingsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)replicationProviderSettingsValue["__type"]);
                                    if (typeName == "HyperVReplicaProtectionProfileDetails")
                                    {
                                        HyperVReplicaProtectionProfileDetails hyperVReplicaProtectionProfileDetailsInstance = new HyperVReplicaProtectionProfileDetails();
                                        
                                        JToken recoveryPointsValue = replicationProviderSettingsValue["recoveryPoints"];
                                        if (recoveryPointsValue != null && recoveryPointsValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointsInstance = ((int)recoveryPointsValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.RecoveryPoints = recoveryPointsInstance;
                                        }
                                        
                                        JToken applicationConsistentSnapshotFrequencyInHoursValue = replicationProviderSettingsValue["applicationConsistentSnapshotFrequencyInHours"];
                                        if (applicationConsistentSnapshotFrequencyInHoursValue != null && applicationConsistentSnapshotFrequencyInHoursValue.Type != JTokenType.Null)
                                        {
                                            int applicationConsistentSnapshotFrequencyInHoursInstance = ((int)applicationConsistentSnapshotFrequencyInHoursValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance;
                                        }
                                        
                                        JToken compressionValue = replicationProviderSettingsValue["compression"];
                                        if (compressionValue != null && compressionValue.Type != JTokenType.Null)
                                        {
                                            string compressionInstance = ((string)compressionValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.Compression = compressionInstance;
                                        }
                                        
                                        JToken initialReplicationMethodValue = replicationProviderSettingsValue["initialReplicationMethod"];
                                        if (initialReplicationMethodValue != null && initialReplicationMethodValue.Type != JTokenType.Null)
                                        {
                                            string initialReplicationMethodInstance = ((string)initialReplicationMethodValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.InitialReplicationMethod = initialReplicationMethodInstance;
                                        }
                                        
                                        JToken onlineReplicationStartTimeValue = replicationProviderSettingsValue["onlineReplicationStartTime"];
                                        if (onlineReplicationStartTimeValue != null && onlineReplicationStartTimeValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan onlineReplicationStartTimeInstance = TimeSpan.Parse(((string)onlineReplicationStartTimeValue), CultureInfo.InvariantCulture);
                                            hyperVReplicaProtectionProfileDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance;
                                        }
                                        
                                        JToken offlineReplicationImportPathValue = replicationProviderSettingsValue["offlineReplicationImportPath"];
                                        if (offlineReplicationImportPathValue != null && offlineReplicationImportPathValue.Type != JTokenType.Null)
                                        {
                                            string offlineReplicationImportPathInstance = ((string)offlineReplicationImportPathValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.OfflineReplicationImportPath = offlineReplicationImportPathInstance;
                                        }
                                        
                                        JToken offlineReplicationExportPathValue = replicationProviderSettingsValue["offlineReplicationExportPath"];
                                        if (offlineReplicationExportPathValue != null && offlineReplicationExportPathValue.Type != JTokenType.Null)
                                        {
                                            string offlineReplicationExportPathInstance = ((string)offlineReplicationExportPathValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.OfflineReplicationExportPath = offlineReplicationExportPathInstance;
                                        }
                                        
                                        JToken replicationPortValue = replicationProviderSettingsValue["replicationPort"];
                                        if (replicationPortValue != null && replicationPortValue.Type != JTokenType.Null)
                                        {
                                            ushort replicationPortInstance = ((ushort)replicationPortValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.ReplicationPort = replicationPortInstance;
                                        }
                                        
                                        JToken allowedAuthenticationTypeValue = replicationProviderSettingsValue["allowedAuthenticationType"];
                                        if (allowedAuthenticationTypeValue != null && allowedAuthenticationTypeValue.Type != JTokenType.Null)
                                        {
                                            ushort allowedAuthenticationTypeInstance = ((ushort)allowedAuthenticationTypeValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.AllowedAuthenticationType = allowedAuthenticationTypeInstance;
                                        }
                                        
                                        JToken replicaDeletionOptionValue = replicationProviderSettingsValue["replicaDeletionOption"];
                                        if (replicaDeletionOptionValue != null && replicaDeletionOptionValue.Type != JTokenType.Null)
                                        {
                                            string replicaDeletionOptionInstance = ((string)replicaDeletionOptionValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.ReplicaDeletionOption = replicaDeletionOptionInstance;
                                        }
                                        
                                        JToken replicationFrequencyInSecondsValue = replicationProviderSettingsValue["replicationFrequencyInSeconds"];
                                        if (replicationFrequencyInSecondsValue != null && replicationFrequencyInSecondsValue.Type != JTokenType.Null)
                                        {
                                            ushort replicationFrequencyInSecondsInstance = ((ushort)replicationFrequencyInSecondsValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.ReplicationFrequencyInSeconds = replicationFrequencyInSecondsInstance;
                                        }
                                        propertiesInstance.ReplicationProviderSettings = hyperVReplicaProtectionProfileDetailsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzureProtectionProfileDetails")
                                    {
                                        HyperVReplicaAzureProtectionProfileDetails hyperVReplicaAzureProtectionProfileDetailsInstance = new HyperVReplicaAzureProtectionProfileDetails();
                                        
                                        JToken recoveryPointHistoryDurationValue = replicationProviderSettingsValue["recoveryPointHistoryDuration"];
                                        if (recoveryPointHistoryDurationValue != null && recoveryPointHistoryDurationValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointHistoryDurationInstance = ((int)recoveryPointHistoryDurationValue);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.RecoveryPointHistoryDuration = recoveryPointHistoryDurationInstance;
                                        }
                                        
                                        JToken applicationConsistentSnapshotFrequencyInHoursValue2 = replicationProviderSettingsValue["applicationConsistentSnapshotFrequencyInHours"];
                                        if (applicationConsistentSnapshotFrequencyInHoursValue2 != null && applicationConsistentSnapshotFrequencyInHoursValue2.Type != JTokenType.Null)
                                        {
                                            int applicationConsistentSnapshotFrequencyInHoursInstance2 = ((int)applicationConsistentSnapshotFrequencyInHoursValue2);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance2;
                                        }
                                        
                                        JToken replicationIntervalValue = replicationProviderSettingsValue["replicationInterval"];
                                        if (replicationIntervalValue != null && replicationIntervalValue.Type != JTokenType.Null)
                                        {
                                            int replicationIntervalInstance = ((int)replicationIntervalValue);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.ReplicationInterval = replicationIntervalInstance;
                                        }
                                        
                                        JToken onlineReplicationStartTimeValue2 = replicationProviderSettingsValue["onlineReplicationStartTime"];
                                        if (onlineReplicationStartTimeValue2 != null && onlineReplicationStartTimeValue2.Type != JTokenType.Null)
                                        {
                                            TimeSpan onlineReplicationStartTimeInstance2 = TimeSpan.Parse(((string)onlineReplicationStartTimeValue2), CultureInfo.InvariantCulture);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance2;
                                        }
                                        
                                        JToken encryptionValue = replicationProviderSettingsValue["encryption"];
                                        if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                        {
                                            string encryptionInstance = ((string)encryptionValue);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.Encryption = encryptionInstance;
                                        }
                                        
                                        JToken activeStorageAccountValue = replicationProviderSettingsValue["activeStorageAccount"];
                                        if (activeStorageAccountValue != null && activeStorageAccountValue.Type != JTokenType.Null)
                                        {
                                            CustomerStorageAccount activeStorageAccountInstance = new CustomerStorageAccount();
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.ActiveStorageAccount = activeStorageAccountInstance;
                                            
                                            JToken storageAccountNameValue = activeStorageAccountValue["storageAccountName"];
                                            if (storageAccountNameValue != null && storageAccountNameValue.Type != JTokenType.Null)
                                            {
                                                string storageAccountNameInstance = ((string)storageAccountNameValue);
                                                activeStorageAccountInstance.StorageAccountName = storageAccountNameInstance;
                                            }
                                            
                                            JToken subscriptionIdValue = activeStorageAccountValue["subscriptionId"];
                                            if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                            {
                                                string subscriptionIdInstance = ((string)subscriptionIdValue);
                                                activeStorageAccountInstance.SubscriptionId = subscriptionIdInstance;
                                            }
                                        }
                                        propertiesInstance.ReplicationProviderSettings = hyperVReplicaAzureProtectionProfileDetailsInstance;
                                    }
                                }
                                
                                JToken associationStatusValue = propertiesValue["associationStatus"];
                                if (associationStatusValue != null && associationStatusValue.Type != JTokenType.Null)
                                {
                                    string associationStatusInstance = ((string)associationStatusValue);
                                    propertiesInstance.AssociationStatus = associationStatusInstance;
                                }
                                
                                JToken associationDetailArray = propertiesValue["associationDetail"];
                                if (associationDetailArray != null && associationDetailArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken associationDetailValue in ((JArray)associationDetailArray))
                                    {
                                        ProtectionProfileAssociationDetails protectionProfileAssociationDetailsInstance = new ProtectionProfileAssociationDetails();
                                        propertiesInstance.AssociationDetail.Add(protectionProfileAssociationDetailsInstance);
                                        
                                        JToken primaryProtectionContainerIdValue = associationDetailValue["primaryProtectionContainerId"];
                                        if (primaryProtectionContainerIdValue != null && primaryProtectionContainerIdValue.Type != JTokenType.Null)
                                        {
                                            string primaryProtectionContainerIdInstance = ((string)primaryProtectionContainerIdValue);
                                            protectionProfileAssociationDetailsInstance.PrimaryProtectionContainerId = primaryProtectionContainerIdInstance;
                                        }
                                        
                                        JToken recoveryProtectionContainerIdValue = associationDetailValue["recoveryProtectionContainerId"];
                                        if (recoveryProtectionContainerIdValue != null && recoveryProtectionContainerIdValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProtectionContainerIdInstance = ((string)recoveryProtectionContainerIdValue);
                                            protectionProfileAssociationDetailsInstance.RecoveryProtectionContainerId = recoveryProtectionContainerIdInstance;
                                        }
                                        
                                        JToken associationStatusValue2 = associationDetailValue["associationStatus"];
                                        if (associationStatusValue2 != null && associationStatusValue2.Type != JTokenType.Null)
                                        {
                                            string associationStatusInstance2 = ((string)associationStatusValue2);
                                            protectionProfileAssociationDetailsInstance.AssociationStatus = associationStatusInstance2;
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                protectionProfileInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                protectionProfileInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                protectionProfileInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                protectionProfileInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    protectionProfileInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<UpdateProtectionProfileOperationResponse> GetUpdateStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetUpdateStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/Json");
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    UpdateProtectionProfileOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new UpdateProtectionProfileOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProtectionProfile protectionProfileInstance = new ProtectionProfile();
                            result.ProtectionProfile = protectionProfileInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ProtectionProfileProperties propertiesInstance = new ProtectionProfileProperties();
                                protectionProfileInstance.CustomData = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken protectedEntityCountValue = propertiesValue["protectedEntityCount"];
                                if (protectedEntityCountValue != null && protectedEntityCountValue.Type != JTokenType.Null)
                                {
                                    int protectedEntityCountInstance = ((int)protectedEntityCountValue);
                                    propertiesInstance.ProtectedEntityCount = protectedEntityCountInstance;
                                }
                                
                                JToken replicationProviderValue = propertiesValue["replicationProvider"];
                                if (replicationProviderValue != null && replicationProviderValue.Type != JTokenType.Null)
                                {
                                    string replicationProviderInstance = ((string)replicationProviderValue);
                                    propertiesInstance.ReplicationProvider = replicationProviderInstance;
                                }
                                
                                JToken replicationProviderSettingsValue = propertiesValue["replicationProviderSettings"];
                                if (replicationProviderSettingsValue != null && replicationProviderSettingsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)replicationProviderSettingsValue["__type"]);
                                    if (typeName == "HyperVReplicaProtectionProfileDetails")
                                    {
                                        HyperVReplicaProtectionProfileDetails hyperVReplicaProtectionProfileDetailsInstance = new HyperVReplicaProtectionProfileDetails();
                                        
                                        JToken recoveryPointsValue = replicationProviderSettingsValue["recoveryPoints"];
                                        if (recoveryPointsValue != null && recoveryPointsValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointsInstance = ((int)recoveryPointsValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.RecoveryPoints = recoveryPointsInstance;
                                        }
                                        
                                        JToken applicationConsistentSnapshotFrequencyInHoursValue = replicationProviderSettingsValue["applicationConsistentSnapshotFrequencyInHours"];
                                        if (applicationConsistentSnapshotFrequencyInHoursValue != null && applicationConsistentSnapshotFrequencyInHoursValue.Type != JTokenType.Null)
                                        {
                                            int applicationConsistentSnapshotFrequencyInHoursInstance = ((int)applicationConsistentSnapshotFrequencyInHoursValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance;
                                        }
                                        
                                        JToken compressionValue = replicationProviderSettingsValue["compression"];
                                        if (compressionValue != null && compressionValue.Type != JTokenType.Null)
                                        {
                                            string compressionInstance = ((string)compressionValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.Compression = compressionInstance;
                                        }
                                        
                                        JToken initialReplicationMethodValue = replicationProviderSettingsValue["initialReplicationMethod"];
                                        if (initialReplicationMethodValue != null && initialReplicationMethodValue.Type != JTokenType.Null)
                                        {
                                            string initialReplicationMethodInstance = ((string)initialReplicationMethodValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.InitialReplicationMethod = initialReplicationMethodInstance;
                                        }
                                        
                                        JToken onlineReplicationStartTimeValue = replicationProviderSettingsValue["onlineReplicationStartTime"];
                                        if (onlineReplicationStartTimeValue != null && onlineReplicationStartTimeValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan onlineReplicationStartTimeInstance = TimeSpan.Parse(((string)onlineReplicationStartTimeValue), CultureInfo.InvariantCulture);
                                            hyperVReplicaProtectionProfileDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance;
                                        }
                                        
                                        JToken offlineReplicationImportPathValue = replicationProviderSettingsValue["offlineReplicationImportPath"];
                                        if (offlineReplicationImportPathValue != null && offlineReplicationImportPathValue.Type != JTokenType.Null)
                                        {
                                            string offlineReplicationImportPathInstance = ((string)offlineReplicationImportPathValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.OfflineReplicationImportPath = offlineReplicationImportPathInstance;
                                        }
                                        
                                        JToken offlineReplicationExportPathValue = replicationProviderSettingsValue["offlineReplicationExportPath"];
                                        if (offlineReplicationExportPathValue != null && offlineReplicationExportPathValue.Type != JTokenType.Null)
                                        {
                                            string offlineReplicationExportPathInstance = ((string)offlineReplicationExportPathValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.OfflineReplicationExportPath = offlineReplicationExportPathInstance;
                                        }
                                        
                                        JToken replicationPortValue = replicationProviderSettingsValue["replicationPort"];
                                        if (replicationPortValue != null && replicationPortValue.Type != JTokenType.Null)
                                        {
                                            ushort replicationPortInstance = ((ushort)replicationPortValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.ReplicationPort = replicationPortInstance;
                                        }
                                        
                                        JToken allowedAuthenticationTypeValue = replicationProviderSettingsValue["allowedAuthenticationType"];
                                        if (allowedAuthenticationTypeValue != null && allowedAuthenticationTypeValue.Type != JTokenType.Null)
                                        {
                                            ushort allowedAuthenticationTypeInstance = ((ushort)allowedAuthenticationTypeValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.AllowedAuthenticationType = allowedAuthenticationTypeInstance;
                                        }
                                        
                                        JToken replicaDeletionOptionValue = replicationProviderSettingsValue["replicaDeletionOption"];
                                        if (replicaDeletionOptionValue != null && replicaDeletionOptionValue.Type != JTokenType.Null)
                                        {
                                            string replicaDeletionOptionInstance = ((string)replicaDeletionOptionValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.ReplicaDeletionOption = replicaDeletionOptionInstance;
                                        }
                                        
                                        JToken replicationFrequencyInSecondsValue = replicationProviderSettingsValue["replicationFrequencyInSeconds"];
                                        if (replicationFrequencyInSecondsValue != null && replicationFrequencyInSecondsValue.Type != JTokenType.Null)
                                        {
                                            ushort replicationFrequencyInSecondsInstance = ((ushort)replicationFrequencyInSecondsValue);
                                            hyperVReplicaProtectionProfileDetailsInstance.ReplicationFrequencyInSeconds = replicationFrequencyInSecondsInstance;
                                        }
                                        propertiesInstance.ReplicationProviderSettings = hyperVReplicaProtectionProfileDetailsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzureProtectionProfileDetails")
                                    {
                                        HyperVReplicaAzureProtectionProfileDetails hyperVReplicaAzureProtectionProfileDetailsInstance = new HyperVReplicaAzureProtectionProfileDetails();
                                        
                                        JToken recoveryPointHistoryDurationValue = replicationProviderSettingsValue["recoveryPointHistoryDuration"];
                                        if (recoveryPointHistoryDurationValue != null && recoveryPointHistoryDurationValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointHistoryDurationInstance = ((int)recoveryPointHistoryDurationValue);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.RecoveryPointHistoryDuration = recoveryPointHistoryDurationInstance;
                                        }
                                        
                                        JToken applicationConsistentSnapshotFrequencyInHoursValue2 = replicationProviderSettingsValue["applicationConsistentSnapshotFrequencyInHours"];
                                        if (applicationConsistentSnapshotFrequencyInHoursValue2 != null && applicationConsistentSnapshotFrequencyInHoursValue2.Type != JTokenType.Null)
                                        {
                                            int applicationConsistentSnapshotFrequencyInHoursInstance2 = ((int)applicationConsistentSnapshotFrequencyInHoursValue2);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance2;
                                        }
                                        
                                        JToken replicationIntervalValue = replicationProviderSettingsValue["replicationInterval"];
                                        if (replicationIntervalValue != null && replicationIntervalValue.Type != JTokenType.Null)
                                        {
                                            int replicationIntervalInstance = ((int)replicationIntervalValue);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.ReplicationInterval = replicationIntervalInstance;
                                        }
                                        
                                        JToken onlineReplicationStartTimeValue2 = replicationProviderSettingsValue["onlineReplicationStartTime"];
                                        if (onlineReplicationStartTimeValue2 != null && onlineReplicationStartTimeValue2.Type != JTokenType.Null)
                                        {
                                            TimeSpan onlineReplicationStartTimeInstance2 = TimeSpan.Parse(((string)onlineReplicationStartTimeValue2), CultureInfo.InvariantCulture);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance2;
                                        }
                                        
                                        JToken encryptionValue = replicationProviderSettingsValue["encryption"];
                                        if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                        {
                                            string encryptionInstance = ((string)encryptionValue);
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.Encryption = encryptionInstance;
                                        }
                                        
                                        JToken activeStorageAccountValue = replicationProviderSettingsValue["activeStorageAccount"];
                                        if (activeStorageAccountValue != null && activeStorageAccountValue.Type != JTokenType.Null)
                                        {
                                            CustomerStorageAccount activeStorageAccountInstance = new CustomerStorageAccount();
                                            hyperVReplicaAzureProtectionProfileDetailsInstance.ActiveStorageAccount = activeStorageAccountInstance;
                                            
                                            JToken storageAccountNameValue = activeStorageAccountValue["storageAccountName"];
                                            if (storageAccountNameValue != null && storageAccountNameValue.Type != JTokenType.Null)
                                            {
                                                string storageAccountNameInstance = ((string)storageAccountNameValue);
                                                activeStorageAccountInstance.StorageAccountName = storageAccountNameInstance;
                                            }
                                            
                                            JToken subscriptionIdValue = activeStorageAccountValue["subscriptionId"];
                                            if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                            {
                                                string subscriptionIdInstance = ((string)subscriptionIdValue);
                                                activeStorageAccountInstance.SubscriptionId = subscriptionIdInstance;
                                            }
                                        }
                                        propertiesInstance.ReplicationProviderSettings = hyperVReplicaAzureProtectionProfileDetailsInstance;
                                    }
                                }
                                
                                JToken associationStatusValue = propertiesValue["associationStatus"];
                                if (associationStatusValue != null && associationStatusValue.Type != JTokenType.Null)
                                {
                                    string associationStatusInstance = ((string)associationStatusValue);
                                    propertiesInstance.AssociationStatus = associationStatusInstance;
                                }
                                
                                JToken associationDetailArray = propertiesValue["associationDetail"];
                                if (associationDetailArray != null && associationDetailArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken associationDetailValue in ((JArray)associationDetailArray))
                                    {
                                        ProtectionProfileAssociationDetails protectionProfileAssociationDetailsInstance = new ProtectionProfileAssociationDetails();
                                        propertiesInstance.AssociationDetail.Add(protectionProfileAssociationDetailsInstance);
                                        
                                        JToken primaryProtectionContainerIdValue = associationDetailValue["primaryProtectionContainerId"];
                                        if (primaryProtectionContainerIdValue != null && primaryProtectionContainerIdValue.Type != JTokenType.Null)
                                        {
                                            string primaryProtectionContainerIdInstance = ((string)primaryProtectionContainerIdValue);
                                            protectionProfileAssociationDetailsInstance.PrimaryProtectionContainerId = primaryProtectionContainerIdInstance;
                                        }
                                        
                                        JToken recoveryProtectionContainerIdValue = associationDetailValue["recoveryProtectionContainerId"];
                                        if (recoveryProtectionContainerIdValue != null && recoveryProtectionContainerIdValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProtectionContainerIdInstance = ((string)recoveryProtectionContainerIdValue);
                                            protectionProfileAssociationDetailsInstance.RecoveryProtectionContainerId = recoveryProtectionContainerIdInstance;
                                        }
                                        
                                        JToken associationStatusValue2 = associationDetailValue["associationStatus"];
                                        if (associationStatusValue2 != null && associationStatusValue2.Type != JTokenType.Null)
                                        {
                                            string associationStatusInstance2 = ((string)associationStatusValue2);
                                            protectionProfileAssociationDetailsInstance.AssociationStatus = associationStatusInstance2;
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                protectionProfileInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                protectionProfileInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                protectionProfileInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                protectionProfileInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    protectionProfileInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the list of all ProtectionContainers for the given server.
        /// </summary>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list ProtectionProfiles operation.
        /// </returns>
        public async Task<ProtectionProfileListResponse> ListAsync(CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.SiteRecovery";
            url = url + "/";
            url = url + "SiteRecoveryVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/ProtectionProfiles";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-08-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProtectionProfileListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProtectionProfileListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ProtectionProfile protectionProfileInstance = new ProtectionProfile();
                                    result.ProtectionProfiles.Add(protectionProfileInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        ProtectionProfileProperties propertiesInstance = new ProtectionProfileProperties();
                                        protectionProfileInstance.CustomData = propertiesInstance;
                                        
                                        JToken friendlyNameValue = propertiesValue["friendlyName"];
                                        if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string friendlyNameInstance = ((string)friendlyNameValue);
                                            propertiesInstance.FriendlyName = friendlyNameInstance;
                                        }
                                        
                                        JToken protectedEntityCountValue = propertiesValue["protectedEntityCount"];
                                        if (protectedEntityCountValue != null && protectedEntityCountValue.Type != JTokenType.Null)
                                        {
                                            int protectedEntityCountInstance = ((int)protectedEntityCountValue);
                                            propertiesInstance.ProtectedEntityCount = protectedEntityCountInstance;
                                        }
                                        
                                        JToken replicationProviderValue = propertiesValue["replicationProvider"];
                                        if (replicationProviderValue != null && replicationProviderValue.Type != JTokenType.Null)
                                        {
                                            string replicationProviderInstance = ((string)replicationProviderValue);
                                            propertiesInstance.ReplicationProvider = replicationProviderInstance;
                                        }
                                        
                                        JToken replicationProviderSettingsValue = propertiesValue["replicationProviderSettings"];
                                        if (replicationProviderSettingsValue != null && replicationProviderSettingsValue.Type != JTokenType.Null)
                                        {
                                            string typeName = ((string)replicationProviderSettingsValue["__type"]);
                                            if (typeName == "HyperVReplicaProtectionProfileDetails")
                                            {
                                                HyperVReplicaProtectionProfileDetails hyperVReplicaProtectionProfileDetailsInstance = new HyperVReplicaProtectionProfileDetails();
                                                
                                                JToken recoveryPointsValue = replicationProviderSettingsValue["recoveryPoints"];
                                                if (recoveryPointsValue != null && recoveryPointsValue.Type != JTokenType.Null)
                                                {
                                                    int recoveryPointsInstance = ((int)recoveryPointsValue);
                                                    hyperVReplicaProtectionProfileDetailsInstance.RecoveryPoints = recoveryPointsInstance;
                                                }
                                                
                                                JToken applicationConsistentSnapshotFrequencyInHoursValue = replicationProviderSettingsValue["applicationConsistentSnapshotFrequencyInHours"];
                                                if (applicationConsistentSnapshotFrequencyInHoursValue != null && applicationConsistentSnapshotFrequencyInHoursValue.Type != JTokenType.Null)
                                                {
                                                    int applicationConsistentSnapshotFrequencyInHoursInstance = ((int)applicationConsistentSnapshotFrequencyInHoursValue);
                                                    hyperVReplicaProtectionProfileDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance;
                                                }
                                                
                                                JToken compressionValue = replicationProviderSettingsValue["compression"];
                                                if (compressionValue != null && compressionValue.Type != JTokenType.Null)
                                                {
                                                    string compressionInstance = ((string)compressionValue);
                                                    hyperVReplicaProtectionProfileDetailsInstance.Compression = compressionInstance;
                                                }
                                                
                                                JToken initialReplicationMethodValue = replicationProviderSettingsValue["initialReplicationMethod"];
                                                if (initialReplicationMethodValue != null && initialReplicationMethodValue.Type != JTokenType.Null)
                                                {
                                                    string initialReplicationMethodInstance = ((string)initialReplicationMethodValue);
                                                    hyperVReplicaProtectionProfileDetailsInstance.InitialReplicationMethod = initialReplicationMethodInstance;
                                                }
                                                
                                                JToken onlineReplicationStartTimeValue = replicationProviderSettingsValue["onlineReplicationStartTime"];
                                                if (onlineReplicationStartTimeValue != null && onlineReplicationStartTimeValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan onlineReplicationStartTimeInstance = TimeSpan.Parse(((string)onlineReplicationStartTimeValue), CultureInfo.InvariantCulture);
                                                    hyperVReplicaProtectionProfileDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance;
                                                }
                                                
                                                JToken offlineReplicationImportPathValue = replicationProviderSettingsValue["offlineReplicationImportPath"];
                                                if (offlineReplicationImportPathValue != null && offlineReplicationImportPathValue.Type != JTokenType.Null)
                                                {
                                                    string offlineReplicationImportPathInstance = ((string)offlineReplicationImportPathValue);
                                                    hyperVReplicaProtectionProfileDetailsInstance.OfflineReplicationImportPath = offlineReplicationImportPathInstance;
                                                }
                                                
                                                JToken offlineReplicationExportPathValue = replicationProviderSettingsValue["offlineReplicationExportPath"];
                                                if (offlineReplicationExportPathValue != null && offlineReplicationExportPathValue.Type != JTokenType.Null)
                                                {
                                                    string offlineReplicationExportPathInstance = ((string)offlineReplicationExportPathValue);
                                                    hyperVReplicaProtectionProfileDetailsInstance.OfflineReplicationExportPath = offlineReplicationExportPathInstance;
                                                }
                                                
                                                JToken replicationPortValue = replicationProviderSettingsValue["replicationPort"];
                                                if (replicationPortValue != null && replicationPortValue.Type != JTokenType.Null)
                                                {
                                                    ushort replicationPortInstance = ((ushort)replicationPortValue);
                                                    hyperVReplicaProtectionProfileDetailsInstance.ReplicationPort = replicationPortInstance;
                                                }
                                                
                                                JToken allowedAuthenticationTypeValue = replicationProviderSettingsValue["allowedAuthenticationType"];
                                                if (allowedAuthenticationTypeValue != null && allowedAuthenticationTypeValue.Type != JTokenType.Null)
                                                {
                                                    ushort allowedAuthenticationTypeInstance = ((ushort)allowedAuthenticationTypeValue);
                                                    hyperVReplicaProtectionProfileDetailsInstance.AllowedAuthenticationType = allowedAuthenticationTypeInstance;
                                                }
                                                
                                                JToken replicaDeletionOptionValue = replicationProviderSettingsValue["replicaDeletionOption"];
                                                if (replicaDeletionOptionValue != null && replicaDeletionOptionValue.Type != JTokenType.Null)
                                                {
                                                    string replicaDeletionOptionInstance = ((string)replicaDeletionOptionValue);
                                                    hyperVReplicaProtectionProfileDetailsInstance.ReplicaDeletionOption = replicaDeletionOptionInstance;
                                                }
                                                
                                                JToken replicationFrequencyInSecondsValue = replicationProviderSettingsValue["replicationFrequencyInSeconds"];
                                                if (replicationFrequencyInSecondsValue != null && replicationFrequencyInSecondsValue.Type != JTokenType.Null)
                                                {
                                                    ushort replicationFrequencyInSecondsInstance = ((ushort)replicationFrequencyInSecondsValue);
                                                    hyperVReplicaProtectionProfileDetailsInstance.ReplicationFrequencyInSeconds = replicationFrequencyInSecondsInstance;
                                                }
                                                propertiesInstance.ReplicationProviderSettings = hyperVReplicaProtectionProfileDetailsInstance;
                                            }
                                            if (typeName == "HyperVReplicaAzureProtectionProfileDetails")
                                            {
                                                HyperVReplicaAzureProtectionProfileDetails hyperVReplicaAzureProtectionProfileDetailsInstance = new HyperVReplicaAzureProtectionProfileDetails();
                                                
                                                JToken recoveryPointHistoryDurationValue = replicationProviderSettingsValue["recoveryPointHistoryDuration"];
                                                if (recoveryPointHistoryDurationValue != null && recoveryPointHistoryDurationValue.Type != JTokenType.Null)
                                                {
                                                    int recoveryPointHistoryDurationInstance = ((int)recoveryPointHistoryDurationValue);
                                                    hyperVReplicaAzureProtectionProfileDetailsInstance.RecoveryPointHistoryDuration = recoveryPointHistoryDurationInstance;
                                                }
                                                
                                                JToken applicationConsistentSnapshotFrequencyInHoursValue2 = replicationProviderSettingsValue["applicationConsistentSnapshotFrequencyInHours"];
                                                if (applicationConsistentSnapshotFrequencyInHoursValue2 != null && applicationConsistentSnapshotFrequencyInHoursValue2.Type != JTokenType.Null)
                                                {
                                                    int applicationConsistentSnapshotFrequencyInHoursInstance2 = ((int)applicationConsistentSnapshotFrequencyInHoursValue2);
                                                    hyperVReplicaAzureProtectionProfileDetailsInstance.ApplicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHoursInstance2;
                                                }
                                                
                                                JToken replicationIntervalValue = replicationProviderSettingsValue["replicationInterval"];
                                                if (replicationIntervalValue != null && replicationIntervalValue.Type != JTokenType.Null)
                                                {
                                                    int replicationIntervalInstance = ((int)replicationIntervalValue);
                                                    hyperVReplicaAzureProtectionProfileDetailsInstance.ReplicationInterval = replicationIntervalInstance;
                                                }
                                                
                                                JToken onlineReplicationStartTimeValue2 = replicationProviderSettingsValue["onlineReplicationStartTime"];
                                                if (onlineReplicationStartTimeValue2 != null && onlineReplicationStartTimeValue2.Type != JTokenType.Null)
                                                {
                                                    TimeSpan onlineReplicationStartTimeInstance2 = TimeSpan.Parse(((string)onlineReplicationStartTimeValue2), CultureInfo.InvariantCulture);
                                                    hyperVReplicaAzureProtectionProfileDetailsInstance.OnlineReplicationStartTime = onlineReplicationStartTimeInstance2;
                                                }
                                                
                                                JToken encryptionValue = replicationProviderSettingsValue["encryption"];
                                                if (encryptionValue != null && encryptionValue.Type != JTokenType.Null)
                                                {
                                                    string encryptionInstance = ((string)encryptionValue);
                                                    hyperVReplicaAzureProtectionProfileDetailsInstance.Encryption = encryptionInstance;
                                                }
                                                
                                                JToken activeStorageAccountValue = replicationProviderSettingsValue["activeStorageAccount"];
                                                if (activeStorageAccountValue != null && activeStorageAccountValue.Type != JTokenType.Null)
                                                {
                                                    CustomerStorageAccount activeStorageAccountInstance = new CustomerStorageAccount();
                                                    hyperVReplicaAzureProtectionProfileDetailsInstance.ActiveStorageAccount = activeStorageAccountInstance;
                                                    
                                                    JToken storageAccountNameValue = activeStorageAccountValue["storageAccountName"];
                                                    if (storageAccountNameValue != null && storageAccountNameValue.Type != JTokenType.Null)
                                                    {
                                                        string storageAccountNameInstance = ((string)storageAccountNameValue);
                                                        activeStorageAccountInstance.StorageAccountName = storageAccountNameInstance;
                                                    }
                                                    
                                                    JToken subscriptionIdValue = activeStorageAccountValue["subscriptionId"];
                                                    if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                                    {
                                                        string subscriptionIdInstance = ((string)subscriptionIdValue);
                                                        activeStorageAccountInstance.SubscriptionId = subscriptionIdInstance;
                                                    }
                                                }
                                                propertiesInstance.ReplicationProviderSettings = hyperVReplicaAzureProtectionProfileDetailsInstance;
                                            }
                                        }
                                        
                                        JToken associationStatusValue = propertiesValue["associationStatus"];
                                        if (associationStatusValue != null && associationStatusValue.Type != JTokenType.Null)
                                        {
                                            string associationStatusInstance = ((string)associationStatusValue);
                                            propertiesInstance.AssociationStatus = associationStatusInstance;
                                        }
                                        
                                        JToken associationDetailArray = propertiesValue["associationDetail"];
                                        if (associationDetailArray != null && associationDetailArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken associationDetailValue in ((JArray)associationDetailArray))
                                            {
                                                ProtectionProfileAssociationDetails protectionProfileAssociationDetailsInstance = new ProtectionProfileAssociationDetails();
                                                propertiesInstance.AssociationDetail.Add(protectionProfileAssociationDetailsInstance);
                                                
                                                JToken primaryProtectionContainerIdValue = associationDetailValue["primaryProtectionContainerId"];
                                                if (primaryProtectionContainerIdValue != null && primaryProtectionContainerIdValue.Type != JTokenType.Null)
                                                {
                                                    string primaryProtectionContainerIdInstance = ((string)primaryProtectionContainerIdValue);
                                                    protectionProfileAssociationDetailsInstance.PrimaryProtectionContainerId = primaryProtectionContainerIdInstance;
                                                }
                                                
                                                JToken recoveryProtectionContainerIdValue = associationDetailValue["recoveryProtectionContainerId"];
                                                if (recoveryProtectionContainerIdValue != null && recoveryProtectionContainerIdValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryProtectionContainerIdInstance = ((string)recoveryProtectionContainerIdValue);
                                                    protectionProfileAssociationDetailsInstance.RecoveryProtectionContainerId = recoveryProtectionContainerIdInstance;
                                                }
                                                
                                                JToken associationStatusValue2 = associationDetailValue["associationStatus"];
                                                if (associationStatusValue2 != null && associationStatusValue2.Type != JTokenType.Null)
                                                {
                                                    string associationStatusInstance2 = ((string)associationStatusValue2);
                                                    protectionProfileAssociationDetailsInstance.AssociationStatus = associationStatusInstance2;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        protectionProfileInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        protectionProfileInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        protectionProfileInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        protectionProfileInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            protectionProfileInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update protection profile.
        /// </summary>
        /// <param name='input'>
        /// Required. input.
        /// </param>
        /// <param name='protectionProfileId'>
        /// Required. Profile id.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> UpdateAsync(UpdateProtectionProfileInput input, string protectionProfileId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("input", input);
                tracingParameters.Add("protectionProfileId", protectionProfileId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.ProtectionProfile.BeginUpdatingAsync(input, protectionProfileId, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            UpdateProtectionProfileOperationResponse result = await client.ProtectionProfile.GetUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ProtectionProfile.GetUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
    }
}
