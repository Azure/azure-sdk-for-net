// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.SiteRecovery;
using Microsoft.Azure.Management.SiteRecovery.Models;

namespace Microsoft.Azure.Management.SiteRecovery
{
    public static partial class StorageClassificationMappingOperationsExtensions
    {
        /// <summary>
        /// Pairs storage to a given storage.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IStorageClassificationMappingOperations.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='storageClassificationName'>
        /// Required. Storage name.
        /// </param>
        /// <param name='storageClassificationMappingName'>
        /// Required. Storage mapping name.
        /// </param>
        /// <param name='input'>
        /// Required. Create mapping input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse BeginPairStorageClassification(this IStorageClassificationMappingOperations operations, string fabricName, string storageClassificationName, string storageClassificationMappingName, StorageClassificationMappingInput input, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageClassificationMappingOperations)s).BeginPairStorageClassificationAsync(fabricName, storageClassificationName, storageClassificationMappingName, input, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Pairs storage to a given storage.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IStorageClassificationMappingOperations.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='storageClassificationName'>
        /// Required. Storage name.
        /// </param>
        /// <param name='storageClassificationMappingName'>
        /// Required. Storage mapping name.
        /// </param>
        /// <param name='input'>
        /// Required. Create mapping input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> BeginPairStorageClassificationAsync(this IStorageClassificationMappingOperations operations, string fabricName, string storageClassificationName, string storageClassificationMappingName, StorageClassificationMappingInput input, CustomRequestHeaders customRequestHeaders)
        {
            return operations.BeginPairStorageClassificationAsync(fabricName, storageClassificationName, storageClassificationMappingName, input, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Unpairs storage to a given storage.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IStorageClassificationMappingOperations.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='storageClassificationName'>
        /// Required. Storage name.
        /// </param>
        /// <param name='storageClassificationMappingName'>
        /// Required. Storage mapping name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse BeginUnpairStorageClassification(this IStorageClassificationMappingOperations operations, string fabricName, string storageClassificationName, string storageClassificationMappingName, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageClassificationMappingOperations)s).BeginUnpairStorageClassificationAsync(fabricName, storageClassificationName, storageClassificationMappingName, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Unpairs storage to a given storage.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IStorageClassificationMappingOperations.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='storageClassificationName'>
        /// Required. Storage name.
        /// </param>
        /// <param name='storageClassificationMappingName'>
        /// Required. Storage mapping name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> BeginUnpairStorageClassificationAsync(this IStorageClassificationMappingOperations operations, string fabricName, string storageClassificationName, string storageClassificationMappingName, CustomRequestHeaders customRequestHeaders)
        {
            return operations.BeginUnpairStorageClassificationAsync(fabricName, storageClassificationName, storageClassificationMappingName, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the replication storage mapping object by name.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IStorageClassificationMappingOperations.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Fabric unique name.
        /// </param>
        /// <param name='storageClassificationName'>
        /// Required. Storage unique name.
        /// </param>
        /// <param name='storageClassificationMappingName'>
        /// Required. Storage mapping unique name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the storage mapping object
        /// </returns>
        public static StorageClassificationMappingResponse Get(this IStorageClassificationMappingOperations operations, string fabricName, string storageClassificationName, string storageClassificationMappingName, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageClassificationMappingOperations)s).GetAsync(fabricName, storageClassificationName, storageClassificationMappingName, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the replication storage mapping object by name.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IStorageClassificationMappingOperations.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Fabric unique name.
        /// </param>
        /// <param name='storageClassificationName'>
        /// Required. Storage unique name.
        /// </param>
        /// <param name='storageClassificationMappingName'>
        /// Required. Storage mapping unique name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the storage mapping object
        /// </returns>
        public static Task<StorageClassificationMappingResponse> GetAsync(this IStorageClassificationMappingOperations operations, string fabricName, string storageClassificationName, string storageClassificationMappingName, CustomRequestHeaders customRequestHeaders)
        {
            return operations.GetAsync(fabricName, storageClassificationName, storageClassificationMappingName, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IStorageClassificationMappingOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// Service response for operation which change status of mapping for
        /// storage.
        /// </returns>
        public static StorageClassificationMappingOperationResponse GetPairStorageClassificationStatus(this IStorageClassificationMappingOperations operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageClassificationMappingOperations)s).GetPairStorageClassificationStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IStorageClassificationMappingOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// Service response for operation which change status of mapping for
        /// storage.
        /// </returns>
        public static Task<StorageClassificationMappingOperationResponse> GetPairStorageClassificationStatusAsync(this IStorageClassificationMappingOperations operations, string operationStatusLink)
        {
            return operations.GetPairStorageClassificationStatusAsync(operationStatusLink, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IStorageClassificationMappingOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse GetUnpairStorageClassificationStatus(this IStorageClassificationMappingOperations operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageClassificationMappingOperations)s).GetUnpairStorageClassificationStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IStorageClassificationMappingOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> GetUnpairStorageClassificationStatusAsync(this IStorageClassificationMappingOperations operations, string operationStatusLink)
        {
            return operations.GetUnpairStorageClassificationStatusAsync(operationStatusLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the replication storage mapping objects under a storage.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IStorageClassificationMappingOperations.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Fabric unique name.
        /// </param>
        /// <param name='storageClassificationName'>
        /// Required. Storage unique name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the list storage mapping operation.
        /// </returns>
        public static StorageClassificationMappingListResponse List(this IStorageClassificationMappingOperations operations, string fabricName, string storageClassificationName, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageClassificationMappingOperations)s).ListAsync(fabricName, storageClassificationName, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the replication storage mapping objects under a storage.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IStorageClassificationMappingOperations.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Fabric unique name.
        /// </param>
        /// <param name='storageClassificationName'>
        /// Required. Storage unique name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the list storage mapping operation.
        /// </returns>
        public static Task<StorageClassificationMappingListResponse> ListAsync(this IStorageClassificationMappingOperations operations, string fabricName, string storageClassificationName, CustomRequestHeaders customRequestHeaders)
        {
            return operations.ListAsync(fabricName, storageClassificationName, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the replication storage mapping objects under a vault.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IStorageClassificationMappingOperations.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the list storage mapping operation.
        /// </returns>
        public static StorageClassificationMappingListResponse ListAll(this IStorageClassificationMappingOperations operations, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageClassificationMappingOperations)s).ListAllAsync(customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the replication storage mapping objects under a vault.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IStorageClassificationMappingOperations.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the list storage mapping operation.
        /// </returns>
        public static Task<StorageClassificationMappingListResponse> ListAllAsync(this IStorageClassificationMappingOperations operations, CustomRequestHeaders customRequestHeaders)
        {
            return operations.ListAllAsync(customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the replication storage mapping objects under a vault.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IStorageClassificationMappingOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The url to the next protected items page.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the list storage mapping operation.
        /// </returns>
        public static StorageClassificationMappingListResponse ListNext(this IStorageClassificationMappingOperations operations, string nextLink, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageClassificationMappingOperations)s).ListNextAsync(nextLink, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the replication storage mapping objects under a vault.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IStorageClassificationMappingOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The url to the next protected items page.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the list storage mapping operation.
        /// </returns>
        public static Task<StorageClassificationMappingListResponse> ListNextAsync(this IStorageClassificationMappingOperations operations, string nextLink, CustomRequestHeaders customRequestHeaders)
        {
            return operations.ListNextAsync(nextLink, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Pairs storage to a given storage.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IStorageClassificationMappingOperations.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='storageClassificationName'>
        /// Required. Storage classsification name.
        /// </param>
        /// <param name='storageClassificationMappingName'>
        /// Required. Storage classification mapping name.
        /// </param>
        /// <param name='input'>
        /// Required. Create mapping input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse PairStorageClassification(this IStorageClassificationMappingOperations operations, string fabricName, string storageClassificationName, string storageClassificationMappingName, StorageClassificationMappingInput input, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageClassificationMappingOperations)s).PairStorageClassificationAsync(fabricName, storageClassificationName, storageClassificationMappingName, input, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Pairs storage to a given storage.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IStorageClassificationMappingOperations.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='storageClassificationName'>
        /// Required. Storage classsification name.
        /// </param>
        /// <param name='storageClassificationMappingName'>
        /// Required. Storage classification mapping name.
        /// </param>
        /// <param name='input'>
        /// Required. Create mapping input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> PairStorageClassificationAsync(this IStorageClassificationMappingOperations operations, string fabricName, string storageClassificationName, string storageClassificationMappingName, StorageClassificationMappingInput input, CustomRequestHeaders customRequestHeaders)
        {
            return operations.PairStorageClassificationAsync(fabricName, storageClassificationName, storageClassificationMappingName, input, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Removes storage classification pairing.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IStorageClassificationMappingOperations.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='storageName'>
        /// Required. Storage name.
        /// </param>
        /// <param name='storageMappingName'>
        /// Required. Storage mapping name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse UnpairStorageClassification(this IStorageClassificationMappingOperations operations, string fabricName, string storageName, string storageMappingName, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageClassificationMappingOperations)s).UnpairStorageClassificationAsync(fabricName, storageName, storageMappingName, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Removes storage classification pairing.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IStorageClassificationMappingOperations.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='storageName'>
        /// Required. Storage name.
        /// </param>
        /// <param name='storageMappingName'>
        /// Required. Storage mapping name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> UnpairStorageClassificationAsync(this IStorageClassificationMappingOperations operations, string fabricName, string storageName, string storageMappingName, CustomRequestHeaders customRequestHeaders)
        {
            return operations.UnpairStorageClassificationAsync(fabricName, storageName, storageMappingName, customRequestHeaders, CancellationToken.None);
        }
    }
}
