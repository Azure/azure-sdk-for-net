// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure.Management.SiteRecovery;
using Microsoft.Azure.Management.SiteRecovery.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.SiteRecovery
{
    /// <summary>
    /// Definition of Protectable Item operations for the Site Recovery
    /// extension.
    /// </summary>
    internal partial class ProtectableItemOperations : IServiceOperations<SiteRecoveryManagementClient>, IProtectableItemOperations
    {
        /// <summary>
        /// Initializes a new instance of the ProtectableItemOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ProtectableItemOperations(SiteRecoveryManagementClient client)
        {
            this._client = client;
        }
        
        private SiteRecoveryManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.SiteRecovery.SiteRecoveryManagementClient.
        /// </summary>
        public SiteRecoveryManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Get the replication protectable object by Id.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric unique name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container unique name.
        /// </param>
        /// <param name='protectableItemName'>
        /// Required. Replication protected item unique name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the fabric object
        /// </returns>
        public async Task<ProtectableItemResponse> GetAsync(string fabricName, string protectionContainerName, string protectableItemName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (protectableItemName == null)
            {
                throw new ArgumentNullException("protectableItemName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("protectableItemName", protectableItemName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/replicationProtectableItems/";
            url = url + Uri.EscapeDataString(protectableItemName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProtectableItemResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProtectableItemResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProtectableItem protectableItemInstance = new ProtectableItem();
                            result.ProtectableItem = protectableItemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ProtectableItemProperties propertiesInstance = new ProtectableItemProperties();
                                protectableItemInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken protectionStatusValue = propertiesValue["protectionStatus"];
                                if (protectionStatusValue != null && protectionStatusValue.Type != JTokenType.Null)
                                {
                                    string protectionStatusInstance = ((string)protectionStatusValue);
                                    propertiesInstance.ProtectionStatus = protectionStatusInstance;
                                }
                                
                                JToken replicationProtectedItemIdValue = propertiesValue["replicationProtectedItemId"];
                                if (replicationProtectedItemIdValue != null && replicationProtectedItemIdValue.Type != JTokenType.Null)
                                {
                                    string replicationProtectedItemIdInstance = ((string)replicationProtectedItemIdValue);
                                    propertiesInstance.ReplicationProtectedItemId = replicationProtectedItemIdInstance;
                                }
                                
                                JToken protectionReadinessErrorsArray = propertiesValue["protectionReadinessErrors"];
                                if (protectionReadinessErrorsArray != null && protectionReadinessErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken protectionReadinessErrorsValue in ((JArray)protectionReadinessErrorsArray))
                                    {
                                        propertiesInstance.ProtectionReadinessErrors.Add(((string)protectionReadinessErrorsValue));
                                    }
                                }
                                
                                JToken supportedReplicationProvidersArray = propertiesValue["supportedReplicationProviders"];
                                if (supportedReplicationProvidersArray != null && supportedReplicationProvidersArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken supportedReplicationProvidersValue in ((JArray)supportedReplicationProvidersArray))
                                    {
                                        propertiesInstance.SupportedReplicationProviders.Add(((string)supportedReplicationProvidersValue));
                                    }
                                }
                                
                                JToken customDetailsValue = propertiesValue["customDetails"];
                                if (customDetailsValue != null && customDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)customDetailsValue["instanceType"]);
                                    if (typeName == "HyperVVirtualMachine")
                                    {
                                        HyperVVirtualMachineDetails hyperVVirtualMachineDetailsInstance = new HyperVVirtualMachineDetails();
                                        
                                        JToken generationValue = customDetailsValue["generation"];
                                        if (generationValue != null && generationValue.Type != JTokenType.Null)
                                        {
                                            string generationInstance = ((string)generationValue);
                                            hyperVVirtualMachineDetailsInstance.Generation = generationInstance;
                                        }
                                        
                                        JToken sourceItemIdValue = customDetailsValue["sourceItemId"];
                                        if (sourceItemIdValue != null && sourceItemIdValue.Type != JTokenType.Null)
                                        {
                                            string sourceItemIdInstance = ((string)sourceItemIdValue);
                                            hyperVVirtualMachineDetailsInstance.SourceItemId = sourceItemIdInstance;
                                        }
                                        
                                        JToken osDetailsValue = customDetailsValue["osDetails"];
                                        if (osDetailsValue != null && osDetailsValue.Type != JTokenType.Null)
                                        {
                                            OSDetails osDetailsInstance = new OSDetails();
                                            hyperVVirtualMachineDetailsInstance.OSDetails = osDetailsInstance;
                                            
                                            JToken osTypeValue = osDetailsValue["osType"];
                                            if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                            {
                                                string osTypeInstance = ((string)osTypeValue);
                                                osDetailsInstance.OsType = osTypeInstance;
                                            }
                                            
                                            JToken productTypeValue = osDetailsValue["productType"];
                                            if (productTypeValue != null && productTypeValue.Type != JTokenType.Null)
                                            {
                                                string productTypeInstance = ((string)productTypeValue);
                                                osDetailsInstance.ProductType = productTypeInstance;
                                            }
                                            
                                            JToken osEditionValue = osDetailsValue["osEdition"];
                                            if (osEditionValue != null && osEditionValue.Type != JTokenType.Null)
                                            {
                                                string osEditionInstance = ((string)osEditionValue);
                                                osDetailsInstance.OSEdition = osEditionInstance;
                                            }
                                            
                                            JToken oSVersionValue = osDetailsValue["oSVersion"];
                                            if (oSVersionValue != null && oSVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSVersionInstance = ((string)oSVersionValue);
                                                osDetailsInstance.OSVersion = oSVersionInstance;
                                            }
                                            
                                            JToken oSMajorVersionValue = osDetailsValue["oSMajorVersion"];
                                            if (oSMajorVersionValue != null && oSMajorVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSMajorVersionInstance = ((string)oSMajorVersionValue);
                                                osDetailsInstance.OSMajorVersion = oSMajorVersionInstance;
                                            }
                                            
                                            JToken oSMinorVersionValue = osDetailsValue["oSMinorVersion"];
                                            if (oSMinorVersionValue != null && oSMinorVersionValue.Type != JTokenType.Null)
                                            {
                                                string oSMinorVersionInstance = ((string)oSMinorVersionValue);
                                                osDetailsInstance.OSMinorVersion = oSMinorVersionInstance;
                                            }
                                        }
                                        
                                        JToken diskDetailsArray = customDetailsValue["diskDetails"];
                                        if (diskDetailsArray != null && diskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken diskDetailsValue in ((JArray)diskDetailsArray))
                                            {
                                                DiskDetails diskDetailsInstance = new DiskDetails();
                                                hyperVVirtualMachineDetailsInstance.DiskDetailsList.Add(diskDetailsInstance);
                                                
                                                JToken maxSizeMBValue = diskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                                    diskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                                }
                                                
                                                JToken vhdTypeValue = diskDetailsValue["vhdType"];
                                                if (vhdTypeValue != null && vhdTypeValue.Type != JTokenType.Null)
                                                {
                                                    string vhdTypeInstance = ((string)vhdTypeValue);
                                                    diskDetailsInstance.VhdType = vhdTypeInstance;
                                                }
                                                
                                                JToken vhdIdValue = diskDetailsValue["vhdId"];
                                                if (vhdIdValue != null && vhdIdValue.Type != JTokenType.Null)
                                                {
                                                    string vhdIdInstance = ((string)vhdIdValue);
                                                    diskDetailsInstance.VhdId = vhdIdInstance;
                                                }
                                                
                                                JToken vhdNameValue = diskDetailsValue["vhdName"];
                                                if (vhdNameValue != null && vhdNameValue.Type != JTokenType.Null)
                                                {
                                                    string vhdNameInstance = ((string)vhdNameValue);
                                                    diskDetailsInstance.VhdName = vhdNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue = customDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            hyperVVirtualMachineDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.CustomDetails = hyperVVirtualMachineDetailsInstance;
                                    }
                                    if (typeName == "VMwareVirtualMachine")
                                    {
                                        VMwareVirtualMachineDetails vMwareVirtualMachineDetailsInstance = new VMwareVirtualMachineDetails();
                                        
                                        JToken agentGeneratedIdValue = customDetailsValue["agentGeneratedId"];
                                        if (agentGeneratedIdValue != null && agentGeneratedIdValue.Type != JTokenType.Null)
                                        {
                                            string agentGeneratedIdInstance = ((string)agentGeneratedIdValue);
                                            vMwareVirtualMachineDetailsInstance.AgentGeneratedId = agentGeneratedIdInstance;
                                        }
                                        
                                        JToken agentInstalledValue = customDetailsValue["agentInstalled"];
                                        if (agentInstalledValue != null && agentInstalledValue.Type != JTokenType.Null)
                                        {
                                            string agentInstalledInstance = ((string)agentInstalledValue);
                                            vMwareVirtualMachineDetailsInstance.AgentInstalled = agentInstalledInstance;
                                        }
                                        
                                        JToken osTypeValue2 = customDetailsValue["osType"];
                                        if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance2 = ((string)osTypeValue2);
                                            vMwareVirtualMachineDetailsInstance.OsType = osTypeInstance2;
                                        }
                                        
                                        JToken agentVersionValue = customDetailsValue["agentVersion"];
                                        if (agentVersionValue != null && agentVersionValue.Type != JTokenType.Null)
                                        {
                                            string agentVersionInstance = ((string)agentVersionValue);
                                            vMwareVirtualMachineDetailsInstance.AgentVersion = agentVersionInstance;
                                        }
                                        
                                        JToken ipAddressValue = customDetailsValue["ipAddress"];
                                        if (ipAddressValue != null && ipAddressValue.Type != JTokenType.Null)
                                        {
                                            string ipAddressInstance = ((string)ipAddressValue);
                                            vMwareVirtualMachineDetailsInstance.IpAddress = ipAddressInstance;
                                        }
                                        
                                        JToken poweredOnValue = customDetailsValue["poweredOn"];
                                        if (poweredOnValue != null && poweredOnValue.Type != JTokenType.Null)
                                        {
                                            string poweredOnInstance = ((string)poweredOnValue);
                                            vMwareVirtualMachineDetailsInstance.PoweredOn = poweredOnInstance;
                                        }
                                        
                                        JToken vCenterInfrastructureIdValue = customDetailsValue["vCenterInfrastructureId"];
                                        if (vCenterInfrastructureIdValue != null && vCenterInfrastructureIdValue.Type != JTokenType.Null)
                                        {
                                            string vCenterInfrastructureIdInstance = ((string)vCenterInfrastructureIdValue);
                                            vMwareVirtualMachineDetailsInstance.VCenterInfrastructureId = vCenterInfrastructureIdInstance;
                                        }
                                        
                                        JToken diskDetailsArray2 = customDetailsValue["diskDetails"];
                                        if (diskDetailsArray2 != null && diskDetailsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken diskDetailsValue2 in ((JArray)diskDetailsArray2))
                                            {
                                                InMageDiskDetails inMageDiskDetailsInstance = new InMageDiskDetails();
                                                vMwareVirtualMachineDetailsInstance.DiskDetails.Add(inMageDiskDetailsInstance);
                                                
                                                JToken diskIdValue = diskDetailsValue2["diskId"];
                                                if (diskIdValue != null && diskIdValue.Type != JTokenType.Null)
                                                {
                                                    string diskIdInstance = ((string)diskIdValue);
                                                    inMageDiskDetailsInstance.DiskId = diskIdInstance;
                                                }
                                                
                                                JToken diskNameValue = diskDetailsValue2["diskName"];
                                                if (diskNameValue != null && diskNameValue.Type != JTokenType.Null)
                                                {
                                                    string diskNameInstance = ((string)diskNameValue);
                                                    inMageDiskDetailsInstance.DiskName = diskNameInstance;
                                                }
                                                
                                                JToken diskSizeInMBValue = diskDetailsValue2["diskSizeInMB"];
                                                if (diskSizeInMBValue != null && diskSizeInMBValue.Type != JTokenType.Null)
                                                {
                                                    string diskSizeInMBInstance = ((string)diskSizeInMBValue);
                                                    inMageDiskDetailsInstance.DiskSizeInMB = diskSizeInMBInstance;
                                                }
                                                
                                                JToken diskTypeValue = diskDetailsValue2["diskType"];
                                                if (diskTypeValue != null && diskTypeValue.Type != JTokenType.Null)
                                                {
                                                    string diskTypeInstance = ((string)diskTypeValue);
                                                    inMageDiskDetailsInstance.DiskType = diskTypeInstance;
                                                }
                                                
                                                JToken diskConfigurationValue = diskDetailsValue2["diskConfiguration"];
                                                if (diskConfigurationValue != null && diskConfigurationValue.Type != JTokenType.Null)
                                                {
                                                    string diskConfigurationInstance = ((string)diskConfigurationValue);
                                                    inMageDiskDetailsInstance.DiskConfiguration = diskConfigurationInstance;
                                                }
                                                
                                                JToken volumeListArray = diskDetailsValue2["volumeList"];
                                                if (volumeListArray != null && volumeListArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken volumeListValue in ((JArray)volumeListArray))
                                                    {
                                                        DiskVolumeDetails diskVolumeDetailsInstance = new DiskVolumeDetails();
                                                        inMageDiskDetailsInstance.VolumeList.Add(diskVolumeDetailsInstance);
                                                        
                                                        JToken labelValue = volumeListValue["label"];
                                                        if (labelValue != null && labelValue.Type != JTokenType.Null)
                                                        {
                                                            string labelInstance = ((string)labelValue);
                                                            diskVolumeDetailsInstance.Label = labelInstance;
                                                        }
                                                        
                                                        JToken nameValue = volumeListValue["name"];
                                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance = ((string)nameValue);
                                                            diskVolumeDetailsInstance.Name = nameInstance;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken discoveryTypeValue = customDetailsValue["discoveryType"];
                                        if (discoveryTypeValue != null && discoveryTypeValue.Type != JTokenType.Null)
                                        {
                                            string discoveryTypeInstance = ((string)discoveryTypeValue);
                                            vMwareVirtualMachineDetailsInstance.DiscoveryType = discoveryTypeInstance;
                                        }
                                        
                                        JToken instanceTypeValue2 = customDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            vMwareVirtualMachineDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.CustomDetails = vMwareVirtualMachineDetailsInstance;
                                    }
                                    if (typeName == "ReplicationGroupDetails")
                                    {
                                        ReplicationGroupDetails replicationGroupDetailsInstance = new ReplicationGroupDetails();
                                        
                                        JToken instanceTypeValue3 = customDetailsValue["instanceType"];
                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                            replicationGroupDetailsInstance.InstanceType = instanceTypeInstance3;
                                        }
                                        propertiesInstance.CustomDetails = replicationGroupDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                protectableItemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                protectableItemInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                protectableItemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                protectableItemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    protectableItemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Enumerate all replication protectable items in a container.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric unique name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container unique name.
        /// </param>
        /// <param name='typeOfEntities'>
        /// Optional. Type of entities to fetch. Protected to fetch protected
        /// only, Unprotected to fetch unprotected only, All to fetch both
        /// unprotected and protected.
        /// </param>
        /// <param name='skipToken'>
        /// Optional. Continuation Token.
        /// </param>
        /// <param name='take'>
        /// Optional. Maximum number of items to be fetched in a request.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list replicated protected items.
        /// </returns>
        public async Task<ProtectableItemListResponse> ListAsync(string fabricName, string protectionContainerName, string typeOfEntities, string skipToken, string take, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("typeOfEntities", typeOfEntities);
                tracingParameters.Add("skipToken", skipToken);
                tracingParameters.Add("take", take);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/replicationProtectableItems";
            List<string> queryParameters = new List<string>();
            List<string> odataFilter = new List<string>();
            if (typeOfEntities != null)
            {
                odataFilter.Add("State eq '" + Uri.EscapeDataString(typeOfEntities) + "'");
            }
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (skipToken != null)
            {
                queryParameters.Add("$skipToken=" + Uri.EscapeDataString(skipToken));
            }
            if (take != null)
            {
                queryParameters.Add("$take=" + Uri.EscapeDataString(take));
            }
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProtectableItemListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProtectableItemListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ProtectableItem protectableItemInstance = new ProtectableItem();
                                    result.ProtectableItems.Add(protectableItemInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        ProtectableItemProperties propertiesInstance = new ProtectableItemProperties();
                                        protectableItemInstance.Properties = propertiesInstance;
                                        
                                        JToken friendlyNameValue = propertiesValue["friendlyName"];
                                        if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string friendlyNameInstance = ((string)friendlyNameValue);
                                            propertiesInstance.FriendlyName = friendlyNameInstance;
                                        }
                                        
                                        JToken protectionStatusValue = propertiesValue["protectionStatus"];
                                        if (protectionStatusValue != null && protectionStatusValue.Type != JTokenType.Null)
                                        {
                                            string protectionStatusInstance = ((string)protectionStatusValue);
                                            propertiesInstance.ProtectionStatus = protectionStatusInstance;
                                        }
                                        
                                        JToken replicationProtectedItemIdValue = propertiesValue["replicationProtectedItemId"];
                                        if (replicationProtectedItemIdValue != null && replicationProtectedItemIdValue.Type != JTokenType.Null)
                                        {
                                            string replicationProtectedItemIdInstance = ((string)replicationProtectedItemIdValue);
                                            propertiesInstance.ReplicationProtectedItemId = replicationProtectedItemIdInstance;
                                        }
                                        
                                        JToken protectionReadinessErrorsArray = propertiesValue["protectionReadinessErrors"];
                                        if (protectionReadinessErrorsArray != null && protectionReadinessErrorsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectionReadinessErrorsValue in ((JArray)protectionReadinessErrorsArray))
                                            {
                                                propertiesInstance.ProtectionReadinessErrors.Add(((string)protectionReadinessErrorsValue));
                                            }
                                        }
                                        
                                        JToken supportedReplicationProvidersArray = propertiesValue["supportedReplicationProviders"];
                                        if (supportedReplicationProvidersArray != null && supportedReplicationProvidersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken supportedReplicationProvidersValue in ((JArray)supportedReplicationProvidersArray))
                                            {
                                                propertiesInstance.SupportedReplicationProviders.Add(((string)supportedReplicationProvidersValue));
                                            }
                                        }
                                        
                                        JToken customDetailsValue = propertiesValue["customDetails"];
                                        if (customDetailsValue != null && customDetailsValue.Type != JTokenType.Null)
                                        {
                                            string typeName = ((string)customDetailsValue["instanceType"]);
                                            if (typeName == "HyperVVirtualMachine")
                                            {
                                                HyperVVirtualMachineDetails hyperVVirtualMachineDetailsInstance = new HyperVVirtualMachineDetails();
                                                
                                                JToken generationValue = customDetailsValue["generation"];
                                                if (generationValue != null && generationValue.Type != JTokenType.Null)
                                                {
                                                    string generationInstance = ((string)generationValue);
                                                    hyperVVirtualMachineDetailsInstance.Generation = generationInstance;
                                                }
                                                
                                                JToken sourceItemIdValue = customDetailsValue["sourceItemId"];
                                                if (sourceItemIdValue != null && sourceItemIdValue.Type != JTokenType.Null)
                                                {
                                                    string sourceItemIdInstance = ((string)sourceItemIdValue);
                                                    hyperVVirtualMachineDetailsInstance.SourceItemId = sourceItemIdInstance;
                                                }
                                                
                                                JToken osDetailsValue = customDetailsValue["osDetails"];
                                                if (osDetailsValue != null && osDetailsValue.Type != JTokenType.Null)
                                                {
                                                    OSDetails osDetailsInstance = new OSDetails();
                                                    hyperVVirtualMachineDetailsInstance.OSDetails = osDetailsInstance;
                                                    
                                                    JToken osTypeValue = osDetailsValue["osType"];
                                                    if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string osTypeInstance = ((string)osTypeValue);
                                                        osDetailsInstance.OsType = osTypeInstance;
                                                    }
                                                    
                                                    JToken productTypeValue = osDetailsValue["productType"];
                                                    if (productTypeValue != null && productTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string productTypeInstance = ((string)productTypeValue);
                                                        osDetailsInstance.ProductType = productTypeInstance;
                                                    }
                                                    
                                                    JToken osEditionValue = osDetailsValue["osEdition"];
                                                    if (osEditionValue != null && osEditionValue.Type != JTokenType.Null)
                                                    {
                                                        string osEditionInstance = ((string)osEditionValue);
                                                        osDetailsInstance.OSEdition = osEditionInstance;
                                                    }
                                                    
                                                    JToken oSVersionValue = osDetailsValue["oSVersion"];
                                                    if (oSVersionValue != null && oSVersionValue.Type != JTokenType.Null)
                                                    {
                                                        string oSVersionInstance = ((string)oSVersionValue);
                                                        osDetailsInstance.OSVersion = oSVersionInstance;
                                                    }
                                                    
                                                    JToken oSMajorVersionValue = osDetailsValue["oSMajorVersion"];
                                                    if (oSMajorVersionValue != null && oSMajorVersionValue.Type != JTokenType.Null)
                                                    {
                                                        string oSMajorVersionInstance = ((string)oSMajorVersionValue);
                                                        osDetailsInstance.OSMajorVersion = oSMajorVersionInstance;
                                                    }
                                                    
                                                    JToken oSMinorVersionValue = osDetailsValue["oSMinorVersion"];
                                                    if (oSMinorVersionValue != null && oSMinorVersionValue.Type != JTokenType.Null)
                                                    {
                                                        string oSMinorVersionInstance = ((string)oSMinorVersionValue);
                                                        osDetailsInstance.OSMinorVersion = oSMinorVersionInstance;
                                                    }
                                                }
                                                
                                                JToken diskDetailsArray = customDetailsValue["diskDetails"];
                                                if (diskDetailsArray != null && diskDetailsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken diskDetailsValue in ((JArray)diskDetailsArray))
                                                    {
                                                        DiskDetails diskDetailsInstance = new DiskDetails();
                                                        hyperVVirtualMachineDetailsInstance.DiskDetailsList.Add(diskDetailsInstance);
                                                        
                                                        JToken maxSizeMBValue = diskDetailsValue["maxSizeMB"];
                                                        if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                                        {
                                                            ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                                            diskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                                        }
                                                        
                                                        JToken vhdTypeValue = diskDetailsValue["vhdType"];
                                                        if (vhdTypeValue != null && vhdTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string vhdTypeInstance = ((string)vhdTypeValue);
                                                            diskDetailsInstance.VhdType = vhdTypeInstance;
                                                        }
                                                        
                                                        JToken vhdIdValue = diskDetailsValue["vhdId"];
                                                        if (vhdIdValue != null && vhdIdValue.Type != JTokenType.Null)
                                                        {
                                                            string vhdIdInstance = ((string)vhdIdValue);
                                                            diskDetailsInstance.VhdId = vhdIdInstance;
                                                        }
                                                        
                                                        JToken vhdNameValue = diskDetailsValue["vhdName"];
                                                        if (vhdNameValue != null && vhdNameValue.Type != JTokenType.Null)
                                                        {
                                                            string vhdNameInstance = ((string)vhdNameValue);
                                                            diskDetailsInstance.VhdName = vhdNameInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken instanceTypeValue = customDetailsValue["instanceType"];
                                                if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance = ((string)instanceTypeValue);
                                                    hyperVVirtualMachineDetailsInstance.InstanceType = instanceTypeInstance;
                                                }
                                                propertiesInstance.CustomDetails = hyperVVirtualMachineDetailsInstance;
                                            }
                                            if (typeName == "VMwareVirtualMachine")
                                            {
                                                VMwareVirtualMachineDetails vMwareVirtualMachineDetailsInstance = new VMwareVirtualMachineDetails();
                                                
                                                JToken agentGeneratedIdValue = customDetailsValue["agentGeneratedId"];
                                                if (agentGeneratedIdValue != null && agentGeneratedIdValue.Type != JTokenType.Null)
                                                {
                                                    string agentGeneratedIdInstance = ((string)agentGeneratedIdValue);
                                                    vMwareVirtualMachineDetailsInstance.AgentGeneratedId = agentGeneratedIdInstance;
                                                }
                                                
                                                JToken agentInstalledValue = customDetailsValue["agentInstalled"];
                                                if (agentInstalledValue != null && agentInstalledValue.Type != JTokenType.Null)
                                                {
                                                    string agentInstalledInstance = ((string)agentInstalledValue);
                                                    vMwareVirtualMachineDetailsInstance.AgentInstalled = agentInstalledInstance;
                                                }
                                                
                                                JToken osTypeValue2 = customDetailsValue["osType"];
                                                if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance2 = ((string)osTypeValue2);
                                                    vMwareVirtualMachineDetailsInstance.OsType = osTypeInstance2;
                                                }
                                                
                                                JToken agentVersionValue = customDetailsValue["agentVersion"];
                                                if (agentVersionValue != null && agentVersionValue.Type != JTokenType.Null)
                                                {
                                                    string agentVersionInstance = ((string)agentVersionValue);
                                                    vMwareVirtualMachineDetailsInstance.AgentVersion = agentVersionInstance;
                                                }
                                                
                                                JToken ipAddressValue = customDetailsValue["ipAddress"];
                                                if (ipAddressValue != null && ipAddressValue.Type != JTokenType.Null)
                                                {
                                                    string ipAddressInstance = ((string)ipAddressValue);
                                                    vMwareVirtualMachineDetailsInstance.IpAddress = ipAddressInstance;
                                                }
                                                
                                                JToken poweredOnValue = customDetailsValue["poweredOn"];
                                                if (poweredOnValue != null && poweredOnValue.Type != JTokenType.Null)
                                                {
                                                    string poweredOnInstance = ((string)poweredOnValue);
                                                    vMwareVirtualMachineDetailsInstance.PoweredOn = poweredOnInstance;
                                                }
                                                
                                                JToken vCenterInfrastructureIdValue = customDetailsValue["vCenterInfrastructureId"];
                                                if (vCenterInfrastructureIdValue != null && vCenterInfrastructureIdValue.Type != JTokenType.Null)
                                                {
                                                    string vCenterInfrastructureIdInstance = ((string)vCenterInfrastructureIdValue);
                                                    vMwareVirtualMachineDetailsInstance.VCenterInfrastructureId = vCenterInfrastructureIdInstance;
                                                }
                                                
                                                JToken diskDetailsArray2 = customDetailsValue["diskDetails"];
                                                if (diskDetailsArray2 != null && diskDetailsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken diskDetailsValue2 in ((JArray)diskDetailsArray2))
                                                    {
                                                        InMageDiskDetails inMageDiskDetailsInstance = new InMageDiskDetails();
                                                        vMwareVirtualMachineDetailsInstance.DiskDetails.Add(inMageDiskDetailsInstance);
                                                        
                                                        JToken diskIdValue = diskDetailsValue2["diskId"];
                                                        if (diskIdValue != null && diskIdValue.Type != JTokenType.Null)
                                                        {
                                                            string diskIdInstance = ((string)diskIdValue);
                                                            inMageDiskDetailsInstance.DiskId = diskIdInstance;
                                                        }
                                                        
                                                        JToken diskNameValue = diskDetailsValue2["diskName"];
                                                        if (diskNameValue != null && diskNameValue.Type != JTokenType.Null)
                                                        {
                                                            string diskNameInstance = ((string)diskNameValue);
                                                            inMageDiskDetailsInstance.DiskName = diskNameInstance;
                                                        }
                                                        
                                                        JToken diskSizeInMBValue = diskDetailsValue2["diskSizeInMB"];
                                                        if (diskSizeInMBValue != null && diskSizeInMBValue.Type != JTokenType.Null)
                                                        {
                                                            string diskSizeInMBInstance = ((string)diskSizeInMBValue);
                                                            inMageDiskDetailsInstance.DiskSizeInMB = diskSizeInMBInstance;
                                                        }
                                                        
                                                        JToken diskTypeValue = diskDetailsValue2["diskType"];
                                                        if (diskTypeValue != null && diskTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string diskTypeInstance = ((string)diskTypeValue);
                                                            inMageDiskDetailsInstance.DiskType = diskTypeInstance;
                                                        }
                                                        
                                                        JToken diskConfigurationValue = diskDetailsValue2["diskConfiguration"];
                                                        if (diskConfigurationValue != null && diskConfigurationValue.Type != JTokenType.Null)
                                                        {
                                                            string diskConfigurationInstance = ((string)diskConfigurationValue);
                                                            inMageDiskDetailsInstance.DiskConfiguration = diskConfigurationInstance;
                                                        }
                                                        
                                                        JToken volumeListArray = diskDetailsValue2["volumeList"];
                                                        if (volumeListArray != null && volumeListArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken volumeListValue in ((JArray)volumeListArray))
                                                            {
                                                                DiskVolumeDetails diskVolumeDetailsInstance = new DiskVolumeDetails();
                                                                inMageDiskDetailsInstance.VolumeList.Add(diskVolumeDetailsInstance);
                                                                
                                                                JToken labelValue = volumeListValue["label"];
                                                                if (labelValue != null && labelValue.Type != JTokenType.Null)
                                                                {
                                                                    string labelInstance = ((string)labelValue);
                                                                    diskVolumeDetailsInstance.Label = labelInstance;
                                                                }
                                                                
                                                                JToken nameValue = volumeListValue["name"];
                                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                                {
                                                                    string nameInstance = ((string)nameValue);
                                                                    diskVolumeDetailsInstance.Name = nameInstance;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken discoveryTypeValue = customDetailsValue["discoveryType"];
                                                if (discoveryTypeValue != null && discoveryTypeValue.Type != JTokenType.Null)
                                                {
                                                    string discoveryTypeInstance = ((string)discoveryTypeValue);
                                                    vMwareVirtualMachineDetailsInstance.DiscoveryType = discoveryTypeInstance;
                                                }
                                                
                                                JToken instanceTypeValue2 = customDetailsValue["instanceType"];
                                                if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                                    vMwareVirtualMachineDetailsInstance.InstanceType = instanceTypeInstance2;
                                                }
                                                propertiesInstance.CustomDetails = vMwareVirtualMachineDetailsInstance;
                                            }
                                            if (typeName == "ReplicationGroupDetails")
                                            {
                                                ReplicationGroupDetails replicationGroupDetailsInstance = new ReplicationGroupDetails();
                                                
                                                JToken instanceTypeValue3 = customDetailsValue["instanceType"];
                                                if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                                    replicationGroupDetailsInstance.InstanceType = instanceTypeInstance3;
                                                }
                                                propertiesInstance.CustomDetails = replicationGroupDetailsInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        protectableItemInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue2 = valueValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        protectableItemInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        protectableItemInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        protectableItemInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            protectableItemInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Enumerate all replication protectable items in a container.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The url to the next protected items page.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list replicated protected items.
        /// </returns>
        public async Task<ProtectableItemListResponse> ListNextAsync(string nextLink, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProtectableItemListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProtectableItemListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ProtectableItem protectableItemInstance = new ProtectableItem();
                                    result.ProtectableItems.Add(protectableItemInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        ProtectableItemProperties propertiesInstance = new ProtectableItemProperties();
                                        protectableItemInstance.Properties = propertiesInstance;
                                        
                                        JToken friendlyNameValue = propertiesValue["friendlyName"];
                                        if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string friendlyNameInstance = ((string)friendlyNameValue);
                                            propertiesInstance.FriendlyName = friendlyNameInstance;
                                        }
                                        
                                        JToken protectionStatusValue = propertiesValue["protectionStatus"];
                                        if (protectionStatusValue != null && protectionStatusValue.Type != JTokenType.Null)
                                        {
                                            string protectionStatusInstance = ((string)protectionStatusValue);
                                            propertiesInstance.ProtectionStatus = protectionStatusInstance;
                                        }
                                        
                                        JToken replicationProtectedItemIdValue = propertiesValue["replicationProtectedItemId"];
                                        if (replicationProtectedItemIdValue != null && replicationProtectedItemIdValue.Type != JTokenType.Null)
                                        {
                                            string replicationProtectedItemIdInstance = ((string)replicationProtectedItemIdValue);
                                            propertiesInstance.ReplicationProtectedItemId = replicationProtectedItemIdInstance;
                                        }
                                        
                                        JToken protectionReadinessErrorsArray = propertiesValue["protectionReadinessErrors"];
                                        if (protectionReadinessErrorsArray != null && protectionReadinessErrorsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectionReadinessErrorsValue in ((JArray)protectionReadinessErrorsArray))
                                            {
                                                propertiesInstance.ProtectionReadinessErrors.Add(((string)protectionReadinessErrorsValue));
                                            }
                                        }
                                        
                                        JToken supportedReplicationProvidersArray = propertiesValue["supportedReplicationProviders"];
                                        if (supportedReplicationProvidersArray != null && supportedReplicationProvidersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken supportedReplicationProvidersValue in ((JArray)supportedReplicationProvidersArray))
                                            {
                                                propertiesInstance.SupportedReplicationProviders.Add(((string)supportedReplicationProvidersValue));
                                            }
                                        }
                                        
                                        JToken customDetailsValue = propertiesValue["customDetails"];
                                        if (customDetailsValue != null && customDetailsValue.Type != JTokenType.Null)
                                        {
                                            string typeName = ((string)customDetailsValue["instanceType"]);
                                            if (typeName == "HyperVVirtualMachine")
                                            {
                                                HyperVVirtualMachineDetails hyperVVirtualMachineDetailsInstance = new HyperVVirtualMachineDetails();
                                                
                                                JToken generationValue = customDetailsValue["generation"];
                                                if (generationValue != null && generationValue.Type != JTokenType.Null)
                                                {
                                                    string generationInstance = ((string)generationValue);
                                                    hyperVVirtualMachineDetailsInstance.Generation = generationInstance;
                                                }
                                                
                                                JToken sourceItemIdValue = customDetailsValue["sourceItemId"];
                                                if (sourceItemIdValue != null && sourceItemIdValue.Type != JTokenType.Null)
                                                {
                                                    string sourceItemIdInstance = ((string)sourceItemIdValue);
                                                    hyperVVirtualMachineDetailsInstance.SourceItemId = sourceItemIdInstance;
                                                }
                                                
                                                JToken osDetailsValue = customDetailsValue["osDetails"];
                                                if (osDetailsValue != null && osDetailsValue.Type != JTokenType.Null)
                                                {
                                                    OSDetails osDetailsInstance = new OSDetails();
                                                    hyperVVirtualMachineDetailsInstance.OSDetails = osDetailsInstance;
                                                    
                                                    JToken osTypeValue = osDetailsValue["osType"];
                                                    if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string osTypeInstance = ((string)osTypeValue);
                                                        osDetailsInstance.OsType = osTypeInstance;
                                                    }
                                                    
                                                    JToken productTypeValue = osDetailsValue["productType"];
                                                    if (productTypeValue != null && productTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string productTypeInstance = ((string)productTypeValue);
                                                        osDetailsInstance.ProductType = productTypeInstance;
                                                    }
                                                    
                                                    JToken osEditionValue = osDetailsValue["osEdition"];
                                                    if (osEditionValue != null && osEditionValue.Type != JTokenType.Null)
                                                    {
                                                        string osEditionInstance = ((string)osEditionValue);
                                                        osDetailsInstance.OSEdition = osEditionInstance;
                                                    }
                                                    
                                                    JToken oSVersionValue = osDetailsValue["oSVersion"];
                                                    if (oSVersionValue != null && oSVersionValue.Type != JTokenType.Null)
                                                    {
                                                        string oSVersionInstance = ((string)oSVersionValue);
                                                        osDetailsInstance.OSVersion = oSVersionInstance;
                                                    }
                                                    
                                                    JToken oSMajorVersionValue = osDetailsValue["oSMajorVersion"];
                                                    if (oSMajorVersionValue != null && oSMajorVersionValue.Type != JTokenType.Null)
                                                    {
                                                        string oSMajorVersionInstance = ((string)oSMajorVersionValue);
                                                        osDetailsInstance.OSMajorVersion = oSMajorVersionInstance;
                                                    }
                                                    
                                                    JToken oSMinorVersionValue = osDetailsValue["oSMinorVersion"];
                                                    if (oSMinorVersionValue != null && oSMinorVersionValue.Type != JTokenType.Null)
                                                    {
                                                        string oSMinorVersionInstance = ((string)oSMinorVersionValue);
                                                        osDetailsInstance.OSMinorVersion = oSMinorVersionInstance;
                                                    }
                                                }
                                                
                                                JToken diskDetailsArray = customDetailsValue["diskDetails"];
                                                if (diskDetailsArray != null && diskDetailsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken diskDetailsValue in ((JArray)diskDetailsArray))
                                                    {
                                                        DiskDetails diskDetailsInstance = new DiskDetails();
                                                        hyperVVirtualMachineDetailsInstance.DiskDetailsList.Add(diskDetailsInstance);
                                                        
                                                        JToken maxSizeMBValue = diskDetailsValue["maxSizeMB"];
                                                        if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                                        {
                                                            ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                                            diskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                                        }
                                                        
                                                        JToken vhdTypeValue = diskDetailsValue["vhdType"];
                                                        if (vhdTypeValue != null && vhdTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string vhdTypeInstance = ((string)vhdTypeValue);
                                                            diskDetailsInstance.VhdType = vhdTypeInstance;
                                                        }
                                                        
                                                        JToken vhdIdValue = diskDetailsValue["vhdId"];
                                                        if (vhdIdValue != null && vhdIdValue.Type != JTokenType.Null)
                                                        {
                                                            string vhdIdInstance = ((string)vhdIdValue);
                                                            diskDetailsInstance.VhdId = vhdIdInstance;
                                                        }
                                                        
                                                        JToken vhdNameValue = diskDetailsValue["vhdName"];
                                                        if (vhdNameValue != null && vhdNameValue.Type != JTokenType.Null)
                                                        {
                                                            string vhdNameInstance = ((string)vhdNameValue);
                                                            diskDetailsInstance.VhdName = vhdNameInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken instanceTypeValue = customDetailsValue["instanceType"];
                                                if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance = ((string)instanceTypeValue);
                                                    hyperVVirtualMachineDetailsInstance.InstanceType = instanceTypeInstance;
                                                }
                                                propertiesInstance.CustomDetails = hyperVVirtualMachineDetailsInstance;
                                            }
                                            if (typeName == "VMwareVirtualMachine")
                                            {
                                                VMwareVirtualMachineDetails vMwareVirtualMachineDetailsInstance = new VMwareVirtualMachineDetails();
                                                
                                                JToken agentGeneratedIdValue = customDetailsValue["agentGeneratedId"];
                                                if (agentGeneratedIdValue != null && agentGeneratedIdValue.Type != JTokenType.Null)
                                                {
                                                    string agentGeneratedIdInstance = ((string)agentGeneratedIdValue);
                                                    vMwareVirtualMachineDetailsInstance.AgentGeneratedId = agentGeneratedIdInstance;
                                                }
                                                
                                                JToken agentInstalledValue = customDetailsValue["agentInstalled"];
                                                if (agentInstalledValue != null && agentInstalledValue.Type != JTokenType.Null)
                                                {
                                                    string agentInstalledInstance = ((string)agentInstalledValue);
                                                    vMwareVirtualMachineDetailsInstance.AgentInstalled = agentInstalledInstance;
                                                }
                                                
                                                JToken osTypeValue2 = customDetailsValue["osType"];
                                                if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance2 = ((string)osTypeValue2);
                                                    vMwareVirtualMachineDetailsInstance.OsType = osTypeInstance2;
                                                }
                                                
                                                JToken agentVersionValue = customDetailsValue["agentVersion"];
                                                if (agentVersionValue != null && agentVersionValue.Type != JTokenType.Null)
                                                {
                                                    string agentVersionInstance = ((string)agentVersionValue);
                                                    vMwareVirtualMachineDetailsInstance.AgentVersion = agentVersionInstance;
                                                }
                                                
                                                JToken ipAddressValue = customDetailsValue["ipAddress"];
                                                if (ipAddressValue != null && ipAddressValue.Type != JTokenType.Null)
                                                {
                                                    string ipAddressInstance = ((string)ipAddressValue);
                                                    vMwareVirtualMachineDetailsInstance.IpAddress = ipAddressInstance;
                                                }
                                                
                                                JToken poweredOnValue = customDetailsValue["poweredOn"];
                                                if (poweredOnValue != null && poweredOnValue.Type != JTokenType.Null)
                                                {
                                                    string poweredOnInstance = ((string)poweredOnValue);
                                                    vMwareVirtualMachineDetailsInstance.PoweredOn = poweredOnInstance;
                                                }
                                                
                                                JToken vCenterInfrastructureIdValue = customDetailsValue["vCenterInfrastructureId"];
                                                if (vCenterInfrastructureIdValue != null && vCenterInfrastructureIdValue.Type != JTokenType.Null)
                                                {
                                                    string vCenterInfrastructureIdInstance = ((string)vCenterInfrastructureIdValue);
                                                    vMwareVirtualMachineDetailsInstance.VCenterInfrastructureId = vCenterInfrastructureIdInstance;
                                                }
                                                
                                                JToken diskDetailsArray2 = customDetailsValue["diskDetails"];
                                                if (diskDetailsArray2 != null && diskDetailsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken diskDetailsValue2 in ((JArray)diskDetailsArray2))
                                                    {
                                                        InMageDiskDetails inMageDiskDetailsInstance = new InMageDiskDetails();
                                                        vMwareVirtualMachineDetailsInstance.DiskDetails.Add(inMageDiskDetailsInstance);
                                                        
                                                        JToken diskIdValue = diskDetailsValue2["diskId"];
                                                        if (diskIdValue != null && diskIdValue.Type != JTokenType.Null)
                                                        {
                                                            string diskIdInstance = ((string)diskIdValue);
                                                            inMageDiskDetailsInstance.DiskId = diskIdInstance;
                                                        }
                                                        
                                                        JToken diskNameValue = diskDetailsValue2["diskName"];
                                                        if (diskNameValue != null && diskNameValue.Type != JTokenType.Null)
                                                        {
                                                            string diskNameInstance = ((string)diskNameValue);
                                                            inMageDiskDetailsInstance.DiskName = diskNameInstance;
                                                        }
                                                        
                                                        JToken diskSizeInMBValue = diskDetailsValue2["diskSizeInMB"];
                                                        if (diskSizeInMBValue != null && diskSizeInMBValue.Type != JTokenType.Null)
                                                        {
                                                            string diskSizeInMBInstance = ((string)diskSizeInMBValue);
                                                            inMageDiskDetailsInstance.DiskSizeInMB = diskSizeInMBInstance;
                                                        }
                                                        
                                                        JToken diskTypeValue = diskDetailsValue2["diskType"];
                                                        if (diskTypeValue != null && diskTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string diskTypeInstance = ((string)diskTypeValue);
                                                            inMageDiskDetailsInstance.DiskType = diskTypeInstance;
                                                        }
                                                        
                                                        JToken diskConfigurationValue = diskDetailsValue2["diskConfiguration"];
                                                        if (diskConfigurationValue != null && diskConfigurationValue.Type != JTokenType.Null)
                                                        {
                                                            string diskConfigurationInstance = ((string)diskConfigurationValue);
                                                            inMageDiskDetailsInstance.DiskConfiguration = diskConfigurationInstance;
                                                        }
                                                        
                                                        JToken volumeListArray = diskDetailsValue2["volumeList"];
                                                        if (volumeListArray != null && volumeListArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken volumeListValue in ((JArray)volumeListArray))
                                                            {
                                                                DiskVolumeDetails diskVolumeDetailsInstance = new DiskVolumeDetails();
                                                                inMageDiskDetailsInstance.VolumeList.Add(diskVolumeDetailsInstance);
                                                                
                                                                JToken labelValue = volumeListValue["label"];
                                                                if (labelValue != null && labelValue.Type != JTokenType.Null)
                                                                {
                                                                    string labelInstance = ((string)labelValue);
                                                                    diskVolumeDetailsInstance.Label = labelInstance;
                                                                }
                                                                
                                                                JToken nameValue = volumeListValue["name"];
                                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                                {
                                                                    string nameInstance = ((string)nameValue);
                                                                    diskVolumeDetailsInstance.Name = nameInstance;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken discoveryTypeValue = customDetailsValue["discoveryType"];
                                                if (discoveryTypeValue != null && discoveryTypeValue.Type != JTokenType.Null)
                                                {
                                                    string discoveryTypeInstance = ((string)discoveryTypeValue);
                                                    vMwareVirtualMachineDetailsInstance.DiscoveryType = discoveryTypeInstance;
                                                }
                                                
                                                JToken instanceTypeValue2 = customDetailsValue["instanceType"];
                                                if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                                    vMwareVirtualMachineDetailsInstance.InstanceType = instanceTypeInstance2;
                                                }
                                                propertiesInstance.CustomDetails = vMwareVirtualMachineDetailsInstance;
                                            }
                                            if (typeName == "ReplicationGroupDetails")
                                            {
                                                ReplicationGroupDetails replicationGroupDetailsInstance = new ReplicationGroupDetails();
                                                
                                                JToken instanceTypeValue3 = customDetailsValue["instanceType"];
                                                if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                                    replicationGroupDetailsInstance.InstanceType = instanceTypeInstance3;
                                                }
                                                propertiesInstance.CustomDetails = replicationGroupDetailsInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        protectableItemInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue2 = valueValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        protectableItemInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        protectableItemInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        protectableItemInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            protectableItemInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
