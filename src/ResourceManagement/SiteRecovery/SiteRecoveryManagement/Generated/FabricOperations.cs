// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.SiteRecovery;
using Microsoft.Azure.Management.SiteRecovery.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.SiteRecovery
{
    /// <summary>
    /// Definition of fabric operations for the Site Recovery extension.
    /// </summary>
    internal partial class FabricOperations : IServiceOperations<SiteRecoveryManagementClient>, IFabricOperations
    {
        /// <summary>
        /// Initializes a new instance of the FabricOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal FabricOperations(SiteRecoveryManagementClient client)
        {
            this._client = client;
        }
        
        private SiteRecoveryManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.SiteRecovery.SiteRecoveryManagementClient.
        /// </summary>
        public SiteRecoveryManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Creates a Fabric
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric Name.
        /// </param>
        /// <param name='input'>
        /// Required. Input to create fabric
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginCreatingAsync(string fabricName, FabricCreationInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginCreatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject fabricCreationInputValue = new JObject();
                requestDoc = fabricCreationInputValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    fabricCreationInputValue["properties"] = propertiesValue;
                    
                    if (input.Properties.FabricType != null)
                    {
                        propertiesValue["fabricType"] = input.Properties.FabricType;
                    }
                    
                    if (input.Properties.CustomDetails != null)
                    {
                        JObject customDetailsValue = new JObject();
                        propertiesValue["customDetails"] = customDetailsValue;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes a Fabric
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginDeletingAsync(string fabricName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/remove";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deploy a Process Server.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric Name.
        /// </param>
        /// <param name='input'>
        /// Required. Input to deploy a Process Server.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginDeployProcessServerAsync(string fabricName, DeployProcessServerRequest input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginDeployProcessServerAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/deployProcessServer";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject deployProcessServerRequestValue = new JObject();
                requestDoc = deployProcessServerRequestValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    deployProcessServerRequestValue["properties"] = propertiesValue;
                    
                    if (input.Properties.SubscriptionId != null)
                    {
                        propertiesValue["subscriptionId"] = input.Properties.SubscriptionId;
                    }
                    
                    if (input.Properties.VaultLocation != null)
                    {
                        propertiesValue["vaultLocation"] = input.Properties.VaultLocation;
                    }
                    
                    if (input.Properties.ProcessServerName != null)
                    {
                        propertiesValue["friendlyName"] = input.Properties.ProcessServerName;
                    }
                    
                    if (input.Properties.Username != null)
                    {
                        propertiesValue["userName"] = input.Properties.Username;
                    }
                    
                    if (input.Properties.Password != null)
                    {
                        propertiesValue["password"] = input.Properties.Password;
                    }
                    
                    if (input.Properties.IpAddress != null)
                    {
                        propertiesValue["ipAddress"] = input.Properties.IpAddress;
                    }
                    
                    if (input.Properties.AzureNetworkName != null)
                    {
                        propertiesValue["azureNetworkName"] = input.Properties.AzureNetworkName;
                    }
                    
                    if (input.Properties.AzureNetworkSubnet != null)
                    {
                        propertiesValue["azureNetworkSubnet"] = input.Properties.AzureNetworkSubnet;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Purges a Fabric
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginPurgingAsync(string fabricName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginPurgingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Performs reassociate gateway operation on a fabric.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric Name.
        /// </param>
        /// <param name='input'>
        /// Required. Input to reassociate a gateway.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginReassociateGatewayAsync(string fabricName, FailoverProcessServerRequest input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginReassociateGatewayAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/reassociateGateway";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject failoverProcessServerRequestValue = new JObject();
                requestDoc = failoverProcessServerRequestValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    failoverProcessServerRequestValue["properties"] = propertiesValue;
                    
                    if (input.Properties.ContainerId != null)
                    {
                        propertiesValue["containerName"] = input.Properties.ContainerId;
                    }
                    
                    if (input.Properties.SourceProcessServerId != null)
                    {
                        propertiesValue["sourceProcessServerId"] = input.Properties.SourceProcessServerId;
                    }
                    
                    if (input.Properties.TargetProcessServerId != null)
                    {
                        propertiesValue["targetProcessServerId"] = input.Properties.TargetProcessServerId;
                    }
                    
                    if (input.Properties.VmsToMigrate != null)
                    {
                        if (input.Properties.VmsToMigrate is ILazyCollection == false || ((ILazyCollection)input.Properties.VmsToMigrate).IsInitialized)
                        {
                            JArray vmsToMigrateArray = new JArray();
                            foreach (string vmsToMigrateItem in input.Properties.VmsToMigrate)
                            {
                                vmsToMigrateArray.Add(vmsToMigrateItem);
                            }
                            propertiesValue["vmsToMigrate"] = vmsToMigrateArray;
                        }
                    }
                    
                    if (input.Properties.FailoverType != null)
                    {
                        propertiesValue["updateType"] = input.Properties.FailoverType;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Renews certificates of a Fabric
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginRenewCertificateAsync(string fabricName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginRenewCertificateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/renewCertificate";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Creates a fabric
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric Name.
        /// </param>
        /// <param name='input'>
        /// Required. Input to create fabric
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> CreateAsync(string fabricName, FabricCreationInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.Fabrics.BeginCreatingAsync(fabricName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            FabricOperationResponse result = await client.Fabrics.GetCreateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.Fabrics.GetCreateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Deletes a fabric
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> DeleteAsync(string fabricName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.Fabrics.BeginDeletingAsync(fabricName, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse result = await client.Fabrics.GetDeleteStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.Fabrics.GetDeleteStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Deploy a Process Server.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric Name.
        /// </param>
        /// <param name='input'>
        /// Required. Input to deploy a Process Server.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> DeployProcessServerAsync(string fabricName, DeployProcessServerRequest input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "DeployProcessServerAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.Fabrics.BeginDeployProcessServerAsync(fabricName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            DeployProcessServerOperationResponse result = await client.Fabrics.GetDeployProcessServerStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.Fabrics.GetDeployProcessServerStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Get the server object by Id.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the fabric object
        /// </returns>
        public async Task<FabricResponse> GetAsync(string fabricName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FabricResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FabricResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Fabric fabricInstance = new Fabric();
                            result.Fabric = fabricInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                FabricProperties propertiesInstance = new FabricProperties();
                                fabricInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken internalIdentifierValue = propertiesValue["internalIdentifier"];
                                if (internalIdentifierValue != null && internalIdentifierValue.Type != JTokenType.Null)
                                {
                                    string internalIdentifierInstance = ((string)internalIdentifierValue);
                                    propertiesInstance.InternalIdentifier = internalIdentifierInstance;
                                }
                                
                                JToken encryptionDetailsValue = propertiesValue["encryptionDetails"];
                                if (encryptionDetailsValue != null && encryptionDetailsValue.Type != JTokenType.Null)
                                {
                                    EncryptionDetails encryptionDetailsInstance = new EncryptionDetails();
                                    propertiesInstance.EncryptionDetails = encryptionDetailsInstance;
                                    
                                    JToken kekStateValue = encryptionDetailsValue["kekState"];
                                    if (kekStateValue != null && kekStateValue.Type != JTokenType.Null)
                                    {
                                        string kekStateInstance = ((string)kekStateValue);
                                        encryptionDetailsInstance.KekState = kekStateInstance;
                                    }
                                    
                                    JToken kekCertThumbprintValue = encryptionDetailsValue["kekCertThumbprint"];
                                    if (kekCertThumbprintValue != null && kekCertThumbprintValue.Type != JTokenType.Null)
                                    {
                                        string kekCertThumbprintInstance = ((string)kekCertThumbprintValue);
                                        encryptionDetailsInstance.KekCertThumbprint = kekCertThumbprintInstance;
                                    }
                                    
                                    JToken kekCertExpiryDateValue = encryptionDetailsValue["kekCertExpiryDate"];
                                    if (kekCertExpiryDateValue != null && kekCertExpiryDateValue.Type != JTokenType.Null)
                                    {
                                        DateTime kekCertExpiryDateInstance = ((DateTime)kekCertExpiryDateValue);
                                        encryptionDetailsInstance.KekCertExpiryDate = kekCertExpiryDateInstance;
                                    }
                                }
                                
                                JToken rolloverEncryptionDetailsValue = propertiesValue["rolloverEncryptionDetails"];
                                if (rolloverEncryptionDetailsValue != null && rolloverEncryptionDetailsValue.Type != JTokenType.Null)
                                {
                                    EncryptionDetails rolloverEncryptionDetailsInstance = new EncryptionDetails();
                                    propertiesInstance.RolloverEncryptionDetails = rolloverEncryptionDetailsInstance;
                                    
                                    JToken kekStateValue2 = rolloverEncryptionDetailsValue["kekState"];
                                    if (kekStateValue2 != null && kekStateValue2.Type != JTokenType.Null)
                                    {
                                        string kekStateInstance2 = ((string)kekStateValue2);
                                        rolloverEncryptionDetailsInstance.KekState = kekStateInstance2;
                                    }
                                    
                                    JToken kekCertThumbprintValue2 = rolloverEncryptionDetailsValue["kekCertThumbprint"];
                                    if (kekCertThumbprintValue2 != null && kekCertThumbprintValue2.Type != JTokenType.Null)
                                    {
                                        string kekCertThumbprintInstance2 = ((string)kekCertThumbprintValue2);
                                        rolloverEncryptionDetailsInstance.KekCertThumbprint = kekCertThumbprintInstance2;
                                    }
                                    
                                    JToken kekCertExpiryDateValue2 = rolloverEncryptionDetailsValue["kekCertExpiryDate"];
                                    if (kekCertExpiryDateValue2 != null && kekCertExpiryDateValue2.Type != JTokenType.Null)
                                    {
                                        DateTime kekCertExpiryDateInstance2 = ((DateTime)kekCertExpiryDateValue2);
                                        rolloverEncryptionDetailsInstance.KekCertExpiryDate = kekCertExpiryDateInstance2;
                                    }
                                }
                                
                                JToken customDetailsValue = propertiesValue["customDetails"];
                                if (customDetailsValue != null && customDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)customDetailsValue["instanceType"]);
                                    if (typeName == "VMM")
                                    {
                                        VmmDetails vmmDetailsInstance = new VmmDetails();
                                        
                                        JToken instanceTypeValue = customDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            vmmDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.CustomDetails = vmmDetailsInstance;
                                    }
                                    if (typeName == "HyperVSite")
                                    {
                                        HyperVSiteDetails hyperVSiteDetailsInstance = new HyperVSiteDetails();
                                        
                                        JToken instanceTypeValue2 = customDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            hyperVSiteDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.CustomDetails = hyperVSiteDetailsInstance;
                                    }
                                    if (typeName == "VMware")
                                    {
                                        VMwareFabricDetails vMwareFabricDetailsInstance = new VMwareFabricDetails();
                                        
                                        JToken processServersArray = customDetailsValue["processServers"];
                                        if (processServersArray != null && processServersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken processServersValue in ((JArray)processServersArray))
                                            {
                                                ProcessServer processServerInstance = new ProcessServer();
                                                vMwareFabricDetailsInstance.ProcessServers.Add(processServerInstance);
                                                
                                                JToken friendlyNameValue2 = processServersValue["friendlyName"];
                                                if (friendlyNameValue2 != null && friendlyNameValue2.Type != JTokenType.Null)
                                                {
                                                    string friendlyNameInstance2 = ((string)friendlyNameValue2);
                                                    processServerInstance.FriendlyName = friendlyNameInstance2;
                                                }
                                                
                                                JToken idValue = processServersValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    processServerInstance.Id = idInstance;
                                                }
                                                
                                                JToken ipAddressValue = processServersValue["ipAddress"];
                                                if (ipAddressValue != null && ipAddressValue.Type != JTokenType.Null)
                                                {
                                                    string ipAddressInstance = ((string)ipAddressValue);
                                                    processServerInstance.IpAddress = ipAddressInstance;
                                                }
                                                
                                                JToken osTypeValue = processServersValue["osType"];
                                                if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance = ((string)osTypeValue);
                                                    processServerInstance.OsType = osTypeInstance;
                                                }
                                                
                                                JToken agentVersionValue = processServersValue["agentVersion"];
                                                if (agentVersionValue != null && agentVersionValue.Type != JTokenType.Null)
                                                {
                                                    string agentVersionInstance = ((string)agentVersionValue);
                                                    processServerInstance.AgentVersion = agentVersionInstance;
                                                }
                                                
                                                JToken lastHeartbeatValue = processServersValue["lastHeartbeat"];
                                                if (lastHeartbeatValue != null && lastHeartbeatValue.Type != JTokenType.Null)
                                                {
                                                    DateTime lastHeartbeatInstance = ((DateTime)lastHeartbeatValue);
                                                    processServerInstance.LastHeartbeat = lastHeartbeatInstance;
                                                }
                                                
                                                JToken versionStatusValue = processServersValue["versionStatus"];
                                                if (versionStatusValue != null && versionStatusValue.Type != JTokenType.Null)
                                                {
                                                    string versionStatusInstance = ((string)versionStatusValue);
                                                    processServerInstance.VersionStatus = versionStatusInstance;
                                                }
                                                
                                                JToken mobilityServiceUpdatesArray = processServersValue["mobilityServiceUpdates"];
                                                if (mobilityServiceUpdatesArray != null && mobilityServiceUpdatesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken mobilityServiceUpdatesValue in ((JArray)mobilityServiceUpdatesArray))
                                                    {
                                                        MobilityServiceUpdate mobilityServiceUpdateInstance = new MobilityServiceUpdate();
                                                        processServerInstance.Updates.Add(mobilityServiceUpdateInstance);
                                                        
                                                        JToken versionValue = mobilityServiceUpdatesValue["version"];
                                                        if (versionValue != null && versionValue.Type != JTokenType.Null)
                                                        {
                                                            string versionInstance = ((string)versionValue);
                                                            mobilityServiceUpdateInstance.Version = versionInstance;
                                                        }
                                                        
                                                        JToken rebootStatusValue = mobilityServiceUpdatesValue["rebootStatus"];
                                                        if (rebootStatusValue != null && rebootStatusValue.Type != JTokenType.Null)
                                                        {
                                                            string rebootStatusInstance = ((string)rebootStatusValue);
                                                            mobilityServiceUpdateInstance.RebootStatus = rebootStatusInstance;
                                                        }
                                                        
                                                        JToken osTypeValue2 = mobilityServiceUpdatesValue["osType"];
                                                        if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string osTypeInstance2 = ((string)osTypeValue2);
                                                            mobilityServiceUpdateInstance.OsType = osTypeInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                JToken hostIdValue = processServersValue["hostId"];
                                                if (hostIdValue != null && hostIdValue.Type != JTokenType.Null)
                                                {
                                                    string hostIdInstance = ((string)hostIdValue);
                                                    processServerInstance.HostId = hostIdInstance;
                                                }
                                                
                                                JToken machineCountValue = processServersValue["machineCount"];
                                                if (machineCountValue != null && machineCountValue.Type != JTokenType.Null)
                                                {
                                                    string machineCountInstance = ((string)machineCountValue);
                                                    processServerInstance.ServerCount = machineCountInstance;
                                                }
                                                
                                                JToken replicationPairCountValue = processServersValue["replicationPairCount"];
                                                if (replicationPairCountValue != null && replicationPairCountValue.Type != JTokenType.Null)
                                                {
                                                    string replicationPairCountInstance = ((string)replicationPairCountValue);
                                                    processServerInstance.ReplicationPairCount = replicationPairCountInstance;
                                                }
                                                
                                                JToken systemLoadValue = processServersValue["systemLoad"];
                                                if (systemLoadValue != null && systemLoadValue.Type != JTokenType.Null)
                                                {
                                                    string systemLoadInstance = ((string)systemLoadValue);
                                                    processServerInstance.SystemLoad = systemLoadInstance;
                                                }
                                                
                                                JToken systemLoadStatusValue = processServersValue["systemLoadStatus"];
                                                if (systemLoadStatusValue != null && systemLoadStatusValue.Type != JTokenType.Null)
                                                {
                                                    string systemLoadStatusInstance = ((string)systemLoadStatusValue);
                                                    processServerInstance.SystemLoadStatus = systemLoadStatusInstance;
                                                }
                                                
                                                JToken cpuLoadValue = processServersValue["cpuLoad"];
                                                if (cpuLoadValue != null && cpuLoadValue.Type != JTokenType.Null)
                                                {
                                                    string cpuLoadInstance = ((string)cpuLoadValue);
                                                    processServerInstance.CpuLoad = cpuLoadInstance;
                                                }
                                                
                                                JToken cpuLoadStatusValue = processServersValue["cpuLoadStatus"];
                                                if (cpuLoadStatusValue != null && cpuLoadStatusValue.Type != JTokenType.Null)
                                                {
                                                    string cpuLoadStatusInstance = ((string)cpuLoadStatusValue);
                                                    processServerInstance.CpuLoadStatus = cpuLoadStatusInstance;
                                                }
                                                
                                                JToken totalMemoryInBytesValue = processServersValue["totalMemoryInBytes"];
                                                if (totalMemoryInBytesValue != null && totalMemoryInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long totalMemoryInBytesInstance = ((long)totalMemoryInBytesValue);
                                                    processServerInstance.TotalMemoryInBytes = totalMemoryInBytesInstance;
                                                }
                                                
                                                JToken availableMemoryInBytesValue = processServersValue["availableMemoryInBytes"];
                                                if (availableMemoryInBytesValue != null && availableMemoryInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long availableMemoryInBytesInstance = ((long)availableMemoryInBytesValue);
                                                    processServerInstance.AvailableMemoryInBytes = availableMemoryInBytesInstance;
                                                }
                                                
                                                JToken memoryUsageStatusValue = processServersValue["memoryUsageStatus"];
                                                if (memoryUsageStatusValue != null && memoryUsageStatusValue.Type != JTokenType.Null)
                                                {
                                                    string memoryUsageStatusInstance = ((string)memoryUsageStatusValue);
                                                    processServerInstance.MemoryUsageStatus = memoryUsageStatusInstance;
                                                }
                                                
                                                JToken totalSpaceInBytesValue = processServersValue["totalSpaceInBytes"];
                                                if (totalSpaceInBytesValue != null && totalSpaceInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long totalSpaceInBytesInstance = ((long)totalSpaceInBytesValue);
                                                    processServerInstance.TotalSpaceInBytes = totalSpaceInBytesInstance;
                                                }
                                                
                                                JToken availableSpaceInBytesValue = processServersValue["availableSpaceInBytes"];
                                                if (availableSpaceInBytesValue != null && availableSpaceInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long availableSpaceInBytesInstance = ((long)availableSpaceInBytesValue);
                                                    processServerInstance.AvailableSpaceInBytes = availableSpaceInBytesInstance;
                                                }
                                                
                                                JToken spaceUsageStatusValue = processServersValue["spaceUsageStatus"];
                                                if (spaceUsageStatusValue != null && spaceUsageStatusValue.Type != JTokenType.Null)
                                                {
                                                    string spaceUsageStatusInstance = ((string)spaceUsageStatusValue);
                                                    processServerInstance.SpaceUsageStatus = spaceUsageStatusInstance;
                                                }
                                                
                                                JToken psServiceStatusValue = processServersValue["psServiceStatus"];
                                                if (psServiceStatusValue != null && psServiceStatusValue.Type != JTokenType.Null)
                                                {
                                                    string psServiceStatusInstance = ((string)psServiceStatusValue);
                                                    processServerInstance.PsServiceStatus = psServiceStatusInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken masterTargetServersArray = customDetailsValue["masterTargetServers"];
                                        if (masterTargetServersArray != null && masterTargetServersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken masterTargetServersValue in ((JArray)masterTargetServersArray))
                                            {
                                                MasterTargetServer masterTargetServerInstance = new MasterTargetServer();
                                                vMwareFabricDetailsInstance.MasterTargetServers.Add(masterTargetServerInstance);
                                                
                                                JToken idValue2 = masterTargetServersValue["id"];
                                                if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                {
                                                    string idInstance2 = ((string)idValue2);
                                                    masterTargetServerInstance.Id = idInstance2;
                                                }
                                                
                                                JToken ipAddressValue2 = masterTargetServersValue["ipAddress"];
                                                if (ipAddressValue2 != null && ipAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string ipAddressInstance2 = ((string)ipAddressValue2);
                                                    masterTargetServerInstance.IpAddress = ipAddressInstance2;
                                                }
                                                
                                                JToken nameValue = masterTargetServersValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    masterTargetServerInstance.Name = nameInstance;
                                                }
                                                
                                                JToken osTypeValue3 = masterTargetServersValue["osType"];
                                                if (osTypeValue3 != null && osTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance3 = ((string)osTypeValue3);
                                                    masterTargetServerInstance.OsType = osTypeInstance3;
                                                }
                                                
                                                JToken agentVersionValue2 = masterTargetServersValue["agentVersion"];
                                                if (agentVersionValue2 != null && agentVersionValue2.Type != JTokenType.Null)
                                                {
                                                    string agentVersionInstance2 = ((string)agentVersionValue2);
                                                    masterTargetServerInstance.AgentVersion = agentVersionInstance2;
                                                }
                                                
                                                JToken lastHeartbeatValue2 = masterTargetServersValue["lastHeartbeat"];
                                                if (lastHeartbeatValue2 != null && lastHeartbeatValue2.Type != JTokenType.Null)
                                                {
                                                    DateTime lastHeartbeatInstance2 = ((DateTime)lastHeartbeatValue2);
                                                    masterTargetServerInstance.LastHeartbeat = lastHeartbeatInstance2;
                                                }
                                                
                                                JToken versionStatusValue2 = masterTargetServersValue["versionStatus"];
                                                if (versionStatusValue2 != null && versionStatusValue2.Type != JTokenType.Null)
                                                {
                                                    string versionStatusInstance2 = ((string)versionStatusValue2);
                                                    masterTargetServerInstance.VersionStatus = versionStatusInstance2;
                                                }
                                                
                                                JToken retentionVolumesArray = masterTargetServersValue["retentionVolumes"];
                                                if (retentionVolumesArray != null && retentionVolumesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken retentionVolumesValue in ((JArray)retentionVolumesArray))
                                                    {
                                                        RetentionVolume retentionVolumeInstance = new RetentionVolume();
                                                        masterTargetServerInstance.RetentionVolumes.Add(retentionVolumeInstance);
                                                        
                                                        JToken volumeNameValue = retentionVolumesValue["volumeName"];
                                                        if (volumeNameValue != null && volumeNameValue.Type != JTokenType.Null)
                                                        {
                                                            string volumeNameInstance = ((string)volumeNameValue);
                                                            retentionVolumeInstance.VolumeName = volumeNameInstance;
                                                        }
                                                        
                                                        JToken capacityInBytesValue = retentionVolumesValue["capacityInBytes"];
                                                        if (capacityInBytesValue != null && capacityInBytesValue.Type != JTokenType.Null)
                                                        {
                                                            long capacityInBytesInstance = ((long)capacityInBytesValue);
                                                            retentionVolumeInstance.CapacityInBytes = capacityInBytesInstance;
                                                        }
                                                        
                                                        JToken freeSpaceInBytesValue = retentionVolumesValue["freeSpaceInBytes"];
                                                        if (freeSpaceInBytesValue != null && freeSpaceInBytesValue.Type != JTokenType.Null)
                                                        {
                                                            long freeSpaceInBytesInstance = ((long)freeSpaceInBytesValue);
                                                            retentionVolumeInstance.FreeSpaceInBytes = freeSpaceInBytesInstance;
                                                        }
                                                        
                                                        JToken thresholdPercentageValue = retentionVolumesValue["thresholdPercentage"];
                                                        if (thresholdPercentageValue != null && thresholdPercentageValue.Type != JTokenType.Null)
                                                        {
                                                            int thresholdPercentageInstance = ((int)thresholdPercentageValue);
                                                            retentionVolumeInstance.ThresholdPercentage = thresholdPercentageInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken dataStoresArray = masterTargetServersValue["dataStores"];
                                                if (dataStoresArray != null && dataStoresArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken dataStoresValue in ((JArray)dataStoresArray))
                                                    {
                                                        DataStore dataStoreInstance = new DataStore();
                                                        masterTargetServerInstance.DataStores.Add(dataStoreInstance);
                                                        
                                                        JToken symbolicNameValue = dataStoresValue["symbolicName"];
                                                        if (symbolicNameValue != null && symbolicNameValue.Type != JTokenType.Null)
                                                        {
                                                            string symbolicNameInstance = ((string)symbolicNameValue);
                                                            dataStoreInstance.SymbolicName = symbolicNameInstance;
                                                        }
                                                        
                                                        JToken uuidValue = dataStoresValue["uuid"];
                                                        if (uuidValue != null && uuidValue.Type != JTokenType.Null)
                                                        {
                                                            string uuidInstance = ((string)uuidValue);
                                                            dataStoreInstance.Uuid = uuidInstance;
                                                        }
                                                        
                                                        JToken capacityValue = dataStoresValue["capacity"];
                                                        if (capacityValue != null && capacityValue.Type != JTokenType.Null)
                                                        {
                                                            string capacityInstance = ((string)capacityValue);
                                                            dataStoreInstance.Capacity = capacityInstance;
                                                        }
                                                        
                                                        JToken freeSpaceValue = dataStoresValue["freeSpace"];
                                                        if (freeSpaceValue != null && freeSpaceValue.Type != JTokenType.Null)
                                                        {
                                                            string freeSpaceInstance = ((string)freeSpaceValue);
                                                            dataStoreInstance.FreeSpace = freeSpaceInstance;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken runAsAccountsArray = customDetailsValue["runAsAccounts"];
                                        if (runAsAccountsArray != null && runAsAccountsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken runAsAccountsValue in ((JArray)runAsAccountsArray))
                                            {
                                                RunAsAccount runAsAccountInstance = new RunAsAccount();
                                                vMwareFabricDetailsInstance.RunAsAccounts.Add(runAsAccountInstance);
                                                
                                                JToken accountIdValue = runAsAccountsValue["accountId"];
                                                if (accountIdValue != null && accountIdValue.Type != JTokenType.Null)
                                                {
                                                    string accountIdInstance = ((string)accountIdValue);
                                                    runAsAccountInstance.AccountId = accountIdInstance;
                                                }
                                                
                                                JToken accountNameValue = runAsAccountsValue["accountName"];
                                                if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                {
                                                    string accountNameInstance = ((string)accountNameValue);
                                                    runAsAccountInstance.AccountName = accountNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken replicationPairCountValue2 = customDetailsValue["replicationPairCount"];
                                        if (replicationPairCountValue2 != null && replicationPairCountValue2.Type != JTokenType.Null)
                                        {
                                            string replicationPairCountInstance2 = ((string)replicationPairCountValue2);
                                            vMwareFabricDetailsInstance.ReplicationPairCount = replicationPairCountInstance2;
                                        }
                                        
                                        JToken processServerCountValue = customDetailsValue["processServerCount"];
                                        if (processServerCountValue != null && processServerCountValue.Type != JTokenType.Null)
                                        {
                                            string processServerCountInstance = ((string)processServerCountValue);
                                            vMwareFabricDetailsInstance.ProcessServerCount = processServerCountInstance;
                                        }
                                        
                                        JToken agentCountValue = customDetailsValue["agentCount"];
                                        if (agentCountValue != null && agentCountValue.Type != JTokenType.Null)
                                        {
                                            string agentCountInstance = ((string)agentCountValue);
                                            vMwareFabricDetailsInstance.AgentCount = agentCountInstance;
                                        }
                                        
                                        JToken protectedServersValue = customDetailsValue["protectedServers"];
                                        if (protectedServersValue != null && protectedServersValue.Type != JTokenType.Null)
                                        {
                                            string protectedServersInstance = ((string)protectedServersValue);
                                            vMwareFabricDetailsInstance.ProtectedServers = protectedServersInstance;
                                        }
                                        
                                        JToken systemLoadValue2 = customDetailsValue["systemLoad"];
                                        if (systemLoadValue2 != null && systemLoadValue2.Type != JTokenType.Null)
                                        {
                                            string systemLoadInstance2 = ((string)systemLoadValue2);
                                            vMwareFabricDetailsInstance.SystemLoad = systemLoadInstance2;
                                        }
                                        
                                        JToken systemLoadStatusValue2 = customDetailsValue["systemLoadStatus"];
                                        if (systemLoadStatusValue2 != null && systemLoadStatusValue2.Type != JTokenType.Null)
                                        {
                                            string systemLoadStatusInstance2 = ((string)systemLoadStatusValue2);
                                            vMwareFabricDetailsInstance.SystemLoadStatus = systemLoadStatusInstance2;
                                        }
                                        
                                        JToken cpuLoadValue2 = customDetailsValue["cpuLoad"];
                                        if (cpuLoadValue2 != null && cpuLoadValue2.Type != JTokenType.Null)
                                        {
                                            string cpuLoadInstance2 = ((string)cpuLoadValue2);
                                            vMwareFabricDetailsInstance.CpuLoad = cpuLoadInstance2;
                                        }
                                        
                                        JToken cpuLoadStatusValue2 = customDetailsValue["cpuLoadStatus"];
                                        if (cpuLoadStatusValue2 != null && cpuLoadStatusValue2.Type != JTokenType.Null)
                                        {
                                            string cpuLoadStatusInstance2 = ((string)cpuLoadStatusValue2);
                                            vMwareFabricDetailsInstance.CpuLoadStatus = cpuLoadStatusInstance2;
                                        }
                                        
                                        JToken totalMemoryInBytesValue2 = customDetailsValue["totalMemoryInBytes"];
                                        if (totalMemoryInBytesValue2 != null && totalMemoryInBytesValue2.Type != JTokenType.Null)
                                        {
                                            long totalMemoryInBytesInstance2 = ((long)totalMemoryInBytesValue2);
                                            vMwareFabricDetailsInstance.TotalMemoryInBytes = totalMemoryInBytesInstance2;
                                        }
                                        
                                        JToken availableMemoryInBytesValue2 = customDetailsValue["availableMemoryInBytes"];
                                        if (availableMemoryInBytesValue2 != null && availableMemoryInBytesValue2.Type != JTokenType.Null)
                                        {
                                            long availableMemoryInBytesInstance2 = ((long)availableMemoryInBytesValue2);
                                            vMwareFabricDetailsInstance.AvailableMemoryInBytes = availableMemoryInBytesInstance2;
                                        }
                                        
                                        JToken memoryUsageStatusValue2 = customDetailsValue["memoryUsageStatus"];
                                        if (memoryUsageStatusValue2 != null && memoryUsageStatusValue2.Type != JTokenType.Null)
                                        {
                                            string memoryUsageStatusInstance2 = ((string)memoryUsageStatusValue2);
                                            vMwareFabricDetailsInstance.MemoryUsageStatus = memoryUsageStatusInstance2;
                                        }
                                        
                                        JToken totalSpaceInBytesValue2 = customDetailsValue["totalSpaceInBytes"];
                                        if (totalSpaceInBytesValue2 != null && totalSpaceInBytesValue2.Type != JTokenType.Null)
                                        {
                                            long totalSpaceInBytesInstance2 = ((long)totalSpaceInBytesValue2);
                                            vMwareFabricDetailsInstance.TotalSpaceInBytes = totalSpaceInBytesInstance2;
                                        }
                                        
                                        JToken availableSpaceInBytesValue2 = customDetailsValue["availableSpaceInBytes"];
                                        if (availableSpaceInBytesValue2 != null && availableSpaceInBytesValue2.Type != JTokenType.Null)
                                        {
                                            long availableSpaceInBytesInstance2 = ((long)availableSpaceInBytesValue2);
                                            vMwareFabricDetailsInstance.AvailableSpaceInBytes = availableSpaceInBytesInstance2;
                                        }
                                        
                                        JToken spaceUsageStatusValue2 = customDetailsValue["spaceUsageStatus"];
                                        if (spaceUsageStatusValue2 != null && spaceUsageStatusValue2.Type != JTokenType.Null)
                                        {
                                            string spaceUsageStatusInstance2 = ((string)spaceUsageStatusValue2);
                                            vMwareFabricDetailsInstance.SpaceUsageStatus = spaceUsageStatusInstance2;
                                        }
                                        
                                        JToken webLoadValue = customDetailsValue["webLoad"];
                                        if (webLoadValue != null && webLoadValue.Type != JTokenType.Null)
                                        {
                                            string webLoadInstance = ((string)webLoadValue);
                                            vMwareFabricDetailsInstance.WebLoad = webLoadInstance;
                                        }
                                        
                                        JToken webLoadStatusValue = customDetailsValue["webLoadStatus"];
                                        if (webLoadStatusValue != null && webLoadStatusValue.Type != JTokenType.Null)
                                        {
                                            string webLoadStatusInstance = ((string)webLoadStatusValue);
                                            vMwareFabricDetailsInstance.WebLoadStatus = webLoadStatusInstance;
                                        }
                                        
                                        JToken databaseServerLoadValue = customDetailsValue["databaseServerLoad"];
                                        if (databaseServerLoadValue != null && databaseServerLoadValue.Type != JTokenType.Null)
                                        {
                                            string databaseServerLoadInstance = ((string)databaseServerLoadValue);
                                            vMwareFabricDetailsInstance.DatabaseServerLoad = databaseServerLoadInstance;
                                        }
                                        
                                        JToken databaseServerLoadStatusValue = customDetailsValue["databaseServerLoadStatus"];
                                        if (databaseServerLoadStatusValue != null && databaseServerLoadStatusValue.Type != JTokenType.Null)
                                        {
                                            string databaseServerLoadStatusInstance = ((string)databaseServerLoadStatusValue);
                                            vMwareFabricDetailsInstance.DatabaseServerLoadStatus = databaseServerLoadStatusInstance;
                                        }
                                        
                                        JToken csServiceStatusValue = customDetailsValue["csServiceStatus"];
                                        if (csServiceStatusValue != null && csServiceStatusValue.Type != JTokenType.Null)
                                        {
                                            string csServiceStatusInstance = ((string)csServiceStatusValue);
                                            vMwareFabricDetailsInstance.CsServiceStatus = csServiceStatusInstance;
                                        }
                                        
                                        JToken ipAddressValue3 = customDetailsValue["ipAddress"];
                                        if (ipAddressValue3 != null && ipAddressValue3.Type != JTokenType.Null)
                                        {
                                            string ipAddressInstance3 = ((string)ipAddressValue3);
                                            vMwareFabricDetailsInstance.IpAddress = ipAddressInstance3;
                                        }
                                        
                                        JToken agentVersionValue3 = customDetailsValue["agentVersion"];
                                        if (agentVersionValue3 != null && agentVersionValue3.Type != JTokenType.Null)
                                        {
                                            string agentVersionInstance3 = ((string)agentVersionValue3);
                                            vMwareFabricDetailsInstance.AgentVersion = agentVersionInstance3;
                                        }
                                        
                                        JToken hostNameValue = customDetailsValue["hostName"];
                                        if (hostNameValue != null && hostNameValue.Type != JTokenType.Null)
                                        {
                                            string hostNameInstance = ((string)hostNameValue);
                                            vMwareFabricDetailsInstance.HostName = hostNameInstance;
                                        }
                                        
                                        JToken lastHeartbeatValue3 = customDetailsValue["lastHeartbeat"];
                                        if (lastHeartbeatValue3 != null && lastHeartbeatValue3.Type != JTokenType.Null)
                                        {
                                            DateTime lastHeartbeatInstance3 = ((DateTime)lastHeartbeatValue3);
                                            vMwareFabricDetailsInstance.LastHeartbeat = lastHeartbeatInstance3;
                                        }
                                        
                                        JToken versionStatusValue3 = customDetailsValue["versionStatus"];
                                        if (versionStatusValue3 != null && versionStatusValue3.Type != JTokenType.Null)
                                        {
                                            string versionStatusInstance3 = ((string)versionStatusValue3);
                                            vMwareFabricDetailsInstance.VersionStatus = versionStatusInstance3;
                                        }
                                        
                                        JToken instanceTypeValue3 = customDetailsValue["instanceType"];
                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                            vMwareFabricDetailsInstance.InstanceType = instanceTypeInstance3;
                                        }
                                        propertiesInstance.CustomDetails = vMwareFabricDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue3 = responseDoc["id"];
                            if (idValue3 != null && idValue3.Type != JTokenType.Null)
                            {
                                string idInstance3 = ((string)idValue3);
                                fabricInstance.Id = idInstance3;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                fabricInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                fabricInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                fabricInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    fabricInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for fabric long running operations.
        /// </returns>
        public async Task<FabricOperationResponse> GetCreateStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetCreateStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FabricOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FabricOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Fabric fabricInstance = new Fabric();
                            result.Fabric = fabricInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                FabricProperties propertiesInstance = new FabricProperties();
                                fabricInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken internalIdentifierValue = propertiesValue["internalIdentifier"];
                                if (internalIdentifierValue != null && internalIdentifierValue.Type != JTokenType.Null)
                                {
                                    string internalIdentifierInstance = ((string)internalIdentifierValue);
                                    propertiesInstance.InternalIdentifier = internalIdentifierInstance;
                                }
                                
                                JToken encryptionDetailsValue = propertiesValue["encryptionDetails"];
                                if (encryptionDetailsValue != null && encryptionDetailsValue.Type != JTokenType.Null)
                                {
                                    EncryptionDetails encryptionDetailsInstance = new EncryptionDetails();
                                    propertiesInstance.EncryptionDetails = encryptionDetailsInstance;
                                    
                                    JToken kekStateValue = encryptionDetailsValue["kekState"];
                                    if (kekStateValue != null && kekStateValue.Type != JTokenType.Null)
                                    {
                                        string kekStateInstance = ((string)kekStateValue);
                                        encryptionDetailsInstance.KekState = kekStateInstance;
                                    }
                                    
                                    JToken kekCertThumbprintValue = encryptionDetailsValue["kekCertThumbprint"];
                                    if (kekCertThumbprintValue != null && kekCertThumbprintValue.Type != JTokenType.Null)
                                    {
                                        string kekCertThumbprintInstance = ((string)kekCertThumbprintValue);
                                        encryptionDetailsInstance.KekCertThumbprint = kekCertThumbprintInstance;
                                    }
                                    
                                    JToken kekCertExpiryDateValue = encryptionDetailsValue["kekCertExpiryDate"];
                                    if (kekCertExpiryDateValue != null && kekCertExpiryDateValue.Type != JTokenType.Null)
                                    {
                                        DateTime kekCertExpiryDateInstance = ((DateTime)kekCertExpiryDateValue);
                                        encryptionDetailsInstance.KekCertExpiryDate = kekCertExpiryDateInstance;
                                    }
                                }
                                
                                JToken rolloverEncryptionDetailsValue = propertiesValue["rolloverEncryptionDetails"];
                                if (rolloverEncryptionDetailsValue != null && rolloverEncryptionDetailsValue.Type != JTokenType.Null)
                                {
                                    EncryptionDetails rolloverEncryptionDetailsInstance = new EncryptionDetails();
                                    propertiesInstance.RolloverEncryptionDetails = rolloverEncryptionDetailsInstance;
                                    
                                    JToken kekStateValue2 = rolloverEncryptionDetailsValue["kekState"];
                                    if (kekStateValue2 != null && kekStateValue2.Type != JTokenType.Null)
                                    {
                                        string kekStateInstance2 = ((string)kekStateValue2);
                                        rolloverEncryptionDetailsInstance.KekState = kekStateInstance2;
                                    }
                                    
                                    JToken kekCertThumbprintValue2 = rolloverEncryptionDetailsValue["kekCertThumbprint"];
                                    if (kekCertThumbprintValue2 != null && kekCertThumbprintValue2.Type != JTokenType.Null)
                                    {
                                        string kekCertThumbprintInstance2 = ((string)kekCertThumbprintValue2);
                                        rolloverEncryptionDetailsInstance.KekCertThumbprint = kekCertThumbprintInstance2;
                                    }
                                    
                                    JToken kekCertExpiryDateValue2 = rolloverEncryptionDetailsValue["kekCertExpiryDate"];
                                    if (kekCertExpiryDateValue2 != null && kekCertExpiryDateValue2.Type != JTokenType.Null)
                                    {
                                        DateTime kekCertExpiryDateInstance2 = ((DateTime)kekCertExpiryDateValue2);
                                        rolloverEncryptionDetailsInstance.KekCertExpiryDate = kekCertExpiryDateInstance2;
                                    }
                                }
                                
                                JToken customDetailsValue = propertiesValue["customDetails"];
                                if (customDetailsValue != null && customDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)customDetailsValue["instanceType"]);
                                    if (typeName == "VMM")
                                    {
                                        VmmDetails vmmDetailsInstance = new VmmDetails();
                                        
                                        JToken instanceTypeValue = customDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            vmmDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.CustomDetails = vmmDetailsInstance;
                                    }
                                    if (typeName == "HyperVSite")
                                    {
                                        HyperVSiteDetails hyperVSiteDetailsInstance = new HyperVSiteDetails();
                                        
                                        JToken instanceTypeValue2 = customDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            hyperVSiteDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.CustomDetails = hyperVSiteDetailsInstance;
                                    }
                                    if (typeName == "VMware")
                                    {
                                        VMwareFabricDetails vMwareFabricDetailsInstance = new VMwareFabricDetails();
                                        
                                        JToken processServersArray = customDetailsValue["processServers"];
                                        if (processServersArray != null && processServersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken processServersValue in ((JArray)processServersArray))
                                            {
                                                ProcessServer processServerInstance = new ProcessServer();
                                                vMwareFabricDetailsInstance.ProcessServers.Add(processServerInstance);
                                                
                                                JToken friendlyNameValue2 = processServersValue["friendlyName"];
                                                if (friendlyNameValue2 != null && friendlyNameValue2.Type != JTokenType.Null)
                                                {
                                                    string friendlyNameInstance2 = ((string)friendlyNameValue2);
                                                    processServerInstance.FriendlyName = friendlyNameInstance2;
                                                }
                                                
                                                JToken idValue = processServersValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    processServerInstance.Id = idInstance;
                                                }
                                                
                                                JToken ipAddressValue = processServersValue["ipAddress"];
                                                if (ipAddressValue != null && ipAddressValue.Type != JTokenType.Null)
                                                {
                                                    string ipAddressInstance = ((string)ipAddressValue);
                                                    processServerInstance.IpAddress = ipAddressInstance;
                                                }
                                                
                                                JToken osTypeValue = processServersValue["osType"];
                                                if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance = ((string)osTypeValue);
                                                    processServerInstance.OsType = osTypeInstance;
                                                }
                                                
                                                JToken agentVersionValue = processServersValue["agentVersion"];
                                                if (agentVersionValue != null && agentVersionValue.Type != JTokenType.Null)
                                                {
                                                    string agentVersionInstance = ((string)agentVersionValue);
                                                    processServerInstance.AgentVersion = agentVersionInstance;
                                                }
                                                
                                                JToken lastHeartbeatValue = processServersValue["lastHeartbeat"];
                                                if (lastHeartbeatValue != null && lastHeartbeatValue.Type != JTokenType.Null)
                                                {
                                                    DateTime lastHeartbeatInstance = ((DateTime)lastHeartbeatValue);
                                                    processServerInstance.LastHeartbeat = lastHeartbeatInstance;
                                                }
                                                
                                                JToken versionStatusValue = processServersValue["versionStatus"];
                                                if (versionStatusValue != null && versionStatusValue.Type != JTokenType.Null)
                                                {
                                                    string versionStatusInstance = ((string)versionStatusValue);
                                                    processServerInstance.VersionStatus = versionStatusInstance;
                                                }
                                                
                                                JToken mobilityServiceUpdatesArray = processServersValue["mobilityServiceUpdates"];
                                                if (mobilityServiceUpdatesArray != null && mobilityServiceUpdatesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken mobilityServiceUpdatesValue in ((JArray)mobilityServiceUpdatesArray))
                                                    {
                                                        MobilityServiceUpdate mobilityServiceUpdateInstance = new MobilityServiceUpdate();
                                                        processServerInstance.Updates.Add(mobilityServiceUpdateInstance);
                                                        
                                                        JToken versionValue = mobilityServiceUpdatesValue["version"];
                                                        if (versionValue != null && versionValue.Type != JTokenType.Null)
                                                        {
                                                            string versionInstance = ((string)versionValue);
                                                            mobilityServiceUpdateInstance.Version = versionInstance;
                                                        }
                                                        
                                                        JToken rebootStatusValue = mobilityServiceUpdatesValue["rebootStatus"];
                                                        if (rebootStatusValue != null && rebootStatusValue.Type != JTokenType.Null)
                                                        {
                                                            string rebootStatusInstance = ((string)rebootStatusValue);
                                                            mobilityServiceUpdateInstance.RebootStatus = rebootStatusInstance;
                                                        }
                                                        
                                                        JToken osTypeValue2 = mobilityServiceUpdatesValue["osType"];
                                                        if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string osTypeInstance2 = ((string)osTypeValue2);
                                                            mobilityServiceUpdateInstance.OsType = osTypeInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                JToken hostIdValue = processServersValue["hostId"];
                                                if (hostIdValue != null && hostIdValue.Type != JTokenType.Null)
                                                {
                                                    string hostIdInstance = ((string)hostIdValue);
                                                    processServerInstance.HostId = hostIdInstance;
                                                }
                                                
                                                JToken machineCountValue = processServersValue["machineCount"];
                                                if (machineCountValue != null && machineCountValue.Type != JTokenType.Null)
                                                {
                                                    string machineCountInstance = ((string)machineCountValue);
                                                    processServerInstance.ServerCount = machineCountInstance;
                                                }
                                                
                                                JToken replicationPairCountValue = processServersValue["replicationPairCount"];
                                                if (replicationPairCountValue != null && replicationPairCountValue.Type != JTokenType.Null)
                                                {
                                                    string replicationPairCountInstance = ((string)replicationPairCountValue);
                                                    processServerInstance.ReplicationPairCount = replicationPairCountInstance;
                                                }
                                                
                                                JToken systemLoadValue = processServersValue["systemLoad"];
                                                if (systemLoadValue != null && systemLoadValue.Type != JTokenType.Null)
                                                {
                                                    string systemLoadInstance = ((string)systemLoadValue);
                                                    processServerInstance.SystemLoad = systemLoadInstance;
                                                }
                                                
                                                JToken systemLoadStatusValue = processServersValue["systemLoadStatus"];
                                                if (systemLoadStatusValue != null && systemLoadStatusValue.Type != JTokenType.Null)
                                                {
                                                    string systemLoadStatusInstance = ((string)systemLoadStatusValue);
                                                    processServerInstance.SystemLoadStatus = systemLoadStatusInstance;
                                                }
                                                
                                                JToken cpuLoadValue = processServersValue["cpuLoad"];
                                                if (cpuLoadValue != null && cpuLoadValue.Type != JTokenType.Null)
                                                {
                                                    string cpuLoadInstance = ((string)cpuLoadValue);
                                                    processServerInstance.CpuLoad = cpuLoadInstance;
                                                }
                                                
                                                JToken cpuLoadStatusValue = processServersValue["cpuLoadStatus"];
                                                if (cpuLoadStatusValue != null && cpuLoadStatusValue.Type != JTokenType.Null)
                                                {
                                                    string cpuLoadStatusInstance = ((string)cpuLoadStatusValue);
                                                    processServerInstance.CpuLoadStatus = cpuLoadStatusInstance;
                                                }
                                                
                                                JToken totalMemoryInBytesValue = processServersValue["totalMemoryInBytes"];
                                                if (totalMemoryInBytesValue != null && totalMemoryInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long totalMemoryInBytesInstance = ((long)totalMemoryInBytesValue);
                                                    processServerInstance.TotalMemoryInBytes = totalMemoryInBytesInstance;
                                                }
                                                
                                                JToken availableMemoryInBytesValue = processServersValue["availableMemoryInBytes"];
                                                if (availableMemoryInBytesValue != null && availableMemoryInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long availableMemoryInBytesInstance = ((long)availableMemoryInBytesValue);
                                                    processServerInstance.AvailableMemoryInBytes = availableMemoryInBytesInstance;
                                                }
                                                
                                                JToken memoryUsageStatusValue = processServersValue["memoryUsageStatus"];
                                                if (memoryUsageStatusValue != null && memoryUsageStatusValue.Type != JTokenType.Null)
                                                {
                                                    string memoryUsageStatusInstance = ((string)memoryUsageStatusValue);
                                                    processServerInstance.MemoryUsageStatus = memoryUsageStatusInstance;
                                                }
                                                
                                                JToken totalSpaceInBytesValue = processServersValue["totalSpaceInBytes"];
                                                if (totalSpaceInBytesValue != null && totalSpaceInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long totalSpaceInBytesInstance = ((long)totalSpaceInBytesValue);
                                                    processServerInstance.TotalSpaceInBytes = totalSpaceInBytesInstance;
                                                }
                                                
                                                JToken availableSpaceInBytesValue = processServersValue["availableSpaceInBytes"];
                                                if (availableSpaceInBytesValue != null && availableSpaceInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long availableSpaceInBytesInstance = ((long)availableSpaceInBytesValue);
                                                    processServerInstance.AvailableSpaceInBytes = availableSpaceInBytesInstance;
                                                }
                                                
                                                JToken spaceUsageStatusValue = processServersValue["spaceUsageStatus"];
                                                if (spaceUsageStatusValue != null && spaceUsageStatusValue.Type != JTokenType.Null)
                                                {
                                                    string spaceUsageStatusInstance = ((string)spaceUsageStatusValue);
                                                    processServerInstance.SpaceUsageStatus = spaceUsageStatusInstance;
                                                }
                                                
                                                JToken psServiceStatusValue = processServersValue["psServiceStatus"];
                                                if (psServiceStatusValue != null && psServiceStatusValue.Type != JTokenType.Null)
                                                {
                                                    string psServiceStatusInstance = ((string)psServiceStatusValue);
                                                    processServerInstance.PsServiceStatus = psServiceStatusInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken masterTargetServersArray = customDetailsValue["masterTargetServers"];
                                        if (masterTargetServersArray != null && masterTargetServersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken masterTargetServersValue in ((JArray)masterTargetServersArray))
                                            {
                                                MasterTargetServer masterTargetServerInstance = new MasterTargetServer();
                                                vMwareFabricDetailsInstance.MasterTargetServers.Add(masterTargetServerInstance);
                                                
                                                JToken idValue2 = masterTargetServersValue["id"];
                                                if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                {
                                                    string idInstance2 = ((string)idValue2);
                                                    masterTargetServerInstance.Id = idInstance2;
                                                }
                                                
                                                JToken ipAddressValue2 = masterTargetServersValue["ipAddress"];
                                                if (ipAddressValue2 != null && ipAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string ipAddressInstance2 = ((string)ipAddressValue2);
                                                    masterTargetServerInstance.IpAddress = ipAddressInstance2;
                                                }
                                                
                                                JToken nameValue = masterTargetServersValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    masterTargetServerInstance.Name = nameInstance;
                                                }
                                                
                                                JToken osTypeValue3 = masterTargetServersValue["osType"];
                                                if (osTypeValue3 != null && osTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance3 = ((string)osTypeValue3);
                                                    masterTargetServerInstance.OsType = osTypeInstance3;
                                                }
                                                
                                                JToken agentVersionValue2 = masterTargetServersValue["agentVersion"];
                                                if (agentVersionValue2 != null && agentVersionValue2.Type != JTokenType.Null)
                                                {
                                                    string agentVersionInstance2 = ((string)agentVersionValue2);
                                                    masterTargetServerInstance.AgentVersion = agentVersionInstance2;
                                                }
                                                
                                                JToken lastHeartbeatValue2 = masterTargetServersValue["lastHeartbeat"];
                                                if (lastHeartbeatValue2 != null && lastHeartbeatValue2.Type != JTokenType.Null)
                                                {
                                                    DateTime lastHeartbeatInstance2 = ((DateTime)lastHeartbeatValue2);
                                                    masterTargetServerInstance.LastHeartbeat = lastHeartbeatInstance2;
                                                }
                                                
                                                JToken versionStatusValue2 = masterTargetServersValue["versionStatus"];
                                                if (versionStatusValue2 != null && versionStatusValue2.Type != JTokenType.Null)
                                                {
                                                    string versionStatusInstance2 = ((string)versionStatusValue2);
                                                    masterTargetServerInstance.VersionStatus = versionStatusInstance2;
                                                }
                                                
                                                JToken retentionVolumesArray = masterTargetServersValue["retentionVolumes"];
                                                if (retentionVolumesArray != null && retentionVolumesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken retentionVolumesValue in ((JArray)retentionVolumesArray))
                                                    {
                                                        RetentionVolume retentionVolumeInstance = new RetentionVolume();
                                                        masterTargetServerInstance.RetentionVolumes.Add(retentionVolumeInstance);
                                                        
                                                        JToken volumeNameValue = retentionVolumesValue["volumeName"];
                                                        if (volumeNameValue != null && volumeNameValue.Type != JTokenType.Null)
                                                        {
                                                            string volumeNameInstance = ((string)volumeNameValue);
                                                            retentionVolumeInstance.VolumeName = volumeNameInstance;
                                                        }
                                                        
                                                        JToken capacityInBytesValue = retentionVolumesValue["capacityInBytes"];
                                                        if (capacityInBytesValue != null && capacityInBytesValue.Type != JTokenType.Null)
                                                        {
                                                            long capacityInBytesInstance = ((long)capacityInBytesValue);
                                                            retentionVolumeInstance.CapacityInBytes = capacityInBytesInstance;
                                                        }
                                                        
                                                        JToken freeSpaceInBytesValue = retentionVolumesValue["freeSpaceInBytes"];
                                                        if (freeSpaceInBytesValue != null && freeSpaceInBytesValue.Type != JTokenType.Null)
                                                        {
                                                            long freeSpaceInBytesInstance = ((long)freeSpaceInBytesValue);
                                                            retentionVolumeInstance.FreeSpaceInBytes = freeSpaceInBytesInstance;
                                                        }
                                                        
                                                        JToken thresholdPercentageValue = retentionVolumesValue["thresholdPercentage"];
                                                        if (thresholdPercentageValue != null && thresholdPercentageValue.Type != JTokenType.Null)
                                                        {
                                                            int thresholdPercentageInstance = ((int)thresholdPercentageValue);
                                                            retentionVolumeInstance.ThresholdPercentage = thresholdPercentageInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken dataStoresArray = masterTargetServersValue["dataStores"];
                                                if (dataStoresArray != null && dataStoresArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken dataStoresValue in ((JArray)dataStoresArray))
                                                    {
                                                        DataStore dataStoreInstance = new DataStore();
                                                        masterTargetServerInstance.DataStores.Add(dataStoreInstance);
                                                        
                                                        JToken symbolicNameValue = dataStoresValue["symbolicName"];
                                                        if (symbolicNameValue != null && symbolicNameValue.Type != JTokenType.Null)
                                                        {
                                                            string symbolicNameInstance = ((string)symbolicNameValue);
                                                            dataStoreInstance.SymbolicName = symbolicNameInstance;
                                                        }
                                                        
                                                        JToken uuidValue = dataStoresValue["uuid"];
                                                        if (uuidValue != null && uuidValue.Type != JTokenType.Null)
                                                        {
                                                            string uuidInstance = ((string)uuidValue);
                                                            dataStoreInstance.Uuid = uuidInstance;
                                                        }
                                                        
                                                        JToken capacityValue = dataStoresValue["capacity"];
                                                        if (capacityValue != null && capacityValue.Type != JTokenType.Null)
                                                        {
                                                            string capacityInstance = ((string)capacityValue);
                                                            dataStoreInstance.Capacity = capacityInstance;
                                                        }
                                                        
                                                        JToken freeSpaceValue = dataStoresValue["freeSpace"];
                                                        if (freeSpaceValue != null && freeSpaceValue.Type != JTokenType.Null)
                                                        {
                                                            string freeSpaceInstance = ((string)freeSpaceValue);
                                                            dataStoreInstance.FreeSpace = freeSpaceInstance;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken runAsAccountsArray = customDetailsValue["runAsAccounts"];
                                        if (runAsAccountsArray != null && runAsAccountsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken runAsAccountsValue in ((JArray)runAsAccountsArray))
                                            {
                                                RunAsAccount runAsAccountInstance = new RunAsAccount();
                                                vMwareFabricDetailsInstance.RunAsAccounts.Add(runAsAccountInstance);
                                                
                                                JToken accountIdValue = runAsAccountsValue["accountId"];
                                                if (accountIdValue != null && accountIdValue.Type != JTokenType.Null)
                                                {
                                                    string accountIdInstance = ((string)accountIdValue);
                                                    runAsAccountInstance.AccountId = accountIdInstance;
                                                }
                                                
                                                JToken accountNameValue = runAsAccountsValue["accountName"];
                                                if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                {
                                                    string accountNameInstance = ((string)accountNameValue);
                                                    runAsAccountInstance.AccountName = accountNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken replicationPairCountValue2 = customDetailsValue["replicationPairCount"];
                                        if (replicationPairCountValue2 != null && replicationPairCountValue2.Type != JTokenType.Null)
                                        {
                                            string replicationPairCountInstance2 = ((string)replicationPairCountValue2);
                                            vMwareFabricDetailsInstance.ReplicationPairCount = replicationPairCountInstance2;
                                        }
                                        
                                        JToken processServerCountValue = customDetailsValue["processServerCount"];
                                        if (processServerCountValue != null && processServerCountValue.Type != JTokenType.Null)
                                        {
                                            string processServerCountInstance = ((string)processServerCountValue);
                                            vMwareFabricDetailsInstance.ProcessServerCount = processServerCountInstance;
                                        }
                                        
                                        JToken agentCountValue = customDetailsValue["agentCount"];
                                        if (agentCountValue != null && agentCountValue.Type != JTokenType.Null)
                                        {
                                            string agentCountInstance = ((string)agentCountValue);
                                            vMwareFabricDetailsInstance.AgentCount = agentCountInstance;
                                        }
                                        
                                        JToken protectedServersValue = customDetailsValue["protectedServers"];
                                        if (protectedServersValue != null && protectedServersValue.Type != JTokenType.Null)
                                        {
                                            string protectedServersInstance = ((string)protectedServersValue);
                                            vMwareFabricDetailsInstance.ProtectedServers = protectedServersInstance;
                                        }
                                        
                                        JToken systemLoadValue2 = customDetailsValue["systemLoad"];
                                        if (systemLoadValue2 != null && systemLoadValue2.Type != JTokenType.Null)
                                        {
                                            string systemLoadInstance2 = ((string)systemLoadValue2);
                                            vMwareFabricDetailsInstance.SystemLoad = systemLoadInstance2;
                                        }
                                        
                                        JToken systemLoadStatusValue2 = customDetailsValue["systemLoadStatus"];
                                        if (systemLoadStatusValue2 != null && systemLoadStatusValue2.Type != JTokenType.Null)
                                        {
                                            string systemLoadStatusInstance2 = ((string)systemLoadStatusValue2);
                                            vMwareFabricDetailsInstance.SystemLoadStatus = systemLoadStatusInstance2;
                                        }
                                        
                                        JToken cpuLoadValue2 = customDetailsValue["cpuLoad"];
                                        if (cpuLoadValue2 != null && cpuLoadValue2.Type != JTokenType.Null)
                                        {
                                            string cpuLoadInstance2 = ((string)cpuLoadValue2);
                                            vMwareFabricDetailsInstance.CpuLoad = cpuLoadInstance2;
                                        }
                                        
                                        JToken cpuLoadStatusValue2 = customDetailsValue["cpuLoadStatus"];
                                        if (cpuLoadStatusValue2 != null && cpuLoadStatusValue2.Type != JTokenType.Null)
                                        {
                                            string cpuLoadStatusInstance2 = ((string)cpuLoadStatusValue2);
                                            vMwareFabricDetailsInstance.CpuLoadStatus = cpuLoadStatusInstance2;
                                        }
                                        
                                        JToken totalMemoryInBytesValue2 = customDetailsValue["totalMemoryInBytes"];
                                        if (totalMemoryInBytesValue2 != null && totalMemoryInBytesValue2.Type != JTokenType.Null)
                                        {
                                            long totalMemoryInBytesInstance2 = ((long)totalMemoryInBytesValue2);
                                            vMwareFabricDetailsInstance.TotalMemoryInBytes = totalMemoryInBytesInstance2;
                                        }
                                        
                                        JToken availableMemoryInBytesValue2 = customDetailsValue["availableMemoryInBytes"];
                                        if (availableMemoryInBytesValue2 != null && availableMemoryInBytesValue2.Type != JTokenType.Null)
                                        {
                                            long availableMemoryInBytesInstance2 = ((long)availableMemoryInBytesValue2);
                                            vMwareFabricDetailsInstance.AvailableMemoryInBytes = availableMemoryInBytesInstance2;
                                        }
                                        
                                        JToken memoryUsageStatusValue2 = customDetailsValue["memoryUsageStatus"];
                                        if (memoryUsageStatusValue2 != null && memoryUsageStatusValue2.Type != JTokenType.Null)
                                        {
                                            string memoryUsageStatusInstance2 = ((string)memoryUsageStatusValue2);
                                            vMwareFabricDetailsInstance.MemoryUsageStatus = memoryUsageStatusInstance2;
                                        }
                                        
                                        JToken totalSpaceInBytesValue2 = customDetailsValue["totalSpaceInBytes"];
                                        if (totalSpaceInBytesValue2 != null && totalSpaceInBytesValue2.Type != JTokenType.Null)
                                        {
                                            long totalSpaceInBytesInstance2 = ((long)totalSpaceInBytesValue2);
                                            vMwareFabricDetailsInstance.TotalSpaceInBytes = totalSpaceInBytesInstance2;
                                        }
                                        
                                        JToken availableSpaceInBytesValue2 = customDetailsValue["availableSpaceInBytes"];
                                        if (availableSpaceInBytesValue2 != null && availableSpaceInBytesValue2.Type != JTokenType.Null)
                                        {
                                            long availableSpaceInBytesInstance2 = ((long)availableSpaceInBytesValue2);
                                            vMwareFabricDetailsInstance.AvailableSpaceInBytes = availableSpaceInBytesInstance2;
                                        }
                                        
                                        JToken spaceUsageStatusValue2 = customDetailsValue["spaceUsageStatus"];
                                        if (spaceUsageStatusValue2 != null && spaceUsageStatusValue2.Type != JTokenType.Null)
                                        {
                                            string spaceUsageStatusInstance2 = ((string)spaceUsageStatusValue2);
                                            vMwareFabricDetailsInstance.SpaceUsageStatus = spaceUsageStatusInstance2;
                                        }
                                        
                                        JToken webLoadValue = customDetailsValue["webLoad"];
                                        if (webLoadValue != null && webLoadValue.Type != JTokenType.Null)
                                        {
                                            string webLoadInstance = ((string)webLoadValue);
                                            vMwareFabricDetailsInstance.WebLoad = webLoadInstance;
                                        }
                                        
                                        JToken webLoadStatusValue = customDetailsValue["webLoadStatus"];
                                        if (webLoadStatusValue != null && webLoadStatusValue.Type != JTokenType.Null)
                                        {
                                            string webLoadStatusInstance = ((string)webLoadStatusValue);
                                            vMwareFabricDetailsInstance.WebLoadStatus = webLoadStatusInstance;
                                        }
                                        
                                        JToken databaseServerLoadValue = customDetailsValue["databaseServerLoad"];
                                        if (databaseServerLoadValue != null && databaseServerLoadValue.Type != JTokenType.Null)
                                        {
                                            string databaseServerLoadInstance = ((string)databaseServerLoadValue);
                                            vMwareFabricDetailsInstance.DatabaseServerLoad = databaseServerLoadInstance;
                                        }
                                        
                                        JToken databaseServerLoadStatusValue = customDetailsValue["databaseServerLoadStatus"];
                                        if (databaseServerLoadStatusValue != null && databaseServerLoadStatusValue.Type != JTokenType.Null)
                                        {
                                            string databaseServerLoadStatusInstance = ((string)databaseServerLoadStatusValue);
                                            vMwareFabricDetailsInstance.DatabaseServerLoadStatus = databaseServerLoadStatusInstance;
                                        }
                                        
                                        JToken csServiceStatusValue = customDetailsValue["csServiceStatus"];
                                        if (csServiceStatusValue != null && csServiceStatusValue.Type != JTokenType.Null)
                                        {
                                            string csServiceStatusInstance = ((string)csServiceStatusValue);
                                            vMwareFabricDetailsInstance.CsServiceStatus = csServiceStatusInstance;
                                        }
                                        
                                        JToken ipAddressValue3 = customDetailsValue["ipAddress"];
                                        if (ipAddressValue3 != null && ipAddressValue3.Type != JTokenType.Null)
                                        {
                                            string ipAddressInstance3 = ((string)ipAddressValue3);
                                            vMwareFabricDetailsInstance.IpAddress = ipAddressInstance3;
                                        }
                                        
                                        JToken agentVersionValue3 = customDetailsValue["agentVersion"];
                                        if (agentVersionValue3 != null && agentVersionValue3.Type != JTokenType.Null)
                                        {
                                            string agentVersionInstance3 = ((string)agentVersionValue3);
                                            vMwareFabricDetailsInstance.AgentVersion = agentVersionInstance3;
                                        }
                                        
                                        JToken hostNameValue = customDetailsValue["hostName"];
                                        if (hostNameValue != null && hostNameValue.Type != JTokenType.Null)
                                        {
                                            string hostNameInstance = ((string)hostNameValue);
                                            vMwareFabricDetailsInstance.HostName = hostNameInstance;
                                        }
                                        
                                        JToken lastHeartbeatValue3 = customDetailsValue["lastHeartbeat"];
                                        if (lastHeartbeatValue3 != null && lastHeartbeatValue3.Type != JTokenType.Null)
                                        {
                                            DateTime lastHeartbeatInstance3 = ((DateTime)lastHeartbeatValue3);
                                            vMwareFabricDetailsInstance.LastHeartbeat = lastHeartbeatInstance3;
                                        }
                                        
                                        JToken versionStatusValue3 = customDetailsValue["versionStatus"];
                                        if (versionStatusValue3 != null && versionStatusValue3.Type != JTokenType.Null)
                                        {
                                            string versionStatusInstance3 = ((string)versionStatusValue3);
                                            vMwareFabricDetailsInstance.VersionStatus = versionStatusInstance3;
                                        }
                                        
                                        JToken instanceTypeValue3 = customDetailsValue["instanceType"];
                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                            vMwareFabricDetailsInstance.InstanceType = instanceTypeInstance3;
                                        }
                                        propertiesInstance.CustomDetails = vMwareFabricDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue3 = responseDoc["id"];
                            if (idValue3 != null && idValue3.Type != JTokenType.Null)
                            {
                                string idInstance3 = ((string)idValue3);
                                fabricInstance.Id = idInstance3;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                fabricInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                fabricInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                fabricInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    fabricInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> GetDeleteStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetDeleteStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new LongRunningOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken locationValue = responseDoc["Location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                result.Location = locationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<DeployProcessServerOperationResponse> GetDeployProcessServerStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetDeployProcessServerStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DeployProcessServerOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DeployProcessServerOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Fabric fabricInstance = new Fabric();
                            result.Fabric = fabricInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                FabricProperties propertiesInstance = new FabricProperties();
                                fabricInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken internalIdentifierValue = propertiesValue["internalIdentifier"];
                                if (internalIdentifierValue != null && internalIdentifierValue.Type != JTokenType.Null)
                                {
                                    string internalIdentifierInstance = ((string)internalIdentifierValue);
                                    propertiesInstance.InternalIdentifier = internalIdentifierInstance;
                                }
                                
                                JToken encryptionDetailsValue = propertiesValue["encryptionDetails"];
                                if (encryptionDetailsValue != null && encryptionDetailsValue.Type != JTokenType.Null)
                                {
                                    EncryptionDetails encryptionDetailsInstance = new EncryptionDetails();
                                    propertiesInstance.EncryptionDetails = encryptionDetailsInstance;
                                    
                                    JToken kekStateValue = encryptionDetailsValue["kekState"];
                                    if (kekStateValue != null && kekStateValue.Type != JTokenType.Null)
                                    {
                                        string kekStateInstance = ((string)kekStateValue);
                                        encryptionDetailsInstance.KekState = kekStateInstance;
                                    }
                                    
                                    JToken kekCertThumbprintValue = encryptionDetailsValue["kekCertThumbprint"];
                                    if (kekCertThumbprintValue != null && kekCertThumbprintValue.Type != JTokenType.Null)
                                    {
                                        string kekCertThumbprintInstance = ((string)kekCertThumbprintValue);
                                        encryptionDetailsInstance.KekCertThumbprint = kekCertThumbprintInstance;
                                    }
                                    
                                    JToken kekCertExpiryDateValue = encryptionDetailsValue["kekCertExpiryDate"];
                                    if (kekCertExpiryDateValue != null && kekCertExpiryDateValue.Type != JTokenType.Null)
                                    {
                                        DateTime kekCertExpiryDateInstance = ((DateTime)kekCertExpiryDateValue);
                                        encryptionDetailsInstance.KekCertExpiryDate = kekCertExpiryDateInstance;
                                    }
                                }
                                
                                JToken rolloverEncryptionDetailsValue = propertiesValue["rolloverEncryptionDetails"];
                                if (rolloverEncryptionDetailsValue != null && rolloverEncryptionDetailsValue.Type != JTokenType.Null)
                                {
                                    EncryptionDetails rolloverEncryptionDetailsInstance = new EncryptionDetails();
                                    propertiesInstance.RolloverEncryptionDetails = rolloverEncryptionDetailsInstance;
                                    
                                    JToken kekStateValue2 = rolloverEncryptionDetailsValue["kekState"];
                                    if (kekStateValue2 != null && kekStateValue2.Type != JTokenType.Null)
                                    {
                                        string kekStateInstance2 = ((string)kekStateValue2);
                                        rolloverEncryptionDetailsInstance.KekState = kekStateInstance2;
                                    }
                                    
                                    JToken kekCertThumbprintValue2 = rolloverEncryptionDetailsValue["kekCertThumbprint"];
                                    if (kekCertThumbprintValue2 != null && kekCertThumbprintValue2.Type != JTokenType.Null)
                                    {
                                        string kekCertThumbprintInstance2 = ((string)kekCertThumbprintValue2);
                                        rolloverEncryptionDetailsInstance.KekCertThumbprint = kekCertThumbprintInstance2;
                                    }
                                    
                                    JToken kekCertExpiryDateValue2 = rolloverEncryptionDetailsValue["kekCertExpiryDate"];
                                    if (kekCertExpiryDateValue2 != null && kekCertExpiryDateValue2.Type != JTokenType.Null)
                                    {
                                        DateTime kekCertExpiryDateInstance2 = ((DateTime)kekCertExpiryDateValue2);
                                        rolloverEncryptionDetailsInstance.KekCertExpiryDate = kekCertExpiryDateInstance2;
                                    }
                                }
                                
                                JToken customDetailsValue = propertiesValue["customDetails"];
                                if (customDetailsValue != null && customDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)customDetailsValue["instanceType"]);
                                    if (typeName == "VMM")
                                    {
                                        VmmDetails vmmDetailsInstance = new VmmDetails();
                                        
                                        JToken instanceTypeValue = customDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            vmmDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.CustomDetails = vmmDetailsInstance;
                                    }
                                    if (typeName == "HyperVSite")
                                    {
                                        HyperVSiteDetails hyperVSiteDetailsInstance = new HyperVSiteDetails();
                                        
                                        JToken instanceTypeValue2 = customDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            hyperVSiteDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.CustomDetails = hyperVSiteDetailsInstance;
                                    }
                                    if (typeName == "VMware")
                                    {
                                        VMwareFabricDetails vMwareFabricDetailsInstance = new VMwareFabricDetails();
                                        
                                        JToken processServersArray = customDetailsValue["processServers"];
                                        if (processServersArray != null && processServersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken processServersValue in ((JArray)processServersArray))
                                            {
                                                ProcessServer processServerInstance = new ProcessServer();
                                                vMwareFabricDetailsInstance.ProcessServers.Add(processServerInstance);
                                                
                                                JToken friendlyNameValue2 = processServersValue["friendlyName"];
                                                if (friendlyNameValue2 != null && friendlyNameValue2.Type != JTokenType.Null)
                                                {
                                                    string friendlyNameInstance2 = ((string)friendlyNameValue2);
                                                    processServerInstance.FriendlyName = friendlyNameInstance2;
                                                }
                                                
                                                JToken idValue = processServersValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    processServerInstance.Id = idInstance;
                                                }
                                                
                                                JToken ipAddressValue = processServersValue["ipAddress"];
                                                if (ipAddressValue != null && ipAddressValue.Type != JTokenType.Null)
                                                {
                                                    string ipAddressInstance = ((string)ipAddressValue);
                                                    processServerInstance.IpAddress = ipAddressInstance;
                                                }
                                                
                                                JToken osTypeValue = processServersValue["osType"];
                                                if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance = ((string)osTypeValue);
                                                    processServerInstance.OsType = osTypeInstance;
                                                }
                                                
                                                JToken agentVersionValue = processServersValue["agentVersion"];
                                                if (agentVersionValue != null && agentVersionValue.Type != JTokenType.Null)
                                                {
                                                    string agentVersionInstance = ((string)agentVersionValue);
                                                    processServerInstance.AgentVersion = agentVersionInstance;
                                                }
                                                
                                                JToken lastHeartbeatValue = processServersValue["lastHeartbeat"];
                                                if (lastHeartbeatValue != null && lastHeartbeatValue.Type != JTokenType.Null)
                                                {
                                                    DateTime lastHeartbeatInstance = ((DateTime)lastHeartbeatValue);
                                                    processServerInstance.LastHeartbeat = lastHeartbeatInstance;
                                                }
                                                
                                                JToken versionStatusValue = processServersValue["versionStatus"];
                                                if (versionStatusValue != null && versionStatusValue.Type != JTokenType.Null)
                                                {
                                                    string versionStatusInstance = ((string)versionStatusValue);
                                                    processServerInstance.VersionStatus = versionStatusInstance;
                                                }
                                                
                                                JToken mobilityServiceUpdatesArray = processServersValue["mobilityServiceUpdates"];
                                                if (mobilityServiceUpdatesArray != null && mobilityServiceUpdatesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken mobilityServiceUpdatesValue in ((JArray)mobilityServiceUpdatesArray))
                                                    {
                                                        MobilityServiceUpdate mobilityServiceUpdateInstance = new MobilityServiceUpdate();
                                                        processServerInstance.Updates.Add(mobilityServiceUpdateInstance);
                                                        
                                                        JToken versionValue = mobilityServiceUpdatesValue["version"];
                                                        if (versionValue != null && versionValue.Type != JTokenType.Null)
                                                        {
                                                            string versionInstance = ((string)versionValue);
                                                            mobilityServiceUpdateInstance.Version = versionInstance;
                                                        }
                                                        
                                                        JToken rebootStatusValue = mobilityServiceUpdatesValue["rebootStatus"];
                                                        if (rebootStatusValue != null && rebootStatusValue.Type != JTokenType.Null)
                                                        {
                                                            string rebootStatusInstance = ((string)rebootStatusValue);
                                                            mobilityServiceUpdateInstance.RebootStatus = rebootStatusInstance;
                                                        }
                                                        
                                                        JToken osTypeValue2 = mobilityServiceUpdatesValue["osType"];
                                                        if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string osTypeInstance2 = ((string)osTypeValue2);
                                                            mobilityServiceUpdateInstance.OsType = osTypeInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                JToken hostIdValue = processServersValue["hostId"];
                                                if (hostIdValue != null && hostIdValue.Type != JTokenType.Null)
                                                {
                                                    string hostIdInstance = ((string)hostIdValue);
                                                    processServerInstance.HostId = hostIdInstance;
                                                }
                                                
                                                JToken machineCountValue = processServersValue["machineCount"];
                                                if (machineCountValue != null && machineCountValue.Type != JTokenType.Null)
                                                {
                                                    string machineCountInstance = ((string)machineCountValue);
                                                    processServerInstance.ServerCount = machineCountInstance;
                                                }
                                                
                                                JToken replicationPairCountValue = processServersValue["replicationPairCount"];
                                                if (replicationPairCountValue != null && replicationPairCountValue.Type != JTokenType.Null)
                                                {
                                                    string replicationPairCountInstance = ((string)replicationPairCountValue);
                                                    processServerInstance.ReplicationPairCount = replicationPairCountInstance;
                                                }
                                                
                                                JToken systemLoadValue = processServersValue["systemLoad"];
                                                if (systemLoadValue != null && systemLoadValue.Type != JTokenType.Null)
                                                {
                                                    string systemLoadInstance = ((string)systemLoadValue);
                                                    processServerInstance.SystemLoad = systemLoadInstance;
                                                }
                                                
                                                JToken systemLoadStatusValue = processServersValue["systemLoadStatus"];
                                                if (systemLoadStatusValue != null && systemLoadStatusValue.Type != JTokenType.Null)
                                                {
                                                    string systemLoadStatusInstance = ((string)systemLoadStatusValue);
                                                    processServerInstance.SystemLoadStatus = systemLoadStatusInstance;
                                                }
                                                
                                                JToken cpuLoadValue = processServersValue["cpuLoad"];
                                                if (cpuLoadValue != null && cpuLoadValue.Type != JTokenType.Null)
                                                {
                                                    string cpuLoadInstance = ((string)cpuLoadValue);
                                                    processServerInstance.CpuLoad = cpuLoadInstance;
                                                }
                                                
                                                JToken cpuLoadStatusValue = processServersValue["cpuLoadStatus"];
                                                if (cpuLoadStatusValue != null && cpuLoadStatusValue.Type != JTokenType.Null)
                                                {
                                                    string cpuLoadStatusInstance = ((string)cpuLoadStatusValue);
                                                    processServerInstance.CpuLoadStatus = cpuLoadStatusInstance;
                                                }
                                                
                                                JToken totalMemoryInBytesValue = processServersValue["totalMemoryInBytes"];
                                                if (totalMemoryInBytesValue != null && totalMemoryInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long totalMemoryInBytesInstance = ((long)totalMemoryInBytesValue);
                                                    processServerInstance.TotalMemoryInBytes = totalMemoryInBytesInstance;
                                                }
                                                
                                                JToken availableMemoryInBytesValue = processServersValue["availableMemoryInBytes"];
                                                if (availableMemoryInBytesValue != null && availableMemoryInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long availableMemoryInBytesInstance = ((long)availableMemoryInBytesValue);
                                                    processServerInstance.AvailableMemoryInBytes = availableMemoryInBytesInstance;
                                                }
                                                
                                                JToken memoryUsageStatusValue = processServersValue["memoryUsageStatus"];
                                                if (memoryUsageStatusValue != null && memoryUsageStatusValue.Type != JTokenType.Null)
                                                {
                                                    string memoryUsageStatusInstance = ((string)memoryUsageStatusValue);
                                                    processServerInstance.MemoryUsageStatus = memoryUsageStatusInstance;
                                                }
                                                
                                                JToken totalSpaceInBytesValue = processServersValue["totalSpaceInBytes"];
                                                if (totalSpaceInBytesValue != null && totalSpaceInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long totalSpaceInBytesInstance = ((long)totalSpaceInBytesValue);
                                                    processServerInstance.TotalSpaceInBytes = totalSpaceInBytesInstance;
                                                }
                                                
                                                JToken availableSpaceInBytesValue = processServersValue["availableSpaceInBytes"];
                                                if (availableSpaceInBytesValue != null && availableSpaceInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long availableSpaceInBytesInstance = ((long)availableSpaceInBytesValue);
                                                    processServerInstance.AvailableSpaceInBytes = availableSpaceInBytesInstance;
                                                }
                                                
                                                JToken spaceUsageStatusValue = processServersValue["spaceUsageStatus"];
                                                if (spaceUsageStatusValue != null && spaceUsageStatusValue.Type != JTokenType.Null)
                                                {
                                                    string spaceUsageStatusInstance = ((string)spaceUsageStatusValue);
                                                    processServerInstance.SpaceUsageStatus = spaceUsageStatusInstance;
                                                }
                                                
                                                JToken psServiceStatusValue = processServersValue["psServiceStatus"];
                                                if (psServiceStatusValue != null && psServiceStatusValue.Type != JTokenType.Null)
                                                {
                                                    string psServiceStatusInstance = ((string)psServiceStatusValue);
                                                    processServerInstance.PsServiceStatus = psServiceStatusInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken masterTargetServersArray = customDetailsValue["masterTargetServers"];
                                        if (masterTargetServersArray != null && masterTargetServersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken masterTargetServersValue in ((JArray)masterTargetServersArray))
                                            {
                                                MasterTargetServer masterTargetServerInstance = new MasterTargetServer();
                                                vMwareFabricDetailsInstance.MasterTargetServers.Add(masterTargetServerInstance);
                                                
                                                JToken idValue2 = masterTargetServersValue["id"];
                                                if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                {
                                                    string idInstance2 = ((string)idValue2);
                                                    masterTargetServerInstance.Id = idInstance2;
                                                }
                                                
                                                JToken ipAddressValue2 = masterTargetServersValue["ipAddress"];
                                                if (ipAddressValue2 != null && ipAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string ipAddressInstance2 = ((string)ipAddressValue2);
                                                    masterTargetServerInstance.IpAddress = ipAddressInstance2;
                                                }
                                                
                                                JToken nameValue = masterTargetServersValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    masterTargetServerInstance.Name = nameInstance;
                                                }
                                                
                                                JToken osTypeValue3 = masterTargetServersValue["osType"];
                                                if (osTypeValue3 != null && osTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance3 = ((string)osTypeValue3);
                                                    masterTargetServerInstance.OsType = osTypeInstance3;
                                                }
                                                
                                                JToken agentVersionValue2 = masterTargetServersValue["agentVersion"];
                                                if (agentVersionValue2 != null && agentVersionValue2.Type != JTokenType.Null)
                                                {
                                                    string agentVersionInstance2 = ((string)agentVersionValue2);
                                                    masterTargetServerInstance.AgentVersion = agentVersionInstance2;
                                                }
                                                
                                                JToken lastHeartbeatValue2 = masterTargetServersValue["lastHeartbeat"];
                                                if (lastHeartbeatValue2 != null && lastHeartbeatValue2.Type != JTokenType.Null)
                                                {
                                                    DateTime lastHeartbeatInstance2 = ((DateTime)lastHeartbeatValue2);
                                                    masterTargetServerInstance.LastHeartbeat = lastHeartbeatInstance2;
                                                }
                                                
                                                JToken versionStatusValue2 = masterTargetServersValue["versionStatus"];
                                                if (versionStatusValue2 != null && versionStatusValue2.Type != JTokenType.Null)
                                                {
                                                    string versionStatusInstance2 = ((string)versionStatusValue2);
                                                    masterTargetServerInstance.VersionStatus = versionStatusInstance2;
                                                }
                                                
                                                JToken retentionVolumesArray = masterTargetServersValue["retentionVolumes"];
                                                if (retentionVolumesArray != null && retentionVolumesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken retentionVolumesValue in ((JArray)retentionVolumesArray))
                                                    {
                                                        RetentionVolume retentionVolumeInstance = new RetentionVolume();
                                                        masterTargetServerInstance.RetentionVolumes.Add(retentionVolumeInstance);
                                                        
                                                        JToken volumeNameValue = retentionVolumesValue["volumeName"];
                                                        if (volumeNameValue != null && volumeNameValue.Type != JTokenType.Null)
                                                        {
                                                            string volumeNameInstance = ((string)volumeNameValue);
                                                            retentionVolumeInstance.VolumeName = volumeNameInstance;
                                                        }
                                                        
                                                        JToken capacityInBytesValue = retentionVolumesValue["capacityInBytes"];
                                                        if (capacityInBytesValue != null && capacityInBytesValue.Type != JTokenType.Null)
                                                        {
                                                            long capacityInBytesInstance = ((long)capacityInBytesValue);
                                                            retentionVolumeInstance.CapacityInBytes = capacityInBytesInstance;
                                                        }
                                                        
                                                        JToken freeSpaceInBytesValue = retentionVolumesValue["freeSpaceInBytes"];
                                                        if (freeSpaceInBytesValue != null && freeSpaceInBytesValue.Type != JTokenType.Null)
                                                        {
                                                            long freeSpaceInBytesInstance = ((long)freeSpaceInBytesValue);
                                                            retentionVolumeInstance.FreeSpaceInBytes = freeSpaceInBytesInstance;
                                                        }
                                                        
                                                        JToken thresholdPercentageValue = retentionVolumesValue["thresholdPercentage"];
                                                        if (thresholdPercentageValue != null && thresholdPercentageValue.Type != JTokenType.Null)
                                                        {
                                                            int thresholdPercentageInstance = ((int)thresholdPercentageValue);
                                                            retentionVolumeInstance.ThresholdPercentage = thresholdPercentageInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken dataStoresArray = masterTargetServersValue["dataStores"];
                                                if (dataStoresArray != null && dataStoresArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken dataStoresValue in ((JArray)dataStoresArray))
                                                    {
                                                        DataStore dataStoreInstance = new DataStore();
                                                        masterTargetServerInstance.DataStores.Add(dataStoreInstance);
                                                        
                                                        JToken symbolicNameValue = dataStoresValue["symbolicName"];
                                                        if (symbolicNameValue != null && symbolicNameValue.Type != JTokenType.Null)
                                                        {
                                                            string symbolicNameInstance = ((string)symbolicNameValue);
                                                            dataStoreInstance.SymbolicName = symbolicNameInstance;
                                                        }
                                                        
                                                        JToken uuidValue = dataStoresValue["uuid"];
                                                        if (uuidValue != null && uuidValue.Type != JTokenType.Null)
                                                        {
                                                            string uuidInstance = ((string)uuidValue);
                                                            dataStoreInstance.Uuid = uuidInstance;
                                                        }
                                                        
                                                        JToken capacityValue = dataStoresValue["capacity"];
                                                        if (capacityValue != null && capacityValue.Type != JTokenType.Null)
                                                        {
                                                            string capacityInstance = ((string)capacityValue);
                                                            dataStoreInstance.Capacity = capacityInstance;
                                                        }
                                                        
                                                        JToken freeSpaceValue = dataStoresValue["freeSpace"];
                                                        if (freeSpaceValue != null && freeSpaceValue.Type != JTokenType.Null)
                                                        {
                                                            string freeSpaceInstance = ((string)freeSpaceValue);
                                                            dataStoreInstance.FreeSpace = freeSpaceInstance;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken runAsAccountsArray = customDetailsValue["runAsAccounts"];
                                        if (runAsAccountsArray != null && runAsAccountsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken runAsAccountsValue in ((JArray)runAsAccountsArray))
                                            {
                                                RunAsAccount runAsAccountInstance = new RunAsAccount();
                                                vMwareFabricDetailsInstance.RunAsAccounts.Add(runAsAccountInstance);
                                                
                                                JToken accountIdValue = runAsAccountsValue["accountId"];
                                                if (accountIdValue != null && accountIdValue.Type != JTokenType.Null)
                                                {
                                                    string accountIdInstance = ((string)accountIdValue);
                                                    runAsAccountInstance.AccountId = accountIdInstance;
                                                }
                                                
                                                JToken accountNameValue = runAsAccountsValue["accountName"];
                                                if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                {
                                                    string accountNameInstance = ((string)accountNameValue);
                                                    runAsAccountInstance.AccountName = accountNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken replicationPairCountValue2 = customDetailsValue["replicationPairCount"];
                                        if (replicationPairCountValue2 != null && replicationPairCountValue2.Type != JTokenType.Null)
                                        {
                                            string replicationPairCountInstance2 = ((string)replicationPairCountValue2);
                                            vMwareFabricDetailsInstance.ReplicationPairCount = replicationPairCountInstance2;
                                        }
                                        
                                        JToken processServerCountValue = customDetailsValue["processServerCount"];
                                        if (processServerCountValue != null && processServerCountValue.Type != JTokenType.Null)
                                        {
                                            string processServerCountInstance = ((string)processServerCountValue);
                                            vMwareFabricDetailsInstance.ProcessServerCount = processServerCountInstance;
                                        }
                                        
                                        JToken agentCountValue = customDetailsValue["agentCount"];
                                        if (agentCountValue != null && agentCountValue.Type != JTokenType.Null)
                                        {
                                            string agentCountInstance = ((string)agentCountValue);
                                            vMwareFabricDetailsInstance.AgentCount = agentCountInstance;
                                        }
                                        
                                        JToken protectedServersValue = customDetailsValue["protectedServers"];
                                        if (protectedServersValue != null && protectedServersValue.Type != JTokenType.Null)
                                        {
                                            string protectedServersInstance = ((string)protectedServersValue);
                                            vMwareFabricDetailsInstance.ProtectedServers = protectedServersInstance;
                                        }
                                        
                                        JToken systemLoadValue2 = customDetailsValue["systemLoad"];
                                        if (systemLoadValue2 != null && systemLoadValue2.Type != JTokenType.Null)
                                        {
                                            string systemLoadInstance2 = ((string)systemLoadValue2);
                                            vMwareFabricDetailsInstance.SystemLoad = systemLoadInstance2;
                                        }
                                        
                                        JToken systemLoadStatusValue2 = customDetailsValue["systemLoadStatus"];
                                        if (systemLoadStatusValue2 != null && systemLoadStatusValue2.Type != JTokenType.Null)
                                        {
                                            string systemLoadStatusInstance2 = ((string)systemLoadStatusValue2);
                                            vMwareFabricDetailsInstance.SystemLoadStatus = systemLoadStatusInstance2;
                                        }
                                        
                                        JToken cpuLoadValue2 = customDetailsValue["cpuLoad"];
                                        if (cpuLoadValue2 != null && cpuLoadValue2.Type != JTokenType.Null)
                                        {
                                            string cpuLoadInstance2 = ((string)cpuLoadValue2);
                                            vMwareFabricDetailsInstance.CpuLoad = cpuLoadInstance2;
                                        }
                                        
                                        JToken cpuLoadStatusValue2 = customDetailsValue["cpuLoadStatus"];
                                        if (cpuLoadStatusValue2 != null && cpuLoadStatusValue2.Type != JTokenType.Null)
                                        {
                                            string cpuLoadStatusInstance2 = ((string)cpuLoadStatusValue2);
                                            vMwareFabricDetailsInstance.CpuLoadStatus = cpuLoadStatusInstance2;
                                        }
                                        
                                        JToken totalMemoryInBytesValue2 = customDetailsValue["totalMemoryInBytes"];
                                        if (totalMemoryInBytesValue2 != null && totalMemoryInBytesValue2.Type != JTokenType.Null)
                                        {
                                            long totalMemoryInBytesInstance2 = ((long)totalMemoryInBytesValue2);
                                            vMwareFabricDetailsInstance.TotalMemoryInBytes = totalMemoryInBytesInstance2;
                                        }
                                        
                                        JToken availableMemoryInBytesValue2 = customDetailsValue["availableMemoryInBytes"];
                                        if (availableMemoryInBytesValue2 != null && availableMemoryInBytesValue2.Type != JTokenType.Null)
                                        {
                                            long availableMemoryInBytesInstance2 = ((long)availableMemoryInBytesValue2);
                                            vMwareFabricDetailsInstance.AvailableMemoryInBytes = availableMemoryInBytesInstance2;
                                        }
                                        
                                        JToken memoryUsageStatusValue2 = customDetailsValue["memoryUsageStatus"];
                                        if (memoryUsageStatusValue2 != null && memoryUsageStatusValue2.Type != JTokenType.Null)
                                        {
                                            string memoryUsageStatusInstance2 = ((string)memoryUsageStatusValue2);
                                            vMwareFabricDetailsInstance.MemoryUsageStatus = memoryUsageStatusInstance2;
                                        }
                                        
                                        JToken totalSpaceInBytesValue2 = customDetailsValue["totalSpaceInBytes"];
                                        if (totalSpaceInBytesValue2 != null && totalSpaceInBytesValue2.Type != JTokenType.Null)
                                        {
                                            long totalSpaceInBytesInstance2 = ((long)totalSpaceInBytesValue2);
                                            vMwareFabricDetailsInstance.TotalSpaceInBytes = totalSpaceInBytesInstance2;
                                        }
                                        
                                        JToken availableSpaceInBytesValue2 = customDetailsValue["availableSpaceInBytes"];
                                        if (availableSpaceInBytesValue2 != null && availableSpaceInBytesValue2.Type != JTokenType.Null)
                                        {
                                            long availableSpaceInBytesInstance2 = ((long)availableSpaceInBytesValue2);
                                            vMwareFabricDetailsInstance.AvailableSpaceInBytes = availableSpaceInBytesInstance2;
                                        }
                                        
                                        JToken spaceUsageStatusValue2 = customDetailsValue["spaceUsageStatus"];
                                        if (spaceUsageStatusValue2 != null && spaceUsageStatusValue2.Type != JTokenType.Null)
                                        {
                                            string spaceUsageStatusInstance2 = ((string)spaceUsageStatusValue2);
                                            vMwareFabricDetailsInstance.SpaceUsageStatus = spaceUsageStatusInstance2;
                                        }
                                        
                                        JToken webLoadValue = customDetailsValue["webLoad"];
                                        if (webLoadValue != null && webLoadValue.Type != JTokenType.Null)
                                        {
                                            string webLoadInstance = ((string)webLoadValue);
                                            vMwareFabricDetailsInstance.WebLoad = webLoadInstance;
                                        }
                                        
                                        JToken webLoadStatusValue = customDetailsValue["webLoadStatus"];
                                        if (webLoadStatusValue != null && webLoadStatusValue.Type != JTokenType.Null)
                                        {
                                            string webLoadStatusInstance = ((string)webLoadStatusValue);
                                            vMwareFabricDetailsInstance.WebLoadStatus = webLoadStatusInstance;
                                        }
                                        
                                        JToken databaseServerLoadValue = customDetailsValue["databaseServerLoad"];
                                        if (databaseServerLoadValue != null && databaseServerLoadValue.Type != JTokenType.Null)
                                        {
                                            string databaseServerLoadInstance = ((string)databaseServerLoadValue);
                                            vMwareFabricDetailsInstance.DatabaseServerLoad = databaseServerLoadInstance;
                                        }
                                        
                                        JToken databaseServerLoadStatusValue = customDetailsValue["databaseServerLoadStatus"];
                                        if (databaseServerLoadStatusValue != null && databaseServerLoadStatusValue.Type != JTokenType.Null)
                                        {
                                            string databaseServerLoadStatusInstance = ((string)databaseServerLoadStatusValue);
                                            vMwareFabricDetailsInstance.DatabaseServerLoadStatus = databaseServerLoadStatusInstance;
                                        }
                                        
                                        JToken csServiceStatusValue = customDetailsValue["csServiceStatus"];
                                        if (csServiceStatusValue != null && csServiceStatusValue.Type != JTokenType.Null)
                                        {
                                            string csServiceStatusInstance = ((string)csServiceStatusValue);
                                            vMwareFabricDetailsInstance.CsServiceStatus = csServiceStatusInstance;
                                        }
                                        
                                        JToken ipAddressValue3 = customDetailsValue["ipAddress"];
                                        if (ipAddressValue3 != null && ipAddressValue3.Type != JTokenType.Null)
                                        {
                                            string ipAddressInstance3 = ((string)ipAddressValue3);
                                            vMwareFabricDetailsInstance.IpAddress = ipAddressInstance3;
                                        }
                                        
                                        JToken agentVersionValue3 = customDetailsValue["agentVersion"];
                                        if (agentVersionValue3 != null && agentVersionValue3.Type != JTokenType.Null)
                                        {
                                            string agentVersionInstance3 = ((string)agentVersionValue3);
                                            vMwareFabricDetailsInstance.AgentVersion = agentVersionInstance3;
                                        }
                                        
                                        JToken hostNameValue = customDetailsValue["hostName"];
                                        if (hostNameValue != null && hostNameValue.Type != JTokenType.Null)
                                        {
                                            string hostNameInstance = ((string)hostNameValue);
                                            vMwareFabricDetailsInstance.HostName = hostNameInstance;
                                        }
                                        
                                        JToken lastHeartbeatValue3 = customDetailsValue["lastHeartbeat"];
                                        if (lastHeartbeatValue3 != null && lastHeartbeatValue3.Type != JTokenType.Null)
                                        {
                                            DateTime lastHeartbeatInstance3 = ((DateTime)lastHeartbeatValue3);
                                            vMwareFabricDetailsInstance.LastHeartbeat = lastHeartbeatInstance3;
                                        }
                                        
                                        JToken versionStatusValue3 = customDetailsValue["versionStatus"];
                                        if (versionStatusValue3 != null && versionStatusValue3.Type != JTokenType.Null)
                                        {
                                            string versionStatusInstance3 = ((string)versionStatusValue3);
                                            vMwareFabricDetailsInstance.VersionStatus = versionStatusInstance3;
                                        }
                                        
                                        JToken instanceTypeValue3 = customDetailsValue["instanceType"];
                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                            vMwareFabricDetailsInstance.InstanceType = instanceTypeInstance3;
                                        }
                                        propertiesInstance.CustomDetails = vMwareFabricDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue3 = responseDoc["id"];
                            if (idValue3 != null && idValue3.Type != JTokenType.Null)
                            {
                                string idInstance3 = ((string)idValue3);
                                fabricInstance.Id = idInstance3;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                fabricInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                fabricInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                fabricInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    fabricInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> GetPurgeStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetPurgeStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new LongRunningOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken locationValue = responseDoc["Location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                result.Location = locationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<ReassociateGatewayOperationResponse> GetReassociateGatewayStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetReassociateGatewayStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ReassociateGatewayOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ReassociateGatewayOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Fabric fabricInstance = new Fabric();
                            result.Fabric = fabricInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                FabricProperties propertiesInstance = new FabricProperties();
                                fabricInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken internalIdentifierValue = propertiesValue["internalIdentifier"];
                                if (internalIdentifierValue != null && internalIdentifierValue.Type != JTokenType.Null)
                                {
                                    string internalIdentifierInstance = ((string)internalIdentifierValue);
                                    propertiesInstance.InternalIdentifier = internalIdentifierInstance;
                                }
                                
                                JToken encryptionDetailsValue = propertiesValue["encryptionDetails"];
                                if (encryptionDetailsValue != null && encryptionDetailsValue.Type != JTokenType.Null)
                                {
                                    EncryptionDetails encryptionDetailsInstance = new EncryptionDetails();
                                    propertiesInstance.EncryptionDetails = encryptionDetailsInstance;
                                    
                                    JToken kekStateValue = encryptionDetailsValue["kekState"];
                                    if (kekStateValue != null && kekStateValue.Type != JTokenType.Null)
                                    {
                                        string kekStateInstance = ((string)kekStateValue);
                                        encryptionDetailsInstance.KekState = kekStateInstance;
                                    }
                                    
                                    JToken kekCertThumbprintValue = encryptionDetailsValue["kekCertThumbprint"];
                                    if (kekCertThumbprintValue != null && kekCertThumbprintValue.Type != JTokenType.Null)
                                    {
                                        string kekCertThumbprintInstance = ((string)kekCertThumbprintValue);
                                        encryptionDetailsInstance.KekCertThumbprint = kekCertThumbprintInstance;
                                    }
                                    
                                    JToken kekCertExpiryDateValue = encryptionDetailsValue["kekCertExpiryDate"];
                                    if (kekCertExpiryDateValue != null && kekCertExpiryDateValue.Type != JTokenType.Null)
                                    {
                                        DateTime kekCertExpiryDateInstance = ((DateTime)kekCertExpiryDateValue);
                                        encryptionDetailsInstance.KekCertExpiryDate = kekCertExpiryDateInstance;
                                    }
                                }
                                
                                JToken rolloverEncryptionDetailsValue = propertiesValue["rolloverEncryptionDetails"];
                                if (rolloverEncryptionDetailsValue != null && rolloverEncryptionDetailsValue.Type != JTokenType.Null)
                                {
                                    EncryptionDetails rolloverEncryptionDetailsInstance = new EncryptionDetails();
                                    propertiesInstance.RolloverEncryptionDetails = rolloverEncryptionDetailsInstance;
                                    
                                    JToken kekStateValue2 = rolloverEncryptionDetailsValue["kekState"];
                                    if (kekStateValue2 != null && kekStateValue2.Type != JTokenType.Null)
                                    {
                                        string kekStateInstance2 = ((string)kekStateValue2);
                                        rolloverEncryptionDetailsInstance.KekState = kekStateInstance2;
                                    }
                                    
                                    JToken kekCertThumbprintValue2 = rolloverEncryptionDetailsValue["kekCertThumbprint"];
                                    if (kekCertThumbprintValue2 != null && kekCertThumbprintValue2.Type != JTokenType.Null)
                                    {
                                        string kekCertThumbprintInstance2 = ((string)kekCertThumbprintValue2);
                                        rolloverEncryptionDetailsInstance.KekCertThumbprint = kekCertThumbprintInstance2;
                                    }
                                    
                                    JToken kekCertExpiryDateValue2 = rolloverEncryptionDetailsValue["kekCertExpiryDate"];
                                    if (kekCertExpiryDateValue2 != null && kekCertExpiryDateValue2.Type != JTokenType.Null)
                                    {
                                        DateTime kekCertExpiryDateInstance2 = ((DateTime)kekCertExpiryDateValue2);
                                        rolloverEncryptionDetailsInstance.KekCertExpiryDate = kekCertExpiryDateInstance2;
                                    }
                                }
                                
                                JToken customDetailsValue = propertiesValue["customDetails"];
                                if (customDetailsValue != null && customDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)customDetailsValue["instanceType"]);
                                    if (typeName == "VMM")
                                    {
                                        VmmDetails vmmDetailsInstance = new VmmDetails();
                                        
                                        JToken instanceTypeValue = customDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            vmmDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.CustomDetails = vmmDetailsInstance;
                                    }
                                    if (typeName == "HyperVSite")
                                    {
                                        HyperVSiteDetails hyperVSiteDetailsInstance = new HyperVSiteDetails();
                                        
                                        JToken instanceTypeValue2 = customDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            hyperVSiteDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.CustomDetails = hyperVSiteDetailsInstance;
                                    }
                                    if (typeName == "VMware")
                                    {
                                        VMwareFabricDetails vMwareFabricDetailsInstance = new VMwareFabricDetails();
                                        
                                        JToken processServersArray = customDetailsValue["processServers"];
                                        if (processServersArray != null && processServersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken processServersValue in ((JArray)processServersArray))
                                            {
                                                ProcessServer processServerInstance = new ProcessServer();
                                                vMwareFabricDetailsInstance.ProcessServers.Add(processServerInstance);
                                                
                                                JToken friendlyNameValue2 = processServersValue["friendlyName"];
                                                if (friendlyNameValue2 != null && friendlyNameValue2.Type != JTokenType.Null)
                                                {
                                                    string friendlyNameInstance2 = ((string)friendlyNameValue2);
                                                    processServerInstance.FriendlyName = friendlyNameInstance2;
                                                }
                                                
                                                JToken idValue = processServersValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    processServerInstance.Id = idInstance;
                                                }
                                                
                                                JToken ipAddressValue = processServersValue["ipAddress"];
                                                if (ipAddressValue != null && ipAddressValue.Type != JTokenType.Null)
                                                {
                                                    string ipAddressInstance = ((string)ipAddressValue);
                                                    processServerInstance.IpAddress = ipAddressInstance;
                                                }
                                                
                                                JToken osTypeValue = processServersValue["osType"];
                                                if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance = ((string)osTypeValue);
                                                    processServerInstance.OsType = osTypeInstance;
                                                }
                                                
                                                JToken agentVersionValue = processServersValue["agentVersion"];
                                                if (agentVersionValue != null && agentVersionValue.Type != JTokenType.Null)
                                                {
                                                    string agentVersionInstance = ((string)agentVersionValue);
                                                    processServerInstance.AgentVersion = agentVersionInstance;
                                                }
                                                
                                                JToken lastHeartbeatValue = processServersValue["lastHeartbeat"];
                                                if (lastHeartbeatValue != null && lastHeartbeatValue.Type != JTokenType.Null)
                                                {
                                                    DateTime lastHeartbeatInstance = ((DateTime)lastHeartbeatValue);
                                                    processServerInstance.LastHeartbeat = lastHeartbeatInstance;
                                                }
                                                
                                                JToken versionStatusValue = processServersValue["versionStatus"];
                                                if (versionStatusValue != null && versionStatusValue.Type != JTokenType.Null)
                                                {
                                                    string versionStatusInstance = ((string)versionStatusValue);
                                                    processServerInstance.VersionStatus = versionStatusInstance;
                                                }
                                                
                                                JToken mobilityServiceUpdatesArray = processServersValue["mobilityServiceUpdates"];
                                                if (mobilityServiceUpdatesArray != null && mobilityServiceUpdatesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken mobilityServiceUpdatesValue in ((JArray)mobilityServiceUpdatesArray))
                                                    {
                                                        MobilityServiceUpdate mobilityServiceUpdateInstance = new MobilityServiceUpdate();
                                                        processServerInstance.Updates.Add(mobilityServiceUpdateInstance);
                                                        
                                                        JToken versionValue = mobilityServiceUpdatesValue["version"];
                                                        if (versionValue != null && versionValue.Type != JTokenType.Null)
                                                        {
                                                            string versionInstance = ((string)versionValue);
                                                            mobilityServiceUpdateInstance.Version = versionInstance;
                                                        }
                                                        
                                                        JToken rebootStatusValue = mobilityServiceUpdatesValue["rebootStatus"];
                                                        if (rebootStatusValue != null && rebootStatusValue.Type != JTokenType.Null)
                                                        {
                                                            string rebootStatusInstance = ((string)rebootStatusValue);
                                                            mobilityServiceUpdateInstance.RebootStatus = rebootStatusInstance;
                                                        }
                                                        
                                                        JToken osTypeValue2 = mobilityServiceUpdatesValue["osType"];
                                                        if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string osTypeInstance2 = ((string)osTypeValue2);
                                                            mobilityServiceUpdateInstance.OsType = osTypeInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                JToken hostIdValue = processServersValue["hostId"];
                                                if (hostIdValue != null && hostIdValue.Type != JTokenType.Null)
                                                {
                                                    string hostIdInstance = ((string)hostIdValue);
                                                    processServerInstance.HostId = hostIdInstance;
                                                }
                                                
                                                JToken machineCountValue = processServersValue["machineCount"];
                                                if (machineCountValue != null && machineCountValue.Type != JTokenType.Null)
                                                {
                                                    string machineCountInstance = ((string)machineCountValue);
                                                    processServerInstance.ServerCount = machineCountInstance;
                                                }
                                                
                                                JToken replicationPairCountValue = processServersValue["replicationPairCount"];
                                                if (replicationPairCountValue != null && replicationPairCountValue.Type != JTokenType.Null)
                                                {
                                                    string replicationPairCountInstance = ((string)replicationPairCountValue);
                                                    processServerInstance.ReplicationPairCount = replicationPairCountInstance;
                                                }
                                                
                                                JToken systemLoadValue = processServersValue["systemLoad"];
                                                if (systemLoadValue != null && systemLoadValue.Type != JTokenType.Null)
                                                {
                                                    string systemLoadInstance = ((string)systemLoadValue);
                                                    processServerInstance.SystemLoad = systemLoadInstance;
                                                }
                                                
                                                JToken systemLoadStatusValue = processServersValue["systemLoadStatus"];
                                                if (systemLoadStatusValue != null && systemLoadStatusValue.Type != JTokenType.Null)
                                                {
                                                    string systemLoadStatusInstance = ((string)systemLoadStatusValue);
                                                    processServerInstance.SystemLoadStatus = systemLoadStatusInstance;
                                                }
                                                
                                                JToken cpuLoadValue = processServersValue["cpuLoad"];
                                                if (cpuLoadValue != null && cpuLoadValue.Type != JTokenType.Null)
                                                {
                                                    string cpuLoadInstance = ((string)cpuLoadValue);
                                                    processServerInstance.CpuLoad = cpuLoadInstance;
                                                }
                                                
                                                JToken cpuLoadStatusValue = processServersValue["cpuLoadStatus"];
                                                if (cpuLoadStatusValue != null && cpuLoadStatusValue.Type != JTokenType.Null)
                                                {
                                                    string cpuLoadStatusInstance = ((string)cpuLoadStatusValue);
                                                    processServerInstance.CpuLoadStatus = cpuLoadStatusInstance;
                                                }
                                                
                                                JToken totalMemoryInBytesValue = processServersValue["totalMemoryInBytes"];
                                                if (totalMemoryInBytesValue != null && totalMemoryInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long totalMemoryInBytesInstance = ((long)totalMemoryInBytesValue);
                                                    processServerInstance.TotalMemoryInBytes = totalMemoryInBytesInstance;
                                                }
                                                
                                                JToken availableMemoryInBytesValue = processServersValue["availableMemoryInBytes"];
                                                if (availableMemoryInBytesValue != null && availableMemoryInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long availableMemoryInBytesInstance = ((long)availableMemoryInBytesValue);
                                                    processServerInstance.AvailableMemoryInBytes = availableMemoryInBytesInstance;
                                                }
                                                
                                                JToken memoryUsageStatusValue = processServersValue["memoryUsageStatus"];
                                                if (memoryUsageStatusValue != null && memoryUsageStatusValue.Type != JTokenType.Null)
                                                {
                                                    string memoryUsageStatusInstance = ((string)memoryUsageStatusValue);
                                                    processServerInstance.MemoryUsageStatus = memoryUsageStatusInstance;
                                                }
                                                
                                                JToken totalSpaceInBytesValue = processServersValue["totalSpaceInBytes"];
                                                if (totalSpaceInBytesValue != null && totalSpaceInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long totalSpaceInBytesInstance = ((long)totalSpaceInBytesValue);
                                                    processServerInstance.TotalSpaceInBytes = totalSpaceInBytesInstance;
                                                }
                                                
                                                JToken availableSpaceInBytesValue = processServersValue["availableSpaceInBytes"];
                                                if (availableSpaceInBytesValue != null && availableSpaceInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long availableSpaceInBytesInstance = ((long)availableSpaceInBytesValue);
                                                    processServerInstance.AvailableSpaceInBytes = availableSpaceInBytesInstance;
                                                }
                                                
                                                JToken spaceUsageStatusValue = processServersValue["spaceUsageStatus"];
                                                if (spaceUsageStatusValue != null && spaceUsageStatusValue.Type != JTokenType.Null)
                                                {
                                                    string spaceUsageStatusInstance = ((string)spaceUsageStatusValue);
                                                    processServerInstance.SpaceUsageStatus = spaceUsageStatusInstance;
                                                }
                                                
                                                JToken psServiceStatusValue = processServersValue["psServiceStatus"];
                                                if (psServiceStatusValue != null && psServiceStatusValue.Type != JTokenType.Null)
                                                {
                                                    string psServiceStatusInstance = ((string)psServiceStatusValue);
                                                    processServerInstance.PsServiceStatus = psServiceStatusInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken masterTargetServersArray = customDetailsValue["masterTargetServers"];
                                        if (masterTargetServersArray != null && masterTargetServersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken masterTargetServersValue in ((JArray)masterTargetServersArray))
                                            {
                                                MasterTargetServer masterTargetServerInstance = new MasterTargetServer();
                                                vMwareFabricDetailsInstance.MasterTargetServers.Add(masterTargetServerInstance);
                                                
                                                JToken idValue2 = masterTargetServersValue["id"];
                                                if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                {
                                                    string idInstance2 = ((string)idValue2);
                                                    masterTargetServerInstance.Id = idInstance2;
                                                }
                                                
                                                JToken ipAddressValue2 = masterTargetServersValue["ipAddress"];
                                                if (ipAddressValue2 != null && ipAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string ipAddressInstance2 = ((string)ipAddressValue2);
                                                    masterTargetServerInstance.IpAddress = ipAddressInstance2;
                                                }
                                                
                                                JToken nameValue = masterTargetServersValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    masterTargetServerInstance.Name = nameInstance;
                                                }
                                                
                                                JToken osTypeValue3 = masterTargetServersValue["osType"];
                                                if (osTypeValue3 != null && osTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance3 = ((string)osTypeValue3);
                                                    masterTargetServerInstance.OsType = osTypeInstance3;
                                                }
                                                
                                                JToken agentVersionValue2 = masterTargetServersValue["agentVersion"];
                                                if (agentVersionValue2 != null && agentVersionValue2.Type != JTokenType.Null)
                                                {
                                                    string agentVersionInstance2 = ((string)agentVersionValue2);
                                                    masterTargetServerInstance.AgentVersion = agentVersionInstance2;
                                                }
                                                
                                                JToken lastHeartbeatValue2 = masterTargetServersValue["lastHeartbeat"];
                                                if (lastHeartbeatValue2 != null && lastHeartbeatValue2.Type != JTokenType.Null)
                                                {
                                                    DateTime lastHeartbeatInstance2 = ((DateTime)lastHeartbeatValue2);
                                                    masterTargetServerInstance.LastHeartbeat = lastHeartbeatInstance2;
                                                }
                                                
                                                JToken versionStatusValue2 = masterTargetServersValue["versionStatus"];
                                                if (versionStatusValue2 != null && versionStatusValue2.Type != JTokenType.Null)
                                                {
                                                    string versionStatusInstance2 = ((string)versionStatusValue2);
                                                    masterTargetServerInstance.VersionStatus = versionStatusInstance2;
                                                }
                                                
                                                JToken retentionVolumesArray = masterTargetServersValue["retentionVolumes"];
                                                if (retentionVolumesArray != null && retentionVolumesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken retentionVolumesValue in ((JArray)retentionVolumesArray))
                                                    {
                                                        RetentionVolume retentionVolumeInstance = new RetentionVolume();
                                                        masterTargetServerInstance.RetentionVolumes.Add(retentionVolumeInstance);
                                                        
                                                        JToken volumeNameValue = retentionVolumesValue["volumeName"];
                                                        if (volumeNameValue != null && volumeNameValue.Type != JTokenType.Null)
                                                        {
                                                            string volumeNameInstance = ((string)volumeNameValue);
                                                            retentionVolumeInstance.VolumeName = volumeNameInstance;
                                                        }
                                                        
                                                        JToken capacityInBytesValue = retentionVolumesValue["capacityInBytes"];
                                                        if (capacityInBytesValue != null && capacityInBytesValue.Type != JTokenType.Null)
                                                        {
                                                            long capacityInBytesInstance = ((long)capacityInBytesValue);
                                                            retentionVolumeInstance.CapacityInBytes = capacityInBytesInstance;
                                                        }
                                                        
                                                        JToken freeSpaceInBytesValue = retentionVolumesValue["freeSpaceInBytes"];
                                                        if (freeSpaceInBytesValue != null && freeSpaceInBytesValue.Type != JTokenType.Null)
                                                        {
                                                            long freeSpaceInBytesInstance = ((long)freeSpaceInBytesValue);
                                                            retentionVolumeInstance.FreeSpaceInBytes = freeSpaceInBytesInstance;
                                                        }
                                                        
                                                        JToken thresholdPercentageValue = retentionVolumesValue["thresholdPercentage"];
                                                        if (thresholdPercentageValue != null && thresholdPercentageValue.Type != JTokenType.Null)
                                                        {
                                                            int thresholdPercentageInstance = ((int)thresholdPercentageValue);
                                                            retentionVolumeInstance.ThresholdPercentage = thresholdPercentageInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken dataStoresArray = masterTargetServersValue["dataStores"];
                                                if (dataStoresArray != null && dataStoresArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken dataStoresValue in ((JArray)dataStoresArray))
                                                    {
                                                        DataStore dataStoreInstance = new DataStore();
                                                        masterTargetServerInstance.DataStores.Add(dataStoreInstance);
                                                        
                                                        JToken symbolicNameValue = dataStoresValue["symbolicName"];
                                                        if (symbolicNameValue != null && symbolicNameValue.Type != JTokenType.Null)
                                                        {
                                                            string symbolicNameInstance = ((string)symbolicNameValue);
                                                            dataStoreInstance.SymbolicName = symbolicNameInstance;
                                                        }
                                                        
                                                        JToken uuidValue = dataStoresValue["uuid"];
                                                        if (uuidValue != null && uuidValue.Type != JTokenType.Null)
                                                        {
                                                            string uuidInstance = ((string)uuidValue);
                                                            dataStoreInstance.Uuid = uuidInstance;
                                                        }
                                                        
                                                        JToken capacityValue = dataStoresValue["capacity"];
                                                        if (capacityValue != null && capacityValue.Type != JTokenType.Null)
                                                        {
                                                            string capacityInstance = ((string)capacityValue);
                                                            dataStoreInstance.Capacity = capacityInstance;
                                                        }
                                                        
                                                        JToken freeSpaceValue = dataStoresValue["freeSpace"];
                                                        if (freeSpaceValue != null && freeSpaceValue.Type != JTokenType.Null)
                                                        {
                                                            string freeSpaceInstance = ((string)freeSpaceValue);
                                                            dataStoreInstance.FreeSpace = freeSpaceInstance;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken runAsAccountsArray = customDetailsValue["runAsAccounts"];
                                        if (runAsAccountsArray != null && runAsAccountsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken runAsAccountsValue in ((JArray)runAsAccountsArray))
                                            {
                                                RunAsAccount runAsAccountInstance = new RunAsAccount();
                                                vMwareFabricDetailsInstance.RunAsAccounts.Add(runAsAccountInstance);
                                                
                                                JToken accountIdValue = runAsAccountsValue["accountId"];
                                                if (accountIdValue != null && accountIdValue.Type != JTokenType.Null)
                                                {
                                                    string accountIdInstance = ((string)accountIdValue);
                                                    runAsAccountInstance.AccountId = accountIdInstance;
                                                }
                                                
                                                JToken accountNameValue = runAsAccountsValue["accountName"];
                                                if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                {
                                                    string accountNameInstance = ((string)accountNameValue);
                                                    runAsAccountInstance.AccountName = accountNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken replicationPairCountValue2 = customDetailsValue["replicationPairCount"];
                                        if (replicationPairCountValue2 != null && replicationPairCountValue2.Type != JTokenType.Null)
                                        {
                                            string replicationPairCountInstance2 = ((string)replicationPairCountValue2);
                                            vMwareFabricDetailsInstance.ReplicationPairCount = replicationPairCountInstance2;
                                        }
                                        
                                        JToken processServerCountValue = customDetailsValue["processServerCount"];
                                        if (processServerCountValue != null && processServerCountValue.Type != JTokenType.Null)
                                        {
                                            string processServerCountInstance = ((string)processServerCountValue);
                                            vMwareFabricDetailsInstance.ProcessServerCount = processServerCountInstance;
                                        }
                                        
                                        JToken agentCountValue = customDetailsValue["agentCount"];
                                        if (agentCountValue != null && agentCountValue.Type != JTokenType.Null)
                                        {
                                            string agentCountInstance = ((string)agentCountValue);
                                            vMwareFabricDetailsInstance.AgentCount = agentCountInstance;
                                        }
                                        
                                        JToken protectedServersValue = customDetailsValue["protectedServers"];
                                        if (protectedServersValue != null && protectedServersValue.Type != JTokenType.Null)
                                        {
                                            string protectedServersInstance = ((string)protectedServersValue);
                                            vMwareFabricDetailsInstance.ProtectedServers = protectedServersInstance;
                                        }
                                        
                                        JToken systemLoadValue2 = customDetailsValue["systemLoad"];
                                        if (systemLoadValue2 != null && systemLoadValue2.Type != JTokenType.Null)
                                        {
                                            string systemLoadInstance2 = ((string)systemLoadValue2);
                                            vMwareFabricDetailsInstance.SystemLoad = systemLoadInstance2;
                                        }
                                        
                                        JToken systemLoadStatusValue2 = customDetailsValue["systemLoadStatus"];
                                        if (systemLoadStatusValue2 != null && systemLoadStatusValue2.Type != JTokenType.Null)
                                        {
                                            string systemLoadStatusInstance2 = ((string)systemLoadStatusValue2);
                                            vMwareFabricDetailsInstance.SystemLoadStatus = systemLoadStatusInstance2;
                                        }
                                        
                                        JToken cpuLoadValue2 = customDetailsValue["cpuLoad"];
                                        if (cpuLoadValue2 != null && cpuLoadValue2.Type != JTokenType.Null)
                                        {
                                            string cpuLoadInstance2 = ((string)cpuLoadValue2);
                                            vMwareFabricDetailsInstance.CpuLoad = cpuLoadInstance2;
                                        }
                                        
                                        JToken cpuLoadStatusValue2 = customDetailsValue["cpuLoadStatus"];
                                        if (cpuLoadStatusValue2 != null && cpuLoadStatusValue2.Type != JTokenType.Null)
                                        {
                                            string cpuLoadStatusInstance2 = ((string)cpuLoadStatusValue2);
                                            vMwareFabricDetailsInstance.CpuLoadStatus = cpuLoadStatusInstance2;
                                        }
                                        
                                        JToken totalMemoryInBytesValue2 = customDetailsValue["totalMemoryInBytes"];
                                        if (totalMemoryInBytesValue2 != null && totalMemoryInBytesValue2.Type != JTokenType.Null)
                                        {
                                            long totalMemoryInBytesInstance2 = ((long)totalMemoryInBytesValue2);
                                            vMwareFabricDetailsInstance.TotalMemoryInBytes = totalMemoryInBytesInstance2;
                                        }
                                        
                                        JToken availableMemoryInBytesValue2 = customDetailsValue["availableMemoryInBytes"];
                                        if (availableMemoryInBytesValue2 != null && availableMemoryInBytesValue2.Type != JTokenType.Null)
                                        {
                                            long availableMemoryInBytesInstance2 = ((long)availableMemoryInBytesValue2);
                                            vMwareFabricDetailsInstance.AvailableMemoryInBytes = availableMemoryInBytesInstance2;
                                        }
                                        
                                        JToken memoryUsageStatusValue2 = customDetailsValue["memoryUsageStatus"];
                                        if (memoryUsageStatusValue2 != null && memoryUsageStatusValue2.Type != JTokenType.Null)
                                        {
                                            string memoryUsageStatusInstance2 = ((string)memoryUsageStatusValue2);
                                            vMwareFabricDetailsInstance.MemoryUsageStatus = memoryUsageStatusInstance2;
                                        }
                                        
                                        JToken totalSpaceInBytesValue2 = customDetailsValue["totalSpaceInBytes"];
                                        if (totalSpaceInBytesValue2 != null && totalSpaceInBytesValue2.Type != JTokenType.Null)
                                        {
                                            long totalSpaceInBytesInstance2 = ((long)totalSpaceInBytesValue2);
                                            vMwareFabricDetailsInstance.TotalSpaceInBytes = totalSpaceInBytesInstance2;
                                        }
                                        
                                        JToken availableSpaceInBytesValue2 = customDetailsValue["availableSpaceInBytes"];
                                        if (availableSpaceInBytesValue2 != null && availableSpaceInBytesValue2.Type != JTokenType.Null)
                                        {
                                            long availableSpaceInBytesInstance2 = ((long)availableSpaceInBytesValue2);
                                            vMwareFabricDetailsInstance.AvailableSpaceInBytes = availableSpaceInBytesInstance2;
                                        }
                                        
                                        JToken spaceUsageStatusValue2 = customDetailsValue["spaceUsageStatus"];
                                        if (spaceUsageStatusValue2 != null && spaceUsageStatusValue2.Type != JTokenType.Null)
                                        {
                                            string spaceUsageStatusInstance2 = ((string)spaceUsageStatusValue2);
                                            vMwareFabricDetailsInstance.SpaceUsageStatus = spaceUsageStatusInstance2;
                                        }
                                        
                                        JToken webLoadValue = customDetailsValue["webLoad"];
                                        if (webLoadValue != null && webLoadValue.Type != JTokenType.Null)
                                        {
                                            string webLoadInstance = ((string)webLoadValue);
                                            vMwareFabricDetailsInstance.WebLoad = webLoadInstance;
                                        }
                                        
                                        JToken webLoadStatusValue = customDetailsValue["webLoadStatus"];
                                        if (webLoadStatusValue != null && webLoadStatusValue.Type != JTokenType.Null)
                                        {
                                            string webLoadStatusInstance = ((string)webLoadStatusValue);
                                            vMwareFabricDetailsInstance.WebLoadStatus = webLoadStatusInstance;
                                        }
                                        
                                        JToken databaseServerLoadValue = customDetailsValue["databaseServerLoad"];
                                        if (databaseServerLoadValue != null && databaseServerLoadValue.Type != JTokenType.Null)
                                        {
                                            string databaseServerLoadInstance = ((string)databaseServerLoadValue);
                                            vMwareFabricDetailsInstance.DatabaseServerLoad = databaseServerLoadInstance;
                                        }
                                        
                                        JToken databaseServerLoadStatusValue = customDetailsValue["databaseServerLoadStatus"];
                                        if (databaseServerLoadStatusValue != null && databaseServerLoadStatusValue.Type != JTokenType.Null)
                                        {
                                            string databaseServerLoadStatusInstance = ((string)databaseServerLoadStatusValue);
                                            vMwareFabricDetailsInstance.DatabaseServerLoadStatus = databaseServerLoadStatusInstance;
                                        }
                                        
                                        JToken csServiceStatusValue = customDetailsValue["csServiceStatus"];
                                        if (csServiceStatusValue != null && csServiceStatusValue.Type != JTokenType.Null)
                                        {
                                            string csServiceStatusInstance = ((string)csServiceStatusValue);
                                            vMwareFabricDetailsInstance.CsServiceStatus = csServiceStatusInstance;
                                        }
                                        
                                        JToken ipAddressValue3 = customDetailsValue["ipAddress"];
                                        if (ipAddressValue3 != null && ipAddressValue3.Type != JTokenType.Null)
                                        {
                                            string ipAddressInstance3 = ((string)ipAddressValue3);
                                            vMwareFabricDetailsInstance.IpAddress = ipAddressInstance3;
                                        }
                                        
                                        JToken agentVersionValue3 = customDetailsValue["agentVersion"];
                                        if (agentVersionValue3 != null && agentVersionValue3.Type != JTokenType.Null)
                                        {
                                            string agentVersionInstance3 = ((string)agentVersionValue3);
                                            vMwareFabricDetailsInstance.AgentVersion = agentVersionInstance3;
                                        }
                                        
                                        JToken hostNameValue = customDetailsValue["hostName"];
                                        if (hostNameValue != null && hostNameValue.Type != JTokenType.Null)
                                        {
                                            string hostNameInstance = ((string)hostNameValue);
                                            vMwareFabricDetailsInstance.HostName = hostNameInstance;
                                        }
                                        
                                        JToken lastHeartbeatValue3 = customDetailsValue["lastHeartbeat"];
                                        if (lastHeartbeatValue3 != null && lastHeartbeatValue3.Type != JTokenType.Null)
                                        {
                                            DateTime lastHeartbeatInstance3 = ((DateTime)lastHeartbeatValue3);
                                            vMwareFabricDetailsInstance.LastHeartbeat = lastHeartbeatInstance3;
                                        }
                                        
                                        JToken versionStatusValue3 = customDetailsValue["versionStatus"];
                                        if (versionStatusValue3 != null && versionStatusValue3.Type != JTokenType.Null)
                                        {
                                            string versionStatusInstance3 = ((string)versionStatusValue3);
                                            vMwareFabricDetailsInstance.VersionStatus = versionStatusInstance3;
                                        }
                                        
                                        JToken instanceTypeValue3 = customDetailsValue["instanceType"];
                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                            vMwareFabricDetailsInstance.InstanceType = instanceTypeInstance3;
                                        }
                                        propertiesInstance.CustomDetails = vMwareFabricDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue3 = responseDoc["id"];
                            if (idValue3 != null && idValue3.Type != JTokenType.Null)
                            {
                                string idInstance3 = ((string)idValue3);
                                fabricInstance.Id = idInstance3;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                fabricInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                fabricInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                fabricInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    fabricInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for fabric long running operations.
        /// </returns>
        public async Task<FabricOperationResponse> GetRenewCertificateStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetRenewCertificateStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FabricOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FabricOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Fabric fabricInstance = new Fabric();
                            result.Fabric = fabricInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                FabricProperties propertiesInstance = new FabricProperties();
                                fabricInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken internalIdentifierValue = propertiesValue["internalIdentifier"];
                                if (internalIdentifierValue != null && internalIdentifierValue.Type != JTokenType.Null)
                                {
                                    string internalIdentifierInstance = ((string)internalIdentifierValue);
                                    propertiesInstance.InternalIdentifier = internalIdentifierInstance;
                                }
                                
                                JToken encryptionDetailsValue = propertiesValue["encryptionDetails"];
                                if (encryptionDetailsValue != null && encryptionDetailsValue.Type != JTokenType.Null)
                                {
                                    EncryptionDetails encryptionDetailsInstance = new EncryptionDetails();
                                    propertiesInstance.EncryptionDetails = encryptionDetailsInstance;
                                    
                                    JToken kekStateValue = encryptionDetailsValue["kekState"];
                                    if (kekStateValue != null && kekStateValue.Type != JTokenType.Null)
                                    {
                                        string kekStateInstance = ((string)kekStateValue);
                                        encryptionDetailsInstance.KekState = kekStateInstance;
                                    }
                                    
                                    JToken kekCertThumbprintValue = encryptionDetailsValue["kekCertThumbprint"];
                                    if (kekCertThumbprintValue != null && kekCertThumbprintValue.Type != JTokenType.Null)
                                    {
                                        string kekCertThumbprintInstance = ((string)kekCertThumbprintValue);
                                        encryptionDetailsInstance.KekCertThumbprint = kekCertThumbprintInstance;
                                    }
                                    
                                    JToken kekCertExpiryDateValue = encryptionDetailsValue["kekCertExpiryDate"];
                                    if (kekCertExpiryDateValue != null && kekCertExpiryDateValue.Type != JTokenType.Null)
                                    {
                                        DateTime kekCertExpiryDateInstance = ((DateTime)kekCertExpiryDateValue);
                                        encryptionDetailsInstance.KekCertExpiryDate = kekCertExpiryDateInstance;
                                    }
                                }
                                
                                JToken rolloverEncryptionDetailsValue = propertiesValue["rolloverEncryptionDetails"];
                                if (rolloverEncryptionDetailsValue != null && rolloverEncryptionDetailsValue.Type != JTokenType.Null)
                                {
                                    EncryptionDetails rolloverEncryptionDetailsInstance = new EncryptionDetails();
                                    propertiesInstance.RolloverEncryptionDetails = rolloverEncryptionDetailsInstance;
                                    
                                    JToken kekStateValue2 = rolloverEncryptionDetailsValue["kekState"];
                                    if (kekStateValue2 != null && kekStateValue2.Type != JTokenType.Null)
                                    {
                                        string kekStateInstance2 = ((string)kekStateValue2);
                                        rolloverEncryptionDetailsInstance.KekState = kekStateInstance2;
                                    }
                                    
                                    JToken kekCertThumbprintValue2 = rolloverEncryptionDetailsValue["kekCertThumbprint"];
                                    if (kekCertThumbprintValue2 != null && kekCertThumbprintValue2.Type != JTokenType.Null)
                                    {
                                        string kekCertThumbprintInstance2 = ((string)kekCertThumbprintValue2);
                                        rolloverEncryptionDetailsInstance.KekCertThumbprint = kekCertThumbprintInstance2;
                                    }
                                    
                                    JToken kekCertExpiryDateValue2 = rolloverEncryptionDetailsValue["kekCertExpiryDate"];
                                    if (kekCertExpiryDateValue2 != null && kekCertExpiryDateValue2.Type != JTokenType.Null)
                                    {
                                        DateTime kekCertExpiryDateInstance2 = ((DateTime)kekCertExpiryDateValue2);
                                        rolloverEncryptionDetailsInstance.KekCertExpiryDate = kekCertExpiryDateInstance2;
                                    }
                                }
                                
                                JToken customDetailsValue = propertiesValue["customDetails"];
                                if (customDetailsValue != null && customDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)customDetailsValue["instanceType"]);
                                    if (typeName == "VMM")
                                    {
                                        VmmDetails vmmDetailsInstance = new VmmDetails();
                                        
                                        JToken instanceTypeValue = customDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            vmmDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.CustomDetails = vmmDetailsInstance;
                                    }
                                    if (typeName == "HyperVSite")
                                    {
                                        HyperVSiteDetails hyperVSiteDetailsInstance = new HyperVSiteDetails();
                                        
                                        JToken instanceTypeValue2 = customDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            hyperVSiteDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.CustomDetails = hyperVSiteDetailsInstance;
                                    }
                                    if (typeName == "VMware")
                                    {
                                        VMwareFabricDetails vMwareFabricDetailsInstance = new VMwareFabricDetails();
                                        
                                        JToken processServersArray = customDetailsValue["processServers"];
                                        if (processServersArray != null && processServersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken processServersValue in ((JArray)processServersArray))
                                            {
                                                ProcessServer processServerInstance = new ProcessServer();
                                                vMwareFabricDetailsInstance.ProcessServers.Add(processServerInstance);
                                                
                                                JToken friendlyNameValue2 = processServersValue["friendlyName"];
                                                if (friendlyNameValue2 != null && friendlyNameValue2.Type != JTokenType.Null)
                                                {
                                                    string friendlyNameInstance2 = ((string)friendlyNameValue2);
                                                    processServerInstance.FriendlyName = friendlyNameInstance2;
                                                }
                                                
                                                JToken idValue = processServersValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    processServerInstance.Id = idInstance;
                                                }
                                                
                                                JToken ipAddressValue = processServersValue["ipAddress"];
                                                if (ipAddressValue != null && ipAddressValue.Type != JTokenType.Null)
                                                {
                                                    string ipAddressInstance = ((string)ipAddressValue);
                                                    processServerInstance.IpAddress = ipAddressInstance;
                                                }
                                                
                                                JToken osTypeValue = processServersValue["osType"];
                                                if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance = ((string)osTypeValue);
                                                    processServerInstance.OsType = osTypeInstance;
                                                }
                                                
                                                JToken agentVersionValue = processServersValue["agentVersion"];
                                                if (agentVersionValue != null && agentVersionValue.Type != JTokenType.Null)
                                                {
                                                    string agentVersionInstance = ((string)agentVersionValue);
                                                    processServerInstance.AgentVersion = agentVersionInstance;
                                                }
                                                
                                                JToken lastHeartbeatValue = processServersValue["lastHeartbeat"];
                                                if (lastHeartbeatValue != null && lastHeartbeatValue.Type != JTokenType.Null)
                                                {
                                                    DateTime lastHeartbeatInstance = ((DateTime)lastHeartbeatValue);
                                                    processServerInstance.LastHeartbeat = lastHeartbeatInstance;
                                                }
                                                
                                                JToken versionStatusValue = processServersValue["versionStatus"];
                                                if (versionStatusValue != null && versionStatusValue.Type != JTokenType.Null)
                                                {
                                                    string versionStatusInstance = ((string)versionStatusValue);
                                                    processServerInstance.VersionStatus = versionStatusInstance;
                                                }
                                                
                                                JToken mobilityServiceUpdatesArray = processServersValue["mobilityServiceUpdates"];
                                                if (mobilityServiceUpdatesArray != null && mobilityServiceUpdatesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken mobilityServiceUpdatesValue in ((JArray)mobilityServiceUpdatesArray))
                                                    {
                                                        MobilityServiceUpdate mobilityServiceUpdateInstance = new MobilityServiceUpdate();
                                                        processServerInstance.Updates.Add(mobilityServiceUpdateInstance);
                                                        
                                                        JToken versionValue = mobilityServiceUpdatesValue["version"];
                                                        if (versionValue != null && versionValue.Type != JTokenType.Null)
                                                        {
                                                            string versionInstance = ((string)versionValue);
                                                            mobilityServiceUpdateInstance.Version = versionInstance;
                                                        }
                                                        
                                                        JToken rebootStatusValue = mobilityServiceUpdatesValue["rebootStatus"];
                                                        if (rebootStatusValue != null && rebootStatusValue.Type != JTokenType.Null)
                                                        {
                                                            string rebootStatusInstance = ((string)rebootStatusValue);
                                                            mobilityServiceUpdateInstance.RebootStatus = rebootStatusInstance;
                                                        }
                                                        
                                                        JToken osTypeValue2 = mobilityServiceUpdatesValue["osType"];
                                                        if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string osTypeInstance2 = ((string)osTypeValue2);
                                                            mobilityServiceUpdateInstance.OsType = osTypeInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                JToken hostIdValue = processServersValue["hostId"];
                                                if (hostIdValue != null && hostIdValue.Type != JTokenType.Null)
                                                {
                                                    string hostIdInstance = ((string)hostIdValue);
                                                    processServerInstance.HostId = hostIdInstance;
                                                }
                                                
                                                JToken machineCountValue = processServersValue["machineCount"];
                                                if (machineCountValue != null && machineCountValue.Type != JTokenType.Null)
                                                {
                                                    string machineCountInstance = ((string)machineCountValue);
                                                    processServerInstance.ServerCount = machineCountInstance;
                                                }
                                                
                                                JToken replicationPairCountValue = processServersValue["replicationPairCount"];
                                                if (replicationPairCountValue != null && replicationPairCountValue.Type != JTokenType.Null)
                                                {
                                                    string replicationPairCountInstance = ((string)replicationPairCountValue);
                                                    processServerInstance.ReplicationPairCount = replicationPairCountInstance;
                                                }
                                                
                                                JToken systemLoadValue = processServersValue["systemLoad"];
                                                if (systemLoadValue != null && systemLoadValue.Type != JTokenType.Null)
                                                {
                                                    string systemLoadInstance = ((string)systemLoadValue);
                                                    processServerInstance.SystemLoad = systemLoadInstance;
                                                }
                                                
                                                JToken systemLoadStatusValue = processServersValue["systemLoadStatus"];
                                                if (systemLoadStatusValue != null && systemLoadStatusValue.Type != JTokenType.Null)
                                                {
                                                    string systemLoadStatusInstance = ((string)systemLoadStatusValue);
                                                    processServerInstance.SystemLoadStatus = systemLoadStatusInstance;
                                                }
                                                
                                                JToken cpuLoadValue = processServersValue["cpuLoad"];
                                                if (cpuLoadValue != null && cpuLoadValue.Type != JTokenType.Null)
                                                {
                                                    string cpuLoadInstance = ((string)cpuLoadValue);
                                                    processServerInstance.CpuLoad = cpuLoadInstance;
                                                }
                                                
                                                JToken cpuLoadStatusValue = processServersValue["cpuLoadStatus"];
                                                if (cpuLoadStatusValue != null && cpuLoadStatusValue.Type != JTokenType.Null)
                                                {
                                                    string cpuLoadStatusInstance = ((string)cpuLoadStatusValue);
                                                    processServerInstance.CpuLoadStatus = cpuLoadStatusInstance;
                                                }
                                                
                                                JToken totalMemoryInBytesValue = processServersValue["totalMemoryInBytes"];
                                                if (totalMemoryInBytesValue != null && totalMemoryInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long totalMemoryInBytesInstance = ((long)totalMemoryInBytesValue);
                                                    processServerInstance.TotalMemoryInBytes = totalMemoryInBytesInstance;
                                                }
                                                
                                                JToken availableMemoryInBytesValue = processServersValue["availableMemoryInBytes"];
                                                if (availableMemoryInBytesValue != null && availableMemoryInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long availableMemoryInBytesInstance = ((long)availableMemoryInBytesValue);
                                                    processServerInstance.AvailableMemoryInBytes = availableMemoryInBytesInstance;
                                                }
                                                
                                                JToken memoryUsageStatusValue = processServersValue["memoryUsageStatus"];
                                                if (memoryUsageStatusValue != null && memoryUsageStatusValue.Type != JTokenType.Null)
                                                {
                                                    string memoryUsageStatusInstance = ((string)memoryUsageStatusValue);
                                                    processServerInstance.MemoryUsageStatus = memoryUsageStatusInstance;
                                                }
                                                
                                                JToken totalSpaceInBytesValue = processServersValue["totalSpaceInBytes"];
                                                if (totalSpaceInBytesValue != null && totalSpaceInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long totalSpaceInBytesInstance = ((long)totalSpaceInBytesValue);
                                                    processServerInstance.TotalSpaceInBytes = totalSpaceInBytesInstance;
                                                }
                                                
                                                JToken availableSpaceInBytesValue = processServersValue["availableSpaceInBytes"];
                                                if (availableSpaceInBytesValue != null && availableSpaceInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long availableSpaceInBytesInstance = ((long)availableSpaceInBytesValue);
                                                    processServerInstance.AvailableSpaceInBytes = availableSpaceInBytesInstance;
                                                }
                                                
                                                JToken spaceUsageStatusValue = processServersValue["spaceUsageStatus"];
                                                if (spaceUsageStatusValue != null && spaceUsageStatusValue.Type != JTokenType.Null)
                                                {
                                                    string spaceUsageStatusInstance = ((string)spaceUsageStatusValue);
                                                    processServerInstance.SpaceUsageStatus = spaceUsageStatusInstance;
                                                }
                                                
                                                JToken psServiceStatusValue = processServersValue["psServiceStatus"];
                                                if (psServiceStatusValue != null && psServiceStatusValue.Type != JTokenType.Null)
                                                {
                                                    string psServiceStatusInstance = ((string)psServiceStatusValue);
                                                    processServerInstance.PsServiceStatus = psServiceStatusInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken masterTargetServersArray = customDetailsValue["masterTargetServers"];
                                        if (masterTargetServersArray != null && masterTargetServersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken masterTargetServersValue in ((JArray)masterTargetServersArray))
                                            {
                                                MasterTargetServer masterTargetServerInstance = new MasterTargetServer();
                                                vMwareFabricDetailsInstance.MasterTargetServers.Add(masterTargetServerInstance);
                                                
                                                JToken idValue2 = masterTargetServersValue["id"];
                                                if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                {
                                                    string idInstance2 = ((string)idValue2);
                                                    masterTargetServerInstance.Id = idInstance2;
                                                }
                                                
                                                JToken ipAddressValue2 = masterTargetServersValue["ipAddress"];
                                                if (ipAddressValue2 != null && ipAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string ipAddressInstance2 = ((string)ipAddressValue2);
                                                    masterTargetServerInstance.IpAddress = ipAddressInstance2;
                                                }
                                                
                                                JToken nameValue = masterTargetServersValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    masterTargetServerInstance.Name = nameInstance;
                                                }
                                                
                                                JToken osTypeValue3 = masterTargetServersValue["osType"];
                                                if (osTypeValue3 != null && osTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance3 = ((string)osTypeValue3);
                                                    masterTargetServerInstance.OsType = osTypeInstance3;
                                                }
                                                
                                                JToken agentVersionValue2 = masterTargetServersValue["agentVersion"];
                                                if (agentVersionValue2 != null && agentVersionValue2.Type != JTokenType.Null)
                                                {
                                                    string agentVersionInstance2 = ((string)agentVersionValue2);
                                                    masterTargetServerInstance.AgentVersion = agentVersionInstance2;
                                                }
                                                
                                                JToken lastHeartbeatValue2 = masterTargetServersValue["lastHeartbeat"];
                                                if (lastHeartbeatValue2 != null && lastHeartbeatValue2.Type != JTokenType.Null)
                                                {
                                                    DateTime lastHeartbeatInstance2 = ((DateTime)lastHeartbeatValue2);
                                                    masterTargetServerInstance.LastHeartbeat = lastHeartbeatInstance2;
                                                }
                                                
                                                JToken versionStatusValue2 = masterTargetServersValue["versionStatus"];
                                                if (versionStatusValue2 != null && versionStatusValue2.Type != JTokenType.Null)
                                                {
                                                    string versionStatusInstance2 = ((string)versionStatusValue2);
                                                    masterTargetServerInstance.VersionStatus = versionStatusInstance2;
                                                }
                                                
                                                JToken retentionVolumesArray = masterTargetServersValue["retentionVolumes"];
                                                if (retentionVolumesArray != null && retentionVolumesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken retentionVolumesValue in ((JArray)retentionVolumesArray))
                                                    {
                                                        RetentionVolume retentionVolumeInstance = new RetentionVolume();
                                                        masterTargetServerInstance.RetentionVolumes.Add(retentionVolumeInstance);
                                                        
                                                        JToken volumeNameValue = retentionVolumesValue["volumeName"];
                                                        if (volumeNameValue != null && volumeNameValue.Type != JTokenType.Null)
                                                        {
                                                            string volumeNameInstance = ((string)volumeNameValue);
                                                            retentionVolumeInstance.VolumeName = volumeNameInstance;
                                                        }
                                                        
                                                        JToken capacityInBytesValue = retentionVolumesValue["capacityInBytes"];
                                                        if (capacityInBytesValue != null && capacityInBytesValue.Type != JTokenType.Null)
                                                        {
                                                            long capacityInBytesInstance = ((long)capacityInBytesValue);
                                                            retentionVolumeInstance.CapacityInBytes = capacityInBytesInstance;
                                                        }
                                                        
                                                        JToken freeSpaceInBytesValue = retentionVolumesValue["freeSpaceInBytes"];
                                                        if (freeSpaceInBytesValue != null && freeSpaceInBytesValue.Type != JTokenType.Null)
                                                        {
                                                            long freeSpaceInBytesInstance = ((long)freeSpaceInBytesValue);
                                                            retentionVolumeInstance.FreeSpaceInBytes = freeSpaceInBytesInstance;
                                                        }
                                                        
                                                        JToken thresholdPercentageValue = retentionVolumesValue["thresholdPercentage"];
                                                        if (thresholdPercentageValue != null && thresholdPercentageValue.Type != JTokenType.Null)
                                                        {
                                                            int thresholdPercentageInstance = ((int)thresholdPercentageValue);
                                                            retentionVolumeInstance.ThresholdPercentage = thresholdPercentageInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken dataStoresArray = masterTargetServersValue["dataStores"];
                                                if (dataStoresArray != null && dataStoresArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken dataStoresValue in ((JArray)dataStoresArray))
                                                    {
                                                        DataStore dataStoreInstance = new DataStore();
                                                        masterTargetServerInstance.DataStores.Add(dataStoreInstance);
                                                        
                                                        JToken symbolicNameValue = dataStoresValue["symbolicName"];
                                                        if (symbolicNameValue != null && symbolicNameValue.Type != JTokenType.Null)
                                                        {
                                                            string symbolicNameInstance = ((string)symbolicNameValue);
                                                            dataStoreInstance.SymbolicName = symbolicNameInstance;
                                                        }
                                                        
                                                        JToken uuidValue = dataStoresValue["uuid"];
                                                        if (uuidValue != null && uuidValue.Type != JTokenType.Null)
                                                        {
                                                            string uuidInstance = ((string)uuidValue);
                                                            dataStoreInstance.Uuid = uuidInstance;
                                                        }
                                                        
                                                        JToken capacityValue = dataStoresValue["capacity"];
                                                        if (capacityValue != null && capacityValue.Type != JTokenType.Null)
                                                        {
                                                            string capacityInstance = ((string)capacityValue);
                                                            dataStoreInstance.Capacity = capacityInstance;
                                                        }
                                                        
                                                        JToken freeSpaceValue = dataStoresValue["freeSpace"];
                                                        if (freeSpaceValue != null && freeSpaceValue.Type != JTokenType.Null)
                                                        {
                                                            string freeSpaceInstance = ((string)freeSpaceValue);
                                                            dataStoreInstance.FreeSpace = freeSpaceInstance;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken runAsAccountsArray = customDetailsValue["runAsAccounts"];
                                        if (runAsAccountsArray != null && runAsAccountsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken runAsAccountsValue in ((JArray)runAsAccountsArray))
                                            {
                                                RunAsAccount runAsAccountInstance = new RunAsAccount();
                                                vMwareFabricDetailsInstance.RunAsAccounts.Add(runAsAccountInstance);
                                                
                                                JToken accountIdValue = runAsAccountsValue["accountId"];
                                                if (accountIdValue != null && accountIdValue.Type != JTokenType.Null)
                                                {
                                                    string accountIdInstance = ((string)accountIdValue);
                                                    runAsAccountInstance.AccountId = accountIdInstance;
                                                }
                                                
                                                JToken accountNameValue = runAsAccountsValue["accountName"];
                                                if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                {
                                                    string accountNameInstance = ((string)accountNameValue);
                                                    runAsAccountInstance.AccountName = accountNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken replicationPairCountValue2 = customDetailsValue["replicationPairCount"];
                                        if (replicationPairCountValue2 != null && replicationPairCountValue2.Type != JTokenType.Null)
                                        {
                                            string replicationPairCountInstance2 = ((string)replicationPairCountValue2);
                                            vMwareFabricDetailsInstance.ReplicationPairCount = replicationPairCountInstance2;
                                        }
                                        
                                        JToken processServerCountValue = customDetailsValue["processServerCount"];
                                        if (processServerCountValue != null && processServerCountValue.Type != JTokenType.Null)
                                        {
                                            string processServerCountInstance = ((string)processServerCountValue);
                                            vMwareFabricDetailsInstance.ProcessServerCount = processServerCountInstance;
                                        }
                                        
                                        JToken agentCountValue = customDetailsValue["agentCount"];
                                        if (agentCountValue != null && agentCountValue.Type != JTokenType.Null)
                                        {
                                            string agentCountInstance = ((string)agentCountValue);
                                            vMwareFabricDetailsInstance.AgentCount = agentCountInstance;
                                        }
                                        
                                        JToken protectedServersValue = customDetailsValue["protectedServers"];
                                        if (protectedServersValue != null && protectedServersValue.Type != JTokenType.Null)
                                        {
                                            string protectedServersInstance = ((string)protectedServersValue);
                                            vMwareFabricDetailsInstance.ProtectedServers = protectedServersInstance;
                                        }
                                        
                                        JToken systemLoadValue2 = customDetailsValue["systemLoad"];
                                        if (systemLoadValue2 != null && systemLoadValue2.Type != JTokenType.Null)
                                        {
                                            string systemLoadInstance2 = ((string)systemLoadValue2);
                                            vMwareFabricDetailsInstance.SystemLoad = systemLoadInstance2;
                                        }
                                        
                                        JToken systemLoadStatusValue2 = customDetailsValue["systemLoadStatus"];
                                        if (systemLoadStatusValue2 != null && systemLoadStatusValue2.Type != JTokenType.Null)
                                        {
                                            string systemLoadStatusInstance2 = ((string)systemLoadStatusValue2);
                                            vMwareFabricDetailsInstance.SystemLoadStatus = systemLoadStatusInstance2;
                                        }
                                        
                                        JToken cpuLoadValue2 = customDetailsValue["cpuLoad"];
                                        if (cpuLoadValue2 != null && cpuLoadValue2.Type != JTokenType.Null)
                                        {
                                            string cpuLoadInstance2 = ((string)cpuLoadValue2);
                                            vMwareFabricDetailsInstance.CpuLoad = cpuLoadInstance2;
                                        }
                                        
                                        JToken cpuLoadStatusValue2 = customDetailsValue["cpuLoadStatus"];
                                        if (cpuLoadStatusValue2 != null && cpuLoadStatusValue2.Type != JTokenType.Null)
                                        {
                                            string cpuLoadStatusInstance2 = ((string)cpuLoadStatusValue2);
                                            vMwareFabricDetailsInstance.CpuLoadStatus = cpuLoadStatusInstance2;
                                        }
                                        
                                        JToken totalMemoryInBytesValue2 = customDetailsValue["totalMemoryInBytes"];
                                        if (totalMemoryInBytesValue2 != null && totalMemoryInBytesValue2.Type != JTokenType.Null)
                                        {
                                            long totalMemoryInBytesInstance2 = ((long)totalMemoryInBytesValue2);
                                            vMwareFabricDetailsInstance.TotalMemoryInBytes = totalMemoryInBytesInstance2;
                                        }
                                        
                                        JToken availableMemoryInBytesValue2 = customDetailsValue["availableMemoryInBytes"];
                                        if (availableMemoryInBytesValue2 != null && availableMemoryInBytesValue2.Type != JTokenType.Null)
                                        {
                                            long availableMemoryInBytesInstance2 = ((long)availableMemoryInBytesValue2);
                                            vMwareFabricDetailsInstance.AvailableMemoryInBytes = availableMemoryInBytesInstance2;
                                        }
                                        
                                        JToken memoryUsageStatusValue2 = customDetailsValue["memoryUsageStatus"];
                                        if (memoryUsageStatusValue2 != null && memoryUsageStatusValue2.Type != JTokenType.Null)
                                        {
                                            string memoryUsageStatusInstance2 = ((string)memoryUsageStatusValue2);
                                            vMwareFabricDetailsInstance.MemoryUsageStatus = memoryUsageStatusInstance2;
                                        }
                                        
                                        JToken totalSpaceInBytesValue2 = customDetailsValue["totalSpaceInBytes"];
                                        if (totalSpaceInBytesValue2 != null && totalSpaceInBytesValue2.Type != JTokenType.Null)
                                        {
                                            long totalSpaceInBytesInstance2 = ((long)totalSpaceInBytesValue2);
                                            vMwareFabricDetailsInstance.TotalSpaceInBytes = totalSpaceInBytesInstance2;
                                        }
                                        
                                        JToken availableSpaceInBytesValue2 = customDetailsValue["availableSpaceInBytes"];
                                        if (availableSpaceInBytesValue2 != null && availableSpaceInBytesValue2.Type != JTokenType.Null)
                                        {
                                            long availableSpaceInBytesInstance2 = ((long)availableSpaceInBytesValue2);
                                            vMwareFabricDetailsInstance.AvailableSpaceInBytes = availableSpaceInBytesInstance2;
                                        }
                                        
                                        JToken spaceUsageStatusValue2 = customDetailsValue["spaceUsageStatus"];
                                        if (spaceUsageStatusValue2 != null && spaceUsageStatusValue2.Type != JTokenType.Null)
                                        {
                                            string spaceUsageStatusInstance2 = ((string)spaceUsageStatusValue2);
                                            vMwareFabricDetailsInstance.SpaceUsageStatus = spaceUsageStatusInstance2;
                                        }
                                        
                                        JToken webLoadValue = customDetailsValue["webLoad"];
                                        if (webLoadValue != null && webLoadValue.Type != JTokenType.Null)
                                        {
                                            string webLoadInstance = ((string)webLoadValue);
                                            vMwareFabricDetailsInstance.WebLoad = webLoadInstance;
                                        }
                                        
                                        JToken webLoadStatusValue = customDetailsValue["webLoadStatus"];
                                        if (webLoadStatusValue != null && webLoadStatusValue.Type != JTokenType.Null)
                                        {
                                            string webLoadStatusInstance = ((string)webLoadStatusValue);
                                            vMwareFabricDetailsInstance.WebLoadStatus = webLoadStatusInstance;
                                        }
                                        
                                        JToken databaseServerLoadValue = customDetailsValue["databaseServerLoad"];
                                        if (databaseServerLoadValue != null && databaseServerLoadValue.Type != JTokenType.Null)
                                        {
                                            string databaseServerLoadInstance = ((string)databaseServerLoadValue);
                                            vMwareFabricDetailsInstance.DatabaseServerLoad = databaseServerLoadInstance;
                                        }
                                        
                                        JToken databaseServerLoadStatusValue = customDetailsValue["databaseServerLoadStatus"];
                                        if (databaseServerLoadStatusValue != null && databaseServerLoadStatusValue.Type != JTokenType.Null)
                                        {
                                            string databaseServerLoadStatusInstance = ((string)databaseServerLoadStatusValue);
                                            vMwareFabricDetailsInstance.DatabaseServerLoadStatus = databaseServerLoadStatusInstance;
                                        }
                                        
                                        JToken csServiceStatusValue = customDetailsValue["csServiceStatus"];
                                        if (csServiceStatusValue != null && csServiceStatusValue.Type != JTokenType.Null)
                                        {
                                            string csServiceStatusInstance = ((string)csServiceStatusValue);
                                            vMwareFabricDetailsInstance.CsServiceStatus = csServiceStatusInstance;
                                        }
                                        
                                        JToken ipAddressValue3 = customDetailsValue["ipAddress"];
                                        if (ipAddressValue3 != null && ipAddressValue3.Type != JTokenType.Null)
                                        {
                                            string ipAddressInstance3 = ((string)ipAddressValue3);
                                            vMwareFabricDetailsInstance.IpAddress = ipAddressInstance3;
                                        }
                                        
                                        JToken agentVersionValue3 = customDetailsValue["agentVersion"];
                                        if (agentVersionValue3 != null && agentVersionValue3.Type != JTokenType.Null)
                                        {
                                            string agentVersionInstance3 = ((string)agentVersionValue3);
                                            vMwareFabricDetailsInstance.AgentVersion = agentVersionInstance3;
                                        }
                                        
                                        JToken hostNameValue = customDetailsValue["hostName"];
                                        if (hostNameValue != null && hostNameValue.Type != JTokenType.Null)
                                        {
                                            string hostNameInstance = ((string)hostNameValue);
                                            vMwareFabricDetailsInstance.HostName = hostNameInstance;
                                        }
                                        
                                        JToken lastHeartbeatValue3 = customDetailsValue["lastHeartbeat"];
                                        if (lastHeartbeatValue3 != null && lastHeartbeatValue3.Type != JTokenType.Null)
                                        {
                                            DateTime lastHeartbeatInstance3 = ((DateTime)lastHeartbeatValue3);
                                            vMwareFabricDetailsInstance.LastHeartbeat = lastHeartbeatInstance3;
                                        }
                                        
                                        JToken versionStatusValue3 = customDetailsValue["versionStatus"];
                                        if (versionStatusValue3 != null && versionStatusValue3.Type != JTokenType.Null)
                                        {
                                            string versionStatusInstance3 = ((string)versionStatusValue3);
                                            vMwareFabricDetailsInstance.VersionStatus = versionStatusInstance3;
                                        }
                                        
                                        JToken instanceTypeValue3 = customDetailsValue["instanceType"];
                                        if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                            vMwareFabricDetailsInstance.InstanceType = instanceTypeInstance3;
                                        }
                                        propertiesInstance.CustomDetails = vMwareFabricDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue3 = responseDoc["id"];
                            if (idValue3 != null && idValue3.Type != JTokenType.Null)
                            {
                                string idInstance3 = ((string)idValue3);
                                fabricInstance.Id = idInstance3;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                fabricInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                fabricInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                fabricInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    fabricInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the list of all fabrics under the vault.
        /// </summary>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list servers operation.
        /// </returns>
        public async Task<FabricListResponse> ListAsync(CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FabricListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FabricListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Fabric fabricInstance = new Fabric();
                                    result.Fabrics.Add(fabricInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        FabricProperties propertiesInstance = new FabricProperties();
                                        fabricInstance.Properties = propertiesInstance;
                                        
                                        JToken friendlyNameValue = propertiesValue["friendlyName"];
                                        if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string friendlyNameInstance = ((string)friendlyNameValue);
                                            propertiesInstance.FriendlyName = friendlyNameInstance;
                                        }
                                        
                                        JToken internalIdentifierValue = propertiesValue["internalIdentifier"];
                                        if (internalIdentifierValue != null && internalIdentifierValue.Type != JTokenType.Null)
                                        {
                                            string internalIdentifierInstance = ((string)internalIdentifierValue);
                                            propertiesInstance.InternalIdentifier = internalIdentifierInstance;
                                        }
                                        
                                        JToken encryptionDetailsValue = propertiesValue["encryptionDetails"];
                                        if (encryptionDetailsValue != null && encryptionDetailsValue.Type != JTokenType.Null)
                                        {
                                            EncryptionDetails encryptionDetailsInstance = new EncryptionDetails();
                                            propertiesInstance.EncryptionDetails = encryptionDetailsInstance;
                                            
                                            JToken kekStateValue = encryptionDetailsValue["kekState"];
                                            if (kekStateValue != null && kekStateValue.Type != JTokenType.Null)
                                            {
                                                string kekStateInstance = ((string)kekStateValue);
                                                encryptionDetailsInstance.KekState = kekStateInstance;
                                            }
                                            
                                            JToken kekCertThumbprintValue = encryptionDetailsValue["kekCertThumbprint"];
                                            if (kekCertThumbprintValue != null && kekCertThumbprintValue.Type != JTokenType.Null)
                                            {
                                                string kekCertThumbprintInstance = ((string)kekCertThumbprintValue);
                                                encryptionDetailsInstance.KekCertThumbprint = kekCertThumbprintInstance;
                                            }
                                            
                                            JToken kekCertExpiryDateValue = encryptionDetailsValue["kekCertExpiryDate"];
                                            if (kekCertExpiryDateValue != null && kekCertExpiryDateValue.Type != JTokenType.Null)
                                            {
                                                DateTime kekCertExpiryDateInstance = ((DateTime)kekCertExpiryDateValue);
                                                encryptionDetailsInstance.KekCertExpiryDate = kekCertExpiryDateInstance;
                                            }
                                        }
                                        
                                        JToken rolloverEncryptionDetailsValue = propertiesValue["rolloverEncryptionDetails"];
                                        if (rolloverEncryptionDetailsValue != null && rolloverEncryptionDetailsValue.Type != JTokenType.Null)
                                        {
                                            EncryptionDetails rolloverEncryptionDetailsInstance = new EncryptionDetails();
                                            propertiesInstance.RolloverEncryptionDetails = rolloverEncryptionDetailsInstance;
                                            
                                            JToken kekStateValue2 = rolloverEncryptionDetailsValue["kekState"];
                                            if (kekStateValue2 != null && kekStateValue2.Type != JTokenType.Null)
                                            {
                                                string kekStateInstance2 = ((string)kekStateValue2);
                                                rolloverEncryptionDetailsInstance.KekState = kekStateInstance2;
                                            }
                                            
                                            JToken kekCertThumbprintValue2 = rolloverEncryptionDetailsValue["kekCertThumbprint"];
                                            if (kekCertThumbprintValue2 != null && kekCertThumbprintValue2.Type != JTokenType.Null)
                                            {
                                                string kekCertThumbprintInstance2 = ((string)kekCertThumbprintValue2);
                                                rolloverEncryptionDetailsInstance.KekCertThumbprint = kekCertThumbprintInstance2;
                                            }
                                            
                                            JToken kekCertExpiryDateValue2 = rolloverEncryptionDetailsValue["kekCertExpiryDate"];
                                            if (kekCertExpiryDateValue2 != null && kekCertExpiryDateValue2.Type != JTokenType.Null)
                                            {
                                                DateTime kekCertExpiryDateInstance2 = ((DateTime)kekCertExpiryDateValue2);
                                                rolloverEncryptionDetailsInstance.KekCertExpiryDate = kekCertExpiryDateInstance2;
                                            }
                                        }
                                        
                                        JToken customDetailsValue = propertiesValue["customDetails"];
                                        if (customDetailsValue != null && customDetailsValue.Type != JTokenType.Null)
                                        {
                                            string typeName = ((string)customDetailsValue["instanceType"]);
                                            if (typeName == "VMM")
                                            {
                                                VmmDetails vmmDetailsInstance = new VmmDetails();
                                                
                                                JToken instanceTypeValue = customDetailsValue["instanceType"];
                                                if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance = ((string)instanceTypeValue);
                                                    vmmDetailsInstance.InstanceType = instanceTypeInstance;
                                                }
                                                propertiesInstance.CustomDetails = vmmDetailsInstance;
                                            }
                                            if (typeName == "HyperVSite")
                                            {
                                                HyperVSiteDetails hyperVSiteDetailsInstance = new HyperVSiteDetails();
                                                
                                                JToken instanceTypeValue2 = customDetailsValue["instanceType"];
                                                if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                                    hyperVSiteDetailsInstance.InstanceType = instanceTypeInstance2;
                                                }
                                                propertiesInstance.CustomDetails = hyperVSiteDetailsInstance;
                                            }
                                            if (typeName == "VMware")
                                            {
                                                VMwareFabricDetails vMwareFabricDetailsInstance = new VMwareFabricDetails();
                                                
                                                JToken processServersArray = customDetailsValue["processServers"];
                                                if (processServersArray != null && processServersArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken processServersValue in ((JArray)processServersArray))
                                                    {
                                                        ProcessServer processServerInstance = new ProcessServer();
                                                        vMwareFabricDetailsInstance.ProcessServers.Add(processServerInstance);
                                                        
                                                        JToken friendlyNameValue2 = processServersValue["friendlyName"];
                                                        if (friendlyNameValue2 != null && friendlyNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string friendlyNameInstance2 = ((string)friendlyNameValue2);
                                                            processServerInstance.FriendlyName = friendlyNameInstance2;
                                                        }
                                                        
                                                        JToken idValue = processServersValue["id"];
                                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                                        {
                                                            string idInstance = ((string)idValue);
                                                            processServerInstance.Id = idInstance;
                                                        }
                                                        
                                                        JToken ipAddressValue = processServersValue["ipAddress"];
                                                        if (ipAddressValue != null && ipAddressValue.Type != JTokenType.Null)
                                                        {
                                                            string ipAddressInstance = ((string)ipAddressValue);
                                                            processServerInstance.IpAddress = ipAddressInstance;
                                                        }
                                                        
                                                        JToken osTypeValue = processServersValue["osType"];
                                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string osTypeInstance = ((string)osTypeValue);
                                                            processServerInstance.OsType = osTypeInstance;
                                                        }
                                                        
                                                        JToken agentVersionValue = processServersValue["agentVersion"];
                                                        if (agentVersionValue != null && agentVersionValue.Type != JTokenType.Null)
                                                        {
                                                            string agentVersionInstance = ((string)agentVersionValue);
                                                            processServerInstance.AgentVersion = agentVersionInstance;
                                                        }
                                                        
                                                        JToken lastHeartbeatValue = processServersValue["lastHeartbeat"];
                                                        if (lastHeartbeatValue != null && lastHeartbeatValue.Type != JTokenType.Null)
                                                        {
                                                            DateTime lastHeartbeatInstance = ((DateTime)lastHeartbeatValue);
                                                            processServerInstance.LastHeartbeat = lastHeartbeatInstance;
                                                        }
                                                        
                                                        JToken versionStatusValue = processServersValue["versionStatus"];
                                                        if (versionStatusValue != null && versionStatusValue.Type != JTokenType.Null)
                                                        {
                                                            string versionStatusInstance = ((string)versionStatusValue);
                                                            processServerInstance.VersionStatus = versionStatusInstance;
                                                        }
                                                        
                                                        JToken mobilityServiceUpdatesArray = processServersValue["mobilityServiceUpdates"];
                                                        if (mobilityServiceUpdatesArray != null && mobilityServiceUpdatesArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken mobilityServiceUpdatesValue in ((JArray)mobilityServiceUpdatesArray))
                                                            {
                                                                MobilityServiceUpdate mobilityServiceUpdateInstance = new MobilityServiceUpdate();
                                                                processServerInstance.Updates.Add(mobilityServiceUpdateInstance);
                                                                
                                                                JToken versionValue = mobilityServiceUpdatesValue["version"];
                                                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                                                {
                                                                    string versionInstance = ((string)versionValue);
                                                                    mobilityServiceUpdateInstance.Version = versionInstance;
                                                                }
                                                                
                                                                JToken rebootStatusValue = mobilityServiceUpdatesValue["rebootStatus"];
                                                                if (rebootStatusValue != null && rebootStatusValue.Type != JTokenType.Null)
                                                                {
                                                                    string rebootStatusInstance = ((string)rebootStatusValue);
                                                                    mobilityServiceUpdateInstance.RebootStatus = rebootStatusInstance;
                                                                }
                                                                
                                                                JToken osTypeValue2 = mobilityServiceUpdatesValue["osType"];
                                                                if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                                                {
                                                                    string osTypeInstance2 = ((string)osTypeValue2);
                                                                    mobilityServiceUpdateInstance.OsType = osTypeInstance2;
                                                                }
                                                            }
                                                        }
                                                        
                                                        JToken hostIdValue = processServersValue["hostId"];
                                                        if (hostIdValue != null && hostIdValue.Type != JTokenType.Null)
                                                        {
                                                            string hostIdInstance = ((string)hostIdValue);
                                                            processServerInstance.HostId = hostIdInstance;
                                                        }
                                                        
                                                        JToken machineCountValue = processServersValue["machineCount"];
                                                        if (machineCountValue != null && machineCountValue.Type != JTokenType.Null)
                                                        {
                                                            string machineCountInstance = ((string)machineCountValue);
                                                            processServerInstance.ServerCount = machineCountInstance;
                                                        }
                                                        
                                                        JToken replicationPairCountValue = processServersValue["replicationPairCount"];
                                                        if (replicationPairCountValue != null && replicationPairCountValue.Type != JTokenType.Null)
                                                        {
                                                            string replicationPairCountInstance = ((string)replicationPairCountValue);
                                                            processServerInstance.ReplicationPairCount = replicationPairCountInstance;
                                                        }
                                                        
                                                        JToken systemLoadValue = processServersValue["systemLoad"];
                                                        if (systemLoadValue != null && systemLoadValue.Type != JTokenType.Null)
                                                        {
                                                            string systemLoadInstance = ((string)systemLoadValue);
                                                            processServerInstance.SystemLoad = systemLoadInstance;
                                                        }
                                                        
                                                        JToken systemLoadStatusValue = processServersValue["systemLoadStatus"];
                                                        if (systemLoadStatusValue != null && systemLoadStatusValue.Type != JTokenType.Null)
                                                        {
                                                            string systemLoadStatusInstance = ((string)systemLoadStatusValue);
                                                            processServerInstance.SystemLoadStatus = systemLoadStatusInstance;
                                                        }
                                                        
                                                        JToken cpuLoadValue = processServersValue["cpuLoad"];
                                                        if (cpuLoadValue != null && cpuLoadValue.Type != JTokenType.Null)
                                                        {
                                                            string cpuLoadInstance = ((string)cpuLoadValue);
                                                            processServerInstance.CpuLoad = cpuLoadInstance;
                                                        }
                                                        
                                                        JToken cpuLoadStatusValue = processServersValue["cpuLoadStatus"];
                                                        if (cpuLoadStatusValue != null && cpuLoadStatusValue.Type != JTokenType.Null)
                                                        {
                                                            string cpuLoadStatusInstance = ((string)cpuLoadStatusValue);
                                                            processServerInstance.CpuLoadStatus = cpuLoadStatusInstance;
                                                        }
                                                        
                                                        JToken totalMemoryInBytesValue = processServersValue["totalMemoryInBytes"];
                                                        if (totalMemoryInBytesValue != null && totalMemoryInBytesValue.Type != JTokenType.Null)
                                                        {
                                                            long totalMemoryInBytesInstance = ((long)totalMemoryInBytesValue);
                                                            processServerInstance.TotalMemoryInBytes = totalMemoryInBytesInstance;
                                                        }
                                                        
                                                        JToken availableMemoryInBytesValue = processServersValue["availableMemoryInBytes"];
                                                        if (availableMemoryInBytesValue != null && availableMemoryInBytesValue.Type != JTokenType.Null)
                                                        {
                                                            long availableMemoryInBytesInstance = ((long)availableMemoryInBytesValue);
                                                            processServerInstance.AvailableMemoryInBytes = availableMemoryInBytesInstance;
                                                        }
                                                        
                                                        JToken memoryUsageStatusValue = processServersValue["memoryUsageStatus"];
                                                        if (memoryUsageStatusValue != null && memoryUsageStatusValue.Type != JTokenType.Null)
                                                        {
                                                            string memoryUsageStatusInstance = ((string)memoryUsageStatusValue);
                                                            processServerInstance.MemoryUsageStatus = memoryUsageStatusInstance;
                                                        }
                                                        
                                                        JToken totalSpaceInBytesValue = processServersValue["totalSpaceInBytes"];
                                                        if (totalSpaceInBytesValue != null && totalSpaceInBytesValue.Type != JTokenType.Null)
                                                        {
                                                            long totalSpaceInBytesInstance = ((long)totalSpaceInBytesValue);
                                                            processServerInstance.TotalSpaceInBytes = totalSpaceInBytesInstance;
                                                        }
                                                        
                                                        JToken availableSpaceInBytesValue = processServersValue["availableSpaceInBytes"];
                                                        if (availableSpaceInBytesValue != null && availableSpaceInBytesValue.Type != JTokenType.Null)
                                                        {
                                                            long availableSpaceInBytesInstance = ((long)availableSpaceInBytesValue);
                                                            processServerInstance.AvailableSpaceInBytes = availableSpaceInBytesInstance;
                                                        }
                                                        
                                                        JToken spaceUsageStatusValue = processServersValue["spaceUsageStatus"];
                                                        if (spaceUsageStatusValue != null && spaceUsageStatusValue.Type != JTokenType.Null)
                                                        {
                                                            string spaceUsageStatusInstance = ((string)spaceUsageStatusValue);
                                                            processServerInstance.SpaceUsageStatus = spaceUsageStatusInstance;
                                                        }
                                                        
                                                        JToken psServiceStatusValue = processServersValue["psServiceStatus"];
                                                        if (psServiceStatusValue != null && psServiceStatusValue.Type != JTokenType.Null)
                                                        {
                                                            string psServiceStatusInstance = ((string)psServiceStatusValue);
                                                            processServerInstance.PsServiceStatus = psServiceStatusInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken masterTargetServersArray = customDetailsValue["masterTargetServers"];
                                                if (masterTargetServersArray != null && masterTargetServersArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken masterTargetServersValue in ((JArray)masterTargetServersArray))
                                                    {
                                                        MasterTargetServer masterTargetServerInstance = new MasterTargetServer();
                                                        vMwareFabricDetailsInstance.MasterTargetServers.Add(masterTargetServerInstance);
                                                        
                                                        JToken idValue2 = masterTargetServersValue["id"];
                                                        if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                        {
                                                            string idInstance2 = ((string)idValue2);
                                                            masterTargetServerInstance.Id = idInstance2;
                                                        }
                                                        
                                                        JToken ipAddressValue2 = masterTargetServersValue["ipAddress"];
                                                        if (ipAddressValue2 != null && ipAddressValue2.Type != JTokenType.Null)
                                                        {
                                                            string ipAddressInstance2 = ((string)ipAddressValue2);
                                                            masterTargetServerInstance.IpAddress = ipAddressInstance2;
                                                        }
                                                        
                                                        JToken nameValue = masterTargetServersValue["name"];
                                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance = ((string)nameValue);
                                                            masterTargetServerInstance.Name = nameInstance;
                                                        }
                                                        
                                                        JToken osTypeValue3 = masterTargetServersValue["osType"];
                                                        if (osTypeValue3 != null && osTypeValue3.Type != JTokenType.Null)
                                                        {
                                                            string osTypeInstance3 = ((string)osTypeValue3);
                                                            masterTargetServerInstance.OsType = osTypeInstance3;
                                                        }
                                                        
                                                        JToken agentVersionValue2 = masterTargetServersValue["agentVersion"];
                                                        if (agentVersionValue2 != null && agentVersionValue2.Type != JTokenType.Null)
                                                        {
                                                            string agentVersionInstance2 = ((string)agentVersionValue2);
                                                            masterTargetServerInstance.AgentVersion = agentVersionInstance2;
                                                        }
                                                        
                                                        JToken lastHeartbeatValue2 = masterTargetServersValue["lastHeartbeat"];
                                                        if (lastHeartbeatValue2 != null && lastHeartbeatValue2.Type != JTokenType.Null)
                                                        {
                                                            DateTime lastHeartbeatInstance2 = ((DateTime)lastHeartbeatValue2);
                                                            masterTargetServerInstance.LastHeartbeat = lastHeartbeatInstance2;
                                                        }
                                                        
                                                        JToken versionStatusValue2 = masterTargetServersValue["versionStatus"];
                                                        if (versionStatusValue2 != null && versionStatusValue2.Type != JTokenType.Null)
                                                        {
                                                            string versionStatusInstance2 = ((string)versionStatusValue2);
                                                            masterTargetServerInstance.VersionStatus = versionStatusInstance2;
                                                        }
                                                        
                                                        JToken retentionVolumesArray = masterTargetServersValue["retentionVolumes"];
                                                        if (retentionVolumesArray != null && retentionVolumesArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken retentionVolumesValue in ((JArray)retentionVolumesArray))
                                                            {
                                                                RetentionVolume retentionVolumeInstance = new RetentionVolume();
                                                                masterTargetServerInstance.RetentionVolumes.Add(retentionVolumeInstance);
                                                                
                                                                JToken volumeNameValue = retentionVolumesValue["volumeName"];
                                                                if (volumeNameValue != null && volumeNameValue.Type != JTokenType.Null)
                                                                {
                                                                    string volumeNameInstance = ((string)volumeNameValue);
                                                                    retentionVolumeInstance.VolumeName = volumeNameInstance;
                                                                }
                                                                
                                                                JToken capacityInBytesValue = retentionVolumesValue["capacityInBytes"];
                                                                if (capacityInBytesValue != null && capacityInBytesValue.Type != JTokenType.Null)
                                                                {
                                                                    long capacityInBytesInstance = ((long)capacityInBytesValue);
                                                                    retentionVolumeInstance.CapacityInBytes = capacityInBytesInstance;
                                                                }
                                                                
                                                                JToken freeSpaceInBytesValue = retentionVolumesValue["freeSpaceInBytes"];
                                                                if (freeSpaceInBytesValue != null && freeSpaceInBytesValue.Type != JTokenType.Null)
                                                                {
                                                                    long freeSpaceInBytesInstance = ((long)freeSpaceInBytesValue);
                                                                    retentionVolumeInstance.FreeSpaceInBytes = freeSpaceInBytesInstance;
                                                                }
                                                                
                                                                JToken thresholdPercentageValue = retentionVolumesValue["thresholdPercentage"];
                                                                if (thresholdPercentageValue != null && thresholdPercentageValue.Type != JTokenType.Null)
                                                                {
                                                                    int thresholdPercentageInstance = ((int)thresholdPercentageValue);
                                                                    retentionVolumeInstance.ThresholdPercentage = thresholdPercentageInstance;
                                                                }
                                                            }
                                                        }
                                                        
                                                        JToken dataStoresArray = masterTargetServersValue["dataStores"];
                                                        if (dataStoresArray != null && dataStoresArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken dataStoresValue in ((JArray)dataStoresArray))
                                                            {
                                                                DataStore dataStoreInstance = new DataStore();
                                                                masterTargetServerInstance.DataStores.Add(dataStoreInstance);
                                                                
                                                                JToken symbolicNameValue = dataStoresValue["symbolicName"];
                                                                if (symbolicNameValue != null && symbolicNameValue.Type != JTokenType.Null)
                                                                {
                                                                    string symbolicNameInstance = ((string)symbolicNameValue);
                                                                    dataStoreInstance.SymbolicName = symbolicNameInstance;
                                                                }
                                                                
                                                                JToken uuidValue = dataStoresValue["uuid"];
                                                                if (uuidValue != null && uuidValue.Type != JTokenType.Null)
                                                                {
                                                                    string uuidInstance = ((string)uuidValue);
                                                                    dataStoreInstance.Uuid = uuidInstance;
                                                                }
                                                                
                                                                JToken capacityValue = dataStoresValue["capacity"];
                                                                if (capacityValue != null && capacityValue.Type != JTokenType.Null)
                                                                {
                                                                    string capacityInstance = ((string)capacityValue);
                                                                    dataStoreInstance.Capacity = capacityInstance;
                                                                }
                                                                
                                                                JToken freeSpaceValue = dataStoresValue["freeSpace"];
                                                                if (freeSpaceValue != null && freeSpaceValue.Type != JTokenType.Null)
                                                                {
                                                                    string freeSpaceInstance = ((string)freeSpaceValue);
                                                                    dataStoreInstance.FreeSpace = freeSpaceInstance;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken runAsAccountsArray = customDetailsValue["runAsAccounts"];
                                                if (runAsAccountsArray != null && runAsAccountsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken runAsAccountsValue in ((JArray)runAsAccountsArray))
                                                    {
                                                        RunAsAccount runAsAccountInstance = new RunAsAccount();
                                                        vMwareFabricDetailsInstance.RunAsAccounts.Add(runAsAccountInstance);
                                                        
                                                        JToken accountIdValue = runAsAccountsValue["accountId"];
                                                        if (accountIdValue != null && accountIdValue.Type != JTokenType.Null)
                                                        {
                                                            string accountIdInstance = ((string)accountIdValue);
                                                            runAsAccountInstance.AccountId = accountIdInstance;
                                                        }
                                                        
                                                        JToken accountNameValue = runAsAccountsValue["accountName"];
                                                        if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                        {
                                                            string accountNameInstance = ((string)accountNameValue);
                                                            runAsAccountInstance.AccountName = accountNameInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken replicationPairCountValue2 = customDetailsValue["replicationPairCount"];
                                                if (replicationPairCountValue2 != null && replicationPairCountValue2.Type != JTokenType.Null)
                                                {
                                                    string replicationPairCountInstance2 = ((string)replicationPairCountValue2);
                                                    vMwareFabricDetailsInstance.ReplicationPairCount = replicationPairCountInstance2;
                                                }
                                                
                                                JToken processServerCountValue = customDetailsValue["processServerCount"];
                                                if (processServerCountValue != null && processServerCountValue.Type != JTokenType.Null)
                                                {
                                                    string processServerCountInstance = ((string)processServerCountValue);
                                                    vMwareFabricDetailsInstance.ProcessServerCount = processServerCountInstance;
                                                }
                                                
                                                JToken agentCountValue = customDetailsValue["agentCount"];
                                                if (agentCountValue != null && agentCountValue.Type != JTokenType.Null)
                                                {
                                                    string agentCountInstance = ((string)agentCountValue);
                                                    vMwareFabricDetailsInstance.AgentCount = agentCountInstance;
                                                }
                                                
                                                JToken protectedServersValue = customDetailsValue["protectedServers"];
                                                if (protectedServersValue != null && protectedServersValue.Type != JTokenType.Null)
                                                {
                                                    string protectedServersInstance = ((string)protectedServersValue);
                                                    vMwareFabricDetailsInstance.ProtectedServers = protectedServersInstance;
                                                }
                                                
                                                JToken systemLoadValue2 = customDetailsValue["systemLoad"];
                                                if (systemLoadValue2 != null && systemLoadValue2.Type != JTokenType.Null)
                                                {
                                                    string systemLoadInstance2 = ((string)systemLoadValue2);
                                                    vMwareFabricDetailsInstance.SystemLoad = systemLoadInstance2;
                                                }
                                                
                                                JToken systemLoadStatusValue2 = customDetailsValue["systemLoadStatus"];
                                                if (systemLoadStatusValue2 != null && systemLoadStatusValue2.Type != JTokenType.Null)
                                                {
                                                    string systemLoadStatusInstance2 = ((string)systemLoadStatusValue2);
                                                    vMwareFabricDetailsInstance.SystemLoadStatus = systemLoadStatusInstance2;
                                                }
                                                
                                                JToken cpuLoadValue2 = customDetailsValue["cpuLoad"];
                                                if (cpuLoadValue2 != null && cpuLoadValue2.Type != JTokenType.Null)
                                                {
                                                    string cpuLoadInstance2 = ((string)cpuLoadValue2);
                                                    vMwareFabricDetailsInstance.CpuLoad = cpuLoadInstance2;
                                                }
                                                
                                                JToken cpuLoadStatusValue2 = customDetailsValue["cpuLoadStatus"];
                                                if (cpuLoadStatusValue2 != null && cpuLoadStatusValue2.Type != JTokenType.Null)
                                                {
                                                    string cpuLoadStatusInstance2 = ((string)cpuLoadStatusValue2);
                                                    vMwareFabricDetailsInstance.CpuLoadStatus = cpuLoadStatusInstance2;
                                                }
                                                
                                                JToken totalMemoryInBytesValue2 = customDetailsValue["totalMemoryInBytes"];
                                                if (totalMemoryInBytesValue2 != null && totalMemoryInBytesValue2.Type != JTokenType.Null)
                                                {
                                                    long totalMemoryInBytesInstance2 = ((long)totalMemoryInBytesValue2);
                                                    vMwareFabricDetailsInstance.TotalMemoryInBytes = totalMemoryInBytesInstance2;
                                                }
                                                
                                                JToken availableMemoryInBytesValue2 = customDetailsValue["availableMemoryInBytes"];
                                                if (availableMemoryInBytesValue2 != null && availableMemoryInBytesValue2.Type != JTokenType.Null)
                                                {
                                                    long availableMemoryInBytesInstance2 = ((long)availableMemoryInBytesValue2);
                                                    vMwareFabricDetailsInstance.AvailableMemoryInBytes = availableMemoryInBytesInstance2;
                                                }
                                                
                                                JToken memoryUsageStatusValue2 = customDetailsValue["memoryUsageStatus"];
                                                if (memoryUsageStatusValue2 != null && memoryUsageStatusValue2.Type != JTokenType.Null)
                                                {
                                                    string memoryUsageStatusInstance2 = ((string)memoryUsageStatusValue2);
                                                    vMwareFabricDetailsInstance.MemoryUsageStatus = memoryUsageStatusInstance2;
                                                }
                                                
                                                JToken totalSpaceInBytesValue2 = customDetailsValue["totalSpaceInBytes"];
                                                if (totalSpaceInBytesValue2 != null && totalSpaceInBytesValue2.Type != JTokenType.Null)
                                                {
                                                    long totalSpaceInBytesInstance2 = ((long)totalSpaceInBytesValue2);
                                                    vMwareFabricDetailsInstance.TotalSpaceInBytes = totalSpaceInBytesInstance2;
                                                }
                                                
                                                JToken availableSpaceInBytesValue2 = customDetailsValue["availableSpaceInBytes"];
                                                if (availableSpaceInBytesValue2 != null && availableSpaceInBytesValue2.Type != JTokenType.Null)
                                                {
                                                    long availableSpaceInBytesInstance2 = ((long)availableSpaceInBytesValue2);
                                                    vMwareFabricDetailsInstance.AvailableSpaceInBytes = availableSpaceInBytesInstance2;
                                                }
                                                
                                                JToken spaceUsageStatusValue2 = customDetailsValue["spaceUsageStatus"];
                                                if (spaceUsageStatusValue2 != null && spaceUsageStatusValue2.Type != JTokenType.Null)
                                                {
                                                    string spaceUsageStatusInstance2 = ((string)spaceUsageStatusValue2);
                                                    vMwareFabricDetailsInstance.SpaceUsageStatus = spaceUsageStatusInstance2;
                                                }
                                                
                                                JToken webLoadValue = customDetailsValue["webLoad"];
                                                if (webLoadValue != null && webLoadValue.Type != JTokenType.Null)
                                                {
                                                    string webLoadInstance = ((string)webLoadValue);
                                                    vMwareFabricDetailsInstance.WebLoad = webLoadInstance;
                                                }
                                                
                                                JToken webLoadStatusValue = customDetailsValue["webLoadStatus"];
                                                if (webLoadStatusValue != null && webLoadStatusValue.Type != JTokenType.Null)
                                                {
                                                    string webLoadStatusInstance = ((string)webLoadStatusValue);
                                                    vMwareFabricDetailsInstance.WebLoadStatus = webLoadStatusInstance;
                                                }
                                                
                                                JToken databaseServerLoadValue = customDetailsValue["databaseServerLoad"];
                                                if (databaseServerLoadValue != null && databaseServerLoadValue.Type != JTokenType.Null)
                                                {
                                                    string databaseServerLoadInstance = ((string)databaseServerLoadValue);
                                                    vMwareFabricDetailsInstance.DatabaseServerLoad = databaseServerLoadInstance;
                                                }
                                                
                                                JToken databaseServerLoadStatusValue = customDetailsValue["databaseServerLoadStatus"];
                                                if (databaseServerLoadStatusValue != null && databaseServerLoadStatusValue.Type != JTokenType.Null)
                                                {
                                                    string databaseServerLoadStatusInstance = ((string)databaseServerLoadStatusValue);
                                                    vMwareFabricDetailsInstance.DatabaseServerLoadStatus = databaseServerLoadStatusInstance;
                                                }
                                                
                                                JToken csServiceStatusValue = customDetailsValue["csServiceStatus"];
                                                if (csServiceStatusValue != null && csServiceStatusValue.Type != JTokenType.Null)
                                                {
                                                    string csServiceStatusInstance = ((string)csServiceStatusValue);
                                                    vMwareFabricDetailsInstance.CsServiceStatus = csServiceStatusInstance;
                                                }
                                                
                                                JToken ipAddressValue3 = customDetailsValue["ipAddress"];
                                                if (ipAddressValue3 != null && ipAddressValue3.Type != JTokenType.Null)
                                                {
                                                    string ipAddressInstance3 = ((string)ipAddressValue3);
                                                    vMwareFabricDetailsInstance.IpAddress = ipAddressInstance3;
                                                }
                                                
                                                JToken agentVersionValue3 = customDetailsValue["agentVersion"];
                                                if (agentVersionValue3 != null && agentVersionValue3.Type != JTokenType.Null)
                                                {
                                                    string agentVersionInstance3 = ((string)agentVersionValue3);
                                                    vMwareFabricDetailsInstance.AgentVersion = agentVersionInstance3;
                                                }
                                                
                                                JToken hostNameValue = customDetailsValue["hostName"];
                                                if (hostNameValue != null && hostNameValue.Type != JTokenType.Null)
                                                {
                                                    string hostNameInstance = ((string)hostNameValue);
                                                    vMwareFabricDetailsInstance.HostName = hostNameInstance;
                                                }
                                                
                                                JToken lastHeartbeatValue3 = customDetailsValue["lastHeartbeat"];
                                                if (lastHeartbeatValue3 != null && lastHeartbeatValue3.Type != JTokenType.Null)
                                                {
                                                    DateTime lastHeartbeatInstance3 = ((DateTime)lastHeartbeatValue3);
                                                    vMwareFabricDetailsInstance.LastHeartbeat = lastHeartbeatInstance3;
                                                }
                                                
                                                JToken versionStatusValue3 = customDetailsValue["versionStatus"];
                                                if (versionStatusValue3 != null && versionStatusValue3.Type != JTokenType.Null)
                                                {
                                                    string versionStatusInstance3 = ((string)versionStatusValue3);
                                                    vMwareFabricDetailsInstance.VersionStatus = versionStatusInstance3;
                                                }
                                                
                                                JToken instanceTypeValue3 = customDetailsValue["instanceType"];
                                                if (instanceTypeValue3 != null && instanceTypeValue3.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance3 = ((string)instanceTypeValue3);
                                                    vMwareFabricDetailsInstance.InstanceType = instanceTypeInstance3;
                                                }
                                                propertiesInstance.CustomDetails = vMwareFabricDetailsInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken idValue3 = valueValue["id"];
                                    if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                    {
                                        string idInstance3 = ((string)idValue3);
                                        fabricInstance.Id = idInstance3;
                                    }
                                    
                                    JToken nameValue2 = valueValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        fabricInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        fabricInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        fabricInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            fabricInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Purges a fabric
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> PurgeAsync(string fabricName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "PurgeAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.Fabrics.BeginPurgingAsync(fabricName, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse result = await client.Fabrics.GetPurgeStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.Fabrics.GetPurgeStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Performs reassociate gateway operation on a fabric.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric Name.
        /// </param>
        /// <param name='input'>
        /// Required. Input to reassociate a gateway.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> ReassociateGatewayAsync(string fabricName, FailoverProcessServerRequest input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ReassociateGatewayAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.Fabrics.BeginReassociateGatewayAsync(fabricName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            ReassociateGatewayOperationResponse result = await client.Fabrics.GetReassociateGatewayStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.Fabrics.GetReassociateGatewayStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Renews certificates of a Fabric
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> RenewCertificateAsync(string fabricName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "RenewCertificateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.Fabrics.BeginRenewCertificateAsync(fabricName, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            FabricOperationResponse result = await client.Fabrics.GetRenewCertificateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.Fabrics.GetRenewCertificateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
    }
}
