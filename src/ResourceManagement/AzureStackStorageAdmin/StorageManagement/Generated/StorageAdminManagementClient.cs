// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Xml;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.AzureStack.Management.StorageAdmin;
using Microsoft.AzureStack.Management.StorageAdmin.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.AzureStack.Management.StorageAdmin.Models
{
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class AccountContainerRoleInstance : RoleInstanceBase
    {
        private AccountContainerRoleInstanceEffectiveSettings _settings;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public AccountContainerRoleInstanceEffectiveSettings Settings
        {
            get { return this._settings; }
            set { this._settings = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AccountContainerRoleInstance
        /// class.
        /// </summary>
        public AccountContainerRoleInstance()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class AccountContainerRoleInstanceEffectiveSettings : RoleInstanceEffectiveSettingsBase
    {
        private int? _wacAccountGcFullScanIntervalInSeconds;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? WacAccountGcFullScanIntervalInSeconds
        {
            get { return this._wacAccountGcFullScanIntervalInSeconds; }
            set { this._wacAccountGcFullScanIntervalInSeconds = value; }
        }
        
        private int? _wacContainerGcFullScanIntervalInSeconds;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? WacContainerGcFullScanIntervalInSeconds
        {
            get { return this._wacContainerGcFullScanIntervalInSeconds; }
            set { this._wacContainerGcFullScanIntervalInSeconds = value; }
        }
        
        private int? _wacGcWaitPeriodInMilliseconds;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? WacGcWaitPeriodInMilliseconds
        {
            get { return this._wacGcWaitPeriodInMilliseconds; }
            set { this._wacGcWaitPeriodInMilliseconds = value; }
        }
        
        private int? _wacHoldingPeriodInHours;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? WacHoldingPeriodInHours
        {
            get { return this._wacHoldingPeriodInHours; }
            set { this._wacHoldingPeriodInHours = value; }
        }
        
        private int? _wacMaxCacheSize;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? WacMaxCacheSize
        {
            get { return this._wacMaxCacheSize; }
            set { this._wacMaxCacheSize = value; }
        }
        
        private int? _wacMaxConnections;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? WacMaxConnections
        {
            get { return this._wacMaxConnections; }
            set { this._wacMaxConnections = value; }
        }
        
        private int? _wacMaxGcThreadNumber;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? WacMaxGcThreadNumber
        {
            get { return this._wacMaxGcThreadNumber; }
            set { this._wacMaxGcThreadNumber = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// AccountContainerRoleInstanceEffectiveSettings class.
        /// </summary>
        public AccountContainerRoleInstanceEffectiveSettings()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class AccountContainerRoleInstanceGetResponse : AzureOperationResponse
    {
        private AccountContainerRoleInstanceModel _roleInstance;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public AccountContainerRoleInstanceModel RoleInstance
        {
            get { return this._roleInstance; }
            set { this._roleInstance = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// AccountContainerRoleInstanceGetResponse class.
        /// </summary>
        public AccountContainerRoleInstanceGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class AccountContainerRoleInstanceListResponse : AzureOperationResponse, IEnumerable<AccountContainerRoleInstanceModel>
    {
        private IList<AccountContainerRoleInstanceModel> _roleInstances;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public IList<AccountContainerRoleInstanceModel> RoleInstances
        {
            get { return this._roleInstances; }
            set { this._roleInstances = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// AccountContainerRoleInstanceListResponse class.
        /// </summary>
        public AccountContainerRoleInstanceListResponse()
        {
            this.RoleInstances = new LazyList<AccountContainerRoleInstanceModel>();
        }
        
        /// <summary>
        /// Gets the sequence of RoleInstances.
        /// </summary>
        public IEnumerator<AccountContainerRoleInstanceModel> GetEnumerator()
        {
            return this.RoleInstances.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of RoleInstances.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class AccountContainerRoleInstanceModel : ResourceBase
    {
        private AccountContainerRoleInstance _properties;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public AccountContainerRoleInstance Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AccountContainerRoleInstanceModel
        /// class.
        /// </summary>
        public AccountContainerRoleInstanceModel()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public enum AssociatedDataType
    {
        Unknown = 0,
        
        Event = 1,
        
        Metrics = 2,
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class BlobFrontEndRoleInstance : RoleInstanceBase
    {
        private BlobFrontEndRoleInstanceEffectiveSettings _settings;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public BlobFrontEndRoleInstanceEffectiveSettings Settings
        {
            get { return this._settings; }
            set { this._settings = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BlobFrontEndRoleInstance class.
        /// </summary>
        public BlobFrontEndRoleInstance()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class BlobFrontEndRoleInstanceEffectiveSettings : RoleInstanceEffectiveSettingsBase
    {
        private int? _frontEndCallbackThreadsCount;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndCallbackThreadsCount
        {
            get { return this._frontEndCallbackThreadsCount; }
            set { this._frontEndCallbackThreadsCount = value; }
        }
        
        private int? _frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds; }
            set { this._frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds = value; }
        }
        
        private bool? _frontEndCpuBasedKeepAliveThrottlingEnabled;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public bool? FrontEndCpuBasedKeepAliveThrottlingEnabled
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingEnabled; }
            set { this._frontEndCpuBasedKeepAliveThrottlingEnabled = value; }
        }
        
        private double? _frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? FrontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold; }
            set { this._frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold = value; }
        }
        
        private double? _frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? FrontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle; }
            set { this._frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle = value; }
        }
        
        private int? _frontEndHttpListenPort;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndHttpListenPort
        {
            get { return this._frontEndHttpListenPort; }
            set { this._frontEndHttpListenPort = value; }
        }
        
        private int? _frontEndHttpsListenPort;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndHttpsListenPort
        {
            get { return this._frontEndHttpsListenPort; }
            set { this._frontEndHttpsListenPort = value; }
        }
        
        private int? _frontEndMaxMillisecondsBetweenMemorySamples;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndMaxMillisecondsBetweenMemorySamples
        {
            get { return this._frontEndMaxMillisecondsBetweenMemorySamples; }
            set { this._frontEndMaxMillisecondsBetweenMemorySamples = value; }
        }
        
        private string _frontEndMemoryThrottleThresholdSettings;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string FrontEndMemoryThrottleThresholdSettings
        {
            get { return this._frontEndMemoryThrottleThresholdSettings; }
            set { this._frontEndMemoryThrottleThresholdSettings = value; }
        }
        
        private bool? _frontEndMemoryThrottlingEnabled;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public bool? FrontEndMemoryThrottlingEnabled
        {
            get { return this._frontEndMemoryThrottlingEnabled; }
            set { this._frontEndMemoryThrottlingEnabled = value; }
        }
        
        private int? _frontEndMinimumThreadPoolThreads;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndMinimumThreadPoolThreads
        {
            get { return this._frontEndMinimumThreadPoolThreads; }
            set { this._frontEndMinimumThreadPoolThreads = value; }
        }
        
        private int? _frontEndThreadPoolBasedKeepAliveIOCompletionThreshold;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndThreadPoolBasedKeepAliveIOCompletionThreshold
        {
            get { return this._frontEndThreadPoolBasedKeepAliveIOCompletionThreshold; }
            set { this._frontEndThreadPoolBasedKeepAliveIOCompletionThreshold = value; }
        }
        
        private int? _frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds
        {
            get { return this._frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds; }
            set { this._frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds = value; }
        }
        
        private double? _frontEndThreadPoolBasedKeepAlivePercentage;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? FrontEndThreadPoolBasedKeepAlivePercentage
        {
            get { return this._frontEndThreadPoolBasedKeepAlivePercentage; }
            set { this._frontEndThreadPoolBasedKeepAlivePercentage = value; }
        }
        
        private int? _frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndThreadPoolBasedKeepAliveWorkerThreadThreshold
        {
            get { return this._frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold; }
            set { this._frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold = value; }
        }
        
        private bool? _frontEndUseSlaTimeInAvailability;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public bool? FrontEndUseSlaTimeInAvailability
        {
            get { return this._frontEndUseSlaTimeInAvailability; }
            set { this._frontEndUseSlaTimeInAvailability = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// BlobFrontEndRoleInstanceEffectiveSettings class.
        /// </summary>
        public BlobFrontEndRoleInstanceEffectiveSettings()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class BlobFrontEndRoleInstanceGetResponse : AzureOperationResponse
    {
        private BlobFrontEndRoleInstanceModel _roleInstance;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public BlobFrontEndRoleInstanceModel RoleInstance
        {
            get { return this._roleInstance; }
            set { this._roleInstance = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// BlobFrontEndRoleInstanceGetResponse class.
        /// </summary>
        public BlobFrontEndRoleInstanceGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class BlobFrontEndRoleInstanceListResponse : AzureOperationResponse, IEnumerable<BlobFrontEndRoleInstanceModel>
    {
        private IList<BlobFrontEndRoleInstanceModel> _roleInstances;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public IList<BlobFrontEndRoleInstanceModel> RoleInstances
        {
            get { return this._roleInstances; }
            set { this._roleInstances = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// BlobFrontEndRoleInstanceListResponse class.
        /// </summary>
        public BlobFrontEndRoleInstanceListResponse()
        {
            this.RoleInstances = new LazyList<BlobFrontEndRoleInstanceModel>();
        }
        
        /// <summary>
        /// Gets the sequence of RoleInstances.
        /// </summary>
        public IEnumerator<BlobFrontEndRoleInstanceModel> GetEnumerator()
        {
            return this.RoleInstances.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of RoleInstances.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class BlobFrontEndRoleInstanceModel : ResourceBase
    {
        private BlobFrontEndRoleInstance _properties;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public BlobFrontEndRoleInstance Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BlobFrontEndRoleInstanceModel
        /// class.
        /// </summary>
        public BlobFrontEndRoleInstanceModel()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class BlobServerRoleInstance : RoleInstanceBase
    {
        private BlobServerRoleInstanceEffectiveSettings _settings;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public BlobServerRoleInstanceEffectiveSettings Settings
        {
            get { return this._settings; }
            set { this._settings = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BlobServerRoleInstance class.
        /// </summary>
        public BlobServerRoleInstance()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class BlobServerRoleInstanceEffectiveSettings : RoleInstanceEffectiveSettingsBase
    {
        private int? _blobSvcContainerGcInterval;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? BlobSvcContainerGcInterval
        {
            get { return this._blobSvcContainerGcInterval; }
            set { this._blobSvcContainerGcInterval = value; }
        }
        
        private int? _blobSvcShallowGcInterval;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? BlobSvcShallowGcInterval
        {
            get { return this._blobSvcShallowGcInterval; }
            set { this._blobSvcShallowGcInterval = value; }
        }
        
        private int? _blobSvcStreamMapMinContainerOccupancyPercent;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? BlobSvcStreamMapMinContainerOccupancyPercent
        {
            get { return this._blobSvcStreamMapMinContainerOccupancyPercent; }
            set { this._blobSvcStreamMapMinContainerOccupancyPercent = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// BlobServerRoleInstanceEffectiveSettings class.
        /// </summary>
        public BlobServerRoleInstanceEffectiveSettings()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class BlobServerRoleInstanceGetResponse : AzureOperationResponse
    {
        private BlobServerRoleInstanceModel _roleInstance;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public BlobServerRoleInstanceModel RoleInstance
        {
            get { return this._roleInstance; }
            set { this._roleInstance = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BlobServerRoleInstanceGetResponse
        /// class.
        /// </summary>
        public BlobServerRoleInstanceGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class BlobServerRoleInstanceListResponse : AzureOperationResponse, IEnumerable<BlobServerRoleInstanceModel>
    {
        private IList<BlobServerRoleInstanceModel> _roleInstances;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public IList<BlobServerRoleInstanceModel> RoleInstances
        {
            get { return this._roleInstances; }
            set { this._roleInstances = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// BlobServerRoleInstanceListResponse class.
        /// </summary>
        public BlobServerRoleInstanceListResponse()
        {
            this.RoleInstances = new LazyList<BlobServerRoleInstanceModel>();
        }
        
        /// <summary>
        /// Gets the sequence of RoleInstances.
        /// </summary>
        public IEnumerator<BlobServerRoleInstanceModel> GetEnumerator()
        {
            return this.RoleInstances.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of RoleInstances.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class BlobServerRoleInstanceModel : ResourceBase
    {
        private BlobServerRoleInstance _properties;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public BlobServerRoleInstance Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BlobServerRoleInstanceModel class.
        /// </summary>
        public BlobServerRoleInstanceModel()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class BlobServiceGetResponse : AzureOperationResponse
    {
        private BlobServiceResponseResource _resource;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public BlobServiceResponseResource Resource
        {
            get { return this._resource; }
            set { this._resource = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BlobServiceGetResponse class.
        /// </summary>
        public BlobServiceGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class BlobServicePatchParameters : ResourceBase
    {
        private BlobServiceRequest _blobService;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public BlobServiceRequest BlobService
        {
            get { return this._blobService; }
            set { this._blobService = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BlobServicePatchParameters class.
        /// </summary>
        public BlobServicePatchParameters()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class BlobServiceRequest
    {
        private BlobServiceWritableSettings _settings;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public BlobServiceWritableSettings Settings
        {
            get { return this._settings; }
            set { this._settings = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BlobServiceRequest class.
        /// </summary>
        public BlobServiceRequest()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class BlobServiceResponse : ServiceResponse
    {
        private BlobServiceSettings _settings;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public BlobServiceSettings Settings
        {
            get { return this._settings; }
            set { this._settings = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BlobServiceResponse class.
        /// </summary>
        public BlobServiceResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class BlobServiceResponseResource : ResourceBase
    {
        private BlobServiceResponse _blobService;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public BlobServiceResponse BlobService
        {
            get { return this._blobService; }
            set { this._blobService = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BlobServiceResponseResource class.
        /// </summary>
        public BlobServiceResponseResource()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class BlobServiceSettings : BlobServiceWritableSettings
    {
        private int? _frontEndHttpListenPort;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndHttpListenPort
        {
            get { return this._frontEndHttpListenPort; }
            set { this._frontEndHttpListenPort = value; }
        }
        
        private int? _frontEndHttpsListenPort;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndHttpsListenPort
        {
            get { return this._frontEndHttpsListenPort; }
            set { this._frontEndHttpsListenPort = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BlobServiceSettings class.
        /// </summary>
        public BlobServiceSettings()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class BlobServiceWritableSettings
    {
        private int? _blobSvcContainerGcInterval;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? BlobSvcContainerGcInterval
        {
            get { return this._blobSvcContainerGcInterval; }
            set { this._blobSvcContainerGcInterval = value; }
        }
        
        private int? _blobSvcShallowGcInterval;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? BlobSvcShallowGcInterval
        {
            get { return this._blobSvcShallowGcInterval; }
            set { this._blobSvcShallowGcInterval = value; }
        }
        
        private int? _blobSvcStreamMapMinContainerOccupancyPercent;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? BlobSvcStreamMapMinContainerOccupancyPercent
        {
            get { return this._blobSvcStreamMapMinContainerOccupancyPercent; }
            set { this._blobSvcStreamMapMinContainerOccupancyPercent = value; }
        }
        
        private int? _frontEndCallbackThreadsCount;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndCallbackThreadsCount
        {
            get { return this._frontEndCallbackThreadsCount; }
            set { this._frontEndCallbackThreadsCount = value; }
        }
        
        private int? _frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds; }
            set { this._frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds = value; }
        }
        
        private bool? _frontEndCpuBasedKeepAliveThrottlingEnabled;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public bool? FrontEndCpuBasedKeepAliveThrottlingEnabled
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingEnabled; }
            set { this._frontEndCpuBasedKeepAliveThrottlingEnabled = value; }
        }
        
        private double? _frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? FrontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold; }
            set { this._frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold = value; }
        }
        
        private double? _frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? FrontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle; }
            set { this._frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle = value; }
        }
        
        private int? _frontEndMaxMillisecondsBetweenMemorySamples;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndMaxMillisecondsBetweenMemorySamples
        {
            get { return this._frontEndMaxMillisecondsBetweenMemorySamples; }
            set { this._frontEndMaxMillisecondsBetweenMemorySamples = value; }
        }
        
        private string _frontEndMemoryThrottleThresholdSettings;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string FrontEndMemoryThrottleThresholdSettings
        {
            get { return this._frontEndMemoryThrottleThresholdSettings; }
            set { this._frontEndMemoryThrottleThresholdSettings = value; }
        }
        
        private bool? _frontEndMemoryThrottlingEnabled;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public bool? FrontEndMemoryThrottlingEnabled
        {
            get { return this._frontEndMemoryThrottlingEnabled; }
            set { this._frontEndMemoryThrottlingEnabled = value; }
        }
        
        private int? _frontEndMinimumThreadPoolThreads;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndMinimumThreadPoolThreads
        {
            get { return this._frontEndMinimumThreadPoolThreads; }
            set { this._frontEndMinimumThreadPoolThreads = value; }
        }
        
        private int? _frontEndThreadPoolBasedKeepAliveIOCompletionThreshold;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndThreadPoolBasedKeepAliveIOCompletionThreshold
        {
            get { return this._frontEndThreadPoolBasedKeepAliveIOCompletionThreshold; }
            set { this._frontEndThreadPoolBasedKeepAliveIOCompletionThreshold = value; }
        }
        
        private int? _frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds
        {
            get { return this._frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds; }
            set { this._frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds = value; }
        }
        
        private double? _frontEndThreadPoolBasedKeepAlivePercentage;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? FrontEndThreadPoolBasedKeepAlivePercentage
        {
            get { return this._frontEndThreadPoolBasedKeepAlivePercentage; }
            set { this._frontEndThreadPoolBasedKeepAlivePercentage = value; }
        }
        
        private int? _frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndThreadPoolBasedKeepAliveWorkerThreadThreshold
        {
            get { return this._frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold; }
            set { this._frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold = value; }
        }
        
        private bool? _frontEndUseSlaTimeInAvailability;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public bool? FrontEndUseSlaTimeInAvailability
        {
            get { return this._frontEndUseSlaTimeInAvailability; }
            set { this._frontEndUseSlaTimeInAvailability = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BlobServiceWritableSettings class.
        /// </summary>
        public BlobServiceWritableSettings()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class EventQuery : AzureOperationResponse
    {
        private string _filterUri;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string FilterUri
        {
            get { return this._filterUri; }
            set { this._filterUri = value; }
        }
        
        private string _tableEndpoint;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string TableEndpoint
        {
            get { return this._tableEndpoint; }
            set { this._tableEndpoint = value; }
        }
        
        private IList<TableInfo> _tableInfos;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public IList<TableInfo> TableInfos
        {
            get { return this._tableInfos; }
            set { this._tableInfos = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the EventQuery class.
        /// </summary>
        public EventQuery()
        {
            this.TableInfos = new LazyList<TableInfo>();
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class Farm : FarmBase
    {
        private HealthStatus _healthStatus;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public HealthStatus HealthStatus
        {
            get { return this._healthStatus; }
            set { this._healthStatus = value; }
        }
        
        private string _settingsStore;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string SettingsStore
        {
            get { return this._settingsStore; }
            set { this._settingsStore = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Farm class.
        /// </summary>
        public Farm()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class FarmBase
    {
        private FarmSettings _settings;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public FarmSettings Settings
        {
            get { return this._settings; }
            set { this._settings = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the FarmBase class.
        /// </summary>
        public FarmBase()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class FarmCreate
    {
        private string _settingAccessString;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string SettingAccessString
        {
            get { return this._settingAccessString; }
            set { this._settingAccessString = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the FarmCreate class.
        /// </summary>
        public FarmCreate()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class FarmCreateParameters : ResourceBase
    {
        private FarmCreate _properties;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public FarmCreate Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the FarmCreateParameters class.
        /// </summary>
        public FarmCreateParameters()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class FarmGetResponse : AzureOperationResponse
    {
        private FarmModel _farm;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public FarmModel Farm
        {
            get { return this._farm; }
            set { this._farm = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the FarmGetResponse class.
        /// </summary>
        public FarmGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class FarmListResponse : AzureOperationResponse, IEnumerable<FarmModel>
    {
        private IList<FarmModel> _farms;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public IList<FarmModel> Farms
        {
            get { return this._farms; }
            set { this._farms = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the FarmListResponse class.
        /// </summary>
        public FarmListResponse()
        {
            this.Farms = new LazyList<FarmModel>();
        }
        
        /// <summary>
        /// Gets the sequence of Farms.
        /// </summary>
        public IEnumerator<FarmModel> GetEnumerator()
        {
            return this.Farms.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of Farms.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class FarmModel : ResourceBase
    {
        private Farm _properties;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public Farm Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the FarmModel class.
        /// </summary>
        public FarmModel()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class FarmSettings
    {
        private string _corsAllowedOriginsList;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string CorsAllowedOriginsList
        {
            get { return this._corsAllowedOriginsList; }
            set { this._corsAllowedOriginsList = value; }
        }
        
        private string _dataCenterUriHostSuffixes;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string DataCenterUriHostSuffixes
        {
            get { return this._dataCenterUriHostSuffixes; }
            set { this._dataCenterUriHostSuffixes = value; }
        }
        
        private int? _hostStyleHttpPort;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? HostStyleHttpPort
        {
            get { return this._hostStyleHttpPort; }
            set { this._hostStyleHttpPort = value; }
        }
        
        private int? _hostStyleHttpsPort;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? HostStyleHttpsPort
        {
            get { return this._hostStyleHttpsPort; }
            set { this._hostStyleHttpsPort = value; }
        }
        
        private int? _settingsPollingIntervalInSecond;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? SettingsPollingIntervalInSecond
        {
            get { return this._settingsPollingIntervalInSecond; }
            set { this._settingsPollingIntervalInSecond = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the FarmSettings class.
        /// </summary>
        public FarmSettings()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class FarmUpdateParameters : ResourceBase
    {
        private FarmBase _farm;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public FarmBase Farm
        {
            get { return this._farm; }
            set { this._farm = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the FarmUpdateParameters class.
        /// </summary>
        public FarmUpdateParameters()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class Fault
    {
        private DateTime _activatedTime;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public DateTime ActivatedTime
        {
            get { return this._activatedTime; }
            set { this._activatedTime = value; }
        }
        
        private AssociatedDataType _associatedDataType;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public AssociatedDataType AssociatedDataType
        {
            get { return this._associatedDataType; }
            set { this._associatedDataType = value; }
        }
        
        private EventQuery _associatedEventQuery;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public EventQuery AssociatedEventQuery
        {
            get { return this._associatedEventQuery; }
            set { this._associatedEventQuery = value; }
        }
        
        private string _associatedMetricsName;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string AssociatedMetricsName
        {
            get { return this._associatedMetricsName; }
            set { this._associatedMetricsName = value; }
        }
        
        private string _description;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string Description
        {
            get { return this._description; }
            set { this._description = value; }
        }
        
        private string _faultId;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string FaultId
        {
            get { return this._faultId; }
            set { this._faultId = value; }
        }
        
        private string _faultRuleName;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string FaultRuleName
        {
            get { return this._faultRuleName; }
            set { this._faultRuleName = value; }
        }
        
        private string _resolutionText;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string ResolutionText
        {
            get { return this._resolutionText; }
            set { this._resolutionText = value; }
        }
        
        private System.DateTime? _resolvedTime;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public System.DateTime? ResolvedTime
        {
            get { return this._resolvedTime; }
            set { this._resolvedTime = value; }
        }
        
        private string _resourceUri;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string ResourceUri
        {
            get { return this._resourceUri; }
            set { this._resourceUri = value; }
        }
        
        private Severity _severity;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public Severity Severity
        {
            get { return this._severity; }
            set { this._severity = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Fault class.
        /// </summary>
        public Fault()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class FaultGetResponse : AzureOperationResponse
    {
        private FaultModel _fault;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public FaultModel Fault
        {
            get { return this._fault; }
            set { this._fault = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the FaultGetResponse class.
        /// </summary>
        public FaultGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class FaultListResponse : AzureOperationResponse, IEnumerable<FaultModel>
    {
        private IList<FaultModel> _faults;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public IList<FaultModel> Faults
        {
            get { return this._faults; }
            set { this._faults = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the FaultListResponse class.
        /// </summary>
        public FaultListResponse()
        {
            this.Faults = new LazyList<FaultModel>();
        }
        
        /// <summary>
        /// Gets the sequence of Faults.
        /// </summary>
        public IEnumerator<FaultModel> GetEnumerator()
        {
            return this.Faults.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of Faults.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class FaultModel : ResourceBase
    {
        private Fault _properties;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public Fault Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the FaultModel class.
        /// </summary>
        public FaultModel()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public enum HealthStatus
    {
        Unknown = 0,
        
        Healthy = 1,
        
        Warning = 2,
        
        Critical = 3,
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class LocalizableString
    {
        private string _localizedValue;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string LocalizedValue
        {
            get { return this._localizedValue; }
            set { this._localizedValue = value; }
        }
        
        private string _value;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the LocalizableString class.
        /// </summary>
        public LocalizableString()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class LogCollectParameters : ResourceBase
    {
        private string _azureBlobContainer;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string AzureBlobContainer
        {
            get { return this._azureBlobContainer; }
            set { this._azureBlobContainer = value; }
        }
        
        private string _azureSasToken;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string AzureSasToken
        {
            get { return this._azureSasToken; }
            set { this._azureSasToken = value; }
        }
        
        private string _azureStorageAccountKey;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string AzureStorageAccountKey
        {
            get { return this._azureStorageAccountKey; }
            set { this._azureStorageAccountKey = value; }
        }
        
        private string _azureStorageAccountName;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string AzureStorageAccountName
        {
            get { return this._azureStorageAccountName; }
            set { this._azureStorageAccountName = value; }
        }
        
        private DateTime _endTime;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public DateTime EndTime
        {
            get { return this._endTime; }
            set { this._endTime = value; }
        }
        
        private string _logPrefix;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string LogPrefix
        {
            get { return this._logPrefix; }
            set { this._logPrefix = value; }
        }
        
        private string _plainPassword;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string PlainPassword
        {
            get { return this._plainPassword; }
            set { this._plainPassword = value; }
        }
        
        private DateTime _startTime;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public DateTime StartTime
        {
            get { return this._startTime; }
            set { this._startTime = value; }
        }
        
        private string _targetShareFolder;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string TargetShareFolder
        {
            get { return this._targetShareFolder; }
            set { this._targetShareFolder = value; }
        }
        
        private string _userName;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string UserName
        {
            get { return this._userName; }
            set { this._userName = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the LogCollectParameters class.
        /// </summary>
        public LogCollectParameters()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class LogCollectResponse : LongRunningOperationResponse
    {
        private string _exceptionString;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string ExceptionString
        {
            get { return this._exceptionString; }
            set { this._exceptionString = value; }
        }
        
        private bool _isFailed;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public bool IsFailed
        {
            get { return this._isFailed; }
            set { this._isFailed = value; }
        }
        
        private string _logPrefix;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string LogPrefix
        {
            get { return this._logPrefix; }
            set { this._logPrefix = value; }
        }
        
        private string _resultString;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string ResultString
        {
            get { return this._resultString; }
            set { this._resultString = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the LogCollectResponse class.
        /// </summary>
        public LogCollectResponse()
        {
        }
    }
    
    /// <summary>
    /// A standard service response for long running operations.
    /// </summary>
    public partial class LongRunningOperationResponse : AzureOperationResponse
    {
        private StorageAdminError _error;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public StorageAdminError Error
        {
            get { return this._error; }
            set { this._error = value; }
        }
        
        private string _operationStatusLink;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string OperationStatusLink
        {
            get { return this._operationStatusLink; }
            set { this._operationStatusLink = value; }
        }
        
        private int _retryAfter;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public int RetryAfter
        {
            get { return this._retryAfter; }
            set { this._retryAfter = value; }
        }
        
        private OperationStatus _status;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public OperationStatus Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the LongRunningOperationResponse
        /// class.
        /// </summary>
        public LongRunningOperationResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class ManagementServiceGetResponse : AzureOperationResponse
    {
        private ManagementServiceResponseResource _resource;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public ManagementServiceResponseResource Resource
        {
            get { return this._resource; }
            set { this._resource = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ManagementServiceGetResponse
        /// class.
        /// </summary>
        public ManagementServiceGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class ManagementServicePatchParameters : ResourceBase
    {
        private ManagementServiceRequest _managementService;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public ManagementServiceRequest ManagementService
        {
            get { return this._managementService; }
            set { this._managementService = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ManagementServicePatchParameters
        /// class.
        /// </summary>
        public ManagementServicePatchParameters()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class ManagementServiceRequest
    {
        private ManagementServiceWritableSettings _settings;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public ManagementServiceWritableSettings Settings
        {
            get { return this._settings; }
            set { this._settings = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ManagementServiceRequest class.
        /// </summary>
        public ManagementServiceRequest()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class ManagementServiceResponse : ServiceResponse
    {
        private ManagementServiceSettings _settings;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public ManagementServiceSettings Settings
        {
            get { return this._settings; }
            set { this._settings = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ManagementServiceResponse class.
        /// </summary>
        public ManagementServiceResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class ManagementServiceResponseResource : ResourceBase
    {
        private ManagementServiceResponse _managementService;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public ManagementServiceResponse ManagementService
        {
            get { return this._managementService; }
            set { this._managementService = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ManagementServiceResponseResource
        /// class.
        /// </summary>
        public ManagementServiceResponseResource()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class ManagementServiceSettings : ManagementServiceWritableSettings
    {
        /// <summary>
        /// Initializes a new instance of the ManagementServiceSettings class.
        /// </summary>
        public ManagementServiceSettings()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class ManagementServiceWritableSettings
    {
        private string _healthAccountKey;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string HealthAccountKey
        {
            get { return this._healthAccountKey; }
            set { this._healthAccountKey = value; }
        }
        
        private string _healthAccountName;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string HealthAccountName
        {
            get { return this._healthAccountName; }
            set { this._healthAccountName = value; }
        }
        
        private int? _healthHistoryDays;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? HealthHistoryDays
        {
            get { return this._healthHistoryDays; }
            set { this._healthHistoryDays = value; }
        }
        
        private string _metricsAccountKey;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string MetricsAccountKey
        {
            get { return this._metricsAccountKey; }
            set { this._metricsAccountKey = value; }
        }
        
        private string _metricsAccountName;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string MetricsAccountName
        {
            get { return this._metricsAccountName; }
            set { this._metricsAccountName = value; }
        }
        
        private int? _metricsBucketCount;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? MetricsBucketCount
        {
            get { return this._metricsBucketCount; }
            set { this._metricsBucketCount = value; }
        }
        
        private int? _wacAccountGcFullScanIntervalInSeconds;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? WacAccountGcFullScanIntervalInSeconds
        {
            get { return this._wacAccountGcFullScanIntervalInSeconds; }
            set { this._wacAccountGcFullScanIntervalInSeconds = value; }
        }
        
        private int? _wacContainerGcFullScanIntervalInSeconds;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? WacContainerGcFullScanIntervalInSeconds
        {
            get { return this._wacContainerGcFullScanIntervalInSeconds; }
            set { this._wacContainerGcFullScanIntervalInSeconds = value; }
        }
        
        private int? _wacGcWaitPeriodInMilliseconds;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? WacGcWaitPeriodInMilliseconds
        {
            get { return this._wacGcWaitPeriodInMilliseconds; }
            set { this._wacGcWaitPeriodInMilliseconds = value; }
        }
        
        private int? _wacHoldingPeriodInHours;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? WacHoldingPeriodInHours
        {
            get { return this._wacHoldingPeriodInHours; }
            set { this._wacHoldingPeriodInHours = value; }
        }
        
        private int? _wacMaxCacheSize;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? WacMaxCacheSize
        {
            get { return this._wacMaxCacheSize; }
            set { this._wacMaxCacheSize = value; }
        }
        
        private int? _wacMaxConnections;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? WacMaxConnections
        {
            get { return this._wacMaxConnections; }
            set { this._wacMaxConnections = value; }
        }
        
        private int? _wacMaxGcThreadNumber;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? WacMaxGcThreadNumber
        {
            get { return this._wacMaxGcThreadNumber; }
            set { this._wacMaxGcThreadNumber = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ManagementServiceWritableSettings
        /// class.
        /// </summary>
        public ManagementServiceWritableSettings()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class Metric
    {
        private DateTime _endTime;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public DateTime EndTime
        {
            get { return this._endTime; }
            set { this._endTime = value; }
        }
        
        private MetricUnit _metricUnit;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public MetricUnit MetricUnit
        {
            get { return this._metricUnit; }
            set { this._metricUnit = value; }
        }
        
        private IList<MetricValue> _metricValues;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public IList<MetricValue> MetricValues
        {
            get { return this._metricValues; }
            set { this._metricValues = value; }
        }
        
        private LocalizableString _name;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public LocalizableString Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private DateTime _startTime;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public DateTime StartTime
        {
            get { return this._startTime; }
            set { this._startTime = value; }
        }
        
        private TimeSpan _timeGrain;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public TimeSpan TimeGrain
        {
            get { return this._timeGrain; }
            set { this._timeGrain = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Metric class.
        /// </summary>
        public Metric()
        {
            this.MetricValues = new LazyList<MetricValue>();
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class MetricAvailability
    {
        private TimeSpan _retention;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public TimeSpan Retention
        {
            get { return this._retention; }
            set { this._retention = value; }
        }
        
        private TimeSpan _timeGrain;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public TimeSpan TimeGrain
        {
            get { return this._timeGrain; }
            set { this._timeGrain = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricAvailability class.
        /// </summary>
        public MetricAvailability()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class MetricDefinition
    {
        private IList<MetricAvailability> _metricAvailabilities;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public IList<MetricAvailability> MetricAvailabilities
        {
            get { return this._metricAvailabilities; }
            set { this._metricAvailabilities = value; }
        }
        
        private LocalizableString _name;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public LocalizableString Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private MetricPrimaryAggregationType _primaryAggregationType;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public MetricPrimaryAggregationType PrimaryAggregationType
        {
            get { return this._primaryAggregationType; }
            set { this._primaryAggregationType = value; }
        }
        
        private MetricUnit _unit;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public MetricUnit Unit
        {
            get { return this._unit; }
            set { this._unit = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricDefinition class.
        /// </summary>
        public MetricDefinition()
        {
            this.MetricAvailabilities = new LazyList<MetricAvailability>();
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class MetricDefinitionsResult : AzureOperationResponse
    {
        private IList<MetricDefinition> _value;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public IList<MetricDefinition> Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricDefinitionsResult class.
        /// </summary>
        public MetricDefinitionsResult()
        {
            this.Value = new LazyList<MetricDefinition>();
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public enum MetricPrimaryAggregationType
    {
        None = 0,
        
        Average = 1,
        
        Total = 2,
        
        Minimum = 3,
        
        Maximum = 4,
        
        Last = 5,
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class MetricsResult : AzureOperationResponse
    {
        private IList<Metric> _metrics;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public IList<Metric> Metrics
        {
            get { return this._metrics; }
            set { this._metrics = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricsResult class.
        /// </summary>
        public MetricsResult()
        {
            this.Metrics = new LazyList<Metric>();
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class MetricsServerRoleInstance : RoleInstanceBase
    {
        private MetricsServerRoleInstanceEffectiveSettings _settings;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public MetricsServerRoleInstanceEffectiveSettings Settings
        {
            get { return this._settings; }
            set { this._settings = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricsServerRoleInstance class.
        /// </summary>
        public MetricsServerRoleInstance()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class MetricsServerRoleInstanceEffectiveSettings : RoleInstanceEffectiveSettingsBase
    {
        private string _metricsAccountKey;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string MetricsAccountKey
        {
            get { return this._metricsAccountKey; }
            set { this._metricsAccountKey = value; }
        }
        
        private string _metricsAccountName;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string MetricsAccountName
        {
            get { return this._metricsAccountName; }
            set { this._metricsAccountName = value; }
        }
        
        private int? _metricsBucketCount;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? MetricsBucketCount
        {
            get { return this._metricsBucketCount; }
            set { this._metricsBucketCount = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// MetricsServerRoleInstanceEffectiveSettings class.
        /// </summary>
        public MetricsServerRoleInstanceEffectiveSettings()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class MetricsServerRoleInstanceGetResponse : AzureOperationResponse
    {
        private MetricsServerRoleInstanceModel _roleInstance;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public MetricsServerRoleInstanceModel RoleInstance
        {
            get { return this._roleInstance; }
            set { this._roleInstance = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// MetricsServerRoleInstanceGetResponse class.
        /// </summary>
        public MetricsServerRoleInstanceGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class MetricsServerRoleInstanceListResponse : AzureOperationResponse, IEnumerable<MetricsServerRoleInstanceModel>
    {
        private IList<MetricsServerRoleInstanceModel> _roleInstances;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public IList<MetricsServerRoleInstanceModel> RoleInstances
        {
            get { return this._roleInstances; }
            set { this._roleInstances = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// MetricsServerRoleInstanceListResponse class.
        /// </summary>
        public MetricsServerRoleInstanceListResponse()
        {
            this.RoleInstances = new LazyList<MetricsServerRoleInstanceModel>();
        }
        
        /// <summary>
        /// Gets the sequence of RoleInstances.
        /// </summary>
        public IEnumerator<MetricsServerRoleInstanceModel> GetEnumerator()
        {
            return this.RoleInstances.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of RoleInstances.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class MetricsServerRoleInstanceModel : ResourceBase
    {
        private MetricsServerRoleInstance _properties;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public MetricsServerRoleInstance Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricsServerRoleInstanceModel
        /// class.
        /// </summary>
        public MetricsServerRoleInstanceModel()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public enum MetricUnit
    {
        Count = 0,
        
        Bytes = 1,
        
        Seconds = 2,
        
        CountPerSecond = 3,
        
        BytesPerSecond = 4,
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class MetricValue
    {
        private double? _average;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? Average
        {
            get { return this._average; }
            set { this._average = value; }
        }
        
        private int? _count;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? Count
        {
            get { return this._count; }
            set { this._count = value; }
        }
        
        private double? _maximum;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? Maximum
        {
            get { return this._maximum; }
            set { this._maximum = value; }
        }
        
        private double? _minimum;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? Minimum
        {
            get { return this._minimum; }
            set { this._minimum = value; }
        }
        
        private string _properties;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        private DateTime _timeStamp;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public DateTime TimeStamp
        {
            get { return this._timeStamp; }
            set { this._timeStamp = value; }
        }
        
        private double? _total;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? Total
        {
            get { return this._total; }
            set { this._total = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricValue class.
        /// </summary>
        public MetricValue()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class MonitoringServerRoleInstance : RoleInstanceBase
    {
        private MonitoringServerRoleInstanceEffectiveSettings _settings;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public MonitoringServerRoleInstanceEffectiveSettings Settings
        {
            get { return this._settings; }
            set { this._settings = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MonitoringServerRoleInstance
        /// class.
        /// </summary>
        public MonitoringServerRoleInstance()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class MonitoringServerRoleInstanceEffectiveSettings : RoleInstanceEffectiveSettingsBase
    {
        private string _healthAccountKey;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string HealthAccountKey
        {
            get { return this._healthAccountKey; }
            set { this._healthAccountKey = value; }
        }
        
        private string _healthAccountName;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string HealthAccountName
        {
            get { return this._healthAccountName; }
            set { this._healthAccountName = value; }
        }
        
        private int? _healthHistoryDays;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? HealthHistoryDays
        {
            get { return this._healthHistoryDays; }
            set { this._healthHistoryDays = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// MonitoringServerRoleInstanceEffectiveSettings class.
        /// </summary>
        public MonitoringServerRoleInstanceEffectiveSettings()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class MonitoringServerRoleInstanceGetResponse : AzureOperationResponse
    {
        private MonitoringServerRoleInstanceModel _roleInstance;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public MonitoringServerRoleInstanceModel RoleInstance
        {
            get { return this._roleInstance; }
            set { this._roleInstance = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// MonitoringServerRoleInstanceGetResponse class.
        /// </summary>
        public MonitoringServerRoleInstanceGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class MonitoringServerRoleInstanceListResponse : AzureOperationResponse, IEnumerable<MonitoringServerRoleInstanceModel>
    {
        private IList<MonitoringServerRoleInstanceModel> _roleInstances;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public IList<MonitoringServerRoleInstanceModel> RoleInstances
        {
            get { return this._roleInstances; }
            set { this._roleInstances = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// MonitoringServerRoleInstanceListResponse class.
        /// </summary>
        public MonitoringServerRoleInstanceListResponse()
        {
            this.RoleInstances = new LazyList<MonitoringServerRoleInstanceModel>();
        }
        
        /// <summary>
        /// Gets the sequence of RoleInstances.
        /// </summary>
        public IEnumerator<MonitoringServerRoleInstanceModel> GetEnumerator()
        {
            return this.RoleInstances.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of RoleInstances.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class MonitoringServerRoleInstanceModel : ResourceBase
    {
        private MonitoringServerRoleInstance _properties;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public MonitoringServerRoleInstance Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MonitoringServerRoleInstanceModel
        /// class.
        /// </summary>
        public MonitoringServerRoleInstanceModel()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class Node
    {
        private string _codeVersion;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string CodeVersion
        {
            get { return this._codeVersion; }
            set { this._codeVersion = value; }
        }
        
        private string _configVersion;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string ConfigVersion
        {
            get { return this._configVersion; }
            set { this._configVersion = value; }
        }
        
        private Uri _faultDomain;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public Uri FaultDomain
        {
            get { return this._faultDomain; }
            set { this._faultDomain = value; }
        }
        
        private HealthStatus _healthState;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public HealthStatus HealthState
        {
            get { return this._healthState; }
            set { this._healthState = value; }
        }
        
        private string _ipAddressOrFqdn;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string IpAddressOrFqdn
        {
            get { return this._ipAddressOrFqdn; }
            set { this._ipAddressOrFqdn = value; }
        }
        
        private bool _isSeedNode;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public bool IsSeedNode
        {
            get { return this._isSeedNode; }
            set { this._isSeedNode = value; }
        }
        
        private string _nodeId;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string NodeId
        {
            get { return this._nodeId; }
            set { this._nodeId = value; }
        }
        
        private string _nodeName;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string NodeName
        {
            get { return this._nodeName; }
            set { this._nodeName = value; }
        }
        
        private NodeStatus _nodeStatus;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public NodeStatus NodeStatus
        {
            get { return this._nodeStatus; }
            set { this._nodeStatus = value; }
        }
        
        private string _nodeType;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string NodeType
        {
            get { return this._nodeType; }
            set { this._nodeType = value; }
        }
        
        private TimeSpan _nodeUpTime;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public TimeSpan NodeUpTime
        {
            get { return this._nodeUpTime; }
            set { this._nodeUpTime = value; }
        }
        
        private IList<string> _runningInstanceUris;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public IList<string> RunningInstanceUris
        {
            get { return this._runningInstanceUris; }
            set { this._runningInstanceUris = value; }
        }
        
        private string _upgradeDomain;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string UpgradeDomain
        {
            get { return this._upgradeDomain; }
            set { this._upgradeDomain = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Node class.
        /// </summary>
        public Node()
        {
            this.RunningInstanceUris = new LazyList<string>();
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class NodeGetResponse : AzureOperationResponse
    {
        private NodeModel _node;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public NodeModel Node
        {
            get { return this._node; }
            set { this._node = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the NodeGetResponse class.
        /// </summary>
        public NodeGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class NodeListResponse : AzureOperationResponse, IEnumerable<NodeModel>
    {
        private IList<NodeModel> _nodes;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public IList<NodeModel> Nodes
        {
            get { return this._nodes; }
            set { this._nodes = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the NodeListResponse class.
        /// </summary>
        public NodeListResponse()
        {
            this.Nodes = new LazyList<NodeModel>();
        }
        
        /// <summary>
        /// Gets the sequence of Nodes.
        /// </summary>
        public IEnumerator<NodeModel> GetEnumerator()
        {
            return this.Nodes.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of Nodes.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class NodeModel : ResourceBase
    {
        private Node _properties;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public Node Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the NodeModel class.
        /// </summary>
        public NodeModel()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public enum NodeStatus
    {
        Invalid = 0,
        
        Up = 1,
        
        Down = 2,
        
        Enabling = 3,
        
        Disabling = 4,
        
        Disabled = 5,
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public enum RegionStatus
    {
        Available = 0,
        
        Unavailable = 1,
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class ResourceBase
    {
        private string _id;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _location;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private IDictionary<string, string> _tags;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public IDictionary<string, string> Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }
        
        private string _type;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string Type
        {
            get { return this._type; }
            set { this._type = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ResourceBase class.
        /// </summary>
        public ResourceBase()
        {
            this.Tags = new LazyDictionary<string, string>();
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class RoleInstanceBase
    {
        private HealthStatus _healthStatus;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public HealthStatus HealthStatus
        {
            get { return this._healthStatus; }
            set { this._healthStatus = value; }
        }
        
        private IList<RoleInstanceHistoricEntry> _historyInfos;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public IList<RoleInstanceHistoricEntry> HistoryInfos
        {
            get { return this._historyInfos; }
            set { this._historyInfos = value; }
        }
        
        private string _nodeUri;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string NodeUri
        {
            get { return this._nodeUri; }
            set { this._nodeUri = value; }
        }
        
        private string _roleIdentifier;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string RoleIdentifier
        {
            get { return this._roleIdentifier; }
            set { this._roleIdentifier = value; }
        }
        
        private RoleInstanceStatus _status;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public RoleInstanceStatus Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        private string _version;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string Version
        {
            get { return this._version; }
            set { this._version = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RoleInstanceBase class.
        /// </summary>
        public RoleInstanceBase()
        {
            this.HistoryInfos = new LazyList<RoleInstanceHistoricEntry>();
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class RoleInstanceEffectiveSettingsBase
    {
        private int? _settingsPollingIntervalInSeconds;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? SettingsPollingIntervalInSeconds
        {
            get { return this._settingsPollingIntervalInSeconds; }
            set { this._settingsPollingIntervalInSeconds = value; }
        }
        
        private string _settingsTimestamp;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string SettingsTimestamp
        {
            get { return this._settingsTimestamp; }
            set { this._settingsTimestamp = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RoleInstanceEffectiveSettingsBase
        /// class.
        /// </summary>
        public RoleInstanceEffectiveSettingsBase()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class RoleInstanceHistoricEntry
    {
        private System.TimeSpan? _duration;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public System.TimeSpan? Duration
        {
            get { return this._duration; }
            set { this._duration = value; }
        }
        
        private System.DateTime? _endTime;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public System.DateTime? EndTime
        {
            get { return this._endTime; }
            set { this._endTime = value; }
        }
        
        private string _roleIdentifier;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string RoleIdentifier
        {
            get { return this._roleIdentifier; }
            set { this._roleIdentifier = value; }
        }
        
        private System.DateTime? _startTime;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public System.DateTime? StartTime
        {
            get { return this._startTime; }
            set { this._startTime = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RoleInstanceHistoricEntry class.
        /// </summary>
        public RoleInstanceHistoricEntry()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public enum RoleInstanceStatus
    {
        Unknown = 0,
        
        Active = 1,
        
        Inactive = 2,
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public abstract partial class ServiceResponse
    {
        private HealthStatus _healthStatus;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public HealthStatus HealthStatus
        {
            get { return this._healthStatus; }
            set { this._healthStatus = value; }
        }
        
        private string _version;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string Version
        {
            get { return this._version; }
            set { this._version = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ServiceResponse class.
        /// </summary>
        public ServiceResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public enum Severity
    {
        Unknown = 0,
        
        Healthy = 1,
        
        Degraded = 2,
        
        Critical = 3,
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class Share
    {
        private ulong? _freeCapacity;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public ulong? FreeCapacity
        {
            get { return this._freeCapacity; }
            set { this._freeCapacity = value; }
        }
        
        private HealthStatus _healthStatus;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public HealthStatus HealthStatus
        {
            get { return this._healthStatus; }
            set { this._healthStatus = value; }
        }
        
        private string _shareName;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string ShareName
        {
            get { return this._shareName; }
            set { this._shareName = value; }
        }
        
        private ulong? _totalCapacity;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public ulong? TotalCapacity
        {
            get { return this._totalCapacity; }
            set { this._totalCapacity = value; }
        }
        
        private string _uncPath;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string UncPath
        {
            get { return this._uncPath; }
            set { this._uncPath = value; }
        }
        
        private ulong? _usedCapacity;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public ulong? UsedCapacity
        {
            get { return this._usedCapacity; }
            set { this._usedCapacity = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Share class.
        /// </summary>
        public Share()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class ShareGetResponse : AzureOperationResponse
    {
        private ShareModel _share;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public ShareModel Share
        {
            get { return this._share; }
            set { this._share = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ShareGetResponse class.
        /// </summary>
        public ShareGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class ShareListResponse : AzureOperationResponse, IEnumerable<ShareModel>
    {
        private IList<ShareModel> _shares;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public IList<ShareModel> Shares
        {
            get { return this._shares; }
            set { this._shares = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ShareListResponse class.
        /// </summary>
        public ShareListResponse()
        {
            this.Shares = new LazyList<ShareModel>();
        }
        
        /// <summary>
        /// Gets the sequence of Shares.
        /// </summary>
        public IEnumerator<ShareModel> GetEnumerator()
        {
            return this.Shares.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of Shares.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class ShareModel : ResourceBase
    {
        private Share _properties;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public Share Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ShareModel class.
        /// </summary>
        public ShareModel()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class StorageAccountGetResponse : AzureOperationResponse
    {
        private StorageAccountModel _storageAccount;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public StorageAccountModel StorageAccount
        {
            get { return this._storageAccount; }
            set { this._storageAccount = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAccountGetResponse class.
        /// </summary>
        public StorageAccountGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class StorageAccountListResponse : AzureOperationResponse, IEnumerable<StorageAccountModel>
    {
        private IList<StorageAccountModel> _storageAccounts;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public IList<StorageAccountModel> StorageAccounts
        {
            get { return this._storageAccounts; }
            set { this._storageAccounts = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAccountListResponse class.
        /// </summary>
        public StorageAccountListResponse()
        {
            this.StorageAccounts = new LazyList<StorageAccountModel>();
        }
        
        /// <summary>
        /// Gets the sequence of StorageAccounts.
        /// </summary>
        public IEnumerator<StorageAccountModel> GetEnumerator()
        {
            return this.StorageAccounts.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of StorageAccounts.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class StorageAccountModel : ResourceBase
    {
        private Microsoft.AzureStack.Management.StorageAdmin.Models.StorageAccountStatusSearchFilter? _accountStatusFilter;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public Microsoft.AzureStack.Management.StorageAdmin.Models.StorageAccountStatusSearchFilter? AccountStatusFilter
        {
            get { return this._accountStatusFilter; }
            set { this._accountStatusFilter = value; }
        }
        
        private StorageAccountPropertiesModel _properties;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public StorageAccountPropertiesModel Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        private string _resourceType;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string ResourceType
        {
            get { return this._resourceType; }
            set { this._resourceType = value; }
        }
        
        private System.Guid? _tenantSubscriptionId;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public System.Guid? TenantSubscriptionId
        {
            get { return this._tenantSubscriptionId; }
            set { this._tenantSubscriptionId = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAccountModel class.
        /// </summary>
        public StorageAccountModel()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public enum StorageAccountOperation
    {
        None = 0,
        
        Create = 1,
        
        Update = 2,
        
        Suspend = 3,
        
        Delete = 4,
        
        Undelete = 5,
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class StorageAccountPropertiesModel : ResourceBase
    {
        private ulong? _accountId;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public ulong? AccountId
        {
            get { return this._accountId; }
            set { this._accountId = value; }
        }
        
        private StorageAccountStatus _accountStatus;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public StorageAccountStatus AccountStatus
        {
            get { return this._accountStatus; }
            set { this._accountStatus = value; }
        }
        
        private StorageAccountType _accountType;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public StorageAccountType AccountType
        {
            get { return this._accountType; }
            set { this._accountType = value; }
        }
        
        private int _acquisitionOperationCount;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public int AcquisitionOperationCount
        {
            get { return this._acquisitionOperationCount; }
            set { this._acquisitionOperationCount = value; }
        }
        
        private string _alternateName;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string AlternateName
        {
            get { return this._alternateName; }
            set { this._alternateName = value; }
        }
        
        private string _creationTime;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string CreationTime
        {
            get { return this._creationTime; }
            set { this._creationTime = value; }
        }
        
        private StorageAccountOperation _currentOperation;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public StorageAccountOperation CurrentOperation
        {
            get { return this._currentOperation; }
            set { this._currentOperation = value; }
        }
        
        private string _customDomain;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string CustomDomain
        {
            get { return this._customDomain; }
            set { this._customDomain = value; }
        }
        
        private System.DateTime? _deletedTime;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public System.DateTime? DeletedTime
        {
            get { return this._deletedTime; }
            set { this._deletedTime = value; }
        }
        
        private Microsoft.AzureStack.Management.StorageAdmin.Models.WacAccountPermissions? _permissions;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public Microsoft.AzureStack.Management.StorageAdmin.Models.WacAccountPermissions? Permissions
        {
            get { return this._permissions; }
            set { this._permissions = value; }
        }
        
        private IDictionary<string, string> _primaryEndpoints;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public IDictionary<string, string> PrimaryEndpoints
        {
            get { return this._primaryEndpoints; }
            set { this._primaryEndpoints = value; }
        }
        
        private string _primaryLocation;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string PrimaryLocation
        {
            get { return this._primaryLocation; }
            set { this._primaryLocation = value; }
        }
        
        private System.DateTime? _recoveredTime;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public System.DateTime? RecoveredTime
        {
            get { return this._recoveredTime; }
            set { this._recoveredTime = value; }
        }
        
        private System.DateTime? _recycledTime;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public System.DateTime? RecycledTime
        {
            get { return this._recycledTime; }
            set { this._recycledTime = value; }
        }
        
        private StorageAccountState _state;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public StorageAccountState State
        {
            get { return this._state; }
            set { this._state = value; }
        }
        
        private RegionStatus _statusOfPrimary;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public RegionStatus StatusOfPrimary
        {
            get { return this._statusOfPrimary; }
            set { this._statusOfPrimary = value; }
        }
        
        private string _tenantAccountName;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string TenantAccountName
        {
            get { return this._tenantAccountName; }
            set { this._tenantAccountName = value; }
        }
        
        private string _tenantResourceGroupName;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string TenantResourceGroupName
        {
            get { return this._tenantResourceGroupName; }
            set { this._tenantResourceGroupName = value; }
        }
        
        private Guid _tenantSubscriptionId;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public Guid TenantSubscriptionId
        {
            get { return this._tenantSubscriptionId; }
            set { this._tenantSubscriptionId = value; }
        }
        
        private string _tenantViewId;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string TenantViewId
        {
            get { return this._tenantViewId; }
            set { this._tenantViewId = value; }
        }
        
        private Microsoft.AzureStack.Management.StorageAdmin.Models.WacAccountStates? _wacInternalState;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public Microsoft.AzureStack.Management.StorageAdmin.Models.WacAccountStates? WacInternalState
        {
            get { return this._wacInternalState; }
            set { this._wacInternalState = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAccountPropertiesModel
        /// class.
        /// </summary>
        public StorageAccountPropertiesModel()
        {
            this.PrimaryEndpoints = new LazyDictionary<string, string>();
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public enum StorageAccountState
    {
        PreCreate = 0,
        
        Created = 1,
        
        Suspended = 2,
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public enum StorageAccountStatus
    {
        Active = 0,
        
        Deleted = 1,
        
        OutOfRetentionPeriod = 2,
        
        Recycled = 3,
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public enum StorageAccountStatusSearchFilter
    {
        All = 0,
        
        Acitve = 1,
        
        Deleted = 2,
        
        OutOfRetentionPeriod = 3,
        
        Recycled = 4,
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class StorageAccountSyncRequest : ResourceBase
    {
        private string _apiVersion;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string ApiVersion
        {
            get { return this._apiVersion; }
            set { this._apiVersion = value; }
        }
        
        private string _resourceLocation;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string ResourceLocation
        {
            get { return this._resourceLocation; }
            set { this._resourceLocation = value; }
        }
        
        private string _targetOperaton;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string TargetOperaton
        {
            get { return this._targetOperaton; }
            set { this._targetOperaton = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAccountSyncRequest class.
        /// </summary>
        public StorageAccountSyncRequest()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class StorageAccountSyncResponse : AzureOperationResponse
    {
        private string _correlationId;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string CorrelationId
        {
            get { return this._correlationId; }
            set { this._correlationId = value; }
        }
        
        private string _frontdoorLocation;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string FrontdoorLocation
        {
            get { return this._frontdoorLocation; }
            set { this._frontdoorLocation = value; }
        }
        
        private string _message;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string Message
        {
            get { return this._message; }
            set { this._message = value; }
        }
        
        private string _timestamp;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string Timestamp
        {
            get { return this._timestamp; }
            set { this._timestamp = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAccountSyncResponse class.
        /// </summary>
        public StorageAccountSyncResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public enum StorageAccountType
    {
        StandardLRS = 0,
        
        StandardGRS = 1,
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class StorageAccountUndeleteParameters : ResourceBase
    {
        private string _newAccountName;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string NewAccountName
        {
            get { return this._newAccountName; }
            set { this._newAccountName = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAccountUndeleteParameters
        /// class.
        /// </summary>
        public StorageAccountUndeleteParameters()
        {
        }
    }
    
    public partial class StorageAdminError
    {
        private string _code;
        
        /// <summary>
        /// Required. Gets or sets the error code returned from the server.
        /// </summary>
        public string Code
        {
            get { return this._code; }
            set { this._code = value; }
        }
        
        private string _message;
        
        /// <summary>
        /// Required. Gets or sets the error message returned from the server.
        /// </summary>
        public string Message
        {
            get { return this._message; }
            set { this._message = value; }
        }
        
        private string _target;
        
        /// <summary>
        /// Optional. Gets or sets the target of the error.
        /// </summary>
        public string Target
        {
            get { return this._target; }
            set { this._target = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAdminError class.
        /// </summary>
        public StorageAdminError()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAdminError class with
        /// required arguments.
        /// </summary>
        public StorageAdminError(string code, string message)
            : this()
        {
            if (code == null)
            {
                throw new ArgumentNullException("code");
            }
            if (message == null)
            {
                throw new ArgumentNullException("message");
            }
            this.Code = code;
            this.Message = message;
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class TableFrontEndRoleInstance : RoleInstanceBase
    {
        private TableFrontEndRoleInstanceEffectiveSettings _settings;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public TableFrontEndRoleInstanceEffectiveSettings Settings
        {
            get { return this._settings; }
            set { this._settings = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TableFrontEndRoleInstance class.
        /// </summary>
        public TableFrontEndRoleInstance()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class TableFrontEndRoleInstanceEffectiveSettings : RoleInstanceEffectiveSettingsBase
    {
        private int? _frontEndCallbackThreadsCount;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndCallbackThreadsCount
        {
            get { return this._frontEndCallbackThreadsCount; }
            set { this._frontEndCallbackThreadsCount = value; }
        }
        
        private int? _frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds; }
            set { this._frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds = value; }
        }
        
        private bool? _frontEndCpuBasedKeepAliveThrottlingEnabled;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public bool? FrontEndCpuBasedKeepAliveThrottlingEnabled
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingEnabled; }
            set { this._frontEndCpuBasedKeepAliveThrottlingEnabled = value; }
        }
        
        private double? _frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? FrontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold; }
            set { this._frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold = value; }
        }
        
        private double? _frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? FrontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle; }
            set { this._frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle = value; }
        }
        
        private int? _frontEndHttpListenPort;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndHttpListenPort
        {
            get { return this._frontEndHttpListenPort; }
            set { this._frontEndHttpListenPort = value; }
        }
        
        private int? _frontEndHttpsListenPort;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndHttpsListenPort
        {
            get { return this._frontEndHttpsListenPort; }
            set { this._frontEndHttpsListenPort = value; }
        }
        
        private int? _frontEndMaxMillisecondsBetweenMemorySamples;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndMaxMillisecondsBetweenMemorySamples
        {
            get { return this._frontEndMaxMillisecondsBetweenMemorySamples; }
            set { this._frontEndMaxMillisecondsBetweenMemorySamples = value; }
        }
        
        private string _frontEndMemoryThrottleThresholdSettings;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string FrontEndMemoryThrottleThresholdSettings
        {
            get { return this._frontEndMemoryThrottleThresholdSettings; }
            set { this._frontEndMemoryThrottleThresholdSettings = value; }
        }
        
        private bool? _frontEndMemoryThrottlingEnabled;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public bool? FrontEndMemoryThrottlingEnabled
        {
            get { return this._frontEndMemoryThrottlingEnabled; }
            set { this._frontEndMemoryThrottlingEnabled = value; }
        }
        
        private int? _frontEndMinimumThreadPoolThreads;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndMinimumThreadPoolThreads
        {
            get { return this._frontEndMinimumThreadPoolThreads; }
            set { this._frontEndMinimumThreadPoolThreads = value; }
        }
        
        private int? _frontEndThreadPoolBasedKeepAliveIOCompletionThreshold;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndThreadPoolBasedKeepAliveIOCompletionThreshold
        {
            get { return this._frontEndThreadPoolBasedKeepAliveIOCompletionThreshold; }
            set { this._frontEndThreadPoolBasedKeepAliveIOCompletionThreshold = value; }
        }
        
        private int? _frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds
        {
            get { return this._frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds; }
            set { this._frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds = value; }
        }
        
        private double? _frontEndThreadPoolBasedKeepAlivePercentage;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? FrontEndThreadPoolBasedKeepAlivePercentage
        {
            get { return this._frontEndThreadPoolBasedKeepAlivePercentage; }
            set { this._frontEndThreadPoolBasedKeepAlivePercentage = value; }
        }
        
        private int? _frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndThreadPoolBasedKeepAliveWorkerThreadThreshold
        {
            get { return this._frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold; }
            set { this._frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold = value; }
        }
        
        private bool? _frontEndUseSlaTimeInAvailability;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public bool? FrontEndUseSlaTimeInAvailability
        {
            get { return this._frontEndUseSlaTimeInAvailability; }
            set { this._frontEndUseSlaTimeInAvailability = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// TableFrontEndRoleInstanceEffectiveSettings class.
        /// </summary>
        public TableFrontEndRoleInstanceEffectiveSettings()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class TableFrontEndRoleInstanceListResponse : AzureOperationResponse, IEnumerable<TableFrontEndRoleInstanceModel>
    {
        private IList<TableFrontEndRoleInstanceModel> _roleInstances;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public IList<TableFrontEndRoleInstanceModel> RoleInstances
        {
            get { return this._roleInstances; }
            set { this._roleInstances = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// TableFrontEndRoleInstanceListResponse class.
        /// </summary>
        public TableFrontEndRoleInstanceListResponse()
        {
            this.RoleInstances = new LazyList<TableFrontEndRoleInstanceModel>();
        }
        
        /// <summary>
        /// Gets the sequence of RoleInstances.
        /// </summary>
        public IEnumerator<TableFrontEndRoleInstanceModel> GetEnumerator()
        {
            return this.RoleInstances.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of RoleInstances.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class TableFrontEndRoleInstanceModel : ResourceBase
    {
        private TableFrontEndRoleInstance _properties;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public TableFrontEndRoleInstance Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TableFrontEndRoleInstanceModel
        /// class.
        /// </summary>
        public TableFrontEndRoleInstanceModel()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class TableFrontRoleInstanceGetResponse : AzureOperationResponse
    {
        private TableFrontEndRoleInstanceModel _roleInstance;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public TableFrontEndRoleInstanceModel RoleInstance
        {
            get { return this._roleInstance; }
            set { this._roleInstance = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TableFrontRoleInstanceGetResponse
        /// class.
        /// </summary>
        public TableFrontRoleInstanceGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class TableInfo
    {
        private DateTime _endTime;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public DateTime EndTime
        {
            get { return this._endTime; }
            set { this._endTime = value; }
        }
        
        private string _sasToken;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string SasToken
        {
            get { return this._sasToken; }
            set { this._sasToken = value; }
        }
        
        private DateTime _startTime;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public DateTime StartTime
        {
            get { return this._startTime; }
            set { this._startTime = value; }
        }
        
        private string _tableName;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string TableName
        {
            get { return this._tableName; }
            set { this._tableName = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TableInfo class.
        /// </summary>
        public TableInfo()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class TableMasterRoleInstance : RoleInstanceBase
    {
        private TableMasterRoleInstanceEffectiveSettings _settings;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public TableMasterRoleInstanceEffectiveSettings Settings
        {
            get { return this._settings; }
            set { this._settings = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TableMasterRoleInstance class.
        /// </summary>
        public TableMasterRoleInstance()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class TableMasterRoleInstanceEffectiveSettings : RoleInstanceEffectiveSettingsBase
    {
        private int? _tableMasterMaxCacheSize;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? TableMasterMaxCacheSize
        {
            get { return this._tableMasterMaxCacheSize; }
            set { this._tableMasterMaxCacheSize = value; }
        }
        
        private int? _tableMasterMaxConnections;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? TableMasterMaxConnections
        {
            get { return this._tableMasterMaxConnections; }
            set { this._tableMasterMaxConnections = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// TableMasterRoleInstanceEffectiveSettings class.
        /// </summary>
        public TableMasterRoleInstanceEffectiveSettings()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class TableMasterRoleInstanceGetResponse : AzureOperationResponse
    {
        private TableMasterRoleInstanceModel _roleInstance;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public TableMasterRoleInstanceModel RoleInstance
        {
            get { return this._roleInstance; }
            set { this._roleInstance = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// TableMasterRoleInstanceGetResponse class.
        /// </summary>
        public TableMasterRoleInstanceGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class TableMasterRoleInstanceListResponse : AzureOperationResponse, IEnumerable<TableMasterRoleInstanceModel>
    {
        private IList<TableMasterRoleInstanceModel> _roleInstances;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public IList<TableMasterRoleInstanceModel> RoleInstances
        {
            get { return this._roleInstances; }
            set { this._roleInstances = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// TableMasterRoleInstanceListResponse class.
        /// </summary>
        public TableMasterRoleInstanceListResponse()
        {
            this.RoleInstances = new LazyList<TableMasterRoleInstanceModel>();
        }
        
        /// <summary>
        /// Gets the sequence of RoleInstances.
        /// </summary>
        public IEnumerator<TableMasterRoleInstanceModel> GetEnumerator()
        {
            return this.RoleInstances.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of RoleInstances.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class TableMasterRoleInstanceModel : ResourceBase
    {
        private TableMasterRoleInstance _properties;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public TableMasterRoleInstance Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TableMasterRoleInstanceModel
        /// class.
        /// </summary>
        public TableMasterRoleInstanceModel()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class TableServerRoleInstance : RoleInstanceBase
    {
        private TableServerRoleInstanceEffectiveSettings _settings;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public TableServerRoleInstanceEffectiveSettings Settings
        {
            get { return this._settings; }
            set { this._settings = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TableServerRoleInstance class.
        /// </summary>
        public TableServerRoleInstance()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class TableServerRoleInstanceEffectiveSettings : RoleInstanceEffectiveSettingsBase
    {
        private double? _tableServerCpuUsagePercentageThrottling;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? TableServerCpuUsagePercentageThrottling
        {
            get { return this._tableServerCpuUsagePercentageThrottling; }
            set { this._tableServerCpuUsagePercentageThrottling = value; }
        }
        
        private int? _tableServerCpuUsageThrottlingThreshold;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? TableServerCpuUsageThrottlingThreshold
        {
            get { return this._tableServerCpuUsageThrottlingThreshold; }
            set { this._tableServerCpuUsageThrottlingThreshold = value; }
        }
        
        private int? _tableServerMaxCacheSize;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? TableServerMaxCacheSize
        {
            get { return this._tableServerMaxCacheSize; }
            set { this._tableServerMaxCacheSize = value; }
        }
        
        private int? _tableServerMaxConnections;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? TableServerMaxConnections
        {
            get { return this._tableServerMaxConnections; }
            set { this._tableServerMaxConnections = value; }
        }
        
        private double? _tableServerMaxThrottlingProbabilityForAccount;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? TableServerMaxThrottlingProbabilityForAccount
        {
            get { return this._tableServerMaxThrottlingProbabilityForAccount; }
            set { this._tableServerMaxThrottlingProbabilityForAccount = value; }
        }
        
        private int? _tableServerPendingRequestCountThrottlingThreshold;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? TableServerPendingRequestCountThrottlingThreshold
        {
            get { return this._tableServerPendingRequestCountThrottlingThreshold; }
            set { this._tableServerPendingRequestCountThrottlingThreshold = value; }
        }
        
        private int? _tableServerScanThrottlingThreshold;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? TableServerScanThrottlingThreshold
        {
            get { return this._tableServerScanThrottlingThreshold; }
            set { this._tableServerScanThrottlingThreshold = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// TableServerRoleInstanceEffectiveSettings class.
        /// </summary>
        public TableServerRoleInstanceEffectiveSettings()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class TableServerRoleInstanceGetResponse : AzureOperationResponse
    {
        private TableServerRoleInstanceModel _roleInstance;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public TableServerRoleInstanceModel RoleInstance
        {
            get { return this._roleInstance; }
            set { this._roleInstance = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// TableServerRoleInstanceGetResponse class.
        /// </summary>
        public TableServerRoleInstanceGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class TableServerRoleInstanceListResponse : AzureOperationResponse, IEnumerable<TableServerRoleInstanceModel>
    {
        private IList<TableServerRoleInstanceModel> _roleInstances;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public IList<TableServerRoleInstanceModel> RoleInstances
        {
            get { return this._roleInstances; }
            set { this._roleInstances = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// TableServerRoleInstanceListResponse class.
        /// </summary>
        public TableServerRoleInstanceListResponse()
        {
            this.RoleInstances = new LazyList<TableServerRoleInstanceModel>();
        }
        
        /// <summary>
        /// Gets the sequence of RoleInstances.
        /// </summary>
        public IEnumerator<TableServerRoleInstanceModel> GetEnumerator()
        {
            return this.RoleInstances.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of RoleInstances.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class TableServerRoleInstanceModel : ResourceBase
    {
        private TableServerRoleInstance _properties;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public TableServerRoleInstance Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TableServerRoleInstanceModel
        /// class.
        /// </summary>
        public TableServerRoleInstanceModel()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class TableServiceGetResponse : AzureOperationResponse
    {
        private TableServiceResponseResource _resource;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public TableServiceResponseResource Resource
        {
            get { return this._resource; }
            set { this._resource = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TableServiceGetResponse class.
        /// </summary>
        public TableServiceGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class TableServicePatchParameters : ResourceBase
    {
        private TableServiceRequest _tableService;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public TableServiceRequest TableService
        {
            get { return this._tableService; }
            set { this._tableService = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TableServicePatchParameters class.
        /// </summary>
        public TableServicePatchParameters()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class TableServiceRequest
    {
        private TableServiceWritableSettings _settings;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public TableServiceWritableSettings Settings
        {
            get { return this._settings; }
            set { this._settings = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TableServiceRequest class.
        /// </summary>
        public TableServiceRequest()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class TableServiceResponse : ServiceResponse
    {
        private TableServiceSettings _settings;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public TableServiceSettings Settings
        {
            get { return this._settings; }
            set { this._settings = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TableServiceResponse class.
        /// </summary>
        public TableServiceResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class TableServiceResponseResource : ResourceBase
    {
        private TableServiceResponse _tableService;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public TableServiceResponse TableService
        {
            get { return this._tableService; }
            set { this._tableService = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TableServiceResponseResource
        /// class.
        /// </summary>
        public TableServiceResponseResource()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class TableServiceSettings : TableServiceWritableSettings
    {
        private int? _frontEndHttpListenPort;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndHttpListenPort
        {
            get { return this._frontEndHttpListenPort; }
            set { this._frontEndHttpListenPort = value; }
        }
        
        private int? _frontEndHttpsListenPort;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndHttpsListenPort
        {
            get { return this._frontEndHttpsListenPort; }
            set { this._frontEndHttpsListenPort = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TableServiceSettings class.
        /// </summary>
        public TableServiceSettings()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class TableServiceWritableSettings
    {
        private int? _frontEndCallbackThreadsCount;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndCallbackThreadsCount
        {
            get { return this._frontEndCallbackThreadsCount; }
            set { this._frontEndCallbackThreadsCount = value; }
        }
        
        private int? _frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds; }
            set { this._frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds = value; }
        }
        
        private bool? _frontEndCpuBasedKeepAliveThrottlingEnabled;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public bool? FrontEndCpuBasedKeepAliveThrottlingEnabled
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingEnabled; }
            set { this._frontEndCpuBasedKeepAliveThrottlingEnabled = value; }
        }
        
        private double? _frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? FrontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold; }
            set { this._frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold = value; }
        }
        
        private double? _frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? FrontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle; }
            set { this._frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle = value; }
        }
        
        private int? _frontEndMaxMillisecondsBetweenMemorySamples;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndMaxMillisecondsBetweenMemorySamples
        {
            get { return this._frontEndMaxMillisecondsBetweenMemorySamples; }
            set { this._frontEndMaxMillisecondsBetweenMemorySamples = value; }
        }
        
        private string _frontEndMemoryThrottleThresholdSettings;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string FrontEndMemoryThrottleThresholdSettings
        {
            get { return this._frontEndMemoryThrottleThresholdSettings; }
            set { this._frontEndMemoryThrottleThresholdSettings = value; }
        }
        
        private bool? _frontEndMemoryThrottlingEnabled;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public bool? FrontEndMemoryThrottlingEnabled
        {
            get { return this._frontEndMemoryThrottlingEnabled; }
            set { this._frontEndMemoryThrottlingEnabled = value; }
        }
        
        private int? _frontEndMinimumThreadPoolThreads;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndMinimumThreadPoolThreads
        {
            get { return this._frontEndMinimumThreadPoolThreads; }
            set { this._frontEndMinimumThreadPoolThreads = value; }
        }
        
        private int? _frontEndThreadPoolBasedKeepAliveIOCompletionThreshold;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndThreadPoolBasedKeepAliveIOCompletionThreshold
        {
            get { return this._frontEndThreadPoolBasedKeepAliveIOCompletionThreshold; }
            set { this._frontEndThreadPoolBasedKeepAliveIOCompletionThreshold = value; }
        }
        
        private int? _frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds
        {
            get { return this._frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds; }
            set { this._frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds = value; }
        }
        
        private double? _frontEndThreadPoolBasedKeepAlivePercentage;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? FrontEndThreadPoolBasedKeepAlivePercentage
        {
            get { return this._frontEndThreadPoolBasedKeepAlivePercentage; }
            set { this._frontEndThreadPoolBasedKeepAlivePercentage = value; }
        }
        
        private int? _frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndThreadPoolBasedKeepAliveWorkerThreadThreshold
        {
            get { return this._frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold; }
            set { this._frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold = value; }
        }
        
        private bool? _frontEndUseSlaTimeInAvailability;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public bool? FrontEndUseSlaTimeInAvailability
        {
            get { return this._frontEndUseSlaTimeInAvailability; }
            set { this._frontEndUseSlaTimeInAvailability = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TableServiceWritableSettings
        /// class.
        /// </summary>
        public TableServiceWritableSettings()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    [Flags]
    public enum WacAccountPermissions
    {
        Empty = 0,
        
        None = 2,
        
        Read = 4,
        
        Delete = 8,
        
        Write = 16,
        
        Full = 2147483644,
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    [Flags]
    public enum WacAccountStates
    {
        None = 0,
        
        Active = 1,
        
        Deleted = 2,
        
        AboveQuota = 4,
        
        Suspended = 8,
        
        All = 15,
    }
}

namespace Microsoft.AzureStack.Management.StorageAdmin
{
    public static partial class StorageAdminManagementClientExtensions
    {
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IStorageAdminManagementClient.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse GetLongRunningOperationStatus(this IStorageAdminManagementClient operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAdminManagementClient)s).GetLongRunningOperationStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IStorageAdminManagementClient.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> GetLongRunningOperationStatusAsync(this IStorageAdminManagementClient operations, string operationStatusLink)
        {
            return operations.GetLongRunningOperationStatusAsync(operationStatusLink, CancellationToken.None);
        }
    }
    
    public partial interface IStorageAdminManagementClient : IDisposable
    {
        /// <summary>
        /// Gets the API version.
        /// </summary>
        string ApiVersion
        {
            get; 
        }
        
        /// <summary>
        /// Gets the URI used as the base for all cloud service requests.
        /// </summary>
        Uri BaseUri
        {
            get; 
        }
        
        /// <summary>
        /// Gets subscription credentials which uniquely identify Microsoft
        /// Azure subscription. The subscription ID forms part of the URI for
        /// every service call.
        /// </summary>
        SubscriptionCloudCredentials Credentials
        {
            get; 
        }
        
        /// <summary>
        /// Gets or sets the initial timeout for Long Running Operations.
        /// </summary>
        int LongRunningOperationInitialTimeout
        {
            get; set; 
        }
        
        /// <summary>
        /// Gets or sets the retry timeout for Long Running Operations.
        /// </summary>
        int LongRunningOperationRetryTimeout
        {
            get; set; 
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        IAccountContainerServerInstanceOperations AccountContainerServerInstances
        {
            get; 
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        IBlobFrontendInstanceOperations BlobFrontendInstances
        {
            get; 
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        IBlobServerInstanceOperations BlobServerInstances
        {
            get; 
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        IBlobServiceOperations BlobService
        {
            get; 
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        IFarmOperations Farms
        {
            get; 
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        IFaultOperations Faults
        {
            get; 
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        IHealthMonitoringServerInstanceOperations HealthMonitoringServerInstances
        {
            get; 
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        IManagementServiceOperations ManagementService
        {
            get; 
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        IMetricsServerInstanceOperations MetricsServerInstances
        {
            get; 
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        INodeOperations Nodes
        {
            get; 
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        IShareOperations Shares
        {
            get; 
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        IStorageAccountOperations StorageAccounts
        {
            get; 
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        ITableFrontendInstanceOperations TableFrontendInstances
        {
            get; 
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        ITableMasterInstanceOperations TableMasterInstances
        {
            get; 
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        ITableServerInstanceOperations TableServerInstances
        {
            get; 
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        ITableServiceOperations TableService
        {
            get; 
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        Task<LongRunningOperationResponse> GetLongRunningOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken);
    }
    
    public partial class StorageAdminManagementClient : ServiceClient<StorageAdminManagementClient>, IStorageAdminManagementClient
    {
        private string _apiVersion;
        
        /// <summary>
        /// Gets the API version.
        /// </summary>
        public string ApiVersion
        {
            get { return this._apiVersion; }
        }
        
        private Uri _baseUri;
        
        /// <summary>
        /// Gets the URI used as the base for all cloud service requests.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
        }
        
        private SubscriptionCloudCredentials _credentials;
        
        /// <summary>
        /// Gets subscription credentials which uniquely identify Microsoft
        /// Azure subscription. The subscription ID forms part of the URI for
        /// every service call.
        /// </summary>
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
        }
        
        private int _longRunningOperationInitialTimeout;
        
        /// <summary>
        /// Gets or sets the initial timeout for Long Running Operations.
        /// </summary>
        public int LongRunningOperationInitialTimeout
        {
            get { return this._longRunningOperationInitialTimeout; }
            set { this._longRunningOperationInitialTimeout = value; }
        }
        
        private int _longRunningOperationRetryTimeout;
        
        /// <summary>
        /// Gets or sets the retry timeout for Long Running Operations.
        /// </summary>
        public int LongRunningOperationRetryTimeout
        {
            get { return this._longRunningOperationRetryTimeout; }
            set { this._longRunningOperationRetryTimeout = value; }
        }
        
        private IAccountContainerServerInstanceOperations _accountContainerServerInstances;
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        public virtual IAccountContainerServerInstanceOperations AccountContainerServerInstances
        {
            get { return this._accountContainerServerInstances; }
        }
        
        private IBlobFrontendInstanceOperations _blobFrontendInstances;
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        public virtual IBlobFrontendInstanceOperations BlobFrontendInstances
        {
            get { return this._blobFrontendInstances; }
        }
        
        private IBlobServerInstanceOperations _blobServerInstances;
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        public virtual IBlobServerInstanceOperations BlobServerInstances
        {
            get { return this._blobServerInstances; }
        }
        
        private IBlobServiceOperations _blobService;
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        public virtual IBlobServiceOperations BlobService
        {
            get { return this._blobService; }
        }
        
        private IFarmOperations _farms;
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        public virtual IFarmOperations Farms
        {
            get { return this._farms; }
        }
        
        private IFaultOperations _faults;
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        public virtual IFaultOperations Faults
        {
            get { return this._faults; }
        }
        
        private IHealthMonitoringServerInstanceOperations _healthMonitoringServerInstances;
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        public virtual IHealthMonitoringServerInstanceOperations HealthMonitoringServerInstances
        {
            get { return this._healthMonitoringServerInstances; }
        }
        
        private IManagementServiceOperations _managementService;
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        public virtual IManagementServiceOperations ManagementService
        {
            get { return this._managementService; }
        }
        
        private IMetricsServerInstanceOperations _metricsServerInstances;
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        public virtual IMetricsServerInstanceOperations MetricsServerInstances
        {
            get { return this._metricsServerInstances; }
        }
        
        private INodeOperations _nodes;
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        public virtual INodeOperations Nodes
        {
            get { return this._nodes; }
        }
        
        private IShareOperations _shares;
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        public virtual IShareOperations Shares
        {
            get { return this._shares; }
        }
        
        private IStorageAccountOperations _storageAccounts;
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        public virtual IStorageAccountOperations StorageAccounts
        {
            get { return this._storageAccounts; }
        }
        
        private ITableFrontendInstanceOperations _tableFrontendInstances;
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        public virtual ITableFrontendInstanceOperations TableFrontendInstances
        {
            get { return this._tableFrontendInstances; }
        }
        
        private ITableMasterInstanceOperations _tableMasterInstances;
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        public virtual ITableMasterInstanceOperations TableMasterInstances
        {
            get { return this._tableMasterInstances; }
        }
        
        private ITableServerInstanceOperations _tableServerInstances;
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        public virtual ITableServerInstanceOperations TableServerInstances
        {
            get { return this._tableServerInstances; }
        }
        
        private ITableServiceOperations _tableService;
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        public virtual ITableServiceOperations TableService
        {
            get { return this._tableService; }
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAdminManagementClient
        /// class.
        /// </summary>
        public StorageAdminManagementClient()
            : base()
        {
            this._accountContainerServerInstances = new AccountContainerServerInstanceOperations(this);
            this._blobFrontendInstances = new BlobFrontendInstanceOperations(this);
            this._blobServerInstances = new BlobServerInstanceOperations(this);
            this._blobService = new BlobServiceOperations(this);
            this._farms = new FarmOperations(this);
            this._faults = new FaultOperations(this);
            this._healthMonitoringServerInstances = new HealthMonitoringServerInstanceOperations(this);
            this._managementService = new ManagementServiceOperations(this);
            this._metricsServerInstances = new MetricsServerInstanceOperations(this);
            this._nodes = new NodeOperations(this);
            this._shares = new ShareOperations(this);
            this._storageAccounts = new StorageAccountOperations(this);
            this._tableFrontendInstances = new TableFrontendInstanceOperations(this);
            this._tableMasterInstances = new TableMasterInstanceOperations(this);
            this._tableServerInstances = new TableServerInstanceOperations(this);
            this._tableService = new TableServiceOperations(this);
            this._apiVersion = "2015-12-01-preview";
            this._longRunningOperationInitialTimeout = -1;
            this._longRunningOperationRetryTimeout = -1;
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAdminManagementClient
        /// class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='baseUri'>
        /// Optional. Gets the URI used as the base for all cloud service
        /// requests.
        /// </param>
        public StorageAdminManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAdminManagementClient
        /// class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        public StorageAdminManagementClient(SubscriptionCloudCredentials credentials)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = null;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAdminManagementClient
        /// class.
        /// </summary>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public StorageAdminManagementClient(HttpClient httpClient)
            : base(httpClient)
        {
            this._accountContainerServerInstances = new AccountContainerServerInstanceOperations(this);
            this._blobFrontendInstances = new BlobFrontendInstanceOperations(this);
            this._blobServerInstances = new BlobServerInstanceOperations(this);
            this._blobService = new BlobServiceOperations(this);
            this._farms = new FarmOperations(this);
            this._faults = new FaultOperations(this);
            this._healthMonitoringServerInstances = new HealthMonitoringServerInstanceOperations(this);
            this._managementService = new ManagementServiceOperations(this);
            this._metricsServerInstances = new MetricsServerInstanceOperations(this);
            this._nodes = new NodeOperations(this);
            this._shares = new ShareOperations(this);
            this._storageAccounts = new StorageAccountOperations(this);
            this._tableFrontendInstances = new TableFrontendInstanceOperations(this);
            this._tableMasterInstances = new TableMasterInstanceOperations(this);
            this._tableServerInstances = new TableServerInstanceOperations(this);
            this._tableService = new TableServiceOperations(this);
            this._apiVersion = "2015-12-01-preview";
            this._longRunningOperationInitialTimeout = -1;
            this._longRunningOperationRetryTimeout = -1;
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAdminManagementClient
        /// class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='baseUri'>
        /// Optional. Gets the URI used as the base for all cloud service
        /// requests.
        /// </param>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public StorageAdminManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri, HttpClient httpClient)
            : this(httpClient)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAdminManagementClient
        /// class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public StorageAdminManagementClient(SubscriptionCloudCredentials credentials, HttpClient httpClient)
            : this(httpClient)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = null;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Clones properties from current instance to another
        /// StorageAdminManagementClient instance
        /// </summary>
        /// <param name='client'>
        /// Instance of StorageAdminManagementClient to clone to
        /// </param>
        protected override void Clone(ServiceClient<StorageAdminManagementClient> client)
        {
            base.Clone(client);
            
            if (client is StorageAdminManagementClient)
            {
                StorageAdminManagementClient clonedClient = ((StorageAdminManagementClient)client);
                
                clonedClient._credentials = this._credentials;
                clonedClient._baseUri = this._baseUri;
                clonedClient._apiVersion = this._apiVersion;
                clonedClient._longRunningOperationInitialTimeout = this._longRunningOperationInitialTimeout;
                clonedClient._longRunningOperationRetryTimeout = this._longRunningOperationRetryTimeout;
                
                clonedClient.Credentials.InitializeServiceClient(clonedClient);
            }
        }
        
        /// <summary>
        /// Parse enum values for type StorageAccountState.
        /// </summary>
        /// <param name='value'>
        /// The value to parse.
        /// </param>
        /// <returns>
        /// The enum value.
        /// </returns>
        internal static StorageAccountState ParseStorageAccountState(string value)
        {
            if ("Creating".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return StorageAccountState.PreCreate;
            }
            if ("Succeeded".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return StorageAccountState.Created;
            }
            if ("Suspended".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return StorageAccountState.Suspended;
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Convert an enum of type StorageAccountState to a string.
        /// </summary>
        /// <param name='value'>
        /// The value to convert to a string.
        /// </param>
        /// <returns>
        /// The enum value as a string.
        /// </returns>
        internal static string StorageAccountStateToString(StorageAccountState value)
        {
            if (value == StorageAccountState.PreCreate)
            {
                return "Creating";
            }
            if (value == StorageAccountState.Created)
            {
                return "Succeeded";
            }
            if (value == StorageAccountState.Suspended)
            {
                return "Suspended";
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Parse enum values for type StorageAccountType.
        /// </summary>
        /// <param name='value'>
        /// The value to parse.
        /// </param>
        /// <returns>
        /// The enum value.
        /// </returns>
        internal static StorageAccountType ParseStorageAccountType(string value)
        {
            if ("Standard_LRS".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return StorageAccountType.StandardLRS;
            }
            if ("Standard_GRS".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return StorageAccountType.StandardGRS;
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Convert an enum of type StorageAccountType to a string.
        /// </summary>
        /// <param name='value'>
        /// The value to convert to a string.
        /// </param>
        /// <returns>
        /// The enum value as a string.
        /// </returns>
        internal static string StorageAccountTypeToString(StorageAccountType value)
        {
            if (value == StorageAccountType.StandardLRS)
            {
                return "Standard_LRS";
            }
            if (value == StorageAccountType.StandardGRS)
            {
                return "Standard_GRS";
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Parse enum values for type WacAccountPermissions.
        /// </summary>
        /// <param name='value'>
        /// The value to parse.
        /// </param>
        /// <returns>
        /// The enum value.
        /// </returns>
        internal static WacAccountPermissions ParseWacAccountPermissions(string value)
        {
            if ("Empty".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return WacAccountPermissions.Empty;
            }
            if ("None".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return WacAccountPermissions.None;
            }
            if ("Read".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return WacAccountPermissions.Read;
            }
            if ("Delete".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return WacAccountPermissions.Delete;
            }
            if ("Write".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return WacAccountPermissions.Write;
            }
            if ("Full".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return WacAccountPermissions.Full;
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Convert an enum of type WacAccountPermissions to a string.
        /// </summary>
        /// <param name='value'>
        /// The value to convert to a string.
        /// </param>
        /// <returns>
        /// The enum value as a string.
        /// </returns>
        internal static string WacAccountPermissionsToString(WacAccountPermissions value)
        {
            if (value == WacAccountPermissions.Empty)
            {
                return "Empty";
            }
            if (value == WacAccountPermissions.None)
            {
                return "None";
            }
            if (value == WacAccountPermissions.Read)
            {
                return "Read";
            }
            if (value == WacAccountPermissions.Delete)
            {
                return "Delete";
            }
            if (value == WacAccountPermissions.Write)
            {
                return "Write";
            }
            if (value == WacAccountPermissions.Full)
            {
                return "Full";
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Parse enum values for type WacAccountStates.
        /// </summary>
        /// <param name='value'>
        /// The value to parse.
        /// </param>
        /// <returns>
        /// The enum value.
        /// </returns>
        internal static WacAccountStates ParseWacAccountStates(string value)
        {
            if ("None".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return WacAccountStates.None;
            }
            if ("Active".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return WacAccountStates.Active;
            }
            if ("Deleted".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return WacAccountStates.Deleted;
            }
            if ("AboveQuota".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return WacAccountStates.AboveQuota;
            }
            if ("Suspended".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return WacAccountStates.Suspended;
            }
            if ("All".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return WacAccountStates.All;
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Convert an enum of type WacAccountStates to a string.
        /// </summary>
        /// <param name='value'>
        /// The value to convert to a string.
        /// </param>
        /// <returns>
        /// The enum value as a string.
        /// </returns>
        internal static string WacAccountStatesToString(WacAccountStates value)
        {
            if (value == WacAccountStates.None)
            {
                return "None";
            }
            if (value == WacAccountStates.Active)
            {
                return "Active";
            }
            if (value == WacAccountStates.Deleted)
            {
                return "Deleted";
            }
            if (value == WacAccountStates.AboveQuota)
            {
                return "AboveQuota";
            }
            if (value == WacAccountStates.Suspended)
            {
                return "Suspended";
            }
            if (value == WacAccountStates.All)
            {
                return "All";
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> GetLongRunningOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetLongRunningOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-12-01-preview");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict || statusCode == HttpStatusCode.NotFound || statusCode == HttpStatusCode.MethodNotAllowed || statusCode == HttpStatusCode.Forbidden)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class AccountContainerServerInstanceOperationsExtensions
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IAccountContainerServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse BeginRestarting(this IAccountContainerServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAccountContainerServerInstanceOperations)s).BeginRestartingAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IAccountContainerServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> BeginRestartingAsync(this IAccountContainerServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.BeginRestartingAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IAccountContainerServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static AccountContainerRoleInstanceGetResponse Get(this IAccountContainerServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAccountContainerServerInstanceOperations)s).GetAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IAccountContainerServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<AccountContainerRoleInstanceGetResponse> GetAsync(this IAccountContainerServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.GetAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IAccountContainerServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricDefinitionsResult GetMetricDefinitions(this IAccountContainerServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAccountContainerServerInstanceOperations)s).GetMetricDefinitionsAsync(resourceGroupName, farmId, instanceId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IAccountContainerServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(this IAccountContainerServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return operations.GetMetricDefinitionsAsync(resourceGroupName, farmId, instanceId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IAccountContainerServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricsResult GetMetrics(this IAccountContainerServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAccountContainerServerInstanceOperations)s).GetMetricsAsync(resourceGroupName, farmId, instanceId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IAccountContainerServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricsResult> GetMetricsAsync(this IAccountContainerServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return operations.GetMetricsAsync(resourceGroupName, farmId, instanceId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IAccountContainerServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static AccountContainerRoleInstanceListResponse List(this IAccountContainerServerInstanceOperations operations, string resourceGroupName, string farmId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAccountContainerServerInstanceOperations)s).ListAsync(resourceGroupName, farmId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IAccountContainerServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<AccountContainerRoleInstanceListResponse> ListAsync(this IAccountContainerServerInstanceOperations operations, string resourceGroupName, string farmId)
        {
            return operations.ListAsync(resourceGroupName, farmId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IAccountContainerServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Restart(this IAccountContainerServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAccountContainerServerInstanceOperations)s).RestartAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IAccountContainerServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> RestartAsync(this IAccountContainerServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.RestartAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IAccountContainerServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse SettingsPullNow(this IAccountContainerServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAccountContainerServerInstanceOperations)s).SettingsPullNowAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IAccountContainerServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> SettingsPullNowAsync(this IAccountContainerServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.SettingsPullNowAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    public partial interface IAccountContainerServerInstanceOperations
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        Task<LongRunningOperationResponse> BeginRestartingAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<AccountContainerRoleInstanceGetResponse> GetAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<AccountContainerRoleInstanceListResponse> ListAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> RestartAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> SettingsPullNowAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class AccountContainerServerInstanceOperations : IServiceOperations<StorageAdminManagementClient>, IAccountContainerServerInstanceOperations
    {
        /// <summary>
        /// Initializes a new instance of the
        /// AccountContainerServerInstanceOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal AccountContainerServerInstanceOperations(StorageAdminManagementClient client)
        {
            this._client = client;
        }
        
        private StorageAdminManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.StorageAdminManagementClient.
        /// </summary>
        public StorageAdminManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginRestartingAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "BeginRestartingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/accountcontainerserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/restart";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict || statusCode == HttpStatusCode.NotFound || statusCode == HttpStatusCode.MethodNotAllowed || statusCode == HttpStatusCode.Forbidden)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<AccountContainerRoleInstanceGetResponse> GetAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/accountcontainerserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AccountContainerRoleInstanceGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AccountContainerRoleInstanceGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            AccountContainerRoleInstanceModel roleInstanceInstance = new AccountContainerRoleInstanceModel();
                            result.RoleInstance = roleInstanceInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                AccountContainerRoleInstance propertiesInstance = new AccountContainerRoleInstance();
                                roleInstanceInstance.Properties = propertiesInstance;
                                
                                JToken settingsValue = propertiesValue["settings"];
                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                {
                                    AccountContainerRoleInstanceEffectiveSettings settingsInstance = new AccountContainerRoleInstanceEffectiveSettings();
                                    propertiesInstance.Settings = settingsInstance;
                                    
                                    JToken wacContainerGcFullScanIntervalInSecondsValue = settingsValue["wacContainerGcFullScanIntervalInSeconds"];
                                    if (wacContainerGcFullScanIntervalInSecondsValue != null && wacContainerGcFullScanIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int wacContainerGcFullScanIntervalInSecondsInstance = ((int)wacContainerGcFullScanIntervalInSecondsValue);
                                        settingsInstance.WacContainerGcFullScanIntervalInSeconds = wacContainerGcFullScanIntervalInSecondsInstance;
                                    }
                                    
                                    JToken wacAccountGcFullScanIntervalInSecondsValue = settingsValue["wacAccountGcFullScanIntervalInSeconds"];
                                    if (wacAccountGcFullScanIntervalInSecondsValue != null && wacAccountGcFullScanIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int wacAccountGcFullScanIntervalInSecondsInstance = ((int)wacAccountGcFullScanIntervalInSecondsValue);
                                        settingsInstance.WacAccountGcFullScanIntervalInSeconds = wacAccountGcFullScanIntervalInSecondsInstance;
                                    }
                                    
                                    JToken wacGcWaitPeriodInMillisecondsValue = settingsValue["wacGcWaitPeriodInMilliseconds"];
                                    if (wacGcWaitPeriodInMillisecondsValue != null && wacGcWaitPeriodInMillisecondsValue.Type != JTokenType.Null)
                                    {
                                        int wacGcWaitPeriodInMillisecondsInstance = ((int)wacGcWaitPeriodInMillisecondsValue);
                                        settingsInstance.WacGcWaitPeriodInMilliseconds = wacGcWaitPeriodInMillisecondsInstance;
                                    }
                                    
                                    JToken wacHoldingPeriodInHoursValue = settingsValue["wacHoldingPeriodInHours"];
                                    if (wacHoldingPeriodInHoursValue != null && wacHoldingPeriodInHoursValue.Type != JTokenType.Null)
                                    {
                                        int wacHoldingPeriodInHoursInstance = ((int)wacHoldingPeriodInHoursValue);
                                        settingsInstance.WacHoldingPeriodInHours = wacHoldingPeriodInHoursInstance;
                                    }
                                    
                                    JToken wacMaxGcThreadNumberValue = settingsValue["wacMaxGcThreadNumber"];
                                    if (wacMaxGcThreadNumberValue != null && wacMaxGcThreadNumberValue.Type != JTokenType.Null)
                                    {
                                        int wacMaxGcThreadNumberInstance = ((int)wacMaxGcThreadNumberValue);
                                        settingsInstance.WacMaxGcThreadNumber = wacMaxGcThreadNumberInstance;
                                    }
                                    
                                    JToken wacMaxCacheSizeValue = settingsValue["wacMaxCacheSize"];
                                    if (wacMaxCacheSizeValue != null && wacMaxCacheSizeValue.Type != JTokenType.Null)
                                    {
                                        int wacMaxCacheSizeInstance = ((int)wacMaxCacheSizeValue);
                                        settingsInstance.WacMaxCacheSize = wacMaxCacheSizeInstance;
                                    }
                                    
                                    JToken wacMaxConnectionsValue = settingsValue["wacMaxConnections"];
                                    if (wacMaxConnectionsValue != null && wacMaxConnectionsValue.Type != JTokenType.Null)
                                    {
                                        int wacMaxConnectionsInstance = ((int)wacMaxConnectionsValue);
                                        settingsInstance.WacMaxConnections = wacMaxConnectionsInstance;
                                    }
                                    
                                    JToken settingsPollingIntervalInSecondsValue = settingsValue["settingsPollingIntervalInSeconds"];
                                    if (settingsPollingIntervalInSecondsValue != null && settingsPollingIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int settingsPollingIntervalInSecondsInstance = ((int)settingsPollingIntervalInSecondsValue);
                                        settingsInstance.SettingsPollingIntervalInSeconds = settingsPollingIntervalInSecondsInstance;
                                    }
                                    
                                    JToken settingsTimestampValue = settingsValue["settingsTimestamp"];
                                    if (settingsTimestampValue != null && settingsTimestampValue.Type != JTokenType.Null)
                                    {
                                        string settingsTimestampInstance = ((string)settingsTimestampValue);
                                        settingsInstance.SettingsTimestamp = settingsTimestampInstance;
                                    }
                                }
                                
                                JToken roleIdentifierValue = propertiesValue["roleIdentifier"];
                                if (roleIdentifierValue != null && roleIdentifierValue.Type != JTokenType.Null)
                                {
                                    string roleIdentifierInstance = ((string)roleIdentifierValue);
                                    propertiesInstance.RoleIdentifier = roleIdentifierInstance;
                                }
                                
                                JToken versionValue = propertiesValue["version"];
                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                {
                                    string versionInstance = ((string)versionValue);
                                    propertiesInstance.Version = versionInstance;
                                }
                                
                                JToken statusValue = propertiesValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    RoleInstanceStatus statusInstance = ((RoleInstanceStatus)Enum.Parse(typeof(RoleInstanceStatus), ((string)statusValue), true));
                                    propertiesInstance.Status = statusInstance;
                                }
                                
                                JToken healthStatusValue = propertiesValue["healthStatus"];
                                if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                {
                                    HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                    propertiesInstance.HealthStatus = healthStatusInstance;
                                }
                                
                                JToken nodeUriValue = propertiesValue["nodeUri"];
                                if (nodeUriValue != null && nodeUriValue.Type != JTokenType.Null)
                                {
                                    string nodeUriInstance = ((string)nodeUriValue);
                                    propertiesInstance.NodeUri = nodeUriInstance;
                                }
                                
                                JToken historyInfosArray = propertiesValue["historyInfos"];
                                if (historyInfosArray != null && historyInfosArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken historyInfosValue in ((JArray)historyInfosArray))
                                    {
                                        RoleInstanceHistoricEntry roleInstanceHistoricEntryInstance = new RoleInstanceHistoricEntry();
                                        propertiesInstance.HistoryInfos.Add(roleInstanceHistoricEntryInstance);
                                        
                                        JToken startTimeValue = historyInfosValue["startTime"];
                                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime startTimeInstance = ((DateTime)startTimeValue);
                                            roleInstanceHistoricEntryInstance.StartTime = startTimeInstance;
                                        }
                                        
                                        JToken endTimeValue = historyInfosValue["endTime"];
                                        if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime endTimeInstance = ((DateTime)endTimeValue);
                                            roleInstanceHistoricEntryInstance.EndTime = endTimeInstance;
                                        }
                                        
                                        JToken durationValue = historyInfosValue["duration"];
                                        if (durationValue != null && durationValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan durationInstance = XmlConvert.ToTimeSpan(((string)durationValue));
                                            roleInstanceHistoricEntryInstance.Duration = durationInstance;
                                        }
                                        
                                        JToken roleIdentifierValue2 = historyInfosValue["roleIdentifier"];
                                        if (roleIdentifierValue2 != null && roleIdentifierValue2.Type != JTokenType.Null)
                                        {
                                            string roleIdentifierInstance2 = ((string)roleIdentifierValue2);
                                            roleInstanceHistoricEntryInstance.RoleIdentifier = roleIdentifierInstance2;
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                roleInstanceInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                roleInstanceInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                roleInstanceInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                roleInstanceInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    roleInstanceInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricDefinitionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/accountcontainerserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/metricdefinitions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricDefinitionsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricDefinitionsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    MetricDefinition metricDefinitionInstance = new MetricDefinition();
                                    result.Value.Add(metricDefinitionInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricDefinitionInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken unitValue = valueValue["unit"];
                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit unitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)unitValue), true));
                                        metricDefinitionInstance.Unit = unitInstance;
                                    }
                                    
                                    JToken primaryAggregationTypeValue = valueValue["primaryAggregationType"];
                                    if (primaryAggregationTypeValue != null && primaryAggregationTypeValue.Type != JTokenType.Null)
                                    {
                                        MetricPrimaryAggregationType primaryAggregationTypeInstance = ((MetricPrimaryAggregationType)Enum.Parse(typeof(MetricPrimaryAggregationType), ((string)primaryAggregationTypeValue), true));
                                        metricDefinitionInstance.PrimaryAggregationType = primaryAggregationTypeInstance;
                                    }
                                    
                                    JToken metricAvailabilitiesArray = valueValue["metricAvailabilities"];
                                    if (metricAvailabilitiesArray != null && metricAvailabilitiesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricAvailabilitiesValue in ((JArray)metricAvailabilitiesArray))
                                        {
                                            MetricAvailability metricAvailabilityInstance = new MetricAvailability();
                                            metricDefinitionInstance.MetricAvailabilities.Add(metricAvailabilityInstance);
                                            
                                            JToken timeGrainValue = metricAvailabilitiesValue["timeGrain"];
                                            if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                                metricAvailabilityInstance.TimeGrain = timeGrainInstance;
                                            }
                                            
                                            JToken retentionValue = metricAvailabilitiesValue["retention"];
                                            if (retentionValue != null && retentionValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan retentionInstance = XmlConvert.ToTimeSpan(((string)retentionValue));
                                                metricAvailabilityInstance.Retention = retentionInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/accountcontainerserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/metrics";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Metric metricInstance = new Metric();
                                    result.Metrics.Add(metricInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken metricUnitValue = valueValue["metricUnit"];
                                    if (metricUnitValue != null && metricUnitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit metricUnitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)metricUnitValue), true));
                                        metricInstance.MetricUnit = metricUnitInstance;
                                    }
                                    
                                    JToken timeGrainValue = valueValue["timeGrain"];
                                    if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                        metricInstance.TimeGrain = timeGrainInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        metricInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = valueValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        metricInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken metricValuesArray = valueValue["metricValues"];
                                    if (metricValuesArray != null && metricValuesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricValuesValue in ((JArray)metricValuesArray))
                                        {
                                            MetricValue metricValueInstance = new MetricValue();
                                            metricInstance.MetricValues.Add(metricValueInstance);
                                            
                                            JToken timeStampValue = metricValuesValue["timeStamp"];
                                            if (timeStampValue != null && timeStampValue.Type != JTokenType.Null)
                                            {
                                                DateTime timeStampInstance = ((DateTime)timeStampValue);
                                                metricValueInstance.TimeStamp = timeStampInstance;
                                            }
                                            
                                            JToken averageValue = metricValuesValue["average"];
                                            if (averageValue != null && averageValue.Type != JTokenType.Null)
                                            {
                                                double averageInstance = ((double)averageValue);
                                                metricValueInstance.Average = averageInstance;
                                            }
                                            
                                            JToken minimumValue = metricValuesValue["minimum"];
                                            if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                            {
                                                double minimumInstance = ((double)minimumValue);
                                                metricValueInstance.Minimum = minimumInstance;
                                            }
                                            
                                            JToken maximumValue = metricValuesValue["maximum"];
                                            if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                            {
                                                double maximumInstance = ((double)maximumValue);
                                                metricValueInstance.Maximum = maximumInstance;
                                            }
                                            
                                            JToken totalValue = metricValuesValue["total"];
                                            if (totalValue != null && totalValue.Type != JTokenType.Null)
                                            {
                                                double totalInstance = ((double)totalValue);
                                                metricValueInstance.Total = totalInstance;
                                            }
                                            
                                            JToken countValue = metricValuesValue["count"];
                                            if (countValue != null && countValue.Type != JTokenType.Null)
                                            {
                                                int countInstance = ((int)countValue);
                                                metricValueInstance.Count = countInstance;
                                            }
                                            
                                            JToken propertiesValue = metricValuesValue["properties"];
                                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                            {
                                                string propertiesInstance = propertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                metricValueInstance.Properties = propertiesInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<AccountContainerRoleInstanceListResponse> ListAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/accountcontainerserverinstances";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AccountContainerRoleInstanceListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AccountContainerRoleInstanceListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken roleInstancesArray = responseDoc;
                            if (roleInstancesArray != null && roleInstancesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken roleInstancesValue in ((JArray)roleInstancesArray))
                                {
                                    AccountContainerRoleInstanceModel accountContainerRoleInstanceModelInstance = new AccountContainerRoleInstanceModel();
                                    result.RoleInstances.Add(accountContainerRoleInstanceModelInstance);
                                    
                                    JToken propertiesValue = roleInstancesValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        AccountContainerRoleInstance propertiesInstance = new AccountContainerRoleInstance();
                                        accountContainerRoleInstanceModelInstance.Properties = propertiesInstance;
                                        
                                        JToken settingsValue = propertiesValue["settings"];
                                        if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                        {
                                            AccountContainerRoleInstanceEffectiveSettings settingsInstance = new AccountContainerRoleInstanceEffectiveSettings();
                                            propertiesInstance.Settings = settingsInstance;
                                            
                                            JToken wacContainerGcFullScanIntervalInSecondsValue = settingsValue["wacContainerGcFullScanIntervalInSeconds"];
                                            if (wacContainerGcFullScanIntervalInSecondsValue != null && wacContainerGcFullScanIntervalInSecondsValue.Type != JTokenType.Null)
                                            {
                                                int wacContainerGcFullScanIntervalInSecondsInstance = ((int)wacContainerGcFullScanIntervalInSecondsValue);
                                                settingsInstance.WacContainerGcFullScanIntervalInSeconds = wacContainerGcFullScanIntervalInSecondsInstance;
                                            }
                                            
                                            JToken wacAccountGcFullScanIntervalInSecondsValue = settingsValue["wacAccountGcFullScanIntervalInSeconds"];
                                            if (wacAccountGcFullScanIntervalInSecondsValue != null && wacAccountGcFullScanIntervalInSecondsValue.Type != JTokenType.Null)
                                            {
                                                int wacAccountGcFullScanIntervalInSecondsInstance = ((int)wacAccountGcFullScanIntervalInSecondsValue);
                                                settingsInstance.WacAccountGcFullScanIntervalInSeconds = wacAccountGcFullScanIntervalInSecondsInstance;
                                            }
                                            
                                            JToken wacGcWaitPeriodInMillisecondsValue = settingsValue["wacGcWaitPeriodInMilliseconds"];
                                            if (wacGcWaitPeriodInMillisecondsValue != null && wacGcWaitPeriodInMillisecondsValue.Type != JTokenType.Null)
                                            {
                                                int wacGcWaitPeriodInMillisecondsInstance = ((int)wacGcWaitPeriodInMillisecondsValue);
                                                settingsInstance.WacGcWaitPeriodInMilliseconds = wacGcWaitPeriodInMillisecondsInstance;
                                            }
                                            
                                            JToken wacHoldingPeriodInHoursValue = settingsValue["wacHoldingPeriodInHours"];
                                            if (wacHoldingPeriodInHoursValue != null && wacHoldingPeriodInHoursValue.Type != JTokenType.Null)
                                            {
                                                int wacHoldingPeriodInHoursInstance = ((int)wacHoldingPeriodInHoursValue);
                                                settingsInstance.WacHoldingPeriodInHours = wacHoldingPeriodInHoursInstance;
                                            }
                                            
                                            JToken wacMaxGcThreadNumberValue = settingsValue["wacMaxGcThreadNumber"];
                                            if (wacMaxGcThreadNumberValue != null && wacMaxGcThreadNumberValue.Type != JTokenType.Null)
                                            {
                                                int wacMaxGcThreadNumberInstance = ((int)wacMaxGcThreadNumberValue);
                                                settingsInstance.WacMaxGcThreadNumber = wacMaxGcThreadNumberInstance;
                                            }
                                            
                                            JToken wacMaxCacheSizeValue = settingsValue["wacMaxCacheSize"];
                                            if (wacMaxCacheSizeValue != null && wacMaxCacheSizeValue.Type != JTokenType.Null)
                                            {
                                                int wacMaxCacheSizeInstance = ((int)wacMaxCacheSizeValue);
                                                settingsInstance.WacMaxCacheSize = wacMaxCacheSizeInstance;
                                            }
                                            
                                            JToken wacMaxConnectionsValue = settingsValue["wacMaxConnections"];
                                            if (wacMaxConnectionsValue != null && wacMaxConnectionsValue.Type != JTokenType.Null)
                                            {
                                                int wacMaxConnectionsInstance = ((int)wacMaxConnectionsValue);
                                                settingsInstance.WacMaxConnections = wacMaxConnectionsInstance;
                                            }
                                            
                                            JToken settingsPollingIntervalInSecondsValue = settingsValue["settingsPollingIntervalInSeconds"];
                                            if (settingsPollingIntervalInSecondsValue != null && settingsPollingIntervalInSecondsValue.Type != JTokenType.Null)
                                            {
                                                int settingsPollingIntervalInSecondsInstance = ((int)settingsPollingIntervalInSecondsValue);
                                                settingsInstance.SettingsPollingIntervalInSeconds = settingsPollingIntervalInSecondsInstance;
                                            }
                                            
                                            JToken settingsTimestampValue = settingsValue["settingsTimestamp"];
                                            if (settingsTimestampValue != null && settingsTimestampValue.Type != JTokenType.Null)
                                            {
                                                string settingsTimestampInstance = ((string)settingsTimestampValue);
                                                settingsInstance.SettingsTimestamp = settingsTimestampInstance;
                                            }
                                        }
                                        
                                        JToken roleIdentifierValue = propertiesValue["roleIdentifier"];
                                        if (roleIdentifierValue != null && roleIdentifierValue.Type != JTokenType.Null)
                                        {
                                            string roleIdentifierInstance = ((string)roleIdentifierValue);
                                            propertiesInstance.RoleIdentifier = roleIdentifierInstance;
                                        }
                                        
                                        JToken versionValue = propertiesValue["version"];
                                        if (versionValue != null && versionValue.Type != JTokenType.Null)
                                        {
                                            string versionInstance = ((string)versionValue);
                                            propertiesInstance.Version = versionInstance;
                                        }
                                        
                                        JToken statusValue = propertiesValue["status"];
                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                        {
                                            RoleInstanceStatus statusInstance = ((RoleInstanceStatus)Enum.Parse(typeof(RoleInstanceStatus), ((string)statusValue), true));
                                            propertiesInstance.Status = statusInstance;
                                        }
                                        
                                        JToken healthStatusValue = propertiesValue["healthStatus"];
                                        if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                        {
                                            HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                            propertiesInstance.HealthStatus = healthStatusInstance;
                                        }
                                        
                                        JToken nodeUriValue = propertiesValue["nodeUri"];
                                        if (nodeUriValue != null && nodeUriValue.Type != JTokenType.Null)
                                        {
                                            string nodeUriInstance = ((string)nodeUriValue);
                                            propertiesInstance.NodeUri = nodeUriInstance;
                                        }
                                        
                                        JToken historyInfosArray = propertiesValue["historyInfos"];
                                        if (historyInfosArray != null && historyInfosArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken historyInfosValue in ((JArray)historyInfosArray))
                                            {
                                                RoleInstanceHistoricEntry roleInstanceHistoricEntryInstance = new RoleInstanceHistoricEntry();
                                                propertiesInstance.HistoryInfos.Add(roleInstanceHistoricEntryInstance);
                                                
                                                JToken startTimeValue = historyInfosValue["startTime"];
                                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                {
                                                    DateTime startTimeInstance = ((DateTime)startTimeValue);
                                                    roleInstanceHistoricEntryInstance.StartTime = startTimeInstance;
                                                }
                                                
                                                JToken endTimeValue = historyInfosValue["endTime"];
                                                if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                {
                                                    DateTime endTimeInstance = ((DateTime)endTimeValue);
                                                    roleInstanceHistoricEntryInstance.EndTime = endTimeInstance;
                                                }
                                                
                                                JToken durationValue = historyInfosValue["duration"];
                                                if (durationValue != null && durationValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan durationInstance = XmlConvert.ToTimeSpan(((string)durationValue));
                                                    roleInstanceHistoricEntryInstance.Duration = durationInstance;
                                                }
                                                
                                                JToken roleIdentifierValue2 = historyInfosValue["roleIdentifier"];
                                                if (roleIdentifierValue2 != null && roleIdentifierValue2.Type != JTokenType.Null)
                                                {
                                                    string roleIdentifierInstance2 = ((string)roleIdentifierValue2);
                                                    roleInstanceHistoricEntryInstance.RoleIdentifier = roleIdentifierInstance2;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = roleInstancesValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        accountContainerRoleInstanceModelInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = roleInstancesValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        accountContainerRoleInstanceModelInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = roleInstancesValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        accountContainerRoleInstanceModelInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = roleInstancesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        accountContainerRoleInstanceModelInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)roleInstancesValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            accountContainerRoleInstanceModelInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> RestartAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            StorageAdminManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "RestartAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.AccountContainerServerInstances.BeginRestartingAsync(resourceGroupName, farmId, instanceId, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> SettingsPullNowAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "SettingsPullNowAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/accountcontainerserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/settingspullnow";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class BlobFrontendInstanceOperationsExtensions
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse BeginRestarting(this IBlobFrontendInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBlobFrontendInstanceOperations)s).BeginRestartingAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> BeginRestartingAsync(this IBlobFrontendInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.BeginRestartingAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static BlobFrontEndRoleInstanceGetResponse Get(this IBlobFrontendInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBlobFrontendInstanceOperations)s).GetAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<BlobFrontEndRoleInstanceGetResponse> GetAsync(this IBlobFrontendInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.GetAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricDefinitionsResult GetMetricDefinitions(this IBlobFrontendInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBlobFrontendInstanceOperations)s).GetMetricDefinitionsAsync(resourceGroupName, farmId, instanceId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(this IBlobFrontendInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return operations.GetMetricDefinitionsAsync(resourceGroupName, farmId, instanceId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricsResult GetMetrics(this IBlobFrontendInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBlobFrontendInstanceOperations)s).GetMetricsAsync(resourceGroupName, farmId, instanceId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricsResult> GetMetricsAsync(this IBlobFrontendInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return operations.GetMetricsAsync(resourceGroupName, farmId, instanceId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static BlobFrontEndRoleInstanceListResponse List(this IBlobFrontendInstanceOperations operations, string resourceGroupName, string farmId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBlobFrontendInstanceOperations)s).ListAsync(resourceGroupName, farmId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<BlobFrontEndRoleInstanceListResponse> ListAsync(this IBlobFrontendInstanceOperations operations, string resourceGroupName, string farmId)
        {
            return operations.ListAsync(resourceGroupName, farmId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Restart(this IBlobFrontendInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBlobFrontendInstanceOperations)s).RestartAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> RestartAsync(this IBlobFrontendInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.RestartAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse SettingsPullNow(this IBlobFrontendInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBlobFrontendInstanceOperations)s).SettingsPullNowAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> SettingsPullNowAsync(this IBlobFrontendInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.SettingsPullNowAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    public partial interface IBlobFrontendInstanceOperations
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        Task<LongRunningOperationResponse> BeginRestartingAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<BlobFrontEndRoleInstanceGetResponse> GetAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<BlobFrontEndRoleInstanceListResponse> ListAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> RestartAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> SettingsPullNowAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class BlobFrontendInstanceOperations : IServiceOperations<StorageAdminManagementClient>, IBlobFrontendInstanceOperations
    {
        /// <summary>
        /// Initializes a new instance of the BlobFrontendInstanceOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal BlobFrontendInstanceOperations(StorageAdminManagementClient client)
        {
            this._client = client;
        }
        
        private StorageAdminManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.StorageAdminManagementClient.
        /// </summary>
        public StorageAdminManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginRestartingAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "BeginRestartingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/blobfrontendinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/restart";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict || statusCode == HttpStatusCode.NotFound || statusCode == HttpStatusCode.MethodNotAllowed || statusCode == HttpStatusCode.Forbidden)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<BlobFrontEndRoleInstanceGetResponse> GetAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/blobfrontendinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    BlobFrontEndRoleInstanceGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new BlobFrontEndRoleInstanceGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            BlobFrontEndRoleInstanceModel roleInstanceInstance = new BlobFrontEndRoleInstanceModel();
                            result.RoleInstance = roleInstanceInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                BlobFrontEndRoleInstance propertiesInstance = new BlobFrontEndRoleInstance();
                                roleInstanceInstance.Properties = propertiesInstance;
                                
                                JToken settingsValue = propertiesValue["settings"];
                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                {
                                    BlobFrontEndRoleInstanceEffectiveSettings settingsInstance = new BlobFrontEndRoleInstanceEffectiveSettings();
                                    propertiesInstance.Settings = settingsInstance;
                                    
                                    JToken frontEndHttpListenPortValue = settingsValue["frontEndHttpListenPort"];
                                    if (frontEndHttpListenPortValue != null && frontEndHttpListenPortValue.Type != JTokenType.Null)
                                    {
                                        int frontEndHttpListenPortInstance = ((int)frontEndHttpListenPortValue);
                                        settingsInstance.FrontEndHttpListenPort = frontEndHttpListenPortInstance;
                                    }
                                    
                                    JToken frontEndHttpsListenPortValue = settingsValue["frontEndHttpsListenPort"];
                                    if (frontEndHttpsListenPortValue != null && frontEndHttpsListenPortValue.Type != JTokenType.Null)
                                    {
                                        int frontEndHttpsListenPortInstance = ((int)frontEndHttpsListenPortValue);
                                        settingsInstance.FrontEndHttpsListenPort = frontEndHttpsListenPortInstance;
                                    }
                                    
                                    JToken frontEndCallbackThreadsCountValue = settingsValue["frontEndCallbackThreadsCount"];
                                    if (frontEndCallbackThreadsCountValue != null && frontEndCallbackThreadsCountValue.Type != JTokenType.Null)
                                    {
                                        int frontEndCallbackThreadsCountInstance = ((int)frontEndCallbackThreadsCountValue);
                                        settingsInstance.FrontEndCallbackThreadsCount = frontEndCallbackThreadsCountInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingEnabledValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingEnabled"];
                                    if (frontEndCpuBasedKeepAliveThrottlingEnabledValue != null && frontEndCpuBasedKeepAliveThrottlingEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndCpuBasedKeepAliveThrottlingEnabledInstance = ((bool)frontEndCpuBasedKeepAliveThrottlingEnabledValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingEnabled = frontEndCpuBasedKeepAliveThrottlingEnabledInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold"];
                                    if (frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue != null && frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue.Type != JTokenType.Null)
                                    {
                                        double frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdInstance = ((double)frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold = frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle"];
                                    if (frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue != null && frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue.Type != JTokenType.Null)
                                    {
                                        double frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleInstance = ((double)frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle = frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds"];
                                    if (frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue != null && frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsInstance = ((int)frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds = frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsInstance;
                                    }
                                    
                                    JToken frontEndMemoryThrottlingEnabledValue = settingsValue["frontEndMemoryThrottlingEnabled"];
                                    if (frontEndMemoryThrottlingEnabledValue != null && frontEndMemoryThrottlingEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndMemoryThrottlingEnabledInstance = ((bool)frontEndMemoryThrottlingEnabledValue);
                                        settingsInstance.FrontEndMemoryThrottlingEnabled = frontEndMemoryThrottlingEnabledInstance;
                                    }
                                    
                                    JToken frontEndMaxMillisecondsBetweenMemorySamplesValue = settingsValue["frontEndMaxMillisecondsBetweenMemorySamples"];
                                    if (frontEndMaxMillisecondsBetweenMemorySamplesValue != null && frontEndMaxMillisecondsBetweenMemorySamplesValue.Type != JTokenType.Null)
                                    {
                                        int frontEndMaxMillisecondsBetweenMemorySamplesInstance = ((int)frontEndMaxMillisecondsBetweenMemorySamplesValue);
                                        settingsInstance.FrontEndMaxMillisecondsBetweenMemorySamples = frontEndMaxMillisecondsBetweenMemorySamplesInstance;
                                    }
                                    
                                    JToken frontEndMemoryThrottleThresholdSettingsValue = settingsValue["frontEndMemoryThrottleThresholdSettings"];
                                    if (frontEndMemoryThrottleThresholdSettingsValue != null && frontEndMemoryThrottleThresholdSettingsValue.Type != JTokenType.Null)
                                    {
                                        string frontEndMemoryThrottleThresholdSettingsInstance = ((string)frontEndMemoryThrottleThresholdSettingsValue);
                                        settingsInstance.FrontEndMemoryThrottleThresholdSettings = frontEndMemoryThrottleThresholdSettingsInstance;
                                    }
                                    
                                    JToken frontEndMinThreadPoolThreadsValue = settingsValue["frontEndMinThreadPoolThreads"];
                                    if (frontEndMinThreadPoolThreadsValue != null && frontEndMinThreadPoolThreadsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndMinThreadPoolThreadsInstance = ((int)frontEndMinThreadPoolThreadsValue);
                                        settingsInstance.FrontEndMinimumThreadPoolThreads = frontEndMinThreadPoolThreadsInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue = settingsValue["frontEndThreadPoolBasedKeepAliveIOCompletionThreshold"];
                                    if (frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue != null && frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveIOCompletionThresholdInstance = ((int)frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveIOCompletionThreshold = frontEndThreadPoolBasedKeepAliveIOCompletionThresholdInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue = settingsValue["frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold"];
                                    if (frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue != null && frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdInstance = ((int)frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveWorkerThreadThreshold = frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue = settingsValue["frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds"];
                                    if (frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue != null && frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsInstance = ((int)frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds = frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAlivePercentageValue = settingsValue["frontEndThreadPoolBasedKeepAlivePercentage"];
                                    if (frontEndThreadPoolBasedKeepAlivePercentageValue != null && frontEndThreadPoolBasedKeepAlivePercentageValue.Type != JTokenType.Null)
                                    {
                                        double frontEndThreadPoolBasedKeepAlivePercentageInstance = ((double)frontEndThreadPoolBasedKeepAlivePercentageValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAlivePercentage = frontEndThreadPoolBasedKeepAlivePercentageInstance;
                                    }
                                    
                                    JToken frontEndUseSlaTimeInAvailabilityValue = settingsValue["frontEndUseSlaTimeInAvailability"];
                                    if (frontEndUseSlaTimeInAvailabilityValue != null && frontEndUseSlaTimeInAvailabilityValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndUseSlaTimeInAvailabilityInstance = ((bool)frontEndUseSlaTimeInAvailabilityValue);
                                        settingsInstance.FrontEndUseSlaTimeInAvailability = frontEndUseSlaTimeInAvailabilityInstance;
                                    }
                                    
                                    JToken settingsPollingIntervalInSecondsValue = settingsValue["settingsPollingIntervalInSeconds"];
                                    if (settingsPollingIntervalInSecondsValue != null && settingsPollingIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int settingsPollingIntervalInSecondsInstance = ((int)settingsPollingIntervalInSecondsValue);
                                        settingsInstance.SettingsPollingIntervalInSeconds = settingsPollingIntervalInSecondsInstance;
                                    }
                                    
                                    JToken settingsTimestampValue = settingsValue["settingsTimestamp"];
                                    if (settingsTimestampValue != null && settingsTimestampValue.Type != JTokenType.Null)
                                    {
                                        string settingsTimestampInstance = ((string)settingsTimestampValue);
                                        settingsInstance.SettingsTimestamp = settingsTimestampInstance;
                                    }
                                }
                                
                                JToken roleIdentifierValue = propertiesValue["roleIdentifier"];
                                if (roleIdentifierValue != null && roleIdentifierValue.Type != JTokenType.Null)
                                {
                                    string roleIdentifierInstance = ((string)roleIdentifierValue);
                                    propertiesInstance.RoleIdentifier = roleIdentifierInstance;
                                }
                                
                                JToken versionValue = propertiesValue["version"];
                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                {
                                    string versionInstance = ((string)versionValue);
                                    propertiesInstance.Version = versionInstance;
                                }
                                
                                JToken statusValue = propertiesValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    RoleInstanceStatus statusInstance = ((RoleInstanceStatus)Enum.Parse(typeof(RoleInstanceStatus), ((string)statusValue), true));
                                    propertiesInstance.Status = statusInstance;
                                }
                                
                                JToken healthStatusValue = propertiesValue["healthStatus"];
                                if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                {
                                    HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                    propertiesInstance.HealthStatus = healthStatusInstance;
                                }
                                
                                JToken nodeUriValue = propertiesValue["nodeUri"];
                                if (nodeUriValue != null && nodeUriValue.Type != JTokenType.Null)
                                {
                                    string nodeUriInstance = ((string)nodeUriValue);
                                    propertiesInstance.NodeUri = nodeUriInstance;
                                }
                                
                                JToken historyInfosArray = propertiesValue["historyInfos"];
                                if (historyInfosArray != null && historyInfosArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken historyInfosValue in ((JArray)historyInfosArray))
                                    {
                                        RoleInstanceHistoricEntry roleInstanceHistoricEntryInstance = new RoleInstanceHistoricEntry();
                                        propertiesInstance.HistoryInfos.Add(roleInstanceHistoricEntryInstance);
                                        
                                        JToken startTimeValue = historyInfosValue["startTime"];
                                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime startTimeInstance = ((DateTime)startTimeValue);
                                            roleInstanceHistoricEntryInstance.StartTime = startTimeInstance;
                                        }
                                        
                                        JToken endTimeValue = historyInfosValue["endTime"];
                                        if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime endTimeInstance = ((DateTime)endTimeValue);
                                            roleInstanceHistoricEntryInstance.EndTime = endTimeInstance;
                                        }
                                        
                                        JToken durationValue = historyInfosValue["duration"];
                                        if (durationValue != null && durationValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan durationInstance = XmlConvert.ToTimeSpan(((string)durationValue));
                                            roleInstanceHistoricEntryInstance.Duration = durationInstance;
                                        }
                                        
                                        JToken roleIdentifierValue2 = historyInfosValue["roleIdentifier"];
                                        if (roleIdentifierValue2 != null && roleIdentifierValue2.Type != JTokenType.Null)
                                        {
                                            string roleIdentifierInstance2 = ((string)roleIdentifierValue2);
                                            roleInstanceHistoricEntryInstance.RoleIdentifier = roleIdentifierInstance2;
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                roleInstanceInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                roleInstanceInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                roleInstanceInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                roleInstanceInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    roleInstanceInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricDefinitionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/blobfrontendinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/metricdefinitions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricDefinitionsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricDefinitionsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    MetricDefinition metricDefinitionInstance = new MetricDefinition();
                                    result.Value.Add(metricDefinitionInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricDefinitionInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken unitValue = valueValue["unit"];
                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit unitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)unitValue), true));
                                        metricDefinitionInstance.Unit = unitInstance;
                                    }
                                    
                                    JToken primaryAggregationTypeValue = valueValue["primaryAggregationType"];
                                    if (primaryAggregationTypeValue != null && primaryAggregationTypeValue.Type != JTokenType.Null)
                                    {
                                        MetricPrimaryAggregationType primaryAggregationTypeInstance = ((MetricPrimaryAggregationType)Enum.Parse(typeof(MetricPrimaryAggregationType), ((string)primaryAggregationTypeValue), true));
                                        metricDefinitionInstance.PrimaryAggregationType = primaryAggregationTypeInstance;
                                    }
                                    
                                    JToken metricAvailabilitiesArray = valueValue["metricAvailabilities"];
                                    if (metricAvailabilitiesArray != null && metricAvailabilitiesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricAvailabilitiesValue in ((JArray)metricAvailabilitiesArray))
                                        {
                                            MetricAvailability metricAvailabilityInstance = new MetricAvailability();
                                            metricDefinitionInstance.MetricAvailabilities.Add(metricAvailabilityInstance);
                                            
                                            JToken timeGrainValue = metricAvailabilitiesValue["timeGrain"];
                                            if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                                metricAvailabilityInstance.TimeGrain = timeGrainInstance;
                                            }
                                            
                                            JToken retentionValue = metricAvailabilitiesValue["retention"];
                                            if (retentionValue != null && retentionValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan retentionInstance = XmlConvert.ToTimeSpan(((string)retentionValue));
                                                metricAvailabilityInstance.Retention = retentionInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/blobfrontendinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/metrics";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Metric metricInstance = new Metric();
                                    result.Metrics.Add(metricInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken metricUnitValue = valueValue["metricUnit"];
                                    if (metricUnitValue != null && metricUnitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit metricUnitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)metricUnitValue), true));
                                        metricInstance.MetricUnit = metricUnitInstance;
                                    }
                                    
                                    JToken timeGrainValue = valueValue["timeGrain"];
                                    if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                        metricInstance.TimeGrain = timeGrainInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        metricInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = valueValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        metricInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken metricValuesArray = valueValue["metricValues"];
                                    if (metricValuesArray != null && metricValuesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricValuesValue in ((JArray)metricValuesArray))
                                        {
                                            MetricValue metricValueInstance = new MetricValue();
                                            metricInstance.MetricValues.Add(metricValueInstance);
                                            
                                            JToken timeStampValue = metricValuesValue["timeStamp"];
                                            if (timeStampValue != null && timeStampValue.Type != JTokenType.Null)
                                            {
                                                DateTime timeStampInstance = ((DateTime)timeStampValue);
                                                metricValueInstance.TimeStamp = timeStampInstance;
                                            }
                                            
                                            JToken averageValue = metricValuesValue["average"];
                                            if (averageValue != null && averageValue.Type != JTokenType.Null)
                                            {
                                                double averageInstance = ((double)averageValue);
                                                metricValueInstance.Average = averageInstance;
                                            }
                                            
                                            JToken minimumValue = metricValuesValue["minimum"];
                                            if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                            {
                                                double minimumInstance = ((double)minimumValue);
                                                metricValueInstance.Minimum = minimumInstance;
                                            }
                                            
                                            JToken maximumValue = metricValuesValue["maximum"];
                                            if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                            {
                                                double maximumInstance = ((double)maximumValue);
                                                metricValueInstance.Maximum = maximumInstance;
                                            }
                                            
                                            JToken totalValue = metricValuesValue["total"];
                                            if (totalValue != null && totalValue.Type != JTokenType.Null)
                                            {
                                                double totalInstance = ((double)totalValue);
                                                metricValueInstance.Total = totalInstance;
                                            }
                                            
                                            JToken countValue = metricValuesValue["count"];
                                            if (countValue != null && countValue.Type != JTokenType.Null)
                                            {
                                                int countInstance = ((int)countValue);
                                                metricValueInstance.Count = countInstance;
                                            }
                                            
                                            JToken propertiesValue = metricValuesValue["properties"];
                                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                            {
                                                string propertiesInstance = propertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                metricValueInstance.Properties = propertiesInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<BlobFrontEndRoleInstanceListResponse> ListAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/blobfrontendinstances";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    BlobFrontEndRoleInstanceListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new BlobFrontEndRoleInstanceListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken roleInstancesArray = responseDoc;
                            if (roleInstancesArray != null && roleInstancesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken roleInstancesValue in ((JArray)roleInstancesArray))
                                {
                                    BlobFrontEndRoleInstanceModel blobFrontEndRoleInstanceModelInstance = new BlobFrontEndRoleInstanceModel();
                                    result.RoleInstances.Add(blobFrontEndRoleInstanceModelInstance);
                                    
                                    JToken propertiesValue = roleInstancesValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        BlobFrontEndRoleInstance propertiesInstance = new BlobFrontEndRoleInstance();
                                        blobFrontEndRoleInstanceModelInstance.Properties = propertiesInstance;
                                        
                                        JToken settingsValue = propertiesValue["settings"];
                                        if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                        {
                                            BlobFrontEndRoleInstanceEffectiveSettings settingsInstance = new BlobFrontEndRoleInstanceEffectiveSettings();
                                            propertiesInstance.Settings = settingsInstance;
                                            
                                            JToken frontEndHttpListenPortValue = settingsValue["frontEndHttpListenPort"];
                                            if (frontEndHttpListenPortValue != null && frontEndHttpListenPortValue.Type != JTokenType.Null)
                                            {
                                                int frontEndHttpListenPortInstance = ((int)frontEndHttpListenPortValue);
                                                settingsInstance.FrontEndHttpListenPort = frontEndHttpListenPortInstance;
                                            }
                                            
                                            JToken frontEndHttpsListenPortValue = settingsValue["frontEndHttpsListenPort"];
                                            if (frontEndHttpsListenPortValue != null && frontEndHttpsListenPortValue.Type != JTokenType.Null)
                                            {
                                                int frontEndHttpsListenPortInstance = ((int)frontEndHttpsListenPortValue);
                                                settingsInstance.FrontEndHttpsListenPort = frontEndHttpsListenPortInstance;
                                            }
                                            
                                            JToken frontEndCallbackThreadsCountValue = settingsValue["frontEndCallbackThreadsCount"];
                                            if (frontEndCallbackThreadsCountValue != null && frontEndCallbackThreadsCountValue.Type != JTokenType.Null)
                                            {
                                                int frontEndCallbackThreadsCountInstance = ((int)frontEndCallbackThreadsCountValue);
                                                settingsInstance.FrontEndCallbackThreadsCount = frontEndCallbackThreadsCountInstance;
                                            }
                                            
                                            JToken frontEndCpuBasedKeepAliveThrottlingEnabledValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingEnabled"];
                                            if (frontEndCpuBasedKeepAliveThrottlingEnabledValue != null && frontEndCpuBasedKeepAliveThrottlingEnabledValue.Type != JTokenType.Null)
                                            {
                                                bool frontEndCpuBasedKeepAliveThrottlingEnabledInstance = ((bool)frontEndCpuBasedKeepAliveThrottlingEnabledValue);
                                                settingsInstance.FrontEndCpuBasedKeepAliveThrottlingEnabled = frontEndCpuBasedKeepAliveThrottlingEnabledInstance;
                                            }
                                            
                                            JToken frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold"];
                                            if (frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue != null && frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue.Type != JTokenType.Null)
                                            {
                                                double frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdInstance = ((double)frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue);
                                                settingsInstance.FrontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold = frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdInstance;
                                            }
                                            
                                            JToken frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle"];
                                            if (frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue != null && frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue.Type != JTokenType.Null)
                                            {
                                                double frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleInstance = ((double)frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue);
                                                settingsInstance.FrontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle = frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleInstance;
                                            }
                                            
                                            JToken frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds"];
                                            if (frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue != null && frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue.Type != JTokenType.Null)
                                            {
                                                int frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsInstance = ((int)frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue);
                                                settingsInstance.FrontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds = frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsInstance;
                                            }
                                            
                                            JToken frontEndMemoryThrottlingEnabledValue = settingsValue["frontEndMemoryThrottlingEnabled"];
                                            if (frontEndMemoryThrottlingEnabledValue != null && frontEndMemoryThrottlingEnabledValue.Type != JTokenType.Null)
                                            {
                                                bool frontEndMemoryThrottlingEnabledInstance = ((bool)frontEndMemoryThrottlingEnabledValue);
                                                settingsInstance.FrontEndMemoryThrottlingEnabled = frontEndMemoryThrottlingEnabledInstance;
                                            }
                                            
                                            JToken frontEndMaxMillisecondsBetweenMemorySamplesValue = settingsValue["frontEndMaxMillisecondsBetweenMemorySamples"];
                                            if (frontEndMaxMillisecondsBetweenMemorySamplesValue != null && frontEndMaxMillisecondsBetweenMemorySamplesValue.Type != JTokenType.Null)
                                            {
                                                int frontEndMaxMillisecondsBetweenMemorySamplesInstance = ((int)frontEndMaxMillisecondsBetweenMemorySamplesValue);
                                                settingsInstance.FrontEndMaxMillisecondsBetweenMemorySamples = frontEndMaxMillisecondsBetweenMemorySamplesInstance;
                                            }
                                            
                                            JToken frontEndMemoryThrottleThresholdSettingsValue = settingsValue["frontEndMemoryThrottleThresholdSettings"];
                                            if (frontEndMemoryThrottleThresholdSettingsValue != null && frontEndMemoryThrottleThresholdSettingsValue.Type != JTokenType.Null)
                                            {
                                                string frontEndMemoryThrottleThresholdSettingsInstance = ((string)frontEndMemoryThrottleThresholdSettingsValue);
                                                settingsInstance.FrontEndMemoryThrottleThresholdSettings = frontEndMemoryThrottleThresholdSettingsInstance;
                                            }
                                            
                                            JToken frontEndMinThreadPoolThreadsValue = settingsValue["frontEndMinThreadPoolThreads"];
                                            if (frontEndMinThreadPoolThreadsValue != null && frontEndMinThreadPoolThreadsValue.Type != JTokenType.Null)
                                            {
                                                int frontEndMinThreadPoolThreadsInstance = ((int)frontEndMinThreadPoolThreadsValue);
                                                settingsInstance.FrontEndMinimumThreadPoolThreads = frontEndMinThreadPoolThreadsInstance;
                                            }
                                            
                                            JToken frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue = settingsValue["frontEndThreadPoolBasedKeepAliveIOCompletionThreshold"];
                                            if (frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue != null && frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue.Type != JTokenType.Null)
                                            {
                                                int frontEndThreadPoolBasedKeepAliveIOCompletionThresholdInstance = ((int)frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue);
                                                settingsInstance.FrontEndThreadPoolBasedKeepAliveIOCompletionThreshold = frontEndThreadPoolBasedKeepAliveIOCompletionThresholdInstance;
                                            }
                                            
                                            JToken frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue = settingsValue["frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold"];
                                            if (frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue != null && frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue.Type != JTokenType.Null)
                                            {
                                                int frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdInstance = ((int)frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue);
                                                settingsInstance.FrontEndThreadPoolBasedKeepAliveWorkerThreadThreshold = frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdInstance;
                                            }
                                            
                                            JToken frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue = settingsValue["frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds"];
                                            if (frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue != null && frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue.Type != JTokenType.Null)
                                            {
                                                int frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsInstance = ((int)frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue);
                                                settingsInstance.FrontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds = frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsInstance;
                                            }
                                            
                                            JToken frontEndThreadPoolBasedKeepAlivePercentageValue = settingsValue["frontEndThreadPoolBasedKeepAlivePercentage"];
                                            if (frontEndThreadPoolBasedKeepAlivePercentageValue != null && frontEndThreadPoolBasedKeepAlivePercentageValue.Type != JTokenType.Null)
                                            {
                                                double frontEndThreadPoolBasedKeepAlivePercentageInstance = ((double)frontEndThreadPoolBasedKeepAlivePercentageValue);
                                                settingsInstance.FrontEndThreadPoolBasedKeepAlivePercentage = frontEndThreadPoolBasedKeepAlivePercentageInstance;
                                            }
                                            
                                            JToken frontEndUseSlaTimeInAvailabilityValue = settingsValue["frontEndUseSlaTimeInAvailability"];
                                            if (frontEndUseSlaTimeInAvailabilityValue != null && frontEndUseSlaTimeInAvailabilityValue.Type != JTokenType.Null)
                                            {
                                                bool frontEndUseSlaTimeInAvailabilityInstance = ((bool)frontEndUseSlaTimeInAvailabilityValue);
                                                settingsInstance.FrontEndUseSlaTimeInAvailability = frontEndUseSlaTimeInAvailabilityInstance;
                                            }
                                            
                                            JToken settingsPollingIntervalInSecondsValue = settingsValue["settingsPollingIntervalInSeconds"];
                                            if (settingsPollingIntervalInSecondsValue != null && settingsPollingIntervalInSecondsValue.Type != JTokenType.Null)
                                            {
                                                int settingsPollingIntervalInSecondsInstance = ((int)settingsPollingIntervalInSecondsValue);
                                                settingsInstance.SettingsPollingIntervalInSeconds = settingsPollingIntervalInSecondsInstance;
                                            }
                                            
                                            JToken settingsTimestampValue = settingsValue["settingsTimestamp"];
                                            if (settingsTimestampValue != null && settingsTimestampValue.Type != JTokenType.Null)
                                            {
                                                string settingsTimestampInstance = ((string)settingsTimestampValue);
                                                settingsInstance.SettingsTimestamp = settingsTimestampInstance;
                                            }
                                        }
                                        
                                        JToken roleIdentifierValue = propertiesValue["roleIdentifier"];
                                        if (roleIdentifierValue != null && roleIdentifierValue.Type != JTokenType.Null)
                                        {
                                            string roleIdentifierInstance = ((string)roleIdentifierValue);
                                            propertiesInstance.RoleIdentifier = roleIdentifierInstance;
                                        }
                                        
                                        JToken versionValue = propertiesValue["version"];
                                        if (versionValue != null && versionValue.Type != JTokenType.Null)
                                        {
                                            string versionInstance = ((string)versionValue);
                                            propertiesInstance.Version = versionInstance;
                                        }
                                        
                                        JToken statusValue = propertiesValue["status"];
                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                        {
                                            RoleInstanceStatus statusInstance = ((RoleInstanceStatus)Enum.Parse(typeof(RoleInstanceStatus), ((string)statusValue), true));
                                            propertiesInstance.Status = statusInstance;
                                        }
                                        
                                        JToken healthStatusValue = propertiesValue["healthStatus"];
                                        if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                        {
                                            HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                            propertiesInstance.HealthStatus = healthStatusInstance;
                                        }
                                        
                                        JToken nodeUriValue = propertiesValue["nodeUri"];
                                        if (nodeUriValue != null && nodeUriValue.Type != JTokenType.Null)
                                        {
                                            string nodeUriInstance = ((string)nodeUriValue);
                                            propertiesInstance.NodeUri = nodeUriInstance;
                                        }
                                        
                                        JToken historyInfosArray = propertiesValue["historyInfos"];
                                        if (historyInfosArray != null && historyInfosArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken historyInfosValue in ((JArray)historyInfosArray))
                                            {
                                                RoleInstanceHistoricEntry roleInstanceHistoricEntryInstance = new RoleInstanceHistoricEntry();
                                                propertiesInstance.HistoryInfos.Add(roleInstanceHistoricEntryInstance);
                                                
                                                JToken startTimeValue = historyInfosValue["startTime"];
                                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                {
                                                    DateTime startTimeInstance = ((DateTime)startTimeValue);
                                                    roleInstanceHistoricEntryInstance.StartTime = startTimeInstance;
                                                }
                                                
                                                JToken endTimeValue = historyInfosValue["endTime"];
                                                if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                {
                                                    DateTime endTimeInstance = ((DateTime)endTimeValue);
                                                    roleInstanceHistoricEntryInstance.EndTime = endTimeInstance;
                                                }
                                                
                                                JToken durationValue = historyInfosValue["duration"];
                                                if (durationValue != null && durationValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan durationInstance = XmlConvert.ToTimeSpan(((string)durationValue));
                                                    roleInstanceHistoricEntryInstance.Duration = durationInstance;
                                                }
                                                
                                                JToken roleIdentifierValue2 = historyInfosValue["roleIdentifier"];
                                                if (roleIdentifierValue2 != null && roleIdentifierValue2.Type != JTokenType.Null)
                                                {
                                                    string roleIdentifierInstance2 = ((string)roleIdentifierValue2);
                                                    roleInstanceHistoricEntryInstance.RoleIdentifier = roleIdentifierInstance2;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = roleInstancesValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        blobFrontEndRoleInstanceModelInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = roleInstancesValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        blobFrontEndRoleInstanceModelInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = roleInstancesValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        blobFrontEndRoleInstanceModelInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = roleInstancesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        blobFrontEndRoleInstanceModelInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)roleInstancesValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            blobFrontEndRoleInstanceModelInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> RestartAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            StorageAdminManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "RestartAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.BlobFrontendInstances.BeginRestartingAsync(resourceGroupName, farmId, instanceId, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> SettingsPullNowAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "SettingsPullNowAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/blobfrontendinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/settingspullnow";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class BlobServerInstanceOperationsExtensions
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse BeginRestarting(this IBlobServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBlobServerInstanceOperations)s).BeginRestartingAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> BeginRestartingAsync(this IBlobServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.BeginRestartingAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse BeginStarting(this IBlobServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBlobServerInstanceOperations)s).BeginStartingAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> BeginStartingAsync(this IBlobServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.BeginStartingAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse BeginStopping(this IBlobServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBlobServerInstanceOperations)s).BeginStoppingAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> BeginStoppingAsync(this IBlobServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.BeginStoppingAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static BlobServerRoleInstanceGetResponse Get(this IBlobServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBlobServerInstanceOperations)s).GetAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<BlobServerRoleInstanceGetResponse> GetAsync(this IBlobServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.GetAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricDefinitionsResult GetMetricDefinitions(this IBlobServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBlobServerInstanceOperations)s).GetMetricDefinitionsAsync(resourceGroupName, farmId, instanceId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(this IBlobServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return operations.GetMetricDefinitionsAsync(resourceGroupName, farmId, instanceId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricsResult GetMetrics(this IBlobServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBlobServerInstanceOperations)s).GetMetricsAsync(resourceGroupName, farmId, instanceId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricsResult> GetMetricsAsync(this IBlobServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return operations.GetMetricsAsync(resourceGroupName, farmId, instanceId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static BlobServerRoleInstanceListResponse List(this IBlobServerInstanceOperations operations, string resourceGroupName, string farmId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBlobServerInstanceOperations)s).ListAsync(resourceGroupName, farmId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<BlobServerRoleInstanceListResponse> ListAsync(this IBlobServerInstanceOperations operations, string resourceGroupName, string farmId)
        {
            return operations.ListAsync(resourceGroupName, farmId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Restart(this IBlobServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBlobServerInstanceOperations)s).RestartAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> RestartAsync(this IBlobServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.RestartAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse SettingsPullNow(this IBlobServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBlobServerInstanceOperations)s).SettingsPullNowAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> SettingsPullNowAsync(this IBlobServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.SettingsPullNowAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Start(this IBlobServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBlobServerInstanceOperations)s).StartAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> StartAsync(this IBlobServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.StartAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Stop(this IBlobServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBlobServerInstanceOperations)s).StopAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> StopAsync(this IBlobServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.StopAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    public partial interface IBlobServerInstanceOperations
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        Task<LongRunningOperationResponse> BeginRestartingAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        Task<LongRunningOperationResponse> BeginStartingAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        Task<LongRunningOperationResponse> BeginStoppingAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<BlobServerRoleInstanceGetResponse> GetAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<BlobServerRoleInstanceListResponse> ListAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> RestartAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> SettingsPullNowAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> StartAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> StopAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class BlobServerInstanceOperations : IServiceOperations<StorageAdminManagementClient>, IBlobServerInstanceOperations
    {
        /// <summary>
        /// Initializes a new instance of the BlobServerInstanceOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal BlobServerInstanceOperations(StorageAdminManagementClient client)
        {
            this._client = client;
        }
        
        private StorageAdminManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.StorageAdminManagementClient.
        /// </summary>
        public StorageAdminManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginRestartingAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "BeginRestartingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/blobserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/restart";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict || statusCode == HttpStatusCode.NotFound || statusCode == HttpStatusCode.MethodNotAllowed || statusCode == HttpStatusCode.Forbidden)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginStartingAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "BeginStartingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/blobserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/online";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict || statusCode == HttpStatusCode.NotFound || statusCode == HttpStatusCode.MethodNotAllowed || statusCode == HttpStatusCode.Forbidden)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginStoppingAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "BeginStoppingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/blobserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/offline";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict || statusCode == HttpStatusCode.NotFound || statusCode == HttpStatusCode.MethodNotAllowed || statusCode == HttpStatusCode.Forbidden)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<BlobServerRoleInstanceGetResponse> GetAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/blobserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    BlobServerRoleInstanceGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new BlobServerRoleInstanceGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            BlobServerRoleInstanceModel roleInstanceInstance = new BlobServerRoleInstanceModel();
                            result.RoleInstance = roleInstanceInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                BlobServerRoleInstance propertiesInstance = new BlobServerRoleInstance();
                                roleInstanceInstance.Properties = propertiesInstance;
                                
                                JToken settingsValue = propertiesValue["settings"];
                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                {
                                    BlobServerRoleInstanceEffectiveSettings settingsInstance = new BlobServerRoleInstanceEffectiveSettings();
                                    propertiesInstance.Settings = settingsInstance;
                                    
                                    JToken blobSvcContainerGcIntervalValue = settingsValue["blobSvcContainerGcInterval"];
                                    if (blobSvcContainerGcIntervalValue != null && blobSvcContainerGcIntervalValue.Type != JTokenType.Null)
                                    {
                                        int blobSvcContainerGcIntervalInstance = ((int)blobSvcContainerGcIntervalValue);
                                        settingsInstance.BlobSvcContainerGcInterval = blobSvcContainerGcIntervalInstance;
                                    }
                                    
                                    JToken blobSvcShallowGcIntervalValue = settingsValue["blobSvcShallowGcInterval"];
                                    if (blobSvcShallowGcIntervalValue != null && blobSvcShallowGcIntervalValue.Type != JTokenType.Null)
                                    {
                                        int blobSvcShallowGcIntervalInstance = ((int)blobSvcShallowGcIntervalValue);
                                        settingsInstance.BlobSvcShallowGcInterval = blobSvcShallowGcIntervalInstance;
                                    }
                                    
                                    JToken blobSvcStreamMapMinContainerOccupancyPercentValue = settingsValue["blobSvcStreamMapMinContainerOccupancyPercent"];
                                    if (blobSvcStreamMapMinContainerOccupancyPercentValue != null && blobSvcStreamMapMinContainerOccupancyPercentValue.Type != JTokenType.Null)
                                    {
                                        int blobSvcStreamMapMinContainerOccupancyPercentInstance = ((int)blobSvcStreamMapMinContainerOccupancyPercentValue);
                                        settingsInstance.BlobSvcStreamMapMinContainerOccupancyPercent = blobSvcStreamMapMinContainerOccupancyPercentInstance;
                                    }
                                    
                                    JToken settingsPollingIntervalInSecondsValue = settingsValue["settingsPollingIntervalInSeconds"];
                                    if (settingsPollingIntervalInSecondsValue != null && settingsPollingIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int settingsPollingIntervalInSecondsInstance = ((int)settingsPollingIntervalInSecondsValue);
                                        settingsInstance.SettingsPollingIntervalInSeconds = settingsPollingIntervalInSecondsInstance;
                                    }
                                    
                                    JToken settingsTimestampValue = settingsValue["settingsTimestamp"];
                                    if (settingsTimestampValue != null && settingsTimestampValue.Type != JTokenType.Null)
                                    {
                                        string settingsTimestampInstance = ((string)settingsTimestampValue);
                                        settingsInstance.SettingsTimestamp = settingsTimestampInstance;
                                    }
                                }
                                
                                JToken roleIdentifierValue = propertiesValue["roleIdentifier"];
                                if (roleIdentifierValue != null && roleIdentifierValue.Type != JTokenType.Null)
                                {
                                    string roleIdentifierInstance = ((string)roleIdentifierValue);
                                    propertiesInstance.RoleIdentifier = roleIdentifierInstance;
                                }
                                
                                JToken versionValue = propertiesValue["version"];
                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                {
                                    string versionInstance = ((string)versionValue);
                                    propertiesInstance.Version = versionInstance;
                                }
                                
                                JToken statusValue = propertiesValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    RoleInstanceStatus statusInstance = ((RoleInstanceStatus)Enum.Parse(typeof(RoleInstanceStatus), ((string)statusValue), true));
                                    propertiesInstance.Status = statusInstance;
                                }
                                
                                JToken healthStatusValue = propertiesValue["healthStatus"];
                                if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                {
                                    HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                    propertiesInstance.HealthStatus = healthStatusInstance;
                                }
                                
                                JToken nodeUriValue = propertiesValue["nodeUri"];
                                if (nodeUriValue != null && nodeUriValue.Type != JTokenType.Null)
                                {
                                    string nodeUriInstance = ((string)nodeUriValue);
                                    propertiesInstance.NodeUri = nodeUriInstance;
                                }
                                
                                JToken historyInfosArray = propertiesValue["historyInfos"];
                                if (historyInfosArray != null && historyInfosArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken historyInfosValue in ((JArray)historyInfosArray))
                                    {
                                        RoleInstanceHistoricEntry roleInstanceHistoricEntryInstance = new RoleInstanceHistoricEntry();
                                        propertiesInstance.HistoryInfos.Add(roleInstanceHistoricEntryInstance);
                                        
                                        JToken startTimeValue = historyInfosValue["startTime"];
                                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime startTimeInstance = ((DateTime)startTimeValue);
                                            roleInstanceHistoricEntryInstance.StartTime = startTimeInstance;
                                        }
                                        
                                        JToken endTimeValue = historyInfosValue["endTime"];
                                        if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime endTimeInstance = ((DateTime)endTimeValue);
                                            roleInstanceHistoricEntryInstance.EndTime = endTimeInstance;
                                        }
                                        
                                        JToken durationValue = historyInfosValue["duration"];
                                        if (durationValue != null && durationValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan durationInstance = XmlConvert.ToTimeSpan(((string)durationValue));
                                            roleInstanceHistoricEntryInstance.Duration = durationInstance;
                                        }
                                        
                                        JToken roleIdentifierValue2 = historyInfosValue["roleIdentifier"];
                                        if (roleIdentifierValue2 != null && roleIdentifierValue2.Type != JTokenType.Null)
                                        {
                                            string roleIdentifierInstance2 = ((string)roleIdentifierValue2);
                                            roleInstanceHistoricEntryInstance.RoleIdentifier = roleIdentifierInstance2;
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                roleInstanceInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                roleInstanceInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                roleInstanceInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                roleInstanceInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    roleInstanceInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricDefinitionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/blobserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/metricdefinitions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricDefinitionsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricDefinitionsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    MetricDefinition metricDefinitionInstance = new MetricDefinition();
                                    result.Value.Add(metricDefinitionInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricDefinitionInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken unitValue = valueValue["unit"];
                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit unitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)unitValue), true));
                                        metricDefinitionInstance.Unit = unitInstance;
                                    }
                                    
                                    JToken primaryAggregationTypeValue = valueValue["primaryAggregationType"];
                                    if (primaryAggregationTypeValue != null && primaryAggregationTypeValue.Type != JTokenType.Null)
                                    {
                                        MetricPrimaryAggregationType primaryAggregationTypeInstance = ((MetricPrimaryAggregationType)Enum.Parse(typeof(MetricPrimaryAggregationType), ((string)primaryAggregationTypeValue), true));
                                        metricDefinitionInstance.PrimaryAggregationType = primaryAggregationTypeInstance;
                                    }
                                    
                                    JToken metricAvailabilitiesArray = valueValue["metricAvailabilities"];
                                    if (metricAvailabilitiesArray != null && metricAvailabilitiesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricAvailabilitiesValue in ((JArray)metricAvailabilitiesArray))
                                        {
                                            MetricAvailability metricAvailabilityInstance = new MetricAvailability();
                                            metricDefinitionInstance.MetricAvailabilities.Add(metricAvailabilityInstance);
                                            
                                            JToken timeGrainValue = metricAvailabilitiesValue["timeGrain"];
                                            if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                                metricAvailabilityInstance.TimeGrain = timeGrainInstance;
                                            }
                                            
                                            JToken retentionValue = metricAvailabilitiesValue["retention"];
                                            if (retentionValue != null && retentionValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan retentionInstance = XmlConvert.ToTimeSpan(((string)retentionValue));
                                                metricAvailabilityInstance.Retention = retentionInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/blobserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/metrics";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Metric metricInstance = new Metric();
                                    result.Metrics.Add(metricInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken metricUnitValue = valueValue["metricUnit"];
                                    if (metricUnitValue != null && metricUnitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit metricUnitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)metricUnitValue), true));
                                        metricInstance.MetricUnit = metricUnitInstance;
                                    }
                                    
                                    JToken timeGrainValue = valueValue["timeGrain"];
                                    if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                        metricInstance.TimeGrain = timeGrainInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        metricInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = valueValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        metricInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken metricValuesArray = valueValue["metricValues"];
                                    if (metricValuesArray != null && metricValuesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricValuesValue in ((JArray)metricValuesArray))
                                        {
                                            MetricValue metricValueInstance = new MetricValue();
                                            metricInstance.MetricValues.Add(metricValueInstance);
                                            
                                            JToken timeStampValue = metricValuesValue["timeStamp"];
                                            if (timeStampValue != null && timeStampValue.Type != JTokenType.Null)
                                            {
                                                DateTime timeStampInstance = ((DateTime)timeStampValue);
                                                metricValueInstance.TimeStamp = timeStampInstance;
                                            }
                                            
                                            JToken averageValue = metricValuesValue["average"];
                                            if (averageValue != null && averageValue.Type != JTokenType.Null)
                                            {
                                                double averageInstance = ((double)averageValue);
                                                metricValueInstance.Average = averageInstance;
                                            }
                                            
                                            JToken minimumValue = metricValuesValue["minimum"];
                                            if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                            {
                                                double minimumInstance = ((double)minimumValue);
                                                metricValueInstance.Minimum = minimumInstance;
                                            }
                                            
                                            JToken maximumValue = metricValuesValue["maximum"];
                                            if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                            {
                                                double maximumInstance = ((double)maximumValue);
                                                metricValueInstance.Maximum = maximumInstance;
                                            }
                                            
                                            JToken totalValue = metricValuesValue["total"];
                                            if (totalValue != null && totalValue.Type != JTokenType.Null)
                                            {
                                                double totalInstance = ((double)totalValue);
                                                metricValueInstance.Total = totalInstance;
                                            }
                                            
                                            JToken countValue = metricValuesValue["count"];
                                            if (countValue != null && countValue.Type != JTokenType.Null)
                                            {
                                                int countInstance = ((int)countValue);
                                                metricValueInstance.Count = countInstance;
                                            }
                                            
                                            JToken propertiesValue = metricValuesValue["properties"];
                                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                            {
                                                string propertiesInstance = propertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                metricValueInstance.Properties = propertiesInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<BlobServerRoleInstanceListResponse> ListAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/blobserverinstances";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    BlobServerRoleInstanceListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new BlobServerRoleInstanceListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken roleInstancesArray = responseDoc;
                            if (roleInstancesArray != null && roleInstancesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken roleInstancesValue in ((JArray)roleInstancesArray))
                                {
                                    BlobServerRoleInstanceModel blobServerRoleInstanceModelInstance = new BlobServerRoleInstanceModel();
                                    result.RoleInstances.Add(blobServerRoleInstanceModelInstance);
                                    
                                    JToken propertiesValue = roleInstancesValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        BlobServerRoleInstance propertiesInstance = new BlobServerRoleInstance();
                                        blobServerRoleInstanceModelInstance.Properties = propertiesInstance;
                                        
                                        JToken settingsValue = propertiesValue["settings"];
                                        if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                        {
                                            BlobServerRoleInstanceEffectiveSettings settingsInstance = new BlobServerRoleInstanceEffectiveSettings();
                                            propertiesInstance.Settings = settingsInstance;
                                            
                                            JToken blobSvcContainerGcIntervalValue = settingsValue["blobSvcContainerGcInterval"];
                                            if (blobSvcContainerGcIntervalValue != null && blobSvcContainerGcIntervalValue.Type != JTokenType.Null)
                                            {
                                                int blobSvcContainerGcIntervalInstance = ((int)blobSvcContainerGcIntervalValue);
                                                settingsInstance.BlobSvcContainerGcInterval = blobSvcContainerGcIntervalInstance;
                                            }
                                            
                                            JToken blobSvcShallowGcIntervalValue = settingsValue["blobSvcShallowGcInterval"];
                                            if (blobSvcShallowGcIntervalValue != null && blobSvcShallowGcIntervalValue.Type != JTokenType.Null)
                                            {
                                                int blobSvcShallowGcIntervalInstance = ((int)blobSvcShallowGcIntervalValue);
                                                settingsInstance.BlobSvcShallowGcInterval = blobSvcShallowGcIntervalInstance;
                                            }
                                            
                                            JToken blobSvcStreamMapMinContainerOccupancyPercentValue = settingsValue["blobSvcStreamMapMinContainerOccupancyPercent"];
                                            if (blobSvcStreamMapMinContainerOccupancyPercentValue != null && blobSvcStreamMapMinContainerOccupancyPercentValue.Type != JTokenType.Null)
                                            {
                                                int blobSvcStreamMapMinContainerOccupancyPercentInstance = ((int)blobSvcStreamMapMinContainerOccupancyPercentValue);
                                                settingsInstance.BlobSvcStreamMapMinContainerOccupancyPercent = blobSvcStreamMapMinContainerOccupancyPercentInstance;
                                            }
                                            
                                            JToken settingsPollingIntervalInSecondsValue = settingsValue["settingsPollingIntervalInSeconds"];
                                            if (settingsPollingIntervalInSecondsValue != null && settingsPollingIntervalInSecondsValue.Type != JTokenType.Null)
                                            {
                                                int settingsPollingIntervalInSecondsInstance = ((int)settingsPollingIntervalInSecondsValue);
                                                settingsInstance.SettingsPollingIntervalInSeconds = settingsPollingIntervalInSecondsInstance;
                                            }
                                            
                                            JToken settingsTimestampValue = settingsValue["settingsTimestamp"];
                                            if (settingsTimestampValue != null && settingsTimestampValue.Type != JTokenType.Null)
                                            {
                                                string settingsTimestampInstance = ((string)settingsTimestampValue);
                                                settingsInstance.SettingsTimestamp = settingsTimestampInstance;
                                            }
                                        }
                                        
                                        JToken roleIdentifierValue = propertiesValue["roleIdentifier"];
                                        if (roleIdentifierValue != null && roleIdentifierValue.Type != JTokenType.Null)
                                        {
                                            string roleIdentifierInstance = ((string)roleIdentifierValue);
                                            propertiesInstance.RoleIdentifier = roleIdentifierInstance;
                                        }
                                        
                                        JToken versionValue = propertiesValue["version"];
                                        if (versionValue != null && versionValue.Type != JTokenType.Null)
                                        {
                                            string versionInstance = ((string)versionValue);
                                            propertiesInstance.Version = versionInstance;
                                        }
                                        
                                        JToken statusValue = propertiesValue["status"];
                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                        {
                                            RoleInstanceStatus statusInstance = ((RoleInstanceStatus)Enum.Parse(typeof(RoleInstanceStatus), ((string)statusValue), true));
                                            propertiesInstance.Status = statusInstance;
                                        }
                                        
                                        JToken healthStatusValue = propertiesValue["healthStatus"];
                                        if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                        {
                                            HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                            propertiesInstance.HealthStatus = healthStatusInstance;
                                        }
                                        
                                        JToken nodeUriValue = propertiesValue["nodeUri"];
                                        if (nodeUriValue != null && nodeUriValue.Type != JTokenType.Null)
                                        {
                                            string nodeUriInstance = ((string)nodeUriValue);
                                            propertiesInstance.NodeUri = nodeUriInstance;
                                        }
                                        
                                        JToken historyInfosArray = propertiesValue["historyInfos"];
                                        if (historyInfosArray != null && historyInfosArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken historyInfosValue in ((JArray)historyInfosArray))
                                            {
                                                RoleInstanceHistoricEntry roleInstanceHistoricEntryInstance = new RoleInstanceHistoricEntry();
                                                propertiesInstance.HistoryInfos.Add(roleInstanceHistoricEntryInstance);
                                                
                                                JToken startTimeValue = historyInfosValue["startTime"];
                                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                {
                                                    DateTime startTimeInstance = ((DateTime)startTimeValue);
                                                    roleInstanceHistoricEntryInstance.StartTime = startTimeInstance;
                                                }
                                                
                                                JToken endTimeValue = historyInfosValue["endTime"];
                                                if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                {
                                                    DateTime endTimeInstance = ((DateTime)endTimeValue);
                                                    roleInstanceHistoricEntryInstance.EndTime = endTimeInstance;
                                                }
                                                
                                                JToken durationValue = historyInfosValue["duration"];
                                                if (durationValue != null && durationValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan durationInstance = XmlConvert.ToTimeSpan(((string)durationValue));
                                                    roleInstanceHistoricEntryInstance.Duration = durationInstance;
                                                }
                                                
                                                JToken roleIdentifierValue2 = historyInfosValue["roleIdentifier"];
                                                if (roleIdentifierValue2 != null && roleIdentifierValue2.Type != JTokenType.Null)
                                                {
                                                    string roleIdentifierInstance2 = ((string)roleIdentifierValue2);
                                                    roleInstanceHistoricEntryInstance.RoleIdentifier = roleIdentifierInstance2;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = roleInstancesValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        blobServerRoleInstanceModelInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = roleInstancesValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        blobServerRoleInstanceModelInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = roleInstancesValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        blobServerRoleInstanceModelInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = roleInstancesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        blobServerRoleInstanceModelInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)roleInstancesValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            blobServerRoleInstanceModelInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> RestartAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            StorageAdminManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "RestartAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.BlobServerInstances.BeginRestartingAsync(resourceGroupName, farmId, instanceId, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> SettingsPullNowAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "SettingsPullNowAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/blobserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/settingspullnow";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> StartAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            StorageAdminManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "StartAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.BlobServerInstances.BeginStartingAsync(resourceGroupName, farmId, instanceId, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> StopAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            StorageAdminManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "StopAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.BlobServerInstances.BeginStoppingAsync(resourceGroupName, farmId, instanceId, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
    }
    
    public static partial class BlobServiceOperationsExtensions
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public static BlobServiceGetResponse Get(this IBlobServiceOperations operations, string resourceGroupName, string farmId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBlobServiceOperations)s).GetAsync(resourceGroupName, farmId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public static Task<BlobServiceGetResponse> GetAsync(this IBlobServiceOperations operations, string resourceGroupName, string farmId)
        {
            return operations.GetAsync(resourceGroupName, farmId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricDefinitionsResult GetMetricDefinitions(this IBlobServiceOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBlobServiceOperations)s).GetMetricDefinitionsAsync(resourceGroupName, farmId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(this IBlobServiceOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return operations.GetMetricDefinitionsAsync(resourceGroupName, farmId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricsResult GetMetrics(this IBlobServiceOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBlobServiceOperations)s).GetMetricsAsync(resourceGroupName, farmId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricsResult> GetMetricsAsync(this IBlobServiceOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return operations.GetMetricsAsync(resourceGroupName, farmId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public static BlobServiceGetResponse Patch(this IBlobServiceOperations operations, string resourceGroupName, string farmId, BlobServicePatchParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBlobServiceOperations)s).PatchAsync(resourceGroupName, farmId, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IBlobServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public static Task<BlobServiceGetResponse> PatchAsync(this IBlobServiceOperations operations, string resourceGroupName, string farmId, BlobServicePatchParameters parameters)
        {
            return operations.PatchAsync(resourceGroupName, farmId, parameters, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    public partial interface IBlobServiceOperations
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        Task<BlobServiceGetResponse> GetAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        Task<BlobServiceGetResponse> PatchAsync(string resourceGroupName, string farmId, BlobServicePatchParameters parameters, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class BlobServiceOperations : IServiceOperations<StorageAdminManagementClient>, IBlobServiceOperations
    {
        /// <summary>
        /// Initializes a new instance of the BlobServiceOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal BlobServiceOperations(StorageAdminManagementClient client)
        {
            this._client = client;
        }
        
        private StorageAdminManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.StorageAdminManagementClient.
        /// </summary>
        public StorageAdminManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public async Task<BlobServiceGetResponse> GetAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/blobservices/default";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    BlobServiceGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new BlobServiceGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            BlobServiceResponseResource resourceInstance = new BlobServiceResponseResource();
                            result.Resource = resourceInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                BlobServiceResponse propertiesInstance = new BlobServiceResponse();
                                resourceInstance.BlobService = propertiesInstance;
                                
                                JToken settingsValue = propertiesValue["settings"];
                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                {
                                    BlobServiceSettings settingsInstance = new BlobServiceSettings();
                                    propertiesInstance.Settings = settingsInstance;
                                    
                                    JToken frontEndHttpListenPortValue = settingsValue["frontEndHttpListenPort"];
                                    if (frontEndHttpListenPortValue != null && frontEndHttpListenPortValue.Type != JTokenType.Null)
                                    {
                                        int frontEndHttpListenPortInstance = ((int)frontEndHttpListenPortValue);
                                        settingsInstance.FrontEndHttpListenPort = frontEndHttpListenPortInstance;
                                    }
                                    
                                    JToken frontEndHttpsListenPortValue = settingsValue["frontEndHttpsListenPort"];
                                    if (frontEndHttpsListenPortValue != null && frontEndHttpsListenPortValue.Type != JTokenType.Null)
                                    {
                                        int frontEndHttpsListenPortInstance = ((int)frontEndHttpsListenPortValue);
                                        settingsInstance.FrontEndHttpsListenPort = frontEndHttpsListenPortInstance;
                                    }
                                    
                                    JToken frontEndCallbackThreadsCountValue = settingsValue["frontEndCallbackThreadsCount"];
                                    if (frontEndCallbackThreadsCountValue != null && frontEndCallbackThreadsCountValue.Type != JTokenType.Null)
                                    {
                                        int frontEndCallbackThreadsCountInstance = ((int)frontEndCallbackThreadsCountValue);
                                        settingsInstance.FrontEndCallbackThreadsCount = frontEndCallbackThreadsCountInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingEnabledValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingEnabled"];
                                    if (frontEndCpuBasedKeepAliveThrottlingEnabledValue != null && frontEndCpuBasedKeepAliveThrottlingEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndCpuBasedKeepAliveThrottlingEnabledInstance = ((bool)frontEndCpuBasedKeepAliveThrottlingEnabledValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingEnabled = frontEndCpuBasedKeepAliveThrottlingEnabledInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold"];
                                    if (frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue != null && frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue.Type != JTokenType.Null)
                                    {
                                        double frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdInstance = ((double)frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold = frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle"];
                                    if (frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue != null && frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue.Type != JTokenType.Null)
                                    {
                                        double frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleInstance = ((double)frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle = frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds"];
                                    if (frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue != null && frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsInstance = ((int)frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds = frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsInstance;
                                    }
                                    
                                    JToken frontEndMemoryThrottlingEnabledValue = settingsValue["frontEndMemoryThrottlingEnabled"];
                                    if (frontEndMemoryThrottlingEnabledValue != null && frontEndMemoryThrottlingEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndMemoryThrottlingEnabledInstance = ((bool)frontEndMemoryThrottlingEnabledValue);
                                        settingsInstance.FrontEndMemoryThrottlingEnabled = frontEndMemoryThrottlingEnabledInstance;
                                    }
                                    
                                    JToken frontEndMaxMillisecondsBetweenMemorySamplesValue = settingsValue["frontEndMaxMillisecondsBetweenMemorySamples"];
                                    if (frontEndMaxMillisecondsBetweenMemorySamplesValue != null && frontEndMaxMillisecondsBetweenMemorySamplesValue.Type != JTokenType.Null)
                                    {
                                        int frontEndMaxMillisecondsBetweenMemorySamplesInstance = ((int)frontEndMaxMillisecondsBetweenMemorySamplesValue);
                                        settingsInstance.FrontEndMaxMillisecondsBetweenMemorySamples = frontEndMaxMillisecondsBetweenMemorySamplesInstance;
                                    }
                                    
                                    JToken frontEndMemoryThrottleThresholdSettingsValue = settingsValue["frontEndMemoryThrottleThresholdSettings"];
                                    if (frontEndMemoryThrottleThresholdSettingsValue != null && frontEndMemoryThrottleThresholdSettingsValue.Type != JTokenType.Null)
                                    {
                                        string frontEndMemoryThrottleThresholdSettingsInstance = ((string)frontEndMemoryThrottleThresholdSettingsValue);
                                        settingsInstance.FrontEndMemoryThrottleThresholdSettings = frontEndMemoryThrottleThresholdSettingsInstance;
                                    }
                                    
                                    JToken frontEndMinThreadPoolThreadsValue = settingsValue["frontEndMinThreadPoolThreads"];
                                    if (frontEndMinThreadPoolThreadsValue != null && frontEndMinThreadPoolThreadsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndMinThreadPoolThreadsInstance = ((int)frontEndMinThreadPoolThreadsValue);
                                        settingsInstance.FrontEndMinimumThreadPoolThreads = frontEndMinThreadPoolThreadsInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue = settingsValue["frontEndThreadPoolBasedKeepAliveIOCompletionThreshold"];
                                    if (frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue != null && frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveIOCompletionThresholdInstance = ((int)frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveIOCompletionThreshold = frontEndThreadPoolBasedKeepAliveIOCompletionThresholdInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue = settingsValue["frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold"];
                                    if (frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue != null && frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdInstance = ((int)frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveWorkerThreadThreshold = frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue = settingsValue["frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds"];
                                    if (frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue != null && frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsInstance = ((int)frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds = frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAlivePercentageValue = settingsValue["frontEndThreadPoolBasedKeepAlivePercentage"];
                                    if (frontEndThreadPoolBasedKeepAlivePercentageValue != null && frontEndThreadPoolBasedKeepAlivePercentageValue.Type != JTokenType.Null)
                                    {
                                        double frontEndThreadPoolBasedKeepAlivePercentageInstance = ((double)frontEndThreadPoolBasedKeepAlivePercentageValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAlivePercentage = frontEndThreadPoolBasedKeepAlivePercentageInstance;
                                    }
                                    
                                    JToken frontEndUseSlaTimeInAvailabilityValue = settingsValue["frontEndUseSlaTimeInAvailability"];
                                    if (frontEndUseSlaTimeInAvailabilityValue != null && frontEndUseSlaTimeInAvailabilityValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndUseSlaTimeInAvailabilityInstance = ((bool)frontEndUseSlaTimeInAvailabilityValue);
                                        settingsInstance.FrontEndUseSlaTimeInAvailability = frontEndUseSlaTimeInAvailabilityInstance;
                                    }
                                    
                                    JToken blobSvcContainerGcIntervalValue = settingsValue["blobSvcContainerGcInterval"];
                                    if (blobSvcContainerGcIntervalValue != null && blobSvcContainerGcIntervalValue.Type != JTokenType.Null)
                                    {
                                        int blobSvcContainerGcIntervalInstance = ((int)blobSvcContainerGcIntervalValue);
                                        settingsInstance.BlobSvcContainerGcInterval = blobSvcContainerGcIntervalInstance;
                                    }
                                    
                                    JToken blobSvcShallowGcIntervalValue = settingsValue["blobSvcShallowGcInterval"];
                                    if (blobSvcShallowGcIntervalValue != null && blobSvcShallowGcIntervalValue.Type != JTokenType.Null)
                                    {
                                        int blobSvcShallowGcIntervalInstance = ((int)blobSvcShallowGcIntervalValue);
                                        settingsInstance.BlobSvcShallowGcInterval = blobSvcShallowGcIntervalInstance;
                                    }
                                    
                                    JToken blobSvcStreamMapMinContainerOccupancyPercentValue = settingsValue["blobSvcStreamMapMinContainerOccupancyPercent"];
                                    if (blobSvcStreamMapMinContainerOccupancyPercentValue != null && blobSvcStreamMapMinContainerOccupancyPercentValue.Type != JTokenType.Null)
                                    {
                                        int blobSvcStreamMapMinContainerOccupancyPercentInstance = ((int)blobSvcStreamMapMinContainerOccupancyPercentValue);
                                        settingsInstance.BlobSvcStreamMapMinContainerOccupancyPercent = blobSvcStreamMapMinContainerOccupancyPercentInstance;
                                    }
                                }
                                
                                JToken versionValue = propertiesValue["version"];
                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                {
                                    string versionInstance = ((string)versionValue);
                                    propertiesInstance.Version = versionInstance;
                                }
                                
                                JToken healthStatusValue = propertiesValue["healthStatus"];
                                if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                {
                                    HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                    propertiesInstance.HealthStatus = healthStatusInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                resourceInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                resourceInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                resourceInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                resourceInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    resourceInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricDefinitionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/blobservices/default/metricdefinitions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricDefinitionsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricDefinitionsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    MetricDefinition metricDefinitionInstance = new MetricDefinition();
                                    result.Value.Add(metricDefinitionInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricDefinitionInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken unitValue = valueValue["unit"];
                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit unitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)unitValue), true));
                                        metricDefinitionInstance.Unit = unitInstance;
                                    }
                                    
                                    JToken primaryAggregationTypeValue = valueValue["primaryAggregationType"];
                                    if (primaryAggregationTypeValue != null && primaryAggregationTypeValue.Type != JTokenType.Null)
                                    {
                                        MetricPrimaryAggregationType primaryAggregationTypeInstance = ((MetricPrimaryAggregationType)Enum.Parse(typeof(MetricPrimaryAggregationType), ((string)primaryAggregationTypeValue), true));
                                        metricDefinitionInstance.PrimaryAggregationType = primaryAggregationTypeInstance;
                                    }
                                    
                                    JToken metricAvailabilitiesArray = valueValue["metricAvailabilities"];
                                    if (metricAvailabilitiesArray != null && metricAvailabilitiesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricAvailabilitiesValue in ((JArray)metricAvailabilitiesArray))
                                        {
                                            MetricAvailability metricAvailabilityInstance = new MetricAvailability();
                                            metricDefinitionInstance.MetricAvailabilities.Add(metricAvailabilityInstance);
                                            
                                            JToken timeGrainValue = metricAvailabilitiesValue["timeGrain"];
                                            if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                                metricAvailabilityInstance.TimeGrain = timeGrainInstance;
                                            }
                                            
                                            JToken retentionValue = metricAvailabilitiesValue["retention"];
                                            if (retentionValue != null && retentionValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan retentionInstance = XmlConvert.ToTimeSpan(((string)retentionValue));
                                                metricAvailabilityInstance.Retention = retentionInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/blobservices/default/metrics";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Metric metricInstance = new Metric();
                                    result.Metrics.Add(metricInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken metricUnitValue = valueValue["metricUnit"];
                                    if (metricUnitValue != null && metricUnitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit metricUnitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)metricUnitValue), true));
                                        metricInstance.MetricUnit = metricUnitInstance;
                                    }
                                    
                                    JToken timeGrainValue = valueValue["timeGrain"];
                                    if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                        metricInstance.TimeGrain = timeGrainInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        metricInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = valueValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        metricInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken metricValuesArray = valueValue["metricValues"];
                                    if (metricValuesArray != null && metricValuesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricValuesValue in ((JArray)metricValuesArray))
                                        {
                                            MetricValue metricValueInstance = new MetricValue();
                                            metricInstance.MetricValues.Add(metricValueInstance);
                                            
                                            JToken timeStampValue = metricValuesValue["timeStamp"];
                                            if (timeStampValue != null && timeStampValue.Type != JTokenType.Null)
                                            {
                                                DateTime timeStampInstance = ((DateTime)timeStampValue);
                                                metricValueInstance.TimeStamp = timeStampInstance;
                                            }
                                            
                                            JToken averageValue = metricValuesValue["average"];
                                            if (averageValue != null && averageValue.Type != JTokenType.Null)
                                            {
                                                double averageInstance = ((double)averageValue);
                                                metricValueInstance.Average = averageInstance;
                                            }
                                            
                                            JToken minimumValue = metricValuesValue["minimum"];
                                            if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                            {
                                                double minimumInstance = ((double)minimumValue);
                                                metricValueInstance.Minimum = minimumInstance;
                                            }
                                            
                                            JToken maximumValue = metricValuesValue["maximum"];
                                            if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                            {
                                                double maximumInstance = ((double)maximumValue);
                                                metricValueInstance.Maximum = maximumInstance;
                                            }
                                            
                                            JToken totalValue = metricValuesValue["total"];
                                            if (totalValue != null && totalValue.Type != JTokenType.Null)
                                            {
                                                double totalInstance = ((double)totalValue);
                                                metricValueInstance.Total = totalInstance;
                                            }
                                            
                                            JToken countValue = metricValuesValue["count"];
                                            if (countValue != null && countValue.Type != JTokenType.Null)
                                            {
                                                int countInstance = ((int)countValue);
                                                metricValueInstance.Count = countInstance;
                                            }
                                            
                                            JToken propertiesValue = metricValuesValue["properties"];
                                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                            {
                                                string propertiesInstance = propertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                metricValueInstance.Properties = propertiesInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public async Task<BlobServiceGetResponse> PatchAsync(string resourceGroupName, string farmId, BlobServicePatchParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "PatchAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/blobservices/default";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject blobServicePatchParametersValue = new JObject();
                requestDoc = blobServicePatchParametersValue;
                
                if (parameters.BlobService != null)
                {
                    JObject propertiesValue = new JObject();
                    blobServicePatchParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.BlobService.Settings != null)
                    {
                        JObject settingsValue = new JObject();
                        propertiesValue["settings"] = settingsValue;
                        
                        if (parameters.BlobService.Settings.FrontEndCallbackThreadsCount != null)
                        {
                            settingsValue["frontEndCallbackThreadsCount"] = parameters.BlobService.Settings.FrontEndCallbackThreadsCount.Value;
                        }
                        
                        if (parameters.BlobService.Settings.FrontEndCpuBasedKeepAliveThrottlingEnabled != null)
                        {
                            settingsValue["frontEndCpuBasedKeepAliveThrottlingEnabled"] = parameters.BlobService.Settings.FrontEndCpuBasedKeepAliveThrottlingEnabled.Value;
                        }
                        
                        if (parameters.BlobService.Settings.FrontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold != null)
                        {
                            settingsValue["frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold"] = parameters.BlobService.Settings.FrontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold.Value;
                        }
                        
                        if (parameters.BlobService.Settings.FrontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle != null)
                        {
                            settingsValue["frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle"] = parameters.BlobService.Settings.FrontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle.Value;
                        }
                        
                        if (parameters.BlobService.Settings.FrontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds != null)
                        {
                            settingsValue["frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds"] = parameters.BlobService.Settings.FrontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds.Value;
                        }
                        
                        if (parameters.BlobService.Settings.FrontEndMemoryThrottlingEnabled != null)
                        {
                            settingsValue["frontEndMemoryThrottlingEnabled"] = parameters.BlobService.Settings.FrontEndMemoryThrottlingEnabled.Value;
                        }
                        
                        if (parameters.BlobService.Settings.FrontEndMaxMillisecondsBetweenMemorySamples != null)
                        {
                            settingsValue["frontEndMaxMillisecondsBetweenMemorySamples"] = parameters.BlobService.Settings.FrontEndMaxMillisecondsBetweenMemorySamples.Value;
                        }
                        
                        if (parameters.BlobService.Settings.FrontEndMemoryThrottleThresholdSettings != null)
                        {
                            settingsValue["frontEndMemoryThrottleThresholdSettings"] = parameters.BlobService.Settings.FrontEndMemoryThrottleThresholdSettings;
                        }
                        
                        if (parameters.BlobService.Settings.FrontEndMinimumThreadPoolThreads != null)
                        {
                            settingsValue["frontEndMinThreadPoolThreads"] = parameters.BlobService.Settings.FrontEndMinimumThreadPoolThreads.Value;
                        }
                        
                        if (parameters.BlobService.Settings.FrontEndThreadPoolBasedKeepAliveIOCompletionThreshold != null)
                        {
                            settingsValue["frontEndThreadPoolBasedKeepAliveIOCompletionThreshold"] = parameters.BlobService.Settings.FrontEndThreadPoolBasedKeepAliveIOCompletionThreshold.Value;
                        }
                        
                        if (parameters.BlobService.Settings.FrontEndThreadPoolBasedKeepAliveWorkerThreadThreshold != null)
                        {
                            settingsValue["frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold"] = parameters.BlobService.Settings.FrontEndThreadPoolBasedKeepAliveWorkerThreadThreshold.Value;
                        }
                        
                        if (parameters.BlobService.Settings.FrontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds != null)
                        {
                            settingsValue["frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds"] = parameters.BlobService.Settings.FrontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds.Value;
                        }
                        
                        if (parameters.BlobService.Settings.FrontEndThreadPoolBasedKeepAlivePercentage != null)
                        {
                            settingsValue["frontEndThreadPoolBasedKeepAlivePercentage"] = parameters.BlobService.Settings.FrontEndThreadPoolBasedKeepAlivePercentage.Value;
                        }
                        
                        if (parameters.BlobService.Settings.FrontEndUseSlaTimeInAvailability != null)
                        {
                            settingsValue["frontEndUseSlaTimeInAvailability"] = parameters.BlobService.Settings.FrontEndUseSlaTimeInAvailability.Value;
                        }
                        
                        if (parameters.BlobService.Settings.BlobSvcContainerGcInterval != null)
                        {
                            settingsValue["blobSvcContainerGcInterval"] = parameters.BlobService.Settings.BlobSvcContainerGcInterval.Value;
                        }
                        
                        if (parameters.BlobService.Settings.BlobSvcShallowGcInterval != null)
                        {
                            settingsValue["blobSvcShallowGcInterval"] = parameters.BlobService.Settings.BlobSvcShallowGcInterval.Value;
                        }
                        
                        if (parameters.BlobService.Settings.BlobSvcStreamMapMinContainerOccupancyPercent != null)
                        {
                            settingsValue["blobSvcStreamMapMinContainerOccupancyPercent"] = parameters.BlobService.Settings.BlobSvcStreamMapMinContainerOccupancyPercent.Value;
                        }
                    }
                }
                
                if (parameters.Id != null)
                {
                    blobServicePatchParametersValue["id"] = parameters.Id;
                }
                
                if (parameters.Name != null)
                {
                    blobServicePatchParametersValue["name"] = parameters.Name;
                }
                
                if (parameters.Type != null)
                {
                    blobServicePatchParametersValue["type"] = parameters.Type;
                }
                
                if (parameters.Location != null)
                {
                    blobServicePatchParametersValue["location"] = parameters.Location;
                }
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    blobServicePatchParametersValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    BlobServiceGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new BlobServiceGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            BlobServiceResponseResource resourceInstance = new BlobServiceResponseResource();
                            result.Resource = resourceInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                BlobServiceResponse propertiesInstance = new BlobServiceResponse();
                                resourceInstance.BlobService = propertiesInstance;
                                
                                JToken settingsValue2 = propertiesValue2["settings"];
                                if (settingsValue2 != null && settingsValue2.Type != JTokenType.Null)
                                {
                                    BlobServiceSettings settingsInstance = new BlobServiceSettings();
                                    propertiesInstance.Settings = settingsInstance;
                                    
                                    JToken frontEndHttpListenPortValue = settingsValue2["frontEndHttpListenPort"];
                                    if (frontEndHttpListenPortValue != null && frontEndHttpListenPortValue.Type != JTokenType.Null)
                                    {
                                        int frontEndHttpListenPortInstance = ((int)frontEndHttpListenPortValue);
                                        settingsInstance.FrontEndHttpListenPort = frontEndHttpListenPortInstance;
                                    }
                                    
                                    JToken frontEndHttpsListenPortValue = settingsValue2["frontEndHttpsListenPort"];
                                    if (frontEndHttpsListenPortValue != null && frontEndHttpsListenPortValue.Type != JTokenType.Null)
                                    {
                                        int frontEndHttpsListenPortInstance = ((int)frontEndHttpsListenPortValue);
                                        settingsInstance.FrontEndHttpsListenPort = frontEndHttpsListenPortInstance;
                                    }
                                    
                                    JToken frontEndCallbackThreadsCountValue = settingsValue2["frontEndCallbackThreadsCount"];
                                    if (frontEndCallbackThreadsCountValue != null && frontEndCallbackThreadsCountValue.Type != JTokenType.Null)
                                    {
                                        int frontEndCallbackThreadsCountInstance = ((int)frontEndCallbackThreadsCountValue);
                                        settingsInstance.FrontEndCallbackThreadsCount = frontEndCallbackThreadsCountInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingEnabledValue = settingsValue2["frontEndCpuBasedKeepAliveThrottlingEnabled"];
                                    if (frontEndCpuBasedKeepAliveThrottlingEnabledValue != null && frontEndCpuBasedKeepAliveThrottlingEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndCpuBasedKeepAliveThrottlingEnabledInstance = ((bool)frontEndCpuBasedKeepAliveThrottlingEnabledValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingEnabled = frontEndCpuBasedKeepAliveThrottlingEnabledInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue = settingsValue2["frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold"];
                                    if (frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue != null && frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue.Type != JTokenType.Null)
                                    {
                                        double frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdInstance = ((double)frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold = frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue = settingsValue2["frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle"];
                                    if (frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue != null && frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue.Type != JTokenType.Null)
                                    {
                                        double frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleInstance = ((double)frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle = frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue = settingsValue2["frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds"];
                                    if (frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue != null && frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsInstance = ((int)frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds = frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsInstance;
                                    }
                                    
                                    JToken frontEndMemoryThrottlingEnabledValue = settingsValue2["frontEndMemoryThrottlingEnabled"];
                                    if (frontEndMemoryThrottlingEnabledValue != null && frontEndMemoryThrottlingEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndMemoryThrottlingEnabledInstance = ((bool)frontEndMemoryThrottlingEnabledValue);
                                        settingsInstance.FrontEndMemoryThrottlingEnabled = frontEndMemoryThrottlingEnabledInstance;
                                    }
                                    
                                    JToken frontEndMaxMillisecondsBetweenMemorySamplesValue = settingsValue2["frontEndMaxMillisecondsBetweenMemorySamples"];
                                    if (frontEndMaxMillisecondsBetweenMemorySamplesValue != null && frontEndMaxMillisecondsBetweenMemorySamplesValue.Type != JTokenType.Null)
                                    {
                                        int frontEndMaxMillisecondsBetweenMemorySamplesInstance = ((int)frontEndMaxMillisecondsBetweenMemorySamplesValue);
                                        settingsInstance.FrontEndMaxMillisecondsBetweenMemorySamples = frontEndMaxMillisecondsBetweenMemorySamplesInstance;
                                    }
                                    
                                    JToken frontEndMemoryThrottleThresholdSettingsValue = settingsValue2["frontEndMemoryThrottleThresholdSettings"];
                                    if (frontEndMemoryThrottleThresholdSettingsValue != null && frontEndMemoryThrottleThresholdSettingsValue.Type != JTokenType.Null)
                                    {
                                        string frontEndMemoryThrottleThresholdSettingsInstance = ((string)frontEndMemoryThrottleThresholdSettingsValue);
                                        settingsInstance.FrontEndMemoryThrottleThresholdSettings = frontEndMemoryThrottleThresholdSettingsInstance;
                                    }
                                    
                                    JToken frontEndMinThreadPoolThreadsValue = settingsValue2["frontEndMinThreadPoolThreads"];
                                    if (frontEndMinThreadPoolThreadsValue != null && frontEndMinThreadPoolThreadsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndMinThreadPoolThreadsInstance = ((int)frontEndMinThreadPoolThreadsValue);
                                        settingsInstance.FrontEndMinimumThreadPoolThreads = frontEndMinThreadPoolThreadsInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue = settingsValue2["frontEndThreadPoolBasedKeepAliveIOCompletionThreshold"];
                                    if (frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue != null && frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveIOCompletionThresholdInstance = ((int)frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveIOCompletionThreshold = frontEndThreadPoolBasedKeepAliveIOCompletionThresholdInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue = settingsValue2["frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold"];
                                    if (frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue != null && frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdInstance = ((int)frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveWorkerThreadThreshold = frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue = settingsValue2["frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds"];
                                    if (frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue != null && frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsInstance = ((int)frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds = frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAlivePercentageValue = settingsValue2["frontEndThreadPoolBasedKeepAlivePercentage"];
                                    if (frontEndThreadPoolBasedKeepAlivePercentageValue != null && frontEndThreadPoolBasedKeepAlivePercentageValue.Type != JTokenType.Null)
                                    {
                                        double frontEndThreadPoolBasedKeepAlivePercentageInstance = ((double)frontEndThreadPoolBasedKeepAlivePercentageValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAlivePercentage = frontEndThreadPoolBasedKeepAlivePercentageInstance;
                                    }
                                    
                                    JToken frontEndUseSlaTimeInAvailabilityValue = settingsValue2["frontEndUseSlaTimeInAvailability"];
                                    if (frontEndUseSlaTimeInAvailabilityValue != null && frontEndUseSlaTimeInAvailabilityValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndUseSlaTimeInAvailabilityInstance = ((bool)frontEndUseSlaTimeInAvailabilityValue);
                                        settingsInstance.FrontEndUseSlaTimeInAvailability = frontEndUseSlaTimeInAvailabilityInstance;
                                    }
                                    
                                    JToken blobSvcContainerGcIntervalValue = settingsValue2["blobSvcContainerGcInterval"];
                                    if (blobSvcContainerGcIntervalValue != null && blobSvcContainerGcIntervalValue.Type != JTokenType.Null)
                                    {
                                        int blobSvcContainerGcIntervalInstance = ((int)blobSvcContainerGcIntervalValue);
                                        settingsInstance.BlobSvcContainerGcInterval = blobSvcContainerGcIntervalInstance;
                                    }
                                    
                                    JToken blobSvcShallowGcIntervalValue = settingsValue2["blobSvcShallowGcInterval"];
                                    if (blobSvcShallowGcIntervalValue != null && blobSvcShallowGcIntervalValue.Type != JTokenType.Null)
                                    {
                                        int blobSvcShallowGcIntervalInstance = ((int)blobSvcShallowGcIntervalValue);
                                        settingsInstance.BlobSvcShallowGcInterval = blobSvcShallowGcIntervalInstance;
                                    }
                                    
                                    JToken blobSvcStreamMapMinContainerOccupancyPercentValue = settingsValue2["blobSvcStreamMapMinContainerOccupancyPercent"];
                                    if (blobSvcStreamMapMinContainerOccupancyPercentValue != null && blobSvcStreamMapMinContainerOccupancyPercentValue.Type != JTokenType.Null)
                                    {
                                        int blobSvcStreamMapMinContainerOccupancyPercentInstance = ((int)blobSvcStreamMapMinContainerOccupancyPercentValue);
                                        settingsInstance.BlobSvcStreamMapMinContainerOccupancyPercent = blobSvcStreamMapMinContainerOccupancyPercentInstance;
                                    }
                                }
                                
                                JToken versionValue = propertiesValue2["version"];
                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                {
                                    string versionInstance = ((string)versionValue);
                                    propertiesInstance.Version = versionInstance;
                                }
                                
                                JToken healthStatusValue = propertiesValue2["healthStatus"];
                                if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                {
                                    HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                    propertiesInstance.HealthStatus = healthStatusInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                resourceInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                resourceInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                resourceInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                resourceInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    resourceInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class FarmOperationsExtensions
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static LogCollectResponse BeginCollectLog(this IFarmOperations operations, string resourceGroupName, string farmId, LogCollectParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFarmOperations)s).BeginCollectLogAsync(resourceGroupName, farmId, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<LogCollectResponse> BeginCollectLogAsync(this IFarmOperations operations, string resourceGroupName, string farmId, LogCollectParameters parameters)
        {
            return operations.BeginCollectLogAsync(resourceGroupName, farmId, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static LogCollectResponse CollectLog(this IFarmOperations operations, string resourceGroupName, string farmId, LogCollectParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFarmOperations)s).CollectLogAsync(resourceGroupName, farmId, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<LogCollectResponse> CollectLogAsync(this IFarmOperations operations, string resourceGroupName, string farmId, LogCollectParameters parameters)
        {
            return operations.CollectLogAsync(resourceGroupName, farmId, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static FarmGetResponse Create(this IFarmOperations operations, string resourceGroupName, string farmId, FarmCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFarmOperations)s).CreateAsync(resourceGroupName, farmId, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<FarmGetResponse> CreateAsync(this IFarmOperations operations, string resourceGroupName, string farmId, FarmCreateParameters parameters)
        {
            return operations.CreateAsync(resourceGroupName, farmId, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static FarmGetResponse Get(this IFarmOperations operations, string resourceGroupName, string farmId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFarmOperations)s).GetAsync(resourceGroupName, farmId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<FarmGetResponse> GetAsync(this IFarmOperations operations, string resourceGroupName, string farmId)
        {
            return operations.GetAsync(resourceGroupName, farmId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static EventQuery GetEventQuery(this IFarmOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFarmOperations)s).GetEventQueryAsync(resourceGroupName, farmId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<EventQuery> GetEventQueryAsync(this IFarmOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return operations.GetEventQueryAsync(resourceGroupName, farmId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFarmOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static LogCollectResponse GetLogCollectOperationStatus(this IFarmOperations operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFarmOperations)s).GetLogCollectOperationStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFarmOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<LogCollectResponse> GetLogCollectOperationStatusAsync(this IFarmOperations operations, string operationStatusLink)
        {
            return operations.GetLogCollectOperationStatusAsync(operationStatusLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricDefinitionsResult GetMetricDefinitions(this IFarmOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFarmOperations)s).GetMetricDefinitionsAsync(resourceGroupName, farmId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(this IFarmOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return operations.GetMetricDefinitionsAsync(resourceGroupName, farmId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricsResult GetMetrics(this IFarmOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFarmOperations)s).GetMetricsAsync(resourceGroupName, farmId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricsResult> GetMetricsAsync(this IFarmOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return operations.GetMetricsAsync(resourceGroupName, farmId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static FarmListResponse List(this IFarmOperations operations, string resourceGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFarmOperations)s).ListAsync(resourceGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<FarmListResponse> ListAsync(this IFarmOperations operations, string resourceGroupName)
        {
            return operations.ListAsync(resourceGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static FarmGetResponse Update(this IFarmOperations operations, string resourceGroupName, string farmId, FarmUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFarmOperations)s).UpdateAsync(resourceGroupName, farmId, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<FarmGetResponse> UpdateAsync(this IFarmOperations operations, string resourceGroupName, string farmId, FarmUpdateParameters parameters)
        {
            return operations.UpdateAsync(resourceGroupName, farmId, parameters, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    public partial interface IFarmOperations
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<LogCollectResponse> BeginCollectLogAsync(string resourceGroupName, string farmId, LogCollectParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<LogCollectResponse> CollectLogAsync(string resourceGroupName, string farmId, LogCollectParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<FarmGetResponse> CreateAsync(string resourceGroupName, string farmId, FarmCreateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<FarmGetResponse> GetAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<EventQuery> GetEventQueryAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<LogCollectResponse> GetLogCollectOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<FarmListResponse> ListAsync(string resourceGroupName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<FarmGetResponse> UpdateAsync(string resourceGroupName, string farmId, FarmUpdateParameters parameters, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class FarmOperations : IServiceOperations<StorageAdminManagementClient>, IFarmOperations
    {
        /// <summary>
        /// Initializes a new instance of the FarmOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal FarmOperations(StorageAdminManagementClient client)
        {
            this._client = client;
        }
        
        private StorageAdminManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.StorageAdminManagementClient.
        /// </summary>
        public StorageAdminManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<LogCollectResponse> BeginCollectLogAsync(string resourceGroupName, string farmId, LogCollectParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCollectLogAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/collectlog";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject logCollectParametersValue = new JObject();
                requestDoc = logCollectParametersValue;
                
                logCollectParametersValue["startTime"] = parameters.StartTime;
                
                logCollectParametersValue["endTime"] = parameters.EndTime;
                
                if (parameters.TargetShareFolder != null)
                {
                    logCollectParametersValue["targetShareFolder"] = parameters.TargetShareFolder;
                }
                
                if (parameters.AzureStorageAccountName != null)
                {
                    logCollectParametersValue["azureStorageAccountName"] = parameters.AzureStorageAccountName;
                }
                
                if (parameters.AzureStorageAccountKey != null)
                {
                    logCollectParametersValue["azureStorageAccountKey"] = parameters.AzureStorageAccountKey;
                }
                
                if (parameters.AzureSasToken != null)
                {
                    logCollectParametersValue["azureSasToken"] = parameters.AzureSasToken;
                }
                
                if (parameters.AzureBlobContainer != null)
                {
                    logCollectParametersValue["azureBlobContainer"] = parameters.AzureBlobContainer;
                }
                
                if (parameters.UserName != null)
                {
                    logCollectParametersValue["userName"] = parameters.UserName;
                }
                
                if (parameters.PlainPassword != null)
                {
                    logCollectParametersValue["plainPassword"] = parameters.PlainPassword;
                }
                
                if (parameters.LogPrefix != null)
                {
                    logCollectParametersValue["logPrefix"] = parameters.LogPrefix;
                }
                
                if (parameters.Id != null)
                {
                    logCollectParametersValue["id"] = parameters.Id;
                }
                
                if (parameters.Name != null)
                {
                    logCollectParametersValue["name"] = parameters.Name;
                }
                
                if (parameters.Type != null)
                {
                    logCollectParametersValue["type"] = parameters.Type;
                }
                
                if (parameters.Location != null)
                {
                    logCollectParametersValue["location"] = parameters.Location;
                }
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    logCollectParametersValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LogCollectResponse result = null;
                    // Deserialize Response
                    result = new LogCollectResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict || statusCode == HttpStatusCode.NotFound || statusCode == HttpStatusCode.MethodNotAllowed || statusCode == HttpStatusCode.Forbidden)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<LogCollectResponse> CollectLogAsync(string resourceGroupName, string farmId, LogCollectParameters parameters, CancellationToken cancellationToken)
        {
            StorageAdminManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CollectLogAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LogCollectResponse response = await client.Farms.BeginCollectLogAsync(resourceGroupName, farmId, parameters, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            LogCollectResponse result = await client.Farms.GetLogCollectOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.Farms.GetLogCollectOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<FarmGetResponse> CreateAsync(string resourceGroupName, string farmId, FarmCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject farmCreateParametersValue = new JObject();
                requestDoc = farmCreateParametersValue;
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    farmCreateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Properties.SettingAccessString != null)
                    {
                        propertiesValue["settingAccessString"] = parameters.Properties.SettingAccessString;
                    }
                }
                
                if (parameters.Id != null)
                {
                    farmCreateParametersValue["id"] = parameters.Id;
                }
                
                if (parameters.Name != null)
                {
                    farmCreateParametersValue["name"] = parameters.Name;
                }
                
                if (parameters.Type != null)
                {
                    farmCreateParametersValue["type"] = parameters.Type;
                }
                
                if (parameters.Location != null)
                {
                    farmCreateParametersValue["location"] = parameters.Location;
                }
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    farmCreateParametersValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FarmGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FarmGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            FarmModel farmInstance = new FarmModel();
                            result.Farm = farmInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                Farm propertiesInstance = new Farm();
                                farmInstance.Properties = propertiesInstance;
                                
                                JToken settingsStoreValue = propertiesValue2["settingsStore"];
                                if (settingsStoreValue != null && settingsStoreValue.Type != JTokenType.Null)
                                {
                                    string settingsStoreInstance = ((string)settingsStoreValue);
                                    propertiesInstance.SettingsStore = settingsStoreInstance;
                                }
                                
                                JToken healthStatusValue = propertiesValue2["healthStatus"];
                                if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                {
                                    HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                    propertiesInstance.HealthStatus = healthStatusInstance;
                                }
                                
                                JToken settingsValue = propertiesValue2["settings"];
                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                {
                                    FarmSettings settingsInstance = new FarmSettings();
                                    propertiesInstance.Settings = settingsInstance;
                                    
                                    JToken settingsPollingIntervalInSecondValue = settingsValue["settingsPollingIntervalInSecond"];
                                    if (settingsPollingIntervalInSecondValue != null && settingsPollingIntervalInSecondValue.Type != JTokenType.Null)
                                    {
                                        int settingsPollingIntervalInSecondInstance = ((int)settingsPollingIntervalInSecondValue);
                                        settingsInstance.SettingsPollingIntervalInSecond = settingsPollingIntervalInSecondInstance;
                                    }
                                    
                                    JToken hostStyleHttpPortValue = settingsValue["hostStyleHttpPort"];
                                    if (hostStyleHttpPortValue != null && hostStyleHttpPortValue.Type != JTokenType.Null)
                                    {
                                        int hostStyleHttpPortInstance = ((int)hostStyleHttpPortValue);
                                        settingsInstance.HostStyleHttpPort = hostStyleHttpPortInstance;
                                    }
                                    
                                    JToken hostStyleHttpsPortValue = settingsValue["hostStyleHttpsPort"];
                                    if (hostStyleHttpsPortValue != null && hostStyleHttpsPortValue.Type != JTokenType.Null)
                                    {
                                        int hostStyleHttpsPortInstance = ((int)hostStyleHttpsPortValue);
                                        settingsInstance.HostStyleHttpsPort = hostStyleHttpsPortInstance;
                                    }
                                    
                                    JToken corsAllowedOriginsListValue = settingsValue["corsAllowedOriginsList"];
                                    if (corsAllowedOriginsListValue != null && corsAllowedOriginsListValue.Type != JTokenType.Null)
                                    {
                                        string corsAllowedOriginsListInstance = ((string)corsAllowedOriginsListValue);
                                        settingsInstance.CorsAllowedOriginsList = corsAllowedOriginsListInstance;
                                    }
                                    
                                    JToken dataCenterUriHostSuffixesValue = settingsValue["dataCenterUriHostSuffixes"];
                                    if (dataCenterUriHostSuffixesValue != null && dataCenterUriHostSuffixesValue.Type != JTokenType.Null)
                                    {
                                        string dataCenterUriHostSuffixesInstance = ((string)dataCenterUriHostSuffixesValue);
                                        settingsInstance.DataCenterUriHostSuffixes = dataCenterUriHostSuffixesInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                farmInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                farmInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                farmInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                farmInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    farmInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<FarmGetResponse> GetAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FarmGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FarmGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            FarmModel farmInstance = new FarmModel();
                            result.Farm = farmInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                Farm propertiesInstance = new Farm();
                                farmInstance.Properties = propertiesInstance;
                                
                                JToken settingsStoreValue = propertiesValue["settingsStore"];
                                if (settingsStoreValue != null && settingsStoreValue.Type != JTokenType.Null)
                                {
                                    string settingsStoreInstance = ((string)settingsStoreValue);
                                    propertiesInstance.SettingsStore = settingsStoreInstance;
                                }
                                
                                JToken healthStatusValue = propertiesValue["healthStatus"];
                                if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                {
                                    HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                    propertiesInstance.HealthStatus = healthStatusInstance;
                                }
                                
                                JToken settingsValue = propertiesValue["settings"];
                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                {
                                    FarmSettings settingsInstance = new FarmSettings();
                                    propertiesInstance.Settings = settingsInstance;
                                    
                                    JToken settingsPollingIntervalInSecondValue = settingsValue["settingsPollingIntervalInSecond"];
                                    if (settingsPollingIntervalInSecondValue != null && settingsPollingIntervalInSecondValue.Type != JTokenType.Null)
                                    {
                                        int settingsPollingIntervalInSecondInstance = ((int)settingsPollingIntervalInSecondValue);
                                        settingsInstance.SettingsPollingIntervalInSecond = settingsPollingIntervalInSecondInstance;
                                    }
                                    
                                    JToken hostStyleHttpPortValue = settingsValue["hostStyleHttpPort"];
                                    if (hostStyleHttpPortValue != null && hostStyleHttpPortValue.Type != JTokenType.Null)
                                    {
                                        int hostStyleHttpPortInstance = ((int)hostStyleHttpPortValue);
                                        settingsInstance.HostStyleHttpPort = hostStyleHttpPortInstance;
                                    }
                                    
                                    JToken hostStyleHttpsPortValue = settingsValue["hostStyleHttpsPort"];
                                    if (hostStyleHttpsPortValue != null && hostStyleHttpsPortValue.Type != JTokenType.Null)
                                    {
                                        int hostStyleHttpsPortInstance = ((int)hostStyleHttpsPortValue);
                                        settingsInstance.HostStyleHttpsPort = hostStyleHttpsPortInstance;
                                    }
                                    
                                    JToken corsAllowedOriginsListValue = settingsValue["corsAllowedOriginsList"];
                                    if (corsAllowedOriginsListValue != null && corsAllowedOriginsListValue.Type != JTokenType.Null)
                                    {
                                        string corsAllowedOriginsListInstance = ((string)corsAllowedOriginsListValue);
                                        settingsInstance.CorsAllowedOriginsList = corsAllowedOriginsListInstance;
                                    }
                                    
                                    JToken dataCenterUriHostSuffixesValue = settingsValue["dataCenterUriHostSuffixes"];
                                    if (dataCenterUriHostSuffixesValue != null && dataCenterUriHostSuffixesValue.Type != JTokenType.Null)
                                    {
                                        string dataCenterUriHostSuffixesInstance = ((string)dataCenterUriHostSuffixesValue);
                                        settingsInstance.DataCenterUriHostSuffixes = dataCenterUriHostSuffixesInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                farmInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                farmInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                farmInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                farmInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    farmInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<EventQuery> GetEventQueryAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetEventQueryAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/geteventquery";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    EventQuery result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new EventQuery();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken filterUriValue = responseDoc["filterUri"];
                            if (filterUriValue != null && filterUriValue.Type != JTokenType.Null)
                            {
                                string filterUriInstance = ((string)filterUriValue);
                                result.FilterUri = filterUriInstance;
                            }
                            
                            JToken tableEndpointValue = responseDoc["tableEndpoint"];
                            if (tableEndpointValue != null && tableEndpointValue.Type != JTokenType.Null)
                            {
                                string tableEndpointInstance = ((string)tableEndpointValue);
                                result.TableEndpoint = tableEndpointInstance;
                            }
                            
                            JToken tableInfosArray = responseDoc["tableInfos"];
                            if (tableInfosArray != null && tableInfosArray.Type != JTokenType.Null)
                            {
                                foreach (JToken tableInfosValue in ((JArray)tableInfosArray))
                                {
                                    TableInfo tableInfoInstance = new TableInfo();
                                    result.TableInfos.Add(tableInfoInstance);
                                    
                                    JToken startTimeValue = tableInfosValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        tableInfoInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = tableInfosValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        tableInfoInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken tableNameValue = tableInfosValue["tableName"];
                                    if (tableNameValue != null && tableNameValue.Type != JTokenType.Null)
                                    {
                                        string tableNameInstance = ((string)tableNameValue);
                                        tableInfoInstance.TableName = tableNameInstance;
                                    }
                                    
                                    JToken sasTokenValue = tableInfosValue["sasToken"];
                                    if (sasTokenValue != null && sasTokenValue.Type != JTokenType.Null)
                                    {
                                        string sasTokenInstance = ((string)sasTokenValue);
                                        tableInfoInstance.SasToken = sasTokenInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<LogCollectResponse> GetLogCollectOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetLogCollectOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-12-01-preview");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LogCollectResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new LogCollectResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken resultStringValue = responseDoc["resultString"];
                            if (resultStringValue != null && resultStringValue.Type != JTokenType.Null)
                            {
                                string resultStringInstance = ((string)resultStringValue);
                                result.ResultString = resultStringInstance;
                            }
                            
                            JToken exceptionStringValue = responseDoc["exceptionString"];
                            if (exceptionStringValue != null && exceptionStringValue.Type != JTokenType.Null)
                            {
                                string exceptionStringInstance = ((string)exceptionStringValue);
                                result.ExceptionString = exceptionStringInstance;
                            }
                            
                            JToken isFailedValue = responseDoc["isFailed"];
                            if (isFailedValue != null && isFailedValue.Type != JTokenType.Null)
                            {
                                bool isFailedInstance = ((bool)isFailedValue);
                                result.IsFailed = isFailedInstance;
                            }
                            
                            JToken logPrefixValue = responseDoc["logPrefix"];
                            if (logPrefixValue != null && logPrefixValue.Type != JTokenType.Null)
                            {
                                string logPrefixInstance = ((string)logPrefixValue);
                                result.LogPrefix = logPrefixInstance;
                            }
                            
                            StorageAdminError errorInstance = new StorageAdminError();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict || statusCode == HttpStatusCode.NotFound || statusCode == HttpStatusCode.MethodNotAllowed || statusCode == HttpStatusCode.Forbidden)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricDefinitionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/metricdefinitions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricDefinitionsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricDefinitionsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    MetricDefinition metricDefinitionInstance = new MetricDefinition();
                                    result.Value.Add(metricDefinitionInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricDefinitionInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken unitValue = valueValue["unit"];
                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit unitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)unitValue), true));
                                        metricDefinitionInstance.Unit = unitInstance;
                                    }
                                    
                                    JToken primaryAggregationTypeValue = valueValue["primaryAggregationType"];
                                    if (primaryAggregationTypeValue != null && primaryAggregationTypeValue.Type != JTokenType.Null)
                                    {
                                        MetricPrimaryAggregationType primaryAggregationTypeInstance = ((MetricPrimaryAggregationType)Enum.Parse(typeof(MetricPrimaryAggregationType), ((string)primaryAggregationTypeValue), true));
                                        metricDefinitionInstance.PrimaryAggregationType = primaryAggregationTypeInstance;
                                    }
                                    
                                    JToken metricAvailabilitiesArray = valueValue["metricAvailabilities"];
                                    if (metricAvailabilitiesArray != null && metricAvailabilitiesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricAvailabilitiesValue in ((JArray)metricAvailabilitiesArray))
                                        {
                                            MetricAvailability metricAvailabilityInstance = new MetricAvailability();
                                            metricDefinitionInstance.MetricAvailabilities.Add(metricAvailabilityInstance);
                                            
                                            JToken timeGrainValue = metricAvailabilitiesValue["timeGrain"];
                                            if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                                metricAvailabilityInstance.TimeGrain = timeGrainInstance;
                                            }
                                            
                                            JToken retentionValue = metricAvailabilitiesValue["retention"];
                                            if (retentionValue != null && retentionValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan retentionInstance = XmlConvert.ToTimeSpan(((string)retentionValue));
                                                metricAvailabilityInstance.Retention = retentionInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/metrics";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Metric metricInstance = new Metric();
                                    result.Metrics.Add(metricInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken metricUnitValue = valueValue["metricUnit"];
                                    if (metricUnitValue != null && metricUnitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit metricUnitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)metricUnitValue), true));
                                        metricInstance.MetricUnit = metricUnitInstance;
                                    }
                                    
                                    JToken timeGrainValue = valueValue["timeGrain"];
                                    if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                        metricInstance.TimeGrain = timeGrainInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        metricInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = valueValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        metricInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken metricValuesArray = valueValue["metricValues"];
                                    if (metricValuesArray != null && metricValuesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricValuesValue in ((JArray)metricValuesArray))
                                        {
                                            MetricValue metricValueInstance = new MetricValue();
                                            metricInstance.MetricValues.Add(metricValueInstance);
                                            
                                            JToken timeStampValue = metricValuesValue["timeStamp"];
                                            if (timeStampValue != null && timeStampValue.Type != JTokenType.Null)
                                            {
                                                DateTime timeStampInstance = ((DateTime)timeStampValue);
                                                metricValueInstance.TimeStamp = timeStampInstance;
                                            }
                                            
                                            JToken averageValue = metricValuesValue["average"];
                                            if (averageValue != null && averageValue.Type != JTokenType.Null)
                                            {
                                                double averageInstance = ((double)averageValue);
                                                metricValueInstance.Average = averageInstance;
                                            }
                                            
                                            JToken minimumValue = metricValuesValue["minimum"];
                                            if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                            {
                                                double minimumInstance = ((double)minimumValue);
                                                metricValueInstance.Minimum = minimumInstance;
                                            }
                                            
                                            JToken maximumValue = metricValuesValue["maximum"];
                                            if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                            {
                                                double maximumInstance = ((double)maximumValue);
                                                metricValueInstance.Maximum = maximumInstance;
                                            }
                                            
                                            JToken totalValue = metricValuesValue["total"];
                                            if (totalValue != null && totalValue.Type != JTokenType.Null)
                                            {
                                                double totalInstance = ((double)totalValue);
                                                metricValueInstance.Total = totalInstance;
                                            }
                                            
                                            JToken countValue = metricValuesValue["count"];
                                            if (countValue != null && countValue.Type != JTokenType.Null)
                                            {
                                                int countInstance = ((int)countValue);
                                                metricValueInstance.Count = countInstance;
                                            }
                                            
                                            JToken propertiesValue = metricValuesValue["properties"];
                                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                            {
                                                string propertiesInstance = propertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                metricValueInstance.Properties = propertiesInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<FarmListResponse> ListAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FarmListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FarmListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    FarmModel farmModelInstance = new FarmModel();
                                    result.Farms.Add(farmModelInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        Farm propertiesInstance = new Farm();
                                        farmModelInstance.Properties = propertiesInstance;
                                        
                                        JToken settingsStoreValue = propertiesValue["settingsStore"];
                                        if (settingsStoreValue != null && settingsStoreValue.Type != JTokenType.Null)
                                        {
                                            string settingsStoreInstance = ((string)settingsStoreValue);
                                            propertiesInstance.SettingsStore = settingsStoreInstance;
                                        }
                                        
                                        JToken healthStatusValue = propertiesValue["healthStatus"];
                                        if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                        {
                                            HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                            propertiesInstance.HealthStatus = healthStatusInstance;
                                        }
                                        
                                        JToken settingsValue = propertiesValue["settings"];
                                        if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                        {
                                            FarmSettings settingsInstance = new FarmSettings();
                                            propertiesInstance.Settings = settingsInstance;
                                            
                                            JToken settingsPollingIntervalInSecondValue = settingsValue["settingsPollingIntervalInSecond"];
                                            if (settingsPollingIntervalInSecondValue != null && settingsPollingIntervalInSecondValue.Type != JTokenType.Null)
                                            {
                                                int settingsPollingIntervalInSecondInstance = ((int)settingsPollingIntervalInSecondValue);
                                                settingsInstance.SettingsPollingIntervalInSecond = settingsPollingIntervalInSecondInstance;
                                            }
                                            
                                            JToken hostStyleHttpPortValue = settingsValue["hostStyleHttpPort"];
                                            if (hostStyleHttpPortValue != null && hostStyleHttpPortValue.Type != JTokenType.Null)
                                            {
                                                int hostStyleHttpPortInstance = ((int)hostStyleHttpPortValue);
                                                settingsInstance.HostStyleHttpPort = hostStyleHttpPortInstance;
                                            }
                                            
                                            JToken hostStyleHttpsPortValue = settingsValue["hostStyleHttpsPort"];
                                            if (hostStyleHttpsPortValue != null && hostStyleHttpsPortValue.Type != JTokenType.Null)
                                            {
                                                int hostStyleHttpsPortInstance = ((int)hostStyleHttpsPortValue);
                                                settingsInstance.HostStyleHttpsPort = hostStyleHttpsPortInstance;
                                            }
                                            
                                            JToken corsAllowedOriginsListValue = settingsValue["corsAllowedOriginsList"];
                                            if (corsAllowedOriginsListValue != null && corsAllowedOriginsListValue.Type != JTokenType.Null)
                                            {
                                                string corsAllowedOriginsListInstance = ((string)corsAllowedOriginsListValue);
                                                settingsInstance.CorsAllowedOriginsList = corsAllowedOriginsListInstance;
                                            }
                                            
                                            JToken dataCenterUriHostSuffixesValue = settingsValue["dataCenterUriHostSuffixes"];
                                            if (dataCenterUriHostSuffixesValue != null && dataCenterUriHostSuffixesValue.Type != JTokenType.Null)
                                            {
                                                string dataCenterUriHostSuffixesInstance = ((string)dataCenterUriHostSuffixesValue);
                                                settingsInstance.DataCenterUriHostSuffixes = dataCenterUriHostSuffixesInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        farmModelInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        farmModelInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        farmModelInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        farmModelInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            farmModelInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<FarmGetResponse> UpdateAsync(string resourceGroupName, string farmId, FarmUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject farmUpdateParametersValue = new JObject();
                requestDoc = farmUpdateParametersValue;
                
                if (parameters.Farm != null)
                {
                    JObject propertiesValue = new JObject();
                    farmUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Farm.Settings != null)
                    {
                        JObject settingsValue = new JObject();
                        propertiesValue["settings"] = settingsValue;
                        
                        if (parameters.Farm.Settings.SettingsPollingIntervalInSecond != null)
                        {
                            settingsValue["settingsPollingIntervalInSecond"] = parameters.Farm.Settings.SettingsPollingIntervalInSecond.Value;
                        }
                        
                        if (parameters.Farm.Settings.HostStyleHttpPort != null)
                        {
                            settingsValue["hostStyleHttpPort"] = parameters.Farm.Settings.HostStyleHttpPort.Value;
                        }
                        
                        if (parameters.Farm.Settings.HostStyleHttpsPort != null)
                        {
                            settingsValue["hostStyleHttpsPort"] = parameters.Farm.Settings.HostStyleHttpsPort.Value;
                        }
                        
                        if (parameters.Farm.Settings.CorsAllowedOriginsList != null)
                        {
                            settingsValue["corsAllowedOriginsList"] = parameters.Farm.Settings.CorsAllowedOriginsList;
                        }
                        
                        if (parameters.Farm.Settings.DataCenterUriHostSuffixes != null)
                        {
                            settingsValue["dataCenterUriHostSuffixes"] = parameters.Farm.Settings.DataCenterUriHostSuffixes;
                        }
                    }
                }
                
                if (parameters.Id != null)
                {
                    farmUpdateParametersValue["id"] = parameters.Id;
                }
                
                if (parameters.Name != null)
                {
                    farmUpdateParametersValue["name"] = parameters.Name;
                }
                
                if (parameters.Type != null)
                {
                    farmUpdateParametersValue["type"] = parameters.Type;
                }
                
                if (parameters.Location != null)
                {
                    farmUpdateParametersValue["location"] = parameters.Location;
                }
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    farmUpdateParametersValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FarmGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FarmGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            FarmModel farmInstance = new FarmModel();
                            result.Farm = farmInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                Farm propertiesInstance = new Farm();
                                farmInstance.Properties = propertiesInstance;
                                
                                JToken settingsStoreValue = propertiesValue2["settingsStore"];
                                if (settingsStoreValue != null && settingsStoreValue.Type != JTokenType.Null)
                                {
                                    string settingsStoreInstance = ((string)settingsStoreValue);
                                    propertiesInstance.SettingsStore = settingsStoreInstance;
                                }
                                
                                JToken healthStatusValue = propertiesValue2["healthStatus"];
                                if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                {
                                    HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                    propertiesInstance.HealthStatus = healthStatusInstance;
                                }
                                
                                JToken settingsValue2 = propertiesValue2["settings"];
                                if (settingsValue2 != null && settingsValue2.Type != JTokenType.Null)
                                {
                                    FarmSettings settingsInstance = new FarmSettings();
                                    propertiesInstance.Settings = settingsInstance;
                                    
                                    JToken settingsPollingIntervalInSecondValue = settingsValue2["settingsPollingIntervalInSecond"];
                                    if (settingsPollingIntervalInSecondValue != null && settingsPollingIntervalInSecondValue.Type != JTokenType.Null)
                                    {
                                        int settingsPollingIntervalInSecondInstance = ((int)settingsPollingIntervalInSecondValue);
                                        settingsInstance.SettingsPollingIntervalInSecond = settingsPollingIntervalInSecondInstance;
                                    }
                                    
                                    JToken hostStyleHttpPortValue = settingsValue2["hostStyleHttpPort"];
                                    if (hostStyleHttpPortValue != null && hostStyleHttpPortValue.Type != JTokenType.Null)
                                    {
                                        int hostStyleHttpPortInstance = ((int)hostStyleHttpPortValue);
                                        settingsInstance.HostStyleHttpPort = hostStyleHttpPortInstance;
                                    }
                                    
                                    JToken hostStyleHttpsPortValue = settingsValue2["hostStyleHttpsPort"];
                                    if (hostStyleHttpsPortValue != null && hostStyleHttpsPortValue.Type != JTokenType.Null)
                                    {
                                        int hostStyleHttpsPortInstance = ((int)hostStyleHttpsPortValue);
                                        settingsInstance.HostStyleHttpsPort = hostStyleHttpsPortInstance;
                                    }
                                    
                                    JToken corsAllowedOriginsListValue = settingsValue2["corsAllowedOriginsList"];
                                    if (corsAllowedOriginsListValue != null && corsAllowedOriginsListValue.Type != JTokenType.Null)
                                    {
                                        string corsAllowedOriginsListInstance = ((string)corsAllowedOriginsListValue);
                                        settingsInstance.CorsAllowedOriginsList = corsAllowedOriginsListInstance;
                                    }
                                    
                                    JToken dataCenterUriHostSuffixesValue = settingsValue2["dataCenterUriHostSuffixes"];
                                    if (dataCenterUriHostSuffixesValue != null && dataCenterUriHostSuffixesValue.Type != JTokenType.Null)
                                    {
                                        string dataCenterUriHostSuffixesInstance = ((string)dataCenterUriHostSuffixesValue);
                                        settingsInstance.DataCenterUriHostSuffixes = dataCenterUriHostSuffixesInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                farmInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                farmInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                farmInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                farmInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    farmInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class FaultOperationsExtensions
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFaultOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='faultId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static FaultGetResponse Dismiss(this IFaultOperations operations, string resourceGroupName, string farmId, string faultId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFaultOperations)s).DismissAsync(resourceGroupName, farmId, faultId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFaultOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='faultId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<FaultGetResponse> DismissAsync(this IFaultOperations operations, string resourceGroupName, string farmId, string faultId)
        {
            return operations.DismissAsync(resourceGroupName, farmId, faultId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFaultOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='faultId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static FaultGetResponse Get(this IFaultOperations operations, string resourceGroupName, string farmId, string faultId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFaultOperations)s).GetAsync(resourceGroupName, farmId, faultId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFaultOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='faultId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<FaultGetResponse> GetAsync(this IFaultOperations operations, string resourceGroupName, string farmId, string faultId)
        {
            return operations.GetAsync(resourceGroupName, farmId, faultId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFaultOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='resourceUri'>
        /// Optional. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static FaultListResponse ListCurrentFaults(this IFaultOperations operations, string resourceGroupName, string farmId, string resourceUri)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFaultOperations)s).ListCurrentFaultsAsync(resourceGroupName, farmId, resourceUri);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFaultOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='resourceUri'>
        /// Optional. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<FaultListResponse> ListCurrentFaultsAsync(this IFaultOperations operations, string resourceGroupName, string farmId, string resourceUri)
        {
            return operations.ListCurrentFaultsAsync(resourceGroupName, farmId, resourceUri, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFaultOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='startTime'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='endTime'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static FaultListResponse ListHistoryFaults(this IFaultOperations operations, string resourceGroupName, string farmId, string startTime, string endTime)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFaultOperations)s).ListHistoryFaultsAsync(resourceGroupName, farmId, startTime, endTime);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IFaultOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='startTime'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='endTime'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<FaultListResponse> ListHistoryFaultsAsync(this IFaultOperations operations, string resourceGroupName, string farmId, string startTime, string endTime)
        {
            return operations.ListHistoryFaultsAsync(resourceGroupName, farmId, startTime, endTime, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    public partial interface IFaultOperations
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='faultId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<FaultGetResponse> DismissAsync(string resourceGroupName, string farmId, string faultId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='faultId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<FaultGetResponse> GetAsync(string resourceGroupName, string farmId, string faultId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='resourceUri'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<FaultListResponse> ListCurrentFaultsAsync(string resourceGroupName, string farmId, string resourceUri, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='startTime'>
        /// Your documentation here.
        /// </param>
        /// <param name='endTime'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<FaultListResponse> ListHistoryFaultsAsync(string resourceGroupName, string farmId, string startTime, string endTime, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class FaultOperations : IServiceOperations<StorageAdminManagementClient>, IFaultOperations
    {
        /// <summary>
        /// Initializes a new instance of the FaultOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal FaultOperations(StorageAdminManagementClient client)
        {
            this._client = client;
        }
        
        private StorageAdminManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.StorageAdminManagementClient.
        /// </summary>
        public StorageAdminManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='faultId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<FaultGetResponse> DismissAsync(string resourceGroupName, string farmId, string faultId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (faultId == null)
            {
                throw new ArgumentNullException("faultId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("faultId", faultId);
                TracingAdapter.Enter(invocationId, this, "DismissAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/faults/";
            url = url + Uri.EscapeDataString(faultId);
            url = url + "/dismiss";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FaultGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FaultGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            FaultModel faultInstance = new FaultModel();
                            result.Fault = faultInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                Fault propertiesInstance = new Fault();
                                faultInstance.Properties = propertiesInstance;
                                
                                JToken faultIdValue = propertiesValue["faultId"];
                                if (faultIdValue != null && faultIdValue.Type != JTokenType.Null)
                                {
                                    string faultIdInstance = ((string)faultIdValue);
                                    propertiesInstance.FaultId = faultIdInstance;
                                }
                                
                                JToken faultRuleNameValue = propertiesValue["faultRuleName"];
                                if (faultRuleNameValue != null && faultRuleNameValue.Type != JTokenType.Null)
                                {
                                    string faultRuleNameInstance = ((string)faultRuleNameValue);
                                    propertiesInstance.FaultRuleName = faultRuleNameInstance;
                                }
                                
                                JToken descriptionValue = propertiesValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                                
                                JToken resourceUriValue = propertiesValue["resourceUri"];
                                if (resourceUriValue != null && resourceUriValue.Type != JTokenType.Null)
                                {
                                    string resourceUriInstance = ((string)resourceUriValue);
                                    propertiesInstance.ResourceUri = resourceUriInstance;
                                }
                                
                                JToken severityValue = propertiesValue["severity"];
                                if (severityValue != null && severityValue.Type != JTokenType.Null)
                                {
                                    Severity severityInstance = ((Severity)Enum.Parse(typeof(Severity), ((string)severityValue), true));
                                    propertiesInstance.Severity = severityInstance;
                                }
                                
                                JToken activatedTimeValue = propertiesValue["activatedTime"];
                                if (activatedTimeValue != null && activatedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime activatedTimeInstance = ((DateTime)activatedTimeValue);
                                    propertiesInstance.ActivatedTime = activatedTimeInstance;
                                }
                                
                                JToken resolvedTimeValue = propertiesValue["resolvedTime"];
                                if (resolvedTimeValue != null && resolvedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime resolvedTimeInstance = ((DateTime)resolvedTimeValue);
                                    propertiesInstance.ResolvedTime = resolvedTimeInstance;
                                }
                                
                                JToken resolutionTextValue = propertiesValue["resolutionText"];
                                if (resolutionTextValue != null && resolutionTextValue.Type != JTokenType.Null)
                                {
                                    string resolutionTextInstance = ((string)resolutionTextValue);
                                    propertiesInstance.ResolutionText = resolutionTextInstance;
                                }
                                
                                JToken associatedDataTypeValue = propertiesValue["associatedDataType"];
                                if (associatedDataTypeValue != null && associatedDataTypeValue.Type != JTokenType.Null)
                                {
                                    AssociatedDataType associatedDataTypeInstance = ((AssociatedDataType)Enum.Parse(typeof(AssociatedDataType), ((string)associatedDataTypeValue), true));
                                    propertiesInstance.AssociatedDataType = associatedDataTypeInstance;
                                }
                                
                                JToken associatedMetricsNameValue = propertiesValue["associatedMetricsName"];
                                if (associatedMetricsNameValue != null && associatedMetricsNameValue.Type != JTokenType.Null)
                                {
                                    string associatedMetricsNameInstance = ((string)associatedMetricsNameValue);
                                    propertiesInstance.AssociatedMetricsName = associatedMetricsNameInstance;
                                }
                                
                                JToken associatedEventQueryValue = propertiesValue["associatedEventQuery"];
                                if (associatedEventQueryValue != null && associatedEventQueryValue.Type != JTokenType.Null)
                                {
                                    EventQuery associatedEventQueryInstance = new EventQuery();
                                    propertiesInstance.AssociatedEventQuery = associatedEventQueryInstance;
                                    
                                    JToken filterUriValue = associatedEventQueryValue["filterUri"];
                                    if (filterUriValue != null && filterUriValue.Type != JTokenType.Null)
                                    {
                                        string filterUriInstance = ((string)filterUriValue);
                                        associatedEventQueryInstance.FilterUri = filterUriInstance;
                                    }
                                    
                                    JToken tableEndpointValue = associatedEventQueryValue["tableEndpoint"];
                                    if (tableEndpointValue != null && tableEndpointValue.Type != JTokenType.Null)
                                    {
                                        string tableEndpointInstance = ((string)tableEndpointValue);
                                        associatedEventQueryInstance.TableEndpoint = tableEndpointInstance;
                                    }
                                    
                                    JToken tableInfosArray = associatedEventQueryValue["tableInfos"];
                                    if (tableInfosArray != null && tableInfosArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken tableInfosValue in ((JArray)tableInfosArray))
                                        {
                                            TableInfo tableInfoInstance = new TableInfo();
                                            associatedEventQueryInstance.TableInfos.Add(tableInfoInstance);
                                            
                                            JToken startTimeValue = tableInfosValue["startTime"];
                                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime startTimeInstance = ((DateTime)startTimeValue);
                                                tableInfoInstance.StartTime = startTimeInstance;
                                            }
                                            
                                            JToken endTimeValue = tableInfosValue["endTime"];
                                            if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime endTimeInstance = ((DateTime)endTimeValue);
                                                tableInfoInstance.EndTime = endTimeInstance;
                                            }
                                            
                                            JToken tableNameValue = tableInfosValue["tableName"];
                                            if (tableNameValue != null && tableNameValue.Type != JTokenType.Null)
                                            {
                                                string tableNameInstance = ((string)tableNameValue);
                                                tableInfoInstance.TableName = tableNameInstance;
                                            }
                                            
                                            JToken sasTokenValue = tableInfosValue["sasToken"];
                                            if (sasTokenValue != null && sasTokenValue.Type != JTokenType.Null)
                                            {
                                                string sasTokenInstance = ((string)sasTokenValue);
                                                tableInfoInstance.SasToken = sasTokenInstance;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                faultInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                faultInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                faultInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                faultInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    faultInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='faultId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<FaultGetResponse> GetAsync(string resourceGroupName, string farmId, string faultId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (faultId == null)
            {
                throw new ArgumentNullException("faultId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("faultId", faultId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/faults/";
            url = url + Uri.EscapeDataString(faultId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FaultGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FaultGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            FaultModel faultInstance = new FaultModel();
                            result.Fault = faultInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                Fault propertiesInstance = new Fault();
                                faultInstance.Properties = propertiesInstance;
                                
                                JToken faultIdValue = propertiesValue["faultId"];
                                if (faultIdValue != null && faultIdValue.Type != JTokenType.Null)
                                {
                                    string faultIdInstance = ((string)faultIdValue);
                                    propertiesInstance.FaultId = faultIdInstance;
                                }
                                
                                JToken faultRuleNameValue = propertiesValue["faultRuleName"];
                                if (faultRuleNameValue != null && faultRuleNameValue.Type != JTokenType.Null)
                                {
                                    string faultRuleNameInstance = ((string)faultRuleNameValue);
                                    propertiesInstance.FaultRuleName = faultRuleNameInstance;
                                }
                                
                                JToken descriptionValue = propertiesValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                                
                                JToken resourceUriValue = propertiesValue["resourceUri"];
                                if (resourceUriValue != null && resourceUriValue.Type != JTokenType.Null)
                                {
                                    string resourceUriInstance = ((string)resourceUriValue);
                                    propertiesInstance.ResourceUri = resourceUriInstance;
                                }
                                
                                JToken severityValue = propertiesValue["severity"];
                                if (severityValue != null && severityValue.Type != JTokenType.Null)
                                {
                                    Severity severityInstance = ((Severity)Enum.Parse(typeof(Severity), ((string)severityValue), true));
                                    propertiesInstance.Severity = severityInstance;
                                }
                                
                                JToken activatedTimeValue = propertiesValue["activatedTime"];
                                if (activatedTimeValue != null && activatedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime activatedTimeInstance = ((DateTime)activatedTimeValue);
                                    propertiesInstance.ActivatedTime = activatedTimeInstance;
                                }
                                
                                JToken resolvedTimeValue = propertiesValue["resolvedTime"];
                                if (resolvedTimeValue != null && resolvedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime resolvedTimeInstance = ((DateTime)resolvedTimeValue);
                                    propertiesInstance.ResolvedTime = resolvedTimeInstance;
                                }
                                
                                JToken resolutionTextValue = propertiesValue["resolutionText"];
                                if (resolutionTextValue != null && resolutionTextValue.Type != JTokenType.Null)
                                {
                                    string resolutionTextInstance = ((string)resolutionTextValue);
                                    propertiesInstance.ResolutionText = resolutionTextInstance;
                                }
                                
                                JToken associatedDataTypeValue = propertiesValue["associatedDataType"];
                                if (associatedDataTypeValue != null && associatedDataTypeValue.Type != JTokenType.Null)
                                {
                                    AssociatedDataType associatedDataTypeInstance = ((AssociatedDataType)Enum.Parse(typeof(AssociatedDataType), ((string)associatedDataTypeValue), true));
                                    propertiesInstance.AssociatedDataType = associatedDataTypeInstance;
                                }
                                
                                JToken associatedMetricsNameValue = propertiesValue["associatedMetricsName"];
                                if (associatedMetricsNameValue != null && associatedMetricsNameValue.Type != JTokenType.Null)
                                {
                                    string associatedMetricsNameInstance = ((string)associatedMetricsNameValue);
                                    propertiesInstance.AssociatedMetricsName = associatedMetricsNameInstance;
                                }
                                
                                JToken associatedEventQueryValue = propertiesValue["associatedEventQuery"];
                                if (associatedEventQueryValue != null && associatedEventQueryValue.Type != JTokenType.Null)
                                {
                                    EventQuery associatedEventQueryInstance = new EventQuery();
                                    propertiesInstance.AssociatedEventQuery = associatedEventQueryInstance;
                                    
                                    JToken filterUriValue = associatedEventQueryValue["filterUri"];
                                    if (filterUriValue != null && filterUriValue.Type != JTokenType.Null)
                                    {
                                        string filterUriInstance = ((string)filterUriValue);
                                        associatedEventQueryInstance.FilterUri = filterUriInstance;
                                    }
                                    
                                    JToken tableEndpointValue = associatedEventQueryValue["tableEndpoint"];
                                    if (tableEndpointValue != null && tableEndpointValue.Type != JTokenType.Null)
                                    {
                                        string tableEndpointInstance = ((string)tableEndpointValue);
                                        associatedEventQueryInstance.TableEndpoint = tableEndpointInstance;
                                    }
                                    
                                    JToken tableInfosArray = associatedEventQueryValue["tableInfos"];
                                    if (tableInfosArray != null && tableInfosArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken tableInfosValue in ((JArray)tableInfosArray))
                                        {
                                            TableInfo tableInfoInstance = new TableInfo();
                                            associatedEventQueryInstance.TableInfos.Add(tableInfoInstance);
                                            
                                            JToken startTimeValue = tableInfosValue["startTime"];
                                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime startTimeInstance = ((DateTime)startTimeValue);
                                                tableInfoInstance.StartTime = startTimeInstance;
                                            }
                                            
                                            JToken endTimeValue = tableInfosValue["endTime"];
                                            if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime endTimeInstance = ((DateTime)endTimeValue);
                                                tableInfoInstance.EndTime = endTimeInstance;
                                            }
                                            
                                            JToken tableNameValue = tableInfosValue["tableName"];
                                            if (tableNameValue != null && tableNameValue.Type != JTokenType.Null)
                                            {
                                                string tableNameInstance = ((string)tableNameValue);
                                                tableInfoInstance.TableName = tableNameInstance;
                                            }
                                            
                                            JToken sasTokenValue = tableInfosValue["sasToken"];
                                            if (sasTokenValue != null && sasTokenValue.Type != JTokenType.Null)
                                            {
                                                string sasTokenInstance = ((string)sasTokenValue);
                                                tableInfoInstance.SasToken = sasTokenInstance;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                faultInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                faultInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                faultInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                faultInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    faultInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='resourceUri'>
        /// Optional. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<FaultListResponse> ListCurrentFaultsAsync(string resourceGroupName, string farmId, string resourceUri, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("resourceUri", resourceUri);
                TracingAdapter.Enter(invocationId, this, "ListCurrentFaultsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/faults";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            if (resourceUri != null)
            {
                odataFilter.Add("resourceUri eq '" + Uri.EscapeDataString(resourceUri) + "'");
            }
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FaultListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FaultListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken faultsArray = responseDoc;
                            if (faultsArray != null && faultsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken faultsValue in ((JArray)faultsArray))
                                {
                                    FaultModel faultModelInstance = new FaultModel();
                                    result.Faults.Add(faultModelInstance);
                                    
                                    JToken propertiesValue = faultsValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        Fault propertiesInstance = new Fault();
                                        faultModelInstance.Properties = propertiesInstance;
                                        
                                        JToken faultIdValue = propertiesValue["faultId"];
                                        if (faultIdValue != null && faultIdValue.Type != JTokenType.Null)
                                        {
                                            string faultIdInstance = ((string)faultIdValue);
                                            propertiesInstance.FaultId = faultIdInstance;
                                        }
                                        
                                        JToken faultRuleNameValue = propertiesValue["faultRuleName"];
                                        if (faultRuleNameValue != null && faultRuleNameValue.Type != JTokenType.Null)
                                        {
                                            string faultRuleNameInstance = ((string)faultRuleNameValue);
                                            propertiesInstance.FaultRuleName = faultRuleNameInstance;
                                        }
                                        
                                        JToken descriptionValue = propertiesValue["description"];
                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance = ((string)descriptionValue);
                                            propertiesInstance.Description = descriptionInstance;
                                        }
                                        
                                        JToken resourceUriValue = propertiesValue["resourceUri"];
                                        if (resourceUriValue != null && resourceUriValue.Type != JTokenType.Null)
                                        {
                                            string resourceUriInstance = ((string)resourceUriValue);
                                            propertiesInstance.ResourceUri = resourceUriInstance;
                                        }
                                        
                                        JToken severityValue = propertiesValue["severity"];
                                        if (severityValue != null && severityValue.Type != JTokenType.Null)
                                        {
                                            Severity severityInstance = ((Severity)Enum.Parse(typeof(Severity), ((string)severityValue), true));
                                            propertiesInstance.Severity = severityInstance;
                                        }
                                        
                                        JToken activatedTimeValue = propertiesValue["activatedTime"];
                                        if (activatedTimeValue != null && activatedTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime activatedTimeInstance = ((DateTime)activatedTimeValue);
                                            propertiesInstance.ActivatedTime = activatedTimeInstance;
                                        }
                                        
                                        JToken resolvedTimeValue = propertiesValue["resolvedTime"];
                                        if (resolvedTimeValue != null && resolvedTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime resolvedTimeInstance = ((DateTime)resolvedTimeValue);
                                            propertiesInstance.ResolvedTime = resolvedTimeInstance;
                                        }
                                        
                                        JToken resolutionTextValue = propertiesValue["resolutionText"];
                                        if (resolutionTextValue != null && resolutionTextValue.Type != JTokenType.Null)
                                        {
                                            string resolutionTextInstance = ((string)resolutionTextValue);
                                            propertiesInstance.ResolutionText = resolutionTextInstance;
                                        }
                                        
                                        JToken associatedDataTypeValue = propertiesValue["associatedDataType"];
                                        if (associatedDataTypeValue != null && associatedDataTypeValue.Type != JTokenType.Null)
                                        {
                                            AssociatedDataType associatedDataTypeInstance = ((AssociatedDataType)Enum.Parse(typeof(AssociatedDataType), ((string)associatedDataTypeValue), true));
                                            propertiesInstance.AssociatedDataType = associatedDataTypeInstance;
                                        }
                                        
                                        JToken associatedMetricsNameValue = propertiesValue["associatedMetricsName"];
                                        if (associatedMetricsNameValue != null && associatedMetricsNameValue.Type != JTokenType.Null)
                                        {
                                            string associatedMetricsNameInstance = ((string)associatedMetricsNameValue);
                                            propertiesInstance.AssociatedMetricsName = associatedMetricsNameInstance;
                                        }
                                        
                                        JToken associatedEventQueryValue = propertiesValue["associatedEventQuery"];
                                        if (associatedEventQueryValue != null && associatedEventQueryValue.Type != JTokenType.Null)
                                        {
                                            EventQuery associatedEventQueryInstance = new EventQuery();
                                            propertiesInstance.AssociatedEventQuery = associatedEventQueryInstance;
                                            
                                            JToken filterUriValue = associatedEventQueryValue["filterUri"];
                                            if (filterUriValue != null && filterUriValue.Type != JTokenType.Null)
                                            {
                                                string filterUriInstance = ((string)filterUriValue);
                                                associatedEventQueryInstance.FilterUri = filterUriInstance;
                                            }
                                            
                                            JToken tableEndpointValue = associatedEventQueryValue["tableEndpoint"];
                                            if (tableEndpointValue != null && tableEndpointValue.Type != JTokenType.Null)
                                            {
                                                string tableEndpointInstance = ((string)tableEndpointValue);
                                                associatedEventQueryInstance.TableEndpoint = tableEndpointInstance;
                                            }
                                            
                                            JToken tableInfosArray = associatedEventQueryValue["tableInfos"];
                                            if (tableInfosArray != null && tableInfosArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken tableInfosValue in ((JArray)tableInfosArray))
                                                {
                                                    TableInfo tableInfoInstance = new TableInfo();
                                                    associatedEventQueryInstance.TableInfos.Add(tableInfoInstance);
                                                    
                                                    JToken startTimeValue = tableInfosValue["startTime"];
                                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                    {
                                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                                        tableInfoInstance.StartTime = startTimeInstance;
                                                    }
                                                    
                                                    JToken endTimeValue = tableInfosValue["endTime"];
                                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                    {
                                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                                        tableInfoInstance.EndTime = endTimeInstance;
                                                    }
                                                    
                                                    JToken tableNameValue = tableInfosValue["tableName"];
                                                    if (tableNameValue != null && tableNameValue.Type != JTokenType.Null)
                                                    {
                                                        string tableNameInstance = ((string)tableNameValue);
                                                        tableInfoInstance.TableName = tableNameInstance;
                                                    }
                                                    
                                                    JToken sasTokenValue = tableInfosValue["sasToken"];
                                                    if (sasTokenValue != null && sasTokenValue.Type != JTokenType.Null)
                                                    {
                                                        string sasTokenInstance = ((string)sasTokenValue);
                                                        tableInfoInstance.SasToken = sasTokenInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = faultsValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        faultModelInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = faultsValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        faultModelInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = faultsValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        faultModelInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = faultsValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        faultModelInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)faultsValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            faultModelInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='startTime'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='endTime'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<FaultListResponse> ListHistoryFaultsAsync(string resourceGroupName, string farmId, string startTime, string endTime, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (startTime == null)
            {
                throw new ArgumentNullException("startTime");
            }
            if (endTime == null)
            {
                throw new ArgumentNullException("endTime");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("startTime", startTime);
                tracingParameters.Add("endTime", endTime);
                TracingAdapter.Enter(invocationId, this, "ListHistoryFaultsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/faults";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add("startTime eq '" + Uri.EscapeDataString(startTime) + "'");
            odataFilter.Add("endTime eq '" + Uri.EscapeDataString(endTime) + "'");
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(" and ", odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FaultListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FaultListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken faultsArray = responseDoc;
                            if (faultsArray != null && faultsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken faultsValue in ((JArray)faultsArray))
                                {
                                    FaultModel faultModelInstance = new FaultModel();
                                    result.Faults.Add(faultModelInstance);
                                    
                                    JToken propertiesValue = faultsValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        Fault propertiesInstance = new Fault();
                                        faultModelInstance.Properties = propertiesInstance;
                                        
                                        JToken faultIdValue = propertiesValue["faultId"];
                                        if (faultIdValue != null && faultIdValue.Type != JTokenType.Null)
                                        {
                                            string faultIdInstance = ((string)faultIdValue);
                                            propertiesInstance.FaultId = faultIdInstance;
                                        }
                                        
                                        JToken faultRuleNameValue = propertiesValue["faultRuleName"];
                                        if (faultRuleNameValue != null && faultRuleNameValue.Type != JTokenType.Null)
                                        {
                                            string faultRuleNameInstance = ((string)faultRuleNameValue);
                                            propertiesInstance.FaultRuleName = faultRuleNameInstance;
                                        }
                                        
                                        JToken descriptionValue = propertiesValue["description"];
                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance = ((string)descriptionValue);
                                            propertiesInstance.Description = descriptionInstance;
                                        }
                                        
                                        JToken resourceUriValue = propertiesValue["resourceUri"];
                                        if (resourceUriValue != null && resourceUriValue.Type != JTokenType.Null)
                                        {
                                            string resourceUriInstance = ((string)resourceUriValue);
                                            propertiesInstance.ResourceUri = resourceUriInstance;
                                        }
                                        
                                        JToken severityValue = propertiesValue["severity"];
                                        if (severityValue != null && severityValue.Type != JTokenType.Null)
                                        {
                                            Severity severityInstance = ((Severity)Enum.Parse(typeof(Severity), ((string)severityValue), true));
                                            propertiesInstance.Severity = severityInstance;
                                        }
                                        
                                        JToken activatedTimeValue = propertiesValue["activatedTime"];
                                        if (activatedTimeValue != null && activatedTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime activatedTimeInstance = ((DateTime)activatedTimeValue);
                                            propertiesInstance.ActivatedTime = activatedTimeInstance;
                                        }
                                        
                                        JToken resolvedTimeValue = propertiesValue["resolvedTime"];
                                        if (resolvedTimeValue != null && resolvedTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime resolvedTimeInstance = ((DateTime)resolvedTimeValue);
                                            propertiesInstance.ResolvedTime = resolvedTimeInstance;
                                        }
                                        
                                        JToken resolutionTextValue = propertiesValue["resolutionText"];
                                        if (resolutionTextValue != null && resolutionTextValue.Type != JTokenType.Null)
                                        {
                                            string resolutionTextInstance = ((string)resolutionTextValue);
                                            propertiesInstance.ResolutionText = resolutionTextInstance;
                                        }
                                        
                                        JToken associatedDataTypeValue = propertiesValue["associatedDataType"];
                                        if (associatedDataTypeValue != null && associatedDataTypeValue.Type != JTokenType.Null)
                                        {
                                            AssociatedDataType associatedDataTypeInstance = ((AssociatedDataType)Enum.Parse(typeof(AssociatedDataType), ((string)associatedDataTypeValue), true));
                                            propertiesInstance.AssociatedDataType = associatedDataTypeInstance;
                                        }
                                        
                                        JToken associatedMetricsNameValue = propertiesValue["associatedMetricsName"];
                                        if (associatedMetricsNameValue != null && associatedMetricsNameValue.Type != JTokenType.Null)
                                        {
                                            string associatedMetricsNameInstance = ((string)associatedMetricsNameValue);
                                            propertiesInstance.AssociatedMetricsName = associatedMetricsNameInstance;
                                        }
                                        
                                        JToken associatedEventQueryValue = propertiesValue["associatedEventQuery"];
                                        if (associatedEventQueryValue != null && associatedEventQueryValue.Type != JTokenType.Null)
                                        {
                                            EventQuery associatedEventQueryInstance = new EventQuery();
                                            propertiesInstance.AssociatedEventQuery = associatedEventQueryInstance;
                                            
                                            JToken filterUriValue = associatedEventQueryValue["filterUri"];
                                            if (filterUriValue != null && filterUriValue.Type != JTokenType.Null)
                                            {
                                                string filterUriInstance = ((string)filterUriValue);
                                                associatedEventQueryInstance.FilterUri = filterUriInstance;
                                            }
                                            
                                            JToken tableEndpointValue = associatedEventQueryValue["tableEndpoint"];
                                            if (tableEndpointValue != null && tableEndpointValue.Type != JTokenType.Null)
                                            {
                                                string tableEndpointInstance = ((string)tableEndpointValue);
                                                associatedEventQueryInstance.TableEndpoint = tableEndpointInstance;
                                            }
                                            
                                            JToken tableInfosArray = associatedEventQueryValue["tableInfos"];
                                            if (tableInfosArray != null && tableInfosArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken tableInfosValue in ((JArray)tableInfosArray))
                                                {
                                                    TableInfo tableInfoInstance = new TableInfo();
                                                    associatedEventQueryInstance.TableInfos.Add(tableInfoInstance);
                                                    
                                                    JToken startTimeValue = tableInfosValue["startTime"];
                                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                    {
                                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                                        tableInfoInstance.StartTime = startTimeInstance;
                                                    }
                                                    
                                                    JToken endTimeValue = tableInfosValue["endTime"];
                                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                    {
                                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                                        tableInfoInstance.EndTime = endTimeInstance;
                                                    }
                                                    
                                                    JToken tableNameValue = tableInfosValue["tableName"];
                                                    if (tableNameValue != null && tableNameValue.Type != JTokenType.Null)
                                                    {
                                                        string tableNameInstance = ((string)tableNameValue);
                                                        tableInfoInstance.TableName = tableNameInstance;
                                                    }
                                                    
                                                    JToken sasTokenValue = tableInfosValue["sasToken"];
                                                    if (sasTokenValue != null && sasTokenValue.Type != JTokenType.Null)
                                                    {
                                                        string sasTokenInstance = ((string)sasTokenValue);
                                                        tableInfoInstance.SasToken = sasTokenInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = faultsValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        faultModelInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = faultsValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        faultModelInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = faultsValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        faultModelInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = faultsValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        faultModelInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)faultsValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            faultModelInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class HealthMonitoringServerInstanceOperationsExtensions
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IHealthMonitoringServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse BeginRestarting(this IHealthMonitoringServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IHealthMonitoringServerInstanceOperations)s).BeginRestartingAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IHealthMonitoringServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> BeginRestartingAsync(this IHealthMonitoringServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.BeginRestartingAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IHealthMonitoringServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MonitoringServerRoleInstanceGetResponse Get(this IHealthMonitoringServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IHealthMonitoringServerInstanceOperations)s).GetAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IHealthMonitoringServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MonitoringServerRoleInstanceGetResponse> GetAsync(this IHealthMonitoringServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.GetAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IHealthMonitoringServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricDefinitionsResult GetMetricDefinitions(this IHealthMonitoringServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IHealthMonitoringServerInstanceOperations)s).GetMetricDefinitionsAsync(resourceGroupName, farmId, instanceId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IHealthMonitoringServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(this IHealthMonitoringServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return operations.GetMetricDefinitionsAsync(resourceGroupName, farmId, instanceId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IHealthMonitoringServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricsResult GetMetrics(this IHealthMonitoringServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IHealthMonitoringServerInstanceOperations)s).GetMetricsAsync(resourceGroupName, farmId, instanceId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IHealthMonitoringServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricsResult> GetMetricsAsync(this IHealthMonitoringServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return operations.GetMetricsAsync(resourceGroupName, farmId, instanceId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IHealthMonitoringServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MonitoringServerRoleInstanceListResponse List(this IHealthMonitoringServerInstanceOperations operations, string resourceGroupName, string farmId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IHealthMonitoringServerInstanceOperations)s).ListAsync(resourceGroupName, farmId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IHealthMonitoringServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MonitoringServerRoleInstanceListResponse> ListAsync(this IHealthMonitoringServerInstanceOperations operations, string resourceGroupName, string farmId)
        {
            return operations.ListAsync(resourceGroupName, farmId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IHealthMonitoringServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Restart(this IHealthMonitoringServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IHealthMonitoringServerInstanceOperations)s).RestartAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IHealthMonitoringServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> RestartAsync(this IHealthMonitoringServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.RestartAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IHealthMonitoringServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse SettingsPullNow(this IHealthMonitoringServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IHealthMonitoringServerInstanceOperations)s).SettingsPullNowAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IHealthMonitoringServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> SettingsPullNowAsync(this IHealthMonitoringServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.SettingsPullNowAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    public partial interface IHealthMonitoringServerInstanceOperations
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        Task<LongRunningOperationResponse> BeginRestartingAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MonitoringServerRoleInstanceGetResponse> GetAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MonitoringServerRoleInstanceListResponse> ListAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> RestartAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> SettingsPullNowAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class HealthMonitoringServerInstanceOperations : IServiceOperations<StorageAdminManagementClient>, IHealthMonitoringServerInstanceOperations
    {
        /// <summary>
        /// Initializes a new instance of the
        /// HealthMonitoringServerInstanceOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal HealthMonitoringServerInstanceOperations(StorageAdminManagementClient client)
        {
            this._client = client;
        }
        
        private StorageAdminManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.StorageAdminManagementClient.
        /// </summary>
        public StorageAdminManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginRestartingAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "BeginRestartingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/healthmonitoringserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/restart";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict || statusCode == HttpStatusCode.NotFound || statusCode == HttpStatusCode.MethodNotAllowed || statusCode == HttpStatusCode.Forbidden)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MonitoringServerRoleInstanceGetResponse> GetAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/healthmonitoringserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MonitoringServerRoleInstanceGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MonitoringServerRoleInstanceGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            MonitoringServerRoleInstanceModel roleInstanceInstance = new MonitoringServerRoleInstanceModel();
                            result.RoleInstance = roleInstanceInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                MonitoringServerRoleInstance propertiesInstance = new MonitoringServerRoleInstance();
                                roleInstanceInstance.Properties = propertiesInstance;
                                
                                JToken settingsValue = propertiesValue["settings"];
                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                {
                                    MonitoringServerRoleInstanceEffectiveSettings settingsInstance = new MonitoringServerRoleInstanceEffectiveSettings();
                                    propertiesInstance.Settings = settingsInstance;
                                    
                                    JToken healthAccountNameValue = settingsValue["healthAccountName"];
                                    if (healthAccountNameValue != null && healthAccountNameValue.Type != JTokenType.Null)
                                    {
                                        string healthAccountNameInstance = ((string)healthAccountNameValue);
                                        settingsInstance.HealthAccountName = healthAccountNameInstance;
                                    }
                                    
                                    JToken healthAccountKeyValue = settingsValue["healthAccountKey"];
                                    if (healthAccountKeyValue != null && healthAccountKeyValue.Type != JTokenType.Null)
                                    {
                                        string healthAccountKeyInstance = ((string)healthAccountKeyValue);
                                        settingsInstance.HealthAccountKey = healthAccountKeyInstance;
                                    }
                                    
                                    JToken healthHistoryDaysValue = settingsValue["healthHistoryDays"];
                                    if (healthHistoryDaysValue != null && healthHistoryDaysValue.Type != JTokenType.Null)
                                    {
                                        int healthHistoryDaysInstance = ((int)healthHistoryDaysValue);
                                        settingsInstance.HealthHistoryDays = healthHistoryDaysInstance;
                                    }
                                    
                                    JToken settingsPollingIntervalInSecondsValue = settingsValue["settingsPollingIntervalInSeconds"];
                                    if (settingsPollingIntervalInSecondsValue != null && settingsPollingIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int settingsPollingIntervalInSecondsInstance = ((int)settingsPollingIntervalInSecondsValue);
                                        settingsInstance.SettingsPollingIntervalInSeconds = settingsPollingIntervalInSecondsInstance;
                                    }
                                    
                                    JToken settingsTimestampValue = settingsValue["settingsTimestamp"];
                                    if (settingsTimestampValue != null && settingsTimestampValue.Type != JTokenType.Null)
                                    {
                                        string settingsTimestampInstance = ((string)settingsTimestampValue);
                                        settingsInstance.SettingsTimestamp = settingsTimestampInstance;
                                    }
                                }
                                
                                JToken roleIdentifierValue = propertiesValue["roleIdentifier"];
                                if (roleIdentifierValue != null && roleIdentifierValue.Type != JTokenType.Null)
                                {
                                    string roleIdentifierInstance = ((string)roleIdentifierValue);
                                    propertiesInstance.RoleIdentifier = roleIdentifierInstance;
                                }
                                
                                JToken versionValue = propertiesValue["version"];
                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                {
                                    string versionInstance = ((string)versionValue);
                                    propertiesInstance.Version = versionInstance;
                                }
                                
                                JToken statusValue = propertiesValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    RoleInstanceStatus statusInstance = ((RoleInstanceStatus)Enum.Parse(typeof(RoleInstanceStatus), ((string)statusValue), true));
                                    propertiesInstance.Status = statusInstance;
                                }
                                
                                JToken healthStatusValue = propertiesValue["healthStatus"];
                                if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                {
                                    HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                    propertiesInstance.HealthStatus = healthStatusInstance;
                                }
                                
                                JToken nodeUriValue = propertiesValue["nodeUri"];
                                if (nodeUriValue != null && nodeUriValue.Type != JTokenType.Null)
                                {
                                    string nodeUriInstance = ((string)nodeUriValue);
                                    propertiesInstance.NodeUri = nodeUriInstance;
                                }
                                
                                JToken historyInfosArray = propertiesValue["historyInfos"];
                                if (historyInfosArray != null && historyInfosArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken historyInfosValue in ((JArray)historyInfosArray))
                                    {
                                        RoleInstanceHistoricEntry roleInstanceHistoricEntryInstance = new RoleInstanceHistoricEntry();
                                        propertiesInstance.HistoryInfos.Add(roleInstanceHistoricEntryInstance);
                                        
                                        JToken startTimeValue = historyInfosValue["startTime"];
                                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime startTimeInstance = ((DateTime)startTimeValue);
                                            roleInstanceHistoricEntryInstance.StartTime = startTimeInstance;
                                        }
                                        
                                        JToken endTimeValue = historyInfosValue["endTime"];
                                        if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime endTimeInstance = ((DateTime)endTimeValue);
                                            roleInstanceHistoricEntryInstance.EndTime = endTimeInstance;
                                        }
                                        
                                        JToken durationValue = historyInfosValue["duration"];
                                        if (durationValue != null && durationValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan durationInstance = XmlConvert.ToTimeSpan(((string)durationValue));
                                            roleInstanceHistoricEntryInstance.Duration = durationInstance;
                                        }
                                        
                                        JToken roleIdentifierValue2 = historyInfosValue["roleIdentifier"];
                                        if (roleIdentifierValue2 != null && roleIdentifierValue2.Type != JTokenType.Null)
                                        {
                                            string roleIdentifierInstance2 = ((string)roleIdentifierValue2);
                                            roleInstanceHistoricEntryInstance.RoleIdentifier = roleIdentifierInstance2;
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                roleInstanceInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                roleInstanceInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                roleInstanceInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                roleInstanceInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    roleInstanceInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricDefinitionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/healthmonitoringserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/metricdefinitions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricDefinitionsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricDefinitionsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    MetricDefinition metricDefinitionInstance = new MetricDefinition();
                                    result.Value.Add(metricDefinitionInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricDefinitionInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken unitValue = valueValue["unit"];
                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit unitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)unitValue), true));
                                        metricDefinitionInstance.Unit = unitInstance;
                                    }
                                    
                                    JToken primaryAggregationTypeValue = valueValue["primaryAggregationType"];
                                    if (primaryAggregationTypeValue != null && primaryAggregationTypeValue.Type != JTokenType.Null)
                                    {
                                        MetricPrimaryAggregationType primaryAggregationTypeInstance = ((MetricPrimaryAggregationType)Enum.Parse(typeof(MetricPrimaryAggregationType), ((string)primaryAggregationTypeValue), true));
                                        metricDefinitionInstance.PrimaryAggregationType = primaryAggregationTypeInstance;
                                    }
                                    
                                    JToken metricAvailabilitiesArray = valueValue["metricAvailabilities"];
                                    if (metricAvailabilitiesArray != null && metricAvailabilitiesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricAvailabilitiesValue in ((JArray)metricAvailabilitiesArray))
                                        {
                                            MetricAvailability metricAvailabilityInstance = new MetricAvailability();
                                            metricDefinitionInstance.MetricAvailabilities.Add(metricAvailabilityInstance);
                                            
                                            JToken timeGrainValue = metricAvailabilitiesValue["timeGrain"];
                                            if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                                metricAvailabilityInstance.TimeGrain = timeGrainInstance;
                                            }
                                            
                                            JToken retentionValue = metricAvailabilitiesValue["retention"];
                                            if (retentionValue != null && retentionValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan retentionInstance = XmlConvert.ToTimeSpan(((string)retentionValue));
                                                metricAvailabilityInstance.Retention = retentionInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/healthmonitoringserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/metrics";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Metric metricInstance = new Metric();
                                    result.Metrics.Add(metricInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken metricUnitValue = valueValue["metricUnit"];
                                    if (metricUnitValue != null && metricUnitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit metricUnitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)metricUnitValue), true));
                                        metricInstance.MetricUnit = metricUnitInstance;
                                    }
                                    
                                    JToken timeGrainValue = valueValue["timeGrain"];
                                    if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                        metricInstance.TimeGrain = timeGrainInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        metricInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = valueValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        metricInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken metricValuesArray = valueValue["metricValues"];
                                    if (metricValuesArray != null && metricValuesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricValuesValue in ((JArray)metricValuesArray))
                                        {
                                            MetricValue metricValueInstance = new MetricValue();
                                            metricInstance.MetricValues.Add(metricValueInstance);
                                            
                                            JToken timeStampValue = metricValuesValue["timeStamp"];
                                            if (timeStampValue != null && timeStampValue.Type != JTokenType.Null)
                                            {
                                                DateTime timeStampInstance = ((DateTime)timeStampValue);
                                                metricValueInstance.TimeStamp = timeStampInstance;
                                            }
                                            
                                            JToken averageValue = metricValuesValue["average"];
                                            if (averageValue != null && averageValue.Type != JTokenType.Null)
                                            {
                                                double averageInstance = ((double)averageValue);
                                                metricValueInstance.Average = averageInstance;
                                            }
                                            
                                            JToken minimumValue = metricValuesValue["minimum"];
                                            if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                            {
                                                double minimumInstance = ((double)minimumValue);
                                                metricValueInstance.Minimum = minimumInstance;
                                            }
                                            
                                            JToken maximumValue = metricValuesValue["maximum"];
                                            if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                            {
                                                double maximumInstance = ((double)maximumValue);
                                                metricValueInstance.Maximum = maximumInstance;
                                            }
                                            
                                            JToken totalValue = metricValuesValue["total"];
                                            if (totalValue != null && totalValue.Type != JTokenType.Null)
                                            {
                                                double totalInstance = ((double)totalValue);
                                                metricValueInstance.Total = totalInstance;
                                            }
                                            
                                            JToken countValue = metricValuesValue["count"];
                                            if (countValue != null && countValue.Type != JTokenType.Null)
                                            {
                                                int countInstance = ((int)countValue);
                                                metricValueInstance.Count = countInstance;
                                            }
                                            
                                            JToken propertiesValue = metricValuesValue["properties"];
                                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                            {
                                                string propertiesInstance = propertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                metricValueInstance.Properties = propertiesInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MonitoringServerRoleInstanceListResponse> ListAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/healthmonitoringserverinstances";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MonitoringServerRoleInstanceListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MonitoringServerRoleInstanceListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken roleInstancesArray = responseDoc;
                            if (roleInstancesArray != null && roleInstancesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken roleInstancesValue in ((JArray)roleInstancesArray))
                                {
                                    MonitoringServerRoleInstanceModel monitoringServerRoleInstanceModelInstance = new MonitoringServerRoleInstanceModel();
                                    result.RoleInstances.Add(monitoringServerRoleInstanceModelInstance);
                                    
                                    JToken propertiesValue = roleInstancesValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        MonitoringServerRoleInstance propertiesInstance = new MonitoringServerRoleInstance();
                                        monitoringServerRoleInstanceModelInstance.Properties = propertiesInstance;
                                        
                                        JToken settingsValue = propertiesValue["settings"];
                                        if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                        {
                                            MonitoringServerRoleInstanceEffectiveSettings settingsInstance = new MonitoringServerRoleInstanceEffectiveSettings();
                                            propertiesInstance.Settings = settingsInstance;
                                            
                                            JToken healthAccountNameValue = settingsValue["healthAccountName"];
                                            if (healthAccountNameValue != null && healthAccountNameValue.Type != JTokenType.Null)
                                            {
                                                string healthAccountNameInstance = ((string)healthAccountNameValue);
                                                settingsInstance.HealthAccountName = healthAccountNameInstance;
                                            }
                                            
                                            JToken healthAccountKeyValue = settingsValue["healthAccountKey"];
                                            if (healthAccountKeyValue != null && healthAccountKeyValue.Type != JTokenType.Null)
                                            {
                                                string healthAccountKeyInstance = ((string)healthAccountKeyValue);
                                                settingsInstance.HealthAccountKey = healthAccountKeyInstance;
                                            }
                                            
                                            JToken healthHistoryDaysValue = settingsValue["healthHistoryDays"];
                                            if (healthHistoryDaysValue != null && healthHistoryDaysValue.Type != JTokenType.Null)
                                            {
                                                int healthHistoryDaysInstance = ((int)healthHistoryDaysValue);
                                                settingsInstance.HealthHistoryDays = healthHistoryDaysInstance;
                                            }
                                            
                                            JToken settingsPollingIntervalInSecondsValue = settingsValue["settingsPollingIntervalInSeconds"];
                                            if (settingsPollingIntervalInSecondsValue != null && settingsPollingIntervalInSecondsValue.Type != JTokenType.Null)
                                            {
                                                int settingsPollingIntervalInSecondsInstance = ((int)settingsPollingIntervalInSecondsValue);
                                                settingsInstance.SettingsPollingIntervalInSeconds = settingsPollingIntervalInSecondsInstance;
                                            }
                                            
                                            JToken settingsTimestampValue = settingsValue["settingsTimestamp"];
                                            if (settingsTimestampValue != null && settingsTimestampValue.Type != JTokenType.Null)
                                            {
                                                string settingsTimestampInstance = ((string)settingsTimestampValue);
                                                settingsInstance.SettingsTimestamp = settingsTimestampInstance;
                                            }
                                        }
                                        
                                        JToken roleIdentifierValue = propertiesValue["roleIdentifier"];
                                        if (roleIdentifierValue != null && roleIdentifierValue.Type != JTokenType.Null)
                                        {
                                            string roleIdentifierInstance = ((string)roleIdentifierValue);
                                            propertiesInstance.RoleIdentifier = roleIdentifierInstance;
                                        }
                                        
                                        JToken versionValue = propertiesValue["version"];
                                        if (versionValue != null && versionValue.Type != JTokenType.Null)
                                        {
                                            string versionInstance = ((string)versionValue);
                                            propertiesInstance.Version = versionInstance;
                                        }
                                        
                                        JToken statusValue = propertiesValue["status"];
                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                        {
                                            RoleInstanceStatus statusInstance = ((RoleInstanceStatus)Enum.Parse(typeof(RoleInstanceStatus), ((string)statusValue), true));
                                            propertiesInstance.Status = statusInstance;
                                        }
                                        
                                        JToken healthStatusValue = propertiesValue["healthStatus"];
                                        if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                        {
                                            HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                            propertiesInstance.HealthStatus = healthStatusInstance;
                                        }
                                        
                                        JToken nodeUriValue = propertiesValue["nodeUri"];
                                        if (nodeUriValue != null && nodeUriValue.Type != JTokenType.Null)
                                        {
                                            string nodeUriInstance = ((string)nodeUriValue);
                                            propertiesInstance.NodeUri = nodeUriInstance;
                                        }
                                        
                                        JToken historyInfosArray = propertiesValue["historyInfos"];
                                        if (historyInfosArray != null && historyInfosArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken historyInfosValue in ((JArray)historyInfosArray))
                                            {
                                                RoleInstanceHistoricEntry roleInstanceHistoricEntryInstance = new RoleInstanceHistoricEntry();
                                                propertiesInstance.HistoryInfos.Add(roleInstanceHistoricEntryInstance);
                                                
                                                JToken startTimeValue = historyInfosValue["startTime"];
                                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                {
                                                    DateTime startTimeInstance = ((DateTime)startTimeValue);
                                                    roleInstanceHistoricEntryInstance.StartTime = startTimeInstance;
                                                }
                                                
                                                JToken endTimeValue = historyInfosValue["endTime"];
                                                if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                {
                                                    DateTime endTimeInstance = ((DateTime)endTimeValue);
                                                    roleInstanceHistoricEntryInstance.EndTime = endTimeInstance;
                                                }
                                                
                                                JToken durationValue = historyInfosValue["duration"];
                                                if (durationValue != null && durationValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan durationInstance = XmlConvert.ToTimeSpan(((string)durationValue));
                                                    roleInstanceHistoricEntryInstance.Duration = durationInstance;
                                                }
                                                
                                                JToken roleIdentifierValue2 = historyInfosValue["roleIdentifier"];
                                                if (roleIdentifierValue2 != null && roleIdentifierValue2.Type != JTokenType.Null)
                                                {
                                                    string roleIdentifierInstance2 = ((string)roleIdentifierValue2);
                                                    roleInstanceHistoricEntryInstance.RoleIdentifier = roleIdentifierInstance2;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = roleInstancesValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        monitoringServerRoleInstanceModelInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = roleInstancesValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        monitoringServerRoleInstanceModelInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = roleInstancesValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        monitoringServerRoleInstanceModelInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = roleInstancesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        monitoringServerRoleInstanceModelInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)roleInstancesValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            monitoringServerRoleInstanceModelInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> RestartAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            StorageAdminManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "RestartAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.HealthMonitoringServerInstances.BeginRestartingAsync(resourceGroupName, farmId, instanceId, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> SettingsPullNowAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "SettingsPullNowAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/healthmonitoringserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/settingspullnow";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class ManagementServiceOperationsExtensions
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IManagementServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public static ManagementServiceGetResponse Get(this IManagementServiceOperations operations, string resourceGroupName, string farmId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IManagementServiceOperations)s).GetAsync(resourceGroupName, farmId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IManagementServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public static Task<ManagementServiceGetResponse> GetAsync(this IManagementServiceOperations operations, string resourceGroupName, string farmId)
        {
            return operations.GetAsync(resourceGroupName, farmId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IManagementServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricDefinitionsResult GetMetricDefinitions(this IManagementServiceOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IManagementServiceOperations)s).GetMetricDefinitionsAsync(resourceGroupName, farmId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IManagementServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(this IManagementServiceOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return operations.GetMetricDefinitionsAsync(resourceGroupName, farmId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IManagementServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricsResult GetMetrics(this IManagementServiceOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IManagementServiceOperations)s).GetMetricsAsync(resourceGroupName, farmId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IManagementServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricsResult> GetMetricsAsync(this IManagementServiceOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return operations.GetMetricsAsync(resourceGroupName, farmId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IManagementServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public static ManagementServiceGetResponse Patch(this IManagementServiceOperations operations, string resourceGroupName, string farmId, ManagementServicePatchParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IManagementServiceOperations)s).PatchAsync(resourceGroupName, farmId, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IManagementServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public static Task<ManagementServiceGetResponse> PatchAsync(this IManagementServiceOperations operations, string resourceGroupName, string farmId, ManagementServicePatchParameters parameters)
        {
            return operations.PatchAsync(resourceGroupName, farmId, parameters, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    public partial interface IManagementServiceOperations
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        Task<ManagementServiceGetResponse> GetAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        Task<ManagementServiceGetResponse> PatchAsync(string resourceGroupName, string farmId, ManagementServicePatchParameters parameters, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class ManagementServiceOperations : IServiceOperations<StorageAdminManagementClient>, IManagementServiceOperations
    {
        /// <summary>
        /// Initializes a new instance of the ManagementServiceOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ManagementServiceOperations(StorageAdminManagementClient client)
        {
            this._client = client;
        }
        
        private StorageAdminManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.StorageAdminManagementClient.
        /// </summary>
        public StorageAdminManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public async Task<ManagementServiceGetResponse> GetAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/managementservices/default";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ManagementServiceGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ManagementServiceGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ManagementServiceResponseResource resourceInstance = new ManagementServiceResponseResource();
                            result.Resource = resourceInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ManagementServiceResponse propertiesInstance = new ManagementServiceResponse();
                                resourceInstance.ManagementService = propertiesInstance;
                                
                                JToken settingsValue = propertiesValue["settings"];
                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                {
                                    ManagementServiceSettings settingsInstance = new ManagementServiceSettings();
                                    propertiesInstance.Settings = settingsInstance;
                                    
                                    JToken wacContainerGcFullScanIntervalInSecondsValue = settingsValue["wacContainerGcFullScanIntervalInSeconds"];
                                    if (wacContainerGcFullScanIntervalInSecondsValue != null && wacContainerGcFullScanIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int wacContainerGcFullScanIntervalInSecondsInstance = ((int)wacContainerGcFullScanIntervalInSecondsValue);
                                        settingsInstance.WacContainerGcFullScanIntervalInSeconds = wacContainerGcFullScanIntervalInSecondsInstance;
                                    }
                                    
                                    JToken wacAccountGcFullScanIntervalInSecondsValue = settingsValue["wacAccountGcFullScanIntervalInSeconds"];
                                    if (wacAccountGcFullScanIntervalInSecondsValue != null && wacAccountGcFullScanIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int wacAccountGcFullScanIntervalInSecondsInstance = ((int)wacAccountGcFullScanIntervalInSecondsValue);
                                        settingsInstance.WacAccountGcFullScanIntervalInSeconds = wacAccountGcFullScanIntervalInSecondsInstance;
                                    }
                                    
                                    JToken wacGcWaitPeriodInMillisecondsValue = settingsValue["wacGcWaitPeriodInMilliseconds"];
                                    if (wacGcWaitPeriodInMillisecondsValue != null && wacGcWaitPeriodInMillisecondsValue.Type != JTokenType.Null)
                                    {
                                        int wacGcWaitPeriodInMillisecondsInstance = ((int)wacGcWaitPeriodInMillisecondsValue);
                                        settingsInstance.WacGcWaitPeriodInMilliseconds = wacGcWaitPeriodInMillisecondsInstance;
                                    }
                                    
                                    JToken wacHoldingPeriodInHoursValue = settingsValue["wacHoldingPeriodInHours"];
                                    if (wacHoldingPeriodInHoursValue != null && wacHoldingPeriodInHoursValue.Type != JTokenType.Null)
                                    {
                                        int wacHoldingPeriodInHoursInstance = ((int)wacHoldingPeriodInHoursValue);
                                        settingsInstance.WacHoldingPeriodInHours = wacHoldingPeriodInHoursInstance;
                                    }
                                    
                                    JToken wacMaxGcThreadNumberValue = settingsValue["wacMaxGcThreadNumber"];
                                    if (wacMaxGcThreadNumberValue != null && wacMaxGcThreadNumberValue.Type != JTokenType.Null)
                                    {
                                        int wacMaxGcThreadNumberInstance = ((int)wacMaxGcThreadNumberValue);
                                        settingsInstance.WacMaxGcThreadNumber = wacMaxGcThreadNumberInstance;
                                    }
                                    
                                    JToken wacMaxCacheSizeValue = settingsValue["wacMaxCacheSize"];
                                    if (wacMaxCacheSizeValue != null && wacMaxCacheSizeValue.Type != JTokenType.Null)
                                    {
                                        int wacMaxCacheSizeInstance = ((int)wacMaxCacheSizeValue);
                                        settingsInstance.WacMaxCacheSize = wacMaxCacheSizeInstance;
                                    }
                                    
                                    JToken wacMaxConnectionsValue = settingsValue["wacMaxConnections"];
                                    if (wacMaxConnectionsValue != null && wacMaxConnectionsValue.Type != JTokenType.Null)
                                    {
                                        int wacMaxConnectionsInstance = ((int)wacMaxConnectionsValue);
                                        settingsInstance.WacMaxConnections = wacMaxConnectionsInstance;
                                    }
                                    
                                    JToken healthAccountNameValue = settingsValue["healthAccountName"];
                                    if (healthAccountNameValue != null && healthAccountNameValue.Type != JTokenType.Null)
                                    {
                                        string healthAccountNameInstance = ((string)healthAccountNameValue);
                                        settingsInstance.HealthAccountName = healthAccountNameInstance;
                                    }
                                    
                                    JToken healthAccountKeyValue = settingsValue["healthAccountKey"];
                                    if (healthAccountKeyValue != null && healthAccountKeyValue.Type != JTokenType.Null)
                                    {
                                        string healthAccountKeyInstance = ((string)healthAccountKeyValue);
                                        settingsInstance.HealthAccountKey = healthAccountKeyInstance;
                                    }
                                    
                                    JToken healthHistoryDaysValue = settingsValue["healthHistoryDays"];
                                    if (healthHistoryDaysValue != null && healthHistoryDaysValue.Type != JTokenType.Null)
                                    {
                                        int healthHistoryDaysInstance = ((int)healthHistoryDaysValue);
                                        settingsInstance.HealthHistoryDays = healthHistoryDaysInstance;
                                    }
                                    
                                    JToken metricsBucketCountValue = settingsValue["metricsBucketCount"];
                                    if (metricsBucketCountValue != null && metricsBucketCountValue.Type != JTokenType.Null)
                                    {
                                        int metricsBucketCountInstance = ((int)metricsBucketCountValue);
                                        settingsInstance.MetricsBucketCount = metricsBucketCountInstance;
                                    }
                                    
                                    JToken metricsAccountNameValue = settingsValue["metricsAccountName"];
                                    if (metricsAccountNameValue != null && metricsAccountNameValue.Type != JTokenType.Null)
                                    {
                                        string metricsAccountNameInstance = ((string)metricsAccountNameValue);
                                        settingsInstance.MetricsAccountName = metricsAccountNameInstance;
                                    }
                                    
                                    JToken metricsAccountKeyValue = settingsValue["metricsAccountKey"];
                                    if (metricsAccountKeyValue != null && metricsAccountKeyValue.Type != JTokenType.Null)
                                    {
                                        string metricsAccountKeyInstance = ((string)metricsAccountKeyValue);
                                        settingsInstance.MetricsAccountKey = metricsAccountKeyInstance;
                                    }
                                }
                                
                                JToken versionValue = propertiesValue["version"];
                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                {
                                    string versionInstance = ((string)versionValue);
                                    propertiesInstance.Version = versionInstance;
                                }
                                
                                JToken healthStatusValue = propertiesValue["healthStatus"];
                                if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                {
                                    HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                    propertiesInstance.HealthStatus = healthStatusInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                resourceInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                resourceInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                resourceInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                resourceInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    resourceInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricDefinitionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/managementservices/default/metricdefinitions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricDefinitionsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricDefinitionsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    MetricDefinition metricDefinitionInstance = new MetricDefinition();
                                    result.Value.Add(metricDefinitionInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricDefinitionInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken unitValue = valueValue["unit"];
                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit unitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)unitValue), true));
                                        metricDefinitionInstance.Unit = unitInstance;
                                    }
                                    
                                    JToken primaryAggregationTypeValue = valueValue["primaryAggregationType"];
                                    if (primaryAggregationTypeValue != null && primaryAggregationTypeValue.Type != JTokenType.Null)
                                    {
                                        MetricPrimaryAggregationType primaryAggregationTypeInstance = ((MetricPrimaryAggregationType)Enum.Parse(typeof(MetricPrimaryAggregationType), ((string)primaryAggregationTypeValue), true));
                                        metricDefinitionInstance.PrimaryAggregationType = primaryAggregationTypeInstance;
                                    }
                                    
                                    JToken metricAvailabilitiesArray = valueValue["metricAvailabilities"];
                                    if (metricAvailabilitiesArray != null && metricAvailabilitiesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricAvailabilitiesValue in ((JArray)metricAvailabilitiesArray))
                                        {
                                            MetricAvailability metricAvailabilityInstance = new MetricAvailability();
                                            metricDefinitionInstance.MetricAvailabilities.Add(metricAvailabilityInstance);
                                            
                                            JToken timeGrainValue = metricAvailabilitiesValue["timeGrain"];
                                            if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                                metricAvailabilityInstance.TimeGrain = timeGrainInstance;
                                            }
                                            
                                            JToken retentionValue = metricAvailabilitiesValue["retention"];
                                            if (retentionValue != null && retentionValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan retentionInstance = XmlConvert.ToTimeSpan(((string)retentionValue));
                                                metricAvailabilityInstance.Retention = retentionInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/managementservices/default/metrics";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Metric metricInstance = new Metric();
                                    result.Metrics.Add(metricInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken metricUnitValue = valueValue["metricUnit"];
                                    if (metricUnitValue != null && metricUnitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit metricUnitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)metricUnitValue), true));
                                        metricInstance.MetricUnit = metricUnitInstance;
                                    }
                                    
                                    JToken timeGrainValue = valueValue["timeGrain"];
                                    if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                        metricInstance.TimeGrain = timeGrainInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        metricInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = valueValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        metricInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken metricValuesArray = valueValue["metricValues"];
                                    if (metricValuesArray != null && metricValuesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricValuesValue in ((JArray)metricValuesArray))
                                        {
                                            MetricValue metricValueInstance = new MetricValue();
                                            metricInstance.MetricValues.Add(metricValueInstance);
                                            
                                            JToken timeStampValue = metricValuesValue["timeStamp"];
                                            if (timeStampValue != null && timeStampValue.Type != JTokenType.Null)
                                            {
                                                DateTime timeStampInstance = ((DateTime)timeStampValue);
                                                metricValueInstance.TimeStamp = timeStampInstance;
                                            }
                                            
                                            JToken averageValue = metricValuesValue["average"];
                                            if (averageValue != null && averageValue.Type != JTokenType.Null)
                                            {
                                                double averageInstance = ((double)averageValue);
                                                metricValueInstance.Average = averageInstance;
                                            }
                                            
                                            JToken minimumValue = metricValuesValue["minimum"];
                                            if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                            {
                                                double minimumInstance = ((double)minimumValue);
                                                metricValueInstance.Minimum = minimumInstance;
                                            }
                                            
                                            JToken maximumValue = metricValuesValue["maximum"];
                                            if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                            {
                                                double maximumInstance = ((double)maximumValue);
                                                metricValueInstance.Maximum = maximumInstance;
                                            }
                                            
                                            JToken totalValue = metricValuesValue["total"];
                                            if (totalValue != null && totalValue.Type != JTokenType.Null)
                                            {
                                                double totalInstance = ((double)totalValue);
                                                metricValueInstance.Total = totalInstance;
                                            }
                                            
                                            JToken countValue = metricValuesValue["count"];
                                            if (countValue != null && countValue.Type != JTokenType.Null)
                                            {
                                                int countInstance = ((int)countValue);
                                                metricValueInstance.Count = countInstance;
                                            }
                                            
                                            JToken propertiesValue = metricValuesValue["properties"];
                                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                            {
                                                string propertiesInstance = propertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                metricValueInstance.Properties = propertiesInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public async Task<ManagementServiceGetResponse> PatchAsync(string resourceGroupName, string farmId, ManagementServicePatchParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "PatchAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/managementservices/default";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject managementServicePatchParametersValue = new JObject();
                requestDoc = managementServicePatchParametersValue;
                
                if (parameters.ManagementService != null)
                {
                    JObject propertiesValue = new JObject();
                    managementServicePatchParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.ManagementService.Settings != null)
                    {
                        JObject settingsValue = new JObject();
                        propertiesValue["settings"] = settingsValue;
                        
                        if (parameters.ManagementService.Settings.WacContainerGcFullScanIntervalInSeconds != null)
                        {
                            settingsValue["wacContainerGcFullScanIntervalInSeconds"] = parameters.ManagementService.Settings.WacContainerGcFullScanIntervalInSeconds.Value;
                        }
                        
                        if (parameters.ManagementService.Settings.WacAccountGcFullScanIntervalInSeconds != null)
                        {
                            settingsValue["wacAccountGcFullScanIntervalInSeconds"] = parameters.ManagementService.Settings.WacAccountGcFullScanIntervalInSeconds.Value;
                        }
                        
                        if (parameters.ManagementService.Settings.WacGcWaitPeriodInMilliseconds != null)
                        {
                            settingsValue["wacGcWaitPeriodInMilliseconds"] = parameters.ManagementService.Settings.WacGcWaitPeriodInMilliseconds.Value;
                        }
                        
                        if (parameters.ManagementService.Settings.WacHoldingPeriodInHours != null)
                        {
                            settingsValue["wacHoldingPeriodInHours"] = parameters.ManagementService.Settings.WacHoldingPeriodInHours.Value;
                        }
                        
                        if (parameters.ManagementService.Settings.WacMaxGcThreadNumber != null)
                        {
                            settingsValue["wacMaxGcThreadNumber"] = parameters.ManagementService.Settings.WacMaxGcThreadNumber.Value;
                        }
                        
                        if (parameters.ManagementService.Settings.WacMaxCacheSize != null)
                        {
                            settingsValue["wacMaxCacheSize"] = parameters.ManagementService.Settings.WacMaxCacheSize.Value;
                        }
                        
                        if (parameters.ManagementService.Settings.WacMaxConnections != null)
                        {
                            settingsValue["wacMaxConnections"] = parameters.ManagementService.Settings.WacMaxConnections.Value;
                        }
                        
                        if (parameters.ManagementService.Settings.HealthAccountName != null)
                        {
                            settingsValue["healthAccountName"] = parameters.ManagementService.Settings.HealthAccountName;
                        }
                        
                        if (parameters.ManagementService.Settings.HealthAccountKey != null)
                        {
                            settingsValue["healthAccountKey"] = parameters.ManagementService.Settings.HealthAccountKey;
                        }
                        
                        if (parameters.ManagementService.Settings.HealthHistoryDays != null)
                        {
                            settingsValue["healthHistoryDays"] = parameters.ManagementService.Settings.HealthHistoryDays.Value;
                        }
                        
                        if (parameters.ManagementService.Settings.MetricsBucketCount != null)
                        {
                            settingsValue["metricsBucketCount"] = parameters.ManagementService.Settings.MetricsBucketCount.Value;
                        }
                        
                        if (parameters.ManagementService.Settings.MetricsAccountName != null)
                        {
                            settingsValue["metricsAccountName"] = parameters.ManagementService.Settings.MetricsAccountName;
                        }
                        
                        if (parameters.ManagementService.Settings.MetricsAccountKey != null)
                        {
                            settingsValue["metricsAccountKey"] = parameters.ManagementService.Settings.MetricsAccountKey;
                        }
                    }
                }
                
                if (parameters.Id != null)
                {
                    managementServicePatchParametersValue["id"] = parameters.Id;
                }
                
                if (parameters.Name != null)
                {
                    managementServicePatchParametersValue["name"] = parameters.Name;
                }
                
                if (parameters.Type != null)
                {
                    managementServicePatchParametersValue["type"] = parameters.Type;
                }
                
                if (parameters.Location != null)
                {
                    managementServicePatchParametersValue["location"] = parameters.Location;
                }
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    managementServicePatchParametersValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ManagementServiceGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ManagementServiceGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ManagementServiceResponseResource resourceInstance = new ManagementServiceResponseResource();
                            result.Resource = resourceInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                ManagementServiceResponse propertiesInstance = new ManagementServiceResponse();
                                resourceInstance.ManagementService = propertiesInstance;
                                
                                JToken settingsValue2 = propertiesValue2["settings"];
                                if (settingsValue2 != null && settingsValue2.Type != JTokenType.Null)
                                {
                                    ManagementServiceSettings settingsInstance = new ManagementServiceSettings();
                                    propertiesInstance.Settings = settingsInstance;
                                    
                                    JToken wacContainerGcFullScanIntervalInSecondsValue = settingsValue2["wacContainerGcFullScanIntervalInSeconds"];
                                    if (wacContainerGcFullScanIntervalInSecondsValue != null && wacContainerGcFullScanIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int wacContainerGcFullScanIntervalInSecondsInstance = ((int)wacContainerGcFullScanIntervalInSecondsValue);
                                        settingsInstance.WacContainerGcFullScanIntervalInSeconds = wacContainerGcFullScanIntervalInSecondsInstance;
                                    }
                                    
                                    JToken wacAccountGcFullScanIntervalInSecondsValue = settingsValue2["wacAccountGcFullScanIntervalInSeconds"];
                                    if (wacAccountGcFullScanIntervalInSecondsValue != null && wacAccountGcFullScanIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int wacAccountGcFullScanIntervalInSecondsInstance = ((int)wacAccountGcFullScanIntervalInSecondsValue);
                                        settingsInstance.WacAccountGcFullScanIntervalInSeconds = wacAccountGcFullScanIntervalInSecondsInstance;
                                    }
                                    
                                    JToken wacGcWaitPeriodInMillisecondsValue = settingsValue2["wacGcWaitPeriodInMilliseconds"];
                                    if (wacGcWaitPeriodInMillisecondsValue != null && wacGcWaitPeriodInMillisecondsValue.Type != JTokenType.Null)
                                    {
                                        int wacGcWaitPeriodInMillisecondsInstance = ((int)wacGcWaitPeriodInMillisecondsValue);
                                        settingsInstance.WacGcWaitPeriodInMilliseconds = wacGcWaitPeriodInMillisecondsInstance;
                                    }
                                    
                                    JToken wacHoldingPeriodInHoursValue = settingsValue2["wacHoldingPeriodInHours"];
                                    if (wacHoldingPeriodInHoursValue != null && wacHoldingPeriodInHoursValue.Type != JTokenType.Null)
                                    {
                                        int wacHoldingPeriodInHoursInstance = ((int)wacHoldingPeriodInHoursValue);
                                        settingsInstance.WacHoldingPeriodInHours = wacHoldingPeriodInHoursInstance;
                                    }
                                    
                                    JToken wacMaxGcThreadNumberValue = settingsValue2["wacMaxGcThreadNumber"];
                                    if (wacMaxGcThreadNumberValue != null && wacMaxGcThreadNumberValue.Type != JTokenType.Null)
                                    {
                                        int wacMaxGcThreadNumberInstance = ((int)wacMaxGcThreadNumberValue);
                                        settingsInstance.WacMaxGcThreadNumber = wacMaxGcThreadNumberInstance;
                                    }
                                    
                                    JToken wacMaxCacheSizeValue = settingsValue2["wacMaxCacheSize"];
                                    if (wacMaxCacheSizeValue != null && wacMaxCacheSizeValue.Type != JTokenType.Null)
                                    {
                                        int wacMaxCacheSizeInstance = ((int)wacMaxCacheSizeValue);
                                        settingsInstance.WacMaxCacheSize = wacMaxCacheSizeInstance;
                                    }
                                    
                                    JToken wacMaxConnectionsValue = settingsValue2["wacMaxConnections"];
                                    if (wacMaxConnectionsValue != null && wacMaxConnectionsValue.Type != JTokenType.Null)
                                    {
                                        int wacMaxConnectionsInstance = ((int)wacMaxConnectionsValue);
                                        settingsInstance.WacMaxConnections = wacMaxConnectionsInstance;
                                    }
                                    
                                    JToken healthAccountNameValue = settingsValue2["healthAccountName"];
                                    if (healthAccountNameValue != null && healthAccountNameValue.Type != JTokenType.Null)
                                    {
                                        string healthAccountNameInstance = ((string)healthAccountNameValue);
                                        settingsInstance.HealthAccountName = healthAccountNameInstance;
                                    }
                                    
                                    JToken healthAccountKeyValue = settingsValue2["healthAccountKey"];
                                    if (healthAccountKeyValue != null && healthAccountKeyValue.Type != JTokenType.Null)
                                    {
                                        string healthAccountKeyInstance = ((string)healthAccountKeyValue);
                                        settingsInstance.HealthAccountKey = healthAccountKeyInstance;
                                    }
                                    
                                    JToken healthHistoryDaysValue = settingsValue2["healthHistoryDays"];
                                    if (healthHistoryDaysValue != null && healthHistoryDaysValue.Type != JTokenType.Null)
                                    {
                                        int healthHistoryDaysInstance = ((int)healthHistoryDaysValue);
                                        settingsInstance.HealthHistoryDays = healthHistoryDaysInstance;
                                    }
                                    
                                    JToken metricsBucketCountValue = settingsValue2["metricsBucketCount"];
                                    if (metricsBucketCountValue != null && metricsBucketCountValue.Type != JTokenType.Null)
                                    {
                                        int metricsBucketCountInstance = ((int)metricsBucketCountValue);
                                        settingsInstance.MetricsBucketCount = metricsBucketCountInstance;
                                    }
                                    
                                    JToken metricsAccountNameValue = settingsValue2["metricsAccountName"];
                                    if (metricsAccountNameValue != null && metricsAccountNameValue.Type != JTokenType.Null)
                                    {
                                        string metricsAccountNameInstance = ((string)metricsAccountNameValue);
                                        settingsInstance.MetricsAccountName = metricsAccountNameInstance;
                                    }
                                    
                                    JToken metricsAccountKeyValue = settingsValue2["metricsAccountKey"];
                                    if (metricsAccountKeyValue != null && metricsAccountKeyValue.Type != JTokenType.Null)
                                    {
                                        string metricsAccountKeyInstance = ((string)metricsAccountKeyValue);
                                        settingsInstance.MetricsAccountKey = metricsAccountKeyInstance;
                                    }
                                }
                                
                                JToken versionValue = propertiesValue2["version"];
                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                {
                                    string versionInstance = ((string)versionValue);
                                    propertiesInstance.Version = versionInstance;
                                }
                                
                                JToken healthStatusValue = propertiesValue2["healthStatus"];
                                if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                {
                                    HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                    propertiesInstance.HealthStatus = healthStatusInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                resourceInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                resourceInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                resourceInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                resourceInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    resourceInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class MetricsServerInstanceOperationsExtensions
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IMetricsServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse BeginRestarting(this IMetricsServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMetricsServerInstanceOperations)s).BeginRestartingAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IMetricsServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> BeginRestartingAsync(this IMetricsServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.BeginRestartingAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IMetricsServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricsServerRoleInstanceGetResponse Get(this IMetricsServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMetricsServerInstanceOperations)s).GetAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IMetricsServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricsServerRoleInstanceGetResponse> GetAsync(this IMetricsServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.GetAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IMetricsServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricDefinitionsResult GetMetricDefinitions(this IMetricsServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMetricsServerInstanceOperations)s).GetMetricDefinitionsAsync(resourceGroupName, farmId, instanceId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IMetricsServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(this IMetricsServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return operations.GetMetricDefinitionsAsync(resourceGroupName, farmId, instanceId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IMetricsServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricsResult GetMetrics(this IMetricsServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMetricsServerInstanceOperations)s).GetMetricsAsync(resourceGroupName, farmId, instanceId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IMetricsServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricsResult> GetMetricsAsync(this IMetricsServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return operations.GetMetricsAsync(resourceGroupName, farmId, instanceId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IMetricsServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricsServerRoleInstanceListResponse List(this IMetricsServerInstanceOperations operations, string resourceGroupName, string farmId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMetricsServerInstanceOperations)s).ListAsync(resourceGroupName, farmId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IMetricsServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricsServerRoleInstanceListResponse> ListAsync(this IMetricsServerInstanceOperations operations, string resourceGroupName, string farmId)
        {
            return operations.ListAsync(resourceGroupName, farmId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IMetricsServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Restart(this IMetricsServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMetricsServerInstanceOperations)s).RestartAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IMetricsServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> RestartAsync(this IMetricsServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.RestartAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IMetricsServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse SettingsPullNow(this IMetricsServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMetricsServerInstanceOperations)s).SettingsPullNowAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IMetricsServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> SettingsPullNowAsync(this IMetricsServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.SettingsPullNowAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    public partial interface IMetricsServerInstanceOperations
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        Task<LongRunningOperationResponse> BeginRestartingAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricsServerRoleInstanceGetResponse> GetAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricsServerRoleInstanceListResponse> ListAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> RestartAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> SettingsPullNowAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class MetricsServerInstanceOperations : IServiceOperations<StorageAdminManagementClient>, IMetricsServerInstanceOperations
    {
        /// <summary>
        /// Initializes a new instance of the MetricsServerInstanceOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal MetricsServerInstanceOperations(StorageAdminManagementClient client)
        {
            this._client = client;
        }
        
        private StorageAdminManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.StorageAdminManagementClient.
        /// </summary>
        public StorageAdminManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginRestartingAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "BeginRestartingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/metricsserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/restart";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict || statusCode == HttpStatusCode.NotFound || statusCode == HttpStatusCode.MethodNotAllowed || statusCode == HttpStatusCode.Forbidden)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricsServerRoleInstanceGetResponse> GetAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/metricsserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricsServerRoleInstanceGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricsServerRoleInstanceGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            MetricsServerRoleInstanceModel roleInstanceInstance = new MetricsServerRoleInstanceModel();
                            result.RoleInstance = roleInstanceInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                MetricsServerRoleInstance propertiesInstance = new MetricsServerRoleInstance();
                                roleInstanceInstance.Properties = propertiesInstance;
                                
                                JToken settingsValue = propertiesValue["settings"];
                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                {
                                    MetricsServerRoleInstanceEffectiveSettings settingsInstance = new MetricsServerRoleInstanceEffectiveSettings();
                                    propertiesInstance.Settings = settingsInstance;
                                    
                                    JToken metricsBucketCountValue = settingsValue["metricsBucketCount"];
                                    if (metricsBucketCountValue != null && metricsBucketCountValue.Type != JTokenType.Null)
                                    {
                                        int metricsBucketCountInstance = ((int)metricsBucketCountValue);
                                        settingsInstance.MetricsBucketCount = metricsBucketCountInstance;
                                    }
                                    
                                    JToken metricsAccountNameValue = settingsValue["metricsAccountName"];
                                    if (metricsAccountNameValue != null && metricsAccountNameValue.Type != JTokenType.Null)
                                    {
                                        string metricsAccountNameInstance = ((string)metricsAccountNameValue);
                                        settingsInstance.MetricsAccountName = metricsAccountNameInstance;
                                    }
                                    
                                    JToken metricsAccountKeyValue = settingsValue["metricsAccountKey"];
                                    if (metricsAccountKeyValue != null && metricsAccountKeyValue.Type != JTokenType.Null)
                                    {
                                        string metricsAccountKeyInstance = ((string)metricsAccountKeyValue);
                                        settingsInstance.MetricsAccountKey = metricsAccountKeyInstance;
                                    }
                                    
                                    JToken settingsPollingIntervalInSecondsValue = settingsValue["settingsPollingIntervalInSeconds"];
                                    if (settingsPollingIntervalInSecondsValue != null && settingsPollingIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int settingsPollingIntervalInSecondsInstance = ((int)settingsPollingIntervalInSecondsValue);
                                        settingsInstance.SettingsPollingIntervalInSeconds = settingsPollingIntervalInSecondsInstance;
                                    }
                                    
                                    JToken settingsTimestampValue = settingsValue["settingsTimestamp"];
                                    if (settingsTimestampValue != null && settingsTimestampValue.Type != JTokenType.Null)
                                    {
                                        string settingsTimestampInstance = ((string)settingsTimestampValue);
                                        settingsInstance.SettingsTimestamp = settingsTimestampInstance;
                                    }
                                }
                                
                                JToken roleIdentifierValue = propertiesValue["roleIdentifier"];
                                if (roleIdentifierValue != null && roleIdentifierValue.Type != JTokenType.Null)
                                {
                                    string roleIdentifierInstance = ((string)roleIdentifierValue);
                                    propertiesInstance.RoleIdentifier = roleIdentifierInstance;
                                }
                                
                                JToken versionValue = propertiesValue["version"];
                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                {
                                    string versionInstance = ((string)versionValue);
                                    propertiesInstance.Version = versionInstance;
                                }
                                
                                JToken statusValue = propertiesValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    RoleInstanceStatus statusInstance = ((RoleInstanceStatus)Enum.Parse(typeof(RoleInstanceStatus), ((string)statusValue), true));
                                    propertiesInstance.Status = statusInstance;
                                }
                                
                                JToken healthStatusValue = propertiesValue["healthStatus"];
                                if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                {
                                    HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                    propertiesInstance.HealthStatus = healthStatusInstance;
                                }
                                
                                JToken nodeUriValue = propertiesValue["nodeUri"];
                                if (nodeUriValue != null && nodeUriValue.Type != JTokenType.Null)
                                {
                                    string nodeUriInstance = ((string)nodeUriValue);
                                    propertiesInstance.NodeUri = nodeUriInstance;
                                }
                                
                                JToken historyInfosArray = propertiesValue["historyInfos"];
                                if (historyInfosArray != null && historyInfosArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken historyInfosValue in ((JArray)historyInfosArray))
                                    {
                                        RoleInstanceHistoricEntry roleInstanceHistoricEntryInstance = new RoleInstanceHistoricEntry();
                                        propertiesInstance.HistoryInfos.Add(roleInstanceHistoricEntryInstance);
                                        
                                        JToken startTimeValue = historyInfosValue["startTime"];
                                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime startTimeInstance = ((DateTime)startTimeValue);
                                            roleInstanceHistoricEntryInstance.StartTime = startTimeInstance;
                                        }
                                        
                                        JToken endTimeValue = historyInfosValue["endTime"];
                                        if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime endTimeInstance = ((DateTime)endTimeValue);
                                            roleInstanceHistoricEntryInstance.EndTime = endTimeInstance;
                                        }
                                        
                                        JToken durationValue = historyInfosValue["duration"];
                                        if (durationValue != null && durationValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan durationInstance = XmlConvert.ToTimeSpan(((string)durationValue));
                                            roleInstanceHistoricEntryInstance.Duration = durationInstance;
                                        }
                                        
                                        JToken roleIdentifierValue2 = historyInfosValue["roleIdentifier"];
                                        if (roleIdentifierValue2 != null && roleIdentifierValue2.Type != JTokenType.Null)
                                        {
                                            string roleIdentifierInstance2 = ((string)roleIdentifierValue2);
                                            roleInstanceHistoricEntryInstance.RoleIdentifier = roleIdentifierInstance2;
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                roleInstanceInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                roleInstanceInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                roleInstanceInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                roleInstanceInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    roleInstanceInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricDefinitionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/metricsserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/metricdefinitions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricDefinitionsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricDefinitionsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    MetricDefinition metricDefinitionInstance = new MetricDefinition();
                                    result.Value.Add(metricDefinitionInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricDefinitionInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken unitValue = valueValue["unit"];
                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit unitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)unitValue), true));
                                        metricDefinitionInstance.Unit = unitInstance;
                                    }
                                    
                                    JToken primaryAggregationTypeValue = valueValue["primaryAggregationType"];
                                    if (primaryAggregationTypeValue != null && primaryAggregationTypeValue.Type != JTokenType.Null)
                                    {
                                        MetricPrimaryAggregationType primaryAggregationTypeInstance = ((MetricPrimaryAggregationType)Enum.Parse(typeof(MetricPrimaryAggregationType), ((string)primaryAggregationTypeValue), true));
                                        metricDefinitionInstance.PrimaryAggregationType = primaryAggregationTypeInstance;
                                    }
                                    
                                    JToken metricAvailabilitiesArray = valueValue["metricAvailabilities"];
                                    if (metricAvailabilitiesArray != null && metricAvailabilitiesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricAvailabilitiesValue in ((JArray)metricAvailabilitiesArray))
                                        {
                                            MetricAvailability metricAvailabilityInstance = new MetricAvailability();
                                            metricDefinitionInstance.MetricAvailabilities.Add(metricAvailabilityInstance);
                                            
                                            JToken timeGrainValue = metricAvailabilitiesValue["timeGrain"];
                                            if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                                metricAvailabilityInstance.TimeGrain = timeGrainInstance;
                                            }
                                            
                                            JToken retentionValue = metricAvailabilitiesValue["retention"];
                                            if (retentionValue != null && retentionValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan retentionInstance = XmlConvert.ToTimeSpan(((string)retentionValue));
                                                metricAvailabilityInstance.Retention = retentionInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/metricsserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/metrics";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Metric metricInstance = new Metric();
                                    result.Metrics.Add(metricInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken metricUnitValue = valueValue["metricUnit"];
                                    if (metricUnitValue != null && metricUnitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit metricUnitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)metricUnitValue), true));
                                        metricInstance.MetricUnit = metricUnitInstance;
                                    }
                                    
                                    JToken timeGrainValue = valueValue["timeGrain"];
                                    if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                        metricInstance.TimeGrain = timeGrainInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        metricInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = valueValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        metricInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken metricValuesArray = valueValue["metricValues"];
                                    if (metricValuesArray != null && metricValuesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricValuesValue in ((JArray)metricValuesArray))
                                        {
                                            MetricValue metricValueInstance = new MetricValue();
                                            metricInstance.MetricValues.Add(metricValueInstance);
                                            
                                            JToken timeStampValue = metricValuesValue["timeStamp"];
                                            if (timeStampValue != null && timeStampValue.Type != JTokenType.Null)
                                            {
                                                DateTime timeStampInstance = ((DateTime)timeStampValue);
                                                metricValueInstance.TimeStamp = timeStampInstance;
                                            }
                                            
                                            JToken averageValue = metricValuesValue["average"];
                                            if (averageValue != null && averageValue.Type != JTokenType.Null)
                                            {
                                                double averageInstance = ((double)averageValue);
                                                metricValueInstance.Average = averageInstance;
                                            }
                                            
                                            JToken minimumValue = metricValuesValue["minimum"];
                                            if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                            {
                                                double minimumInstance = ((double)minimumValue);
                                                metricValueInstance.Minimum = minimumInstance;
                                            }
                                            
                                            JToken maximumValue = metricValuesValue["maximum"];
                                            if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                            {
                                                double maximumInstance = ((double)maximumValue);
                                                metricValueInstance.Maximum = maximumInstance;
                                            }
                                            
                                            JToken totalValue = metricValuesValue["total"];
                                            if (totalValue != null && totalValue.Type != JTokenType.Null)
                                            {
                                                double totalInstance = ((double)totalValue);
                                                metricValueInstance.Total = totalInstance;
                                            }
                                            
                                            JToken countValue = metricValuesValue["count"];
                                            if (countValue != null && countValue.Type != JTokenType.Null)
                                            {
                                                int countInstance = ((int)countValue);
                                                metricValueInstance.Count = countInstance;
                                            }
                                            
                                            JToken propertiesValue = metricValuesValue["properties"];
                                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                            {
                                                string propertiesInstance = propertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                metricValueInstance.Properties = propertiesInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricsServerRoleInstanceListResponse> ListAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/metricsserverinstances";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricsServerRoleInstanceListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricsServerRoleInstanceListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken roleInstancesArray = responseDoc;
                            if (roleInstancesArray != null && roleInstancesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken roleInstancesValue in ((JArray)roleInstancesArray))
                                {
                                    MetricsServerRoleInstanceModel metricsServerRoleInstanceModelInstance = new MetricsServerRoleInstanceModel();
                                    result.RoleInstances.Add(metricsServerRoleInstanceModelInstance);
                                    
                                    JToken propertiesValue = roleInstancesValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        MetricsServerRoleInstance propertiesInstance = new MetricsServerRoleInstance();
                                        metricsServerRoleInstanceModelInstance.Properties = propertiesInstance;
                                        
                                        JToken settingsValue = propertiesValue["settings"];
                                        if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                        {
                                            MetricsServerRoleInstanceEffectiveSettings settingsInstance = new MetricsServerRoleInstanceEffectiveSettings();
                                            propertiesInstance.Settings = settingsInstance;
                                            
                                            JToken metricsBucketCountValue = settingsValue["metricsBucketCount"];
                                            if (metricsBucketCountValue != null && metricsBucketCountValue.Type != JTokenType.Null)
                                            {
                                                int metricsBucketCountInstance = ((int)metricsBucketCountValue);
                                                settingsInstance.MetricsBucketCount = metricsBucketCountInstance;
                                            }
                                            
                                            JToken metricsAccountNameValue = settingsValue["metricsAccountName"];
                                            if (metricsAccountNameValue != null && metricsAccountNameValue.Type != JTokenType.Null)
                                            {
                                                string metricsAccountNameInstance = ((string)metricsAccountNameValue);
                                                settingsInstance.MetricsAccountName = metricsAccountNameInstance;
                                            }
                                            
                                            JToken metricsAccountKeyValue = settingsValue["metricsAccountKey"];
                                            if (metricsAccountKeyValue != null && metricsAccountKeyValue.Type != JTokenType.Null)
                                            {
                                                string metricsAccountKeyInstance = ((string)metricsAccountKeyValue);
                                                settingsInstance.MetricsAccountKey = metricsAccountKeyInstance;
                                            }
                                            
                                            JToken settingsPollingIntervalInSecondsValue = settingsValue["settingsPollingIntervalInSeconds"];
                                            if (settingsPollingIntervalInSecondsValue != null && settingsPollingIntervalInSecondsValue.Type != JTokenType.Null)
                                            {
                                                int settingsPollingIntervalInSecondsInstance = ((int)settingsPollingIntervalInSecondsValue);
                                                settingsInstance.SettingsPollingIntervalInSeconds = settingsPollingIntervalInSecondsInstance;
                                            }
                                            
                                            JToken settingsTimestampValue = settingsValue["settingsTimestamp"];
                                            if (settingsTimestampValue != null && settingsTimestampValue.Type != JTokenType.Null)
                                            {
                                                string settingsTimestampInstance = ((string)settingsTimestampValue);
                                                settingsInstance.SettingsTimestamp = settingsTimestampInstance;
                                            }
                                        }
                                        
                                        JToken roleIdentifierValue = propertiesValue["roleIdentifier"];
                                        if (roleIdentifierValue != null && roleIdentifierValue.Type != JTokenType.Null)
                                        {
                                            string roleIdentifierInstance = ((string)roleIdentifierValue);
                                            propertiesInstance.RoleIdentifier = roleIdentifierInstance;
                                        }
                                        
                                        JToken versionValue = propertiesValue["version"];
                                        if (versionValue != null && versionValue.Type != JTokenType.Null)
                                        {
                                            string versionInstance = ((string)versionValue);
                                            propertiesInstance.Version = versionInstance;
                                        }
                                        
                                        JToken statusValue = propertiesValue["status"];
                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                        {
                                            RoleInstanceStatus statusInstance = ((RoleInstanceStatus)Enum.Parse(typeof(RoleInstanceStatus), ((string)statusValue), true));
                                            propertiesInstance.Status = statusInstance;
                                        }
                                        
                                        JToken healthStatusValue = propertiesValue["healthStatus"];
                                        if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                        {
                                            HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                            propertiesInstance.HealthStatus = healthStatusInstance;
                                        }
                                        
                                        JToken nodeUriValue = propertiesValue["nodeUri"];
                                        if (nodeUriValue != null && nodeUriValue.Type != JTokenType.Null)
                                        {
                                            string nodeUriInstance = ((string)nodeUriValue);
                                            propertiesInstance.NodeUri = nodeUriInstance;
                                        }
                                        
                                        JToken historyInfosArray = propertiesValue["historyInfos"];
                                        if (historyInfosArray != null && historyInfosArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken historyInfosValue in ((JArray)historyInfosArray))
                                            {
                                                RoleInstanceHistoricEntry roleInstanceHistoricEntryInstance = new RoleInstanceHistoricEntry();
                                                propertiesInstance.HistoryInfos.Add(roleInstanceHistoricEntryInstance);
                                                
                                                JToken startTimeValue = historyInfosValue["startTime"];
                                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                {
                                                    DateTime startTimeInstance = ((DateTime)startTimeValue);
                                                    roleInstanceHistoricEntryInstance.StartTime = startTimeInstance;
                                                }
                                                
                                                JToken endTimeValue = historyInfosValue["endTime"];
                                                if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                {
                                                    DateTime endTimeInstance = ((DateTime)endTimeValue);
                                                    roleInstanceHistoricEntryInstance.EndTime = endTimeInstance;
                                                }
                                                
                                                JToken durationValue = historyInfosValue["duration"];
                                                if (durationValue != null && durationValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan durationInstance = XmlConvert.ToTimeSpan(((string)durationValue));
                                                    roleInstanceHistoricEntryInstance.Duration = durationInstance;
                                                }
                                                
                                                JToken roleIdentifierValue2 = historyInfosValue["roleIdentifier"];
                                                if (roleIdentifierValue2 != null && roleIdentifierValue2.Type != JTokenType.Null)
                                                {
                                                    string roleIdentifierInstance2 = ((string)roleIdentifierValue2);
                                                    roleInstanceHistoricEntryInstance.RoleIdentifier = roleIdentifierInstance2;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = roleInstancesValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        metricsServerRoleInstanceModelInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = roleInstancesValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        metricsServerRoleInstanceModelInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = roleInstancesValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        metricsServerRoleInstanceModelInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = roleInstancesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        metricsServerRoleInstanceModelInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)roleInstancesValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            metricsServerRoleInstanceModelInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> RestartAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            StorageAdminManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "RestartAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.MetricsServerInstances.BeginRestartingAsync(resourceGroupName, farmId, instanceId, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> SettingsPullNowAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "SettingsPullNowAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/metricsserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/settingspullnow";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class NodeOperationsExtensions
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.INodeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse BeginDisabling(this INodeOperations operations, string resourceGroupName, string farmId, string nodeId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INodeOperations)s).BeginDisablingAsync(resourceGroupName, farmId, nodeId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.INodeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> BeginDisablingAsync(this INodeOperations operations, string resourceGroupName, string farmId, string nodeId)
        {
            return operations.BeginDisablingAsync(resourceGroupName, farmId, nodeId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.INodeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse BeginEnabling(this INodeOperations operations, string resourceGroupName, string farmId, string nodeId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INodeOperations)s).BeginEnablingAsync(resourceGroupName, farmId, nodeId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.INodeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> BeginEnablingAsync(this INodeOperations operations, string resourceGroupName, string farmId, string nodeId)
        {
            return operations.BeginEnablingAsync(resourceGroupName, farmId, nodeId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.INodeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Disable(this INodeOperations operations, string resourceGroupName, string farmId, string nodeId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INodeOperations)s).DisableAsync(resourceGroupName, farmId, nodeId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.INodeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DisableAsync(this INodeOperations operations, string resourceGroupName, string farmId, string nodeId)
        {
            return operations.DisableAsync(resourceGroupName, farmId, nodeId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.INodeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Enable(this INodeOperations operations, string resourceGroupName, string farmId, string nodeId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INodeOperations)s).EnableAsync(resourceGroupName, farmId, nodeId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.INodeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> EnableAsync(this INodeOperations operations, string resourceGroupName, string farmId, string nodeId)
        {
            return operations.EnableAsync(resourceGroupName, farmId, nodeId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.INodeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static NodeGetResponse Get(this INodeOperations operations, string resourceGroupName, string farmId, string nodeId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INodeOperations)s).GetAsync(resourceGroupName, farmId, nodeId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.INodeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<NodeGetResponse> GetAsync(this INodeOperations operations, string resourceGroupName, string farmId, string nodeId)
        {
            return operations.GetAsync(resourceGroupName, farmId, nodeId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.INodeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricDefinitionsResult GetMetricDefinitions(this INodeOperations operations, string resourceGroupName, string farmId, string nodeId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INodeOperations)s).GetMetricDefinitionsAsync(resourceGroupName, farmId, nodeId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.INodeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(this INodeOperations operations, string resourceGroupName, string farmId, string nodeId, string filter)
        {
            return operations.GetMetricDefinitionsAsync(resourceGroupName, farmId, nodeId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.INodeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricsResult GetMetrics(this INodeOperations operations, string resourceGroupName, string farmId, string nodeId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INodeOperations)s).GetMetricsAsync(resourceGroupName, farmId, nodeId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.INodeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricsResult> GetMetricsAsync(this INodeOperations operations, string resourceGroupName, string farmId, string nodeId, string filter)
        {
            return operations.GetMetricsAsync(resourceGroupName, farmId, nodeId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.INodeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static NodeListResponse List(this INodeOperations operations, string resourceGroupName, string farmId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INodeOperations)s).ListAsync(resourceGroupName, farmId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.INodeOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<NodeListResponse> ListAsync(this INodeOperations operations, string resourceGroupName, string farmId)
        {
            return operations.ListAsync(resourceGroupName, farmId, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    public partial interface INodeOperations
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        Task<LongRunningOperationResponse> BeginDisablingAsync(string resourceGroupName, string farmId, string nodeId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        Task<LongRunningOperationResponse> BeginEnablingAsync(string resourceGroupName, string farmId, string nodeId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> DisableAsync(string resourceGroupName, string farmId, string nodeId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> EnableAsync(string resourceGroupName, string farmId, string nodeId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<NodeGetResponse> GetAsync(string resourceGroupName, string farmId, string nodeId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string nodeId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string nodeId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<NodeListResponse> ListAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class NodeOperations : IServiceOperations<StorageAdminManagementClient>, INodeOperations
    {
        /// <summary>
        /// Initializes a new instance of the NodeOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal NodeOperations(StorageAdminManagementClient client)
        {
            this._client = client;
        }
        
        private StorageAdminManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.StorageAdminManagementClient.
        /// </summary>
        public StorageAdminManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginDisablingAsync(string resourceGroupName, string farmId, string nodeId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (nodeId == null)
            {
                throw new ArgumentNullException("nodeId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("nodeId", nodeId);
                TracingAdapter.Enter(invocationId, this, "BeginDisablingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/nodes/";
            url = url + Uri.EscapeDataString(nodeId);
            url = url + "/offline";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict || statusCode == HttpStatusCode.NotFound || statusCode == HttpStatusCode.MethodNotAllowed || statusCode == HttpStatusCode.Forbidden)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginEnablingAsync(string resourceGroupName, string farmId, string nodeId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (nodeId == null)
            {
                throw new ArgumentNullException("nodeId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("nodeId", nodeId);
                TracingAdapter.Enter(invocationId, this, "BeginEnablingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/nodes/";
            url = url + Uri.EscapeDataString(nodeId);
            url = url + "/online";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict || statusCode == HttpStatusCode.NotFound || statusCode == HttpStatusCode.MethodNotAllowed || statusCode == HttpStatusCode.Forbidden)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DisableAsync(string resourceGroupName, string farmId, string nodeId, CancellationToken cancellationToken)
        {
            StorageAdminManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("nodeId", nodeId);
                TracingAdapter.Enter(invocationId, this, "DisableAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.Nodes.BeginDisablingAsync(resourceGroupName, farmId, nodeId, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> EnableAsync(string resourceGroupName, string farmId, string nodeId, CancellationToken cancellationToken)
        {
            StorageAdminManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("nodeId", nodeId);
                TracingAdapter.Enter(invocationId, this, "EnableAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.Nodes.BeginEnablingAsync(resourceGroupName, farmId, nodeId, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<NodeGetResponse> GetAsync(string resourceGroupName, string farmId, string nodeId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (nodeId == null)
            {
                throw new ArgumentNullException("nodeId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("nodeId", nodeId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/nodes/";
            url = url + Uri.EscapeDataString(nodeId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    NodeGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new NodeGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            NodeModel nodeInstance = new NodeModel();
                            result.Node = nodeInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                Node propertiesInstance = new Node();
                                nodeInstance.Properties = propertiesInstance;
                                
                                JToken codeVersionValue = propertiesValue["codeVersion"];
                                if (codeVersionValue != null && codeVersionValue.Type != JTokenType.Null)
                                {
                                    string codeVersionInstance = ((string)codeVersionValue);
                                    propertiesInstance.CodeVersion = codeVersionInstance;
                                }
                                
                                JToken configVersionValue = propertiesValue["configVersion"];
                                if (configVersionValue != null && configVersionValue.Type != JTokenType.Null)
                                {
                                    string configVersionInstance = ((string)configVersionValue);
                                    propertiesInstance.ConfigVersion = configVersionInstance;
                                }
                                
                                JToken faultDomainValue = propertiesValue["faultDomain"];
                                if (faultDomainValue != null && faultDomainValue.Type != JTokenType.Null)
                                {
                                    Uri faultDomainInstance = TypeConversion.TryParseUri(((string)faultDomainValue));
                                    propertiesInstance.FaultDomain = faultDomainInstance;
                                }
                                
                                JToken healthStatusValue = propertiesValue["healthStatus"];
                                if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                {
                                    HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                    propertiesInstance.HealthState = healthStatusInstance;
                                }
                                
                                JToken ipAddressOrFqdnValue = propertiesValue["ipAddressOrFqdn"];
                                if (ipAddressOrFqdnValue != null && ipAddressOrFqdnValue.Type != JTokenType.Null)
                                {
                                    string ipAddressOrFqdnInstance = ((string)ipAddressOrFqdnValue);
                                    propertiesInstance.IpAddressOrFqdn = ipAddressOrFqdnInstance;
                                }
                                
                                JToken isSeedNodeValue = propertiesValue["isSeedNode"];
                                if (isSeedNodeValue != null && isSeedNodeValue.Type != JTokenType.Null)
                                {
                                    bool isSeedNodeInstance = ((bool)isSeedNodeValue);
                                    propertiesInstance.IsSeedNode = isSeedNodeInstance;
                                }
                                
                                JToken nodeIdValue = propertiesValue["nodeId"];
                                if (nodeIdValue != null && nodeIdValue.Type != JTokenType.Null)
                                {
                                    string nodeIdInstance = ((string)nodeIdValue);
                                    propertiesInstance.NodeId = nodeIdInstance;
                                }
                                
                                JToken nodeNameValue = propertiesValue["nodeName"];
                                if (nodeNameValue != null && nodeNameValue.Type != JTokenType.Null)
                                {
                                    string nodeNameInstance = ((string)nodeNameValue);
                                    propertiesInstance.NodeName = nodeNameInstance;
                                }
                                
                                JToken nodeStatusValue = propertiesValue["nodeStatus"];
                                if (nodeStatusValue != null && nodeStatusValue.Type != JTokenType.Null)
                                {
                                    NodeStatus nodeStatusInstance = ((NodeStatus)Enum.Parse(typeof(NodeStatus), ((string)nodeStatusValue), true));
                                    propertiesInstance.NodeStatus = nodeStatusInstance;
                                }
                                
                                JToken nodeTypeValue = propertiesValue["nodeType"];
                                if (nodeTypeValue != null && nodeTypeValue.Type != JTokenType.Null)
                                {
                                    string nodeTypeInstance = ((string)nodeTypeValue);
                                    propertiesInstance.NodeType = nodeTypeInstance;
                                }
                                
                                JToken nodeUpTimeValue = propertiesValue["nodeUpTime"];
                                if (nodeUpTimeValue != null && nodeUpTimeValue.Type != JTokenType.Null)
                                {
                                    TimeSpan nodeUpTimeInstance = XmlConvert.ToTimeSpan(((string)nodeUpTimeValue));
                                    propertiesInstance.NodeUpTime = nodeUpTimeInstance;
                                }
                                
                                JToken upgradeDomainValue = propertiesValue["upgradeDomain"];
                                if (upgradeDomainValue != null && upgradeDomainValue.Type != JTokenType.Null)
                                {
                                    string upgradeDomainInstance = ((string)upgradeDomainValue);
                                    propertiesInstance.UpgradeDomain = upgradeDomainInstance;
                                }
                                
                                JToken runningInstanceUrisArray = propertiesValue["runningInstanceUris"];
                                if (runningInstanceUrisArray != null && runningInstanceUrisArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken runningInstanceUrisValue in ((JArray)runningInstanceUrisArray))
                                    {
                                        propertiesInstance.RunningInstanceUris.Add(((string)runningInstanceUrisValue));
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                nodeInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                nodeInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                nodeInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                nodeInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    nodeInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string nodeId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (nodeId == null)
            {
                throw new ArgumentNullException("nodeId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("nodeId", nodeId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricDefinitionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/nodes/";
            url = url + Uri.EscapeDataString(nodeId);
            url = url + "/metricdefinitions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricDefinitionsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricDefinitionsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    MetricDefinition metricDefinitionInstance = new MetricDefinition();
                                    result.Value.Add(metricDefinitionInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricDefinitionInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken unitValue = valueValue["unit"];
                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit unitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)unitValue), true));
                                        metricDefinitionInstance.Unit = unitInstance;
                                    }
                                    
                                    JToken primaryAggregationTypeValue = valueValue["primaryAggregationType"];
                                    if (primaryAggregationTypeValue != null && primaryAggregationTypeValue.Type != JTokenType.Null)
                                    {
                                        MetricPrimaryAggregationType primaryAggregationTypeInstance = ((MetricPrimaryAggregationType)Enum.Parse(typeof(MetricPrimaryAggregationType), ((string)primaryAggregationTypeValue), true));
                                        metricDefinitionInstance.PrimaryAggregationType = primaryAggregationTypeInstance;
                                    }
                                    
                                    JToken metricAvailabilitiesArray = valueValue["metricAvailabilities"];
                                    if (metricAvailabilitiesArray != null && metricAvailabilitiesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricAvailabilitiesValue in ((JArray)metricAvailabilitiesArray))
                                        {
                                            MetricAvailability metricAvailabilityInstance = new MetricAvailability();
                                            metricDefinitionInstance.MetricAvailabilities.Add(metricAvailabilityInstance);
                                            
                                            JToken timeGrainValue = metricAvailabilitiesValue["timeGrain"];
                                            if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                                metricAvailabilityInstance.TimeGrain = timeGrainInstance;
                                            }
                                            
                                            JToken retentionValue = metricAvailabilitiesValue["retention"];
                                            if (retentionValue != null && retentionValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan retentionInstance = XmlConvert.ToTimeSpan(((string)retentionValue));
                                                metricAvailabilityInstance.Retention = retentionInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='nodeId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string nodeId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (nodeId == null)
            {
                throw new ArgumentNullException("nodeId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("nodeId", nodeId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/nodes/";
            url = url + Uri.EscapeDataString(nodeId);
            url = url + "/metrics";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Metric metricInstance = new Metric();
                                    result.Metrics.Add(metricInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken metricUnitValue = valueValue["metricUnit"];
                                    if (metricUnitValue != null && metricUnitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit metricUnitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)metricUnitValue), true));
                                        metricInstance.MetricUnit = metricUnitInstance;
                                    }
                                    
                                    JToken timeGrainValue = valueValue["timeGrain"];
                                    if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                        metricInstance.TimeGrain = timeGrainInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        metricInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = valueValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        metricInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken metricValuesArray = valueValue["metricValues"];
                                    if (metricValuesArray != null && metricValuesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricValuesValue in ((JArray)metricValuesArray))
                                        {
                                            MetricValue metricValueInstance = new MetricValue();
                                            metricInstance.MetricValues.Add(metricValueInstance);
                                            
                                            JToken timeStampValue = metricValuesValue["timeStamp"];
                                            if (timeStampValue != null && timeStampValue.Type != JTokenType.Null)
                                            {
                                                DateTime timeStampInstance = ((DateTime)timeStampValue);
                                                metricValueInstance.TimeStamp = timeStampInstance;
                                            }
                                            
                                            JToken averageValue = metricValuesValue["average"];
                                            if (averageValue != null && averageValue.Type != JTokenType.Null)
                                            {
                                                double averageInstance = ((double)averageValue);
                                                metricValueInstance.Average = averageInstance;
                                            }
                                            
                                            JToken minimumValue = metricValuesValue["minimum"];
                                            if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                            {
                                                double minimumInstance = ((double)minimumValue);
                                                metricValueInstance.Minimum = minimumInstance;
                                            }
                                            
                                            JToken maximumValue = metricValuesValue["maximum"];
                                            if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                            {
                                                double maximumInstance = ((double)maximumValue);
                                                metricValueInstance.Maximum = maximumInstance;
                                            }
                                            
                                            JToken totalValue = metricValuesValue["total"];
                                            if (totalValue != null && totalValue.Type != JTokenType.Null)
                                            {
                                                double totalInstance = ((double)totalValue);
                                                metricValueInstance.Total = totalInstance;
                                            }
                                            
                                            JToken countValue = metricValuesValue["count"];
                                            if (countValue != null && countValue.Type != JTokenType.Null)
                                            {
                                                int countInstance = ((int)countValue);
                                                metricValueInstance.Count = countInstance;
                                            }
                                            
                                            JToken propertiesValue = metricValuesValue["properties"];
                                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                            {
                                                string propertiesInstance = propertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                metricValueInstance.Properties = propertiesInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<NodeListResponse> ListAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/nodes";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    NodeListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new NodeListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken nodesArray = responseDoc;
                            if (nodesArray != null && nodesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken nodesValue in ((JArray)nodesArray))
                                {
                                    NodeModel nodeModelInstance = new NodeModel();
                                    result.Nodes.Add(nodeModelInstance);
                                    
                                    JToken propertiesValue = nodesValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        Node propertiesInstance = new Node();
                                        nodeModelInstance.Properties = propertiesInstance;
                                        
                                        JToken codeVersionValue = propertiesValue["codeVersion"];
                                        if (codeVersionValue != null && codeVersionValue.Type != JTokenType.Null)
                                        {
                                            string codeVersionInstance = ((string)codeVersionValue);
                                            propertiesInstance.CodeVersion = codeVersionInstance;
                                        }
                                        
                                        JToken configVersionValue = propertiesValue["configVersion"];
                                        if (configVersionValue != null && configVersionValue.Type != JTokenType.Null)
                                        {
                                            string configVersionInstance = ((string)configVersionValue);
                                            propertiesInstance.ConfigVersion = configVersionInstance;
                                        }
                                        
                                        JToken faultDomainValue = propertiesValue["faultDomain"];
                                        if (faultDomainValue != null && faultDomainValue.Type != JTokenType.Null)
                                        {
                                            Uri faultDomainInstance = TypeConversion.TryParseUri(((string)faultDomainValue));
                                            propertiesInstance.FaultDomain = faultDomainInstance;
                                        }
                                        
                                        JToken healthStatusValue = propertiesValue["healthStatus"];
                                        if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                        {
                                            HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                            propertiesInstance.HealthState = healthStatusInstance;
                                        }
                                        
                                        JToken ipAddressOrFqdnValue = propertiesValue["ipAddressOrFqdn"];
                                        if (ipAddressOrFqdnValue != null && ipAddressOrFqdnValue.Type != JTokenType.Null)
                                        {
                                            string ipAddressOrFqdnInstance = ((string)ipAddressOrFqdnValue);
                                            propertiesInstance.IpAddressOrFqdn = ipAddressOrFqdnInstance;
                                        }
                                        
                                        JToken isSeedNodeValue = propertiesValue["isSeedNode"];
                                        if (isSeedNodeValue != null && isSeedNodeValue.Type != JTokenType.Null)
                                        {
                                            bool isSeedNodeInstance = ((bool)isSeedNodeValue);
                                            propertiesInstance.IsSeedNode = isSeedNodeInstance;
                                        }
                                        
                                        JToken nodeIdValue = propertiesValue["nodeId"];
                                        if (nodeIdValue != null && nodeIdValue.Type != JTokenType.Null)
                                        {
                                            string nodeIdInstance = ((string)nodeIdValue);
                                            propertiesInstance.NodeId = nodeIdInstance;
                                        }
                                        
                                        JToken nodeNameValue = propertiesValue["nodeName"];
                                        if (nodeNameValue != null && nodeNameValue.Type != JTokenType.Null)
                                        {
                                            string nodeNameInstance = ((string)nodeNameValue);
                                            propertiesInstance.NodeName = nodeNameInstance;
                                        }
                                        
                                        JToken nodeStatusValue = propertiesValue["nodeStatus"];
                                        if (nodeStatusValue != null && nodeStatusValue.Type != JTokenType.Null)
                                        {
                                            NodeStatus nodeStatusInstance = ((NodeStatus)Enum.Parse(typeof(NodeStatus), ((string)nodeStatusValue), true));
                                            propertiesInstance.NodeStatus = nodeStatusInstance;
                                        }
                                        
                                        JToken nodeTypeValue = propertiesValue["nodeType"];
                                        if (nodeTypeValue != null && nodeTypeValue.Type != JTokenType.Null)
                                        {
                                            string nodeTypeInstance = ((string)nodeTypeValue);
                                            propertiesInstance.NodeType = nodeTypeInstance;
                                        }
                                        
                                        JToken nodeUpTimeValue = propertiesValue["nodeUpTime"];
                                        if (nodeUpTimeValue != null && nodeUpTimeValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan nodeUpTimeInstance = XmlConvert.ToTimeSpan(((string)nodeUpTimeValue));
                                            propertiesInstance.NodeUpTime = nodeUpTimeInstance;
                                        }
                                        
                                        JToken upgradeDomainValue = propertiesValue["upgradeDomain"];
                                        if (upgradeDomainValue != null && upgradeDomainValue.Type != JTokenType.Null)
                                        {
                                            string upgradeDomainInstance = ((string)upgradeDomainValue);
                                            propertiesInstance.UpgradeDomain = upgradeDomainInstance;
                                        }
                                        
                                        JToken runningInstanceUrisArray = propertiesValue["runningInstanceUris"];
                                        if (runningInstanceUrisArray != null && runningInstanceUrisArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken runningInstanceUrisValue in ((JArray)runningInstanceUrisArray))
                                            {
                                                propertiesInstance.RunningInstanceUris.Add(((string)runningInstanceUrisValue));
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = nodesValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        nodeModelInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = nodesValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        nodeModelInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = nodesValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        nodeModelInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = nodesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        nodeModelInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)nodesValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            nodeModelInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class ShareOperationsExtensions
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IShareOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static ShareGetResponse Get(this IShareOperations operations, string resourceGroupName, string farmId, string shareName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShareOperations)s).GetAsync(resourceGroupName, farmId, shareName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IShareOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<ShareGetResponse> GetAsync(this IShareOperations operations, string resourceGroupName, string farmId, string shareName)
        {
            return operations.GetAsync(resourceGroupName, farmId, shareName, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IShareOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricDefinitionsResult GetMetricDefinitions(this IShareOperations operations, string resourceGroupName, string farmId, string shareName, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShareOperations)s).GetMetricDefinitionsAsync(resourceGroupName, farmId, shareName, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IShareOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(this IShareOperations operations, string resourceGroupName, string farmId, string shareName, string filter)
        {
            return operations.GetMetricDefinitionsAsync(resourceGroupName, farmId, shareName, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IShareOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricsResult GetMetrics(this IShareOperations operations, string resourceGroupName, string farmId, string shareName, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShareOperations)s).GetMetricsAsync(resourceGroupName, farmId, shareName, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IShareOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricsResult> GetMetricsAsync(this IShareOperations operations, string resourceGroupName, string farmId, string shareName, string filter)
        {
            return operations.GetMetricsAsync(resourceGroupName, farmId, shareName, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IShareOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static ShareListResponse List(this IShareOperations operations, string resourceGroupName, string farmId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShareOperations)s).ListAsync(resourceGroupName, farmId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IShareOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<ShareListResponse> ListAsync(this IShareOperations operations, string resourceGroupName, string farmId)
        {
            return operations.ListAsync(resourceGroupName, farmId, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    public partial interface IShareOperations
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<ShareGetResponse> GetAsync(string resourceGroupName, string farmId, string shareName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string shareName, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string shareName, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<ShareListResponse> ListAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class ShareOperations : IServiceOperations<StorageAdminManagementClient>, IShareOperations
    {
        /// <summary>
        /// Initializes a new instance of the ShareOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ShareOperations(StorageAdminManagementClient client)
        {
            this._client = client;
        }
        
        private StorageAdminManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.StorageAdminManagementClient.
        /// </summary>
        public StorageAdminManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<ShareGetResponse> GetAsync(string resourceGroupName, string farmId, string shareName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (shareName == null)
            {
                throw new ArgumentNullException("shareName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("shareName", shareName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/shares/";
            url = url + Uri.EscapeDataString(shareName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ShareGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ShareGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ShareModel shareInstance = new ShareModel();
                            result.Share = shareInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                Share propertiesInstance = new Share();
                                shareInstance.Properties = propertiesInstance;
                                
                                JToken shareNameValue = propertiesValue["shareName"];
                                if (shareNameValue != null && shareNameValue.Type != JTokenType.Null)
                                {
                                    string shareNameInstance = ((string)shareNameValue);
                                    propertiesInstance.ShareName = shareNameInstance;
                                }
                                
                                JToken uncPathValue = propertiesValue["uncPath"];
                                if (uncPathValue != null && uncPathValue.Type != JTokenType.Null)
                                {
                                    string uncPathInstance = ((string)uncPathValue);
                                    propertiesInstance.UncPath = uncPathInstance;
                                }
                                
                                JToken totalCapacityValue = propertiesValue["totalCapacity"];
                                if (totalCapacityValue != null && totalCapacityValue.Type != JTokenType.Null)
                                {
                                    ulong totalCapacityInstance = ((ulong)totalCapacityValue);
                                    propertiesInstance.TotalCapacity = totalCapacityInstance;
                                }
                                
                                JToken usedCapacityValue = propertiesValue["usedCapacity"];
                                if (usedCapacityValue != null && usedCapacityValue.Type != JTokenType.Null)
                                {
                                    ulong usedCapacityInstance = ((ulong)usedCapacityValue);
                                    propertiesInstance.UsedCapacity = usedCapacityInstance;
                                }
                                
                                JToken freeCapacityValue = propertiesValue["freeCapacity"];
                                if (freeCapacityValue != null && freeCapacityValue.Type != JTokenType.Null)
                                {
                                    ulong freeCapacityInstance = ((ulong)freeCapacityValue);
                                    propertiesInstance.FreeCapacity = freeCapacityInstance;
                                }
                                
                                JToken healthStatusValue = propertiesValue["healthStatus"];
                                if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                {
                                    HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                    propertiesInstance.HealthStatus = healthStatusInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                shareInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                shareInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                shareInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                shareInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    shareInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string shareName, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (shareName == null)
            {
                throw new ArgumentNullException("shareName");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("shareName", shareName);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricDefinitionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/shares/";
            url = url + Uri.EscapeDataString(shareName);
            url = url + "/metricdefinitions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricDefinitionsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricDefinitionsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    MetricDefinition metricDefinitionInstance = new MetricDefinition();
                                    result.Value.Add(metricDefinitionInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricDefinitionInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken unitValue = valueValue["unit"];
                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit unitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)unitValue), true));
                                        metricDefinitionInstance.Unit = unitInstance;
                                    }
                                    
                                    JToken primaryAggregationTypeValue = valueValue["primaryAggregationType"];
                                    if (primaryAggregationTypeValue != null && primaryAggregationTypeValue.Type != JTokenType.Null)
                                    {
                                        MetricPrimaryAggregationType primaryAggregationTypeInstance = ((MetricPrimaryAggregationType)Enum.Parse(typeof(MetricPrimaryAggregationType), ((string)primaryAggregationTypeValue), true));
                                        metricDefinitionInstance.PrimaryAggregationType = primaryAggregationTypeInstance;
                                    }
                                    
                                    JToken metricAvailabilitiesArray = valueValue["metricAvailabilities"];
                                    if (metricAvailabilitiesArray != null && metricAvailabilitiesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricAvailabilitiesValue in ((JArray)metricAvailabilitiesArray))
                                        {
                                            MetricAvailability metricAvailabilityInstance = new MetricAvailability();
                                            metricDefinitionInstance.MetricAvailabilities.Add(metricAvailabilityInstance);
                                            
                                            JToken timeGrainValue = metricAvailabilitiesValue["timeGrain"];
                                            if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                                metricAvailabilityInstance.TimeGrain = timeGrainInstance;
                                            }
                                            
                                            JToken retentionValue = metricAvailabilitiesValue["retention"];
                                            if (retentionValue != null && retentionValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan retentionInstance = XmlConvert.ToTimeSpan(((string)retentionValue));
                                                metricAvailabilityInstance.Retention = retentionInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string shareName, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (shareName == null)
            {
                throw new ArgumentNullException("shareName");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("shareName", shareName);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/shares/";
            url = url + Uri.EscapeDataString(shareName);
            url = url + "/metrics";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Metric metricInstance = new Metric();
                                    result.Metrics.Add(metricInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken metricUnitValue = valueValue["metricUnit"];
                                    if (metricUnitValue != null && metricUnitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit metricUnitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)metricUnitValue), true));
                                        metricInstance.MetricUnit = metricUnitInstance;
                                    }
                                    
                                    JToken timeGrainValue = valueValue["timeGrain"];
                                    if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                        metricInstance.TimeGrain = timeGrainInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        metricInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = valueValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        metricInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken metricValuesArray = valueValue["metricValues"];
                                    if (metricValuesArray != null && metricValuesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricValuesValue in ((JArray)metricValuesArray))
                                        {
                                            MetricValue metricValueInstance = new MetricValue();
                                            metricInstance.MetricValues.Add(metricValueInstance);
                                            
                                            JToken timeStampValue = metricValuesValue["timeStamp"];
                                            if (timeStampValue != null && timeStampValue.Type != JTokenType.Null)
                                            {
                                                DateTime timeStampInstance = ((DateTime)timeStampValue);
                                                metricValueInstance.TimeStamp = timeStampInstance;
                                            }
                                            
                                            JToken averageValue = metricValuesValue["average"];
                                            if (averageValue != null && averageValue.Type != JTokenType.Null)
                                            {
                                                double averageInstance = ((double)averageValue);
                                                metricValueInstance.Average = averageInstance;
                                            }
                                            
                                            JToken minimumValue = metricValuesValue["minimum"];
                                            if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                            {
                                                double minimumInstance = ((double)minimumValue);
                                                metricValueInstance.Minimum = minimumInstance;
                                            }
                                            
                                            JToken maximumValue = metricValuesValue["maximum"];
                                            if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                            {
                                                double maximumInstance = ((double)maximumValue);
                                                metricValueInstance.Maximum = maximumInstance;
                                            }
                                            
                                            JToken totalValue = metricValuesValue["total"];
                                            if (totalValue != null && totalValue.Type != JTokenType.Null)
                                            {
                                                double totalInstance = ((double)totalValue);
                                                metricValueInstance.Total = totalInstance;
                                            }
                                            
                                            JToken countValue = metricValuesValue["count"];
                                            if (countValue != null && countValue.Type != JTokenType.Null)
                                            {
                                                int countInstance = ((int)countValue);
                                                metricValueInstance.Count = countInstance;
                                            }
                                            
                                            JToken propertiesValue = metricValuesValue["properties"];
                                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                            {
                                                string propertiesInstance = propertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                metricValueInstance.Properties = propertiesInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<ShareListResponse> ListAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/shares";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ShareListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ShareListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken sharesArray = responseDoc;
                            if (sharesArray != null && sharesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken sharesValue in ((JArray)sharesArray))
                                {
                                    ShareModel shareModelInstance = new ShareModel();
                                    result.Shares.Add(shareModelInstance);
                                    
                                    JToken propertiesValue = sharesValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        Share propertiesInstance = new Share();
                                        shareModelInstance.Properties = propertiesInstance;
                                        
                                        JToken shareNameValue = propertiesValue["shareName"];
                                        if (shareNameValue != null && shareNameValue.Type != JTokenType.Null)
                                        {
                                            string shareNameInstance = ((string)shareNameValue);
                                            propertiesInstance.ShareName = shareNameInstance;
                                        }
                                        
                                        JToken uncPathValue = propertiesValue["uncPath"];
                                        if (uncPathValue != null && uncPathValue.Type != JTokenType.Null)
                                        {
                                            string uncPathInstance = ((string)uncPathValue);
                                            propertiesInstance.UncPath = uncPathInstance;
                                        }
                                        
                                        JToken totalCapacityValue = propertiesValue["totalCapacity"];
                                        if (totalCapacityValue != null && totalCapacityValue.Type != JTokenType.Null)
                                        {
                                            ulong totalCapacityInstance = ((ulong)totalCapacityValue);
                                            propertiesInstance.TotalCapacity = totalCapacityInstance;
                                        }
                                        
                                        JToken usedCapacityValue = propertiesValue["usedCapacity"];
                                        if (usedCapacityValue != null && usedCapacityValue.Type != JTokenType.Null)
                                        {
                                            ulong usedCapacityInstance = ((ulong)usedCapacityValue);
                                            propertiesInstance.UsedCapacity = usedCapacityInstance;
                                        }
                                        
                                        JToken freeCapacityValue = propertiesValue["freeCapacity"];
                                        if (freeCapacityValue != null && freeCapacityValue.Type != JTokenType.Null)
                                        {
                                            ulong freeCapacityInstance = ((ulong)freeCapacityValue);
                                            propertiesInstance.FreeCapacity = freeCapacityInstance;
                                        }
                                        
                                        JToken healthStatusValue = propertiesValue["healthStatus"];
                                        if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                        {
                                            HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                            propertiesInstance.HealthStatus = healthStatusInstance;
                                        }
                                    }
                                    
                                    JToken idValue = sharesValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        shareModelInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = sharesValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        shareModelInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = sharesValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        shareModelInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = sharesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        shareModelInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)sharesValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            shareModelInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class StorageAccountOperationsExtensions
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='versionedAccountName'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static StorageAccountGetResponse Get(this IStorageAccountOperations operations, string resourceGroupName, string farmId, string versionedAccountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).GetAsync(resourceGroupName, farmId, versionedAccountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='versionedAccountName'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<StorageAccountGetResponse> GetAsync(this IStorageAccountOperations operations, string resourceGroupName, string farmId, string versionedAccountName)
        {
            return operations.GetAsync(resourceGroupName, farmId, versionedAccountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Optional. Your documentation here.
        /// </param>
        /// <param name='summary'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static StorageAccountListResponse List(this IStorageAccountOperations operations, string resourceGroupName, string farmId, string filter, bool summary)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).ListAsync(resourceGroupName, farmId, filter, summary);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Optional. Your documentation here.
        /// </param>
        /// <param name='summary'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<StorageAccountListResponse> ListAsync(this IStorageAccountOperations operations, string resourceGroupName, string farmId, string filter, bool summary)
        {
            return operations.ListAsync(resourceGroupName, farmId, filter, summary, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IStorageAccountOperations.
        /// </param>
        /// <param name='tenantSubscriptionId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='tenantResourceGroup'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static StorageAccountSyncResponse Sync(this IStorageAccountOperations operations, string tenantSubscriptionId, string tenantResourceGroup, StorageAccountSyncRequest parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).SyncAsync(tenantSubscriptionId, tenantResourceGroup, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IStorageAccountOperations.
        /// </param>
        /// <param name='tenantSubscriptionId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='tenantResourceGroup'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<StorageAccountSyncResponse> SyncAsync(this IStorageAccountOperations operations, string tenantSubscriptionId, string tenantResourceGroup, StorageAccountSyncRequest parameters)
        {
            return operations.SyncAsync(tenantSubscriptionId, tenantResourceGroup, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='versionedAccountName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='undeleteParam'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Undelete(this IStorageAccountOperations operations, string resourceGroupName, string farmId, string versionedAccountName, StorageAccountUndeleteParameters undeleteParam)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).UndeleteAsync(resourceGroupName, farmId, versionedAccountName, undeleteParam);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='versionedAccountName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='undeleteParam'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> UndeleteAsync(this IStorageAccountOperations operations, string resourceGroupName, string farmId, string versionedAccountName, StorageAccountUndeleteParameters undeleteParam)
        {
            return operations.UndeleteAsync(resourceGroupName, farmId, versionedAccountName, undeleteParam, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    public partial interface IStorageAccountOperations
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='versionedAccountName'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<StorageAccountGetResponse> GetAsync(string resourceGroupName, string farmId, string versionedAccountName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='summary'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<StorageAccountListResponse> ListAsync(string resourceGroupName, string farmId, string filter, bool summary, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='tenantSubscriptionId'>
        /// Your documentation here.
        /// </param>
        /// <param name='tenantResourceGroup'>
        /// Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<StorageAccountSyncResponse> SyncAsync(string tenantSubscriptionId, string tenantResourceGroup, StorageAccountSyncRequest parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='versionedAccountName'>
        /// Your documentation here.
        /// </param>
        /// <param name='undeleteParam'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> UndeleteAsync(string resourceGroupName, string farmId, string versionedAccountName, StorageAccountUndeleteParameters undeleteParam, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class StorageAccountOperations : IServiceOperations<StorageAdminManagementClient>, IStorageAccountOperations
    {
        /// <summary>
        /// Initializes a new instance of the StorageAccountOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal StorageAccountOperations(StorageAdminManagementClient client)
        {
            this._client = client;
        }
        
        private StorageAdminManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.StorageAdminManagementClient.
        /// </summary>
        public StorageAdminManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='versionedAccountName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<StorageAccountGetResponse> GetAsync(string resourceGroupName, string farmId, string versionedAccountName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (versionedAccountName == null)
            {
                throw new ArgumentNullException("versionedAccountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("versionedAccountName", versionedAccountName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/storageaccounts/";
            url = url + Uri.EscapeDataString(versionedAccountName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    StorageAccountGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new StorageAccountGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            StorageAccountModel storageAccountInstance = new StorageAccountModel();
                            result.StorageAccount = storageAccountInstance;
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                storageAccountInstance.ResourceType = typeInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                StorageAccountPropertiesModel propertiesInstance = new StorageAccountPropertiesModel();
                                storageAccountInstance.Properties = propertiesInstance;
                                
                                JToken tenantViewIdValue = propertiesValue["tenantViewId"];
                                if (tenantViewIdValue != null && tenantViewIdValue.Type != JTokenType.Null)
                                {
                                    string tenantViewIdInstance = ((string)tenantViewIdValue);
                                    propertiesInstance.TenantViewId = tenantViewIdInstance;
                                }
                                
                                JToken accountTypeValue = propertiesValue["accountType"];
                                if (accountTypeValue != null && accountTypeValue.Type != JTokenType.Null)
                                {
                                    StorageAccountType accountTypeInstance = StorageAdminManagementClient.ParseStorageAccountType(((string)accountTypeValue));
                                    propertiesInstance.AccountType = accountTypeInstance;
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    StorageAccountState provisioningStateInstance = StorageAdminManagementClient.ParseStorageAccountState(((string)provisioningStateValue));
                                    propertiesInstance.State = provisioningStateInstance;
                                }
                                
                                JToken primaryEndpointsSequenceElement = ((JToken)propertiesValue["primaryEndpoints"]);
                                if (primaryEndpointsSequenceElement != null && primaryEndpointsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in primaryEndpointsSequenceElement)
                                    {
                                        string primaryEndpointsKey = ((string)property.Name);
                                        string primaryEndpointsValue = ((string)property.Value);
                                        propertiesInstance.PrimaryEndpoints.Add(primaryEndpointsKey, primaryEndpointsValue);
                                    }
                                }
                                
                                JToken creationTimeValue = propertiesValue["creationTime"];
                                if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                {
                                    string creationTimeInstance = ((string)creationTimeValue);
                                    propertiesInstance.CreationTime = creationTimeInstance;
                                }
                                
                                JToken alternateNameValue = propertiesValue["alternateName"];
                                if (alternateNameValue != null && alternateNameValue.Type != JTokenType.Null)
                                {
                                    string alternateNameInstance = ((string)alternateNameValue);
                                    propertiesInstance.AlternateName = alternateNameInstance;
                                }
                                
                                JToken primaryLocationValue = propertiesValue["primaryLocation"];
                                if (primaryLocationValue != null && primaryLocationValue.Type != JTokenType.Null)
                                {
                                    string primaryLocationInstance = ((string)primaryLocationValue);
                                    propertiesInstance.PrimaryLocation = primaryLocationInstance;
                                }
                                
                                JToken statusOfPrimaryValue = propertiesValue["statusOfPrimary"];
                                if (statusOfPrimaryValue != null && statusOfPrimaryValue.Type != JTokenType.Null)
                                {
                                    RegionStatus statusOfPrimaryInstance = ((RegionStatus)Enum.Parse(typeof(RegionStatus), ((string)statusOfPrimaryValue), true));
                                    propertiesInstance.StatusOfPrimary = statusOfPrimaryInstance;
                                }
                                
                                JToken tenantSubscriptionIdValue = propertiesValue["tenantSubscriptionId"];
                                if (tenantSubscriptionIdValue != null && tenantSubscriptionIdValue.Type != JTokenType.Null)
                                {
                                    Guid tenantSubscriptionIdInstance = Guid.Parse(((string)tenantSubscriptionIdValue));
                                    propertiesInstance.TenantSubscriptionId = tenantSubscriptionIdInstance;
                                }
                                
                                JToken tenantStorageAccountNameValue = propertiesValue["tenantStorageAccountName"];
                                if (tenantStorageAccountNameValue != null && tenantStorageAccountNameValue.Type != JTokenType.Null)
                                {
                                    string tenantStorageAccountNameInstance = ((string)tenantStorageAccountNameValue);
                                    propertiesInstance.TenantAccountName = tenantStorageAccountNameInstance;
                                }
                                
                                JToken tenantResourceGroupNameValue = propertiesValue["tenantResourceGroupName"];
                                if (tenantResourceGroupNameValue != null && tenantResourceGroupNameValue.Type != JTokenType.Null)
                                {
                                    string tenantResourceGroupNameInstance = ((string)tenantResourceGroupNameValue);
                                    propertiesInstance.TenantResourceGroupName = tenantResourceGroupNameInstance;
                                }
                                
                                JToken currentOperationValue = propertiesValue["currentOperation"];
                                if (currentOperationValue != null && currentOperationValue.Type != JTokenType.Null)
                                {
                                    StorageAccountOperation currentOperationInstance = ((StorageAccountOperation)Enum.Parse(typeof(StorageAccountOperation), ((string)currentOperationValue), true));
                                    propertiesInstance.CurrentOperation = currentOperationInstance;
                                }
                                
                                JToken customDomainValue = propertiesValue["customDomain"];
                                if (customDomainValue != null && customDomainValue.Type != JTokenType.Null)
                                {
                                    string customDomainInstance = ((string)customDomainValue);
                                    propertiesInstance.CustomDomain = customDomainInstance;
                                }
                                
                                JToken acquisitionOperationCountValue = propertiesValue["acquisitionOperationCount"];
                                if (acquisitionOperationCountValue != null && acquisitionOperationCountValue.Type != JTokenType.Null)
                                {
                                    int acquisitionOperationCountInstance = ((int)acquisitionOperationCountValue);
                                    propertiesInstance.AcquisitionOperationCount = acquisitionOperationCountInstance;
                                }
                                
                                JToken deletedTimeValue = propertiesValue["deletedTime"];
                                if (deletedTimeValue != null && deletedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime deletedTimeInstance = ((DateTime)deletedTimeValue);
                                    propertiesInstance.DeletedTime = deletedTimeInstance;
                                }
                                
                                JToken accountStatusValue = propertiesValue["accountStatus"];
                                if (accountStatusValue != null && accountStatusValue.Type != JTokenType.Null)
                                {
                                    StorageAccountStatus accountStatusInstance = ((StorageAccountStatus)Enum.Parse(typeof(StorageAccountStatus), ((string)accountStatusValue), true));
                                    propertiesInstance.AccountStatus = accountStatusInstance;
                                }
                                
                                JToken recoveredTimeValue = propertiesValue["recoveredTime"];
                                if (recoveredTimeValue != null && recoveredTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime recoveredTimeInstance = ((DateTime)recoveredTimeValue);
                                    propertiesInstance.RecoveredTime = recoveredTimeInstance;
                                }
                                
                                JToken recycledTimeValue = propertiesValue["recycledTime"];
                                if (recycledTimeValue != null && recycledTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime recycledTimeInstance = ((DateTime)recycledTimeValue);
                                    propertiesInstance.RecycledTime = recycledTimeInstance;
                                }
                                
                                JToken permissionsValue = propertiesValue["permissions"];
                                if (permissionsValue != null && permissionsValue.Type != JTokenType.Null)
                                {
                                    WacAccountPermissions permissionsInstance = StorageAdminManagementClient.ParseWacAccountPermissions(((string)permissionsValue));
                                    propertiesInstance.Permissions = permissionsInstance;
                                }
                                
                                JToken accountIdValue = propertiesValue["accountId"];
                                if (accountIdValue != null && accountIdValue.Type != JTokenType.Null)
                                {
                                    ulong accountIdInstance = ((ulong)accountIdValue);
                                    propertiesInstance.AccountId = accountIdInstance;
                                }
                                
                                JToken wacInternalStateValue = propertiesValue["wacInternalState"];
                                if (wacInternalStateValue != null && wacInternalStateValue.Type != JTokenType.Null)
                                {
                                    WacAccountStates wacInternalStateInstance = StorageAdminManagementClient.ParseWacAccountStates(((string)wacInternalStateValue));
                                    propertiesInstance.WacInternalState = wacInternalStateInstance;
                                }
                                
                                JToken idValue = propertiesValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    propertiesInstance.Id = idInstance;
                                }
                                
                                JToken nameValue = propertiesValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    propertiesInstance.Name = nameInstance;
                                }
                                
                                JToken typeValue2 = propertiesValue["type"];
                                if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                {
                                    string typeInstance2 = ((string)typeValue2);
                                    propertiesInstance.Type = typeInstance2;
                                }
                                
                                JToken locationValue = propertiesValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    propertiesInstance.Location = locationInstance;
                                }
                                
                                JToken tagsSequenceElement = ((JToken)propertiesValue["tags"]);
                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property2 in tagsSequenceElement)
                                    {
                                        string tagsKey = ((string)property2.Name);
                                        string tagsValue = ((string)property2.Value);
                                        propertiesInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                            }
                            
                            JToken tenantSubscriptionIdValue2 = responseDoc["tenantSubscriptionId"];
                            if (tenantSubscriptionIdValue2 != null && tenantSubscriptionIdValue2.Type != JTokenType.Null)
                            {
                                Guid tenantSubscriptionIdInstance2 = Guid.Parse(((string)tenantSubscriptionIdValue2));
                                storageAccountInstance.TenantSubscriptionId = tenantSubscriptionIdInstance2;
                            }
                            
                            JToken accountStatusFilterValue = responseDoc["accountStatusFilter"];
                            if (accountStatusFilterValue != null && accountStatusFilterValue.Type != JTokenType.Null)
                            {
                                StorageAccountStatusSearchFilter accountStatusFilterInstance = ((StorageAccountStatusSearchFilter)Enum.Parse(typeof(StorageAccountStatusSearchFilter), ((string)accountStatusFilterValue), true));
                                storageAccountInstance.AccountStatusFilter = accountStatusFilterInstance;
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                storageAccountInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                storageAccountInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue3 = responseDoc["type"];
                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                            {
                                string typeInstance3 = ((string)typeValue3);
                                storageAccountInstance.Type = typeInstance3;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                storageAccountInstance.Location = locationInstance2;
                            }
                            
                            JToken tagsSequenceElement2 = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                            {
                                foreach (JProperty property3 in tagsSequenceElement2)
                                {
                                    string tagsKey2 = ((string)property3.Name);
                                    string tagsValue2 = ((string)property3.Value);
                                    storageAccountInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Optional. Your documentation here.
        /// </param>
        /// <param name='summary'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<StorageAccountListResponse> ListAsync(string resourceGroupName, string farmId, string filter, bool summary, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("filter", filter);
                tracingParameters.Add("summary", summary);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/storageaccounts";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            if (filter != null)
            {
                odataFilter.Add(Uri.EscapeDataString(filter));
            }
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            queryParameters.Add("summary=" + Uri.EscapeDataString(summary.ToString().ToLower()));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    StorageAccountListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new StorageAccountListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    StorageAccountModel storageAccountModelInstance = new StorageAccountModel();
                                    result.StorageAccounts.Add(storageAccountModelInstance);
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        storageAccountModelInstance.ResourceType = typeInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        StorageAccountPropertiesModel propertiesInstance = new StorageAccountPropertiesModel();
                                        storageAccountModelInstance.Properties = propertiesInstance;
                                        
                                        JToken tenantViewIdValue = propertiesValue["tenantViewId"];
                                        if (tenantViewIdValue != null && tenantViewIdValue.Type != JTokenType.Null)
                                        {
                                            string tenantViewIdInstance = ((string)tenantViewIdValue);
                                            propertiesInstance.TenantViewId = tenantViewIdInstance;
                                        }
                                        
                                        JToken accountTypeValue = propertiesValue["accountType"];
                                        if (accountTypeValue != null && accountTypeValue.Type != JTokenType.Null)
                                        {
                                            StorageAccountType accountTypeInstance = StorageAdminManagementClient.ParseStorageAccountType(((string)accountTypeValue));
                                            propertiesInstance.AccountType = accountTypeInstance;
                                        }
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            StorageAccountState provisioningStateInstance = StorageAdminManagementClient.ParseStorageAccountState(((string)provisioningStateValue));
                                            propertiesInstance.State = provisioningStateInstance;
                                        }
                                        
                                        JToken primaryEndpointsSequenceElement = ((JToken)propertiesValue["primaryEndpoints"]);
                                        if (primaryEndpointsSequenceElement != null && primaryEndpointsSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in primaryEndpointsSequenceElement)
                                            {
                                                string primaryEndpointsKey = ((string)property.Name);
                                                string primaryEndpointsValue = ((string)property.Value);
                                                propertiesInstance.PrimaryEndpoints.Add(primaryEndpointsKey, primaryEndpointsValue);
                                            }
                                        }
                                        
                                        JToken creationTimeValue = propertiesValue["creationTime"];
                                        if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                        {
                                            string creationTimeInstance = ((string)creationTimeValue);
                                            propertiesInstance.CreationTime = creationTimeInstance;
                                        }
                                        
                                        JToken alternateNameValue = propertiesValue["alternateName"];
                                        if (alternateNameValue != null && alternateNameValue.Type != JTokenType.Null)
                                        {
                                            string alternateNameInstance = ((string)alternateNameValue);
                                            propertiesInstance.AlternateName = alternateNameInstance;
                                        }
                                        
                                        JToken primaryLocationValue = propertiesValue["primaryLocation"];
                                        if (primaryLocationValue != null && primaryLocationValue.Type != JTokenType.Null)
                                        {
                                            string primaryLocationInstance = ((string)primaryLocationValue);
                                            propertiesInstance.PrimaryLocation = primaryLocationInstance;
                                        }
                                        
                                        JToken statusOfPrimaryValue = propertiesValue["statusOfPrimary"];
                                        if (statusOfPrimaryValue != null && statusOfPrimaryValue.Type != JTokenType.Null)
                                        {
                                            RegionStatus statusOfPrimaryInstance = ((RegionStatus)Enum.Parse(typeof(RegionStatus), ((string)statusOfPrimaryValue), true));
                                            propertiesInstance.StatusOfPrimary = statusOfPrimaryInstance;
                                        }
                                        
                                        JToken tenantSubscriptionIdValue = propertiesValue["tenantSubscriptionId"];
                                        if (tenantSubscriptionIdValue != null && tenantSubscriptionIdValue.Type != JTokenType.Null)
                                        {
                                            Guid tenantSubscriptionIdInstance = Guid.Parse(((string)tenantSubscriptionIdValue));
                                            propertiesInstance.TenantSubscriptionId = tenantSubscriptionIdInstance;
                                        }
                                        
                                        JToken tenantStorageAccountNameValue = propertiesValue["tenantStorageAccountName"];
                                        if (tenantStorageAccountNameValue != null && tenantStorageAccountNameValue.Type != JTokenType.Null)
                                        {
                                            string tenantStorageAccountNameInstance = ((string)tenantStorageAccountNameValue);
                                            propertiesInstance.TenantAccountName = tenantStorageAccountNameInstance;
                                        }
                                        
                                        JToken tenantResourceGroupNameValue = propertiesValue["tenantResourceGroupName"];
                                        if (tenantResourceGroupNameValue != null && tenantResourceGroupNameValue.Type != JTokenType.Null)
                                        {
                                            string tenantResourceGroupNameInstance = ((string)tenantResourceGroupNameValue);
                                            propertiesInstance.TenantResourceGroupName = tenantResourceGroupNameInstance;
                                        }
                                        
                                        JToken currentOperationValue = propertiesValue["currentOperation"];
                                        if (currentOperationValue != null && currentOperationValue.Type != JTokenType.Null)
                                        {
                                            StorageAccountOperation currentOperationInstance = ((StorageAccountOperation)Enum.Parse(typeof(StorageAccountOperation), ((string)currentOperationValue), true));
                                            propertiesInstance.CurrentOperation = currentOperationInstance;
                                        }
                                        
                                        JToken customDomainValue = propertiesValue["customDomain"];
                                        if (customDomainValue != null && customDomainValue.Type != JTokenType.Null)
                                        {
                                            string customDomainInstance = ((string)customDomainValue);
                                            propertiesInstance.CustomDomain = customDomainInstance;
                                        }
                                        
                                        JToken acquisitionOperationCountValue = propertiesValue["acquisitionOperationCount"];
                                        if (acquisitionOperationCountValue != null && acquisitionOperationCountValue.Type != JTokenType.Null)
                                        {
                                            int acquisitionOperationCountInstance = ((int)acquisitionOperationCountValue);
                                            propertiesInstance.AcquisitionOperationCount = acquisitionOperationCountInstance;
                                        }
                                        
                                        JToken deletedTimeValue = propertiesValue["deletedTime"];
                                        if (deletedTimeValue != null && deletedTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime deletedTimeInstance = ((DateTime)deletedTimeValue);
                                            propertiesInstance.DeletedTime = deletedTimeInstance;
                                        }
                                        
                                        JToken accountStatusValue = propertiesValue["accountStatus"];
                                        if (accountStatusValue != null && accountStatusValue.Type != JTokenType.Null)
                                        {
                                            StorageAccountStatus accountStatusInstance = ((StorageAccountStatus)Enum.Parse(typeof(StorageAccountStatus), ((string)accountStatusValue), true));
                                            propertiesInstance.AccountStatus = accountStatusInstance;
                                        }
                                        
                                        JToken recoveredTimeValue = propertiesValue["recoveredTime"];
                                        if (recoveredTimeValue != null && recoveredTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime recoveredTimeInstance = ((DateTime)recoveredTimeValue);
                                            propertiesInstance.RecoveredTime = recoveredTimeInstance;
                                        }
                                        
                                        JToken recycledTimeValue = propertiesValue["recycledTime"];
                                        if (recycledTimeValue != null && recycledTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime recycledTimeInstance = ((DateTime)recycledTimeValue);
                                            propertiesInstance.RecycledTime = recycledTimeInstance;
                                        }
                                        
                                        JToken permissionsValue = propertiesValue["permissions"];
                                        if (permissionsValue != null && permissionsValue.Type != JTokenType.Null)
                                        {
                                            WacAccountPermissions permissionsInstance = StorageAdminManagementClient.ParseWacAccountPermissions(((string)permissionsValue));
                                            propertiesInstance.Permissions = permissionsInstance;
                                        }
                                        
                                        JToken accountIdValue = propertiesValue["accountId"];
                                        if (accountIdValue != null && accountIdValue.Type != JTokenType.Null)
                                        {
                                            ulong accountIdInstance = ((ulong)accountIdValue);
                                            propertiesInstance.AccountId = accountIdInstance;
                                        }
                                        
                                        JToken wacInternalStateValue = propertiesValue["wacInternalState"];
                                        if (wacInternalStateValue != null && wacInternalStateValue.Type != JTokenType.Null)
                                        {
                                            WacAccountStates wacInternalStateInstance = StorageAdminManagementClient.ParseWacAccountStates(((string)wacInternalStateValue));
                                            propertiesInstance.WacInternalState = wacInternalStateInstance;
                                        }
                                        
                                        JToken idValue = propertiesValue["id"];
                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                        {
                                            string idInstance = ((string)idValue);
                                            propertiesInstance.Id = idInstance;
                                        }
                                        
                                        JToken nameValue = propertiesValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            propertiesInstance.Name = nameInstance;
                                        }
                                        
                                        JToken typeValue2 = propertiesValue["type"];
                                        if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                        {
                                            string typeInstance2 = ((string)typeValue2);
                                            propertiesInstance.Type = typeInstance2;
                                        }
                                        
                                        JToken locationValue = propertiesValue["location"];
                                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                                        {
                                            string locationInstance = ((string)locationValue);
                                            propertiesInstance.Location = locationInstance;
                                        }
                                        
                                        JToken tagsSequenceElement = ((JToken)propertiesValue["tags"]);
                                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property2 in tagsSequenceElement)
                                            {
                                                string tagsKey = ((string)property2.Name);
                                                string tagsValue = ((string)property2.Value);
                                                propertiesInstance.Tags.Add(tagsKey, tagsValue);
                                            }
                                        }
                                    }
                                    
                                    JToken tenantSubscriptionIdValue2 = valueValue["tenantSubscriptionId"];
                                    if (tenantSubscriptionIdValue2 != null && tenantSubscriptionIdValue2.Type != JTokenType.Null)
                                    {
                                        Guid tenantSubscriptionIdInstance2 = Guid.Parse(((string)tenantSubscriptionIdValue2));
                                        storageAccountModelInstance.TenantSubscriptionId = tenantSubscriptionIdInstance2;
                                    }
                                    
                                    JToken accountStatusFilterValue = valueValue["accountStatusFilter"];
                                    if (accountStatusFilterValue != null && accountStatusFilterValue.Type != JTokenType.Null)
                                    {
                                        StorageAccountStatusSearchFilter accountStatusFilterInstance = ((StorageAccountStatusSearchFilter)Enum.Parse(typeof(StorageAccountStatusSearchFilter), ((string)accountStatusFilterValue), true));
                                        storageAccountModelInstance.AccountStatusFilter = accountStatusFilterInstance;
                                    }
                                    
                                    JToken idValue2 = valueValue["id"];
                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                    {
                                        string idInstance2 = ((string)idValue2);
                                        storageAccountModelInstance.Id = idInstance2;
                                    }
                                    
                                    JToken nameValue2 = valueValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        storageAccountModelInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken typeValue3 = valueValue["type"];
                                    if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                    {
                                        string typeInstance3 = ((string)typeValue3);
                                        storageAccountModelInstance.Type = typeInstance3;
                                    }
                                    
                                    JToken locationValue2 = valueValue["location"];
                                    if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                    {
                                        string locationInstance2 = ((string)locationValue2);
                                        storageAccountModelInstance.Location = locationInstance2;
                                    }
                                    
                                    JToken tagsSequenceElement2 = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property3 in tagsSequenceElement2)
                                        {
                                            string tagsKey2 = ((string)property3.Name);
                                            string tagsValue2 = ((string)property3.Value);
                                            storageAccountModelInstance.Tags.Add(tagsKey2, tagsValue2);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='tenantSubscriptionId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='tenantResourceGroup'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<StorageAccountSyncResponse> SyncAsync(string tenantSubscriptionId, string tenantResourceGroup, StorageAccountSyncRequest parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (tenantSubscriptionId == null)
            {
                throw new ArgumentNullException("tenantSubscriptionId");
            }
            if (tenantResourceGroup == null)
            {
                throw new ArgumentNullException("tenantResourceGroup");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("tenantSubscriptionId", tenantSubscriptionId);
                tracingParameters.Add("tenantResourceGroup", tenantResourceGroup);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "SyncAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/Microsoft.Resources.Admin/subscriptions/";
            url = url + Uri.EscapeDataString(tenantSubscriptionId);
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(tenantResourceGroup);
            url = url + "/SynchronizeResources";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject storageAccountSyncRequestValue = new JObject();
                requestDoc = storageAccountSyncRequestValue;
                
                if (parameters.ApiVersion != null)
                {
                    storageAccountSyncRequestValue["apiVersion"] = parameters.ApiVersion;
                }
                
                if (parameters.ResourceLocation != null)
                {
                    storageAccountSyncRequestValue["resourceLocation"] = parameters.ResourceLocation;
                }
                
                if (parameters.TargetOperaton != null)
                {
                    storageAccountSyncRequestValue["targetOperation"] = parameters.TargetOperaton;
                }
                
                if (parameters.Id != null)
                {
                    storageAccountSyncRequestValue["id"] = parameters.Id;
                }
                
                if (parameters.Name != null)
                {
                    storageAccountSyncRequestValue["name"] = parameters.Name;
                }
                
                if (parameters.Type != null)
                {
                    storageAccountSyncRequestValue["type"] = parameters.Type;
                }
                
                if (parameters.Location != null)
                {
                    storageAccountSyncRequestValue["location"] = parameters.Location;
                }
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    storageAccountSyncRequestValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    StorageAccountSyncResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new StorageAccountSyncResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken correlationIdValue = responseDoc["correlationId"];
                            if (correlationIdValue != null && correlationIdValue.Type != JTokenType.Null)
                            {
                                string correlationIdInstance = ((string)correlationIdValue);
                                result.CorrelationId = correlationIdInstance;
                            }
                            
                            JToken frontdoorLocationValue = responseDoc["frontdoorLocation"];
                            if (frontdoorLocationValue != null && frontdoorLocationValue.Type != JTokenType.Null)
                            {
                                string frontdoorLocationInstance = ((string)frontdoorLocationValue);
                                result.FrontdoorLocation = frontdoorLocationInstance;
                            }
                            
                            JToken timestampValue = responseDoc["timestamp"];
                            if (timestampValue != null && timestampValue.Type != JTokenType.Null)
                            {
                                string timestampInstance = ((string)timestampValue);
                                result.Timestamp = timestampInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                result.Message = messageInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='versionedAccountName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='undeleteParam'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> UndeleteAsync(string resourceGroupName, string farmId, string versionedAccountName, StorageAccountUndeleteParameters undeleteParam, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (versionedAccountName == null)
            {
                throw new ArgumentNullException("versionedAccountName");
            }
            if (undeleteParam == null)
            {
                throw new ArgumentNullException("undeleteParam");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("versionedAccountName", versionedAccountName);
                tracingParameters.Add("undeleteParam", undeleteParam);
                TracingAdapter.Enter(invocationId, this, "UndeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/storageaccounts/";
            url = url + Uri.EscapeDataString(versionedAccountName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("action=undelete");
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject storageAccountUndeleteParametersValue = new JObject();
                requestDoc = storageAccountUndeleteParametersValue;
                
                if (undeleteParam.NewAccountName != null)
                {
                    storageAccountUndeleteParametersValue["newAccountName"] = undeleteParam.NewAccountName;
                }
                
                if (undeleteParam.Id != null)
                {
                    storageAccountUndeleteParametersValue["id"] = undeleteParam.Id;
                }
                
                if (undeleteParam.Name != null)
                {
                    storageAccountUndeleteParametersValue["name"] = undeleteParam.Name;
                }
                
                if (undeleteParam.Type != null)
                {
                    storageAccountUndeleteParametersValue["type"] = undeleteParam.Type;
                }
                
                if (undeleteParam.Location != null)
                {
                    storageAccountUndeleteParametersValue["location"] = undeleteParam.Location;
                }
                
                if (undeleteParam.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in undeleteParam.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    storageAccountUndeleteParametersValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class TableFrontendInstanceOperationsExtensions
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse BeginRestarting(this ITableFrontendInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableFrontendInstanceOperations)s).BeginRestartingAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> BeginRestartingAsync(this ITableFrontendInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.BeginRestartingAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static TableFrontRoleInstanceGetResponse Get(this ITableFrontendInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableFrontendInstanceOperations)s).GetAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<TableFrontRoleInstanceGetResponse> GetAsync(this ITableFrontendInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.GetAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricDefinitionsResult GetMetricDefinitions(this ITableFrontendInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableFrontendInstanceOperations)s).GetMetricDefinitionsAsync(resourceGroupName, farmId, instanceId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(this ITableFrontendInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return operations.GetMetricDefinitionsAsync(resourceGroupName, farmId, instanceId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricsResult GetMetrics(this ITableFrontendInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableFrontendInstanceOperations)s).GetMetricsAsync(resourceGroupName, farmId, instanceId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricsResult> GetMetricsAsync(this ITableFrontendInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return operations.GetMetricsAsync(resourceGroupName, farmId, instanceId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static TableFrontEndRoleInstanceListResponse List(this ITableFrontendInstanceOperations operations, string resourceGroupName, string farmId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableFrontendInstanceOperations)s).ListAsync(resourceGroupName, farmId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<TableFrontEndRoleInstanceListResponse> ListAsync(this ITableFrontendInstanceOperations operations, string resourceGroupName, string farmId)
        {
            return operations.ListAsync(resourceGroupName, farmId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Restart(this ITableFrontendInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableFrontendInstanceOperations)s).RestartAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> RestartAsync(this ITableFrontendInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.RestartAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse SettingsPullNow(this ITableFrontendInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableFrontendInstanceOperations)s).SettingsPullNowAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableFrontendInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> SettingsPullNowAsync(this ITableFrontendInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.SettingsPullNowAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    public partial interface ITableFrontendInstanceOperations
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        Task<LongRunningOperationResponse> BeginRestartingAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<TableFrontRoleInstanceGetResponse> GetAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<TableFrontEndRoleInstanceListResponse> ListAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> RestartAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> SettingsPullNowAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class TableFrontendInstanceOperations : IServiceOperations<StorageAdminManagementClient>, ITableFrontendInstanceOperations
    {
        /// <summary>
        /// Initializes a new instance of the TableFrontendInstanceOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal TableFrontendInstanceOperations(StorageAdminManagementClient client)
        {
            this._client = client;
        }
        
        private StorageAdminManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.StorageAdminManagementClient.
        /// </summary>
        public StorageAdminManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginRestartingAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "BeginRestartingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/tablefrontendinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/restart";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict || statusCode == HttpStatusCode.NotFound || statusCode == HttpStatusCode.MethodNotAllowed || statusCode == HttpStatusCode.Forbidden)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<TableFrontRoleInstanceGetResponse> GetAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/tablefrontendinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TableFrontRoleInstanceGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TableFrontRoleInstanceGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            TableFrontEndRoleInstanceModel roleInstanceInstance = new TableFrontEndRoleInstanceModel();
                            result.RoleInstance = roleInstanceInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                TableFrontEndRoleInstance propertiesInstance = new TableFrontEndRoleInstance();
                                roleInstanceInstance.Properties = propertiesInstance;
                                
                                JToken settingsValue = propertiesValue["settings"];
                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                {
                                    TableFrontEndRoleInstanceEffectiveSettings settingsInstance = new TableFrontEndRoleInstanceEffectiveSettings();
                                    propertiesInstance.Settings = settingsInstance;
                                    
                                    JToken frontEndHttpListenPortValue = settingsValue["frontEndHttpListenPort"];
                                    if (frontEndHttpListenPortValue != null && frontEndHttpListenPortValue.Type != JTokenType.Null)
                                    {
                                        int frontEndHttpListenPortInstance = ((int)frontEndHttpListenPortValue);
                                        settingsInstance.FrontEndHttpListenPort = frontEndHttpListenPortInstance;
                                    }
                                    
                                    JToken frontEndHttpsListenPortValue = settingsValue["frontEndHttpsListenPort"];
                                    if (frontEndHttpsListenPortValue != null && frontEndHttpsListenPortValue.Type != JTokenType.Null)
                                    {
                                        int frontEndHttpsListenPortInstance = ((int)frontEndHttpsListenPortValue);
                                        settingsInstance.FrontEndHttpsListenPort = frontEndHttpsListenPortInstance;
                                    }
                                    
                                    JToken frontEndCallbackThreadsCountValue = settingsValue["frontEndCallbackThreadsCount"];
                                    if (frontEndCallbackThreadsCountValue != null && frontEndCallbackThreadsCountValue.Type != JTokenType.Null)
                                    {
                                        int frontEndCallbackThreadsCountInstance = ((int)frontEndCallbackThreadsCountValue);
                                        settingsInstance.FrontEndCallbackThreadsCount = frontEndCallbackThreadsCountInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingEnabledValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingEnabled"];
                                    if (frontEndCpuBasedKeepAliveThrottlingEnabledValue != null && frontEndCpuBasedKeepAliveThrottlingEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndCpuBasedKeepAliveThrottlingEnabledInstance = ((bool)frontEndCpuBasedKeepAliveThrottlingEnabledValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingEnabled = frontEndCpuBasedKeepAliveThrottlingEnabledInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold"];
                                    if (frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue != null && frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue.Type != JTokenType.Null)
                                    {
                                        double frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdInstance = ((double)frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold = frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle"];
                                    if (frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue != null && frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue.Type != JTokenType.Null)
                                    {
                                        double frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleInstance = ((double)frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle = frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds"];
                                    if (frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue != null && frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsInstance = ((int)frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds = frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsInstance;
                                    }
                                    
                                    JToken frontEndMemoryThrottlingEnabledValue = settingsValue["frontEndMemoryThrottlingEnabled"];
                                    if (frontEndMemoryThrottlingEnabledValue != null && frontEndMemoryThrottlingEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndMemoryThrottlingEnabledInstance = ((bool)frontEndMemoryThrottlingEnabledValue);
                                        settingsInstance.FrontEndMemoryThrottlingEnabled = frontEndMemoryThrottlingEnabledInstance;
                                    }
                                    
                                    JToken frontEndMaxMillisecondsBetweenMemorySamplesValue = settingsValue["frontEndMaxMillisecondsBetweenMemorySamples"];
                                    if (frontEndMaxMillisecondsBetweenMemorySamplesValue != null && frontEndMaxMillisecondsBetweenMemorySamplesValue.Type != JTokenType.Null)
                                    {
                                        int frontEndMaxMillisecondsBetweenMemorySamplesInstance = ((int)frontEndMaxMillisecondsBetweenMemorySamplesValue);
                                        settingsInstance.FrontEndMaxMillisecondsBetweenMemorySamples = frontEndMaxMillisecondsBetweenMemorySamplesInstance;
                                    }
                                    
                                    JToken frontEndMemoryThrottleThresholdSettingsValue = settingsValue["frontEndMemoryThrottleThresholdSettings"];
                                    if (frontEndMemoryThrottleThresholdSettingsValue != null && frontEndMemoryThrottleThresholdSettingsValue.Type != JTokenType.Null)
                                    {
                                        string frontEndMemoryThrottleThresholdSettingsInstance = ((string)frontEndMemoryThrottleThresholdSettingsValue);
                                        settingsInstance.FrontEndMemoryThrottleThresholdSettings = frontEndMemoryThrottleThresholdSettingsInstance;
                                    }
                                    
                                    JToken frontEndMinThreadPoolThreadsValue = settingsValue["frontEndMinThreadPoolThreads"];
                                    if (frontEndMinThreadPoolThreadsValue != null && frontEndMinThreadPoolThreadsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndMinThreadPoolThreadsInstance = ((int)frontEndMinThreadPoolThreadsValue);
                                        settingsInstance.FrontEndMinimumThreadPoolThreads = frontEndMinThreadPoolThreadsInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue = settingsValue["frontEndThreadPoolBasedKeepAliveIOCompletionThreshold"];
                                    if (frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue != null && frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveIOCompletionThresholdInstance = ((int)frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveIOCompletionThreshold = frontEndThreadPoolBasedKeepAliveIOCompletionThresholdInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue = settingsValue["frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold"];
                                    if (frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue != null && frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdInstance = ((int)frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveWorkerThreadThreshold = frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue = settingsValue["frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds"];
                                    if (frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue != null && frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsInstance = ((int)frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds = frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAlivePercentageValue = settingsValue["frontEndThreadPoolBasedKeepAlivePercentage"];
                                    if (frontEndThreadPoolBasedKeepAlivePercentageValue != null && frontEndThreadPoolBasedKeepAlivePercentageValue.Type != JTokenType.Null)
                                    {
                                        double frontEndThreadPoolBasedKeepAlivePercentageInstance = ((double)frontEndThreadPoolBasedKeepAlivePercentageValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAlivePercentage = frontEndThreadPoolBasedKeepAlivePercentageInstance;
                                    }
                                    
                                    JToken frontEndUseSlaTimeInAvailabilityValue = settingsValue["frontEndUseSlaTimeInAvailability"];
                                    if (frontEndUseSlaTimeInAvailabilityValue != null && frontEndUseSlaTimeInAvailabilityValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndUseSlaTimeInAvailabilityInstance = ((bool)frontEndUseSlaTimeInAvailabilityValue);
                                        settingsInstance.FrontEndUseSlaTimeInAvailability = frontEndUseSlaTimeInAvailabilityInstance;
                                    }
                                    
                                    JToken settingsPollingIntervalInSecondsValue = settingsValue["settingsPollingIntervalInSeconds"];
                                    if (settingsPollingIntervalInSecondsValue != null && settingsPollingIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int settingsPollingIntervalInSecondsInstance = ((int)settingsPollingIntervalInSecondsValue);
                                        settingsInstance.SettingsPollingIntervalInSeconds = settingsPollingIntervalInSecondsInstance;
                                    }
                                    
                                    JToken settingsTimestampValue = settingsValue["settingsTimestamp"];
                                    if (settingsTimestampValue != null && settingsTimestampValue.Type != JTokenType.Null)
                                    {
                                        string settingsTimestampInstance = ((string)settingsTimestampValue);
                                        settingsInstance.SettingsTimestamp = settingsTimestampInstance;
                                    }
                                }
                                
                                JToken roleIdentifierValue = propertiesValue["roleIdentifier"];
                                if (roleIdentifierValue != null && roleIdentifierValue.Type != JTokenType.Null)
                                {
                                    string roleIdentifierInstance = ((string)roleIdentifierValue);
                                    propertiesInstance.RoleIdentifier = roleIdentifierInstance;
                                }
                                
                                JToken versionValue = propertiesValue["version"];
                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                {
                                    string versionInstance = ((string)versionValue);
                                    propertiesInstance.Version = versionInstance;
                                }
                                
                                JToken statusValue = propertiesValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    RoleInstanceStatus statusInstance = ((RoleInstanceStatus)Enum.Parse(typeof(RoleInstanceStatus), ((string)statusValue), true));
                                    propertiesInstance.Status = statusInstance;
                                }
                                
                                JToken healthStatusValue = propertiesValue["healthStatus"];
                                if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                {
                                    HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                    propertiesInstance.HealthStatus = healthStatusInstance;
                                }
                                
                                JToken nodeUriValue = propertiesValue["nodeUri"];
                                if (nodeUriValue != null && nodeUriValue.Type != JTokenType.Null)
                                {
                                    string nodeUriInstance = ((string)nodeUriValue);
                                    propertiesInstance.NodeUri = nodeUriInstance;
                                }
                                
                                JToken historyInfosArray = propertiesValue["historyInfos"];
                                if (historyInfosArray != null && historyInfosArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken historyInfosValue in ((JArray)historyInfosArray))
                                    {
                                        RoleInstanceHistoricEntry roleInstanceHistoricEntryInstance = new RoleInstanceHistoricEntry();
                                        propertiesInstance.HistoryInfos.Add(roleInstanceHistoricEntryInstance);
                                        
                                        JToken startTimeValue = historyInfosValue["startTime"];
                                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime startTimeInstance = ((DateTime)startTimeValue);
                                            roleInstanceHistoricEntryInstance.StartTime = startTimeInstance;
                                        }
                                        
                                        JToken endTimeValue = historyInfosValue["endTime"];
                                        if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime endTimeInstance = ((DateTime)endTimeValue);
                                            roleInstanceHistoricEntryInstance.EndTime = endTimeInstance;
                                        }
                                        
                                        JToken durationValue = historyInfosValue["duration"];
                                        if (durationValue != null && durationValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan durationInstance = XmlConvert.ToTimeSpan(((string)durationValue));
                                            roleInstanceHistoricEntryInstance.Duration = durationInstance;
                                        }
                                        
                                        JToken roleIdentifierValue2 = historyInfosValue["roleIdentifier"];
                                        if (roleIdentifierValue2 != null && roleIdentifierValue2.Type != JTokenType.Null)
                                        {
                                            string roleIdentifierInstance2 = ((string)roleIdentifierValue2);
                                            roleInstanceHistoricEntryInstance.RoleIdentifier = roleIdentifierInstance2;
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                roleInstanceInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                roleInstanceInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                roleInstanceInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                roleInstanceInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    roleInstanceInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricDefinitionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/tablefrontendinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/metricdefinitions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricDefinitionsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricDefinitionsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    MetricDefinition metricDefinitionInstance = new MetricDefinition();
                                    result.Value.Add(metricDefinitionInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricDefinitionInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken unitValue = valueValue["unit"];
                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit unitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)unitValue), true));
                                        metricDefinitionInstance.Unit = unitInstance;
                                    }
                                    
                                    JToken primaryAggregationTypeValue = valueValue["primaryAggregationType"];
                                    if (primaryAggregationTypeValue != null && primaryAggregationTypeValue.Type != JTokenType.Null)
                                    {
                                        MetricPrimaryAggregationType primaryAggregationTypeInstance = ((MetricPrimaryAggregationType)Enum.Parse(typeof(MetricPrimaryAggregationType), ((string)primaryAggregationTypeValue), true));
                                        metricDefinitionInstance.PrimaryAggregationType = primaryAggregationTypeInstance;
                                    }
                                    
                                    JToken metricAvailabilitiesArray = valueValue["metricAvailabilities"];
                                    if (metricAvailabilitiesArray != null && metricAvailabilitiesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricAvailabilitiesValue in ((JArray)metricAvailabilitiesArray))
                                        {
                                            MetricAvailability metricAvailabilityInstance = new MetricAvailability();
                                            metricDefinitionInstance.MetricAvailabilities.Add(metricAvailabilityInstance);
                                            
                                            JToken timeGrainValue = metricAvailabilitiesValue["timeGrain"];
                                            if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                                metricAvailabilityInstance.TimeGrain = timeGrainInstance;
                                            }
                                            
                                            JToken retentionValue = metricAvailabilitiesValue["retention"];
                                            if (retentionValue != null && retentionValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan retentionInstance = XmlConvert.ToTimeSpan(((string)retentionValue));
                                                metricAvailabilityInstance.Retention = retentionInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/tablefrontendinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/metrics";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Metric metricInstance = new Metric();
                                    result.Metrics.Add(metricInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken metricUnitValue = valueValue["metricUnit"];
                                    if (metricUnitValue != null && metricUnitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit metricUnitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)metricUnitValue), true));
                                        metricInstance.MetricUnit = metricUnitInstance;
                                    }
                                    
                                    JToken timeGrainValue = valueValue["timeGrain"];
                                    if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                        metricInstance.TimeGrain = timeGrainInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        metricInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = valueValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        metricInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken metricValuesArray = valueValue["metricValues"];
                                    if (metricValuesArray != null && metricValuesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricValuesValue in ((JArray)metricValuesArray))
                                        {
                                            MetricValue metricValueInstance = new MetricValue();
                                            metricInstance.MetricValues.Add(metricValueInstance);
                                            
                                            JToken timeStampValue = metricValuesValue["timeStamp"];
                                            if (timeStampValue != null && timeStampValue.Type != JTokenType.Null)
                                            {
                                                DateTime timeStampInstance = ((DateTime)timeStampValue);
                                                metricValueInstance.TimeStamp = timeStampInstance;
                                            }
                                            
                                            JToken averageValue = metricValuesValue["average"];
                                            if (averageValue != null && averageValue.Type != JTokenType.Null)
                                            {
                                                double averageInstance = ((double)averageValue);
                                                metricValueInstance.Average = averageInstance;
                                            }
                                            
                                            JToken minimumValue = metricValuesValue["minimum"];
                                            if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                            {
                                                double minimumInstance = ((double)minimumValue);
                                                metricValueInstance.Minimum = minimumInstance;
                                            }
                                            
                                            JToken maximumValue = metricValuesValue["maximum"];
                                            if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                            {
                                                double maximumInstance = ((double)maximumValue);
                                                metricValueInstance.Maximum = maximumInstance;
                                            }
                                            
                                            JToken totalValue = metricValuesValue["total"];
                                            if (totalValue != null && totalValue.Type != JTokenType.Null)
                                            {
                                                double totalInstance = ((double)totalValue);
                                                metricValueInstance.Total = totalInstance;
                                            }
                                            
                                            JToken countValue = metricValuesValue["count"];
                                            if (countValue != null && countValue.Type != JTokenType.Null)
                                            {
                                                int countInstance = ((int)countValue);
                                                metricValueInstance.Count = countInstance;
                                            }
                                            
                                            JToken propertiesValue = metricValuesValue["properties"];
                                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                            {
                                                string propertiesInstance = propertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                metricValueInstance.Properties = propertiesInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<TableFrontEndRoleInstanceListResponse> ListAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/tablefrontendinstances";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TableFrontEndRoleInstanceListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TableFrontEndRoleInstanceListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken roleInstancesArray = responseDoc;
                            if (roleInstancesArray != null && roleInstancesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken roleInstancesValue in ((JArray)roleInstancesArray))
                                {
                                    TableFrontEndRoleInstanceModel tableFrontEndRoleInstanceModelInstance = new TableFrontEndRoleInstanceModel();
                                    result.RoleInstances.Add(tableFrontEndRoleInstanceModelInstance);
                                    
                                    JToken propertiesValue = roleInstancesValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        TableFrontEndRoleInstance propertiesInstance = new TableFrontEndRoleInstance();
                                        tableFrontEndRoleInstanceModelInstance.Properties = propertiesInstance;
                                        
                                        JToken settingsValue = propertiesValue["settings"];
                                        if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                        {
                                            TableFrontEndRoleInstanceEffectiveSettings settingsInstance = new TableFrontEndRoleInstanceEffectiveSettings();
                                            propertiesInstance.Settings = settingsInstance;
                                            
                                            JToken frontEndHttpListenPortValue = settingsValue["frontEndHttpListenPort"];
                                            if (frontEndHttpListenPortValue != null && frontEndHttpListenPortValue.Type != JTokenType.Null)
                                            {
                                                int frontEndHttpListenPortInstance = ((int)frontEndHttpListenPortValue);
                                                settingsInstance.FrontEndHttpListenPort = frontEndHttpListenPortInstance;
                                            }
                                            
                                            JToken frontEndHttpsListenPortValue = settingsValue["frontEndHttpsListenPort"];
                                            if (frontEndHttpsListenPortValue != null && frontEndHttpsListenPortValue.Type != JTokenType.Null)
                                            {
                                                int frontEndHttpsListenPortInstance = ((int)frontEndHttpsListenPortValue);
                                                settingsInstance.FrontEndHttpsListenPort = frontEndHttpsListenPortInstance;
                                            }
                                            
                                            JToken frontEndCallbackThreadsCountValue = settingsValue["frontEndCallbackThreadsCount"];
                                            if (frontEndCallbackThreadsCountValue != null && frontEndCallbackThreadsCountValue.Type != JTokenType.Null)
                                            {
                                                int frontEndCallbackThreadsCountInstance = ((int)frontEndCallbackThreadsCountValue);
                                                settingsInstance.FrontEndCallbackThreadsCount = frontEndCallbackThreadsCountInstance;
                                            }
                                            
                                            JToken frontEndCpuBasedKeepAliveThrottlingEnabledValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingEnabled"];
                                            if (frontEndCpuBasedKeepAliveThrottlingEnabledValue != null && frontEndCpuBasedKeepAliveThrottlingEnabledValue.Type != JTokenType.Null)
                                            {
                                                bool frontEndCpuBasedKeepAliveThrottlingEnabledInstance = ((bool)frontEndCpuBasedKeepAliveThrottlingEnabledValue);
                                                settingsInstance.FrontEndCpuBasedKeepAliveThrottlingEnabled = frontEndCpuBasedKeepAliveThrottlingEnabledInstance;
                                            }
                                            
                                            JToken frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold"];
                                            if (frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue != null && frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue.Type != JTokenType.Null)
                                            {
                                                double frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdInstance = ((double)frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue);
                                                settingsInstance.FrontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold = frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdInstance;
                                            }
                                            
                                            JToken frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle"];
                                            if (frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue != null && frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue.Type != JTokenType.Null)
                                            {
                                                double frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleInstance = ((double)frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue);
                                                settingsInstance.FrontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle = frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleInstance;
                                            }
                                            
                                            JToken frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds"];
                                            if (frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue != null && frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue.Type != JTokenType.Null)
                                            {
                                                int frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsInstance = ((int)frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue);
                                                settingsInstance.FrontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds = frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsInstance;
                                            }
                                            
                                            JToken frontEndMemoryThrottlingEnabledValue = settingsValue["frontEndMemoryThrottlingEnabled"];
                                            if (frontEndMemoryThrottlingEnabledValue != null && frontEndMemoryThrottlingEnabledValue.Type != JTokenType.Null)
                                            {
                                                bool frontEndMemoryThrottlingEnabledInstance = ((bool)frontEndMemoryThrottlingEnabledValue);
                                                settingsInstance.FrontEndMemoryThrottlingEnabled = frontEndMemoryThrottlingEnabledInstance;
                                            }
                                            
                                            JToken frontEndMaxMillisecondsBetweenMemorySamplesValue = settingsValue["frontEndMaxMillisecondsBetweenMemorySamples"];
                                            if (frontEndMaxMillisecondsBetweenMemorySamplesValue != null && frontEndMaxMillisecondsBetweenMemorySamplesValue.Type != JTokenType.Null)
                                            {
                                                int frontEndMaxMillisecondsBetweenMemorySamplesInstance = ((int)frontEndMaxMillisecondsBetweenMemorySamplesValue);
                                                settingsInstance.FrontEndMaxMillisecondsBetweenMemorySamples = frontEndMaxMillisecondsBetweenMemorySamplesInstance;
                                            }
                                            
                                            JToken frontEndMemoryThrottleThresholdSettingsValue = settingsValue["frontEndMemoryThrottleThresholdSettings"];
                                            if (frontEndMemoryThrottleThresholdSettingsValue != null && frontEndMemoryThrottleThresholdSettingsValue.Type != JTokenType.Null)
                                            {
                                                string frontEndMemoryThrottleThresholdSettingsInstance = ((string)frontEndMemoryThrottleThresholdSettingsValue);
                                                settingsInstance.FrontEndMemoryThrottleThresholdSettings = frontEndMemoryThrottleThresholdSettingsInstance;
                                            }
                                            
                                            JToken frontEndMinThreadPoolThreadsValue = settingsValue["frontEndMinThreadPoolThreads"];
                                            if (frontEndMinThreadPoolThreadsValue != null && frontEndMinThreadPoolThreadsValue.Type != JTokenType.Null)
                                            {
                                                int frontEndMinThreadPoolThreadsInstance = ((int)frontEndMinThreadPoolThreadsValue);
                                                settingsInstance.FrontEndMinimumThreadPoolThreads = frontEndMinThreadPoolThreadsInstance;
                                            }
                                            
                                            JToken frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue = settingsValue["frontEndThreadPoolBasedKeepAliveIOCompletionThreshold"];
                                            if (frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue != null && frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue.Type != JTokenType.Null)
                                            {
                                                int frontEndThreadPoolBasedKeepAliveIOCompletionThresholdInstance = ((int)frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue);
                                                settingsInstance.FrontEndThreadPoolBasedKeepAliveIOCompletionThreshold = frontEndThreadPoolBasedKeepAliveIOCompletionThresholdInstance;
                                            }
                                            
                                            JToken frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue = settingsValue["frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold"];
                                            if (frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue != null && frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue.Type != JTokenType.Null)
                                            {
                                                int frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdInstance = ((int)frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue);
                                                settingsInstance.FrontEndThreadPoolBasedKeepAliveWorkerThreadThreshold = frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdInstance;
                                            }
                                            
                                            JToken frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue = settingsValue["frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds"];
                                            if (frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue != null && frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue.Type != JTokenType.Null)
                                            {
                                                int frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsInstance = ((int)frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue);
                                                settingsInstance.FrontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds = frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsInstance;
                                            }
                                            
                                            JToken frontEndThreadPoolBasedKeepAlivePercentageValue = settingsValue["frontEndThreadPoolBasedKeepAlivePercentage"];
                                            if (frontEndThreadPoolBasedKeepAlivePercentageValue != null && frontEndThreadPoolBasedKeepAlivePercentageValue.Type != JTokenType.Null)
                                            {
                                                double frontEndThreadPoolBasedKeepAlivePercentageInstance = ((double)frontEndThreadPoolBasedKeepAlivePercentageValue);
                                                settingsInstance.FrontEndThreadPoolBasedKeepAlivePercentage = frontEndThreadPoolBasedKeepAlivePercentageInstance;
                                            }
                                            
                                            JToken frontEndUseSlaTimeInAvailabilityValue = settingsValue["frontEndUseSlaTimeInAvailability"];
                                            if (frontEndUseSlaTimeInAvailabilityValue != null && frontEndUseSlaTimeInAvailabilityValue.Type != JTokenType.Null)
                                            {
                                                bool frontEndUseSlaTimeInAvailabilityInstance = ((bool)frontEndUseSlaTimeInAvailabilityValue);
                                                settingsInstance.FrontEndUseSlaTimeInAvailability = frontEndUseSlaTimeInAvailabilityInstance;
                                            }
                                            
                                            JToken settingsPollingIntervalInSecondsValue = settingsValue["settingsPollingIntervalInSeconds"];
                                            if (settingsPollingIntervalInSecondsValue != null && settingsPollingIntervalInSecondsValue.Type != JTokenType.Null)
                                            {
                                                int settingsPollingIntervalInSecondsInstance = ((int)settingsPollingIntervalInSecondsValue);
                                                settingsInstance.SettingsPollingIntervalInSeconds = settingsPollingIntervalInSecondsInstance;
                                            }
                                            
                                            JToken settingsTimestampValue = settingsValue["settingsTimestamp"];
                                            if (settingsTimestampValue != null && settingsTimestampValue.Type != JTokenType.Null)
                                            {
                                                string settingsTimestampInstance = ((string)settingsTimestampValue);
                                                settingsInstance.SettingsTimestamp = settingsTimestampInstance;
                                            }
                                        }
                                        
                                        JToken roleIdentifierValue = propertiesValue["roleIdentifier"];
                                        if (roleIdentifierValue != null && roleIdentifierValue.Type != JTokenType.Null)
                                        {
                                            string roleIdentifierInstance = ((string)roleIdentifierValue);
                                            propertiesInstance.RoleIdentifier = roleIdentifierInstance;
                                        }
                                        
                                        JToken versionValue = propertiesValue["version"];
                                        if (versionValue != null && versionValue.Type != JTokenType.Null)
                                        {
                                            string versionInstance = ((string)versionValue);
                                            propertiesInstance.Version = versionInstance;
                                        }
                                        
                                        JToken statusValue = propertiesValue["status"];
                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                        {
                                            RoleInstanceStatus statusInstance = ((RoleInstanceStatus)Enum.Parse(typeof(RoleInstanceStatus), ((string)statusValue), true));
                                            propertiesInstance.Status = statusInstance;
                                        }
                                        
                                        JToken healthStatusValue = propertiesValue["healthStatus"];
                                        if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                        {
                                            HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                            propertiesInstance.HealthStatus = healthStatusInstance;
                                        }
                                        
                                        JToken nodeUriValue = propertiesValue["nodeUri"];
                                        if (nodeUriValue != null && nodeUriValue.Type != JTokenType.Null)
                                        {
                                            string nodeUriInstance = ((string)nodeUriValue);
                                            propertiesInstance.NodeUri = nodeUriInstance;
                                        }
                                        
                                        JToken historyInfosArray = propertiesValue["historyInfos"];
                                        if (historyInfosArray != null && historyInfosArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken historyInfosValue in ((JArray)historyInfosArray))
                                            {
                                                RoleInstanceHistoricEntry roleInstanceHistoricEntryInstance = new RoleInstanceHistoricEntry();
                                                propertiesInstance.HistoryInfos.Add(roleInstanceHistoricEntryInstance);
                                                
                                                JToken startTimeValue = historyInfosValue["startTime"];
                                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                {
                                                    DateTime startTimeInstance = ((DateTime)startTimeValue);
                                                    roleInstanceHistoricEntryInstance.StartTime = startTimeInstance;
                                                }
                                                
                                                JToken endTimeValue = historyInfosValue["endTime"];
                                                if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                {
                                                    DateTime endTimeInstance = ((DateTime)endTimeValue);
                                                    roleInstanceHistoricEntryInstance.EndTime = endTimeInstance;
                                                }
                                                
                                                JToken durationValue = historyInfosValue["duration"];
                                                if (durationValue != null && durationValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan durationInstance = XmlConvert.ToTimeSpan(((string)durationValue));
                                                    roleInstanceHistoricEntryInstance.Duration = durationInstance;
                                                }
                                                
                                                JToken roleIdentifierValue2 = historyInfosValue["roleIdentifier"];
                                                if (roleIdentifierValue2 != null && roleIdentifierValue2.Type != JTokenType.Null)
                                                {
                                                    string roleIdentifierInstance2 = ((string)roleIdentifierValue2);
                                                    roleInstanceHistoricEntryInstance.RoleIdentifier = roleIdentifierInstance2;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = roleInstancesValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        tableFrontEndRoleInstanceModelInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = roleInstancesValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        tableFrontEndRoleInstanceModelInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = roleInstancesValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        tableFrontEndRoleInstanceModelInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = roleInstancesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        tableFrontEndRoleInstanceModelInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)roleInstancesValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            tableFrontEndRoleInstanceModelInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> RestartAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            StorageAdminManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "RestartAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.TableFrontendInstances.BeginRestartingAsync(resourceGroupName, farmId, instanceId, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> SettingsPullNowAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "SettingsPullNowAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/tablefrontendinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/settingspullnow";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class TableMasterInstanceOperationsExtensions
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableMasterInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse BeginRestarting(this ITableMasterInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableMasterInstanceOperations)s).BeginRestartingAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableMasterInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> BeginRestartingAsync(this ITableMasterInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.BeginRestartingAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableMasterInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static TableMasterRoleInstanceGetResponse Get(this ITableMasterInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableMasterInstanceOperations)s).GetAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableMasterInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<TableMasterRoleInstanceGetResponse> GetAsync(this ITableMasterInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.GetAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableMasterInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricDefinitionsResult GetMetricDefinitions(this ITableMasterInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableMasterInstanceOperations)s).GetMetricDefinitionsAsync(resourceGroupName, farmId, instanceId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableMasterInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(this ITableMasterInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return operations.GetMetricDefinitionsAsync(resourceGroupName, farmId, instanceId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableMasterInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricsResult GetMetrics(this ITableMasterInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableMasterInstanceOperations)s).GetMetricsAsync(resourceGroupName, farmId, instanceId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableMasterInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricsResult> GetMetricsAsync(this ITableMasterInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return operations.GetMetricsAsync(resourceGroupName, farmId, instanceId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableMasterInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static TableMasterRoleInstanceListResponse List(this ITableMasterInstanceOperations operations, string resourceGroupName, string farmId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableMasterInstanceOperations)s).ListAsync(resourceGroupName, farmId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableMasterInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<TableMasterRoleInstanceListResponse> ListAsync(this ITableMasterInstanceOperations operations, string resourceGroupName, string farmId)
        {
            return operations.ListAsync(resourceGroupName, farmId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableMasterInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Restart(this ITableMasterInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableMasterInstanceOperations)s).RestartAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableMasterInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> RestartAsync(this ITableMasterInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.RestartAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableMasterInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse SettingsPullNow(this ITableMasterInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableMasterInstanceOperations)s).SettingsPullNowAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableMasterInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> SettingsPullNowAsync(this ITableMasterInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.SettingsPullNowAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    public partial interface ITableMasterInstanceOperations
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        Task<LongRunningOperationResponse> BeginRestartingAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<TableMasterRoleInstanceGetResponse> GetAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<TableMasterRoleInstanceListResponse> ListAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> RestartAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> SettingsPullNowAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class TableMasterInstanceOperations : IServiceOperations<StorageAdminManagementClient>, ITableMasterInstanceOperations
    {
        /// <summary>
        /// Initializes a new instance of the TableMasterInstanceOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal TableMasterInstanceOperations(StorageAdminManagementClient client)
        {
            this._client = client;
        }
        
        private StorageAdminManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.StorageAdminManagementClient.
        /// </summary>
        public StorageAdminManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginRestartingAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "BeginRestartingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/tablemasterinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/restart";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict || statusCode == HttpStatusCode.NotFound || statusCode == HttpStatusCode.MethodNotAllowed || statusCode == HttpStatusCode.Forbidden)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<TableMasterRoleInstanceGetResponse> GetAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/tablemasterinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TableMasterRoleInstanceGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TableMasterRoleInstanceGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            TableMasterRoleInstanceModel roleInstanceInstance = new TableMasterRoleInstanceModel();
                            result.RoleInstance = roleInstanceInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                TableMasterRoleInstance propertiesInstance = new TableMasterRoleInstance();
                                roleInstanceInstance.Properties = propertiesInstance;
                                
                                JToken settingsValue = propertiesValue["settings"];
                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                {
                                    TableMasterRoleInstanceEffectiveSettings settingsInstance = new TableMasterRoleInstanceEffectiveSettings();
                                    propertiesInstance.Settings = settingsInstance;
                                    
                                    JToken tableMasterMaxCacheSizeValue = settingsValue["tableMasterMaxCacheSize"];
                                    if (tableMasterMaxCacheSizeValue != null && tableMasterMaxCacheSizeValue.Type != JTokenType.Null)
                                    {
                                        int tableMasterMaxCacheSizeInstance = ((int)tableMasterMaxCacheSizeValue);
                                        settingsInstance.TableMasterMaxCacheSize = tableMasterMaxCacheSizeInstance;
                                    }
                                    
                                    JToken tableMasterMaxConnectionsValue = settingsValue["tableMasterMaxConnections"];
                                    if (tableMasterMaxConnectionsValue != null && tableMasterMaxConnectionsValue.Type != JTokenType.Null)
                                    {
                                        int tableMasterMaxConnectionsInstance = ((int)tableMasterMaxConnectionsValue);
                                        settingsInstance.TableMasterMaxConnections = tableMasterMaxConnectionsInstance;
                                    }
                                    
                                    JToken settingsPollingIntervalInSecondsValue = settingsValue["settingsPollingIntervalInSeconds"];
                                    if (settingsPollingIntervalInSecondsValue != null && settingsPollingIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int settingsPollingIntervalInSecondsInstance = ((int)settingsPollingIntervalInSecondsValue);
                                        settingsInstance.SettingsPollingIntervalInSeconds = settingsPollingIntervalInSecondsInstance;
                                    }
                                    
                                    JToken settingsTimestampValue = settingsValue["settingsTimestamp"];
                                    if (settingsTimestampValue != null && settingsTimestampValue.Type != JTokenType.Null)
                                    {
                                        string settingsTimestampInstance = ((string)settingsTimestampValue);
                                        settingsInstance.SettingsTimestamp = settingsTimestampInstance;
                                    }
                                }
                                
                                JToken roleIdentifierValue = propertiesValue["roleIdentifier"];
                                if (roleIdentifierValue != null && roleIdentifierValue.Type != JTokenType.Null)
                                {
                                    string roleIdentifierInstance = ((string)roleIdentifierValue);
                                    propertiesInstance.RoleIdentifier = roleIdentifierInstance;
                                }
                                
                                JToken versionValue = propertiesValue["version"];
                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                {
                                    string versionInstance = ((string)versionValue);
                                    propertiesInstance.Version = versionInstance;
                                }
                                
                                JToken statusValue = propertiesValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    RoleInstanceStatus statusInstance = ((RoleInstanceStatus)Enum.Parse(typeof(RoleInstanceStatus), ((string)statusValue), true));
                                    propertiesInstance.Status = statusInstance;
                                }
                                
                                JToken healthStatusValue = propertiesValue["healthStatus"];
                                if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                {
                                    HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                    propertiesInstance.HealthStatus = healthStatusInstance;
                                }
                                
                                JToken nodeUriValue = propertiesValue["nodeUri"];
                                if (nodeUriValue != null && nodeUriValue.Type != JTokenType.Null)
                                {
                                    string nodeUriInstance = ((string)nodeUriValue);
                                    propertiesInstance.NodeUri = nodeUriInstance;
                                }
                                
                                JToken historyInfosArray = propertiesValue["historyInfos"];
                                if (historyInfosArray != null && historyInfosArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken historyInfosValue in ((JArray)historyInfosArray))
                                    {
                                        RoleInstanceHistoricEntry roleInstanceHistoricEntryInstance = new RoleInstanceHistoricEntry();
                                        propertiesInstance.HistoryInfos.Add(roleInstanceHistoricEntryInstance);
                                        
                                        JToken startTimeValue = historyInfosValue["startTime"];
                                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime startTimeInstance = ((DateTime)startTimeValue);
                                            roleInstanceHistoricEntryInstance.StartTime = startTimeInstance;
                                        }
                                        
                                        JToken endTimeValue = historyInfosValue["endTime"];
                                        if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime endTimeInstance = ((DateTime)endTimeValue);
                                            roleInstanceHistoricEntryInstance.EndTime = endTimeInstance;
                                        }
                                        
                                        JToken durationValue = historyInfosValue["duration"];
                                        if (durationValue != null && durationValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan durationInstance = XmlConvert.ToTimeSpan(((string)durationValue));
                                            roleInstanceHistoricEntryInstance.Duration = durationInstance;
                                        }
                                        
                                        JToken roleIdentifierValue2 = historyInfosValue["roleIdentifier"];
                                        if (roleIdentifierValue2 != null && roleIdentifierValue2.Type != JTokenType.Null)
                                        {
                                            string roleIdentifierInstance2 = ((string)roleIdentifierValue2);
                                            roleInstanceHistoricEntryInstance.RoleIdentifier = roleIdentifierInstance2;
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                roleInstanceInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                roleInstanceInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                roleInstanceInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                roleInstanceInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    roleInstanceInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricDefinitionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/tablemasterinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/metricdefinitions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricDefinitionsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricDefinitionsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    MetricDefinition metricDefinitionInstance = new MetricDefinition();
                                    result.Value.Add(metricDefinitionInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricDefinitionInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken unitValue = valueValue["unit"];
                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit unitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)unitValue), true));
                                        metricDefinitionInstance.Unit = unitInstance;
                                    }
                                    
                                    JToken primaryAggregationTypeValue = valueValue["primaryAggregationType"];
                                    if (primaryAggregationTypeValue != null && primaryAggregationTypeValue.Type != JTokenType.Null)
                                    {
                                        MetricPrimaryAggregationType primaryAggregationTypeInstance = ((MetricPrimaryAggregationType)Enum.Parse(typeof(MetricPrimaryAggregationType), ((string)primaryAggregationTypeValue), true));
                                        metricDefinitionInstance.PrimaryAggregationType = primaryAggregationTypeInstance;
                                    }
                                    
                                    JToken metricAvailabilitiesArray = valueValue["metricAvailabilities"];
                                    if (metricAvailabilitiesArray != null && metricAvailabilitiesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricAvailabilitiesValue in ((JArray)metricAvailabilitiesArray))
                                        {
                                            MetricAvailability metricAvailabilityInstance = new MetricAvailability();
                                            metricDefinitionInstance.MetricAvailabilities.Add(metricAvailabilityInstance);
                                            
                                            JToken timeGrainValue = metricAvailabilitiesValue["timeGrain"];
                                            if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                                metricAvailabilityInstance.TimeGrain = timeGrainInstance;
                                            }
                                            
                                            JToken retentionValue = metricAvailabilitiesValue["retention"];
                                            if (retentionValue != null && retentionValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan retentionInstance = XmlConvert.ToTimeSpan(((string)retentionValue));
                                                metricAvailabilityInstance.Retention = retentionInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/tablemasterinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/metrics";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Metric metricInstance = new Metric();
                                    result.Metrics.Add(metricInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken metricUnitValue = valueValue["metricUnit"];
                                    if (metricUnitValue != null && metricUnitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit metricUnitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)metricUnitValue), true));
                                        metricInstance.MetricUnit = metricUnitInstance;
                                    }
                                    
                                    JToken timeGrainValue = valueValue["timeGrain"];
                                    if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                        metricInstance.TimeGrain = timeGrainInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        metricInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = valueValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        metricInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken metricValuesArray = valueValue["metricValues"];
                                    if (metricValuesArray != null && metricValuesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricValuesValue in ((JArray)metricValuesArray))
                                        {
                                            MetricValue metricValueInstance = new MetricValue();
                                            metricInstance.MetricValues.Add(metricValueInstance);
                                            
                                            JToken timeStampValue = metricValuesValue["timeStamp"];
                                            if (timeStampValue != null && timeStampValue.Type != JTokenType.Null)
                                            {
                                                DateTime timeStampInstance = ((DateTime)timeStampValue);
                                                metricValueInstance.TimeStamp = timeStampInstance;
                                            }
                                            
                                            JToken averageValue = metricValuesValue["average"];
                                            if (averageValue != null && averageValue.Type != JTokenType.Null)
                                            {
                                                double averageInstance = ((double)averageValue);
                                                metricValueInstance.Average = averageInstance;
                                            }
                                            
                                            JToken minimumValue = metricValuesValue["minimum"];
                                            if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                            {
                                                double minimumInstance = ((double)minimumValue);
                                                metricValueInstance.Minimum = minimumInstance;
                                            }
                                            
                                            JToken maximumValue = metricValuesValue["maximum"];
                                            if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                            {
                                                double maximumInstance = ((double)maximumValue);
                                                metricValueInstance.Maximum = maximumInstance;
                                            }
                                            
                                            JToken totalValue = metricValuesValue["total"];
                                            if (totalValue != null && totalValue.Type != JTokenType.Null)
                                            {
                                                double totalInstance = ((double)totalValue);
                                                metricValueInstance.Total = totalInstance;
                                            }
                                            
                                            JToken countValue = metricValuesValue["count"];
                                            if (countValue != null && countValue.Type != JTokenType.Null)
                                            {
                                                int countInstance = ((int)countValue);
                                                metricValueInstance.Count = countInstance;
                                            }
                                            
                                            JToken propertiesValue = metricValuesValue["properties"];
                                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                            {
                                                string propertiesInstance = propertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                metricValueInstance.Properties = propertiesInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<TableMasterRoleInstanceListResponse> ListAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/tablemasterinstances";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TableMasterRoleInstanceListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TableMasterRoleInstanceListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken roleInstancesArray = responseDoc;
                            if (roleInstancesArray != null && roleInstancesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken roleInstancesValue in ((JArray)roleInstancesArray))
                                {
                                    TableMasterRoleInstanceModel tableMasterRoleInstanceModelInstance = new TableMasterRoleInstanceModel();
                                    result.RoleInstances.Add(tableMasterRoleInstanceModelInstance);
                                    
                                    JToken propertiesValue = roleInstancesValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        TableMasterRoleInstance propertiesInstance = new TableMasterRoleInstance();
                                        tableMasterRoleInstanceModelInstance.Properties = propertiesInstance;
                                        
                                        JToken settingsValue = propertiesValue["settings"];
                                        if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                        {
                                            TableMasterRoleInstanceEffectiveSettings settingsInstance = new TableMasterRoleInstanceEffectiveSettings();
                                            propertiesInstance.Settings = settingsInstance;
                                            
                                            JToken tableMasterMaxCacheSizeValue = settingsValue["tableMasterMaxCacheSize"];
                                            if (tableMasterMaxCacheSizeValue != null && tableMasterMaxCacheSizeValue.Type != JTokenType.Null)
                                            {
                                                int tableMasterMaxCacheSizeInstance = ((int)tableMasterMaxCacheSizeValue);
                                                settingsInstance.TableMasterMaxCacheSize = tableMasterMaxCacheSizeInstance;
                                            }
                                            
                                            JToken tableMasterMaxConnectionsValue = settingsValue["tableMasterMaxConnections"];
                                            if (tableMasterMaxConnectionsValue != null && tableMasterMaxConnectionsValue.Type != JTokenType.Null)
                                            {
                                                int tableMasterMaxConnectionsInstance = ((int)tableMasterMaxConnectionsValue);
                                                settingsInstance.TableMasterMaxConnections = tableMasterMaxConnectionsInstance;
                                            }
                                            
                                            JToken settingsPollingIntervalInSecondsValue = settingsValue["settingsPollingIntervalInSeconds"];
                                            if (settingsPollingIntervalInSecondsValue != null && settingsPollingIntervalInSecondsValue.Type != JTokenType.Null)
                                            {
                                                int settingsPollingIntervalInSecondsInstance = ((int)settingsPollingIntervalInSecondsValue);
                                                settingsInstance.SettingsPollingIntervalInSeconds = settingsPollingIntervalInSecondsInstance;
                                            }
                                            
                                            JToken settingsTimestampValue = settingsValue["settingsTimestamp"];
                                            if (settingsTimestampValue != null && settingsTimestampValue.Type != JTokenType.Null)
                                            {
                                                string settingsTimestampInstance = ((string)settingsTimestampValue);
                                                settingsInstance.SettingsTimestamp = settingsTimestampInstance;
                                            }
                                        }
                                        
                                        JToken roleIdentifierValue = propertiesValue["roleIdentifier"];
                                        if (roleIdentifierValue != null && roleIdentifierValue.Type != JTokenType.Null)
                                        {
                                            string roleIdentifierInstance = ((string)roleIdentifierValue);
                                            propertiesInstance.RoleIdentifier = roleIdentifierInstance;
                                        }
                                        
                                        JToken versionValue = propertiesValue["version"];
                                        if (versionValue != null && versionValue.Type != JTokenType.Null)
                                        {
                                            string versionInstance = ((string)versionValue);
                                            propertiesInstance.Version = versionInstance;
                                        }
                                        
                                        JToken statusValue = propertiesValue["status"];
                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                        {
                                            RoleInstanceStatus statusInstance = ((RoleInstanceStatus)Enum.Parse(typeof(RoleInstanceStatus), ((string)statusValue), true));
                                            propertiesInstance.Status = statusInstance;
                                        }
                                        
                                        JToken healthStatusValue = propertiesValue["healthStatus"];
                                        if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                        {
                                            HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                            propertiesInstance.HealthStatus = healthStatusInstance;
                                        }
                                        
                                        JToken nodeUriValue = propertiesValue["nodeUri"];
                                        if (nodeUriValue != null && nodeUriValue.Type != JTokenType.Null)
                                        {
                                            string nodeUriInstance = ((string)nodeUriValue);
                                            propertiesInstance.NodeUri = nodeUriInstance;
                                        }
                                        
                                        JToken historyInfosArray = propertiesValue["historyInfos"];
                                        if (historyInfosArray != null && historyInfosArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken historyInfosValue in ((JArray)historyInfosArray))
                                            {
                                                RoleInstanceHistoricEntry roleInstanceHistoricEntryInstance = new RoleInstanceHistoricEntry();
                                                propertiesInstance.HistoryInfos.Add(roleInstanceHistoricEntryInstance);
                                                
                                                JToken startTimeValue = historyInfosValue["startTime"];
                                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                {
                                                    DateTime startTimeInstance = ((DateTime)startTimeValue);
                                                    roleInstanceHistoricEntryInstance.StartTime = startTimeInstance;
                                                }
                                                
                                                JToken endTimeValue = historyInfosValue["endTime"];
                                                if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                {
                                                    DateTime endTimeInstance = ((DateTime)endTimeValue);
                                                    roleInstanceHistoricEntryInstance.EndTime = endTimeInstance;
                                                }
                                                
                                                JToken durationValue = historyInfosValue["duration"];
                                                if (durationValue != null && durationValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan durationInstance = XmlConvert.ToTimeSpan(((string)durationValue));
                                                    roleInstanceHistoricEntryInstance.Duration = durationInstance;
                                                }
                                                
                                                JToken roleIdentifierValue2 = historyInfosValue["roleIdentifier"];
                                                if (roleIdentifierValue2 != null && roleIdentifierValue2.Type != JTokenType.Null)
                                                {
                                                    string roleIdentifierInstance2 = ((string)roleIdentifierValue2);
                                                    roleInstanceHistoricEntryInstance.RoleIdentifier = roleIdentifierInstance2;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = roleInstancesValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        tableMasterRoleInstanceModelInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = roleInstancesValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        tableMasterRoleInstanceModelInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = roleInstancesValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        tableMasterRoleInstanceModelInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = roleInstancesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        tableMasterRoleInstanceModelInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)roleInstancesValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            tableMasterRoleInstanceModelInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> RestartAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            StorageAdminManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "RestartAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.TableMasterInstances.BeginRestartingAsync(resourceGroupName, farmId, instanceId, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> SettingsPullNowAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "SettingsPullNowAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/tablemasterinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/settingspullnow";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class TableServerInstanceOperationsExtensions
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse BeginRestarting(this ITableServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableServerInstanceOperations)s).BeginRestartingAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> BeginRestartingAsync(this ITableServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.BeginRestartingAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static TableServerRoleInstanceGetResponse Get(this ITableServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableServerInstanceOperations)s).GetAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<TableServerRoleInstanceGetResponse> GetAsync(this ITableServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.GetAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricDefinitionsResult GetMetricDefinitions(this ITableServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableServerInstanceOperations)s).GetMetricDefinitionsAsync(resourceGroupName, farmId, instanceId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(this ITableServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return operations.GetMetricDefinitionsAsync(resourceGroupName, farmId, instanceId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricsResult GetMetrics(this ITableServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableServerInstanceOperations)s).GetMetricsAsync(resourceGroupName, farmId, instanceId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricsResult> GetMetricsAsync(this ITableServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId, string filter)
        {
            return operations.GetMetricsAsync(resourceGroupName, farmId, instanceId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static TableServerRoleInstanceListResponse List(this ITableServerInstanceOperations operations, string resourceGroupName, string farmId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableServerInstanceOperations)s).ListAsync(resourceGroupName, farmId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<TableServerRoleInstanceListResponse> ListAsync(this ITableServerInstanceOperations operations, string resourceGroupName, string farmId)
        {
            return operations.ListAsync(resourceGroupName, farmId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Restart(this ITableServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableServerInstanceOperations)s).RestartAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> RestartAsync(this ITableServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.RestartAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse SettingsPullNow(this ITableServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableServerInstanceOperations)s).SettingsPullNowAsync(resourceGroupName, farmId, instanceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableServerInstanceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> SettingsPullNowAsync(this ITableServerInstanceOperations operations, string resourceGroupName, string farmId, string instanceId)
        {
            return operations.SettingsPullNowAsync(resourceGroupName, farmId, instanceId, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    public partial interface ITableServerInstanceOperations
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        Task<LongRunningOperationResponse> BeginRestartingAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<TableServerRoleInstanceGetResponse> GetAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<TableServerRoleInstanceListResponse> ListAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> RestartAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> SettingsPullNowAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class TableServerInstanceOperations : IServiceOperations<StorageAdminManagementClient>, ITableServerInstanceOperations
    {
        /// <summary>
        /// Initializes a new instance of the TableServerInstanceOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal TableServerInstanceOperations(StorageAdminManagementClient client)
        {
            this._client = client;
        }
        
        private StorageAdminManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.StorageAdminManagementClient.
        /// </summary>
        public StorageAdminManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginRestartingAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "BeginRestartingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/tableserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/restart";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict || statusCode == HttpStatusCode.NotFound || statusCode == HttpStatusCode.MethodNotAllowed || statusCode == HttpStatusCode.Forbidden)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<TableServerRoleInstanceGetResponse> GetAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/tableserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TableServerRoleInstanceGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TableServerRoleInstanceGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            TableServerRoleInstanceModel roleInstanceInstance = new TableServerRoleInstanceModel();
                            result.RoleInstance = roleInstanceInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                TableServerRoleInstance propertiesInstance = new TableServerRoleInstance();
                                roleInstanceInstance.Properties = propertiesInstance;
                                
                                JToken settingsValue = propertiesValue["settings"];
                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                {
                                    TableServerRoleInstanceEffectiveSettings settingsInstance = new TableServerRoleInstanceEffectiveSettings();
                                    propertiesInstance.Settings = settingsInstance;
                                    
                                    JToken tableServerMaxCacheSizeValue = settingsValue["tableServerMaxCacheSize"];
                                    if (tableServerMaxCacheSizeValue != null && tableServerMaxCacheSizeValue.Type != JTokenType.Null)
                                    {
                                        int tableServerMaxCacheSizeInstance = ((int)tableServerMaxCacheSizeValue);
                                        settingsInstance.TableServerMaxCacheSize = tableServerMaxCacheSizeInstance;
                                    }
                                    
                                    JToken tableServerMaxConnectionsValue = settingsValue["tableServerMaxConnections"];
                                    if (tableServerMaxConnectionsValue != null && tableServerMaxConnectionsValue.Type != JTokenType.Null)
                                    {
                                        int tableServerMaxConnectionsInstance = ((int)tableServerMaxConnectionsValue);
                                        settingsInstance.TableServerMaxConnections = tableServerMaxConnectionsInstance;
                                    }
                                    
                                    JToken tableServerCpuUsagePercentageThrottlingValue = settingsValue["tableServerCpuUsagePercentageThrottling"];
                                    if (tableServerCpuUsagePercentageThrottlingValue != null && tableServerCpuUsagePercentageThrottlingValue.Type != JTokenType.Null)
                                    {
                                        double tableServerCpuUsagePercentageThrottlingInstance = ((double)tableServerCpuUsagePercentageThrottlingValue);
                                        settingsInstance.TableServerCpuUsagePercentageThrottling = tableServerCpuUsagePercentageThrottlingInstance;
                                    }
                                    
                                    JToken tableServerCpuUsageThrottlingThresholdValue = settingsValue["tableServerCpuUsageThrottlingThreshold"];
                                    if (tableServerCpuUsageThrottlingThresholdValue != null && tableServerCpuUsageThrottlingThresholdValue.Type != JTokenType.Null)
                                    {
                                        int tableServerCpuUsageThrottlingThresholdInstance = ((int)tableServerCpuUsageThrottlingThresholdValue);
                                        settingsInstance.TableServerCpuUsageThrottlingThreshold = tableServerCpuUsageThrottlingThresholdInstance;
                                    }
                                    
                                    JToken tableServerMaxThrottlingProbabilityForAccountValue = settingsValue["tableServerMaxThrottlingProbabilityForAccount"];
                                    if (tableServerMaxThrottlingProbabilityForAccountValue != null && tableServerMaxThrottlingProbabilityForAccountValue.Type != JTokenType.Null)
                                    {
                                        double tableServerMaxThrottlingProbabilityForAccountInstance = ((double)tableServerMaxThrottlingProbabilityForAccountValue);
                                        settingsInstance.TableServerMaxThrottlingProbabilityForAccount = tableServerMaxThrottlingProbabilityForAccountInstance;
                                    }
                                    
                                    JToken tableServerPendingRequestCountThrottlingThresholdValue = settingsValue["tableServerPendingRequestCountThrottlingThreshold"];
                                    if (tableServerPendingRequestCountThrottlingThresholdValue != null && tableServerPendingRequestCountThrottlingThresholdValue.Type != JTokenType.Null)
                                    {
                                        int tableServerPendingRequestCountThrottlingThresholdInstance = ((int)tableServerPendingRequestCountThrottlingThresholdValue);
                                        settingsInstance.TableServerPendingRequestCountThrottlingThreshold = tableServerPendingRequestCountThrottlingThresholdInstance;
                                    }
                                    
                                    JToken tableServerScanThrottlingThresholdValue = settingsValue["tableServerScanThrottlingThreshold"];
                                    if (tableServerScanThrottlingThresholdValue != null && tableServerScanThrottlingThresholdValue.Type != JTokenType.Null)
                                    {
                                        int tableServerScanThrottlingThresholdInstance = ((int)tableServerScanThrottlingThresholdValue);
                                        settingsInstance.TableServerScanThrottlingThreshold = tableServerScanThrottlingThresholdInstance;
                                    }
                                    
                                    JToken settingsPollingIntervalInSecondsValue = settingsValue["settingsPollingIntervalInSeconds"];
                                    if (settingsPollingIntervalInSecondsValue != null && settingsPollingIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int settingsPollingIntervalInSecondsInstance = ((int)settingsPollingIntervalInSecondsValue);
                                        settingsInstance.SettingsPollingIntervalInSeconds = settingsPollingIntervalInSecondsInstance;
                                    }
                                    
                                    JToken settingsTimestampValue = settingsValue["settingsTimestamp"];
                                    if (settingsTimestampValue != null && settingsTimestampValue.Type != JTokenType.Null)
                                    {
                                        string settingsTimestampInstance = ((string)settingsTimestampValue);
                                        settingsInstance.SettingsTimestamp = settingsTimestampInstance;
                                    }
                                }
                                
                                JToken roleIdentifierValue = propertiesValue["roleIdentifier"];
                                if (roleIdentifierValue != null && roleIdentifierValue.Type != JTokenType.Null)
                                {
                                    string roleIdentifierInstance = ((string)roleIdentifierValue);
                                    propertiesInstance.RoleIdentifier = roleIdentifierInstance;
                                }
                                
                                JToken versionValue = propertiesValue["version"];
                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                {
                                    string versionInstance = ((string)versionValue);
                                    propertiesInstance.Version = versionInstance;
                                }
                                
                                JToken statusValue = propertiesValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    RoleInstanceStatus statusInstance = ((RoleInstanceStatus)Enum.Parse(typeof(RoleInstanceStatus), ((string)statusValue), true));
                                    propertiesInstance.Status = statusInstance;
                                }
                                
                                JToken healthStatusValue = propertiesValue["healthStatus"];
                                if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                {
                                    HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                    propertiesInstance.HealthStatus = healthStatusInstance;
                                }
                                
                                JToken nodeUriValue = propertiesValue["nodeUri"];
                                if (nodeUriValue != null && nodeUriValue.Type != JTokenType.Null)
                                {
                                    string nodeUriInstance = ((string)nodeUriValue);
                                    propertiesInstance.NodeUri = nodeUriInstance;
                                }
                                
                                JToken historyInfosArray = propertiesValue["historyInfos"];
                                if (historyInfosArray != null && historyInfosArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken historyInfosValue in ((JArray)historyInfosArray))
                                    {
                                        RoleInstanceHistoricEntry roleInstanceHistoricEntryInstance = new RoleInstanceHistoricEntry();
                                        propertiesInstance.HistoryInfos.Add(roleInstanceHistoricEntryInstance);
                                        
                                        JToken startTimeValue = historyInfosValue["startTime"];
                                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime startTimeInstance = ((DateTime)startTimeValue);
                                            roleInstanceHistoricEntryInstance.StartTime = startTimeInstance;
                                        }
                                        
                                        JToken endTimeValue = historyInfosValue["endTime"];
                                        if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime endTimeInstance = ((DateTime)endTimeValue);
                                            roleInstanceHistoricEntryInstance.EndTime = endTimeInstance;
                                        }
                                        
                                        JToken durationValue = historyInfosValue["duration"];
                                        if (durationValue != null && durationValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan durationInstance = XmlConvert.ToTimeSpan(((string)durationValue));
                                            roleInstanceHistoricEntryInstance.Duration = durationInstance;
                                        }
                                        
                                        JToken roleIdentifierValue2 = historyInfosValue["roleIdentifier"];
                                        if (roleIdentifierValue2 != null && roleIdentifierValue2.Type != JTokenType.Null)
                                        {
                                            string roleIdentifierInstance2 = ((string)roleIdentifierValue2);
                                            roleInstanceHistoricEntryInstance.RoleIdentifier = roleIdentifierInstance2;
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                roleInstanceInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                roleInstanceInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                roleInstanceInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                roleInstanceInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    roleInstanceInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricDefinitionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/tableserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/metricdefinitions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricDefinitionsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricDefinitionsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    MetricDefinition metricDefinitionInstance = new MetricDefinition();
                                    result.Value.Add(metricDefinitionInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricDefinitionInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken unitValue = valueValue["unit"];
                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit unitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)unitValue), true));
                                        metricDefinitionInstance.Unit = unitInstance;
                                    }
                                    
                                    JToken primaryAggregationTypeValue = valueValue["primaryAggregationType"];
                                    if (primaryAggregationTypeValue != null && primaryAggregationTypeValue.Type != JTokenType.Null)
                                    {
                                        MetricPrimaryAggregationType primaryAggregationTypeInstance = ((MetricPrimaryAggregationType)Enum.Parse(typeof(MetricPrimaryAggregationType), ((string)primaryAggregationTypeValue), true));
                                        metricDefinitionInstance.PrimaryAggregationType = primaryAggregationTypeInstance;
                                    }
                                    
                                    JToken metricAvailabilitiesArray = valueValue["metricAvailabilities"];
                                    if (metricAvailabilitiesArray != null && metricAvailabilitiesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricAvailabilitiesValue in ((JArray)metricAvailabilitiesArray))
                                        {
                                            MetricAvailability metricAvailabilityInstance = new MetricAvailability();
                                            metricDefinitionInstance.MetricAvailabilities.Add(metricAvailabilityInstance);
                                            
                                            JToken timeGrainValue = metricAvailabilitiesValue["timeGrain"];
                                            if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                                metricAvailabilityInstance.TimeGrain = timeGrainInstance;
                                            }
                                            
                                            JToken retentionValue = metricAvailabilitiesValue["retention"];
                                            if (retentionValue != null && retentionValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan retentionInstance = XmlConvert.ToTimeSpan(((string)retentionValue));
                                                metricAvailabilityInstance.Retention = retentionInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string instanceId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/tableserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/metrics";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Metric metricInstance = new Metric();
                                    result.Metrics.Add(metricInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken metricUnitValue = valueValue["metricUnit"];
                                    if (metricUnitValue != null && metricUnitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit metricUnitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)metricUnitValue), true));
                                        metricInstance.MetricUnit = metricUnitInstance;
                                    }
                                    
                                    JToken timeGrainValue = valueValue["timeGrain"];
                                    if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                        metricInstance.TimeGrain = timeGrainInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        metricInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = valueValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        metricInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken metricValuesArray = valueValue["metricValues"];
                                    if (metricValuesArray != null && metricValuesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricValuesValue in ((JArray)metricValuesArray))
                                        {
                                            MetricValue metricValueInstance = new MetricValue();
                                            metricInstance.MetricValues.Add(metricValueInstance);
                                            
                                            JToken timeStampValue = metricValuesValue["timeStamp"];
                                            if (timeStampValue != null && timeStampValue.Type != JTokenType.Null)
                                            {
                                                DateTime timeStampInstance = ((DateTime)timeStampValue);
                                                metricValueInstance.TimeStamp = timeStampInstance;
                                            }
                                            
                                            JToken averageValue = metricValuesValue["average"];
                                            if (averageValue != null && averageValue.Type != JTokenType.Null)
                                            {
                                                double averageInstance = ((double)averageValue);
                                                metricValueInstance.Average = averageInstance;
                                            }
                                            
                                            JToken minimumValue = metricValuesValue["minimum"];
                                            if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                            {
                                                double minimumInstance = ((double)minimumValue);
                                                metricValueInstance.Minimum = minimumInstance;
                                            }
                                            
                                            JToken maximumValue = metricValuesValue["maximum"];
                                            if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                            {
                                                double maximumInstance = ((double)maximumValue);
                                                metricValueInstance.Maximum = maximumInstance;
                                            }
                                            
                                            JToken totalValue = metricValuesValue["total"];
                                            if (totalValue != null && totalValue.Type != JTokenType.Null)
                                            {
                                                double totalInstance = ((double)totalValue);
                                                metricValueInstance.Total = totalInstance;
                                            }
                                            
                                            JToken countValue = metricValuesValue["count"];
                                            if (countValue != null && countValue.Type != JTokenType.Null)
                                            {
                                                int countInstance = ((int)countValue);
                                                metricValueInstance.Count = countInstance;
                                            }
                                            
                                            JToken propertiesValue = metricValuesValue["properties"];
                                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                            {
                                                string propertiesInstance = propertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                metricValueInstance.Properties = propertiesInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<TableServerRoleInstanceListResponse> ListAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/tableserverinstances";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TableServerRoleInstanceListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TableServerRoleInstanceListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken roleInstancesArray = responseDoc;
                            if (roleInstancesArray != null && roleInstancesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken roleInstancesValue in ((JArray)roleInstancesArray))
                                {
                                    TableServerRoleInstanceModel tableServerRoleInstanceModelInstance = new TableServerRoleInstanceModel();
                                    result.RoleInstances.Add(tableServerRoleInstanceModelInstance);
                                    
                                    JToken propertiesValue = roleInstancesValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        TableServerRoleInstance propertiesInstance = new TableServerRoleInstance();
                                        tableServerRoleInstanceModelInstance.Properties = propertiesInstance;
                                        
                                        JToken settingsValue = propertiesValue["settings"];
                                        if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                        {
                                            TableServerRoleInstanceEffectiveSettings settingsInstance = new TableServerRoleInstanceEffectiveSettings();
                                            propertiesInstance.Settings = settingsInstance;
                                            
                                            JToken tableServerMaxCacheSizeValue = settingsValue["tableServerMaxCacheSize"];
                                            if (tableServerMaxCacheSizeValue != null && tableServerMaxCacheSizeValue.Type != JTokenType.Null)
                                            {
                                                int tableServerMaxCacheSizeInstance = ((int)tableServerMaxCacheSizeValue);
                                                settingsInstance.TableServerMaxCacheSize = tableServerMaxCacheSizeInstance;
                                            }
                                            
                                            JToken tableServerMaxConnectionsValue = settingsValue["tableServerMaxConnections"];
                                            if (tableServerMaxConnectionsValue != null && tableServerMaxConnectionsValue.Type != JTokenType.Null)
                                            {
                                                int tableServerMaxConnectionsInstance = ((int)tableServerMaxConnectionsValue);
                                                settingsInstance.TableServerMaxConnections = tableServerMaxConnectionsInstance;
                                            }
                                            
                                            JToken tableServerCpuUsagePercentageThrottlingValue = settingsValue["tableServerCpuUsagePercentageThrottling"];
                                            if (tableServerCpuUsagePercentageThrottlingValue != null && tableServerCpuUsagePercentageThrottlingValue.Type != JTokenType.Null)
                                            {
                                                double tableServerCpuUsagePercentageThrottlingInstance = ((double)tableServerCpuUsagePercentageThrottlingValue);
                                                settingsInstance.TableServerCpuUsagePercentageThrottling = tableServerCpuUsagePercentageThrottlingInstance;
                                            }
                                            
                                            JToken tableServerCpuUsageThrottlingThresholdValue = settingsValue["tableServerCpuUsageThrottlingThreshold"];
                                            if (tableServerCpuUsageThrottlingThresholdValue != null && tableServerCpuUsageThrottlingThresholdValue.Type != JTokenType.Null)
                                            {
                                                int tableServerCpuUsageThrottlingThresholdInstance = ((int)tableServerCpuUsageThrottlingThresholdValue);
                                                settingsInstance.TableServerCpuUsageThrottlingThreshold = tableServerCpuUsageThrottlingThresholdInstance;
                                            }
                                            
                                            JToken tableServerMaxThrottlingProbabilityForAccountValue = settingsValue["tableServerMaxThrottlingProbabilityForAccount"];
                                            if (tableServerMaxThrottlingProbabilityForAccountValue != null && tableServerMaxThrottlingProbabilityForAccountValue.Type != JTokenType.Null)
                                            {
                                                double tableServerMaxThrottlingProbabilityForAccountInstance = ((double)tableServerMaxThrottlingProbabilityForAccountValue);
                                                settingsInstance.TableServerMaxThrottlingProbabilityForAccount = tableServerMaxThrottlingProbabilityForAccountInstance;
                                            }
                                            
                                            JToken tableServerPendingRequestCountThrottlingThresholdValue = settingsValue["tableServerPendingRequestCountThrottlingThreshold"];
                                            if (tableServerPendingRequestCountThrottlingThresholdValue != null && tableServerPendingRequestCountThrottlingThresholdValue.Type != JTokenType.Null)
                                            {
                                                int tableServerPendingRequestCountThrottlingThresholdInstance = ((int)tableServerPendingRequestCountThrottlingThresholdValue);
                                                settingsInstance.TableServerPendingRequestCountThrottlingThreshold = tableServerPendingRequestCountThrottlingThresholdInstance;
                                            }
                                            
                                            JToken tableServerScanThrottlingThresholdValue = settingsValue["tableServerScanThrottlingThreshold"];
                                            if (tableServerScanThrottlingThresholdValue != null && tableServerScanThrottlingThresholdValue.Type != JTokenType.Null)
                                            {
                                                int tableServerScanThrottlingThresholdInstance = ((int)tableServerScanThrottlingThresholdValue);
                                                settingsInstance.TableServerScanThrottlingThreshold = tableServerScanThrottlingThresholdInstance;
                                            }
                                            
                                            JToken settingsPollingIntervalInSecondsValue = settingsValue["settingsPollingIntervalInSeconds"];
                                            if (settingsPollingIntervalInSecondsValue != null && settingsPollingIntervalInSecondsValue.Type != JTokenType.Null)
                                            {
                                                int settingsPollingIntervalInSecondsInstance = ((int)settingsPollingIntervalInSecondsValue);
                                                settingsInstance.SettingsPollingIntervalInSeconds = settingsPollingIntervalInSecondsInstance;
                                            }
                                            
                                            JToken settingsTimestampValue = settingsValue["settingsTimestamp"];
                                            if (settingsTimestampValue != null && settingsTimestampValue.Type != JTokenType.Null)
                                            {
                                                string settingsTimestampInstance = ((string)settingsTimestampValue);
                                                settingsInstance.SettingsTimestamp = settingsTimestampInstance;
                                            }
                                        }
                                        
                                        JToken roleIdentifierValue = propertiesValue["roleIdentifier"];
                                        if (roleIdentifierValue != null && roleIdentifierValue.Type != JTokenType.Null)
                                        {
                                            string roleIdentifierInstance = ((string)roleIdentifierValue);
                                            propertiesInstance.RoleIdentifier = roleIdentifierInstance;
                                        }
                                        
                                        JToken versionValue = propertiesValue["version"];
                                        if (versionValue != null && versionValue.Type != JTokenType.Null)
                                        {
                                            string versionInstance = ((string)versionValue);
                                            propertiesInstance.Version = versionInstance;
                                        }
                                        
                                        JToken statusValue = propertiesValue["status"];
                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                        {
                                            RoleInstanceStatus statusInstance = ((RoleInstanceStatus)Enum.Parse(typeof(RoleInstanceStatus), ((string)statusValue), true));
                                            propertiesInstance.Status = statusInstance;
                                        }
                                        
                                        JToken healthStatusValue = propertiesValue["healthStatus"];
                                        if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                        {
                                            HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                            propertiesInstance.HealthStatus = healthStatusInstance;
                                        }
                                        
                                        JToken nodeUriValue = propertiesValue["nodeUri"];
                                        if (nodeUriValue != null && nodeUriValue.Type != JTokenType.Null)
                                        {
                                            string nodeUriInstance = ((string)nodeUriValue);
                                            propertiesInstance.NodeUri = nodeUriInstance;
                                        }
                                        
                                        JToken historyInfosArray = propertiesValue["historyInfos"];
                                        if (historyInfosArray != null && historyInfosArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken historyInfosValue in ((JArray)historyInfosArray))
                                            {
                                                RoleInstanceHistoricEntry roleInstanceHistoricEntryInstance = new RoleInstanceHistoricEntry();
                                                propertiesInstance.HistoryInfos.Add(roleInstanceHistoricEntryInstance);
                                                
                                                JToken startTimeValue = historyInfosValue["startTime"];
                                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                {
                                                    DateTime startTimeInstance = ((DateTime)startTimeValue);
                                                    roleInstanceHistoricEntryInstance.StartTime = startTimeInstance;
                                                }
                                                
                                                JToken endTimeValue = historyInfosValue["endTime"];
                                                if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                {
                                                    DateTime endTimeInstance = ((DateTime)endTimeValue);
                                                    roleInstanceHistoricEntryInstance.EndTime = endTimeInstance;
                                                }
                                                
                                                JToken durationValue = historyInfosValue["duration"];
                                                if (durationValue != null && durationValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan durationInstance = XmlConvert.ToTimeSpan(((string)durationValue));
                                                    roleInstanceHistoricEntryInstance.Duration = durationInstance;
                                                }
                                                
                                                JToken roleIdentifierValue2 = historyInfosValue["roleIdentifier"];
                                                if (roleIdentifierValue2 != null && roleIdentifierValue2.Type != JTokenType.Null)
                                                {
                                                    string roleIdentifierInstance2 = ((string)roleIdentifierValue2);
                                                    roleInstanceHistoricEntryInstance.RoleIdentifier = roleIdentifierInstance2;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = roleInstancesValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        tableServerRoleInstanceModelInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = roleInstancesValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        tableServerRoleInstanceModelInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = roleInstancesValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        tableServerRoleInstanceModelInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = roleInstancesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        tableServerRoleInstanceModelInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)roleInstancesValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            tableServerRoleInstanceModelInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> RestartAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            StorageAdminManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "RestartAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.TableServerInstances.BeginRestartingAsync(resourceGroupName, farmId, instanceId, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='instanceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> SettingsPullNowAsync(string resourceGroupName, string farmId, string instanceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("instanceId", instanceId);
                TracingAdapter.Enter(invocationId, this, "SettingsPullNowAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/tableserverinstances/";
            url = url + Uri.EscapeDataString(instanceId);
            url = url + "/settingspullnow";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class TableServiceOperationsExtensions
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public static TableServiceGetResponse Get(this ITableServiceOperations operations, string resourceGroupName, string farmId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableServiceOperations)s).GetAsync(resourceGroupName, farmId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public static Task<TableServiceGetResponse> GetAsync(this ITableServiceOperations operations, string resourceGroupName, string farmId)
        {
            return operations.GetAsync(resourceGroupName, farmId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricDefinitionsResult GetMetricDefinitions(this ITableServiceOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableServiceOperations)s).GetMetricDefinitionsAsync(resourceGroupName, farmId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(this ITableServiceOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return operations.GetMetricDefinitionsAsync(resourceGroupName, farmId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricsResult GetMetrics(this ITableServiceOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableServiceOperations)s).GetMetricsAsync(resourceGroupName, farmId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricsResult> GetMetricsAsync(this ITableServiceOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return operations.GetMetricsAsync(resourceGroupName, farmId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public static TableServiceGetResponse Patch(this ITableServiceOperations operations, string resourceGroupName, string farmId, TableServicePatchParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableServiceOperations)s).PatchAsync(resourceGroupName, farmId, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.ITableServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public static Task<TableServiceGetResponse> PatchAsync(this ITableServiceOperations operations, string resourceGroupName, string farmId, TableServicePatchParameters parameters)
        {
            return operations.PatchAsync(resourceGroupName, farmId, parameters, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    public partial interface ITableServiceOperations
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        Task<TableServiceGetResponse> GetAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        Task<TableServiceGetResponse> PatchAsync(string resourceGroupName, string farmId, TableServicePatchParameters parameters, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class TableServiceOperations : IServiceOperations<StorageAdminManagementClient>, ITableServiceOperations
    {
        /// <summary>
        /// Initializes a new instance of the TableServiceOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal TableServiceOperations(StorageAdminManagementClient client)
        {
            this._client = client;
        }
        
        private StorageAdminManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.Management.StorageAdmin.StorageAdminManagementClient.
        /// </summary>
        public StorageAdminManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public async Task<TableServiceGetResponse> GetAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/tableservices/default";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TableServiceGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TableServiceGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            TableServiceResponseResource resourceInstance = new TableServiceResponseResource();
                            result.Resource = resourceInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                TableServiceResponse propertiesInstance = new TableServiceResponse();
                                resourceInstance.TableService = propertiesInstance;
                                
                                JToken settingsValue = propertiesValue["settings"];
                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                {
                                    TableServiceSettings settingsInstance = new TableServiceSettings();
                                    propertiesInstance.Settings = settingsInstance;
                                    
                                    JToken frontEndHttpListenPortValue = settingsValue["frontEndHttpListenPort"];
                                    if (frontEndHttpListenPortValue != null && frontEndHttpListenPortValue.Type != JTokenType.Null)
                                    {
                                        int frontEndHttpListenPortInstance = ((int)frontEndHttpListenPortValue);
                                        settingsInstance.FrontEndHttpListenPort = frontEndHttpListenPortInstance;
                                    }
                                    
                                    JToken frontEndHttpsListenPortValue = settingsValue["frontEndHttpsListenPort"];
                                    if (frontEndHttpsListenPortValue != null && frontEndHttpsListenPortValue.Type != JTokenType.Null)
                                    {
                                        int frontEndHttpsListenPortInstance = ((int)frontEndHttpsListenPortValue);
                                        settingsInstance.FrontEndHttpsListenPort = frontEndHttpsListenPortInstance;
                                    }
                                    
                                    JToken frontEndCallbackThreadsCountValue = settingsValue["frontEndCallbackThreadsCount"];
                                    if (frontEndCallbackThreadsCountValue != null && frontEndCallbackThreadsCountValue.Type != JTokenType.Null)
                                    {
                                        int frontEndCallbackThreadsCountInstance = ((int)frontEndCallbackThreadsCountValue);
                                        settingsInstance.FrontEndCallbackThreadsCount = frontEndCallbackThreadsCountInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingEnabledValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingEnabled"];
                                    if (frontEndCpuBasedKeepAliveThrottlingEnabledValue != null && frontEndCpuBasedKeepAliveThrottlingEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndCpuBasedKeepAliveThrottlingEnabledInstance = ((bool)frontEndCpuBasedKeepAliveThrottlingEnabledValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingEnabled = frontEndCpuBasedKeepAliveThrottlingEnabledInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold"];
                                    if (frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue != null && frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue.Type != JTokenType.Null)
                                    {
                                        double frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdInstance = ((double)frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold = frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle"];
                                    if (frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue != null && frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue.Type != JTokenType.Null)
                                    {
                                        double frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleInstance = ((double)frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle = frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds"];
                                    if (frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue != null && frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsInstance = ((int)frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds = frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsInstance;
                                    }
                                    
                                    JToken frontEndMemoryThrottlingEnabledValue = settingsValue["frontEndMemoryThrottlingEnabled"];
                                    if (frontEndMemoryThrottlingEnabledValue != null && frontEndMemoryThrottlingEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndMemoryThrottlingEnabledInstance = ((bool)frontEndMemoryThrottlingEnabledValue);
                                        settingsInstance.FrontEndMemoryThrottlingEnabled = frontEndMemoryThrottlingEnabledInstance;
                                    }
                                    
                                    JToken frontEndMaxMillisecondsBetweenMemorySamplesValue = settingsValue["frontEndMaxMillisecondsBetweenMemorySamples"];
                                    if (frontEndMaxMillisecondsBetweenMemorySamplesValue != null && frontEndMaxMillisecondsBetweenMemorySamplesValue.Type != JTokenType.Null)
                                    {
                                        int frontEndMaxMillisecondsBetweenMemorySamplesInstance = ((int)frontEndMaxMillisecondsBetweenMemorySamplesValue);
                                        settingsInstance.FrontEndMaxMillisecondsBetweenMemorySamples = frontEndMaxMillisecondsBetweenMemorySamplesInstance;
                                    }
                                    
                                    JToken frontEndMemoryThrottleThresholdSettingsValue = settingsValue["frontEndMemoryThrottleThresholdSettings"];
                                    if (frontEndMemoryThrottleThresholdSettingsValue != null && frontEndMemoryThrottleThresholdSettingsValue.Type != JTokenType.Null)
                                    {
                                        string frontEndMemoryThrottleThresholdSettingsInstance = ((string)frontEndMemoryThrottleThresholdSettingsValue);
                                        settingsInstance.FrontEndMemoryThrottleThresholdSettings = frontEndMemoryThrottleThresholdSettingsInstance;
                                    }
                                    
                                    JToken frontEndMinThreadPoolThreadsValue = settingsValue["frontEndMinThreadPoolThreads"];
                                    if (frontEndMinThreadPoolThreadsValue != null && frontEndMinThreadPoolThreadsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndMinThreadPoolThreadsInstance = ((int)frontEndMinThreadPoolThreadsValue);
                                        settingsInstance.FrontEndMinimumThreadPoolThreads = frontEndMinThreadPoolThreadsInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue = settingsValue["frontEndThreadPoolBasedKeepAliveIOCompletionThreshold"];
                                    if (frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue != null && frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveIOCompletionThresholdInstance = ((int)frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveIOCompletionThreshold = frontEndThreadPoolBasedKeepAliveIOCompletionThresholdInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue = settingsValue["frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold"];
                                    if (frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue != null && frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdInstance = ((int)frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveWorkerThreadThreshold = frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue = settingsValue["frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds"];
                                    if (frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue != null && frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsInstance = ((int)frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds = frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAlivePercentageValue = settingsValue["frontEndThreadPoolBasedKeepAlivePercentage"];
                                    if (frontEndThreadPoolBasedKeepAlivePercentageValue != null && frontEndThreadPoolBasedKeepAlivePercentageValue.Type != JTokenType.Null)
                                    {
                                        double frontEndThreadPoolBasedKeepAlivePercentageInstance = ((double)frontEndThreadPoolBasedKeepAlivePercentageValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAlivePercentage = frontEndThreadPoolBasedKeepAlivePercentageInstance;
                                    }
                                    
                                    JToken frontEndUseSlaTimeInAvailabilityValue = settingsValue["frontEndUseSlaTimeInAvailability"];
                                    if (frontEndUseSlaTimeInAvailabilityValue != null && frontEndUseSlaTimeInAvailabilityValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndUseSlaTimeInAvailabilityInstance = ((bool)frontEndUseSlaTimeInAvailabilityValue);
                                        settingsInstance.FrontEndUseSlaTimeInAvailability = frontEndUseSlaTimeInAvailabilityInstance;
                                    }
                                }
                                
                                JToken versionValue = propertiesValue["version"];
                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                {
                                    string versionInstance = ((string)versionValue);
                                    propertiesInstance.Version = versionInstance;
                                }
                                
                                JToken healthStatusValue = propertiesValue["healthStatus"];
                                if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                {
                                    HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                    propertiesInstance.HealthStatus = healthStatusInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                resourceInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                resourceInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                resourceInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                resourceInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    resourceInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricDefinitionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/tableservices/default/metricdefinitions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricDefinitionsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricDefinitionsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    MetricDefinition metricDefinitionInstance = new MetricDefinition();
                                    result.Value.Add(metricDefinitionInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricDefinitionInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken unitValue = valueValue["unit"];
                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit unitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)unitValue), true));
                                        metricDefinitionInstance.Unit = unitInstance;
                                    }
                                    
                                    JToken primaryAggregationTypeValue = valueValue["primaryAggregationType"];
                                    if (primaryAggregationTypeValue != null && primaryAggregationTypeValue.Type != JTokenType.Null)
                                    {
                                        MetricPrimaryAggregationType primaryAggregationTypeInstance = ((MetricPrimaryAggregationType)Enum.Parse(typeof(MetricPrimaryAggregationType), ((string)primaryAggregationTypeValue), true));
                                        metricDefinitionInstance.PrimaryAggregationType = primaryAggregationTypeInstance;
                                    }
                                    
                                    JToken metricAvailabilitiesArray = valueValue["metricAvailabilities"];
                                    if (metricAvailabilitiesArray != null && metricAvailabilitiesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricAvailabilitiesValue in ((JArray)metricAvailabilitiesArray))
                                        {
                                            MetricAvailability metricAvailabilityInstance = new MetricAvailability();
                                            metricDefinitionInstance.MetricAvailabilities.Add(metricAvailabilityInstance);
                                            
                                            JToken timeGrainValue = metricAvailabilitiesValue["timeGrain"];
                                            if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                                metricAvailabilityInstance.TimeGrain = timeGrainInstance;
                                            }
                                            
                                            JToken retentionValue = metricAvailabilitiesValue["retention"];
                                            if (retentionValue != null && retentionValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan retentionInstance = XmlConvert.ToTimeSpan(((string)retentionValue));
                                                metricAvailabilityInstance.Retention = retentionInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/tableservices/default/metrics";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Metric metricInstance = new Metric();
                                    result.Metrics.Add(metricInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken metricUnitValue = valueValue["metricUnit"];
                                    if (metricUnitValue != null && metricUnitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit metricUnitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)metricUnitValue), true));
                                        metricInstance.MetricUnit = metricUnitInstance;
                                    }
                                    
                                    JToken timeGrainValue = valueValue["timeGrain"];
                                    if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                        metricInstance.TimeGrain = timeGrainInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        metricInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = valueValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        metricInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken metricValuesArray = valueValue["metricValues"];
                                    if (metricValuesArray != null && metricValuesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricValuesValue in ((JArray)metricValuesArray))
                                        {
                                            MetricValue metricValueInstance = new MetricValue();
                                            metricInstance.MetricValues.Add(metricValueInstance);
                                            
                                            JToken timeStampValue = metricValuesValue["timeStamp"];
                                            if (timeStampValue != null && timeStampValue.Type != JTokenType.Null)
                                            {
                                                DateTime timeStampInstance = ((DateTime)timeStampValue);
                                                metricValueInstance.TimeStamp = timeStampInstance;
                                            }
                                            
                                            JToken averageValue = metricValuesValue["average"];
                                            if (averageValue != null && averageValue.Type != JTokenType.Null)
                                            {
                                                double averageInstance = ((double)averageValue);
                                                metricValueInstance.Average = averageInstance;
                                            }
                                            
                                            JToken minimumValue = metricValuesValue["minimum"];
                                            if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                            {
                                                double minimumInstance = ((double)minimumValue);
                                                metricValueInstance.Minimum = minimumInstance;
                                            }
                                            
                                            JToken maximumValue = metricValuesValue["maximum"];
                                            if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                            {
                                                double maximumInstance = ((double)maximumValue);
                                                metricValueInstance.Maximum = maximumInstance;
                                            }
                                            
                                            JToken totalValue = metricValuesValue["total"];
                                            if (totalValue != null && totalValue.Type != JTokenType.Null)
                                            {
                                                double totalInstance = ((double)totalValue);
                                                metricValueInstance.Total = totalInstance;
                                            }
                                            
                                            JToken countValue = metricValuesValue["count"];
                                            if (countValue != null && countValue.Type != JTokenType.Null)
                                            {
                                                int countInstance = ((int)countValue);
                                                metricValueInstance.Count = countInstance;
                                            }
                                            
                                            JToken propertiesValue = metricValuesValue["properties"];
                                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                            {
                                                string propertiesInstance = propertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                metricValueInstance.Properties = propertiesInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public async Task<TableServiceGetResponse> PatchAsync(string resourceGroupName, string farmId, TableServicePatchParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "PatchAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/tableservices/default";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject tableServicePatchParametersValue = new JObject();
                requestDoc = tableServicePatchParametersValue;
                
                if (parameters.TableService != null)
                {
                    JObject propertiesValue = new JObject();
                    tableServicePatchParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.TableService.Settings != null)
                    {
                        JObject settingsValue = new JObject();
                        propertiesValue["settings"] = settingsValue;
                        
                        if (parameters.TableService.Settings.FrontEndCallbackThreadsCount != null)
                        {
                            settingsValue["frontEndCallbackThreadsCount"] = parameters.TableService.Settings.FrontEndCallbackThreadsCount.Value;
                        }
                        
                        if (parameters.TableService.Settings.FrontEndCpuBasedKeepAliveThrottlingEnabled != null)
                        {
                            settingsValue["frontEndCpuBasedKeepAliveThrottlingEnabled"] = parameters.TableService.Settings.FrontEndCpuBasedKeepAliveThrottlingEnabled.Value;
                        }
                        
                        if (parameters.TableService.Settings.FrontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold != null)
                        {
                            settingsValue["frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold"] = parameters.TableService.Settings.FrontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold.Value;
                        }
                        
                        if (parameters.TableService.Settings.FrontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle != null)
                        {
                            settingsValue["frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle"] = parameters.TableService.Settings.FrontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle.Value;
                        }
                        
                        if (parameters.TableService.Settings.FrontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds != null)
                        {
                            settingsValue["frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds"] = parameters.TableService.Settings.FrontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds.Value;
                        }
                        
                        if (parameters.TableService.Settings.FrontEndMemoryThrottlingEnabled != null)
                        {
                            settingsValue["frontEndMemoryThrottlingEnabled"] = parameters.TableService.Settings.FrontEndMemoryThrottlingEnabled.Value;
                        }
                        
                        if (parameters.TableService.Settings.FrontEndMaxMillisecondsBetweenMemorySamples != null)
                        {
                            settingsValue["frontEndMaxMillisecondsBetweenMemorySamples"] = parameters.TableService.Settings.FrontEndMaxMillisecondsBetweenMemorySamples.Value;
                        }
                        
                        if (parameters.TableService.Settings.FrontEndMemoryThrottleThresholdSettings != null)
                        {
                            settingsValue["frontEndMemoryThrottleThresholdSettings"] = parameters.TableService.Settings.FrontEndMemoryThrottleThresholdSettings;
                        }
                        
                        if (parameters.TableService.Settings.FrontEndMinimumThreadPoolThreads != null)
                        {
                            settingsValue["frontEndMinThreadPoolThreads"] = parameters.TableService.Settings.FrontEndMinimumThreadPoolThreads.Value;
                        }
                        
                        if (parameters.TableService.Settings.FrontEndThreadPoolBasedKeepAliveIOCompletionThreshold != null)
                        {
                            settingsValue["frontEndThreadPoolBasedKeepAliveIOCompletionThreshold"] = parameters.TableService.Settings.FrontEndThreadPoolBasedKeepAliveIOCompletionThreshold.Value;
                        }
                        
                        if (parameters.TableService.Settings.FrontEndThreadPoolBasedKeepAliveWorkerThreadThreshold != null)
                        {
                            settingsValue["frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold"] = parameters.TableService.Settings.FrontEndThreadPoolBasedKeepAliveWorkerThreadThreshold.Value;
                        }
                        
                        if (parameters.TableService.Settings.FrontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds != null)
                        {
                            settingsValue["frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds"] = parameters.TableService.Settings.FrontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds.Value;
                        }
                        
                        if (parameters.TableService.Settings.FrontEndThreadPoolBasedKeepAlivePercentage != null)
                        {
                            settingsValue["frontEndThreadPoolBasedKeepAlivePercentage"] = parameters.TableService.Settings.FrontEndThreadPoolBasedKeepAlivePercentage.Value;
                        }
                        
                        if (parameters.TableService.Settings.FrontEndUseSlaTimeInAvailability != null)
                        {
                            settingsValue["frontEndUseSlaTimeInAvailability"] = parameters.TableService.Settings.FrontEndUseSlaTimeInAvailability.Value;
                        }
                    }
                }
                
                if (parameters.Id != null)
                {
                    tableServicePatchParametersValue["id"] = parameters.Id;
                }
                
                if (parameters.Name != null)
                {
                    tableServicePatchParametersValue["name"] = parameters.Name;
                }
                
                if (parameters.Type != null)
                {
                    tableServicePatchParametersValue["type"] = parameters.Type;
                }
                
                if (parameters.Location != null)
                {
                    tableServicePatchParametersValue["location"] = parameters.Location;
                }
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    tableServicePatchParametersValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TableServiceGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TableServiceGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            TableServiceResponseResource resourceInstance = new TableServiceResponseResource();
                            result.Resource = resourceInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                TableServiceResponse propertiesInstance = new TableServiceResponse();
                                resourceInstance.TableService = propertiesInstance;
                                
                                JToken settingsValue2 = propertiesValue2["settings"];
                                if (settingsValue2 != null && settingsValue2.Type != JTokenType.Null)
                                {
                                    TableServiceSettings settingsInstance = new TableServiceSettings();
                                    propertiesInstance.Settings = settingsInstance;
                                    
                                    JToken frontEndHttpListenPortValue = settingsValue2["frontEndHttpListenPort"];
                                    if (frontEndHttpListenPortValue != null && frontEndHttpListenPortValue.Type != JTokenType.Null)
                                    {
                                        int frontEndHttpListenPortInstance = ((int)frontEndHttpListenPortValue);
                                        settingsInstance.FrontEndHttpListenPort = frontEndHttpListenPortInstance;
                                    }
                                    
                                    JToken frontEndHttpsListenPortValue = settingsValue2["frontEndHttpsListenPort"];
                                    if (frontEndHttpsListenPortValue != null && frontEndHttpsListenPortValue.Type != JTokenType.Null)
                                    {
                                        int frontEndHttpsListenPortInstance = ((int)frontEndHttpsListenPortValue);
                                        settingsInstance.FrontEndHttpsListenPort = frontEndHttpsListenPortInstance;
                                    }
                                    
                                    JToken frontEndCallbackThreadsCountValue = settingsValue2["frontEndCallbackThreadsCount"];
                                    if (frontEndCallbackThreadsCountValue != null && frontEndCallbackThreadsCountValue.Type != JTokenType.Null)
                                    {
                                        int frontEndCallbackThreadsCountInstance = ((int)frontEndCallbackThreadsCountValue);
                                        settingsInstance.FrontEndCallbackThreadsCount = frontEndCallbackThreadsCountInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingEnabledValue = settingsValue2["frontEndCpuBasedKeepAliveThrottlingEnabled"];
                                    if (frontEndCpuBasedKeepAliveThrottlingEnabledValue != null && frontEndCpuBasedKeepAliveThrottlingEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndCpuBasedKeepAliveThrottlingEnabledInstance = ((bool)frontEndCpuBasedKeepAliveThrottlingEnabledValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingEnabled = frontEndCpuBasedKeepAliveThrottlingEnabledInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue = settingsValue2["frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold"];
                                    if (frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue != null && frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue.Type != JTokenType.Null)
                                    {
                                        double frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdInstance = ((double)frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold = frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue = settingsValue2["frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle"];
                                    if (frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue != null && frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue.Type != JTokenType.Null)
                                    {
                                        double frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleInstance = ((double)frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle = frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue = settingsValue2["frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds"];
                                    if (frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue != null && frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsInstance = ((int)frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds = frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsInstance;
                                    }
                                    
                                    JToken frontEndMemoryThrottlingEnabledValue = settingsValue2["frontEndMemoryThrottlingEnabled"];
                                    if (frontEndMemoryThrottlingEnabledValue != null && frontEndMemoryThrottlingEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndMemoryThrottlingEnabledInstance = ((bool)frontEndMemoryThrottlingEnabledValue);
                                        settingsInstance.FrontEndMemoryThrottlingEnabled = frontEndMemoryThrottlingEnabledInstance;
                                    }
                                    
                                    JToken frontEndMaxMillisecondsBetweenMemorySamplesValue = settingsValue2["frontEndMaxMillisecondsBetweenMemorySamples"];
                                    if (frontEndMaxMillisecondsBetweenMemorySamplesValue != null && frontEndMaxMillisecondsBetweenMemorySamplesValue.Type != JTokenType.Null)
                                    {
                                        int frontEndMaxMillisecondsBetweenMemorySamplesInstance = ((int)frontEndMaxMillisecondsBetweenMemorySamplesValue);
                                        settingsInstance.FrontEndMaxMillisecondsBetweenMemorySamples = frontEndMaxMillisecondsBetweenMemorySamplesInstance;
                                    }
                                    
                                    JToken frontEndMemoryThrottleThresholdSettingsValue = settingsValue2["frontEndMemoryThrottleThresholdSettings"];
                                    if (frontEndMemoryThrottleThresholdSettingsValue != null && frontEndMemoryThrottleThresholdSettingsValue.Type != JTokenType.Null)
                                    {
                                        string frontEndMemoryThrottleThresholdSettingsInstance = ((string)frontEndMemoryThrottleThresholdSettingsValue);
                                        settingsInstance.FrontEndMemoryThrottleThresholdSettings = frontEndMemoryThrottleThresholdSettingsInstance;
                                    }
                                    
                                    JToken frontEndMinThreadPoolThreadsValue = settingsValue2["frontEndMinThreadPoolThreads"];
                                    if (frontEndMinThreadPoolThreadsValue != null && frontEndMinThreadPoolThreadsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndMinThreadPoolThreadsInstance = ((int)frontEndMinThreadPoolThreadsValue);
                                        settingsInstance.FrontEndMinimumThreadPoolThreads = frontEndMinThreadPoolThreadsInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue = settingsValue2["frontEndThreadPoolBasedKeepAliveIOCompletionThreshold"];
                                    if (frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue != null && frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveIOCompletionThresholdInstance = ((int)frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveIOCompletionThreshold = frontEndThreadPoolBasedKeepAliveIOCompletionThresholdInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue = settingsValue2["frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold"];
                                    if (frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue != null && frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdInstance = ((int)frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveWorkerThreadThreshold = frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue = settingsValue2["frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds"];
                                    if (frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue != null && frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsInstance = ((int)frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds = frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAlivePercentageValue = settingsValue2["frontEndThreadPoolBasedKeepAlivePercentage"];
                                    if (frontEndThreadPoolBasedKeepAlivePercentageValue != null && frontEndThreadPoolBasedKeepAlivePercentageValue.Type != JTokenType.Null)
                                    {
                                        double frontEndThreadPoolBasedKeepAlivePercentageInstance = ((double)frontEndThreadPoolBasedKeepAlivePercentageValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAlivePercentage = frontEndThreadPoolBasedKeepAlivePercentageInstance;
                                    }
                                    
                                    JToken frontEndUseSlaTimeInAvailabilityValue = settingsValue2["frontEndUseSlaTimeInAvailability"];
                                    if (frontEndUseSlaTimeInAvailabilityValue != null && frontEndUseSlaTimeInAvailabilityValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndUseSlaTimeInAvailabilityInstance = ((bool)frontEndUseSlaTimeInAvailabilityValue);
                                        settingsInstance.FrontEndUseSlaTimeInAvailability = frontEndUseSlaTimeInAvailabilityInstance;
                                    }
                                }
                                
                                JToken versionValue = propertiesValue2["version"];
                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                {
                                    string versionInstance = ((string)versionValue);
                                    propertiesInstance.Version = versionInstance;
                                }
                                
                                JToken healthStatusValue = propertiesValue2["healthStatus"];
                                if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                {
                                    HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                    propertiesInstance.HealthStatus = healthStatusInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                resourceInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                resourceInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                resourceInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                resourceInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    resourceInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
