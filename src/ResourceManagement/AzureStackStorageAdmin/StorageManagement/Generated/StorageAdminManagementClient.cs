// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Xml;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.AzureStack.AzureConsistentStorage;
using Microsoft.AzureStack.AzureConsistentStorage.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.AzureStack.AzureConsistentStorage
{
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class Acquisition
    {
        private string _acquisitionId;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string AcquisitionId
        {
            get { return this._acquisitionId; }
            set { this._acquisitionId = value; }
        }
        
        private string _blob;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string Blob
        {
            get { return this._blob; }
            set { this._blob = value; }
        }
        
        private string _container;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string Container
        {
            get { return this._container; }
            set { this._container = value; }
        }
        
        private string _filePath;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string FilePath
        {
            get { return this._filePath; }
            set { this._filePath = value; }
        }
        
        private long _maximumBlobSize;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public long MaximumBlobSize
        {
            get { return this._maximumBlobSize; }
            set { this._maximumBlobSize = value; }
        }
        
        private AcquisitionStatus _status;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public AcquisitionStatus Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        private string _storageAccountName;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string StorageAccountName
        {
            get { return this._storageAccountName; }
            set { this._storageAccountName = value; }
        }
        
        private Guid _tenantSubscriptionId;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public Guid TenantSubscriptionId
        {
            get { return this._tenantSubscriptionId; }
            set { this._tenantSubscriptionId = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Acquisition class.
        /// </summary>
        public Acquisition()
        {
        }
    }

    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class AcquisitionModel : Microsoft.AzureStack.AzureConsistentStorage.Models.ResourceBase
    {
        private Acquisition _properties;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public Acquisition Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AcquisitionModel class.
        /// </summary>
        public AcquisitionModel()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public enum AcquisitionStatus
    {
        InProgress = 0,
        
        Success = 1,
        
        Failed = 2,
    }
}

namespace Microsoft.AzureStack.AzureConsistentStorage.Models
{
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class AcquisitionGetResponse : AzureOperationResponse
    {
        private AcquisitionModel _acquisition;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public AcquisitionModel Acquisition
        {
            get { return this._acquisition; }
            set { this._acquisition = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AcquisitionGetResponse class.
        /// </summary>
        public AcquisitionGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class AcquisitionListResponse : AzureOperationResponse, IEnumerable<AcquisitionModel>
    {
        private IList<AcquisitionModel> _acquisitions;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public IList<AcquisitionModel> Acquisitions
        {
            get { return this._acquisitions; }
            set { this._acquisitions = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AcquisitionListResponse class.
        /// </summary>
        public AcquisitionListResponse()
        {
            this.Acquisitions = new LazyList<AcquisitionModel>();
        }
        
        /// <summary>
        /// Gets the sequence of Acquisitions.
        /// </summary>
        public IEnumerator<AcquisitionModel> GetEnumerator()
        {
            return this.Acquisitions.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of Acquisitions.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class BlobServiceGetResponse : AzureOperationResponse
    {
        private BlobServiceResponseResource _resource;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public BlobServiceResponseResource Resource
        {
            get { return this._resource; }
            set { this._resource = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BlobServiceGetResponse class.
        /// </summary>
        public BlobServiceGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class BlobServiceResponse : ServiceResponse
    {
        private BlobServiceSettings _settings;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public BlobServiceSettings Settings
        {
            get { return this._settings; }
            set { this._settings = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BlobServiceResponse class.
        /// </summary>
        public BlobServiceResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class BlobServiceResponseResource : ResourceBase
    {
        private BlobServiceResponse _blobService;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public BlobServiceResponse BlobService
        {
            get { return this._blobService; }
            set { this._blobService = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BlobServiceResponseResource class.
        /// </summary>
        public BlobServiceResponseResource()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class BlobServiceSettings : BlobServiceWritableSettings
    {
        private int? _frontEndHttpListenPort;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndHttpListenPort
        {
            get { return this._frontEndHttpListenPort; }
            set { this._frontEndHttpListenPort = value; }
        }
        
        private int? _frontEndHttpsListenPort;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndHttpsListenPort
        {
            get { return this._frontEndHttpsListenPort; }
            set { this._frontEndHttpsListenPort = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BlobServiceSettings class.
        /// </summary>
        public BlobServiceSettings()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class BlobServiceWritableSettings
    {
        private int? _blobSvcContainerGcIntervalInMilliseconds;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? BlobSvcContainerGcIntervalInMilliseconds
        {
            get { return this._blobSvcContainerGcIntervalInMilliseconds; }
            set { this._blobSvcContainerGcIntervalInMilliseconds = value; }
        }
        
        private int? _blobSvcShallowGcIntervalInMilliseconds;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? BlobSvcShallowGcIntervalInMilliseconds
        {
            get { return this._blobSvcShallowGcIntervalInMilliseconds; }
            set { this._blobSvcShallowGcIntervalInMilliseconds = value; }
        }
        
        private int? _blobSvcStreamMapMinContainerOccupancyPercent;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? BlobSvcStreamMapMinContainerOccupancyPercent
        {
            get { return this._blobSvcStreamMapMinContainerOccupancyPercent; }
            set { this._blobSvcStreamMapMinContainerOccupancyPercent = value; }
        }
        
        private int? _frontEndCallbackThreadsCount;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndCallbackThreadsCount
        {
            get { return this._frontEndCallbackThreadsCount; }
            set { this._frontEndCallbackThreadsCount = value; }
        }
        
        private int? _frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds; }
            set { this._frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds = value; }
        }
        
        private bool? _frontEndCpuBasedKeepAliveThrottlingEnabled;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public bool? FrontEndCpuBasedKeepAliveThrottlingEnabled
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingEnabled; }
            set { this._frontEndCpuBasedKeepAliveThrottlingEnabled = value; }
        }
        
        private double? _frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? FrontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold; }
            set { this._frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold = value; }
        }
        
        private double? _frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? FrontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle; }
            set { this._frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle = value; }
        }
        
        private int? _frontEndMaxMillisecondsBetweenMemorySamples;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndMaxMillisecondsBetweenMemorySamples
        {
            get { return this._frontEndMaxMillisecondsBetweenMemorySamples; }
            set { this._frontEndMaxMillisecondsBetweenMemorySamples = value; }
        }
        
        private string _frontEndMemoryThrottleThresholdSettings;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string FrontEndMemoryThrottleThresholdSettings
        {
            get { return this._frontEndMemoryThrottleThresholdSettings; }
            set { this._frontEndMemoryThrottleThresholdSettings = value; }
        }
        
        private bool? _frontEndMemoryThrottlingEnabled;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public bool? FrontEndMemoryThrottlingEnabled
        {
            get { return this._frontEndMemoryThrottlingEnabled; }
            set { this._frontEndMemoryThrottlingEnabled = value; }
        }
        
        private int? _frontEndMinimumThreadPoolThreads;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndMinimumThreadPoolThreads
        {
            get { return this._frontEndMinimumThreadPoolThreads; }
            set { this._frontEndMinimumThreadPoolThreads = value; }
        }
        
        private int? _frontEndThreadPoolBasedKeepAliveIOCompletionThreshold;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndThreadPoolBasedKeepAliveIOCompletionThreshold
        {
            get { return this._frontEndThreadPoolBasedKeepAliveIOCompletionThreshold; }
            set { this._frontEndThreadPoolBasedKeepAliveIOCompletionThreshold = value; }
        }
        
        private int? _frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds
        {
            get { return this._frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds; }
            set { this._frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds = value; }
        }
        
        private double? _frontEndThreadPoolBasedKeepAlivePercentage;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? FrontEndThreadPoolBasedKeepAlivePercentage
        {
            get { return this._frontEndThreadPoolBasedKeepAlivePercentage; }
            set { this._frontEndThreadPoolBasedKeepAlivePercentage = value; }
        }
        
        private int? _frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndThreadPoolBasedKeepAliveWorkerThreadThreshold
        {
            get { return this._frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold; }
            set { this._frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold = value; }
        }
        
        private bool? _frontEndUseSlaTimeInAvailability;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public bool? FrontEndUseSlaTimeInAvailability
        {
            get { return this._frontEndUseSlaTimeInAvailability; }
            set { this._frontEndUseSlaTimeInAvailability = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BlobServiceWritableSettings class.
        /// </summary>
        public BlobServiceWritableSettings()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class Container
    {
        private ulong? _containerId;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public ulong? ContainerId
        {
            get { return this._containerId; }
            set { this._containerId = value; }
        }
        
        private string _containerName;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string ContainerName
        {
            get { return this._containerName; }
            set { this._containerName = value; }
        }
        
        private string _containerState;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string ContainerState
        {
            get { return this._containerState; }
            set { this._containerState = value; }
        }
        
        private string _shareName;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string ShareName
        {
            get { return this._shareName; }
            set { this._shareName = value; }
        }
        
        private string _storageAccountId;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string StorageAccountId
        {
            get { return this._storageAccountId; }
            set { this._storageAccountId = value; }
        }
        
        private string _storageAccountName;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string StorageAccountName
        {
            get { return this._storageAccountName; }
            set { this._storageAccountName = value; }
        }
        
        private ulong? _usedBytesInPrimaryVolume;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public ulong? UsedBytesInPrimaryVolume
        {
            get { return this._usedBytesInPrimaryVolume; }
            set { this._usedBytesInPrimaryVolume = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Container class.
        /// </summary>
        public Container()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class ContainerListResponse : AzureOperationResponse, IEnumerable<Container>
    {
        private IList<Container> _containers;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public IList<Container> Containers
        {
            get { return this._containers; }
            set { this._containers = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ContainerListResponse class.
        /// </summary>
        public ContainerListResponse()
        {
            this.Containers = new LazyList<Container>();
        }
        
        /// <summary>
        /// Gets the sequence of Containers.
        /// </summary>
        public IEnumerator<Container> GetEnumerator()
        {
            return this.Containers.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of Containers.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class ContainerModel : ResourceBase
    {
        private Container _properties;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public Container Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ContainerModel class.
        /// </summary>
        public ContainerModel()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class DestinationShareListResponse : AzureOperationResponse, IEnumerable<ShareModel>
    {
        private IList<ShareModel> _shares;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public IList<ShareModel> Shares
        {
            get { return this._shares; }
            set { this._shares = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DestinationShareListResponse
        /// class.
        /// </summary>
        public DestinationShareListResponse()
        {
            this.Shares = new LazyList<ShareModel>();
        }
        
        /// <summary>
        /// Gets the sequence of Shares.
        /// </summary>
        public IEnumerator<ShareModel> GetEnumerator()
        {
            return this.Shares.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of Shares.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class Farm : FarmBase
    {
        private HealthStatus _healthStatus;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public HealthStatus HealthStatus
        {
            get { return this._healthStatus; }
            set { this._healthStatus = value; }
        }
        
        private string _settingsStore;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string SettingsStore
        {
            get { return this._settingsStore; }
            set { this._settingsStore = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Farm class.
        /// </summary>
        public Farm()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class FarmBase
    {
        private FarmSettings _settings;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public FarmSettings Settings
        {
            get { return this._settings; }
            set { this._settings = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the FarmBase class.
        /// </summary>
        public FarmBase()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class FarmCreate
    {
        private string _settingAccessString;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string SettingAccessString
        {
            get { return this._settingAccessString; }
            set { this._settingAccessString = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the FarmCreate class.
        /// </summary>
        public FarmCreate()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class FarmCreateParameters : ResourceBase
    {
        private FarmCreate _properties;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public FarmCreate Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the FarmCreateParameters class.
        /// </summary>
        public FarmCreateParameters()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class FarmGetResponse : AzureOperationResponse
    {
        private FarmModel _farm;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public FarmModel Farm
        {
            get { return this._farm; }
            set { this._farm = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the FarmGetResponse class.
        /// </summary>
        public FarmGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class FarmListResponse : AzureOperationResponse, IEnumerable<FarmModel>
    {
        private IList<FarmModel> _farms;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public IList<FarmModel> Farms
        {
            get { return this._farms; }
            set { this._farms = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the FarmListResponse class.
        /// </summary>
        public FarmListResponse()
        {
            this.Farms = new LazyList<FarmModel>();
        }
        
        /// <summary>
        /// Gets the sequence of Farms.
        /// </summary>
        public IEnumerator<FarmModel> GetEnumerator()
        {
            return this.Farms.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of Farms.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class FarmModel : ResourceBase
    {
        private Farm _properties;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public Farm Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the FarmModel class.
        /// </summary>
        public FarmModel()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class FarmSettings
    {
        private bool? _bandwidthThrottleIsEnabled;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public bool? BandwidthThrottleIsEnabled
        {
            get { return this._bandwidthThrottleIsEnabled; }
            set { this._bandwidthThrottleIsEnabled = value; }
        }
        
        private string _corsAllowedOriginsList;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string CorsAllowedOriginsList
        {
            get { return this._corsAllowedOriginsList; }
            set { this._corsAllowedOriginsList = value; }
        }
        
        private string _dataCenterUriHostSuffixes;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string DataCenterUriHostSuffixes
        {
            get { return this._dataCenterUriHostSuffixes; }
            set { this._dataCenterUriHostSuffixes = value; }
        }
        
        private double? _defaultEgressThresholdInGbps;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? DefaultEgressThresholdInGbps
        {
            get { return this._defaultEgressThresholdInGbps; }
            set { this._defaultEgressThresholdInGbps = value; }
        }
        
        private double? _defaultIngressThresholdInGbps;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? DefaultIngressThresholdInGbps
        {
            get { return this._defaultIngressThresholdInGbps; }
            set { this._defaultIngressThresholdInGbps = value; }
        }
        
        private double? _defaultIntranetEgressThresholdInGbps;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? DefaultIntranetEgressThresholdInGbps
        {
            get { return this._defaultIntranetEgressThresholdInGbps; }
            set { this._defaultIntranetEgressThresholdInGbps = value; }
        }
        
        private double? _defaultIntranetIngressThresholdInGbps;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? DefaultIntranetIngressThresholdInGbps
        {
            get { return this._defaultIntranetIngressThresholdInGbps; }
            set { this._defaultIntranetIngressThresholdInGbps = value; }
        }
        
        private double? _defaultRequestThresholdInTps;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? DefaultRequestThresholdInTps
        {
            get { return this._defaultRequestThresholdInTps; }
            set { this._defaultRequestThresholdInTps = value; }
        }
        
        private int? _defaultThrottleProbabilityDecayIntervalInSeconds;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? DefaultThrottleProbabilityDecayIntervalInSeconds
        {
            get { return this._defaultThrottleProbabilityDecayIntervalInSeconds; }
            set { this._defaultThrottleProbabilityDecayIntervalInSeconds = value; }
        }
        
        private double? _defaultTotalEgressThresholdInGbps;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? DefaultTotalEgressThresholdInGbps
        {
            get { return this._defaultTotalEgressThresholdInGbps; }
            set { this._defaultTotalEgressThresholdInGbps = value; }
        }
        
        private double? _defaultTotalIngressThresholdInGbps;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? DefaultTotalIngressThresholdInGbps
        {
            get { return this._defaultTotalIngressThresholdInGbps; }
            set { this._defaultTotalIngressThresholdInGbps = value; }
        }
        
        private int? _feedbackRefreshIntervalInSeconds;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FeedbackRefreshIntervalInSeconds
        {
            get { return this._feedbackRefreshIntervalInSeconds; }
            set { this._feedbackRefreshIntervalInSeconds = value; }
        }
        
        private int? _gracePeriodForFullThrottlingInRefreshIntervals;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? GracePeriodForFullThrottlingInRefreshIntervals
        {
            get { return this._gracePeriodForFullThrottlingInRefreshIntervals; }
            set { this._gracePeriodForFullThrottlingInRefreshIntervals = value; }
        }
        
        private double? _gracePeriodMaxThrottleProbability;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? GracePeriodMaxThrottleProbability
        {
            get { return this._gracePeriodMaxThrottleProbability; }
            set { this._gracePeriodMaxThrottleProbability = value; }
        }
        
        private int? _hostStyleHttpPort;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? HostStyleHttpPort
        {
            get { return this._hostStyleHttpPort; }
            set { this._hostStyleHttpPort = value; }
        }
        
        private int? _hostStyleHttpsPort;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? HostStyleHttpsPort
        {
            get { return this._hostStyleHttpsPort; }
            set { this._hostStyleHttpsPort = value; }
        }
        
        private double? _minimumEgressThresholdInGbps;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? MinimumEgressThresholdInGbps
        {
            get { return this._minimumEgressThresholdInGbps; }
            set { this._minimumEgressThresholdInGbps = value; }
        }
        
        private double? _minimumIngressThresholdInGbps;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? MinimumIngressThresholdInGbps
        {
            get { return this._minimumIngressThresholdInGbps; }
            set { this._minimumIngressThresholdInGbps = value; }
        }
        
        private double? _minimumIntranetEgressThresholdInGbps;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? MinimumIntranetEgressThresholdInGbps
        {
            get { return this._minimumIntranetEgressThresholdInGbps; }
            set { this._minimumIntranetEgressThresholdInGbps = value; }
        }
        
        private double? _minimumIntranetIngressThresholdInGbps;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? MinimumIntranetIngressThresholdInGbps
        {
            get { return this._minimumIntranetIngressThresholdInGbps; }
            set { this._minimumIntranetIngressThresholdInGbps = value; }
        }
        
        private double? _minimumRequestThresholdInTps;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? MinimumRequestThresholdInTps
        {
            get { return this._minimumRequestThresholdInTps; }
            set { this._minimumRequestThresholdInTps = value; }
        }
        
        private double? _minimumTotalEgressThresholdInGbps;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? MinimumTotalEgressThresholdInGbps
        {
            get { return this._minimumTotalEgressThresholdInGbps; }
            set { this._minimumTotalEgressThresholdInGbps = value; }
        }
        
        private double? _minimumTotalIngressThresholdInGbps;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? MinimumTotalIngressThresholdInGbps
        {
            get { return this._minimumTotalIngressThresholdInGbps; }
            set { this._minimumTotalIngressThresholdInGbps = value; }
        }
        
        private int? _numberOfAccountsToSync;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? NumberOfAccountsToSync
        {
            get { return this._numberOfAccountsToSync; }
            set { this._numberOfAccountsToSync = value; }
        }
        
        private double? _overallEgressThresholdInGbps;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? OverallEgressThresholdInGbps
        {
            get { return this._overallEgressThresholdInGbps; }
            set { this._overallEgressThresholdInGbps = value; }
        }
        
        private double? _overallIngressThresholdInGbps;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? OverallIngressThresholdInGbps
        {
            get { return this._overallIngressThresholdInGbps; }
            set { this._overallIngressThresholdInGbps = value; }
        }
        
        private double? _overallIntranetEgressThresholdInGbps;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? OverallIntranetEgressThresholdInGbps
        {
            get { return this._overallIntranetEgressThresholdInGbps; }
            set { this._overallIntranetEgressThresholdInGbps = value; }
        }
        
        private double? _overallIntranetIngressThresholdInGbps;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? OverallIntranetIngressThresholdInGbps
        {
            get { return this._overallIntranetIngressThresholdInGbps; }
            set { this._overallIntranetIngressThresholdInGbps = value; }
        }
        
        private double? _overallRequestThresholdInTps;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? OverallRequestThresholdInTps
        {
            get { return this._overallRequestThresholdInTps; }
            set { this._overallRequestThresholdInTps = value; }
        }
        
        private double? _overallTotalEgressThresholdInGbps;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? OverallTotalEgressThresholdInGbps
        {
            get { return this._overallTotalEgressThresholdInGbps; }
            set { this._overallTotalEgressThresholdInGbps = value; }
        }
        
        private double? _overallTotalIngressThresholdInGbps;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? OverallTotalIngressThresholdInGbps
        {
            get { return this._overallTotalIngressThresholdInGbps; }
            set { this._overallTotalIngressThresholdInGbps = value; }
        }
        
        private int? _retentionPeriodForDeletedStorageAccountsInDays;
        
        /// <summary>
        /// Optional. Duration within which a storage account can be recovered,
        /// beyond which the account would be garbage collected.
        /// </summary>
        public int? RetentionPeriodForDeletedStorageAccountsInDays
        {
            get { return this._retentionPeriodForDeletedStorageAccountsInDays; }
            set { this._retentionPeriodForDeletedStorageAccountsInDays = value; }
        }
        
        private int? _settingsPollingIntervalInSecond;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? SettingsPollingIntervalInSecond
        {
            get { return this._settingsPollingIntervalInSecond; }
            set { this._settingsPollingIntervalInSecond = value; }
        }
        
        private double? _toleranceFactorForEgress;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? ToleranceFactorForEgress
        {
            get { return this._toleranceFactorForEgress; }
            set { this._toleranceFactorForEgress = value; }
        }
        
        private double? _toleranceFactorForIngress;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? ToleranceFactorForIngress
        {
            get { return this._toleranceFactorForIngress; }
            set { this._toleranceFactorForIngress = value; }
        }
        
        private double? _toleranceFactorForIntranetEgress;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? ToleranceFactorForIntranetEgress
        {
            get { return this._toleranceFactorForIntranetEgress; }
            set { this._toleranceFactorForIntranetEgress = value; }
        }
        
        private double? _toleranceFactorForIntranetIngress;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? ToleranceFactorForIntranetIngress
        {
            get { return this._toleranceFactorForIntranetIngress; }
            set { this._toleranceFactorForIntranetIngress = value; }
        }
        
        private double? _toleranceFactorForTotalEgress;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? ToleranceFactorForTotalEgress
        {
            get { return this._toleranceFactorForTotalEgress; }
            set { this._toleranceFactorForTotalEgress = value; }
        }
        
        private double? _toleranceFactorForTotalIngress;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? ToleranceFactorForTotalIngress
        {
            get { return this._toleranceFactorForTotalIngress; }
            set { this._toleranceFactorForTotalIngress = value; }
        }
        
        private double? _toleranceFactorForTps;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? ToleranceFactorForTps
        {
            get { return this._toleranceFactorForTps; }
            set { this._toleranceFactorForTps = value; }
        }
        
        private int? _usageCollectionIntervalInSeconds;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? UsageCollectionIntervalInSeconds
        {
            get { return this._usageCollectionIntervalInSeconds; }
            set { this._usageCollectionIntervalInSeconds = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the FarmSettings class.
        /// </summary>
        public FarmSettings()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class FarmUpdateParameters : ResourceBase
    {
        private FarmBase _farm;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public FarmBase Farm
        {
            get { return this._farm; }
            set { this._farm = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the FarmUpdateParameters class.
        /// </summary>
        public FarmUpdateParameters()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public enum HealthStatus
    {
        Unknown = 0,
        
        Healthy = 1,
        
        Warning = 2,
        
        Critical = 3,
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class LocalizableString
    {
        private string _localizedValue;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string LocalizedValue
        {
            get { return this._localizedValue; }
            set { this._localizedValue = value; }
        }
        
        private string _value;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the LocalizableString class.
        /// </summary>
        public LocalizableString()
        {
        }
    }
    
    /// <summary>
    /// A standard service response for long running operations.
    /// </summary>
    public partial class LongRunningOperationResponse : AzureOperationResponse
    {
        private StorageAdminError _error;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public StorageAdminError Error
        {
            get { return this._error; }
            set { this._error = value; }
        }
        
        private string _operationStatusLink;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string OperationStatusLink
        {
            get { return this._operationStatusLink; }
            set { this._operationStatusLink = value; }
        }
        
        private int _retryAfter;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public int RetryAfter
        {
            get { return this._retryAfter; }
            set { this._retryAfter = value; }
        }
        
        private OperationStatus _status;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public OperationStatus Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the LongRunningOperationResponse
        /// class.
        /// </summary>
        public LongRunningOperationResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class Metric
    {
        private DateTime _endTime;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public DateTime EndTime
        {
            get { return this._endTime; }
            set { this._endTime = value; }
        }
        
        private MetricUnit _metricUnit;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public MetricUnit MetricUnit
        {
            get { return this._metricUnit; }
            set { this._metricUnit = value; }
        }
        
        private IList<MetricValue> _metricValues;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public IList<MetricValue> MetricValues
        {
            get { return this._metricValues; }
            set { this._metricValues = value; }
        }
        
        private LocalizableString _name;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public LocalizableString Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private DateTime _startTime;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public DateTime StartTime
        {
            get { return this._startTime; }
            set { this._startTime = value; }
        }
        
        private TimeSpan _timeGrain;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public TimeSpan TimeGrain
        {
            get { return this._timeGrain; }
            set { this._timeGrain = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Metric class.
        /// </summary>
        public Metric()
        {
            this.MetricValues = new LazyList<MetricValue>();
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class MetricAvailability
    {
        private TimeSpan _retention;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public TimeSpan Retention
        {
            get { return this._retention; }
            set { this._retention = value; }
        }
        
        private TimeSpan _timeGrain;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public TimeSpan TimeGrain
        {
            get { return this._timeGrain; }
            set { this._timeGrain = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricAvailability class.
        /// </summary>
        public MetricAvailability()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class MetricDefinition
    {
        private IList<MetricAvailability> _metricAvailabilities;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public IList<MetricAvailability> MetricAvailabilities
        {
            get { return this._metricAvailabilities; }
            set { this._metricAvailabilities = value; }
        }
        
        private LocalizableString _name;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public LocalizableString Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private MetricPrimaryAggregationType _primaryAggregationType;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public MetricPrimaryAggregationType PrimaryAggregationType
        {
            get { return this._primaryAggregationType; }
            set { this._primaryAggregationType = value; }
        }
        
        private MetricUnit _unit;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public MetricUnit Unit
        {
            get { return this._unit; }
            set { this._unit = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricDefinition class.
        /// </summary>
        public MetricDefinition()
        {
            this.MetricAvailabilities = new LazyList<MetricAvailability>();
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class MetricDefinitionsResult : AzureOperationResponse
    {
        private IList<MetricDefinition> _value;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public IList<MetricDefinition> Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricDefinitionsResult class.
        /// </summary>
        public MetricDefinitionsResult()
        {
            this.Value = new LazyList<MetricDefinition>();
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public enum MetricPrimaryAggregationType
    {
        None = 0,
        
        Average = 1,
        
        Total = 2,
        
        Minimum = 3,
        
        Maximum = 4,
        
        Last = 5,
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class MetricsResult : AzureOperationResponse
    {
        private IList<Metric> _metrics;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public IList<Metric> Metrics
        {
            get { return this._metrics; }
            set { this._metrics = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricsResult class.
        /// </summary>
        public MetricsResult()
        {
            this.Metrics = new LazyList<Metric>();
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public enum MetricUnit
    {
        Count = 0,
        
        Bytes = 1,
        
        Seconds = 2,
        
        CountPerSecond = 3,
        
        BytesPerSecond = 4,
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class MetricValue
    {
        private double? _average;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? Average
        {
            get { return this._average; }
            set { this._average = value; }
        }
        
        private int? _count;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? Count
        {
            get { return this._count; }
            set { this._count = value; }
        }
        
        private double? _maximum;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? Maximum
        {
            get { return this._maximum; }
            set { this._maximum = value; }
        }
        
        private double? _minimum;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? Minimum
        {
            get { return this._minimum; }
            set { this._minimum = value; }
        }
        
        private string _properties;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        private DateTime _timeStamp;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public DateTime TimeStamp
        {
            get { return this._timeStamp; }
            set { this._timeStamp = value; }
        }
        
        private double? _total;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? Total
        {
            get { return this._total; }
            set { this._total = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricValue class.
        /// </summary>
        public MetricValue()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class MigrateContainerResponse : AzureOperationResponse
    {
        private string _location;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MigrateContainerResponse class.
        /// </summary>
        public MigrateContainerResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class MigrationParameters : ResourceBase
    {
        private string _containerName;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string ContainerName
        {
            get { return this._containerName; }
            set { this._containerName = value; }
        }
        
        private string _destinationShareUncPath;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string DestinationShareUncPath
        {
            get { return this._destinationShareUncPath; }
            set { this._destinationShareUncPath = value; }
        }
        
        private string _storageAccountName;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string StorageAccountName
        {
            get { return this._storageAccountName; }
            set { this._storageAccountName = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MigrationParameters class.
        /// </summary>
        public MigrationParameters()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class MigrationResult : AzureOperationResponse
    {
        private string _containerName;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string ContainerName
        {
            get { return this._containerName; }
            set { this._containerName = value; }
        }
        
        private string _destinationShareName;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string DestinationShareName
        {
            get { return this._destinationShareName; }
            set { this._destinationShareName = value; }
        }
        
        private string _failureReason;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string FailureReason
        {
            get { return this._failureReason; }
            set { this._failureReason = value; }
        }
        
        private string _jobId;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string JobId
        {
            get { return this._jobId; }
            set { this._jobId = value; }
        }
        
        private string _migrationStatus;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string MigrationStatus
        {
            get { return this._migrationStatus; }
            set { this._migrationStatus = value; }
        }
        
        private string _sourceShareName;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string SourceShareName
        {
            get { return this._sourceShareName; }
            set { this._sourceShareName = value; }
        }
        
        private string _storageAccountName;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string StorageAccountName
        {
            get { return this._storageAccountName; }
            set { this._storageAccountName = value; }
        }
        
        private ulong? _subEntitiesCompleted;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public ulong? SubEntitiesCompleted
        {
            get { return this._subEntitiesCompleted; }
            set { this._subEntitiesCompleted = value; }
        }
        
        private ulong? _subEntitiesFailed;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public ulong? SubEntitiesFailed
        {
            get { return this._subEntitiesFailed; }
            set { this._subEntitiesFailed = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MigrationResult class.
        /// </summary>
        public MigrationResult()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class QueueServiceGetResponse : AzureOperationResponse
    {
        private QueueServiceResponseResource _resource;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public QueueServiceResponseResource Resource
        {
            get { return this._resource; }
            set { this._resource = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the QueueServiceGetResponse class.
        /// </summary>
        public QueueServiceGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class QueueServiceResponse : ServiceResponse
    {
        private QueueServiceSettings _settings;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public QueueServiceSettings Settings
        {
            get { return this._settings; }
            set { this._settings = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the QueueServiceResponse class.
        /// </summary>
        public QueueServiceResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class QueueServiceResponseResource : ResourceBase
    {
        private QueueServiceResponse _queueService;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public QueueServiceResponse QueueService
        {
            get { return this._queueService; }
            set { this._queueService = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the QueueServiceResponseResource
        /// class.
        /// </summary>
        public QueueServiceResponseResource()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class QueueServiceSettings : QueueServiceWritableSettings
    {
        private int? _frontEndHttpListenPort;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndHttpListenPort
        {
            get { return this._frontEndHttpListenPort; }
            set { this._frontEndHttpListenPort = value; }
        }
        
        private int? _frontEndHttpsListenPort;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndHttpsListenPort
        {
            get { return this._frontEndHttpsListenPort; }
            set { this._frontEndHttpsListenPort = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the QueueServiceSettings class.
        /// </summary>
        public QueueServiceSettings()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class QueueServiceWritableSettings
    {
        private int? _frontEndCallbackThreadsCount;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndCallbackThreadsCount
        {
            get { return this._frontEndCallbackThreadsCount; }
            set { this._frontEndCallbackThreadsCount = value; }
        }
        
        private int? _frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds; }
            set { this._frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds = value; }
        }
        
        private bool? _frontEndCpuBasedKeepAliveThrottlingEnabled;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public bool? FrontEndCpuBasedKeepAliveThrottlingEnabled
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingEnabled; }
            set { this._frontEndCpuBasedKeepAliveThrottlingEnabled = value; }
        }
        
        private double? _frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? FrontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold; }
            set { this._frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold = value; }
        }
        
        private double? _frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? FrontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle; }
            set { this._frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle = value; }
        }
        
        private int? _frontEndMaxMillisecondsBetweenMemorySamples;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndMaxMillisecondsBetweenMemorySamples
        {
            get { return this._frontEndMaxMillisecondsBetweenMemorySamples; }
            set { this._frontEndMaxMillisecondsBetweenMemorySamples = value; }
        }
        
        private string _frontEndMemoryThrottleThresholdSettings;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string FrontEndMemoryThrottleThresholdSettings
        {
            get { return this._frontEndMemoryThrottleThresholdSettings; }
            set { this._frontEndMemoryThrottleThresholdSettings = value; }
        }
        
        private bool? _frontEndMemoryThrottlingEnabled;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public bool? FrontEndMemoryThrottlingEnabled
        {
            get { return this._frontEndMemoryThrottlingEnabled; }
            set { this._frontEndMemoryThrottlingEnabled = value; }
        }
        
        private int? _frontEndMinimumThreadPoolThreads;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndMinimumThreadPoolThreads
        {
            get { return this._frontEndMinimumThreadPoolThreads; }
            set { this._frontEndMinimumThreadPoolThreads = value; }
        }
        
        private int? _frontEndThreadPoolBasedKeepAliveIOCompletionThreshold;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndThreadPoolBasedKeepAliveIOCompletionThreshold
        {
            get { return this._frontEndThreadPoolBasedKeepAliveIOCompletionThreshold; }
            set { this._frontEndThreadPoolBasedKeepAliveIOCompletionThreshold = value; }
        }
        
        private int? _frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds
        {
            get { return this._frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds; }
            set { this._frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds = value; }
        }
        
        private double? _frontEndThreadPoolBasedKeepAlivePercentage;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? FrontEndThreadPoolBasedKeepAlivePercentage
        {
            get { return this._frontEndThreadPoolBasedKeepAlivePercentage; }
            set { this._frontEndThreadPoolBasedKeepAlivePercentage = value; }
        }
        
        private int? _frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndThreadPoolBasedKeepAliveWorkerThreadThreshold
        {
            get { return this._frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold; }
            set { this._frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold = value; }
        }
        
        private bool? _frontEndUseSlaTimeInAvailability;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public bool? FrontEndUseSlaTimeInAvailability
        {
            get { return this._frontEndUseSlaTimeInAvailability; }
            set { this._frontEndUseSlaTimeInAvailability = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the QueueServiceWritableSettings
        /// class.
        /// </summary>
        public QueueServiceWritableSettings()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class Quota
    {
        private int _capacityInGB;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public int CapacityInGB
        {
            get { return this._capacityInGB; }
            set { this._capacityInGB = value; }
        }
        
        private int _numberOfStorageAccounts;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public int NumberOfStorageAccounts
        {
            get { return this._numberOfStorageAccounts; }
            set { this._numberOfStorageAccounts = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Quota class.
        /// </summary>
        public Quota()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class QuotaCreateOrUpdateParameters : ResourceBase
    {
        private Quota _properties;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public Quota Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the QuotaCreateOrUpdateParameters
        /// class.
        /// </summary>
        public QuotaCreateOrUpdateParameters()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class QuotaGetResponse : AzureOperationResponse
    {
        private QuotaModel _quota;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public QuotaModel Quota
        {
            get { return this._quota; }
            set { this._quota = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the QuotaGetResponse class.
        /// </summary>
        public QuotaGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class QuotaListResponse : AzureOperationResponse, IEnumerable<QuotaModel>
    {
        private IList<QuotaModel> _quotas;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public IList<QuotaModel> Quotas
        {
            get { return this._quotas; }
            set { this._quotas = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the QuotaListResponse class.
        /// </summary>
        public QuotaListResponse()
        {
            this.Quotas = new LazyList<QuotaModel>();
        }
        
        /// <summary>
        /// Gets the sequence of Quotas.
        /// </summary>
        public IEnumerator<QuotaModel> GetEnumerator()
        {
            return this.Quotas.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of Quotas.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class QuotaModel : ResourceBase
    {
        private Quota _properties;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public Quota Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the QuotaModel class.
        /// </summary>
        public QuotaModel()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public enum RegionStatus
    {
        Available = 0,
        
        Unavailable = 1,
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class ResourceBase
    {
        private string _id;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _location;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private IDictionary<string, string> _tags;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public IDictionary<string, string> Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }
        
        private string _type;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string Type
        {
            get { return this._type; }
            set { this._type = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ResourceBase class.
        /// </summary>
        public ResourceBase()
        {
            this.Tags = new LazyDictionary<string, string>();
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public abstract partial class ServiceResponse
    {
        private HealthStatus _healthStatus;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public HealthStatus HealthStatus
        {
            get { return this._healthStatus; }
            set { this._healthStatus = value; }
        }
        
        private string _version;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string Version
        {
            get { return this._version; }
            set { this._version = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ServiceResponse class.
        /// </summary>
        public ServiceResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class Share
    {
        private ulong? _freeCapacity;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public ulong? FreeCapacity
        {
            get { return this._freeCapacity; }
            set { this._freeCapacity = value; }
        }
        
        private HealthStatus _healthStatus;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public HealthStatus HealthStatus
        {
            get { return this._healthStatus; }
            set { this._healthStatus = value; }
        }
        
        private string _shareName;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string ShareName
        {
            get { return this._shareName; }
            set { this._shareName = value; }
        }
        
        private ulong? _totalCapacity;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public ulong? TotalCapacity
        {
            get { return this._totalCapacity; }
            set { this._totalCapacity = value; }
        }
        
        private string _uncPath;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string UncPath
        {
            get { return this._uncPath; }
            set { this._uncPath = value; }
        }
        
        private ulong? _usedCapacity;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public ulong? UsedCapacity
        {
            get { return this._usedCapacity; }
            set { this._usedCapacity = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Share class.
        /// </summary>
        public Share()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class ShareGetResponse : AzureOperationResponse
    {
        private ShareModel _share;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public ShareModel Share
        {
            get { return this._share; }
            set { this._share = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ShareGetResponse class.
        /// </summary>
        public ShareGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class ShareListResponse : AzureOperationResponse, IEnumerable<ShareModel>
    {
        private IList<ShareModel> _shares;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public IList<ShareModel> Shares
        {
            get { return this._shares; }
            set { this._shares = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ShareListResponse class.
        /// </summary>
        public ShareListResponse()
        {
            this.Shares = new LazyList<ShareModel>();
        }
        
        /// <summary>
        /// Gets the sequence of Shares.
        /// </summary>
        public IEnumerator<ShareModel> GetEnumerator()
        {
            return this.Shares.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of Shares.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class ShareModel : ResourceBase
    {
        private Share _properties;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public Share Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ShareModel class.
        /// </summary>
        public ShareModel()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class StorageAccountGetResponse : AzureOperationResponse
    {
        private StorageAccountModel _storageAccount;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public StorageAccountModel StorageAccount
        {
            get { return this._storageAccount; }
            set { this._storageAccount = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAccountGetResponse class.
        /// </summary>
        public StorageAccountGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class StorageAccountListResponse : AzureOperationResponse, IEnumerable<StorageAccountModel>
    {
        private IList<StorageAccountModel> _storageAccounts;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public IList<StorageAccountModel> StorageAccounts
        {
            get { return this._storageAccounts; }
            set { this._storageAccounts = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAccountListResponse class.
        /// </summary>
        public StorageAccountListResponse()
        {
            this.StorageAccounts = new LazyList<StorageAccountModel>();
        }
        
        /// <summary>
        /// Gets the sequence of StorageAccounts.
        /// </summary>
        public IEnumerator<StorageAccountModel> GetEnumerator()
        {
            return this.StorageAccounts.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of StorageAccounts.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class StorageAccountModel : ResourceBase
    {
        private StorageAccountPropertiesModel _properties;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public StorageAccountPropertiesModel Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAccountModel class.
        /// </summary>
        public StorageAccountModel()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public enum StorageAccountOperation
    {
        None = 0,
        
        Create = 1,
        
        Update = 2,
        
        Suspend = 3,
        
        Delete = 4,
        
        Undelete = 5,
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class StorageAccountPropertiesModel : ResourceBase
    {
        private string _accountId;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string AccountId
        {
            get { return this._accountId; }
            set { this._accountId = value; }
        }
        
        private StorageAccountStatus _accountStatus;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public StorageAccountStatus AccountStatus
        {
            get { return this._accountStatus; }
            set { this._accountStatus = value; }
        }
        
        private StorageAccountType _accountType;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public StorageAccountType AccountType
        {
            get { return this._accountType; }
            set { this._accountType = value; }
        }
        
        private int _acquisitionOperationCount;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public int AcquisitionOperationCount
        {
            get { return this._acquisitionOperationCount; }
            set { this._acquisitionOperationCount = value; }
        }
        
        private string _alternateName;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string AlternateName
        {
            get { return this._alternateName; }
            set { this._alternateName = value; }
        }
        
        private string _creationTime;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string CreationTime
        {
            get { return this._creationTime; }
            set { this._creationTime = value; }
        }
        
        private StorageAccountOperation _currentOperation;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public StorageAccountOperation CurrentOperation
        {
            get { return this._currentOperation; }
            set { this._currentOperation = value; }
        }
        
        private string _customDomain;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string CustomDomain
        {
            get { return this._customDomain; }
            set { this._customDomain = value; }
        }
        
        private System.DateTime? _deletedTime;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public System.DateTime? DeletedTime
        {
            get { return this._deletedTime; }
            set { this._deletedTime = value; }
        }
        
        private Microsoft.AzureStack.AzureConsistentStorage.Models.WacAccountPermissions? _permissions;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public Microsoft.AzureStack.AzureConsistentStorage.Models.WacAccountPermissions? Permissions
        {
            get { return this._permissions; }
            set { this._permissions = value; }
        }
        
        private IDictionary<string, string> _primaryEndpoints;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public IDictionary<string, string> PrimaryEndpoints
        {
            get { return this._primaryEndpoints; }
            set { this._primaryEndpoints = value; }
        }
        
        private string _primaryLocation;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string PrimaryLocation
        {
            get { return this._primaryLocation; }
            set { this._primaryLocation = value; }
        }
        
        private System.DateTime? _recoveredTime;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public System.DateTime? RecoveredTime
        {
            get { return this._recoveredTime; }
            set { this._recoveredTime = value; }
        }
        
        private System.DateTime? _recycledTime;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public System.DateTime? RecycledTime
        {
            get { return this._recycledTime; }
            set { this._recycledTime = value; }
        }
        
        private string _resourceAdminApiVersion;
        
        /// <summary>
        /// Optional. your documentation here
        /// </summary>
        public string ResourceAdminApiVersion
        {
            get { return this._resourceAdminApiVersion; }
            set { this._resourceAdminApiVersion = value; }
        }
        
        private StorageAccountState _state;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public StorageAccountState State
        {
            get { return this._state; }
            set { this._state = value; }
        }
        
        private RegionStatus _statusOfPrimary;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public RegionStatus StatusOfPrimary
        {
            get { return this._statusOfPrimary; }
            set { this._statusOfPrimary = value; }
        }
        
        private string _tenantAccountName;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string TenantAccountName
        {
            get { return this._tenantAccountName; }
            set { this._tenantAccountName = value; }
        }
        
        private string _tenantResourceGroupName;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string TenantResourceGroupName
        {
            get { return this._tenantResourceGroupName; }
            set { this._tenantResourceGroupName = value; }
        }
        
        private Guid _tenantSubscriptionId;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public Guid TenantSubscriptionId
        {
            get { return this._tenantSubscriptionId; }
            set { this._tenantSubscriptionId = value; }
        }
        
        private string _tenantViewId;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string TenantViewId
        {
            get { return this._tenantViewId; }
            set { this._tenantViewId = value; }
        }
        
        private Microsoft.AzureStack.AzureConsistentStorage.Models.WacAccountStates? _wacInternalState;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public Microsoft.AzureStack.AzureConsistentStorage.Models.WacAccountStates? WacInternalState
        {
            get { return this._wacInternalState; }
            set { this._wacInternalState = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAccountPropertiesModel
        /// class.
        /// </summary>
        public StorageAccountPropertiesModel()
        {
            this.PrimaryEndpoints = new LazyDictionary<string, string>();
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public enum StorageAccountState
    {
        PreCreate = 0,
        
        Created = 1,
        
        Suspended = 2,
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public enum StorageAccountStatus
    {
        Active = 0,
        
        Deleted = 1,
        
        OutOfRetentionPeriod = 2,
        
        Recycled = 3,
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class StorageAccountSyncRequest : ResourceBase
    {
        private string _apiVersion;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string ApiVersion
        {
            get { return this._apiVersion; }
            set { this._apiVersion = value; }
        }
        
        private string _resourceLocation;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string ResourceLocation
        {
            get { return this._resourceLocation; }
            set { this._resourceLocation = value; }
        }
        
        private string _targetOperaton;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string TargetOperaton
        {
            get { return this._targetOperaton; }
            set { this._targetOperaton = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAccountSyncRequest class.
        /// </summary>
        public StorageAccountSyncRequest()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class StorageAccountSyncResponse : AzureOperationResponse
    {
        private string _correlationId;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string CorrelationId
        {
            get { return this._correlationId; }
            set { this._correlationId = value; }
        }
        
        private string _frontdoorLocation;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string FrontdoorLocation
        {
            get { return this._frontdoorLocation; }
            set { this._frontdoorLocation = value; }
        }
        
        private string _message;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string Message
        {
            get { return this._message; }
            set { this._message = value; }
        }
        
        private string _timestamp;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public string Timestamp
        {
            get { return this._timestamp; }
            set { this._timestamp = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAccountSyncResponse class.
        /// </summary>
        public StorageAccountSyncResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public enum StorageAccountType
    {
        StandardLRS = 0,
        
        StandardGRS = 1,
        
        StandardZrs = 2,
        
        StandardRagrs = 3,
        
        PremiumLrs = 4,
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class StorageAccountUndeleteParameters : ResourceBase
    {
        private string _newAccountName;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string NewAccountName
        {
            get { return this._newAccountName; }
            set { this._newAccountName = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAccountUndeleteParameters
        /// class.
        /// </summary>
        public StorageAccountUndeleteParameters()
        {
        }
    }
    
    public partial class StorageAdminError
    {
        private string _code;
        
        /// <summary>
        /// Required. Gets or sets the error code returned from the server.
        /// </summary>
        public string Code
        {
            get { return this._code; }
            set { this._code = value; }
        }
        
        private string _message;
        
        /// <summary>
        /// Required. Gets or sets the error message returned from the server.
        /// </summary>
        public string Message
        {
            get { return this._message; }
            set { this._message = value; }
        }
        
        private string _target;
        
        /// <summary>
        /// Optional. Gets or sets the target of the error.
        /// </summary>
        public string Target
        {
            get { return this._target; }
            set { this._target = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAdminError class.
        /// </summary>
        public StorageAdminError()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAdminError class with
        /// required arguments.
        /// </summary>
        public StorageAdminError(string code, string message)
            : this()
        {
            if (code == null)
            {
                throw new ArgumentNullException("code");
            }
            if (message == null)
            {
                throw new ArgumentNullException("message");
            }
            this.Code = code;
            this.Message = message;
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class TableServiceGetResponse : AzureOperationResponse
    {
        private TableServiceResponseResource _resource;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public TableServiceResponseResource Resource
        {
            get { return this._resource; }
            set { this._resource = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TableServiceGetResponse class.
        /// </summary>
        public TableServiceGetResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class TableServiceResponse : ServiceResponse
    {
        private TableServiceSettings _settings;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public TableServiceSettings Settings
        {
            get { return this._settings; }
            set { this._settings = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TableServiceResponse class.
        /// </summary>
        public TableServiceResponse()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here.
    /// </summary>
    public partial class TableServiceResponseResource : ResourceBase
    {
        private TableServiceResponse _tableService;
        
        /// <summary>
        /// Optional. Your documentation here
        /// </summary>
        public TableServiceResponse TableService
        {
            get { return this._tableService; }
            set { this._tableService = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TableServiceResponseResource
        /// class.
        /// </summary>
        public TableServiceResponseResource()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class TableServiceSettings : TableServiceWritableSettings
    {
        private int? _frontEndHttpListenPort;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndHttpListenPort
        {
            get { return this._frontEndHttpListenPort; }
            set { this._frontEndHttpListenPort = value; }
        }
        
        private int? _frontEndHttpsListenPort;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndHttpsListenPort
        {
            get { return this._frontEndHttpsListenPort; }
            set { this._frontEndHttpsListenPort = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TableServiceSettings class.
        /// </summary>
        public TableServiceSettings()
        {
        }
    }
    
    /// <summary>
    /// Your documentation here
    /// </summary>
    public partial class TableServiceWritableSettings
    {
        private int? _frontEndCallbackThreadsCount;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndCallbackThreadsCount
        {
            get { return this._frontEndCallbackThreadsCount; }
            set { this._frontEndCallbackThreadsCount = value; }
        }
        
        private int? _frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds; }
            set { this._frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds = value; }
        }
        
        private bool? _frontEndCpuBasedKeepAliveThrottlingEnabled;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public bool? FrontEndCpuBasedKeepAliveThrottlingEnabled
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingEnabled; }
            set { this._frontEndCpuBasedKeepAliveThrottlingEnabled = value; }
        }
        
        private double? _frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? FrontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold; }
            set { this._frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold = value; }
        }
        
        private double? _frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? FrontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle
        {
            get { return this._frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle; }
            set { this._frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle = value; }
        }
        
        private int? _frontEndMaxMillisecondsBetweenMemorySamples;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndMaxMillisecondsBetweenMemorySamples
        {
            get { return this._frontEndMaxMillisecondsBetweenMemorySamples; }
            set { this._frontEndMaxMillisecondsBetweenMemorySamples = value; }
        }
        
        private string _frontEndMemoryThrottleThresholdSettings;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public string FrontEndMemoryThrottleThresholdSettings
        {
            get { return this._frontEndMemoryThrottleThresholdSettings; }
            set { this._frontEndMemoryThrottleThresholdSettings = value; }
        }
        
        private bool? _frontEndMemoryThrottlingEnabled;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public bool? FrontEndMemoryThrottlingEnabled
        {
            get { return this._frontEndMemoryThrottlingEnabled; }
            set { this._frontEndMemoryThrottlingEnabled = value; }
        }
        
        private int? _frontEndMinimumThreadPoolThreads;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndMinimumThreadPoolThreads
        {
            get { return this._frontEndMinimumThreadPoolThreads; }
            set { this._frontEndMinimumThreadPoolThreads = value; }
        }
        
        private int? _frontEndThreadPoolBasedKeepAliveIOCompletionThreshold;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndThreadPoolBasedKeepAliveIOCompletionThreshold
        {
            get { return this._frontEndThreadPoolBasedKeepAliveIOCompletionThreshold; }
            set { this._frontEndThreadPoolBasedKeepAliveIOCompletionThreshold = value; }
        }
        
        private int? _frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds
        {
            get { return this._frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds; }
            set { this._frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds = value; }
        }
        
        private double? _frontEndThreadPoolBasedKeepAlivePercentage;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public double? FrontEndThreadPoolBasedKeepAlivePercentage
        {
            get { return this._frontEndThreadPoolBasedKeepAlivePercentage; }
            set { this._frontEndThreadPoolBasedKeepAlivePercentage = value; }
        }
        
        private int? _frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public int? FrontEndThreadPoolBasedKeepAliveWorkerThreadThreshold
        {
            get { return this._frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold; }
            set { this._frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold = value; }
        }
        
        private bool? _frontEndUseSlaTimeInAvailability;
        
        /// <summary>
        /// Optional. Your documentation here.
        /// </summary>
        public bool? FrontEndUseSlaTimeInAvailability
        {
            get { return this._frontEndUseSlaTimeInAvailability; }
            set { this._frontEndUseSlaTimeInAvailability = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TableServiceWritableSettings
        /// class.
        /// </summary>
        public TableServiceWritableSettings()
        {
        }
    }
    
    [Flags]
    public enum WacAccountPermissions
    {
        Empty = 0,
        
        None = 2,
        
        Read = 4,
        
        Delete = 8,
        
        Write = 16,
        
        Full = 2147483644,
    }
    
    [Flags]
    public enum WacAccountStates
    {
        None = 0,
        
        Active = 1,
        
        Deleted = 2,
        
        AboveQuota = 4,
        
        Suspended = 8,
        
        All = 15,
    }
}

namespace Microsoft.AzureStack.AzureConsistentStorage
{
    public static partial class StorageAdminManagementClientExtensions
    {
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IStorageAdminManagementClient.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse GetLongRunningOperationStatus(this IStorageAdminManagementClient operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAdminManagementClient)s).GetLongRunningOperationStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IStorageAdminManagementClient.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> GetLongRunningOperationStatusAsync(this IStorageAdminManagementClient operations, string operationStatusLink)
        {
            return operations.GetLongRunningOperationStatusAsync(operationStatusLink, CancellationToken.None);
        }
    }
    
    public partial interface IStorageAdminManagementClient : IDisposable
    {
        /// <summary>
        /// Gets the API version.
        /// </summary>
        string ApiVersion
        {
            get; 
        }
        
        /// <summary>
        /// Gets the URI used as the base for all cloud service requests.
        /// </summary>
        Uri BaseUri
        {
            get; 
        }
        
        /// <summary>
        /// Gets subscription credentials which uniquely identify Microsoft
        /// Azure subscription. The subscription ID forms part of the URI for
        /// every service call.
        /// </summary>
        SubscriptionCloudCredentials Credentials
        {
            get; 
        }
        
        /// <summary>
        /// Gets or sets the initial timeout for Long Running Operations.
        /// </summary>
        int LongRunningOperationInitialTimeout
        {
            get; set; 
        }
        
        /// <summary>
        /// Gets or sets the retry timeout for Long Running Operations.
        /// </summary>
        int LongRunningOperationRetryTimeout
        {
            get; set; 
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        IAcquisitionOperations Acquisitions
        {
            get; 
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        IBlobServiceOperations BlobService
        {
            get; 
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        IFarmOperations Farms
        {
            get; 
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        IQueueServiceOperations QueueService
        {
            get; 
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        IQuotaOperations Quotas
        {
            get; 
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        IShareOperations Shares
        {
            get; 
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        IStorageAccountOperations StorageAccounts
        {
            get; 
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        ITableServiceOperations TableService
        {
            get; 
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        Task<LongRunningOperationResponse> GetLongRunningOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken);
    }
    
    public partial class StorageAdminManagementClient : ServiceClient<StorageAdminManagementClient>, IStorageAdminManagementClient
    {
        private string _apiVersion;
        
        /// <summary>
        /// Gets the API version.
        /// </summary>
        public string ApiVersion
        {
            get { return this._apiVersion; }
        }
        
        private Uri _baseUri;
        
        /// <summary>
        /// Gets the URI used as the base for all cloud service requests.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
        }
        
        private SubscriptionCloudCredentials _credentials;
        
        /// <summary>
        /// Gets subscription credentials which uniquely identify Microsoft
        /// Azure subscription. The subscription ID forms part of the URI for
        /// every service call.
        /// </summary>
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
        }
        
        private int _longRunningOperationInitialTimeout;
        
        /// <summary>
        /// Gets or sets the initial timeout for Long Running Operations.
        /// </summary>
        public int LongRunningOperationInitialTimeout
        {
            get { return this._longRunningOperationInitialTimeout; }
            set { this._longRunningOperationInitialTimeout = value; }
        }
        
        private int _longRunningOperationRetryTimeout;
        
        /// <summary>
        /// Gets or sets the retry timeout for Long Running Operations.
        /// </summary>
        public int LongRunningOperationRetryTimeout
        {
            get { return this._longRunningOperationRetryTimeout; }
            set { this._longRunningOperationRetryTimeout = value; }
        }
        
        private IAcquisitionOperations _acquisitions;
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        public virtual IAcquisitionOperations Acquisitions
        {
            get { return this._acquisitions; }
        }
        
        private IBlobServiceOperations _blobService;
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        public virtual IBlobServiceOperations BlobService
        {
            get { return this._blobService; }
        }
        
        private IFarmOperations _farms;
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        public virtual IFarmOperations Farms
        {
            get { return this._farms; }
        }
        
        private IQueueServiceOperations _queueService;
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        public virtual IQueueServiceOperations QueueService
        {
            get { return this._queueService; }
        }
        
        private IQuotaOperations _quotas;
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        public virtual IQuotaOperations Quotas
        {
            get { return this._quotas; }
        }
        
        private IShareOperations _shares;
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        public virtual IShareOperations Shares
        {
            get { return this._shares; }
        }
        
        private IStorageAccountOperations _storageAccounts;
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        public virtual IStorageAccountOperations StorageAccounts
        {
            get { return this._storageAccounts; }
        }
        
        private ITableServiceOperations _tableService;
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
        /// more information)
        /// </summary>
        public virtual ITableServiceOperations TableService
        {
            get { return this._tableService; }
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAdminManagementClient
        /// class.
        /// </summary>
        public StorageAdminManagementClient()
            : base()
        {
            this._acquisitions = new AcquisitionOperations(this);
            this._blobService = new BlobServiceOperations(this);
            this._farms = new FarmOperations(this);
            this._queueService = new QueueServiceOperations(this);
            this._quotas = new QuotaOperations(this);
            this._shares = new ShareOperations(this);
            this._storageAccounts = new StorageAccountOperations(this);
            this._tableService = new TableServiceOperations(this);
            this._apiVersion = "2015-12-01-preview";
            this._longRunningOperationInitialTimeout = -1;
            this._longRunningOperationRetryTimeout = -1;
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAdminManagementClient
        /// class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='baseUri'>
        /// Optional. Gets the URI used as the base for all cloud service
        /// requests.
        /// </param>
        public StorageAdminManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAdminManagementClient
        /// class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        public StorageAdminManagementClient(SubscriptionCloudCredentials credentials)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = null;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAdminManagementClient
        /// class.
        /// </summary>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public StorageAdminManagementClient(HttpClient httpClient)
            : base(httpClient)
        {
            this._acquisitions = new AcquisitionOperations(this);
            this._blobService = new BlobServiceOperations(this);
            this._farms = new FarmOperations(this);
            this._queueService = new QueueServiceOperations(this);
            this._quotas = new QuotaOperations(this);
            this._shares = new ShareOperations(this);
            this._storageAccounts = new StorageAccountOperations(this);
            this._tableService = new TableServiceOperations(this);
            this._apiVersion = "2015-12-01-preview";
            this._longRunningOperationInitialTimeout = -1;
            this._longRunningOperationRetryTimeout = -1;
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAdminManagementClient
        /// class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='baseUri'>
        /// Optional. Gets the URI used as the base for all cloud service
        /// requests.
        /// </param>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public StorageAdminManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri, HttpClient httpClient)
            : this(httpClient)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageAdminManagementClient
        /// class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public StorageAdminManagementClient(SubscriptionCloudCredentials credentials, HttpClient httpClient)
            : this(httpClient)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = null;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Clones properties from current instance to another
        /// StorageAdminManagementClient instance
        /// </summary>
        /// <param name='client'>
        /// Instance of StorageAdminManagementClient to clone to
        /// </param>
        protected override void Clone(ServiceClient<StorageAdminManagementClient> client)
        {
            base.Clone(client);
            
            if (client is StorageAdminManagementClient)
            {
                StorageAdminManagementClient clonedClient = ((StorageAdminManagementClient)client);
                
                clonedClient._credentials = this._credentials;
                clonedClient._baseUri = this._baseUri;
                clonedClient._apiVersion = this._apiVersion;
                clonedClient._longRunningOperationInitialTimeout = this._longRunningOperationInitialTimeout;
                clonedClient._longRunningOperationRetryTimeout = this._longRunningOperationRetryTimeout;
                
                clonedClient.Credentials.InitializeServiceClient(clonedClient);
            }
        }
        
        /// <summary>
        /// Parse enum values for type StorageAccountState.
        /// </summary>
        /// <param name='value'>
        /// The value to parse.
        /// </param>
        /// <returns>
        /// The enum value.
        /// </returns>
        internal static StorageAccountState ParseStorageAccountState(string value)
        {
            if ("Creating".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return StorageAccountState.PreCreate;
            }
            if ("Succeeded".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return StorageAccountState.Created;
            }
            if ("Suspended".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return StorageAccountState.Suspended;
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Convert an enum of type StorageAccountState to a string.
        /// </summary>
        /// <param name='value'>
        /// The value to convert to a string.
        /// </param>
        /// <returns>
        /// The enum value as a string.
        /// </returns>
        internal static string StorageAccountStateToString(StorageAccountState value)
        {
            if (value == StorageAccountState.PreCreate)
            {
                return "Creating";
            }
            if (value == StorageAccountState.Created)
            {
                return "Succeeded";
            }
            if (value == StorageAccountState.Suspended)
            {
                return "Suspended";
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Parse enum values for type StorageAccountType.
        /// </summary>
        /// <param name='value'>
        /// The value to parse.
        /// </param>
        /// <returns>
        /// The enum value.
        /// </returns>
        internal static StorageAccountType ParseStorageAccountType(string value)
        {
            if ("Standard_LRS".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return StorageAccountType.StandardLRS;
            }
            if ("Standard_GRS".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return StorageAccountType.StandardGRS;
            }
            if ("Standard_ZRS".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return StorageAccountType.StandardZrs;
            }
            if ("Standard_RAGRS".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return StorageAccountType.StandardRagrs;
            }
            if ("Premium_LRS".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return StorageAccountType.PremiumLrs;
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Convert an enum of type StorageAccountType to a string.
        /// </summary>
        /// <param name='value'>
        /// The value to convert to a string.
        /// </param>
        /// <returns>
        /// The enum value as a string.
        /// </returns>
        internal static string StorageAccountTypeToString(StorageAccountType value)
        {
            if (value == StorageAccountType.StandardLRS)
            {
                return "Standard_LRS";
            }
            if (value == StorageAccountType.StandardGRS)
            {
                return "Standard_GRS";
            }
            if (value == StorageAccountType.StandardZrs)
            {
                return "Standard_ZRS";
            }
            if (value == StorageAccountType.StandardRagrs)
            {
                return "Standard_RAGRS";
            }
            if (value == StorageAccountType.PremiumLrs)
            {
                return "Premium_LRS";
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Parse enum values for type WacAccountPermissions.
        /// </summary>
        /// <param name='value'>
        /// The value to parse.
        /// </param>
        /// <returns>
        /// The enum value.
        /// </returns>
        internal static WacAccountPermissions ParseWacAccountPermissions(string value)
        {
            if ("Empty".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return WacAccountPermissions.Empty;
            }
            if ("None".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return WacAccountPermissions.None;
            }
            if ("Read".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return WacAccountPermissions.Read;
            }
            if ("Delete".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return WacAccountPermissions.Delete;
            }
            if ("Write".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return WacAccountPermissions.Write;
            }
            if ("Full".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return WacAccountPermissions.Full;
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Convert an enum of type WacAccountPermissions to a string.
        /// </summary>
        /// <param name='value'>
        /// The value to convert to a string.
        /// </param>
        /// <returns>
        /// The enum value as a string.
        /// </returns>
        internal static string WacAccountPermissionsToString(WacAccountPermissions value)
        {
            if (value == WacAccountPermissions.Empty)
            {
                return "Empty";
            }
            if (value == WacAccountPermissions.None)
            {
                return "None";
            }
            if (value == WacAccountPermissions.Read)
            {
                return "Read";
            }
            if (value == WacAccountPermissions.Delete)
            {
                return "Delete";
            }
            if (value == WacAccountPermissions.Write)
            {
                return "Write";
            }
            if (value == WacAccountPermissions.Full)
            {
                return "Full";
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Parse enum values for type WacAccountStates.
        /// </summary>
        /// <param name='value'>
        /// The value to parse.
        /// </param>
        /// <returns>
        /// The enum value.
        /// </returns>
        internal static WacAccountStates ParseWacAccountStates(string value)
        {
            if ("None".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return WacAccountStates.None;
            }
            if ("Active".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return WacAccountStates.Active;
            }
            if ("Deleted".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return WacAccountStates.Deleted;
            }
            if ("AboveQuota".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return WacAccountStates.AboveQuota;
            }
            if ("Suspended".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return WacAccountStates.Suspended;
            }
            if ("All".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return WacAccountStates.All;
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Convert an enum of type WacAccountStates to a string.
        /// </summary>
        /// <param name='value'>
        /// The value to convert to a string.
        /// </param>
        /// <returns>
        /// The enum value as a string.
        /// </returns>
        internal static string WacAccountStatesToString(WacAccountStates value)
        {
            if (value == WacAccountStates.None)
            {
                return "None";
            }
            if (value == WacAccountStates.Active)
            {
                return "Active";
            }
            if (value == WacAccountStates.Deleted)
            {
                return "Deleted";
            }
            if (value == WacAccountStates.AboveQuota)
            {
                return "AboveQuota";
            }
            if (value == WacAccountStates.Suspended)
            {
                return "Suspended";
            }
            if (value == WacAccountStates.All)
            {
                return "All";
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> GetLongRunningOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetLongRunningOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-12-01-preview");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict || statusCode == HttpStatusCode.NotFound || statusCode == HttpStatusCode.MethodNotAllowed || statusCode == HttpStatusCode.Forbidden)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class AcquisitionOperationsExtensions
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IAcquisitionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='acquisitionId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Delete(this IAcquisitionOperations operations, string resourceGroupName, string farmId, string acquisitionId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAcquisitionOperations)s).DeleteAsync(resourceGroupName, farmId, acquisitionId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IAcquisitionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='acquisitionId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteAsync(this IAcquisitionOperations operations, string resourceGroupName, string farmId, string acquisitionId)
        {
            return operations.DeleteAsync(resourceGroupName, farmId, acquisitionId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IAcquisitionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='acquisitionId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static AcquisitionGetResponse Get(this IAcquisitionOperations operations, string resourceGroupName, string farmId, string acquisitionId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAcquisitionOperations)s).GetAsync(resourceGroupName, farmId, acquisitionId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IAcquisitionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='acquisitionId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<AcquisitionGetResponse> GetAsync(this IAcquisitionOperations operations, string resourceGroupName, string farmId, string acquisitionId)
        {
            return operations.GetAsync(resourceGroupName, farmId, acquisitionId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IAcquisitionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static AcquisitionListResponse List(this IAcquisitionOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAcquisitionOperations)s).ListAsync(resourceGroupName, farmId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IAcquisitionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<AcquisitionListResponse> ListAsync(this IAcquisitionOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return operations.ListAsync(resourceGroupName, farmId, filter, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    public partial interface IAcquisitionOperations
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='acquisitionId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string farmId, string acquisitionId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='acquisitionId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<AcquisitionGetResponse> GetAsync(string resourceGroupName, string farmId, string acquisitionId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<AcquisitionListResponse> ListAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class AcquisitionOperations : IServiceOperations<StorageAdminManagementClient>, IAcquisitionOperations
    {
        /// <summary>
        /// Initializes a new instance of the AcquisitionOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal AcquisitionOperations(StorageAdminManagementClient client)
        {
            this._client = client;
        }
        
        private StorageAdminManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.StorageAdminManagementClient.
        /// </summary>
        public StorageAdminManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='acquisitionId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string farmId, string acquisitionId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (acquisitionId == null)
            {
                throw new ArgumentNullException("acquisitionId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("acquisitionId", acquisitionId);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/acquisitions/";
            url = url + Uri.EscapeDataString(acquisitionId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='acquisitionId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<AcquisitionGetResponse> GetAsync(string resourceGroupName, string farmId, string acquisitionId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (acquisitionId == null)
            {
                throw new ArgumentNullException("acquisitionId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("acquisitionId", acquisitionId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/acquisitions/";
            url = url + Uri.EscapeDataString(acquisitionId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AcquisitionGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AcquisitionGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            AcquisitionModel acquisitionInstance = new AcquisitionModel();
                            result.Acquisition = acquisitionInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                Acquisition propertiesInstance = new Acquisition();
                                acquisitionInstance.Properties = propertiesInstance;
                                
                                JToken filePathValue = propertiesValue["filePath"];
                                if (filePathValue != null && filePathValue.Type != JTokenType.Null)
                                {
                                    string filePathInstance = ((string)filePathValue);
                                    propertiesInstance.FilePath = filePathInstance;
                                }
                                
                                JToken maximumblobsizeValue = propertiesValue["maximumblobsize"];
                                if (maximumblobsizeValue != null && maximumblobsizeValue.Type != JTokenType.Null)
                                {
                                    long maximumblobsizeInstance = ((long)maximumblobsizeValue);
                                    propertiesInstance.MaximumBlobSize = maximumblobsizeInstance;
                                }
                                
                                JToken statusValue = propertiesValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    AcquisitionStatus statusInstance = ((AcquisitionStatus)Enum.Parse(typeof(AcquisitionStatus), ((string)statusValue), true));
                                    propertiesInstance.Status = statusInstance;
                                }
                                
                                JToken susbcriptionidValue = propertiesValue["susbcriptionid"];
                                if (susbcriptionidValue != null && susbcriptionidValue.Type != JTokenType.Null)
                                {
                                    Guid susbcriptionidInstance = Guid.Parse(((string)susbcriptionidValue));
                                    propertiesInstance.TenantSubscriptionId = susbcriptionidInstance;
                                }
                                
                                JToken storageaccountValue = propertiesValue["storageaccount"];
                                if (storageaccountValue != null && storageaccountValue.Type != JTokenType.Null)
                                {
                                    string storageaccountInstance = ((string)storageaccountValue);
                                    propertiesInstance.StorageAccountName = storageaccountInstance;
                                }
                                
                                JToken containerValue = propertiesValue["container"];
                                if (containerValue != null && containerValue.Type != JTokenType.Null)
                                {
                                    string containerInstance = ((string)containerValue);
                                    propertiesInstance.Container = containerInstance;
                                }
                                
                                JToken blobValue = propertiesValue["blob"];
                                if (blobValue != null && blobValue.Type != JTokenType.Null)
                                {
                                    string blobInstance = ((string)blobValue);
                                    propertiesInstance.Blob = blobInstance;
                                }
                                
                                JToken acquisitionidValue = propertiesValue["acquisitionid"];
                                if (acquisitionidValue != null && acquisitionidValue.Type != JTokenType.Null)
                                {
                                    string acquisitionidInstance = ((string)acquisitionidValue);
                                    propertiesInstance.AcquisitionId = acquisitionidInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                acquisitionInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                acquisitionInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                acquisitionInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                acquisitionInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    acquisitionInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<AcquisitionListResponse> ListAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/acquisitions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AcquisitionListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AcquisitionListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken acquisitionsArray = responseDoc;
                            if (acquisitionsArray != null && acquisitionsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken acquisitionsValue in ((JArray)acquisitionsArray))
                                {
                                    AcquisitionModel acquisitionModelInstance = new AcquisitionModel();
                                    result.Acquisitions.Add(acquisitionModelInstance);
                                    
                                    JToken propertiesValue = acquisitionsValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        Acquisition propertiesInstance = new Acquisition();
                                        acquisitionModelInstance.Properties = propertiesInstance;
                                        
                                        JToken filePathValue = propertiesValue["filePath"];
                                        if (filePathValue != null && filePathValue.Type != JTokenType.Null)
                                        {
                                            string filePathInstance = ((string)filePathValue);
                                            propertiesInstance.FilePath = filePathInstance;
                                        }
                                        
                                        JToken maximumblobsizeValue = propertiesValue["maximumblobsize"];
                                        if (maximumblobsizeValue != null && maximumblobsizeValue.Type != JTokenType.Null)
                                        {
                                            long maximumblobsizeInstance = ((long)maximumblobsizeValue);
                                            propertiesInstance.MaximumBlobSize = maximumblobsizeInstance;
                                        }
                                        
                                        JToken statusValue = propertiesValue["status"];
                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                        {
                                            AcquisitionStatus statusInstance = ((AcquisitionStatus)Enum.Parse(typeof(AcquisitionStatus), ((string)statusValue), true));
                                            propertiesInstance.Status = statusInstance;
                                        }
                                        
                                        JToken susbcriptionidValue = propertiesValue["susbcriptionid"];
                                        if (susbcriptionidValue != null && susbcriptionidValue.Type != JTokenType.Null)
                                        {
                                            Guid susbcriptionidInstance = Guid.Parse(((string)susbcriptionidValue));
                                            propertiesInstance.TenantSubscriptionId = susbcriptionidInstance;
                                        }
                                        
                                        JToken storageaccountValue = propertiesValue["storageaccount"];
                                        if (storageaccountValue != null && storageaccountValue.Type != JTokenType.Null)
                                        {
                                            string storageaccountInstance = ((string)storageaccountValue);
                                            propertiesInstance.StorageAccountName = storageaccountInstance;
                                        }
                                        
                                        JToken containerValue = propertiesValue["container"];
                                        if (containerValue != null && containerValue.Type != JTokenType.Null)
                                        {
                                            string containerInstance = ((string)containerValue);
                                            propertiesInstance.Container = containerInstance;
                                        }
                                        
                                        JToken blobValue = propertiesValue["blob"];
                                        if (blobValue != null && blobValue.Type != JTokenType.Null)
                                        {
                                            string blobInstance = ((string)blobValue);
                                            propertiesInstance.Blob = blobInstance;
                                        }
                                        
                                        JToken acquisitionidValue = propertiesValue["acquisitionid"];
                                        if (acquisitionidValue != null && acquisitionidValue.Type != JTokenType.Null)
                                        {
                                            string acquisitionidInstance = ((string)acquisitionidValue);
                                            propertiesInstance.AcquisitionId = acquisitionidInstance;
                                        }
                                    }
                                    
                                    JToken idValue = acquisitionsValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        acquisitionModelInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = acquisitionsValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        acquisitionModelInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = acquisitionsValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        acquisitionModelInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = acquisitionsValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        acquisitionModelInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)acquisitionsValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            acquisitionModelInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class BlobServiceOperationsExtensions
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IBlobServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public static BlobServiceGetResponse Get(this IBlobServiceOperations operations, string resourceGroupName, string farmId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBlobServiceOperations)s).GetAsync(resourceGroupName, farmId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IBlobServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public static Task<BlobServiceGetResponse> GetAsync(this IBlobServiceOperations operations, string resourceGroupName, string farmId)
        {
            return operations.GetAsync(resourceGroupName, farmId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IBlobServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricDefinitionsResult GetMetricDefinitions(this IBlobServiceOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBlobServiceOperations)s).GetMetricDefinitionsAsync(resourceGroupName, farmId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IBlobServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(this IBlobServiceOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return operations.GetMetricDefinitionsAsync(resourceGroupName, farmId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IBlobServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricsResult GetMetrics(this IBlobServiceOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBlobServiceOperations)s).GetMetricsAsync(resourceGroupName, farmId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IBlobServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricsResult> GetMetricsAsync(this IBlobServiceOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return operations.GetMetricsAsync(resourceGroupName, farmId, filter, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    public partial interface IBlobServiceOperations
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        Task<BlobServiceGetResponse> GetAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class BlobServiceOperations : IServiceOperations<StorageAdminManagementClient>, IBlobServiceOperations
    {
        /// <summary>
        /// Initializes a new instance of the BlobServiceOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal BlobServiceOperations(StorageAdminManagementClient client)
        {
            this._client = client;
        }
        
        private StorageAdminManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.StorageAdminManagementClient.
        /// </summary>
        public StorageAdminManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public async Task<BlobServiceGetResponse> GetAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/blobservices/default";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    BlobServiceGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new BlobServiceGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            BlobServiceResponseResource resourceInstance = new BlobServiceResponseResource();
                            result.Resource = resourceInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                BlobServiceResponse propertiesInstance = new BlobServiceResponse();
                                resourceInstance.BlobService = propertiesInstance;
                                
                                JToken settingsValue = propertiesValue["settings"];
                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                {
                                    BlobServiceSettings settingsInstance = new BlobServiceSettings();
                                    propertiesInstance.Settings = settingsInstance;
                                    
                                    JToken frontEndHttpListenPortValue = settingsValue["frontEndHttpListenPort"];
                                    if (frontEndHttpListenPortValue != null && frontEndHttpListenPortValue.Type != JTokenType.Null)
                                    {
                                        int frontEndHttpListenPortInstance = ((int)frontEndHttpListenPortValue);
                                        settingsInstance.FrontEndHttpListenPort = frontEndHttpListenPortInstance;
                                    }
                                    
                                    JToken frontEndHttpsListenPortValue = settingsValue["frontEndHttpsListenPort"];
                                    if (frontEndHttpsListenPortValue != null && frontEndHttpsListenPortValue.Type != JTokenType.Null)
                                    {
                                        int frontEndHttpsListenPortInstance = ((int)frontEndHttpsListenPortValue);
                                        settingsInstance.FrontEndHttpsListenPort = frontEndHttpsListenPortInstance;
                                    }
                                    
                                    JToken frontEndCallbackThreadsCountValue = settingsValue["frontEndCallbackThreadsCount"];
                                    if (frontEndCallbackThreadsCountValue != null && frontEndCallbackThreadsCountValue.Type != JTokenType.Null)
                                    {
                                        int frontEndCallbackThreadsCountInstance = ((int)frontEndCallbackThreadsCountValue);
                                        settingsInstance.FrontEndCallbackThreadsCount = frontEndCallbackThreadsCountInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingEnabledValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingEnabled"];
                                    if (frontEndCpuBasedKeepAliveThrottlingEnabledValue != null && frontEndCpuBasedKeepAliveThrottlingEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndCpuBasedKeepAliveThrottlingEnabledInstance = ((bool)frontEndCpuBasedKeepAliveThrottlingEnabledValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingEnabled = frontEndCpuBasedKeepAliveThrottlingEnabledInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold"];
                                    if (frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue != null && frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue.Type != JTokenType.Null)
                                    {
                                        double frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdInstance = ((double)frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold = frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle"];
                                    if (frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue != null && frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue.Type != JTokenType.Null)
                                    {
                                        double frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleInstance = ((double)frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle = frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds"];
                                    if (frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue != null && frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsInstance = ((int)frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds = frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsInstance;
                                    }
                                    
                                    JToken frontEndMemoryThrottlingEnabledValue = settingsValue["frontEndMemoryThrottlingEnabled"];
                                    if (frontEndMemoryThrottlingEnabledValue != null && frontEndMemoryThrottlingEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndMemoryThrottlingEnabledInstance = ((bool)frontEndMemoryThrottlingEnabledValue);
                                        settingsInstance.FrontEndMemoryThrottlingEnabled = frontEndMemoryThrottlingEnabledInstance;
                                    }
                                    
                                    JToken frontEndMaxMillisecondsBetweenMemorySamplesValue = settingsValue["frontEndMaxMillisecondsBetweenMemorySamples"];
                                    if (frontEndMaxMillisecondsBetweenMemorySamplesValue != null && frontEndMaxMillisecondsBetweenMemorySamplesValue.Type != JTokenType.Null)
                                    {
                                        int frontEndMaxMillisecondsBetweenMemorySamplesInstance = ((int)frontEndMaxMillisecondsBetweenMemorySamplesValue);
                                        settingsInstance.FrontEndMaxMillisecondsBetweenMemorySamples = frontEndMaxMillisecondsBetweenMemorySamplesInstance;
                                    }
                                    
                                    JToken frontEndMemoryThrottleThresholdSettingsValue = settingsValue["frontEndMemoryThrottleThresholdSettings"];
                                    if (frontEndMemoryThrottleThresholdSettingsValue != null && frontEndMemoryThrottleThresholdSettingsValue.Type != JTokenType.Null)
                                    {
                                        string frontEndMemoryThrottleThresholdSettingsInstance = ((string)frontEndMemoryThrottleThresholdSettingsValue);
                                        settingsInstance.FrontEndMemoryThrottleThresholdSettings = frontEndMemoryThrottleThresholdSettingsInstance;
                                    }
                                    
                                    JToken frontEndMinThreadPoolThreadsValue = settingsValue["frontEndMinThreadPoolThreads"];
                                    if (frontEndMinThreadPoolThreadsValue != null && frontEndMinThreadPoolThreadsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndMinThreadPoolThreadsInstance = ((int)frontEndMinThreadPoolThreadsValue);
                                        settingsInstance.FrontEndMinimumThreadPoolThreads = frontEndMinThreadPoolThreadsInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue = settingsValue["frontEndThreadPoolBasedKeepAliveIOCompletionThreshold"];
                                    if (frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue != null && frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveIOCompletionThresholdInstance = ((int)frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveIOCompletionThreshold = frontEndThreadPoolBasedKeepAliveIOCompletionThresholdInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue = settingsValue["frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold"];
                                    if (frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue != null && frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdInstance = ((int)frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveWorkerThreadThreshold = frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue = settingsValue["frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds"];
                                    if (frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue != null && frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsInstance = ((int)frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds = frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAlivePercentageValue = settingsValue["frontEndThreadPoolBasedKeepAlivePercentage"];
                                    if (frontEndThreadPoolBasedKeepAlivePercentageValue != null && frontEndThreadPoolBasedKeepAlivePercentageValue.Type != JTokenType.Null)
                                    {
                                        double frontEndThreadPoolBasedKeepAlivePercentageInstance = ((double)frontEndThreadPoolBasedKeepAlivePercentageValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAlivePercentage = frontEndThreadPoolBasedKeepAlivePercentageInstance;
                                    }
                                    
                                    JToken frontEndUseSlaTimeInAvailabilityValue = settingsValue["frontEndUseSlaTimeInAvailability"];
                                    if (frontEndUseSlaTimeInAvailabilityValue != null && frontEndUseSlaTimeInAvailabilityValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndUseSlaTimeInAvailabilityInstance = ((bool)frontEndUseSlaTimeInAvailabilityValue);
                                        settingsInstance.FrontEndUseSlaTimeInAvailability = frontEndUseSlaTimeInAvailabilityInstance;
                                    }
                                    
                                    JToken blobSvcContainerGcIntervalValue = settingsValue["blobSvcContainerGcInterval"];
                                    if (blobSvcContainerGcIntervalValue != null && blobSvcContainerGcIntervalValue.Type != JTokenType.Null)
                                    {
                                        int blobSvcContainerGcIntervalInstance = ((int)blobSvcContainerGcIntervalValue);
                                        settingsInstance.BlobSvcContainerGcIntervalInMilliseconds = blobSvcContainerGcIntervalInstance;
                                    }
                                    
                                    JToken blobSvcShallowGcIntervalValue = settingsValue["blobSvcShallowGcInterval"];
                                    if (blobSvcShallowGcIntervalValue != null && blobSvcShallowGcIntervalValue.Type != JTokenType.Null)
                                    {
                                        int blobSvcShallowGcIntervalInstance = ((int)blobSvcShallowGcIntervalValue);
                                        settingsInstance.BlobSvcShallowGcIntervalInMilliseconds = blobSvcShallowGcIntervalInstance;
                                    }
                                    
                                    JToken blobSvcStreamMapMinContainerOccupancyPercentValue = settingsValue["blobSvcStreamMapMinContainerOccupancyPercent"];
                                    if (blobSvcStreamMapMinContainerOccupancyPercentValue != null && blobSvcStreamMapMinContainerOccupancyPercentValue.Type != JTokenType.Null)
                                    {
                                        int blobSvcStreamMapMinContainerOccupancyPercentInstance = ((int)blobSvcStreamMapMinContainerOccupancyPercentValue);
                                        settingsInstance.BlobSvcStreamMapMinContainerOccupancyPercent = blobSvcStreamMapMinContainerOccupancyPercentInstance;
                                    }
                                }
                                
                                JToken versionValue = propertiesValue["version"];
                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                {
                                    string versionInstance = ((string)versionValue);
                                    propertiesInstance.Version = versionInstance;
                                }
                                
                                JToken healthStatusValue = propertiesValue["healthStatus"];
                                if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                {
                                    HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                    propertiesInstance.HealthStatus = healthStatusInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                resourceInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                resourceInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                resourceInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                resourceInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    resourceInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricDefinitionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/blobservices/default/metricdefinitions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricDefinitionsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricDefinitionsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    MetricDefinition metricDefinitionInstance = new MetricDefinition();
                                    result.Value.Add(metricDefinitionInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricDefinitionInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken unitValue = valueValue["unit"];
                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit unitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)unitValue), true));
                                        metricDefinitionInstance.Unit = unitInstance;
                                    }
                                    
                                    JToken primaryAggregationTypeValue = valueValue["primaryAggregationType"];
                                    if (primaryAggregationTypeValue != null && primaryAggregationTypeValue.Type != JTokenType.Null)
                                    {
                                        MetricPrimaryAggregationType primaryAggregationTypeInstance = ((MetricPrimaryAggregationType)Enum.Parse(typeof(MetricPrimaryAggregationType), ((string)primaryAggregationTypeValue), true));
                                        metricDefinitionInstance.PrimaryAggregationType = primaryAggregationTypeInstance;
                                    }
                                    
                                    JToken metricAvailabilitiesArray = valueValue["metricAvailabilities"];
                                    if (metricAvailabilitiesArray != null && metricAvailabilitiesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricAvailabilitiesValue in ((JArray)metricAvailabilitiesArray))
                                        {
                                            MetricAvailability metricAvailabilityInstance = new MetricAvailability();
                                            metricDefinitionInstance.MetricAvailabilities.Add(metricAvailabilityInstance);
                                            
                                            JToken timeGrainValue = metricAvailabilitiesValue["timeGrain"];
                                            if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                                metricAvailabilityInstance.TimeGrain = timeGrainInstance;
                                            }
                                            
                                            JToken retentionValue = metricAvailabilitiesValue["retention"];
                                            if (retentionValue != null && retentionValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan retentionInstance = XmlConvert.ToTimeSpan(((string)retentionValue));
                                                metricAvailabilityInstance.Retention = retentionInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/blobservices/default/metrics";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Metric metricInstance = new Metric();
                                    result.Metrics.Add(metricInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken metricUnitValue = valueValue["metricUnit"];
                                    if (metricUnitValue != null && metricUnitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit metricUnitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)metricUnitValue), true));
                                        metricInstance.MetricUnit = metricUnitInstance;
                                    }
                                    
                                    JToken timeGrainValue = valueValue["timeGrain"];
                                    if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                        metricInstance.TimeGrain = timeGrainInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        metricInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = valueValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        metricInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken metricValuesArray = valueValue["metricValues"];
                                    if (metricValuesArray != null && metricValuesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricValuesValue in ((JArray)metricValuesArray))
                                        {
                                            MetricValue metricValueInstance = new MetricValue();
                                            metricInstance.MetricValues.Add(metricValueInstance);
                                            
                                            JToken timeStampValue = metricValuesValue["timeStamp"];
                                            if (timeStampValue != null && timeStampValue.Type != JTokenType.Null)
                                            {
                                                DateTime timeStampInstance = ((DateTime)timeStampValue);
                                                metricValueInstance.TimeStamp = timeStampInstance;
                                            }
                                            
                                            JToken averageValue = metricValuesValue["average"];
                                            if (averageValue != null && averageValue.Type != JTokenType.Null)
                                            {
                                                double averageInstance = ((double)averageValue);
                                                metricValueInstance.Average = averageInstance;
                                            }
                                            
                                            JToken minimumValue = metricValuesValue["minimum"];
                                            if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                            {
                                                double minimumInstance = ((double)minimumValue);
                                                metricValueInstance.Minimum = minimumInstance;
                                            }
                                            
                                            JToken maximumValue = metricValuesValue["maximum"];
                                            if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                            {
                                                double maximumInstance = ((double)maximumValue);
                                                metricValueInstance.Maximum = maximumInstance;
                                            }
                                            
                                            JToken totalValue = metricValuesValue["total"];
                                            if (totalValue != null && totalValue.Type != JTokenType.Null)
                                            {
                                                double totalInstance = ((double)totalValue);
                                                metricValueInstance.Total = totalInstance;
                                            }
                                            
                                            JToken countValue = metricValuesValue["count"];
                                            if (countValue != null && countValue.Type != JTokenType.Null)
                                            {
                                                int countInstance = ((int)countValue);
                                                metricValueInstance.Count = countInstance;
                                            }
                                            
                                            JToken propertiesValue = metricValuesValue["properties"];
                                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                            {
                                                string propertiesInstance = propertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                metricValueInstance.Properties = propertiesInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class FarmOperationsExtensions
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static FarmGetResponse Create(this IFarmOperations operations, string resourceGroupName, string farmId, FarmCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFarmOperations)s).CreateAsync(resourceGroupName, farmId, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<FarmGetResponse> CreateAsync(this IFarmOperations operations, string resourceGroupName, string farmId, FarmCreateParameters parameters)
        {
            return operations.CreateAsync(resourceGroupName, farmId, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static FarmGetResponse Get(this IFarmOperations operations, string resourceGroupName, string farmId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFarmOperations)s).GetAsync(resourceGroupName, farmId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<FarmGetResponse> GetAsync(this IFarmOperations operations, string resourceGroupName, string farmId)
        {
            return operations.GetAsync(resourceGroupName, farmId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricDefinitionsResult GetMetricDefinitions(this IFarmOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFarmOperations)s).GetMetricDefinitionsAsync(resourceGroupName, farmId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(this IFarmOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return operations.GetMetricDefinitionsAsync(resourceGroupName, farmId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricsResult GetMetrics(this IFarmOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFarmOperations)s).GetMetricsAsync(resourceGroupName, farmId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricsResult> GetMetricsAsync(this IFarmOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return operations.GetMetricsAsync(resourceGroupName, farmId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static FarmListResponse List(this IFarmOperations operations, string resourceGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFarmOperations)s).ListAsync(resourceGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<FarmListResponse> ListAsync(this IFarmOperations operations, string resourceGroupName)
        {
            return operations.ListAsync(resourceGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse OnDemandGc(this IFarmOperations operations, string resourceGroupName, string farmId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFarmOperations)s).OnDemandGcAsync(resourceGroupName, farmId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> OnDemandGcAsync(this IFarmOperations operations, string resourceGroupName, string farmId)
        {
            return operations.OnDemandGcAsync(resourceGroupName, farmId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static FarmGetResponse Update(this IFarmOperations operations, string resourceGroupName, string farmId, FarmUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFarmOperations)s).UpdateAsync(resourceGroupName, farmId, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IFarmOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<FarmGetResponse> UpdateAsync(this IFarmOperations operations, string resourceGroupName, string farmId, FarmUpdateParameters parameters)
        {
            return operations.UpdateAsync(resourceGroupName, farmId, parameters, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    public partial interface IFarmOperations
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<FarmGetResponse> CreateAsync(string resourceGroupName, string farmId, FarmCreateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<FarmGetResponse> GetAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<FarmListResponse> ListAsync(string resourceGroupName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> OnDemandGcAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<FarmGetResponse> UpdateAsync(string resourceGroupName, string farmId, FarmUpdateParameters parameters, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class FarmOperations : IServiceOperations<StorageAdminManagementClient>, IFarmOperations
    {
        /// <summary>
        /// Initializes a new instance of the FarmOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal FarmOperations(StorageAdminManagementClient client)
        {
            this._client = client;
        }
        
        private StorageAdminManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.StorageAdminManagementClient.
        /// </summary>
        public StorageAdminManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<FarmGetResponse> CreateAsync(string resourceGroupName, string farmId, FarmCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject farmCreateParametersValue = new JObject();
                requestDoc = farmCreateParametersValue;
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    farmCreateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Properties.SettingAccessString != null)
                    {
                        propertiesValue["settingAccessString"] = parameters.Properties.SettingAccessString;
                    }
                }
                
                if (parameters.Id != null)
                {
                    farmCreateParametersValue["id"] = parameters.Id;
                }
                
                if (parameters.Name != null)
                {
                    farmCreateParametersValue["name"] = parameters.Name;
                }
                
                if (parameters.Type != null)
                {
                    farmCreateParametersValue["type"] = parameters.Type;
                }
                
                if (parameters.Location != null)
                {
                    farmCreateParametersValue["location"] = parameters.Location;
                }
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    farmCreateParametersValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FarmGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FarmGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            FarmModel farmInstance = new FarmModel();
                            result.Farm = farmInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                Farm propertiesInstance = new Farm();
                                farmInstance.Properties = propertiesInstance;
                                
                                JToken settingsStoreValue = propertiesValue2["settingsStore"];
                                if (settingsStoreValue != null && settingsStoreValue.Type != JTokenType.Null)
                                {
                                    string settingsStoreInstance = ((string)settingsStoreValue);
                                    propertiesInstance.SettingsStore = settingsStoreInstance;
                                }
                                
                                JToken healthStatusValue = propertiesValue2["healthStatus"];
                                if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                {
                                    HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                    propertiesInstance.HealthStatus = healthStatusInstance;
                                }
                                
                                JToken settingsValue = propertiesValue2["settings"];
                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                {
                                    FarmSettings settingsInstance = new FarmSettings();
                                    propertiesInstance.Settings = settingsInstance;
                                    
                                    JToken settingsPollingIntervalInSecondValue = settingsValue["settingsPollingIntervalInSecond"];
                                    if (settingsPollingIntervalInSecondValue != null && settingsPollingIntervalInSecondValue.Type != JTokenType.Null)
                                    {
                                        int settingsPollingIntervalInSecondInstance = ((int)settingsPollingIntervalInSecondValue);
                                        settingsInstance.SettingsPollingIntervalInSecond = settingsPollingIntervalInSecondInstance;
                                    }
                                    
                                    JToken retentionPeriodForDeletedStorageAccountsInDaysValue = settingsValue["retentionPeriodForDeletedStorageAccountsInDays"];
                                    if (retentionPeriodForDeletedStorageAccountsInDaysValue != null && retentionPeriodForDeletedStorageAccountsInDaysValue.Type != JTokenType.Null)
                                    {
                                        int retentionPeriodForDeletedStorageAccountsInDaysInstance = ((int)retentionPeriodForDeletedStorageAccountsInDaysValue);
                                        settingsInstance.RetentionPeriodForDeletedStorageAccountsInDays = retentionPeriodForDeletedStorageAccountsInDaysInstance;
                                    }
                                    
                                    JToken hostStyleHttpPortValue = settingsValue["hostStyleHttpPort"];
                                    if (hostStyleHttpPortValue != null && hostStyleHttpPortValue.Type != JTokenType.Null)
                                    {
                                        int hostStyleHttpPortInstance = ((int)hostStyleHttpPortValue);
                                        settingsInstance.HostStyleHttpPort = hostStyleHttpPortInstance;
                                    }
                                    
                                    JToken hostStyleHttpsPortValue = settingsValue["hostStyleHttpsPort"];
                                    if (hostStyleHttpsPortValue != null && hostStyleHttpsPortValue.Type != JTokenType.Null)
                                    {
                                        int hostStyleHttpsPortInstance = ((int)hostStyleHttpsPortValue);
                                        settingsInstance.HostStyleHttpsPort = hostStyleHttpsPortInstance;
                                    }
                                    
                                    JToken corsAllowedOriginsListValue = settingsValue["corsAllowedOriginsList"];
                                    if (corsAllowedOriginsListValue != null && corsAllowedOriginsListValue.Type != JTokenType.Null)
                                    {
                                        string corsAllowedOriginsListInstance = ((string)corsAllowedOriginsListValue);
                                        settingsInstance.CorsAllowedOriginsList = corsAllowedOriginsListInstance;
                                    }
                                    
                                    JToken dataCenterUriHostSuffixesValue = settingsValue["dataCenterUriHostSuffixes"];
                                    if (dataCenterUriHostSuffixesValue != null && dataCenterUriHostSuffixesValue.Type != JTokenType.Null)
                                    {
                                        string dataCenterUriHostSuffixesInstance = ((string)dataCenterUriHostSuffixesValue);
                                        settingsInstance.DataCenterUriHostSuffixes = dataCenterUriHostSuffixesInstance;
                                    }
                                    
                                    JToken bandwidthThrottleIsEnabledValue = settingsValue["bandwidthThrottleIsEnabled"];
                                    if (bandwidthThrottleIsEnabledValue != null && bandwidthThrottleIsEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool bandwidthThrottleIsEnabledInstance = ((bool)bandwidthThrottleIsEnabledValue);
                                        settingsInstance.BandwidthThrottleIsEnabled = bandwidthThrottleIsEnabledInstance;
                                    }
                                    
                                    JToken usageCollectionIntervalInSecondsValue = settingsValue["usageCollectionIntervalInSeconds"];
                                    if (usageCollectionIntervalInSecondsValue != null && usageCollectionIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int usageCollectionIntervalInSecondsInstance = ((int)usageCollectionIntervalInSecondsValue);
                                        settingsInstance.UsageCollectionIntervalInSeconds = usageCollectionIntervalInSecondsInstance;
                                    }
                                    
                                    JToken feedbackRefreshIntervalInSecondsValue = settingsValue["feedbackRefreshIntervalInSeconds"];
                                    if (feedbackRefreshIntervalInSecondsValue != null && feedbackRefreshIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int feedbackRefreshIntervalInSecondsInstance = ((int)feedbackRefreshIntervalInSecondsValue);
                                        settingsInstance.FeedbackRefreshIntervalInSeconds = feedbackRefreshIntervalInSecondsInstance;
                                    }
                                    
                                    JToken numberOfAccountsToSyncValue = settingsValue["numberOfAccountsToSync"];
                                    if (numberOfAccountsToSyncValue != null && numberOfAccountsToSyncValue.Type != JTokenType.Null)
                                    {
                                        int numberOfAccountsToSyncInstance = ((int)numberOfAccountsToSyncValue);
                                        settingsInstance.NumberOfAccountsToSync = numberOfAccountsToSyncInstance;
                                    }
                                    
                                    JToken defaultThrottleProbabilityDecayIntervalInSecondsValue = settingsValue["defaultThrottleProbabilityDecayIntervalInSeconds"];
                                    if (defaultThrottleProbabilityDecayIntervalInSecondsValue != null && defaultThrottleProbabilityDecayIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int defaultThrottleProbabilityDecayIntervalInSecondsInstance = ((int)defaultThrottleProbabilityDecayIntervalInSecondsValue);
                                        settingsInstance.DefaultThrottleProbabilityDecayIntervalInSeconds = defaultThrottleProbabilityDecayIntervalInSecondsInstance;
                                    }
                                    
                                    JToken gracePeriodForFullThrottlingInRefreshIntervalsValue = settingsValue["gracePeriodForFullThrottlingInRefreshIntervals"];
                                    if (gracePeriodForFullThrottlingInRefreshIntervalsValue != null && gracePeriodForFullThrottlingInRefreshIntervalsValue.Type != JTokenType.Null)
                                    {
                                        int gracePeriodForFullThrottlingInRefreshIntervalsInstance = ((int)gracePeriodForFullThrottlingInRefreshIntervalsValue);
                                        settingsInstance.GracePeriodForFullThrottlingInRefreshIntervals = gracePeriodForFullThrottlingInRefreshIntervalsInstance;
                                    }
                                    
                                    JToken gracePeriodMaxThrottleProbabilityValue = settingsValue["gracePeriodMaxThrottleProbability"];
                                    if (gracePeriodMaxThrottleProbabilityValue != null && gracePeriodMaxThrottleProbabilityValue.Type != JTokenType.Null)
                                    {
                                        double gracePeriodMaxThrottleProbabilityInstance = ((double)gracePeriodMaxThrottleProbabilityValue);
                                        settingsInstance.GracePeriodMaxThrottleProbability = gracePeriodMaxThrottleProbabilityInstance;
                                    }
                                    
                                    JToken overallRequestThresholdInTpsValue = settingsValue["overallRequestThresholdInTps"];
                                    if (overallRequestThresholdInTpsValue != null && overallRequestThresholdInTpsValue.Type != JTokenType.Null)
                                    {
                                        double overallRequestThresholdInTpsInstance = ((double)overallRequestThresholdInTpsValue);
                                        settingsInstance.OverallRequestThresholdInTps = overallRequestThresholdInTpsInstance;
                                    }
                                    
                                    JToken defaultRequestThresholdInTpsValue = settingsValue["defaultRequestThresholdInTps"];
                                    if (defaultRequestThresholdInTpsValue != null && defaultRequestThresholdInTpsValue.Type != JTokenType.Null)
                                    {
                                        double defaultRequestThresholdInTpsInstance = ((double)defaultRequestThresholdInTpsValue);
                                        settingsInstance.DefaultRequestThresholdInTps = defaultRequestThresholdInTpsInstance;
                                    }
                                    
                                    JToken minimumRequestThresholdInTpsValue = settingsValue["minimumRequestThresholdInTps"];
                                    if (minimumRequestThresholdInTpsValue != null && minimumRequestThresholdInTpsValue.Type != JTokenType.Null)
                                    {
                                        double minimumRequestThresholdInTpsInstance = ((double)minimumRequestThresholdInTpsValue);
                                        settingsInstance.MinimumRequestThresholdInTps = minimumRequestThresholdInTpsInstance;
                                    }
                                    
                                    JToken toleranceFactorForTpsValue = settingsValue["toleranceFactorForTps"];
                                    if (toleranceFactorForTpsValue != null && toleranceFactorForTpsValue.Type != JTokenType.Null)
                                    {
                                        double toleranceFactorForTpsInstance = ((double)toleranceFactorForTpsValue);
                                        settingsInstance.ToleranceFactorForTps = toleranceFactorForTpsInstance;
                                    }
                                    
                                    JToken overallIngressThresholdInGbpsValue = settingsValue["overallIngressThresholdInGbps"];
                                    if (overallIngressThresholdInGbpsValue != null && overallIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double overallIngressThresholdInGbpsInstance = ((double)overallIngressThresholdInGbpsValue);
                                        settingsInstance.OverallIngressThresholdInGbps = overallIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken defaultIngressThresholdInGbpsValue = settingsValue["defaultIngressThresholdInGbps"];
                                    if (defaultIngressThresholdInGbpsValue != null && defaultIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double defaultIngressThresholdInGbpsInstance = ((double)defaultIngressThresholdInGbpsValue);
                                        settingsInstance.DefaultIngressThresholdInGbps = defaultIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken minimumIngressThresholdInGbpsValue = settingsValue["minimumIngressThresholdInGbps"];
                                    if (minimumIngressThresholdInGbpsValue != null && minimumIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double minimumIngressThresholdInGbpsInstance = ((double)minimumIngressThresholdInGbpsValue);
                                        settingsInstance.MinimumIngressThresholdInGbps = minimumIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken toleranceFactorForIngressValue = settingsValue["toleranceFactorForIngress"];
                                    if (toleranceFactorForIngressValue != null && toleranceFactorForIngressValue.Type != JTokenType.Null)
                                    {
                                        double toleranceFactorForIngressInstance = ((double)toleranceFactorForIngressValue);
                                        settingsInstance.ToleranceFactorForIngress = toleranceFactorForIngressInstance;
                                    }
                                    
                                    JToken overallIntranetIngressThresholdInGbpsValue = settingsValue["overallIntranetIngressThresholdInGbps"];
                                    if (overallIntranetIngressThresholdInGbpsValue != null && overallIntranetIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double overallIntranetIngressThresholdInGbpsInstance = ((double)overallIntranetIngressThresholdInGbpsValue);
                                        settingsInstance.OverallIntranetIngressThresholdInGbps = overallIntranetIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken defaultIntranetIngressThresholdInGbpsValue = settingsValue["defaultIntranetIngressThresholdInGbps"];
                                    if (defaultIntranetIngressThresholdInGbpsValue != null && defaultIntranetIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double defaultIntranetIngressThresholdInGbpsInstance = ((double)defaultIntranetIngressThresholdInGbpsValue);
                                        settingsInstance.DefaultIntranetIngressThresholdInGbps = defaultIntranetIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken minimumIntranetIngressThresholdInGbpsValue = settingsValue["minimumIntranetIngressThresholdInGbps"];
                                    if (minimumIntranetIngressThresholdInGbpsValue != null && minimumIntranetIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double minimumIntranetIngressThresholdInGbpsInstance = ((double)minimumIntranetIngressThresholdInGbpsValue);
                                        settingsInstance.MinimumIntranetIngressThresholdInGbps = minimumIntranetIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken toleranceFactorForIntranetIngressValue = settingsValue["toleranceFactorForIntranetIngress"];
                                    if (toleranceFactorForIntranetIngressValue != null && toleranceFactorForIntranetIngressValue.Type != JTokenType.Null)
                                    {
                                        double toleranceFactorForIntranetIngressInstance = ((double)toleranceFactorForIntranetIngressValue);
                                        settingsInstance.ToleranceFactorForIntranetIngress = toleranceFactorForIntranetIngressInstance;
                                    }
                                    
                                    JToken overallEgressThresholdInGbpsValue = settingsValue["overallEgressThresholdInGbps"];
                                    if (overallEgressThresholdInGbpsValue != null && overallEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double overallEgressThresholdInGbpsInstance = ((double)overallEgressThresholdInGbpsValue);
                                        settingsInstance.OverallEgressThresholdInGbps = overallEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken defaultEgressThresholdInGbpsValue = settingsValue["defaultEgressThresholdInGbps"];
                                    if (defaultEgressThresholdInGbpsValue != null && defaultEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double defaultEgressThresholdInGbpsInstance = ((double)defaultEgressThresholdInGbpsValue);
                                        settingsInstance.DefaultEgressThresholdInGbps = defaultEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken minimumEgressThresholdInGbpsValue = settingsValue["minimumEgressThresholdInGbps"];
                                    if (minimumEgressThresholdInGbpsValue != null && minimumEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double minimumEgressThresholdInGbpsInstance = ((double)minimumEgressThresholdInGbpsValue);
                                        settingsInstance.MinimumEgressThresholdInGbps = minimumEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken toleranceFactorForEgressValue = settingsValue["toleranceFactorForEgress"];
                                    if (toleranceFactorForEgressValue != null && toleranceFactorForEgressValue.Type != JTokenType.Null)
                                    {
                                        double toleranceFactorForEgressInstance = ((double)toleranceFactorForEgressValue);
                                        settingsInstance.ToleranceFactorForEgress = toleranceFactorForEgressInstance;
                                    }
                                    
                                    JToken overallIntranetEgressThresholdInGbpsValue = settingsValue["overallIntranetEgressThresholdInGbps"];
                                    if (overallIntranetEgressThresholdInGbpsValue != null && overallIntranetEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double overallIntranetEgressThresholdInGbpsInstance = ((double)overallIntranetEgressThresholdInGbpsValue);
                                        settingsInstance.OverallIntranetEgressThresholdInGbps = overallIntranetEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken defaultIntranetEgressThresholdInGbpsValue = settingsValue["defaultIntranetEgressThresholdInGbps"];
                                    if (defaultIntranetEgressThresholdInGbpsValue != null && defaultIntranetEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double defaultIntranetEgressThresholdInGbpsInstance = ((double)defaultIntranetEgressThresholdInGbpsValue);
                                        settingsInstance.DefaultIntranetEgressThresholdInGbps = defaultIntranetEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken minimumIntranetEgressThresholdInGbpsValue = settingsValue["minimumIntranetEgressThresholdInGbps"];
                                    if (minimumIntranetEgressThresholdInGbpsValue != null && minimumIntranetEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double minimumIntranetEgressThresholdInGbpsInstance = ((double)minimumIntranetEgressThresholdInGbpsValue);
                                        settingsInstance.MinimumIntranetEgressThresholdInGbps = minimumIntranetEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken toleranceFactorForIntranetEgressValue = settingsValue["toleranceFactorForIntranetEgress"];
                                    if (toleranceFactorForIntranetEgressValue != null && toleranceFactorForIntranetEgressValue.Type != JTokenType.Null)
                                    {
                                        double toleranceFactorForIntranetEgressInstance = ((double)toleranceFactorForIntranetEgressValue);
                                        settingsInstance.ToleranceFactorForIntranetEgress = toleranceFactorForIntranetEgressInstance;
                                    }
                                    
                                    JToken overallTotalIngressThresholdInGbpsValue = settingsValue["overallTotalIngressThresholdInGbps"];
                                    if (overallTotalIngressThresholdInGbpsValue != null && overallTotalIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double overallTotalIngressThresholdInGbpsInstance = ((double)overallTotalIngressThresholdInGbpsValue);
                                        settingsInstance.OverallTotalIngressThresholdInGbps = overallTotalIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken defaultTotalIngressThresholdInGbpsValue = settingsValue["defaultTotalIngressThresholdInGbps"];
                                    if (defaultTotalIngressThresholdInGbpsValue != null && defaultTotalIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double defaultTotalIngressThresholdInGbpsInstance = ((double)defaultTotalIngressThresholdInGbpsValue);
                                        settingsInstance.DefaultTotalIngressThresholdInGbps = defaultTotalIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken minimumTotalIngressThresholdInGbpsValue = settingsValue["minimumTotalIngressThresholdInGbps"];
                                    if (minimumTotalIngressThresholdInGbpsValue != null && minimumTotalIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double minimumTotalIngressThresholdInGbpsInstance = ((double)minimumTotalIngressThresholdInGbpsValue);
                                        settingsInstance.MinimumTotalIngressThresholdInGbps = minimumTotalIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken toleranceFactorForTotalIngressValue = settingsValue["toleranceFactorForTotalIngress"];
                                    if (toleranceFactorForTotalIngressValue != null && toleranceFactorForTotalIngressValue.Type != JTokenType.Null)
                                    {
                                        double toleranceFactorForTotalIngressInstance = ((double)toleranceFactorForTotalIngressValue);
                                        settingsInstance.ToleranceFactorForTotalIngress = toleranceFactorForTotalIngressInstance;
                                    }
                                    
                                    JToken overallTotalEgressThresholdInGbpsValue = settingsValue["overallTotalEgressThresholdInGbps"];
                                    if (overallTotalEgressThresholdInGbpsValue != null && overallTotalEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double overallTotalEgressThresholdInGbpsInstance = ((double)overallTotalEgressThresholdInGbpsValue);
                                        settingsInstance.OverallTotalEgressThresholdInGbps = overallTotalEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken defaultTotalEgressThresholdInGbpsValue = settingsValue["defaultTotalEgressThresholdInGbps"];
                                    if (defaultTotalEgressThresholdInGbpsValue != null && defaultTotalEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double defaultTotalEgressThresholdInGbpsInstance = ((double)defaultTotalEgressThresholdInGbpsValue);
                                        settingsInstance.DefaultTotalEgressThresholdInGbps = defaultTotalEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken minimumTotalEgressThresholdInGbpsValue = settingsValue["minimumTotalEgressThresholdInGbps"];
                                    if (minimumTotalEgressThresholdInGbpsValue != null && minimumTotalEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double minimumTotalEgressThresholdInGbpsInstance = ((double)minimumTotalEgressThresholdInGbpsValue);
                                        settingsInstance.MinimumTotalEgressThresholdInGbps = minimumTotalEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken toleranceFactorForTotalEgressValue = settingsValue["toleranceFactorForTotalEgress"];
                                    if (toleranceFactorForTotalEgressValue != null && toleranceFactorForTotalEgressValue.Type != JTokenType.Null)
                                    {
                                        double toleranceFactorForTotalEgressInstance = ((double)toleranceFactorForTotalEgressValue);
                                        settingsInstance.ToleranceFactorForTotalEgress = toleranceFactorForTotalEgressInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                farmInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                farmInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                farmInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                farmInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    farmInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<FarmGetResponse> GetAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FarmGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FarmGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            FarmModel farmInstance = new FarmModel();
                            result.Farm = farmInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                Farm propertiesInstance = new Farm();
                                farmInstance.Properties = propertiesInstance;
                                
                                JToken settingsStoreValue = propertiesValue["settingsStore"];
                                if (settingsStoreValue != null && settingsStoreValue.Type != JTokenType.Null)
                                {
                                    string settingsStoreInstance = ((string)settingsStoreValue);
                                    propertiesInstance.SettingsStore = settingsStoreInstance;
                                }
                                
                                JToken healthStatusValue = propertiesValue["healthStatus"];
                                if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                {
                                    HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                    propertiesInstance.HealthStatus = healthStatusInstance;
                                }
                                
                                JToken settingsValue = propertiesValue["settings"];
                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                {
                                    FarmSettings settingsInstance = new FarmSettings();
                                    propertiesInstance.Settings = settingsInstance;
                                    
                                    JToken settingsPollingIntervalInSecondValue = settingsValue["settingsPollingIntervalInSecond"];
                                    if (settingsPollingIntervalInSecondValue != null && settingsPollingIntervalInSecondValue.Type != JTokenType.Null)
                                    {
                                        int settingsPollingIntervalInSecondInstance = ((int)settingsPollingIntervalInSecondValue);
                                        settingsInstance.SettingsPollingIntervalInSecond = settingsPollingIntervalInSecondInstance;
                                    }
                                    
                                    JToken retentionPeriodForDeletedStorageAccountsInDaysValue = settingsValue["retentionPeriodForDeletedStorageAccountsInDays"];
                                    if (retentionPeriodForDeletedStorageAccountsInDaysValue != null && retentionPeriodForDeletedStorageAccountsInDaysValue.Type != JTokenType.Null)
                                    {
                                        int retentionPeriodForDeletedStorageAccountsInDaysInstance = ((int)retentionPeriodForDeletedStorageAccountsInDaysValue);
                                        settingsInstance.RetentionPeriodForDeletedStorageAccountsInDays = retentionPeriodForDeletedStorageAccountsInDaysInstance;
                                    }
                                    
                                    JToken hostStyleHttpPortValue = settingsValue["hostStyleHttpPort"];
                                    if (hostStyleHttpPortValue != null && hostStyleHttpPortValue.Type != JTokenType.Null)
                                    {
                                        int hostStyleHttpPortInstance = ((int)hostStyleHttpPortValue);
                                        settingsInstance.HostStyleHttpPort = hostStyleHttpPortInstance;
                                    }
                                    
                                    JToken hostStyleHttpsPortValue = settingsValue["hostStyleHttpsPort"];
                                    if (hostStyleHttpsPortValue != null && hostStyleHttpsPortValue.Type != JTokenType.Null)
                                    {
                                        int hostStyleHttpsPortInstance = ((int)hostStyleHttpsPortValue);
                                        settingsInstance.HostStyleHttpsPort = hostStyleHttpsPortInstance;
                                    }
                                    
                                    JToken corsAllowedOriginsListValue = settingsValue["corsAllowedOriginsList"];
                                    if (corsAllowedOriginsListValue != null && corsAllowedOriginsListValue.Type != JTokenType.Null)
                                    {
                                        string corsAllowedOriginsListInstance = ((string)corsAllowedOriginsListValue);
                                        settingsInstance.CorsAllowedOriginsList = corsAllowedOriginsListInstance;
                                    }
                                    
                                    JToken dataCenterUriHostSuffixesValue = settingsValue["dataCenterUriHostSuffixes"];
                                    if (dataCenterUriHostSuffixesValue != null && dataCenterUriHostSuffixesValue.Type != JTokenType.Null)
                                    {
                                        string dataCenterUriHostSuffixesInstance = ((string)dataCenterUriHostSuffixesValue);
                                        settingsInstance.DataCenterUriHostSuffixes = dataCenterUriHostSuffixesInstance;
                                    }
                                    
                                    JToken bandwidthThrottleIsEnabledValue = settingsValue["bandwidthThrottleIsEnabled"];
                                    if (bandwidthThrottleIsEnabledValue != null && bandwidthThrottleIsEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool bandwidthThrottleIsEnabledInstance = ((bool)bandwidthThrottleIsEnabledValue);
                                        settingsInstance.BandwidthThrottleIsEnabled = bandwidthThrottleIsEnabledInstance;
                                    }
                                    
                                    JToken usageCollectionIntervalInSecondsValue = settingsValue["usageCollectionIntervalInSeconds"];
                                    if (usageCollectionIntervalInSecondsValue != null && usageCollectionIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int usageCollectionIntervalInSecondsInstance = ((int)usageCollectionIntervalInSecondsValue);
                                        settingsInstance.UsageCollectionIntervalInSeconds = usageCollectionIntervalInSecondsInstance;
                                    }
                                    
                                    JToken feedbackRefreshIntervalInSecondsValue = settingsValue["feedbackRefreshIntervalInSeconds"];
                                    if (feedbackRefreshIntervalInSecondsValue != null && feedbackRefreshIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int feedbackRefreshIntervalInSecondsInstance = ((int)feedbackRefreshIntervalInSecondsValue);
                                        settingsInstance.FeedbackRefreshIntervalInSeconds = feedbackRefreshIntervalInSecondsInstance;
                                    }
                                    
                                    JToken numberOfAccountsToSyncValue = settingsValue["numberOfAccountsToSync"];
                                    if (numberOfAccountsToSyncValue != null && numberOfAccountsToSyncValue.Type != JTokenType.Null)
                                    {
                                        int numberOfAccountsToSyncInstance = ((int)numberOfAccountsToSyncValue);
                                        settingsInstance.NumberOfAccountsToSync = numberOfAccountsToSyncInstance;
                                    }
                                    
                                    JToken defaultThrottleProbabilityDecayIntervalInSecondsValue = settingsValue["defaultThrottleProbabilityDecayIntervalInSeconds"];
                                    if (defaultThrottleProbabilityDecayIntervalInSecondsValue != null && defaultThrottleProbabilityDecayIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int defaultThrottleProbabilityDecayIntervalInSecondsInstance = ((int)defaultThrottleProbabilityDecayIntervalInSecondsValue);
                                        settingsInstance.DefaultThrottleProbabilityDecayIntervalInSeconds = defaultThrottleProbabilityDecayIntervalInSecondsInstance;
                                    }
                                    
                                    JToken gracePeriodForFullThrottlingInRefreshIntervalsValue = settingsValue["gracePeriodForFullThrottlingInRefreshIntervals"];
                                    if (gracePeriodForFullThrottlingInRefreshIntervalsValue != null && gracePeriodForFullThrottlingInRefreshIntervalsValue.Type != JTokenType.Null)
                                    {
                                        int gracePeriodForFullThrottlingInRefreshIntervalsInstance = ((int)gracePeriodForFullThrottlingInRefreshIntervalsValue);
                                        settingsInstance.GracePeriodForFullThrottlingInRefreshIntervals = gracePeriodForFullThrottlingInRefreshIntervalsInstance;
                                    }
                                    
                                    JToken gracePeriodMaxThrottleProbabilityValue = settingsValue["gracePeriodMaxThrottleProbability"];
                                    if (gracePeriodMaxThrottleProbabilityValue != null && gracePeriodMaxThrottleProbabilityValue.Type != JTokenType.Null)
                                    {
                                        double gracePeriodMaxThrottleProbabilityInstance = ((double)gracePeriodMaxThrottleProbabilityValue);
                                        settingsInstance.GracePeriodMaxThrottleProbability = gracePeriodMaxThrottleProbabilityInstance;
                                    }
                                    
                                    JToken overallRequestThresholdInTpsValue = settingsValue["overallRequestThresholdInTps"];
                                    if (overallRequestThresholdInTpsValue != null && overallRequestThresholdInTpsValue.Type != JTokenType.Null)
                                    {
                                        double overallRequestThresholdInTpsInstance = ((double)overallRequestThresholdInTpsValue);
                                        settingsInstance.OverallRequestThresholdInTps = overallRequestThresholdInTpsInstance;
                                    }
                                    
                                    JToken defaultRequestThresholdInTpsValue = settingsValue["defaultRequestThresholdInTps"];
                                    if (defaultRequestThresholdInTpsValue != null && defaultRequestThresholdInTpsValue.Type != JTokenType.Null)
                                    {
                                        double defaultRequestThresholdInTpsInstance = ((double)defaultRequestThresholdInTpsValue);
                                        settingsInstance.DefaultRequestThresholdInTps = defaultRequestThresholdInTpsInstance;
                                    }
                                    
                                    JToken minimumRequestThresholdInTpsValue = settingsValue["minimumRequestThresholdInTps"];
                                    if (minimumRequestThresholdInTpsValue != null && minimumRequestThresholdInTpsValue.Type != JTokenType.Null)
                                    {
                                        double minimumRequestThresholdInTpsInstance = ((double)minimumRequestThresholdInTpsValue);
                                        settingsInstance.MinimumRequestThresholdInTps = minimumRequestThresholdInTpsInstance;
                                    }
                                    
                                    JToken toleranceFactorForTpsValue = settingsValue["toleranceFactorForTps"];
                                    if (toleranceFactorForTpsValue != null && toleranceFactorForTpsValue.Type != JTokenType.Null)
                                    {
                                        double toleranceFactorForTpsInstance = ((double)toleranceFactorForTpsValue);
                                        settingsInstance.ToleranceFactorForTps = toleranceFactorForTpsInstance;
                                    }
                                    
                                    JToken overallIngressThresholdInGbpsValue = settingsValue["overallIngressThresholdInGbps"];
                                    if (overallIngressThresholdInGbpsValue != null && overallIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double overallIngressThresholdInGbpsInstance = ((double)overallIngressThresholdInGbpsValue);
                                        settingsInstance.OverallIngressThresholdInGbps = overallIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken defaultIngressThresholdInGbpsValue = settingsValue["defaultIngressThresholdInGbps"];
                                    if (defaultIngressThresholdInGbpsValue != null && defaultIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double defaultIngressThresholdInGbpsInstance = ((double)defaultIngressThresholdInGbpsValue);
                                        settingsInstance.DefaultIngressThresholdInGbps = defaultIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken minimumIngressThresholdInGbpsValue = settingsValue["minimumIngressThresholdInGbps"];
                                    if (minimumIngressThresholdInGbpsValue != null && minimumIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double minimumIngressThresholdInGbpsInstance = ((double)minimumIngressThresholdInGbpsValue);
                                        settingsInstance.MinimumIngressThresholdInGbps = minimumIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken toleranceFactorForIngressValue = settingsValue["toleranceFactorForIngress"];
                                    if (toleranceFactorForIngressValue != null && toleranceFactorForIngressValue.Type != JTokenType.Null)
                                    {
                                        double toleranceFactorForIngressInstance = ((double)toleranceFactorForIngressValue);
                                        settingsInstance.ToleranceFactorForIngress = toleranceFactorForIngressInstance;
                                    }
                                    
                                    JToken overallIntranetIngressThresholdInGbpsValue = settingsValue["overallIntranetIngressThresholdInGbps"];
                                    if (overallIntranetIngressThresholdInGbpsValue != null && overallIntranetIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double overallIntranetIngressThresholdInGbpsInstance = ((double)overallIntranetIngressThresholdInGbpsValue);
                                        settingsInstance.OverallIntranetIngressThresholdInGbps = overallIntranetIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken defaultIntranetIngressThresholdInGbpsValue = settingsValue["defaultIntranetIngressThresholdInGbps"];
                                    if (defaultIntranetIngressThresholdInGbpsValue != null && defaultIntranetIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double defaultIntranetIngressThresholdInGbpsInstance = ((double)defaultIntranetIngressThresholdInGbpsValue);
                                        settingsInstance.DefaultIntranetIngressThresholdInGbps = defaultIntranetIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken minimumIntranetIngressThresholdInGbpsValue = settingsValue["minimumIntranetIngressThresholdInGbps"];
                                    if (minimumIntranetIngressThresholdInGbpsValue != null && minimumIntranetIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double minimumIntranetIngressThresholdInGbpsInstance = ((double)minimumIntranetIngressThresholdInGbpsValue);
                                        settingsInstance.MinimumIntranetIngressThresholdInGbps = minimumIntranetIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken toleranceFactorForIntranetIngressValue = settingsValue["toleranceFactorForIntranetIngress"];
                                    if (toleranceFactorForIntranetIngressValue != null && toleranceFactorForIntranetIngressValue.Type != JTokenType.Null)
                                    {
                                        double toleranceFactorForIntranetIngressInstance = ((double)toleranceFactorForIntranetIngressValue);
                                        settingsInstance.ToleranceFactorForIntranetIngress = toleranceFactorForIntranetIngressInstance;
                                    }
                                    
                                    JToken overallEgressThresholdInGbpsValue = settingsValue["overallEgressThresholdInGbps"];
                                    if (overallEgressThresholdInGbpsValue != null && overallEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double overallEgressThresholdInGbpsInstance = ((double)overallEgressThresholdInGbpsValue);
                                        settingsInstance.OverallEgressThresholdInGbps = overallEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken defaultEgressThresholdInGbpsValue = settingsValue["defaultEgressThresholdInGbps"];
                                    if (defaultEgressThresholdInGbpsValue != null && defaultEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double defaultEgressThresholdInGbpsInstance = ((double)defaultEgressThresholdInGbpsValue);
                                        settingsInstance.DefaultEgressThresholdInGbps = defaultEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken minimumEgressThresholdInGbpsValue = settingsValue["minimumEgressThresholdInGbps"];
                                    if (minimumEgressThresholdInGbpsValue != null && minimumEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double minimumEgressThresholdInGbpsInstance = ((double)minimumEgressThresholdInGbpsValue);
                                        settingsInstance.MinimumEgressThresholdInGbps = minimumEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken toleranceFactorForEgressValue = settingsValue["toleranceFactorForEgress"];
                                    if (toleranceFactorForEgressValue != null && toleranceFactorForEgressValue.Type != JTokenType.Null)
                                    {
                                        double toleranceFactorForEgressInstance = ((double)toleranceFactorForEgressValue);
                                        settingsInstance.ToleranceFactorForEgress = toleranceFactorForEgressInstance;
                                    }
                                    
                                    JToken overallIntranetEgressThresholdInGbpsValue = settingsValue["overallIntranetEgressThresholdInGbps"];
                                    if (overallIntranetEgressThresholdInGbpsValue != null && overallIntranetEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double overallIntranetEgressThresholdInGbpsInstance = ((double)overallIntranetEgressThresholdInGbpsValue);
                                        settingsInstance.OverallIntranetEgressThresholdInGbps = overallIntranetEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken defaultIntranetEgressThresholdInGbpsValue = settingsValue["defaultIntranetEgressThresholdInGbps"];
                                    if (defaultIntranetEgressThresholdInGbpsValue != null && defaultIntranetEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double defaultIntranetEgressThresholdInGbpsInstance = ((double)defaultIntranetEgressThresholdInGbpsValue);
                                        settingsInstance.DefaultIntranetEgressThresholdInGbps = defaultIntranetEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken minimumIntranetEgressThresholdInGbpsValue = settingsValue["minimumIntranetEgressThresholdInGbps"];
                                    if (minimumIntranetEgressThresholdInGbpsValue != null && minimumIntranetEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double minimumIntranetEgressThresholdInGbpsInstance = ((double)minimumIntranetEgressThresholdInGbpsValue);
                                        settingsInstance.MinimumIntranetEgressThresholdInGbps = minimumIntranetEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken toleranceFactorForIntranetEgressValue = settingsValue["toleranceFactorForIntranetEgress"];
                                    if (toleranceFactorForIntranetEgressValue != null && toleranceFactorForIntranetEgressValue.Type != JTokenType.Null)
                                    {
                                        double toleranceFactorForIntranetEgressInstance = ((double)toleranceFactorForIntranetEgressValue);
                                        settingsInstance.ToleranceFactorForIntranetEgress = toleranceFactorForIntranetEgressInstance;
                                    }
                                    
                                    JToken overallTotalIngressThresholdInGbpsValue = settingsValue["overallTotalIngressThresholdInGbps"];
                                    if (overallTotalIngressThresholdInGbpsValue != null && overallTotalIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double overallTotalIngressThresholdInGbpsInstance = ((double)overallTotalIngressThresholdInGbpsValue);
                                        settingsInstance.OverallTotalIngressThresholdInGbps = overallTotalIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken defaultTotalIngressThresholdInGbpsValue = settingsValue["defaultTotalIngressThresholdInGbps"];
                                    if (defaultTotalIngressThresholdInGbpsValue != null && defaultTotalIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double defaultTotalIngressThresholdInGbpsInstance = ((double)defaultTotalIngressThresholdInGbpsValue);
                                        settingsInstance.DefaultTotalIngressThresholdInGbps = defaultTotalIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken minimumTotalIngressThresholdInGbpsValue = settingsValue["minimumTotalIngressThresholdInGbps"];
                                    if (minimumTotalIngressThresholdInGbpsValue != null && minimumTotalIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double minimumTotalIngressThresholdInGbpsInstance = ((double)minimumTotalIngressThresholdInGbpsValue);
                                        settingsInstance.MinimumTotalIngressThresholdInGbps = minimumTotalIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken toleranceFactorForTotalIngressValue = settingsValue["toleranceFactorForTotalIngress"];
                                    if (toleranceFactorForTotalIngressValue != null && toleranceFactorForTotalIngressValue.Type != JTokenType.Null)
                                    {
                                        double toleranceFactorForTotalIngressInstance = ((double)toleranceFactorForTotalIngressValue);
                                        settingsInstance.ToleranceFactorForTotalIngress = toleranceFactorForTotalIngressInstance;
                                    }
                                    
                                    JToken overallTotalEgressThresholdInGbpsValue = settingsValue["overallTotalEgressThresholdInGbps"];
                                    if (overallTotalEgressThresholdInGbpsValue != null && overallTotalEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double overallTotalEgressThresholdInGbpsInstance = ((double)overallTotalEgressThresholdInGbpsValue);
                                        settingsInstance.OverallTotalEgressThresholdInGbps = overallTotalEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken defaultTotalEgressThresholdInGbpsValue = settingsValue["defaultTotalEgressThresholdInGbps"];
                                    if (defaultTotalEgressThresholdInGbpsValue != null && defaultTotalEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double defaultTotalEgressThresholdInGbpsInstance = ((double)defaultTotalEgressThresholdInGbpsValue);
                                        settingsInstance.DefaultTotalEgressThresholdInGbps = defaultTotalEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken minimumTotalEgressThresholdInGbpsValue = settingsValue["minimumTotalEgressThresholdInGbps"];
                                    if (minimumTotalEgressThresholdInGbpsValue != null && minimumTotalEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double minimumTotalEgressThresholdInGbpsInstance = ((double)minimumTotalEgressThresholdInGbpsValue);
                                        settingsInstance.MinimumTotalEgressThresholdInGbps = minimumTotalEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken toleranceFactorForTotalEgressValue = settingsValue["toleranceFactorForTotalEgress"];
                                    if (toleranceFactorForTotalEgressValue != null && toleranceFactorForTotalEgressValue.Type != JTokenType.Null)
                                    {
                                        double toleranceFactorForTotalEgressInstance = ((double)toleranceFactorForTotalEgressValue);
                                        settingsInstance.ToleranceFactorForTotalEgress = toleranceFactorForTotalEgressInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                farmInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                farmInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                farmInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                farmInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    farmInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricDefinitionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/metricdefinitions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricDefinitionsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricDefinitionsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    MetricDefinition metricDefinitionInstance = new MetricDefinition();
                                    result.Value.Add(metricDefinitionInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricDefinitionInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken unitValue = valueValue["unit"];
                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit unitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)unitValue), true));
                                        metricDefinitionInstance.Unit = unitInstance;
                                    }
                                    
                                    JToken primaryAggregationTypeValue = valueValue["primaryAggregationType"];
                                    if (primaryAggregationTypeValue != null && primaryAggregationTypeValue.Type != JTokenType.Null)
                                    {
                                        MetricPrimaryAggregationType primaryAggregationTypeInstance = ((MetricPrimaryAggregationType)Enum.Parse(typeof(MetricPrimaryAggregationType), ((string)primaryAggregationTypeValue), true));
                                        metricDefinitionInstance.PrimaryAggregationType = primaryAggregationTypeInstance;
                                    }
                                    
                                    JToken metricAvailabilitiesArray = valueValue["metricAvailabilities"];
                                    if (metricAvailabilitiesArray != null && metricAvailabilitiesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricAvailabilitiesValue in ((JArray)metricAvailabilitiesArray))
                                        {
                                            MetricAvailability metricAvailabilityInstance = new MetricAvailability();
                                            metricDefinitionInstance.MetricAvailabilities.Add(metricAvailabilityInstance);
                                            
                                            JToken timeGrainValue = metricAvailabilitiesValue["timeGrain"];
                                            if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                                metricAvailabilityInstance.TimeGrain = timeGrainInstance;
                                            }
                                            
                                            JToken retentionValue = metricAvailabilitiesValue["retention"];
                                            if (retentionValue != null && retentionValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan retentionInstance = XmlConvert.ToTimeSpan(((string)retentionValue));
                                                metricAvailabilityInstance.Retention = retentionInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/metrics";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Metric metricInstance = new Metric();
                                    result.Metrics.Add(metricInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken metricUnitValue = valueValue["metricUnit"];
                                    if (metricUnitValue != null && metricUnitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit metricUnitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)metricUnitValue), true));
                                        metricInstance.MetricUnit = metricUnitInstance;
                                    }
                                    
                                    JToken timeGrainValue = valueValue["timeGrain"];
                                    if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                        metricInstance.TimeGrain = timeGrainInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        metricInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = valueValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        metricInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken metricValuesArray = valueValue["metricValues"];
                                    if (metricValuesArray != null && metricValuesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricValuesValue in ((JArray)metricValuesArray))
                                        {
                                            MetricValue metricValueInstance = new MetricValue();
                                            metricInstance.MetricValues.Add(metricValueInstance);
                                            
                                            JToken timeStampValue = metricValuesValue["timeStamp"];
                                            if (timeStampValue != null && timeStampValue.Type != JTokenType.Null)
                                            {
                                                DateTime timeStampInstance = ((DateTime)timeStampValue);
                                                metricValueInstance.TimeStamp = timeStampInstance;
                                            }
                                            
                                            JToken averageValue = metricValuesValue["average"];
                                            if (averageValue != null && averageValue.Type != JTokenType.Null)
                                            {
                                                double averageInstance = ((double)averageValue);
                                                metricValueInstance.Average = averageInstance;
                                            }
                                            
                                            JToken minimumValue = metricValuesValue["minimum"];
                                            if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                            {
                                                double minimumInstance = ((double)minimumValue);
                                                metricValueInstance.Minimum = minimumInstance;
                                            }
                                            
                                            JToken maximumValue = metricValuesValue["maximum"];
                                            if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                            {
                                                double maximumInstance = ((double)maximumValue);
                                                metricValueInstance.Maximum = maximumInstance;
                                            }
                                            
                                            JToken totalValue = metricValuesValue["total"];
                                            if (totalValue != null && totalValue.Type != JTokenType.Null)
                                            {
                                                double totalInstance = ((double)totalValue);
                                                metricValueInstance.Total = totalInstance;
                                            }
                                            
                                            JToken countValue = metricValuesValue["count"];
                                            if (countValue != null && countValue.Type != JTokenType.Null)
                                            {
                                                int countInstance = ((int)countValue);
                                                metricValueInstance.Count = countInstance;
                                            }
                                            
                                            JToken propertiesValue = metricValuesValue["properties"];
                                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                            {
                                                string propertiesInstance = propertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                metricValueInstance.Properties = propertiesInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<FarmListResponse> ListAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FarmListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FarmListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    FarmModel farmModelInstance = new FarmModel();
                                    result.Farms.Add(farmModelInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        Farm propertiesInstance = new Farm();
                                        farmModelInstance.Properties = propertiesInstance;
                                        
                                        JToken settingsStoreValue = propertiesValue["settingsStore"];
                                        if (settingsStoreValue != null && settingsStoreValue.Type != JTokenType.Null)
                                        {
                                            string settingsStoreInstance = ((string)settingsStoreValue);
                                            propertiesInstance.SettingsStore = settingsStoreInstance;
                                        }
                                        
                                        JToken healthStatusValue = propertiesValue["healthStatus"];
                                        if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                        {
                                            HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                            propertiesInstance.HealthStatus = healthStatusInstance;
                                        }
                                        
                                        JToken settingsValue = propertiesValue["settings"];
                                        if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                        {
                                            FarmSettings settingsInstance = new FarmSettings();
                                            propertiesInstance.Settings = settingsInstance;
                                            
                                            JToken settingsPollingIntervalInSecondValue = settingsValue["settingsPollingIntervalInSecond"];
                                            if (settingsPollingIntervalInSecondValue != null && settingsPollingIntervalInSecondValue.Type != JTokenType.Null)
                                            {
                                                int settingsPollingIntervalInSecondInstance = ((int)settingsPollingIntervalInSecondValue);
                                                settingsInstance.SettingsPollingIntervalInSecond = settingsPollingIntervalInSecondInstance;
                                            }
                                            
                                            JToken retentionPeriodForDeletedStorageAccountsInDaysValue = settingsValue["retentionPeriodForDeletedStorageAccountsInDays"];
                                            if (retentionPeriodForDeletedStorageAccountsInDaysValue != null && retentionPeriodForDeletedStorageAccountsInDaysValue.Type != JTokenType.Null)
                                            {
                                                int retentionPeriodForDeletedStorageAccountsInDaysInstance = ((int)retentionPeriodForDeletedStorageAccountsInDaysValue);
                                                settingsInstance.RetentionPeriodForDeletedStorageAccountsInDays = retentionPeriodForDeletedStorageAccountsInDaysInstance;
                                            }
                                            
                                            JToken hostStyleHttpPortValue = settingsValue["hostStyleHttpPort"];
                                            if (hostStyleHttpPortValue != null && hostStyleHttpPortValue.Type != JTokenType.Null)
                                            {
                                                int hostStyleHttpPortInstance = ((int)hostStyleHttpPortValue);
                                                settingsInstance.HostStyleHttpPort = hostStyleHttpPortInstance;
                                            }
                                            
                                            JToken hostStyleHttpsPortValue = settingsValue["hostStyleHttpsPort"];
                                            if (hostStyleHttpsPortValue != null && hostStyleHttpsPortValue.Type != JTokenType.Null)
                                            {
                                                int hostStyleHttpsPortInstance = ((int)hostStyleHttpsPortValue);
                                                settingsInstance.HostStyleHttpsPort = hostStyleHttpsPortInstance;
                                            }
                                            
                                            JToken corsAllowedOriginsListValue = settingsValue["corsAllowedOriginsList"];
                                            if (corsAllowedOriginsListValue != null && corsAllowedOriginsListValue.Type != JTokenType.Null)
                                            {
                                                string corsAllowedOriginsListInstance = ((string)corsAllowedOriginsListValue);
                                                settingsInstance.CorsAllowedOriginsList = corsAllowedOriginsListInstance;
                                            }
                                            
                                            JToken dataCenterUriHostSuffixesValue = settingsValue["dataCenterUriHostSuffixes"];
                                            if (dataCenterUriHostSuffixesValue != null && dataCenterUriHostSuffixesValue.Type != JTokenType.Null)
                                            {
                                                string dataCenterUriHostSuffixesInstance = ((string)dataCenterUriHostSuffixesValue);
                                                settingsInstance.DataCenterUriHostSuffixes = dataCenterUriHostSuffixesInstance;
                                            }
                                            
                                            JToken bandwidthThrottleIsEnabledValue = settingsValue["bandwidthThrottleIsEnabled"];
                                            if (bandwidthThrottleIsEnabledValue != null && bandwidthThrottleIsEnabledValue.Type != JTokenType.Null)
                                            {
                                                bool bandwidthThrottleIsEnabledInstance = ((bool)bandwidthThrottleIsEnabledValue);
                                                settingsInstance.BandwidthThrottleIsEnabled = bandwidthThrottleIsEnabledInstance;
                                            }
                                            
                                            JToken usageCollectionIntervalInSecondsValue = settingsValue["usageCollectionIntervalInSeconds"];
                                            if (usageCollectionIntervalInSecondsValue != null && usageCollectionIntervalInSecondsValue.Type != JTokenType.Null)
                                            {
                                                int usageCollectionIntervalInSecondsInstance = ((int)usageCollectionIntervalInSecondsValue);
                                                settingsInstance.UsageCollectionIntervalInSeconds = usageCollectionIntervalInSecondsInstance;
                                            }
                                            
                                            JToken feedbackRefreshIntervalInSecondsValue = settingsValue["feedbackRefreshIntervalInSeconds"];
                                            if (feedbackRefreshIntervalInSecondsValue != null && feedbackRefreshIntervalInSecondsValue.Type != JTokenType.Null)
                                            {
                                                int feedbackRefreshIntervalInSecondsInstance = ((int)feedbackRefreshIntervalInSecondsValue);
                                                settingsInstance.FeedbackRefreshIntervalInSeconds = feedbackRefreshIntervalInSecondsInstance;
                                            }
                                            
                                            JToken numberOfAccountsToSyncValue = settingsValue["numberOfAccountsToSync"];
                                            if (numberOfAccountsToSyncValue != null && numberOfAccountsToSyncValue.Type != JTokenType.Null)
                                            {
                                                int numberOfAccountsToSyncInstance = ((int)numberOfAccountsToSyncValue);
                                                settingsInstance.NumberOfAccountsToSync = numberOfAccountsToSyncInstance;
                                            }
                                            
                                            JToken defaultThrottleProbabilityDecayIntervalInSecondsValue = settingsValue["defaultThrottleProbabilityDecayIntervalInSeconds"];
                                            if (defaultThrottleProbabilityDecayIntervalInSecondsValue != null && defaultThrottleProbabilityDecayIntervalInSecondsValue.Type != JTokenType.Null)
                                            {
                                                int defaultThrottleProbabilityDecayIntervalInSecondsInstance = ((int)defaultThrottleProbabilityDecayIntervalInSecondsValue);
                                                settingsInstance.DefaultThrottleProbabilityDecayIntervalInSeconds = defaultThrottleProbabilityDecayIntervalInSecondsInstance;
                                            }
                                            
                                            JToken gracePeriodForFullThrottlingInRefreshIntervalsValue = settingsValue["gracePeriodForFullThrottlingInRefreshIntervals"];
                                            if (gracePeriodForFullThrottlingInRefreshIntervalsValue != null && gracePeriodForFullThrottlingInRefreshIntervalsValue.Type != JTokenType.Null)
                                            {
                                                int gracePeriodForFullThrottlingInRefreshIntervalsInstance = ((int)gracePeriodForFullThrottlingInRefreshIntervalsValue);
                                                settingsInstance.GracePeriodForFullThrottlingInRefreshIntervals = gracePeriodForFullThrottlingInRefreshIntervalsInstance;
                                            }
                                            
                                            JToken gracePeriodMaxThrottleProbabilityValue = settingsValue["gracePeriodMaxThrottleProbability"];
                                            if (gracePeriodMaxThrottleProbabilityValue != null && gracePeriodMaxThrottleProbabilityValue.Type != JTokenType.Null)
                                            {
                                                double gracePeriodMaxThrottleProbabilityInstance = ((double)gracePeriodMaxThrottleProbabilityValue);
                                                settingsInstance.GracePeriodMaxThrottleProbability = gracePeriodMaxThrottleProbabilityInstance;
                                            }
                                            
                                            JToken overallRequestThresholdInTpsValue = settingsValue["overallRequestThresholdInTps"];
                                            if (overallRequestThresholdInTpsValue != null && overallRequestThresholdInTpsValue.Type != JTokenType.Null)
                                            {
                                                double overallRequestThresholdInTpsInstance = ((double)overallRequestThresholdInTpsValue);
                                                settingsInstance.OverallRequestThresholdInTps = overallRequestThresholdInTpsInstance;
                                            }
                                            
                                            JToken defaultRequestThresholdInTpsValue = settingsValue["defaultRequestThresholdInTps"];
                                            if (defaultRequestThresholdInTpsValue != null && defaultRequestThresholdInTpsValue.Type != JTokenType.Null)
                                            {
                                                double defaultRequestThresholdInTpsInstance = ((double)defaultRequestThresholdInTpsValue);
                                                settingsInstance.DefaultRequestThresholdInTps = defaultRequestThresholdInTpsInstance;
                                            }
                                            
                                            JToken minimumRequestThresholdInTpsValue = settingsValue["minimumRequestThresholdInTps"];
                                            if (minimumRequestThresholdInTpsValue != null && minimumRequestThresholdInTpsValue.Type != JTokenType.Null)
                                            {
                                                double minimumRequestThresholdInTpsInstance = ((double)minimumRequestThresholdInTpsValue);
                                                settingsInstance.MinimumRequestThresholdInTps = minimumRequestThresholdInTpsInstance;
                                            }
                                            
                                            JToken toleranceFactorForTpsValue = settingsValue["toleranceFactorForTps"];
                                            if (toleranceFactorForTpsValue != null && toleranceFactorForTpsValue.Type != JTokenType.Null)
                                            {
                                                double toleranceFactorForTpsInstance = ((double)toleranceFactorForTpsValue);
                                                settingsInstance.ToleranceFactorForTps = toleranceFactorForTpsInstance;
                                            }
                                            
                                            JToken overallIngressThresholdInGbpsValue = settingsValue["overallIngressThresholdInGbps"];
                                            if (overallIngressThresholdInGbpsValue != null && overallIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                            {
                                                double overallIngressThresholdInGbpsInstance = ((double)overallIngressThresholdInGbpsValue);
                                                settingsInstance.OverallIngressThresholdInGbps = overallIngressThresholdInGbpsInstance;
                                            }
                                            
                                            JToken defaultIngressThresholdInGbpsValue = settingsValue["defaultIngressThresholdInGbps"];
                                            if (defaultIngressThresholdInGbpsValue != null && defaultIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                            {
                                                double defaultIngressThresholdInGbpsInstance = ((double)defaultIngressThresholdInGbpsValue);
                                                settingsInstance.DefaultIngressThresholdInGbps = defaultIngressThresholdInGbpsInstance;
                                            }
                                            
                                            JToken minimumIngressThresholdInGbpsValue = settingsValue["minimumIngressThresholdInGbps"];
                                            if (minimumIngressThresholdInGbpsValue != null && minimumIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                            {
                                                double minimumIngressThresholdInGbpsInstance = ((double)minimumIngressThresholdInGbpsValue);
                                                settingsInstance.MinimumIngressThresholdInGbps = minimumIngressThresholdInGbpsInstance;
                                            }
                                            
                                            JToken toleranceFactorForIngressValue = settingsValue["toleranceFactorForIngress"];
                                            if (toleranceFactorForIngressValue != null && toleranceFactorForIngressValue.Type != JTokenType.Null)
                                            {
                                                double toleranceFactorForIngressInstance = ((double)toleranceFactorForIngressValue);
                                                settingsInstance.ToleranceFactorForIngress = toleranceFactorForIngressInstance;
                                            }
                                            
                                            JToken overallIntranetIngressThresholdInGbpsValue = settingsValue["overallIntranetIngressThresholdInGbps"];
                                            if (overallIntranetIngressThresholdInGbpsValue != null && overallIntranetIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                            {
                                                double overallIntranetIngressThresholdInGbpsInstance = ((double)overallIntranetIngressThresholdInGbpsValue);
                                                settingsInstance.OverallIntranetIngressThresholdInGbps = overallIntranetIngressThresholdInGbpsInstance;
                                            }
                                            
                                            JToken defaultIntranetIngressThresholdInGbpsValue = settingsValue["defaultIntranetIngressThresholdInGbps"];
                                            if (defaultIntranetIngressThresholdInGbpsValue != null && defaultIntranetIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                            {
                                                double defaultIntranetIngressThresholdInGbpsInstance = ((double)defaultIntranetIngressThresholdInGbpsValue);
                                                settingsInstance.DefaultIntranetIngressThresholdInGbps = defaultIntranetIngressThresholdInGbpsInstance;
                                            }
                                            
                                            JToken minimumIntranetIngressThresholdInGbpsValue = settingsValue["minimumIntranetIngressThresholdInGbps"];
                                            if (minimumIntranetIngressThresholdInGbpsValue != null && minimumIntranetIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                            {
                                                double minimumIntranetIngressThresholdInGbpsInstance = ((double)minimumIntranetIngressThresholdInGbpsValue);
                                                settingsInstance.MinimumIntranetIngressThresholdInGbps = minimumIntranetIngressThresholdInGbpsInstance;
                                            }
                                            
                                            JToken toleranceFactorForIntranetIngressValue = settingsValue["toleranceFactorForIntranetIngress"];
                                            if (toleranceFactorForIntranetIngressValue != null && toleranceFactorForIntranetIngressValue.Type != JTokenType.Null)
                                            {
                                                double toleranceFactorForIntranetIngressInstance = ((double)toleranceFactorForIntranetIngressValue);
                                                settingsInstance.ToleranceFactorForIntranetIngress = toleranceFactorForIntranetIngressInstance;
                                            }
                                            
                                            JToken overallEgressThresholdInGbpsValue = settingsValue["overallEgressThresholdInGbps"];
                                            if (overallEgressThresholdInGbpsValue != null && overallEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                            {
                                                double overallEgressThresholdInGbpsInstance = ((double)overallEgressThresholdInGbpsValue);
                                                settingsInstance.OverallEgressThresholdInGbps = overallEgressThresholdInGbpsInstance;
                                            }
                                            
                                            JToken defaultEgressThresholdInGbpsValue = settingsValue["defaultEgressThresholdInGbps"];
                                            if (defaultEgressThresholdInGbpsValue != null && defaultEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                            {
                                                double defaultEgressThresholdInGbpsInstance = ((double)defaultEgressThresholdInGbpsValue);
                                                settingsInstance.DefaultEgressThresholdInGbps = defaultEgressThresholdInGbpsInstance;
                                            }
                                            
                                            JToken minimumEgressThresholdInGbpsValue = settingsValue["minimumEgressThresholdInGbps"];
                                            if (minimumEgressThresholdInGbpsValue != null && minimumEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                            {
                                                double minimumEgressThresholdInGbpsInstance = ((double)minimumEgressThresholdInGbpsValue);
                                                settingsInstance.MinimumEgressThresholdInGbps = minimumEgressThresholdInGbpsInstance;
                                            }
                                            
                                            JToken toleranceFactorForEgressValue = settingsValue["toleranceFactorForEgress"];
                                            if (toleranceFactorForEgressValue != null && toleranceFactorForEgressValue.Type != JTokenType.Null)
                                            {
                                                double toleranceFactorForEgressInstance = ((double)toleranceFactorForEgressValue);
                                                settingsInstance.ToleranceFactorForEgress = toleranceFactorForEgressInstance;
                                            }
                                            
                                            JToken overallIntranetEgressThresholdInGbpsValue = settingsValue["overallIntranetEgressThresholdInGbps"];
                                            if (overallIntranetEgressThresholdInGbpsValue != null && overallIntranetEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                            {
                                                double overallIntranetEgressThresholdInGbpsInstance = ((double)overallIntranetEgressThresholdInGbpsValue);
                                                settingsInstance.OverallIntranetEgressThresholdInGbps = overallIntranetEgressThresholdInGbpsInstance;
                                            }
                                            
                                            JToken defaultIntranetEgressThresholdInGbpsValue = settingsValue["defaultIntranetEgressThresholdInGbps"];
                                            if (defaultIntranetEgressThresholdInGbpsValue != null && defaultIntranetEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                            {
                                                double defaultIntranetEgressThresholdInGbpsInstance = ((double)defaultIntranetEgressThresholdInGbpsValue);
                                                settingsInstance.DefaultIntranetEgressThresholdInGbps = defaultIntranetEgressThresholdInGbpsInstance;
                                            }
                                            
                                            JToken minimumIntranetEgressThresholdInGbpsValue = settingsValue["minimumIntranetEgressThresholdInGbps"];
                                            if (minimumIntranetEgressThresholdInGbpsValue != null && minimumIntranetEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                            {
                                                double minimumIntranetEgressThresholdInGbpsInstance = ((double)minimumIntranetEgressThresholdInGbpsValue);
                                                settingsInstance.MinimumIntranetEgressThresholdInGbps = minimumIntranetEgressThresholdInGbpsInstance;
                                            }
                                            
                                            JToken toleranceFactorForIntranetEgressValue = settingsValue["toleranceFactorForIntranetEgress"];
                                            if (toleranceFactorForIntranetEgressValue != null && toleranceFactorForIntranetEgressValue.Type != JTokenType.Null)
                                            {
                                                double toleranceFactorForIntranetEgressInstance = ((double)toleranceFactorForIntranetEgressValue);
                                                settingsInstance.ToleranceFactorForIntranetEgress = toleranceFactorForIntranetEgressInstance;
                                            }
                                            
                                            JToken overallTotalIngressThresholdInGbpsValue = settingsValue["overallTotalIngressThresholdInGbps"];
                                            if (overallTotalIngressThresholdInGbpsValue != null && overallTotalIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                            {
                                                double overallTotalIngressThresholdInGbpsInstance = ((double)overallTotalIngressThresholdInGbpsValue);
                                                settingsInstance.OverallTotalIngressThresholdInGbps = overallTotalIngressThresholdInGbpsInstance;
                                            }
                                            
                                            JToken defaultTotalIngressThresholdInGbpsValue = settingsValue["defaultTotalIngressThresholdInGbps"];
                                            if (defaultTotalIngressThresholdInGbpsValue != null && defaultTotalIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                            {
                                                double defaultTotalIngressThresholdInGbpsInstance = ((double)defaultTotalIngressThresholdInGbpsValue);
                                                settingsInstance.DefaultTotalIngressThresholdInGbps = defaultTotalIngressThresholdInGbpsInstance;
                                            }
                                            
                                            JToken minimumTotalIngressThresholdInGbpsValue = settingsValue["minimumTotalIngressThresholdInGbps"];
                                            if (minimumTotalIngressThresholdInGbpsValue != null && minimumTotalIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                            {
                                                double minimumTotalIngressThresholdInGbpsInstance = ((double)minimumTotalIngressThresholdInGbpsValue);
                                                settingsInstance.MinimumTotalIngressThresholdInGbps = minimumTotalIngressThresholdInGbpsInstance;
                                            }
                                            
                                            JToken toleranceFactorForTotalIngressValue = settingsValue["toleranceFactorForTotalIngress"];
                                            if (toleranceFactorForTotalIngressValue != null && toleranceFactorForTotalIngressValue.Type != JTokenType.Null)
                                            {
                                                double toleranceFactorForTotalIngressInstance = ((double)toleranceFactorForTotalIngressValue);
                                                settingsInstance.ToleranceFactorForTotalIngress = toleranceFactorForTotalIngressInstance;
                                            }
                                            
                                            JToken overallTotalEgressThresholdInGbpsValue = settingsValue["overallTotalEgressThresholdInGbps"];
                                            if (overallTotalEgressThresholdInGbpsValue != null && overallTotalEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                            {
                                                double overallTotalEgressThresholdInGbpsInstance = ((double)overallTotalEgressThresholdInGbpsValue);
                                                settingsInstance.OverallTotalEgressThresholdInGbps = overallTotalEgressThresholdInGbpsInstance;
                                            }
                                            
                                            JToken defaultTotalEgressThresholdInGbpsValue = settingsValue["defaultTotalEgressThresholdInGbps"];
                                            if (defaultTotalEgressThresholdInGbpsValue != null && defaultTotalEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                            {
                                                double defaultTotalEgressThresholdInGbpsInstance = ((double)defaultTotalEgressThresholdInGbpsValue);
                                                settingsInstance.DefaultTotalEgressThresholdInGbps = defaultTotalEgressThresholdInGbpsInstance;
                                            }
                                            
                                            JToken minimumTotalEgressThresholdInGbpsValue = settingsValue["minimumTotalEgressThresholdInGbps"];
                                            if (minimumTotalEgressThresholdInGbpsValue != null && minimumTotalEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                            {
                                                double minimumTotalEgressThresholdInGbpsInstance = ((double)minimumTotalEgressThresholdInGbpsValue);
                                                settingsInstance.MinimumTotalEgressThresholdInGbps = minimumTotalEgressThresholdInGbpsInstance;
                                            }
                                            
                                            JToken toleranceFactorForTotalEgressValue = settingsValue["toleranceFactorForTotalEgress"];
                                            if (toleranceFactorForTotalEgressValue != null && toleranceFactorForTotalEgressValue.Type != JTokenType.Null)
                                            {
                                                double toleranceFactorForTotalEgressInstance = ((double)toleranceFactorForTotalEgressValue);
                                                settingsInstance.ToleranceFactorForTotalEgress = toleranceFactorForTotalEgressInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        farmModelInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        farmModelInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        farmModelInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        farmModelInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            farmModelInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> OnDemandGcAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                TracingAdapter.Enter(invocationId, this, "OnDemandGcAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/ondemandgc";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<FarmGetResponse> UpdateAsync(string resourceGroupName, string farmId, FarmUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject farmUpdateParametersValue = new JObject();
                requestDoc = farmUpdateParametersValue;
                
                if (parameters.Farm != null)
                {
                    JObject propertiesValue = new JObject();
                    farmUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Farm.Settings != null)
                    {
                        JObject settingsValue = new JObject();
                        propertiesValue["settings"] = settingsValue;
                        
                        if (parameters.Farm.Settings.SettingsPollingIntervalInSecond != null)
                        {
                            settingsValue["settingsPollingIntervalInSecond"] = parameters.Farm.Settings.SettingsPollingIntervalInSecond.Value;
                        }
                        
                        if (parameters.Farm.Settings.RetentionPeriodForDeletedStorageAccountsInDays != null)
                        {
                            settingsValue["retentionPeriodForDeletedStorageAccountsInDays"] = parameters.Farm.Settings.RetentionPeriodForDeletedStorageAccountsInDays.Value;
                        }
                        
                        if (parameters.Farm.Settings.HostStyleHttpPort != null)
                        {
                            settingsValue["hostStyleHttpPort"] = parameters.Farm.Settings.HostStyleHttpPort.Value;
                        }
                        
                        if (parameters.Farm.Settings.HostStyleHttpsPort != null)
                        {
                            settingsValue["hostStyleHttpsPort"] = parameters.Farm.Settings.HostStyleHttpsPort.Value;
                        }
                        
                        if (parameters.Farm.Settings.CorsAllowedOriginsList != null)
                        {
                            settingsValue["corsAllowedOriginsList"] = parameters.Farm.Settings.CorsAllowedOriginsList;
                        }
                        
                        if (parameters.Farm.Settings.DataCenterUriHostSuffixes != null)
                        {
                            settingsValue["dataCenterUriHostSuffixes"] = parameters.Farm.Settings.DataCenterUriHostSuffixes;
                        }
                        
                        if (parameters.Farm.Settings.BandwidthThrottleIsEnabled != null)
                        {
                            settingsValue["bandwidthThrottleIsEnabled"] = parameters.Farm.Settings.BandwidthThrottleIsEnabled.Value;
                        }
                        
                        if (parameters.Farm.Settings.UsageCollectionIntervalInSeconds != null)
                        {
                            settingsValue["usageCollectionIntervalInSeconds"] = parameters.Farm.Settings.UsageCollectionIntervalInSeconds.Value;
                        }
                        
                        if (parameters.Farm.Settings.FeedbackRefreshIntervalInSeconds != null)
                        {
                            settingsValue["feedbackRefreshIntervalInSeconds"] = parameters.Farm.Settings.FeedbackRefreshIntervalInSeconds.Value;
                        }
                        
                        if (parameters.Farm.Settings.NumberOfAccountsToSync != null)
                        {
                            settingsValue["numberOfAccountsToSync"] = parameters.Farm.Settings.NumberOfAccountsToSync.Value;
                        }
                        
                        if (parameters.Farm.Settings.DefaultThrottleProbabilityDecayIntervalInSeconds != null)
                        {
                            settingsValue["defaultThrottleProbabilityDecayIntervalInSeconds"] = parameters.Farm.Settings.DefaultThrottleProbabilityDecayIntervalInSeconds.Value;
                        }
                        
                        if (parameters.Farm.Settings.GracePeriodForFullThrottlingInRefreshIntervals != null)
                        {
                            settingsValue["gracePeriodForFullThrottlingInRefreshIntervals"] = parameters.Farm.Settings.GracePeriodForFullThrottlingInRefreshIntervals.Value;
                        }
                        
                        if (parameters.Farm.Settings.GracePeriodMaxThrottleProbability != null)
                        {
                            settingsValue["gracePeriodMaxThrottleProbability"] = parameters.Farm.Settings.GracePeriodMaxThrottleProbability.Value;
                        }
                        
                        if (parameters.Farm.Settings.OverallRequestThresholdInTps != null)
                        {
                            settingsValue["overallRequestThresholdInTps"] = parameters.Farm.Settings.OverallRequestThresholdInTps.Value;
                        }
                        
                        if (parameters.Farm.Settings.DefaultRequestThresholdInTps != null)
                        {
                            settingsValue["defaultRequestThresholdInTps"] = parameters.Farm.Settings.DefaultRequestThresholdInTps.Value;
                        }
                        
                        if (parameters.Farm.Settings.MinimumRequestThresholdInTps != null)
                        {
                            settingsValue["minimumRequestThresholdInTps"] = parameters.Farm.Settings.MinimumRequestThresholdInTps.Value;
                        }
                        
                        if (parameters.Farm.Settings.ToleranceFactorForTps != null)
                        {
                            settingsValue["toleranceFactorForTps"] = parameters.Farm.Settings.ToleranceFactorForTps.Value;
                        }
                        
                        if (parameters.Farm.Settings.OverallIngressThresholdInGbps != null)
                        {
                            settingsValue["overallIngressThresholdInGbps"] = parameters.Farm.Settings.OverallIngressThresholdInGbps.Value;
                        }
                        
                        if (parameters.Farm.Settings.DefaultIngressThresholdInGbps != null)
                        {
                            settingsValue["defaultIngressThresholdInGbps"] = parameters.Farm.Settings.DefaultIngressThresholdInGbps.Value;
                        }
                        
                        if (parameters.Farm.Settings.MinimumIngressThresholdInGbps != null)
                        {
                            settingsValue["minimumIngressThresholdInGbps"] = parameters.Farm.Settings.MinimumIngressThresholdInGbps.Value;
                        }
                        
                        if (parameters.Farm.Settings.ToleranceFactorForIngress != null)
                        {
                            settingsValue["toleranceFactorForIngress"] = parameters.Farm.Settings.ToleranceFactorForIngress.Value;
                        }
                        
                        if (parameters.Farm.Settings.OverallIntranetIngressThresholdInGbps != null)
                        {
                            settingsValue["overallIntranetIngressThresholdInGbps"] = parameters.Farm.Settings.OverallIntranetIngressThresholdInGbps.Value;
                        }
                        
                        if (parameters.Farm.Settings.DefaultIntranetIngressThresholdInGbps != null)
                        {
                            settingsValue["defaultIntranetIngressThresholdInGbps"] = parameters.Farm.Settings.DefaultIntranetIngressThresholdInGbps.Value;
                        }
                        
                        if (parameters.Farm.Settings.MinimumIntranetIngressThresholdInGbps != null)
                        {
                            settingsValue["minimumIntranetIngressThresholdInGbps"] = parameters.Farm.Settings.MinimumIntranetIngressThresholdInGbps.Value;
                        }
                        
                        if (parameters.Farm.Settings.ToleranceFactorForIntranetIngress != null)
                        {
                            settingsValue["toleranceFactorForIntranetIngress"] = parameters.Farm.Settings.ToleranceFactorForIntranetIngress.Value;
                        }
                        
                        if (parameters.Farm.Settings.OverallEgressThresholdInGbps != null)
                        {
                            settingsValue["overallEgressThresholdInGbps"] = parameters.Farm.Settings.OverallEgressThresholdInGbps.Value;
                        }
                        
                        if (parameters.Farm.Settings.DefaultEgressThresholdInGbps != null)
                        {
                            settingsValue["defaultEgressThresholdInGbps"] = parameters.Farm.Settings.DefaultEgressThresholdInGbps.Value;
                        }
                        
                        if (parameters.Farm.Settings.MinimumEgressThresholdInGbps != null)
                        {
                            settingsValue["minimumEgressThresholdInGbps"] = parameters.Farm.Settings.MinimumEgressThresholdInGbps.Value;
                        }
                        
                        if (parameters.Farm.Settings.ToleranceFactorForEgress != null)
                        {
                            settingsValue["toleranceFactorForEgress"] = parameters.Farm.Settings.ToleranceFactorForEgress.Value;
                        }
                        
                        if (parameters.Farm.Settings.OverallIntranetEgressThresholdInGbps != null)
                        {
                            settingsValue["overallIntranetEgressThresholdInGbps"] = parameters.Farm.Settings.OverallIntranetEgressThresholdInGbps.Value;
                        }
                        
                        if (parameters.Farm.Settings.DefaultIntranetEgressThresholdInGbps != null)
                        {
                            settingsValue["defaultIntranetEgressThresholdInGbps"] = parameters.Farm.Settings.DefaultIntranetEgressThresholdInGbps.Value;
                        }
                        
                        if (parameters.Farm.Settings.MinimumIntranetEgressThresholdInGbps != null)
                        {
                            settingsValue["minimumIntranetEgressThresholdInGbps"] = parameters.Farm.Settings.MinimumIntranetEgressThresholdInGbps.Value;
                        }
                        
                        if (parameters.Farm.Settings.ToleranceFactorForIntranetEgress != null)
                        {
                            settingsValue["toleranceFactorForIntranetEgress"] = parameters.Farm.Settings.ToleranceFactorForIntranetEgress.Value;
                        }
                        
                        if (parameters.Farm.Settings.OverallTotalIngressThresholdInGbps != null)
                        {
                            settingsValue["overallTotalIngressThresholdInGbps"] = parameters.Farm.Settings.OverallTotalIngressThresholdInGbps.Value;
                        }
                        
                        if (parameters.Farm.Settings.DefaultTotalIngressThresholdInGbps != null)
                        {
                            settingsValue["defaultTotalIngressThresholdInGbps"] = parameters.Farm.Settings.DefaultTotalIngressThresholdInGbps.Value;
                        }
                        
                        if (parameters.Farm.Settings.MinimumTotalIngressThresholdInGbps != null)
                        {
                            settingsValue["minimumTotalIngressThresholdInGbps"] = parameters.Farm.Settings.MinimumTotalIngressThresholdInGbps.Value;
                        }
                        
                        if (parameters.Farm.Settings.ToleranceFactorForTotalIngress != null)
                        {
                            settingsValue["toleranceFactorForTotalIngress"] = parameters.Farm.Settings.ToleranceFactorForTotalIngress.Value;
                        }
                        
                        if (parameters.Farm.Settings.OverallTotalEgressThresholdInGbps != null)
                        {
                            settingsValue["overallTotalEgressThresholdInGbps"] = parameters.Farm.Settings.OverallTotalEgressThresholdInGbps.Value;
                        }
                        
                        if (parameters.Farm.Settings.DefaultTotalEgressThresholdInGbps != null)
                        {
                            settingsValue["defaultTotalEgressThresholdInGbps"] = parameters.Farm.Settings.DefaultTotalEgressThresholdInGbps.Value;
                        }
                        
                        if (parameters.Farm.Settings.MinimumTotalEgressThresholdInGbps != null)
                        {
                            settingsValue["minimumTotalEgressThresholdInGbps"] = parameters.Farm.Settings.MinimumTotalEgressThresholdInGbps.Value;
                        }
                        
                        if (parameters.Farm.Settings.ToleranceFactorForTotalEgress != null)
                        {
                            settingsValue["toleranceFactorForTotalEgress"] = parameters.Farm.Settings.ToleranceFactorForTotalEgress.Value;
                        }
                    }
                }
                
                if (parameters.Id != null)
                {
                    farmUpdateParametersValue["id"] = parameters.Id;
                }
                
                if (parameters.Name != null)
                {
                    farmUpdateParametersValue["name"] = parameters.Name;
                }
                
                if (parameters.Type != null)
                {
                    farmUpdateParametersValue["type"] = parameters.Type;
                }
                
                if (parameters.Location != null)
                {
                    farmUpdateParametersValue["location"] = parameters.Location;
                }
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    farmUpdateParametersValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FarmGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FarmGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            FarmModel farmInstance = new FarmModel();
                            result.Farm = farmInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                Farm propertiesInstance = new Farm();
                                farmInstance.Properties = propertiesInstance;
                                
                                JToken settingsStoreValue = propertiesValue2["settingsStore"];
                                if (settingsStoreValue != null && settingsStoreValue.Type != JTokenType.Null)
                                {
                                    string settingsStoreInstance = ((string)settingsStoreValue);
                                    propertiesInstance.SettingsStore = settingsStoreInstance;
                                }
                                
                                JToken healthStatusValue = propertiesValue2["healthStatus"];
                                if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                {
                                    HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                    propertiesInstance.HealthStatus = healthStatusInstance;
                                }
                                
                                JToken settingsValue2 = propertiesValue2["settings"];
                                if (settingsValue2 != null && settingsValue2.Type != JTokenType.Null)
                                {
                                    FarmSettings settingsInstance = new FarmSettings();
                                    propertiesInstance.Settings = settingsInstance;
                                    
                                    JToken settingsPollingIntervalInSecondValue = settingsValue2["settingsPollingIntervalInSecond"];
                                    if (settingsPollingIntervalInSecondValue != null && settingsPollingIntervalInSecondValue.Type != JTokenType.Null)
                                    {
                                        int settingsPollingIntervalInSecondInstance = ((int)settingsPollingIntervalInSecondValue);
                                        settingsInstance.SettingsPollingIntervalInSecond = settingsPollingIntervalInSecondInstance;
                                    }
                                    
                                    JToken retentionPeriodForDeletedStorageAccountsInDaysValue = settingsValue2["retentionPeriodForDeletedStorageAccountsInDays"];
                                    if (retentionPeriodForDeletedStorageAccountsInDaysValue != null && retentionPeriodForDeletedStorageAccountsInDaysValue.Type != JTokenType.Null)
                                    {
                                        int retentionPeriodForDeletedStorageAccountsInDaysInstance = ((int)retentionPeriodForDeletedStorageAccountsInDaysValue);
                                        settingsInstance.RetentionPeriodForDeletedStorageAccountsInDays = retentionPeriodForDeletedStorageAccountsInDaysInstance;
                                    }
                                    
                                    JToken hostStyleHttpPortValue = settingsValue2["hostStyleHttpPort"];
                                    if (hostStyleHttpPortValue != null && hostStyleHttpPortValue.Type != JTokenType.Null)
                                    {
                                        int hostStyleHttpPortInstance = ((int)hostStyleHttpPortValue);
                                        settingsInstance.HostStyleHttpPort = hostStyleHttpPortInstance;
                                    }
                                    
                                    JToken hostStyleHttpsPortValue = settingsValue2["hostStyleHttpsPort"];
                                    if (hostStyleHttpsPortValue != null && hostStyleHttpsPortValue.Type != JTokenType.Null)
                                    {
                                        int hostStyleHttpsPortInstance = ((int)hostStyleHttpsPortValue);
                                        settingsInstance.HostStyleHttpsPort = hostStyleHttpsPortInstance;
                                    }
                                    
                                    JToken corsAllowedOriginsListValue = settingsValue2["corsAllowedOriginsList"];
                                    if (corsAllowedOriginsListValue != null && corsAllowedOriginsListValue.Type != JTokenType.Null)
                                    {
                                        string corsAllowedOriginsListInstance = ((string)corsAllowedOriginsListValue);
                                        settingsInstance.CorsAllowedOriginsList = corsAllowedOriginsListInstance;
                                    }
                                    
                                    JToken dataCenterUriHostSuffixesValue = settingsValue2["dataCenterUriHostSuffixes"];
                                    if (dataCenterUriHostSuffixesValue != null && dataCenterUriHostSuffixesValue.Type != JTokenType.Null)
                                    {
                                        string dataCenterUriHostSuffixesInstance = ((string)dataCenterUriHostSuffixesValue);
                                        settingsInstance.DataCenterUriHostSuffixes = dataCenterUriHostSuffixesInstance;
                                    }
                                    
                                    JToken bandwidthThrottleIsEnabledValue = settingsValue2["bandwidthThrottleIsEnabled"];
                                    if (bandwidthThrottleIsEnabledValue != null && bandwidthThrottleIsEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool bandwidthThrottleIsEnabledInstance = ((bool)bandwidthThrottleIsEnabledValue);
                                        settingsInstance.BandwidthThrottleIsEnabled = bandwidthThrottleIsEnabledInstance;
                                    }
                                    
                                    JToken usageCollectionIntervalInSecondsValue = settingsValue2["usageCollectionIntervalInSeconds"];
                                    if (usageCollectionIntervalInSecondsValue != null && usageCollectionIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int usageCollectionIntervalInSecondsInstance = ((int)usageCollectionIntervalInSecondsValue);
                                        settingsInstance.UsageCollectionIntervalInSeconds = usageCollectionIntervalInSecondsInstance;
                                    }
                                    
                                    JToken feedbackRefreshIntervalInSecondsValue = settingsValue2["feedbackRefreshIntervalInSeconds"];
                                    if (feedbackRefreshIntervalInSecondsValue != null && feedbackRefreshIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int feedbackRefreshIntervalInSecondsInstance = ((int)feedbackRefreshIntervalInSecondsValue);
                                        settingsInstance.FeedbackRefreshIntervalInSeconds = feedbackRefreshIntervalInSecondsInstance;
                                    }
                                    
                                    JToken numberOfAccountsToSyncValue = settingsValue2["numberOfAccountsToSync"];
                                    if (numberOfAccountsToSyncValue != null && numberOfAccountsToSyncValue.Type != JTokenType.Null)
                                    {
                                        int numberOfAccountsToSyncInstance = ((int)numberOfAccountsToSyncValue);
                                        settingsInstance.NumberOfAccountsToSync = numberOfAccountsToSyncInstance;
                                    }
                                    
                                    JToken defaultThrottleProbabilityDecayIntervalInSecondsValue = settingsValue2["defaultThrottleProbabilityDecayIntervalInSeconds"];
                                    if (defaultThrottleProbabilityDecayIntervalInSecondsValue != null && defaultThrottleProbabilityDecayIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int defaultThrottleProbabilityDecayIntervalInSecondsInstance = ((int)defaultThrottleProbabilityDecayIntervalInSecondsValue);
                                        settingsInstance.DefaultThrottleProbabilityDecayIntervalInSeconds = defaultThrottleProbabilityDecayIntervalInSecondsInstance;
                                    }
                                    
                                    JToken gracePeriodForFullThrottlingInRefreshIntervalsValue = settingsValue2["gracePeriodForFullThrottlingInRefreshIntervals"];
                                    if (gracePeriodForFullThrottlingInRefreshIntervalsValue != null && gracePeriodForFullThrottlingInRefreshIntervalsValue.Type != JTokenType.Null)
                                    {
                                        int gracePeriodForFullThrottlingInRefreshIntervalsInstance = ((int)gracePeriodForFullThrottlingInRefreshIntervalsValue);
                                        settingsInstance.GracePeriodForFullThrottlingInRefreshIntervals = gracePeriodForFullThrottlingInRefreshIntervalsInstance;
                                    }
                                    
                                    JToken gracePeriodMaxThrottleProbabilityValue = settingsValue2["gracePeriodMaxThrottleProbability"];
                                    if (gracePeriodMaxThrottleProbabilityValue != null && gracePeriodMaxThrottleProbabilityValue.Type != JTokenType.Null)
                                    {
                                        double gracePeriodMaxThrottleProbabilityInstance = ((double)gracePeriodMaxThrottleProbabilityValue);
                                        settingsInstance.GracePeriodMaxThrottleProbability = gracePeriodMaxThrottleProbabilityInstance;
                                    }
                                    
                                    JToken overallRequestThresholdInTpsValue = settingsValue2["overallRequestThresholdInTps"];
                                    if (overallRequestThresholdInTpsValue != null && overallRequestThresholdInTpsValue.Type != JTokenType.Null)
                                    {
                                        double overallRequestThresholdInTpsInstance = ((double)overallRequestThresholdInTpsValue);
                                        settingsInstance.OverallRequestThresholdInTps = overallRequestThresholdInTpsInstance;
                                    }
                                    
                                    JToken defaultRequestThresholdInTpsValue = settingsValue2["defaultRequestThresholdInTps"];
                                    if (defaultRequestThresholdInTpsValue != null && defaultRequestThresholdInTpsValue.Type != JTokenType.Null)
                                    {
                                        double defaultRequestThresholdInTpsInstance = ((double)defaultRequestThresholdInTpsValue);
                                        settingsInstance.DefaultRequestThresholdInTps = defaultRequestThresholdInTpsInstance;
                                    }
                                    
                                    JToken minimumRequestThresholdInTpsValue = settingsValue2["minimumRequestThresholdInTps"];
                                    if (minimumRequestThresholdInTpsValue != null && minimumRequestThresholdInTpsValue.Type != JTokenType.Null)
                                    {
                                        double minimumRequestThresholdInTpsInstance = ((double)minimumRequestThresholdInTpsValue);
                                        settingsInstance.MinimumRequestThresholdInTps = minimumRequestThresholdInTpsInstance;
                                    }
                                    
                                    JToken toleranceFactorForTpsValue = settingsValue2["toleranceFactorForTps"];
                                    if (toleranceFactorForTpsValue != null && toleranceFactorForTpsValue.Type != JTokenType.Null)
                                    {
                                        double toleranceFactorForTpsInstance = ((double)toleranceFactorForTpsValue);
                                        settingsInstance.ToleranceFactorForTps = toleranceFactorForTpsInstance;
                                    }
                                    
                                    JToken overallIngressThresholdInGbpsValue = settingsValue2["overallIngressThresholdInGbps"];
                                    if (overallIngressThresholdInGbpsValue != null && overallIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double overallIngressThresholdInGbpsInstance = ((double)overallIngressThresholdInGbpsValue);
                                        settingsInstance.OverallIngressThresholdInGbps = overallIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken defaultIngressThresholdInGbpsValue = settingsValue2["defaultIngressThresholdInGbps"];
                                    if (defaultIngressThresholdInGbpsValue != null && defaultIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double defaultIngressThresholdInGbpsInstance = ((double)defaultIngressThresholdInGbpsValue);
                                        settingsInstance.DefaultIngressThresholdInGbps = defaultIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken minimumIngressThresholdInGbpsValue = settingsValue2["minimumIngressThresholdInGbps"];
                                    if (minimumIngressThresholdInGbpsValue != null && minimumIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double minimumIngressThresholdInGbpsInstance = ((double)minimumIngressThresholdInGbpsValue);
                                        settingsInstance.MinimumIngressThresholdInGbps = minimumIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken toleranceFactorForIngressValue = settingsValue2["toleranceFactorForIngress"];
                                    if (toleranceFactorForIngressValue != null && toleranceFactorForIngressValue.Type != JTokenType.Null)
                                    {
                                        double toleranceFactorForIngressInstance = ((double)toleranceFactorForIngressValue);
                                        settingsInstance.ToleranceFactorForIngress = toleranceFactorForIngressInstance;
                                    }
                                    
                                    JToken overallIntranetIngressThresholdInGbpsValue = settingsValue2["overallIntranetIngressThresholdInGbps"];
                                    if (overallIntranetIngressThresholdInGbpsValue != null && overallIntranetIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double overallIntranetIngressThresholdInGbpsInstance = ((double)overallIntranetIngressThresholdInGbpsValue);
                                        settingsInstance.OverallIntranetIngressThresholdInGbps = overallIntranetIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken defaultIntranetIngressThresholdInGbpsValue = settingsValue2["defaultIntranetIngressThresholdInGbps"];
                                    if (defaultIntranetIngressThresholdInGbpsValue != null && defaultIntranetIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double defaultIntranetIngressThresholdInGbpsInstance = ((double)defaultIntranetIngressThresholdInGbpsValue);
                                        settingsInstance.DefaultIntranetIngressThresholdInGbps = defaultIntranetIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken minimumIntranetIngressThresholdInGbpsValue = settingsValue2["minimumIntranetIngressThresholdInGbps"];
                                    if (minimumIntranetIngressThresholdInGbpsValue != null && minimumIntranetIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double minimumIntranetIngressThresholdInGbpsInstance = ((double)minimumIntranetIngressThresholdInGbpsValue);
                                        settingsInstance.MinimumIntranetIngressThresholdInGbps = minimumIntranetIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken toleranceFactorForIntranetIngressValue = settingsValue2["toleranceFactorForIntranetIngress"];
                                    if (toleranceFactorForIntranetIngressValue != null && toleranceFactorForIntranetIngressValue.Type != JTokenType.Null)
                                    {
                                        double toleranceFactorForIntranetIngressInstance = ((double)toleranceFactorForIntranetIngressValue);
                                        settingsInstance.ToleranceFactorForIntranetIngress = toleranceFactorForIntranetIngressInstance;
                                    }
                                    
                                    JToken overallEgressThresholdInGbpsValue = settingsValue2["overallEgressThresholdInGbps"];
                                    if (overallEgressThresholdInGbpsValue != null && overallEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double overallEgressThresholdInGbpsInstance = ((double)overallEgressThresholdInGbpsValue);
                                        settingsInstance.OverallEgressThresholdInGbps = overallEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken defaultEgressThresholdInGbpsValue = settingsValue2["defaultEgressThresholdInGbps"];
                                    if (defaultEgressThresholdInGbpsValue != null && defaultEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double defaultEgressThresholdInGbpsInstance = ((double)defaultEgressThresholdInGbpsValue);
                                        settingsInstance.DefaultEgressThresholdInGbps = defaultEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken minimumEgressThresholdInGbpsValue = settingsValue2["minimumEgressThresholdInGbps"];
                                    if (minimumEgressThresholdInGbpsValue != null && minimumEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double minimumEgressThresholdInGbpsInstance = ((double)minimumEgressThresholdInGbpsValue);
                                        settingsInstance.MinimumEgressThresholdInGbps = minimumEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken toleranceFactorForEgressValue = settingsValue2["toleranceFactorForEgress"];
                                    if (toleranceFactorForEgressValue != null && toleranceFactorForEgressValue.Type != JTokenType.Null)
                                    {
                                        double toleranceFactorForEgressInstance = ((double)toleranceFactorForEgressValue);
                                        settingsInstance.ToleranceFactorForEgress = toleranceFactorForEgressInstance;
                                    }
                                    
                                    JToken overallIntranetEgressThresholdInGbpsValue = settingsValue2["overallIntranetEgressThresholdInGbps"];
                                    if (overallIntranetEgressThresholdInGbpsValue != null && overallIntranetEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double overallIntranetEgressThresholdInGbpsInstance = ((double)overallIntranetEgressThresholdInGbpsValue);
                                        settingsInstance.OverallIntranetEgressThresholdInGbps = overallIntranetEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken defaultIntranetEgressThresholdInGbpsValue = settingsValue2["defaultIntranetEgressThresholdInGbps"];
                                    if (defaultIntranetEgressThresholdInGbpsValue != null && defaultIntranetEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double defaultIntranetEgressThresholdInGbpsInstance = ((double)defaultIntranetEgressThresholdInGbpsValue);
                                        settingsInstance.DefaultIntranetEgressThresholdInGbps = defaultIntranetEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken minimumIntranetEgressThresholdInGbpsValue = settingsValue2["minimumIntranetEgressThresholdInGbps"];
                                    if (minimumIntranetEgressThresholdInGbpsValue != null && minimumIntranetEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double minimumIntranetEgressThresholdInGbpsInstance = ((double)minimumIntranetEgressThresholdInGbpsValue);
                                        settingsInstance.MinimumIntranetEgressThresholdInGbps = minimumIntranetEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken toleranceFactorForIntranetEgressValue = settingsValue2["toleranceFactorForIntranetEgress"];
                                    if (toleranceFactorForIntranetEgressValue != null && toleranceFactorForIntranetEgressValue.Type != JTokenType.Null)
                                    {
                                        double toleranceFactorForIntranetEgressInstance = ((double)toleranceFactorForIntranetEgressValue);
                                        settingsInstance.ToleranceFactorForIntranetEgress = toleranceFactorForIntranetEgressInstance;
                                    }
                                    
                                    JToken overallTotalIngressThresholdInGbpsValue = settingsValue2["overallTotalIngressThresholdInGbps"];
                                    if (overallTotalIngressThresholdInGbpsValue != null && overallTotalIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double overallTotalIngressThresholdInGbpsInstance = ((double)overallTotalIngressThresholdInGbpsValue);
                                        settingsInstance.OverallTotalIngressThresholdInGbps = overallTotalIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken defaultTotalIngressThresholdInGbpsValue = settingsValue2["defaultTotalIngressThresholdInGbps"];
                                    if (defaultTotalIngressThresholdInGbpsValue != null && defaultTotalIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double defaultTotalIngressThresholdInGbpsInstance = ((double)defaultTotalIngressThresholdInGbpsValue);
                                        settingsInstance.DefaultTotalIngressThresholdInGbps = defaultTotalIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken minimumTotalIngressThresholdInGbpsValue = settingsValue2["minimumTotalIngressThresholdInGbps"];
                                    if (minimumTotalIngressThresholdInGbpsValue != null && minimumTotalIngressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double minimumTotalIngressThresholdInGbpsInstance = ((double)minimumTotalIngressThresholdInGbpsValue);
                                        settingsInstance.MinimumTotalIngressThresholdInGbps = minimumTotalIngressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken toleranceFactorForTotalIngressValue = settingsValue2["toleranceFactorForTotalIngress"];
                                    if (toleranceFactorForTotalIngressValue != null && toleranceFactorForTotalIngressValue.Type != JTokenType.Null)
                                    {
                                        double toleranceFactorForTotalIngressInstance = ((double)toleranceFactorForTotalIngressValue);
                                        settingsInstance.ToleranceFactorForTotalIngress = toleranceFactorForTotalIngressInstance;
                                    }
                                    
                                    JToken overallTotalEgressThresholdInGbpsValue = settingsValue2["overallTotalEgressThresholdInGbps"];
                                    if (overallTotalEgressThresholdInGbpsValue != null && overallTotalEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double overallTotalEgressThresholdInGbpsInstance = ((double)overallTotalEgressThresholdInGbpsValue);
                                        settingsInstance.OverallTotalEgressThresholdInGbps = overallTotalEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken defaultTotalEgressThresholdInGbpsValue = settingsValue2["defaultTotalEgressThresholdInGbps"];
                                    if (defaultTotalEgressThresholdInGbpsValue != null && defaultTotalEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double defaultTotalEgressThresholdInGbpsInstance = ((double)defaultTotalEgressThresholdInGbpsValue);
                                        settingsInstance.DefaultTotalEgressThresholdInGbps = defaultTotalEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken minimumTotalEgressThresholdInGbpsValue = settingsValue2["minimumTotalEgressThresholdInGbps"];
                                    if (minimumTotalEgressThresholdInGbpsValue != null && minimumTotalEgressThresholdInGbpsValue.Type != JTokenType.Null)
                                    {
                                        double minimumTotalEgressThresholdInGbpsInstance = ((double)minimumTotalEgressThresholdInGbpsValue);
                                        settingsInstance.MinimumTotalEgressThresholdInGbps = minimumTotalEgressThresholdInGbpsInstance;
                                    }
                                    
                                    JToken toleranceFactorForTotalEgressValue = settingsValue2["toleranceFactorForTotalEgress"];
                                    if (toleranceFactorForTotalEgressValue != null && toleranceFactorForTotalEgressValue.Type != JTokenType.Null)
                                    {
                                        double toleranceFactorForTotalEgressInstance = ((double)toleranceFactorForTotalEgressValue);
                                        settingsInstance.ToleranceFactorForTotalEgress = toleranceFactorForTotalEgressInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                farmInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                farmInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                farmInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                farmInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    farmInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class QueueServiceOperationsExtensions
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IQueueServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public static QueueServiceGetResponse Get(this IQueueServiceOperations operations, string resourceGroupName, string farmId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IQueueServiceOperations)s).GetAsync(resourceGroupName, farmId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IQueueServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public static Task<QueueServiceGetResponse> GetAsync(this IQueueServiceOperations operations, string resourceGroupName, string farmId)
        {
            return operations.GetAsync(resourceGroupName, farmId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IQueueServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricDefinitionsResult GetMetricDefinitions(this IQueueServiceOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IQueueServiceOperations)s).GetMetricDefinitionsAsync(resourceGroupName, farmId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IQueueServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(this IQueueServiceOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return operations.GetMetricDefinitionsAsync(resourceGroupName, farmId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IQueueServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricsResult GetMetrics(this IQueueServiceOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IQueueServiceOperations)s).GetMetricsAsync(resourceGroupName, farmId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IQueueServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricsResult> GetMetricsAsync(this IQueueServiceOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return operations.GetMetricsAsync(resourceGroupName, farmId, filter, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    public partial interface IQueueServiceOperations
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        Task<QueueServiceGetResponse> GetAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class QueueServiceOperations : IServiceOperations<StorageAdminManagementClient>, IQueueServiceOperations
    {
        /// <summary>
        /// Initializes a new instance of the QueueServiceOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal QueueServiceOperations(StorageAdminManagementClient client)
        {
            this._client = client;
        }
        
        private StorageAdminManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.StorageAdminManagementClient.
        /// </summary>
        public StorageAdminManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public async Task<QueueServiceGetResponse> GetAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/queueservices/default";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    QueueServiceGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new QueueServiceGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            QueueServiceResponseResource resourceInstance = new QueueServiceResponseResource();
                            result.Resource = resourceInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                QueueServiceResponse propertiesInstance = new QueueServiceResponse();
                                resourceInstance.QueueService = propertiesInstance;
                                
                                JToken settingsValue = propertiesValue["settings"];
                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                {
                                    QueueServiceSettings settingsInstance = new QueueServiceSettings();
                                    propertiesInstance.Settings = settingsInstance;
                                    
                                    JToken frontEndHttpListenPortValue = settingsValue["frontEndHttpListenPort"];
                                    if (frontEndHttpListenPortValue != null && frontEndHttpListenPortValue.Type != JTokenType.Null)
                                    {
                                        int frontEndHttpListenPortInstance = ((int)frontEndHttpListenPortValue);
                                        settingsInstance.FrontEndHttpListenPort = frontEndHttpListenPortInstance;
                                    }
                                    
                                    JToken frontEndHttpsListenPortValue = settingsValue["frontEndHttpsListenPort"];
                                    if (frontEndHttpsListenPortValue != null && frontEndHttpsListenPortValue.Type != JTokenType.Null)
                                    {
                                        int frontEndHttpsListenPortInstance = ((int)frontEndHttpsListenPortValue);
                                        settingsInstance.FrontEndHttpsListenPort = frontEndHttpsListenPortInstance;
                                    }
                                    
                                    JToken frontEndCallbackThreadsCountValue = settingsValue["frontEndCallbackThreadsCount"];
                                    if (frontEndCallbackThreadsCountValue != null && frontEndCallbackThreadsCountValue.Type != JTokenType.Null)
                                    {
                                        int frontEndCallbackThreadsCountInstance = ((int)frontEndCallbackThreadsCountValue);
                                        settingsInstance.FrontEndCallbackThreadsCount = frontEndCallbackThreadsCountInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingEnabledValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingEnabled"];
                                    if (frontEndCpuBasedKeepAliveThrottlingEnabledValue != null && frontEndCpuBasedKeepAliveThrottlingEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndCpuBasedKeepAliveThrottlingEnabledInstance = ((bool)frontEndCpuBasedKeepAliveThrottlingEnabledValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingEnabled = frontEndCpuBasedKeepAliveThrottlingEnabledInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold"];
                                    if (frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue != null && frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue.Type != JTokenType.Null)
                                    {
                                        double frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdInstance = ((double)frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold = frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle"];
                                    if (frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue != null && frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue.Type != JTokenType.Null)
                                    {
                                        double frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleInstance = ((double)frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle = frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds"];
                                    if (frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue != null && frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsInstance = ((int)frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds = frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsInstance;
                                    }
                                    
                                    JToken frontEndMemoryThrottlingEnabledValue = settingsValue["frontEndMemoryThrottlingEnabled"];
                                    if (frontEndMemoryThrottlingEnabledValue != null && frontEndMemoryThrottlingEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndMemoryThrottlingEnabledInstance = ((bool)frontEndMemoryThrottlingEnabledValue);
                                        settingsInstance.FrontEndMemoryThrottlingEnabled = frontEndMemoryThrottlingEnabledInstance;
                                    }
                                    
                                    JToken frontEndMaxMillisecondsBetweenMemorySamplesValue = settingsValue["frontEndMaxMillisecondsBetweenMemorySamples"];
                                    if (frontEndMaxMillisecondsBetweenMemorySamplesValue != null && frontEndMaxMillisecondsBetweenMemorySamplesValue.Type != JTokenType.Null)
                                    {
                                        int frontEndMaxMillisecondsBetweenMemorySamplesInstance = ((int)frontEndMaxMillisecondsBetweenMemorySamplesValue);
                                        settingsInstance.FrontEndMaxMillisecondsBetweenMemorySamples = frontEndMaxMillisecondsBetweenMemorySamplesInstance;
                                    }
                                    
                                    JToken frontEndMemoryThrottleThresholdSettingsValue = settingsValue["frontEndMemoryThrottleThresholdSettings"];
                                    if (frontEndMemoryThrottleThresholdSettingsValue != null && frontEndMemoryThrottleThresholdSettingsValue.Type != JTokenType.Null)
                                    {
                                        string frontEndMemoryThrottleThresholdSettingsInstance = ((string)frontEndMemoryThrottleThresholdSettingsValue);
                                        settingsInstance.FrontEndMemoryThrottleThresholdSettings = frontEndMemoryThrottleThresholdSettingsInstance;
                                    }
                                    
                                    JToken frontEndMinThreadPoolThreadsValue = settingsValue["frontEndMinThreadPoolThreads"];
                                    if (frontEndMinThreadPoolThreadsValue != null && frontEndMinThreadPoolThreadsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndMinThreadPoolThreadsInstance = ((int)frontEndMinThreadPoolThreadsValue);
                                        settingsInstance.FrontEndMinimumThreadPoolThreads = frontEndMinThreadPoolThreadsInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue = settingsValue["frontEndThreadPoolBasedKeepAliveIOCompletionThreshold"];
                                    if (frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue != null && frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveIOCompletionThresholdInstance = ((int)frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveIOCompletionThreshold = frontEndThreadPoolBasedKeepAliveIOCompletionThresholdInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue = settingsValue["frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold"];
                                    if (frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue != null && frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdInstance = ((int)frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveWorkerThreadThreshold = frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue = settingsValue["frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds"];
                                    if (frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue != null && frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsInstance = ((int)frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds = frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAlivePercentageValue = settingsValue["frontEndThreadPoolBasedKeepAlivePercentage"];
                                    if (frontEndThreadPoolBasedKeepAlivePercentageValue != null && frontEndThreadPoolBasedKeepAlivePercentageValue.Type != JTokenType.Null)
                                    {
                                        double frontEndThreadPoolBasedKeepAlivePercentageInstance = ((double)frontEndThreadPoolBasedKeepAlivePercentageValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAlivePercentage = frontEndThreadPoolBasedKeepAlivePercentageInstance;
                                    }
                                    
                                    JToken frontEndUseSlaTimeInAvailabilityValue = settingsValue["frontEndUseSlaTimeInAvailability"];
                                    if (frontEndUseSlaTimeInAvailabilityValue != null && frontEndUseSlaTimeInAvailabilityValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndUseSlaTimeInAvailabilityInstance = ((bool)frontEndUseSlaTimeInAvailabilityValue);
                                        settingsInstance.FrontEndUseSlaTimeInAvailability = frontEndUseSlaTimeInAvailabilityInstance;
                                    }
                                }
                                
                                JToken versionValue = propertiesValue["version"];
                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                {
                                    string versionInstance = ((string)versionValue);
                                    propertiesInstance.Version = versionInstance;
                                }
                                
                                JToken healthStatusValue = propertiesValue["healthStatus"];
                                if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                {
                                    HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                    propertiesInstance.HealthStatus = healthStatusInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                resourceInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                resourceInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                resourceInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                resourceInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    resourceInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricDefinitionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/queueservices/default/metricdefinitions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricDefinitionsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricDefinitionsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    MetricDefinition metricDefinitionInstance = new MetricDefinition();
                                    result.Value.Add(metricDefinitionInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricDefinitionInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken unitValue = valueValue["unit"];
                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit unitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)unitValue), true));
                                        metricDefinitionInstance.Unit = unitInstance;
                                    }
                                    
                                    JToken primaryAggregationTypeValue = valueValue["primaryAggregationType"];
                                    if (primaryAggregationTypeValue != null && primaryAggregationTypeValue.Type != JTokenType.Null)
                                    {
                                        MetricPrimaryAggregationType primaryAggregationTypeInstance = ((MetricPrimaryAggregationType)Enum.Parse(typeof(MetricPrimaryAggregationType), ((string)primaryAggregationTypeValue), true));
                                        metricDefinitionInstance.PrimaryAggregationType = primaryAggregationTypeInstance;
                                    }
                                    
                                    JToken metricAvailabilitiesArray = valueValue["metricAvailabilities"];
                                    if (metricAvailabilitiesArray != null && metricAvailabilitiesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricAvailabilitiesValue in ((JArray)metricAvailabilitiesArray))
                                        {
                                            MetricAvailability metricAvailabilityInstance = new MetricAvailability();
                                            metricDefinitionInstance.MetricAvailabilities.Add(metricAvailabilityInstance);
                                            
                                            JToken timeGrainValue = metricAvailabilitiesValue["timeGrain"];
                                            if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                                metricAvailabilityInstance.TimeGrain = timeGrainInstance;
                                            }
                                            
                                            JToken retentionValue = metricAvailabilitiesValue["retention"];
                                            if (retentionValue != null && retentionValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan retentionInstance = XmlConvert.ToTimeSpan(((string)retentionValue));
                                                metricAvailabilityInstance.Retention = retentionInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/queueservices/default/metrics";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Metric metricInstance = new Metric();
                                    result.Metrics.Add(metricInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken metricUnitValue = valueValue["metricUnit"];
                                    if (metricUnitValue != null && metricUnitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit metricUnitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)metricUnitValue), true));
                                        metricInstance.MetricUnit = metricUnitInstance;
                                    }
                                    
                                    JToken timeGrainValue = valueValue["timeGrain"];
                                    if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                        metricInstance.TimeGrain = timeGrainInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        metricInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = valueValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        metricInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken metricValuesArray = valueValue["metricValues"];
                                    if (metricValuesArray != null && metricValuesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricValuesValue in ((JArray)metricValuesArray))
                                        {
                                            MetricValue metricValueInstance = new MetricValue();
                                            metricInstance.MetricValues.Add(metricValueInstance);
                                            
                                            JToken timeStampValue = metricValuesValue["timeStamp"];
                                            if (timeStampValue != null && timeStampValue.Type != JTokenType.Null)
                                            {
                                                DateTime timeStampInstance = ((DateTime)timeStampValue);
                                                metricValueInstance.TimeStamp = timeStampInstance;
                                            }
                                            
                                            JToken averageValue = metricValuesValue["average"];
                                            if (averageValue != null && averageValue.Type != JTokenType.Null)
                                            {
                                                double averageInstance = ((double)averageValue);
                                                metricValueInstance.Average = averageInstance;
                                            }
                                            
                                            JToken minimumValue = metricValuesValue["minimum"];
                                            if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                            {
                                                double minimumInstance = ((double)minimumValue);
                                                metricValueInstance.Minimum = minimumInstance;
                                            }
                                            
                                            JToken maximumValue = metricValuesValue["maximum"];
                                            if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                            {
                                                double maximumInstance = ((double)maximumValue);
                                                metricValueInstance.Maximum = maximumInstance;
                                            }
                                            
                                            JToken totalValue = metricValuesValue["total"];
                                            if (totalValue != null && totalValue.Type != JTokenType.Null)
                                            {
                                                double totalInstance = ((double)totalValue);
                                                metricValueInstance.Total = totalInstance;
                                            }
                                            
                                            JToken countValue = metricValuesValue["count"];
                                            if (countValue != null && countValue.Type != JTokenType.Null)
                                            {
                                                int countInstance = ((int)countValue);
                                                metricValueInstance.Count = countInstance;
                                            }
                                            
                                            JToken propertiesValue = metricValuesValue["properties"];
                                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                            {
                                                string propertiesInstance = propertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                metricValueInstance.Properties = propertiesInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class QuotaOperationsExtensions
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IQuotaOperations.
        /// </param>
        /// <param name='locationName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='quotaName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static QuotaGetResponse CreateOrUpdate(this IQuotaOperations operations, string locationName, string quotaName, QuotaCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IQuotaOperations)s).CreateOrUpdateAsync(locationName, quotaName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IQuotaOperations.
        /// </param>
        /// <param name='locationName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='quotaName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<QuotaGetResponse> CreateOrUpdateAsync(this IQuotaOperations operations, string locationName, string quotaName, QuotaCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateAsync(locationName, quotaName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IQuotaOperations.
        /// </param>
        /// <param name='locationName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='quotaName'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Delete(this IQuotaOperations operations, string locationName, string quotaName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IQuotaOperations)s).DeleteAsync(locationName, quotaName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IQuotaOperations.
        /// </param>
        /// <param name='locationName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='quotaName'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteAsync(this IQuotaOperations operations, string locationName, string quotaName)
        {
            return operations.DeleteAsync(locationName, quotaName, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IQuotaOperations.
        /// </param>
        /// <param name='locationName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='quotaName'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static QuotaGetResponse Get(this IQuotaOperations operations, string locationName, string quotaName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IQuotaOperations)s).GetAsync(locationName, quotaName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IQuotaOperations.
        /// </param>
        /// <param name='locationName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='quotaName'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<QuotaGetResponse> GetAsync(this IQuotaOperations operations, string locationName, string quotaName)
        {
            return operations.GetAsync(locationName, quotaName, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IQuotaOperations.
        /// </param>
        /// <param name='locationName'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static QuotaListResponse List(this IQuotaOperations operations, string locationName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IQuotaOperations)s).ListAsync(locationName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IQuotaOperations.
        /// </param>
        /// <param name='locationName'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<QuotaListResponse> ListAsync(this IQuotaOperations operations, string locationName)
        {
            return operations.ListAsync(locationName, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    public partial interface IQuotaOperations
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='locationName'>
        /// Your documentation here.
        /// </param>
        /// <param name='quotaName'>
        /// Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<QuotaGetResponse> CreateOrUpdateAsync(string locationName, string quotaName, QuotaCreateOrUpdateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='locationName'>
        /// Your documentation here.
        /// </param>
        /// <param name='quotaName'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> DeleteAsync(string locationName, string quotaName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='locationName'>
        /// Your documentation here.
        /// </param>
        /// <param name='quotaName'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<QuotaGetResponse> GetAsync(string locationName, string quotaName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='locationName'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<QuotaListResponse> ListAsync(string locationName, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class QuotaOperations : IServiceOperations<StorageAdminManagementClient>, IQuotaOperations
    {
        /// <summary>
        /// Initializes a new instance of the QuotaOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal QuotaOperations(StorageAdminManagementClient client)
        {
            this._client = client;
        }
        
        private StorageAdminManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.StorageAdminManagementClient.
        /// </summary>
        public StorageAdminManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='locationName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='quotaName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<QuotaGetResponse> CreateOrUpdateAsync(string locationName, string quotaName, QuotaCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (locationName == null)
            {
                throw new ArgumentNullException("locationName");
            }
            if (quotaName == null)
            {
                throw new ArgumentNullException("quotaName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("locationName", locationName);
                tracingParameters.Add("quotaName", quotaName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/Microsoft.Storage.Admin/locations/";
            url = url + Uri.EscapeDataString(locationName);
            url = url + "/quotas/";
            url = url + Uri.EscapeDataString(quotaName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject quotaCreateOrUpdateParametersValue = new JObject();
                requestDoc = quotaCreateOrUpdateParametersValue;
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    quotaCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    propertiesValue["numberOfStorageAccounts"] = parameters.Properties.NumberOfStorageAccounts;
                    
                    propertiesValue["capacityInGb"] = parameters.Properties.CapacityInGB;
                }
                
                if (parameters.Id != null)
                {
                    quotaCreateOrUpdateParametersValue["id"] = parameters.Id;
                }
                
                if (parameters.Name != null)
                {
                    quotaCreateOrUpdateParametersValue["name"] = parameters.Name;
                }
                
                if (parameters.Type != null)
                {
                    quotaCreateOrUpdateParametersValue["type"] = parameters.Type;
                }
                
                if (parameters.Location != null)
                {
                    quotaCreateOrUpdateParametersValue["location"] = parameters.Location;
                }
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    quotaCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    QuotaGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new QuotaGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            QuotaModel quotaInstance = new QuotaModel();
                            result.Quota = quotaInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                Quota propertiesInstance = new Quota();
                                quotaInstance.Properties = propertiesInstance;
                                
                                JToken numberOfStorageAccountsValue = propertiesValue2["numberOfStorageAccounts"];
                                if (numberOfStorageAccountsValue != null && numberOfStorageAccountsValue.Type != JTokenType.Null)
                                {
                                    int numberOfStorageAccountsInstance = ((int)numberOfStorageAccountsValue);
                                    propertiesInstance.NumberOfStorageAccounts = numberOfStorageAccountsInstance;
                                }
                                
                                JToken capacityInGbValue = propertiesValue2["capacityInGb"];
                                if (capacityInGbValue != null && capacityInGbValue.Type != JTokenType.Null)
                                {
                                    int capacityInGbInstance = ((int)capacityInGbValue);
                                    propertiesInstance.CapacityInGB = capacityInGbInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                quotaInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                quotaInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                quotaInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                quotaInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    quotaInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='locationName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='quotaName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string locationName, string quotaName, CancellationToken cancellationToken)
        {
            // Validate
            if (locationName == null)
            {
                throw new ArgumentNullException("locationName");
            }
            if (quotaName == null)
            {
                throw new ArgumentNullException("quotaName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("locationName", locationName);
                tracingParameters.Add("quotaName", quotaName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/Microsoft.Storage.Admin/locations/";
            url = url + Uri.EscapeDataString(locationName);
            url = url + "/quotas/";
            url = url + Uri.EscapeDataString(quotaName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='locationName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='quotaName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<QuotaGetResponse> GetAsync(string locationName, string quotaName, CancellationToken cancellationToken)
        {
            // Validate
            if (locationName == null)
            {
                throw new ArgumentNullException("locationName");
            }
            if (quotaName == null)
            {
                throw new ArgumentNullException("quotaName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("locationName", locationName);
                tracingParameters.Add("quotaName", quotaName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/Microsoft.Storage.Admin/locations/";
            url = url + Uri.EscapeDataString(locationName);
            url = url + "/quotas/";
            url = url + Uri.EscapeDataString(quotaName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    QuotaGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new QuotaGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            QuotaModel quotaInstance = new QuotaModel();
                            result.Quota = quotaInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                Quota propertiesInstance = new Quota();
                                quotaInstance.Properties = propertiesInstance;
                                
                                JToken numberOfStorageAccountsValue = propertiesValue["numberOfStorageAccounts"];
                                if (numberOfStorageAccountsValue != null && numberOfStorageAccountsValue.Type != JTokenType.Null)
                                {
                                    int numberOfStorageAccountsInstance = ((int)numberOfStorageAccountsValue);
                                    propertiesInstance.NumberOfStorageAccounts = numberOfStorageAccountsInstance;
                                }
                                
                                JToken capacityInGbValue = propertiesValue["capacityInGb"];
                                if (capacityInGbValue != null && capacityInGbValue.Type != JTokenType.Null)
                                {
                                    int capacityInGbInstance = ((int)capacityInGbValue);
                                    propertiesInstance.CapacityInGB = capacityInGbInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                quotaInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                quotaInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                quotaInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                quotaInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    quotaInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='locationName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<QuotaListResponse> ListAsync(string locationName, CancellationToken cancellationToken)
        {
            // Validate
            if (locationName == null)
            {
                throw new ArgumentNullException("locationName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("locationName", locationName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/Microsoft.Storage.Admin/locations/";
            url = url + Uri.EscapeDataString(locationName);
            url = url + "/quotas";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    QuotaListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new QuotaListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    QuotaModel quotaModelInstance = new QuotaModel();
                                    result.Quotas.Add(quotaModelInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        Quota propertiesInstance = new Quota();
                                        quotaModelInstance.Properties = propertiesInstance;
                                        
                                        JToken numberOfStorageAccountsValue = propertiesValue["numberOfStorageAccounts"];
                                        if (numberOfStorageAccountsValue != null && numberOfStorageAccountsValue.Type != JTokenType.Null)
                                        {
                                            int numberOfStorageAccountsInstance = ((int)numberOfStorageAccountsValue);
                                            propertiesInstance.NumberOfStorageAccounts = numberOfStorageAccountsInstance;
                                        }
                                        
                                        JToken capacityInGbValue = propertiesValue["capacityInGb"];
                                        if (capacityInGbValue != null && capacityInGbValue.Type != JTokenType.Null)
                                        {
                                            int capacityInGbInstance = ((int)capacityInGbValue);
                                            propertiesInstance.CapacityInGB = capacityInGbInstance;
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        quotaModelInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        quotaModelInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        quotaModelInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        quotaModelInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            quotaModelInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class ShareOperationsExtensions
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IShareOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static ShareGetResponse Get(this IShareOperations operations, string resourceGroupName, string farmId, string shareName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShareOperations)s).GetAsync(resourceGroupName, farmId, shareName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IShareOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<ShareGetResponse> GetAsync(this IShareOperations operations, string resourceGroupName, string farmId, string shareName)
        {
            return operations.GetAsync(resourceGroupName, farmId, shareName, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IShareOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='migrationIntent'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='maxCount'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static ContainerListResponse GetContainers(this IShareOperations operations, string resourceGroupName, string farmId, string shareName, string migrationIntent, string maxCount)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShareOperations)s).GetContainersAsync(resourceGroupName, farmId, shareName, migrationIntent, maxCount);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IShareOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='migrationIntent'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='maxCount'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<ContainerListResponse> GetContainersAsync(this IShareOperations operations, string resourceGroupName, string farmId, string shareName, string migrationIntent, string maxCount)
        {
            return operations.GetContainersAsync(resourceGroupName, farmId, shareName, migrationIntent, maxCount, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IShareOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static DestinationShareListResponse GetDestinationShares(this IShareOperations operations, string resourceGroupName, string farmId, string shareName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShareOperations)s).GetDestinationSharesAsync(resourceGroupName, farmId, shareName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IShareOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<DestinationShareListResponse> GetDestinationSharesAsync(this IShareOperations operations, string resourceGroupName, string farmId, string shareName)
        {
            return operations.GetDestinationSharesAsync(resourceGroupName, farmId, shareName, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IShareOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricDefinitionsResult GetMetricDefinitions(this IShareOperations operations, string resourceGroupName, string farmId, string shareName, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShareOperations)s).GetMetricDefinitionsAsync(resourceGroupName, farmId, shareName, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IShareOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(this IShareOperations operations, string resourceGroupName, string farmId, string shareName, string filter)
        {
            return operations.GetMetricDefinitionsAsync(resourceGroupName, farmId, shareName, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IShareOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricsResult GetMetrics(this IShareOperations operations, string resourceGroupName, string farmId, string shareName, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShareOperations)s).GetMetricsAsync(resourceGroupName, farmId, shareName, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IShareOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricsResult> GetMetricsAsync(this IShareOperations operations, string resourceGroupName, string farmId, string shareName, string filter)
        {
            return operations.GetMetricsAsync(resourceGroupName, farmId, shareName, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IShareOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='operationId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MigrationResult GetMigrationStatus(this IShareOperations operations, string resourceGroupName, string farmId, string shareName, string operationId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShareOperations)s).GetMigrationStatusAsync(resourceGroupName, farmId, shareName, operationId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IShareOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='operationId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MigrationResult> GetMigrationStatusAsync(this IShareOperations operations, string resourceGroupName, string farmId, string shareName, string operationId)
        {
            return operations.GetMigrationStatusAsync(resourceGroupName, farmId, shareName, operationId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IShareOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static ShareListResponse List(this IShareOperations operations, string resourceGroupName, string farmId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShareOperations)s).ListAsync(resourceGroupName, farmId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IShareOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<ShareListResponse> ListAsync(this IShareOperations operations, string resourceGroupName, string farmId)
        {
            return operations.ListAsync(resourceGroupName, farmId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IShareOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MigrateContainerResponse MigrateContainer(this IShareOperations operations, string resourceGroupName, string farmId, string shareName, MigrationParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShareOperations)s).MigrateContainerAsync(resourceGroupName, farmId, shareName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IShareOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MigrateContainerResponse> MigrateContainerAsync(this IShareOperations operations, string resourceGroupName, string farmId, string shareName, MigrationParameters parameters)
        {
            return operations.MigrateContainerAsync(resourceGroupName, farmId, shareName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IShareOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='operationId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse SetMigrateContainerOperationStatus(this IShareOperations operations, string resourceGroupName, string farmId, string shareName, string operationId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IShareOperations)s).SetMigrateContainerOperationStatusAsync(resourceGroupName, farmId, shareName, operationId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IShareOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='operationId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> SetMigrateContainerOperationStatusAsync(this IShareOperations operations, string resourceGroupName, string farmId, string shareName, string operationId)
        {
            return operations.SetMigrateContainerOperationStatusAsync(resourceGroupName, farmId, shareName, operationId, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    public partial interface IShareOperations
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<ShareGetResponse> GetAsync(string resourceGroupName, string farmId, string shareName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Your documentation here.
        /// </param>
        /// <param name='migrationIntent'>
        /// Your documentation here.
        /// </param>
        /// <param name='maxCount'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<ContainerListResponse> GetContainersAsync(string resourceGroupName, string farmId, string shareName, string migrationIntent, string maxCount, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<DestinationShareListResponse> GetDestinationSharesAsync(string resourceGroupName, string farmId, string shareName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string shareName, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string shareName, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Your documentation here.
        /// </param>
        /// <param name='operationId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MigrationResult> GetMigrationStatusAsync(string resourceGroupName, string farmId, string shareName, string operationId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<ShareListResponse> ListAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MigrateContainerResponse> MigrateContainerAsync(string resourceGroupName, string farmId, string shareName, MigrationParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Your documentation here.
        /// </param>
        /// <param name='operationId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> SetMigrateContainerOperationStatusAsync(string resourceGroupName, string farmId, string shareName, string operationId, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class ShareOperations : IServiceOperations<StorageAdminManagementClient>, IShareOperations
    {
        /// <summary>
        /// Initializes a new instance of the ShareOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ShareOperations(StorageAdminManagementClient client)
        {
            this._client = client;
        }
        
        private StorageAdminManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.StorageAdminManagementClient.
        /// </summary>
        public StorageAdminManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<ShareGetResponse> GetAsync(string resourceGroupName, string farmId, string shareName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (shareName == null)
            {
                throw new ArgumentNullException("shareName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("shareName", shareName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/shares/";
            url = url + Uri.EscapeDataString(shareName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ShareGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ShareGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ShareModel shareInstance = new ShareModel();
                            result.Share = shareInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                Share propertiesInstance = new Share();
                                shareInstance.Properties = propertiesInstance;
                                
                                JToken shareNameValue = propertiesValue["shareName"];
                                if (shareNameValue != null && shareNameValue.Type != JTokenType.Null)
                                {
                                    string shareNameInstance = ((string)shareNameValue);
                                    propertiesInstance.ShareName = shareNameInstance;
                                }
                                
                                JToken uncPathValue = propertiesValue["uncPath"];
                                if (uncPathValue != null && uncPathValue.Type != JTokenType.Null)
                                {
                                    string uncPathInstance = ((string)uncPathValue);
                                    propertiesInstance.UncPath = uncPathInstance;
                                }
                                
                                JToken totalCapacityValue = propertiesValue["totalCapacity"];
                                if (totalCapacityValue != null && totalCapacityValue.Type != JTokenType.Null)
                                {
                                    ulong totalCapacityInstance = ((ulong)totalCapacityValue);
                                    propertiesInstance.TotalCapacity = totalCapacityInstance;
                                }
                                
                                JToken usedCapacityValue = propertiesValue["usedCapacity"];
                                if (usedCapacityValue != null && usedCapacityValue.Type != JTokenType.Null)
                                {
                                    ulong usedCapacityInstance = ((ulong)usedCapacityValue);
                                    propertiesInstance.UsedCapacity = usedCapacityInstance;
                                }
                                
                                JToken freeCapacityValue = propertiesValue["freeCapacity"];
                                if (freeCapacityValue != null && freeCapacityValue.Type != JTokenType.Null)
                                {
                                    ulong freeCapacityInstance = ((ulong)freeCapacityValue);
                                    propertiesInstance.FreeCapacity = freeCapacityInstance;
                                }
                                
                                JToken healthStatusValue = propertiesValue["healthStatus"];
                                if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                {
                                    HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                    propertiesInstance.HealthStatus = healthStatusInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                shareInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                shareInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                shareInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                shareInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    shareInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='migrationIntent'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='maxCount'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<ContainerListResponse> GetContainersAsync(string resourceGroupName, string farmId, string shareName, string migrationIntent, string maxCount, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (shareName == null)
            {
                throw new ArgumentNullException("shareName");
            }
            if (migrationIntent == null)
            {
                throw new ArgumentNullException("migrationIntent");
            }
            if (maxCount == null)
            {
                throw new ArgumentNullException("maxCount");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("shareName", shareName);
                tracingParameters.Add("migrationIntent", migrationIntent);
                tracingParameters.Add("maxCount", maxCount);
                TracingAdapter.Enter(invocationId, this, "GetContainersAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/shares/";
            url = url + Uri.EscapeDataString(shareName);
            url = url + "/containers";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            queryParameters.Add("Intent=" + Uri.EscapeDataString(migrationIntent));
            queryParameters.Add("MaxCount=" + Uri.EscapeDataString(maxCount));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ContainerListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ContainerListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken containersArray = responseDoc;
                            if (containersArray != null && containersArray.Type != JTokenType.Null)
                            {
                                foreach (JToken containersValue in ((JArray)containersArray))
                                {
                                    Container containerInstance = new Container();
                                    result.Containers.Add(containerInstance);
                                    
                                    JToken sharenameValue = containersValue["sharename"];
                                    if (sharenameValue != null && sharenameValue.Type != JTokenType.Null)
                                    {
                                        string sharenameInstance = ((string)sharenameValue);
                                        containerInstance.ShareName = sharenameInstance;
                                    }
                                    
                                    JToken accountnameValue = containersValue["accountname"];
                                    if (accountnameValue != null && accountnameValue.Type != JTokenType.Null)
                                    {
                                        string accountnameInstance = ((string)accountnameValue);
                                        containerInstance.StorageAccountName = accountnameInstance;
                                    }
                                    
                                    JToken containernameValue = containersValue["containername"];
                                    if (containernameValue != null && containernameValue.Type != JTokenType.Null)
                                    {
                                        string containernameInstance = ((string)containernameValue);
                                        containerInstance.ContainerName = containernameInstance;
                                    }
                                    
                                    JToken containeridValue = containersValue["containerid"];
                                    if (containeridValue != null && containeridValue.Type != JTokenType.Null)
                                    {
                                        ulong containeridInstance = ((ulong)containeridValue);
                                        containerInstance.ContainerId = containeridInstance;
                                    }
                                    
                                    JToken accountidValue = containersValue["accountid"];
                                    if (accountidValue != null && accountidValue.Type != JTokenType.Null)
                                    {
                                        string accountidInstance = ((string)accountidValue);
                                        containerInstance.StorageAccountId = accountidInstance;
                                    }
                                    
                                    JToken usedBytesInPrimaryVolumeValue = containersValue["usedBytesInPrimaryVolume"];
                                    if (usedBytesInPrimaryVolumeValue != null && usedBytesInPrimaryVolumeValue.Type != JTokenType.Null)
                                    {
                                        ulong usedBytesInPrimaryVolumeInstance = ((ulong)usedBytesInPrimaryVolumeValue);
                                        containerInstance.UsedBytesInPrimaryVolume = usedBytesInPrimaryVolumeInstance;
                                    }
                                    
                                    JToken containerStateValue = containersValue["containerState"];
                                    if (containerStateValue != null && containerStateValue.Type != JTokenType.Null)
                                    {
                                        string containerStateInstance = ((string)containerStateValue);
                                        containerInstance.ContainerState = containerStateInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<DestinationShareListResponse> GetDestinationSharesAsync(string resourceGroupName, string farmId, string shareName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (shareName == null)
            {
                throw new ArgumentNullException("shareName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("shareName", shareName);
                TracingAdapter.Enter(invocationId, this, "GetDestinationSharesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/shares/";
            url = url + Uri.EscapeDataString(shareName);
            url = url + "/destinationshares";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DestinationShareListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DestinationShareListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken sharesArray = responseDoc;
                            if (sharesArray != null && sharesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken sharesValue in ((JArray)sharesArray))
                                {
                                    ShareModel shareModelInstance = new ShareModel();
                                    result.Shares.Add(shareModelInstance);
                                    
                                    JToken propertiesValue = sharesValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        Share propertiesInstance = new Share();
                                        shareModelInstance.Properties = propertiesInstance;
                                        
                                        JToken shareNameValue = propertiesValue["shareName"];
                                        if (shareNameValue != null && shareNameValue.Type != JTokenType.Null)
                                        {
                                            string shareNameInstance = ((string)shareNameValue);
                                            propertiesInstance.ShareName = shareNameInstance;
                                        }
                                        
                                        JToken uncPathValue = propertiesValue["uncPath"];
                                        if (uncPathValue != null && uncPathValue.Type != JTokenType.Null)
                                        {
                                            string uncPathInstance = ((string)uncPathValue);
                                            propertiesInstance.UncPath = uncPathInstance;
                                        }
                                        
                                        JToken totalCapacityValue = propertiesValue["totalCapacity"];
                                        if (totalCapacityValue != null && totalCapacityValue.Type != JTokenType.Null)
                                        {
                                            ulong totalCapacityInstance = ((ulong)totalCapacityValue);
                                            propertiesInstance.TotalCapacity = totalCapacityInstance;
                                        }
                                        
                                        JToken usedCapacityValue = propertiesValue["usedCapacity"];
                                        if (usedCapacityValue != null && usedCapacityValue.Type != JTokenType.Null)
                                        {
                                            ulong usedCapacityInstance = ((ulong)usedCapacityValue);
                                            propertiesInstance.UsedCapacity = usedCapacityInstance;
                                        }
                                        
                                        JToken freeCapacityValue = propertiesValue["freeCapacity"];
                                        if (freeCapacityValue != null && freeCapacityValue.Type != JTokenType.Null)
                                        {
                                            ulong freeCapacityInstance = ((ulong)freeCapacityValue);
                                            propertiesInstance.FreeCapacity = freeCapacityInstance;
                                        }
                                        
                                        JToken healthStatusValue = propertiesValue["healthStatus"];
                                        if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                        {
                                            HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                            propertiesInstance.HealthStatus = healthStatusInstance;
                                        }
                                    }
                                    
                                    JToken idValue = sharesValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        shareModelInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = sharesValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        shareModelInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = sharesValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        shareModelInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = sharesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        shareModelInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)sharesValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            shareModelInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string shareName, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (shareName == null)
            {
                throw new ArgumentNullException("shareName");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("shareName", shareName);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricDefinitionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/shares/";
            url = url + Uri.EscapeDataString(shareName);
            url = url + "/metricdefinitions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricDefinitionsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricDefinitionsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    MetricDefinition metricDefinitionInstance = new MetricDefinition();
                                    result.Value.Add(metricDefinitionInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricDefinitionInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken unitValue = valueValue["unit"];
                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit unitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)unitValue), true));
                                        metricDefinitionInstance.Unit = unitInstance;
                                    }
                                    
                                    JToken primaryAggregationTypeValue = valueValue["primaryAggregationType"];
                                    if (primaryAggregationTypeValue != null && primaryAggregationTypeValue.Type != JTokenType.Null)
                                    {
                                        MetricPrimaryAggregationType primaryAggregationTypeInstance = ((MetricPrimaryAggregationType)Enum.Parse(typeof(MetricPrimaryAggregationType), ((string)primaryAggregationTypeValue), true));
                                        metricDefinitionInstance.PrimaryAggregationType = primaryAggregationTypeInstance;
                                    }
                                    
                                    JToken metricAvailabilitiesArray = valueValue["metricAvailabilities"];
                                    if (metricAvailabilitiesArray != null && metricAvailabilitiesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricAvailabilitiesValue in ((JArray)metricAvailabilitiesArray))
                                        {
                                            MetricAvailability metricAvailabilityInstance = new MetricAvailability();
                                            metricDefinitionInstance.MetricAvailabilities.Add(metricAvailabilityInstance);
                                            
                                            JToken timeGrainValue = metricAvailabilitiesValue["timeGrain"];
                                            if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                                metricAvailabilityInstance.TimeGrain = timeGrainInstance;
                                            }
                                            
                                            JToken retentionValue = metricAvailabilitiesValue["retention"];
                                            if (retentionValue != null && retentionValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan retentionInstance = XmlConvert.ToTimeSpan(((string)retentionValue));
                                                metricAvailabilityInstance.Retention = retentionInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string shareName, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (shareName == null)
            {
                throw new ArgumentNullException("shareName");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("shareName", shareName);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/shares/";
            url = url + Uri.EscapeDataString(shareName);
            url = url + "/metrics";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Metric metricInstance = new Metric();
                                    result.Metrics.Add(metricInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken metricUnitValue = valueValue["metricUnit"];
                                    if (metricUnitValue != null && metricUnitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit metricUnitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)metricUnitValue), true));
                                        metricInstance.MetricUnit = metricUnitInstance;
                                    }
                                    
                                    JToken timeGrainValue = valueValue["timeGrain"];
                                    if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                        metricInstance.TimeGrain = timeGrainInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        metricInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = valueValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        metricInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken metricValuesArray = valueValue["metricValues"];
                                    if (metricValuesArray != null && metricValuesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricValuesValue in ((JArray)metricValuesArray))
                                        {
                                            MetricValue metricValueInstance = new MetricValue();
                                            metricInstance.MetricValues.Add(metricValueInstance);
                                            
                                            JToken timeStampValue = metricValuesValue["timeStamp"];
                                            if (timeStampValue != null && timeStampValue.Type != JTokenType.Null)
                                            {
                                                DateTime timeStampInstance = ((DateTime)timeStampValue);
                                                metricValueInstance.TimeStamp = timeStampInstance;
                                            }
                                            
                                            JToken averageValue = metricValuesValue["average"];
                                            if (averageValue != null && averageValue.Type != JTokenType.Null)
                                            {
                                                double averageInstance = ((double)averageValue);
                                                metricValueInstance.Average = averageInstance;
                                            }
                                            
                                            JToken minimumValue = metricValuesValue["minimum"];
                                            if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                            {
                                                double minimumInstance = ((double)minimumValue);
                                                metricValueInstance.Minimum = minimumInstance;
                                            }
                                            
                                            JToken maximumValue = metricValuesValue["maximum"];
                                            if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                            {
                                                double maximumInstance = ((double)maximumValue);
                                                metricValueInstance.Maximum = maximumInstance;
                                            }
                                            
                                            JToken totalValue = metricValuesValue["total"];
                                            if (totalValue != null && totalValue.Type != JTokenType.Null)
                                            {
                                                double totalInstance = ((double)totalValue);
                                                metricValueInstance.Total = totalInstance;
                                            }
                                            
                                            JToken countValue = metricValuesValue["count"];
                                            if (countValue != null && countValue.Type != JTokenType.Null)
                                            {
                                                int countInstance = ((int)countValue);
                                                metricValueInstance.Count = countInstance;
                                            }
                                            
                                            JToken propertiesValue = metricValuesValue["properties"];
                                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                            {
                                                string propertiesInstance = propertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                metricValueInstance.Properties = propertiesInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='operationId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MigrationResult> GetMigrationStatusAsync(string resourceGroupName, string farmId, string shareName, string operationId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (shareName == null)
            {
                throw new ArgumentNullException("shareName");
            }
            if (operationId == null)
            {
                throw new ArgumentNullException("operationId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("shareName", shareName);
                tracingParameters.Add("operationId", operationId);
                TracingAdapter.Enter(invocationId, this, "GetMigrationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/shares/";
            url = url + Uri.EscapeDataString(shareName);
            url = url + "/operationresults/";
            url = url + Uri.EscapeDataString(operationId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MigrationResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MigrationResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken jobIdValue = responseDoc["jobId"];
                            if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                            {
                                string jobIdInstance = ((string)jobIdValue);
                                result.JobId = jobIdInstance;
                            }
                            
                            JToken sourceShareNameValue = responseDoc["sourceShareName"];
                            if (sourceShareNameValue != null && sourceShareNameValue.Type != JTokenType.Null)
                            {
                                string sourceShareNameInstance = ((string)sourceShareNameValue);
                                result.SourceShareName = sourceShareNameInstance;
                            }
                            
                            JToken storageAccountNameValue = responseDoc["storageAccountName"];
                            if (storageAccountNameValue != null && storageAccountNameValue.Type != JTokenType.Null)
                            {
                                string storageAccountNameInstance = ((string)storageAccountNameValue);
                                result.StorageAccountName = storageAccountNameInstance;
                            }
                            
                            JToken containerNameValue = responseDoc["containerName"];
                            if (containerNameValue != null && containerNameValue.Type != JTokenType.Null)
                            {
                                string containerNameInstance = ((string)containerNameValue);
                                result.ContainerName = containerNameInstance;
                            }
                            
                            JToken destinationShareNameValue = responseDoc["destinationShareName"];
                            if (destinationShareNameValue != null && destinationShareNameValue.Type != JTokenType.Null)
                            {
                                string destinationShareNameInstance = ((string)destinationShareNameValue);
                                result.DestinationShareName = destinationShareNameInstance;
                            }
                            
                            JToken migrationStatusValue = responseDoc["migrationStatus"];
                            if (migrationStatusValue != null && migrationStatusValue.Type != JTokenType.Null)
                            {
                                string migrationStatusInstance = ((string)migrationStatusValue);
                                result.MigrationStatus = migrationStatusInstance;
                            }
                            
                            JToken subEntitiesCompletedValue = responseDoc["subEntitiesCompleted"];
                            if (subEntitiesCompletedValue != null && subEntitiesCompletedValue.Type != JTokenType.Null)
                            {
                                ulong subEntitiesCompletedInstance = ((ulong)subEntitiesCompletedValue);
                                result.SubEntitiesCompleted = subEntitiesCompletedInstance;
                            }
                            
                            JToken subEntitiesFailedValue = responseDoc["subEntitiesFailed"];
                            if (subEntitiesFailedValue != null && subEntitiesFailedValue.Type != JTokenType.Null)
                            {
                                ulong subEntitiesFailedInstance = ((ulong)subEntitiesFailedValue);
                                result.SubEntitiesFailed = subEntitiesFailedInstance;
                            }
                            
                            JToken failureReasonValue = responseDoc["failureReason"];
                            if (failureReasonValue != null && failureReasonValue.Type != JTokenType.Null)
                            {
                                string failureReasonInstance = ((string)failureReasonValue);
                                result.FailureReason = failureReasonInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<ShareListResponse> ListAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/shares";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ShareListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ShareListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken sharesArray = responseDoc;
                            if (sharesArray != null && sharesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken sharesValue in ((JArray)sharesArray))
                                {
                                    ShareModel shareModelInstance = new ShareModel();
                                    result.Shares.Add(shareModelInstance);
                                    
                                    JToken propertiesValue = sharesValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        Share propertiesInstance = new Share();
                                        shareModelInstance.Properties = propertiesInstance;
                                        
                                        JToken shareNameValue = propertiesValue["shareName"];
                                        if (shareNameValue != null && shareNameValue.Type != JTokenType.Null)
                                        {
                                            string shareNameInstance = ((string)shareNameValue);
                                            propertiesInstance.ShareName = shareNameInstance;
                                        }
                                        
                                        JToken uncPathValue = propertiesValue["uncPath"];
                                        if (uncPathValue != null && uncPathValue.Type != JTokenType.Null)
                                        {
                                            string uncPathInstance = ((string)uncPathValue);
                                            propertiesInstance.UncPath = uncPathInstance;
                                        }
                                        
                                        JToken totalCapacityValue = propertiesValue["totalCapacity"];
                                        if (totalCapacityValue != null && totalCapacityValue.Type != JTokenType.Null)
                                        {
                                            ulong totalCapacityInstance = ((ulong)totalCapacityValue);
                                            propertiesInstance.TotalCapacity = totalCapacityInstance;
                                        }
                                        
                                        JToken usedCapacityValue = propertiesValue["usedCapacity"];
                                        if (usedCapacityValue != null && usedCapacityValue.Type != JTokenType.Null)
                                        {
                                            ulong usedCapacityInstance = ((ulong)usedCapacityValue);
                                            propertiesInstance.UsedCapacity = usedCapacityInstance;
                                        }
                                        
                                        JToken freeCapacityValue = propertiesValue["freeCapacity"];
                                        if (freeCapacityValue != null && freeCapacityValue.Type != JTokenType.Null)
                                        {
                                            ulong freeCapacityInstance = ((ulong)freeCapacityValue);
                                            propertiesInstance.FreeCapacity = freeCapacityInstance;
                                        }
                                        
                                        JToken healthStatusValue = propertiesValue["healthStatus"];
                                        if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                        {
                                            HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                            propertiesInstance.HealthStatus = healthStatusInstance;
                                        }
                                    }
                                    
                                    JToken idValue = sharesValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        shareModelInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = sharesValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        shareModelInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = sharesValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        shareModelInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = sharesValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        shareModelInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)sharesValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            shareModelInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MigrateContainerResponse> MigrateContainerAsync(string resourceGroupName, string farmId, string shareName, MigrationParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (shareName == null)
            {
                throw new ArgumentNullException("shareName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("shareName", shareName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "MigrateContainerAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/shares/";
            url = url + Uri.EscapeDataString(shareName);
            url = url + "/migrate";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject migrationParametersValue = new JObject();
                requestDoc = migrationParametersValue;
                
                if (parameters.StorageAccountName != null)
                {
                    migrationParametersValue["storageAccountName"] = parameters.StorageAccountName;
                }
                
                if (parameters.ContainerName != null)
                {
                    migrationParametersValue["containerName"] = parameters.ContainerName;
                }
                
                if (parameters.DestinationShareUncPath != null)
                {
                    migrationParametersValue["destinationShareUNCPath"] = parameters.DestinationShareUncPath;
                }
                
                if (parameters.Id != null)
                {
                    migrationParametersValue["id"] = parameters.Id;
                }
                
                if (parameters.Name != null)
                {
                    migrationParametersValue["name"] = parameters.Name;
                }
                
                if (parameters.Type != null)
                {
                    migrationParametersValue["type"] = parameters.Type;
                }
                
                if (parameters.Location != null)
                {
                    migrationParametersValue["location"] = parameters.Location;
                }
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    migrationParametersValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MigrateContainerResponse result = null;
                    // Deserialize Response
                    result = new MigrateContainerResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='shareName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='operationId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> SetMigrateContainerOperationStatusAsync(string resourceGroupName, string farmId, string shareName, string operationId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (shareName == null)
            {
                throw new ArgumentNullException("shareName");
            }
            if (operationId == null)
            {
                throw new ArgumentNullException("operationId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("shareName", shareName);
                tracingParameters.Add("operationId", operationId);
                TracingAdapter.Enter(invocationId, this, "SetMigrateContainerOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/shares/";
            url = url + Uri.EscapeDataString(shareName);
            url = url + "/operationresults/";
            url = url + Uri.EscapeDataString(operationId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class StorageAccountOperationsExtensions
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='accountId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static StorageAccountGetResponse Get(this IStorageAccountOperations operations, string resourceGroupName, string farmId, string accountId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).GetAsync(resourceGroupName, farmId, accountId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='accountId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<StorageAccountGetResponse> GetAsync(this IStorageAccountOperations operations, string resourceGroupName, string farmId, string accountId)
        {
            return operations.GetAsync(resourceGroupName, farmId, accountId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Optional. Your documentation here.
        /// </param>
        /// <param name='summary'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static StorageAccountListResponse List(this IStorageAccountOperations operations, string resourceGroupName, string farmId, string filter, bool summary)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).ListAsync(resourceGroupName, farmId, filter, summary);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Optional. Your documentation here.
        /// </param>
        /// <param name='summary'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<StorageAccountListResponse> ListAsync(this IStorageAccountOperations operations, string resourceGroupName, string farmId, string filter, bool summary)
        {
            return operations.ListAsync(resourceGroupName, farmId, filter, summary, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IStorageAccountOperations.
        /// </param>
        /// <param name='tenantSubscriptionId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='tenantResourceGroup'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='resourceAdminApiVersion'>
        /// Required. Your documentation here
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static StorageAccountSyncResponse Sync(this IStorageAccountOperations operations, string tenantSubscriptionId, string tenantResourceGroup, string resourceAdminApiVersion, StorageAccountSyncRequest parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).SyncAsync(tenantSubscriptionId, tenantResourceGroup, resourceAdminApiVersion, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IStorageAccountOperations.
        /// </param>
        /// <param name='tenantSubscriptionId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='tenantResourceGroup'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='resourceAdminApiVersion'>
        /// Required. Your documentation here
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<StorageAccountSyncResponse> SyncAsync(this IStorageAccountOperations operations, string tenantSubscriptionId, string tenantResourceGroup, string resourceAdminApiVersion, StorageAccountSyncRequest parameters)
        {
            return operations.SyncAsync(tenantSubscriptionId, tenantResourceGroup, resourceAdminApiVersion, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='accountId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='undeleteParam'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Undelete(this IStorageAccountOperations operations, string resourceGroupName, string farmId, string accountId, StorageAccountUndeleteParameters undeleteParam)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).UndeleteAsync(resourceGroupName, farmId, accountId, undeleteParam);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.IStorageAccountOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='accountId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='undeleteParam'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> UndeleteAsync(this IStorageAccountOperations operations, string resourceGroupName, string farmId, string accountId, StorageAccountUndeleteParameters undeleteParam)
        {
            return operations.UndeleteAsync(resourceGroupName, farmId, accountId, undeleteParam, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    public partial interface IStorageAccountOperations
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='accountId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<StorageAccountGetResponse> GetAsync(string resourceGroupName, string farmId, string accountId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='summary'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<StorageAccountListResponse> ListAsync(string resourceGroupName, string farmId, string filter, bool summary, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='tenantSubscriptionId'>
        /// Your documentation here.
        /// </param>
        /// <param name='tenantResourceGroup'>
        /// Your documentation here.
        /// </param>
        /// <param name='resourceAdminApiVersion'>
        /// Your documentation here
        /// </param>
        /// <param name='parameters'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<StorageAccountSyncResponse> SyncAsync(string tenantSubscriptionId, string tenantResourceGroup, string resourceAdminApiVersion, StorageAccountSyncRequest parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='accountId'>
        /// Your documentation here.
        /// </param>
        /// <param name='undeleteParam'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> UndeleteAsync(string resourceGroupName, string farmId, string accountId, StorageAccountUndeleteParameters undeleteParam, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class StorageAccountOperations : IServiceOperations<StorageAdminManagementClient>, IStorageAccountOperations
    {
        /// <summary>
        /// Initializes a new instance of the StorageAccountOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal StorageAccountOperations(StorageAdminManagementClient client)
        {
            this._client = client;
        }
        
        private StorageAdminManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.StorageAdminManagementClient.
        /// </summary>
        public StorageAdminManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='accountId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<StorageAccountGetResponse> GetAsync(string resourceGroupName, string farmId, string accountId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (accountId == null)
            {
                throw new ArgumentNullException("accountId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("accountId", accountId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/storageaccounts/";
            url = url + Uri.EscapeDataString(accountId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    StorageAccountGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new StorageAccountGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            StorageAccountModel storageAccountInstance = new StorageAccountModel();
                            result.StorageAccount = storageAccountInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                StorageAccountPropertiesModel propertiesInstance = new StorageAccountPropertiesModel();
                                storageAccountInstance.Properties = propertiesInstance;
                                
                                JToken tenantViewIdValue = propertiesValue["tenantViewId"];
                                if (tenantViewIdValue != null && tenantViewIdValue.Type != JTokenType.Null)
                                {
                                    string tenantViewIdInstance = ((string)tenantViewIdValue);
                                    propertiesInstance.TenantViewId = tenantViewIdInstance;
                                }
                                
                                JToken accountTypeValue = propertiesValue["accountType"];
                                if (accountTypeValue != null && accountTypeValue.Type != JTokenType.Null)
                                {
                                    StorageAccountType accountTypeInstance = StorageAdminManagementClient.ParseStorageAccountType(((string)accountTypeValue));
                                    propertiesInstance.AccountType = accountTypeInstance;
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    StorageAccountState provisioningStateInstance = StorageAdminManagementClient.ParseStorageAccountState(((string)provisioningStateValue));
                                    propertiesInstance.State = provisioningStateInstance;
                                }
                                
                                JToken primaryEndpointsSequenceElement = ((JToken)propertiesValue["primaryEndpoints"]);
                                if (primaryEndpointsSequenceElement != null && primaryEndpointsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in primaryEndpointsSequenceElement)
                                    {
                                        string primaryEndpointsKey = ((string)property.Name);
                                        string primaryEndpointsValue = ((string)property.Value);
                                        propertiesInstance.PrimaryEndpoints.Add(primaryEndpointsKey, primaryEndpointsValue);
                                    }
                                }
                                
                                JToken creationTimeValue = propertiesValue["creationTime"];
                                if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                {
                                    string creationTimeInstance = ((string)creationTimeValue);
                                    propertiesInstance.CreationTime = creationTimeInstance;
                                }
                                
                                JToken alternateNameValue = propertiesValue["alternateName"];
                                if (alternateNameValue != null && alternateNameValue.Type != JTokenType.Null)
                                {
                                    string alternateNameInstance = ((string)alternateNameValue);
                                    propertiesInstance.AlternateName = alternateNameInstance;
                                }
                                
                                JToken primaryLocationValue = propertiesValue["primaryLocation"];
                                if (primaryLocationValue != null && primaryLocationValue.Type != JTokenType.Null)
                                {
                                    string primaryLocationInstance = ((string)primaryLocationValue);
                                    propertiesInstance.PrimaryLocation = primaryLocationInstance;
                                }
                                
                                JToken statusOfPrimaryValue = propertiesValue["statusOfPrimary"];
                                if (statusOfPrimaryValue != null && statusOfPrimaryValue.Type != JTokenType.Null)
                                {
                                    RegionStatus statusOfPrimaryInstance = ((RegionStatus)Enum.Parse(typeof(RegionStatus), ((string)statusOfPrimaryValue), true));
                                    propertiesInstance.StatusOfPrimary = statusOfPrimaryInstance;
                                }
                                
                                JToken tenantSubscriptionIdValue = propertiesValue["tenantSubscriptionId"];
                                if (tenantSubscriptionIdValue != null && tenantSubscriptionIdValue.Type != JTokenType.Null)
                                {
                                    Guid tenantSubscriptionIdInstance = Guid.Parse(((string)tenantSubscriptionIdValue));
                                    propertiesInstance.TenantSubscriptionId = tenantSubscriptionIdInstance;
                                }
                                
                                JToken tenantStorageAccountNameValue = propertiesValue["tenantStorageAccountName"];
                                if (tenantStorageAccountNameValue != null && tenantStorageAccountNameValue.Type != JTokenType.Null)
                                {
                                    string tenantStorageAccountNameInstance = ((string)tenantStorageAccountNameValue);
                                    propertiesInstance.TenantAccountName = tenantStorageAccountNameInstance;
                                }
                                
                                JToken tenantResourceGroupNameValue = propertiesValue["tenantResourceGroupName"];
                                if (tenantResourceGroupNameValue != null && tenantResourceGroupNameValue.Type != JTokenType.Null)
                                {
                                    string tenantResourceGroupNameInstance = ((string)tenantResourceGroupNameValue);
                                    propertiesInstance.TenantResourceGroupName = tenantResourceGroupNameInstance;
                                }
                                
                                JToken currentOperationValue = propertiesValue["currentOperation"];
                                if (currentOperationValue != null && currentOperationValue.Type != JTokenType.Null)
                                {
                                    StorageAccountOperation currentOperationInstance = ((StorageAccountOperation)Enum.Parse(typeof(StorageAccountOperation), ((string)currentOperationValue), true));
                                    propertiesInstance.CurrentOperation = currentOperationInstance;
                                }
                                
                                JToken customDomainValue = propertiesValue["customDomain"];
                                if (customDomainValue != null && customDomainValue.Type != JTokenType.Null)
                                {
                                    string customDomainInstance = ((string)customDomainValue);
                                    propertiesInstance.CustomDomain = customDomainInstance;
                                }
                                
                                JToken acquisitionOperationCountValue = propertiesValue["acquisitionOperationCount"];
                                if (acquisitionOperationCountValue != null && acquisitionOperationCountValue.Type != JTokenType.Null)
                                {
                                    int acquisitionOperationCountInstance = ((int)acquisitionOperationCountValue);
                                    propertiesInstance.AcquisitionOperationCount = acquisitionOperationCountInstance;
                                }
                                
                                JToken deletedTimeValue = propertiesValue["deletedTime"];
                                if (deletedTimeValue != null && deletedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime deletedTimeInstance = ((DateTime)deletedTimeValue);
                                    propertiesInstance.DeletedTime = deletedTimeInstance;
                                }
                                
                                JToken accountStatusValue = propertiesValue["accountStatus"];
                                if (accountStatusValue != null && accountStatusValue.Type != JTokenType.Null)
                                {
                                    StorageAccountStatus accountStatusInstance = ((StorageAccountStatus)Enum.Parse(typeof(StorageAccountStatus), ((string)accountStatusValue), true));
                                    propertiesInstance.AccountStatus = accountStatusInstance;
                                }
                                
                                JToken recoveredTimeValue = propertiesValue["recoveredTime"];
                                if (recoveredTimeValue != null && recoveredTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime recoveredTimeInstance = ((DateTime)recoveredTimeValue);
                                    propertiesInstance.RecoveredTime = recoveredTimeInstance;
                                }
                                
                                JToken recycledTimeValue = propertiesValue["recycledTime"];
                                if (recycledTimeValue != null && recycledTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime recycledTimeInstance = ((DateTime)recycledTimeValue);
                                    propertiesInstance.RecycledTime = recycledTimeInstance;
                                }
                                
                                JToken permissionsValue = propertiesValue["permissions"];
                                if (permissionsValue != null && permissionsValue.Type != JTokenType.Null)
                                {
                                    WacAccountPermissions permissionsInstance = StorageAdminManagementClient.ParseWacAccountPermissions(((string)permissionsValue));
                                    propertiesInstance.Permissions = permissionsInstance;
                                }
                                
                                JToken accountIdValue = propertiesValue["accountId"];
                                if (accountIdValue != null && accountIdValue.Type != JTokenType.Null)
                                {
                                    string accountIdInstance = ((string)accountIdValue);
                                    propertiesInstance.AccountId = accountIdInstance;
                                }
                                
                                JToken wacInternalStateValue = propertiesValue["wacInternalState"];
                                if (wacInternalStateValue != null && wacInternalStateValue.Type != JTokenType.Null)
                                {
                                    WacAccountStates wacInternalStateInstance = StorageAdminManagementClient.ParseWacAccountStates(((string)wacInternalStateValue));
                                    propertiesInstance.WacInternalState = wacInternalStateInstance;
                                }
                                
                                JToken resourceAdminApiVersionValue = propertiesValue["resourceAdminApiVersion"];
                                if (resourceAdminApiVersionValue != null && resourceAdminApiVersionValue.Type != JTokenType.Null)
                                {
                                    string resourceAdminApiVersionInstance = ((string)resourceAdminApiVersionValue);
                                    propertiesInstance.ResourceAdminApiVersion = resourceAdminApiVersionInstance;
                                }
                                
                                JToken idValue = propertiesValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    propertiesInstance.Id = idInstance;
                                }
                                
                                JToken nameValue = propertiesValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    propertiesInstance.Name = nameInstance;
                                }
                                
                                JToken typeValue = propertiesValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    propertiesInstance.Type = typeInstance;
                                }
                                
                                JToken locationValue = propertiesValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    propertiesInstance.Location = locationInstance;
                                }
                                
                                JToken tagsSequenceElement = ((JToken)propertiesValue["tags"]);
                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property2 in tagsSequenceElement)
                                    {
                                        string tagsKey = ((string)property2.Name);
                                        string tagsValue = ((string)property2.Value);
                                        propertiesInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                storageAccountInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                storageAccountInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue2 = responseDoc["type"];
                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                            {
                                string typeInstance2 = ((string)typeValue2);
                                storageAccountInstance.Type = typeInstance2;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                storageAccountInstance.Location = locationInstance2;
                            }
                            
                            JToken tagsSequenceElement2 = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                            {
                                foreach (JProperty property3 in tagsSequenceElement2)
                                {
                                    string tagsKey2 = ((string)property3.Name);
                                    string tagsValue2 = ((string)property3.Value);
                                    storageAccountInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Optional. Your documentation here.
        /// </param>
        /// <param name='summary'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<StorageAccountListResponse> ListAsync(string resourceGroupName, string farmId, string filter, bool summary, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("filter", filter);
                tracingParameters.Add("summary", summary);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/storageaccounts";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            if (filter != null)
            {
                odataFilter.Add(Uri.EscapeDataString(filter));
            }
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            queryParameters.Add("summary=" + Uri.EscapeDataString(summary.ToString().ToLower()));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    StorageAccountListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new StorageAccountListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    StorageAccountModel storageAccountModelInstance = new StorageAccountModel();
                                    result.StorageAccounts.Add(storageAccountModelInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        StorageAccountPropertiesModel propertiesInstance = new StorageAccountPropertiesModel();
                                        storageAccountModelInstance.Properties = propertiesInstance;
                                        
                                        JToken tenantViewIdValue = propertiesValue["tenantViewId"];
                                        if (tenantViewIdValue != null && tenantViewIdValue.Type != JTokenType.Null)
                                        {
                                            string tenantViewIdInstance = ((string)tenantViewIdValue);
                                            propertiesInstance.TenantViewId = tenantViewIdInstance;
                                        }
                                        
                                        JToken accountTypeValue = propertiesValue["accountType"];
                                        if (accountTypeValue != null && accountTypeValue.Type != JTokenType.Null)
                                        {
                                            StorageAccountType accountTypeInstance = StorageAdminManagementClient.ParseStorageAccountType(((string)accountTypeValue));
                                            propertiesInstance.AccountType = accountTypeInstance;
                                        }
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            StorageAccountState provisioningStateInstance = StorageAdminManagementClient.ParseStorageAccountState(((string)provisioningStateValue));
                                            propertiesInstance.State = provisioningStateInstance;
                                        }
                                        
                                        JToken primaryEndpointsSequenceElement = ((JToken)propertiesValue["primaryEndpoints"]);
                                        if (primaryEndpointsSequenceElement != null && primaryEndpointsSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in primaryEndpointsSequenceElement)
                                            {
                                                string primaryEndpointsKey = ((string)property.Name);
                                                string primaryEndpointsValue = ((string)property.Value);
                                                propertiesInstance.PrimaryEndpoints.Add(primaryEndpointsKey, primaryEndpointsValue);
                                            }
                                        }
                                        
                                        JToken creationTimeValue = propertiesValue["creationTime"];
                                        if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                        {
                                            string creationTimeInstance = ((string)creationTimeValue);
                                            propertiesInstance.CreationTime = creationTimeInstance;
                                        }
                                        
                                        JToken alternateNameValue = propertiesValue["alternateName"];
                                        if (alternateNameValue != null && alternateNameValue.Type != JTokenType.Null)
                                        {
                                            string alternateNameInstance = ((string)alternateNameValue);
                                            propertiesInstance.AlternateName = alternateNameInstance;
                                        }
                                        
                                        JToken primaryLocationValue = propertiesValue["primaryLocation"];
                                        if (primaryLocationValue != null && primaryLocationValue.Type != JTokenType.Null)
                                        {
                                            string primaryLocationInstance = ((string)primaryLocationValue);
                                            propertiesInstance.PrimaryLocation = primaryLocationInstance;
                                        }
                                        
                                        JToken statusOfPrimaryValue = propertiesValue["statusOfPrimary"];
                                        if (statusOfPrimaryValue != null && statusOfPrimaryValue.Type != JTokenType.Null)
                                        {
                                            RegionStatus statusOfPrimaryInstance = ((RegionStatus)Enum.Parse(typeof(RegionStatus), ((string)statusOfPrimaryValue), true));
                                            propertiesInstance.StatusOfPrimary = statusOfPrimaryInstance;
                                        }
                                        
                                        JToken tenantSubscriptionIdValue = propertiesValue["tenantSubscriptionId"];
                                        if (tenantSubscriptionIdValue != null && tenantSubscriptionIdValue.Type != JTokenType.Null)
                                        {
                                            Guid tenantSubscriptionIdInstance = Guid.Parse(((string)tenantSubscriptionIdValue));
                                            propertiesInstance.TenantSubscriptionId = tenantSubscriptionIdInstance;
                                        }
                                        
                                        JToken tenantStorageAccountNameValue = propertiesValue["tenantStorageAccountName"];
                                        if (tenantStorageAccountNameValue != null && tenantStorageAccountNameValue.Type != JTokenType.Null)
                                        {
                                            string tenantStorageAccountNameInstance = ((string)tenantStorageAccountNameValue);
                                            propertiesInstance.TenantAccountName = tenantStorageAccountNameInstance;
                                        }
                                        
                                        JToken tenantResourceGroupNameValue = propertiesValue["tenantResourceGroupName"];
                                        if (tenantResourceGroupNameValue != null && tenantResourceGroupNameValue.Type != JTokenType.Null)
                                        {
                                            string tenantResourceGroupNameInstance = ((string)tenantResourceGroupNameValue);
                                            propertiesInstance.TenantResourceGroupName = tenantResourceGroupNameInstance;
                                        }
                                        
                                        JToken currentOperationValue = propertiesValue["currentOperation"];
                                        if (currentOperationValue != null && currentOperationValue.Type != JTokenType.Null)
                                        {
                                            StorageAccountOperation currentOperationInstance = ((StorageAccountOperation)Enum.Parse(typeof(StorageAccountOperation), ((string)currentOperationValue), true));
                                            propertiesInstance.CurrentOperation = currentOperationInstance;
                                        }
                                        
                                        JToken customDomainValue = propertiesValue["customDomain"];
                                        if (customDomainValue != null && customDomainValue.Type != JTokenType.Null)
                                        {
                                            string customDomainInstance = ((string)customDomainValue);
                                            propertiesInstance.CustomDomain = customDomainInstance;
                                        }
                                        
                                        JToken acquisitionOperationCountValue = propertiesValue["acquisitionOperationCount"];
                                        if (acquisitionOperationCountValue != null && acquisitionOperationCountValue.Type != JTokenType.Null)
                                        {
                                            int acquisitionOperationCountInstance = ((int)acquisitionOperationCountValue);
                                            propertiesInstance.AcquisitionOperationCount = acquisitionOperationCountInstance;
                                        }
                                        
                                        JToken deletedTimeValue = propertiesValue["deletedTime"];
                                        if (deletedTimeValue != null && deletedTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime deletedTimeInstance = ((DateTime)deletedTimeValue);
                                            propertiesInstance.DeletedTime = deletedTimeInstance;
                                        }
                                        
                                        JToken accountStatusValue = propertiesValue["accountStatus"];
                                        if (accountStatusValue != null && accountStatusValue.Type != JTokenType.Null)
                                        {
                                            StorageAccountStatus accountStatusInstance = ((StorageAccountStatus)Enum.Parse(typeof(StorageAccountStatus), ((string)accountStatusValue), true));
                                            propertiesInstance.AccountStatus = accountStatusInstance;
                                        }
                                        
                                        JToken recoveredTimeValue = propertiesValue["recoveredTime"];
                                        if (recoveredTimeValue != null && recoveredTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime recoveredTimeInstance = ((DateTime)recoveredTimeValue);
                                            propertiesInstance.RecoveredTime = recoveredTimeInstance;
                                        }
                                        
                                        JToken recycledTimeValue = propertiesValue["recycledTime"];
                                        if (recycledTimeValue != null && recycledTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime recycledTimeInstance = ((DateTime)recycledTimeValue);
                                            propertiesInstance.RecycledTime = recycledTimeInstance;
                                        }
                                        
                                        JToken permissionsValue = propertiesValue["permissions"];
                                        if (permissionsValue != null && permissionsValue.Type != JTokenType.Null)
                                        {
                                            WacAccountPermissions permissionsInstance = StorageAdminManagementClient.ParseWacAccountPermissions(((string)permissionsValue));
                                            propertiesInstance.Permissions = permissionsInstance;
                                        }
                                        
                                        JToken accountIdValue = propertiesValue["accountId"];
                                        if (accountIdValue != null && accountIdValue.Type != JTokenType.Null)
                                        {
                                            string accountIdInstance = ((string)accountIdValue);
                                            propertiesInstance.AccountId = accountIdInstance;
                                        }
                                        
                                        JToken wacInternalStateValue = propertiesValue["wacInternalState"];
                                        if (wacInternalStateValue != null && wacInternalStateValue.Type != JTokenType.Null)
                                        {
                                            WacAccountStates wacInternalStateInstance = StorageAdminManagementClient.ParseWacAccountStates(((string)wacInternalStateValue));
                                            propertiesInstance.WacInternalState = wacInternalStateInstance;
                                        }
                                        
                                        JToken resourceAdminApiVersionValue = propertiesValue["resourceAdminApiVersion"];
                                        if (resourceAdminApiVersionValue != null && resourceAdminApiVersionValue.Type != JTokenType.Null)
                                        {
                                            string resourceAdminApiVersionInstance = ((string)resourceAdminApiVersionValue);
                                            propertiesInstance.ResourceAdminApiVersion = resourceAdminApiVersionInstance;
                                        }
                                        
                                        JToken idValue = propertiesValue["id"];
                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                        {
                                            string idInstance = ((string)idValue);
                                            propertiesInstance.Id = idInstance;
                                        }
                                        
                                        JToken nameValue = propertiesValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            propertiesInstance.Name = nameInstance;
                                        }
                                        
                                        JToken typeValue = propertiesValue["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            propertiesInstance.Type = typeInstance;
                                        }
                                        
                                        JToken locationValue = propertiesValue["location"];
                                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                                        {
                                            string locationInstance = ((string)locationValue);
                                            propertiesInstance.Location = locationInstance;
                                        }
                                        
                                        JToken tagsSequenceElement = ((JToken)propertiesValue["tags"]);
                                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property2 in tagsSequenceElement)
                                            {
                                                string tagsKey = ((string)property2.Name);
                                                string tagsValue = ((string)property2.Value);
                                                propertiesInstance.Tags.Add(tagsKey, tagsValue);
                                            }
                                        }
                                    }
                                    
                                    JToken idValue2 = valueValue["id"];
                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                    {
                                        string idInstance2 = ((string)idValue2);
                                        storageAccountModelInstance.Id = idInstance2;
                                    }
                                    
                                    JToken nameValue2 = valueValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        storageAccountModelInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken typeValue2 = valueValue["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        storageAccountModelInstance.Type = typeInstance2;
                                    }
                                    
                                    JToken locationValue2 = valueValue["location"];
                                    if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                    {
                                        string locationInstance2 = ((string)locationValue2);
                                        storageAccountModelInstance.Location = locationInstance2;
                                    }
                                    
                                    JToken tagsSequenceElement2 = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property3 in tagsSequenceElement2)
                                        {
                                            string tagsKey2 = ((string)property3.Name);
                                            string tagsValue2 = ((string)property3.Value);
                                            storageAccountModelInstance.Tags.Add(tagsKey2, tagsValue2);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='tenantSubscriptionId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='tenantResourceGroup'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='resourceAdminApiVersion'>
        /// Required. Your documentation here
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<StorageAccountSyncResponse> SyncAsync(string tenantSubscriptionId, string tenantResourceGroup, string resourceAdminApiVersion, StorageAccountSyncRequest parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (tenantSubscriptionId == null)
            {
                throw new ArgumentNullException("tenantSubscriptionId");
            }
            if (tenantResourceGroup == null)
            {
                throw new ArgumentNullException("tenantResourceGroup");
            }
            if (resourceAdminApiVersion == null)
            {
                throw new ArgumentNullException("resourceAdminApiVersion");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("tenantSubscriptionId", tenantSubscriptionId);
                tracingParameters.Add("tenantResourceGroup", tenantResourceGroup);
                tracingParameters.Add("resourceAdminApiVersion", resourceAdminApiVersion);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "SyncAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/Microsoft.Resources.Admin/subscriptions/";
            url = url + Uri.EscapeDataString(tenantSubscriptionId);
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(tenantResourceGroup);
            url = url + "/SynchronizeResources";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=" + Uri.EscapeDataString(resourceAdminApiVersion));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject storageAccountSyncRequestValue = new JObject();
                requestDoc = storageAccountSyncRequestValue;
                
                if (parameters.ApiVersion != null)
                {
                    storageAccountSyncRequestValue["apiVersion"] = parameters.ApiVersion;
                }
                
                if (parameters.ResourceLocation != null)
                {
                    storageAccountSyncRequestValue["resourceLocation"] = parameters.ResourceLocation;
                }
                
                if (parameters.TargetOperaton != null)
                {
                    storageAccountSyncRequestValue["targetOperation"] = parameters.TargetOperaton;
                }
                
                if (parameters.Id != null)
                {
                    storageAccountSyncRequestValue["id"] = parameters.Id;
                }
                
                if (parameters.Name != null)
                {
                    storageAccountSyncRequestValue["name"] = parameters.Name;
                }
                
                if (parameters.Type != null)
                {
                    storageAccountSyncRequestValue["type"] = parameters.Type;
                }
                
                if (parameters.Location != null)
                {
                    storageAccountSyncRequestValue["location"] = parameters.Location;
                }
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    storageAccountSyncRequestValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    StorageAccountSyncResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new StorageAccountSyncResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken correlationIdValue = responseDoc["correlationId"];
                            if (correlationIdValue != null && correlationIdValue.Type != JTokenType.Null)
                            {
                                string correlationIdInstance = ((string)correlationIdValue);
                                result.CorrelationId = correlationIdInstance;
                            }
                            
                            JToken frontdoorLocationValue = responseDoc["frontdoorLocation"];
                            if (frontdoorLocationValue != null && frontdoorLocationValue.Type != JTokenType.Null)
                            {
                                string frontdoorLocationInstance = ((string)frontdoorLocationValue);
                                result.FrontdoorLocation = frontdoorLocationInstance;
                            }
                            
                            JToken timestampValue = responseDoc["timestamp"];
                            if (timestampValue != null && timestampValue.Type != JTokenType.Null)
                            {
                                string timestampInstance = ((string)timestampValue);
                                result.Timestamp = timestampInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                result.Message = messageInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='accountId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='undeleteParam'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> UndeleteAsync(string resourceGroupName, string farmId, string accountId, StorageAccountUndeleteParameters undeleteParam, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (accountId == null)
            {
                throw new ArgumentNullException("accountId");
            }
            if (undeleteParam == null)
            {
                throw new ArgumentNullException("undeleteParam");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("undeleteParam", undeleteParam);
                TracingAdapter.Enter(invocationId, this, "UndeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/storageaccounts/";
            url = url + Uri.EscapeDataString(accountId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("action=undelete");
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject storageAccountUndeleteParametersValue = new JObject();
                requestDoc = storageAccountUndeleteParametersValue;
                
                if (undeleteParam.NewAccountName != null)
                {
                    storageAccountUndeleteParametersValue["newAccountName"] = undeleteParam.NewAccountName;
                }
                
                if (undeleteParam.Id != null)
                {
                    storageAccountUndeleteParametersValue["id"] = undeleteParam.Id;
                }
                
                if (undeleteParam.Name != null)
                {
                    storageAccountUndeleteParametersValue["name"] = undeleteParam.Name;
                }
                
                if (undeleteParam.Type != null)
                {
                    storageAccountUndeleteParametersValue["type"] = undeleteParam.Type;
                }
                
                if (undeleteParam.Location != null)
                {
                    storageAccountUndeleteParametersValue["location"] = undeleteParam.Location;
                }
                
                if (undeleteParam.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in undeleteParam.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    storageAccountUndeleteParametersValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class TableServiceOperationsExtensions
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.ITableServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public static TableServiceGetResponse Get(this ITableServiceOperations operations, string resourceGroupName, string farmId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableServiceOperations)s).GetAsync(resourceGroupName, farmId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.ITableServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public static Task<TableServiceGetResponse> GetAsync(this ITableServiceOperations operations, string resourceGroupName, string farmId)
        {
            return operations.GetAsync(resourceGroupName, farmId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.ITableServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricDefinitionsResult GetMetricDefinitions(this ITableServiceOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableServiceOperations)s).GetMetricDefinitionsAsync(resourceGroupName, farmId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.ITableServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(this ITableServiceOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return operations.GetMetricDefinitionsAsync(resourceGroupName, farmId, filter, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.ITableServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static MetricsResult GetMetrics(this ITableServiceOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITableServiceOperations)s).GetMetricsAsync(resourceGroupName, farmId, filter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.ITableServiceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<MetricsResult> GetMetricsAsync(this ITableServiceOperations operations, string resourceGroupName, string farmId, string filter)
        {
            return operations.GetMetricsAsync(resourceGroupName, farmId, filter, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    public partial interface ITableServiceOperations
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        Task<TableServiceGetResponse> GetAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken);
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class TableServiceOperations : IServiceOperations<StorageAdminManagementClient>, ITableServiceOperations
    {
        /// <summary>
        /// Initializes a new instance of the TableServiceOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal TableServiceOperations(StorageAdminManagementClient client)
        {
            this._client = client;
        }
        
        private StorageAdminManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.AzureConsistentStorage.StorageAdminManagementClient.
        /// </summary>
        public StorageAdminManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here
        /// </returns>
        public async Task<TableServiceGetResponse> GetAsync(string resourceGroupName, string farmId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/tableservices/default";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TableServiceGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TableServiceGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            TableServiceResponseResource resourceInstance = new TableServiceResponseResource();
                            result.Resource = resourceInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                TableServiceResponse propertiesInstance = new TableServiceResponse();
                                resourceInstance.TableService = propertiesInstance;
                                
                                JToken settingsValue = propertiesValue["settings"];
                                if (settingsValue != null && settingsValue.Type != JTokenType.Null)
                                {
                                    TableServiceSettings settingsInstance = new TableServiceSettings();
                                    propertiesInstance.Settings = settingsInstance;
                                    
                                    JToken frontEndHttpListenPortValue = settingsValue["frontEndHttpListenPort"];
                                    if (frontEndHttpListenPortValue != null && frontEndHttpListenPortValue.Type != JTokenType.Null)
                                    {
                                        int frontEndHttpListenPortInstance = ((int)frontEndHttpListenPortValue);
                                        settingsInstance.FrontEndHttpListenPort = frontEndHttpListenPortInstance;
                                    }
                                    
                                    JToken frontEndHttpsListenPortValue = settingsValue["frontEndHttpsListenPort"];
                                    if (frontEndHttpsListenPortValue != null && frontEndHttpsListenPortValue.Type != JTokenType.Null)
                                    {
                                        int frontEndHttpsListenPortInstance = ((int)frontEndHttpsListenPortValue);
                                        settingsInstance.FrontEndHttpsListenPort = frontEndHttpsListenPortInstance;
                                    }
                                    
                                    JToken frontEndCallbackThreadsCountValue = settingsValue["frontEndCallbackThreadsCount"];
                                    if (frontEndCallbackThreadsCountValue != null && frontEndCallbackThreadsCountValue.Type != JTokenType.Null)
                                    {
                                        int frontEndCallbackThreadsCountInstance = ((int)frontEndCallbackThreadsCountValue);
                                        settingsInstance.FrontEndCallbackThreadsCount = frontEndCallbackThreadsCountInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingEnabledValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingEnabled"];
                                    if (frontEndCpuBasedKeepAliveThrottlingEnabledValue != null && frontEndCpuBasedKeepAliveThrottlingEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndCpuBasedKeepAliveThrottlingEnabledInstance = ((bool)frontEndCpuBasedKeepAliveThrottlingEnabledValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingEnabled = frontEndCpuBasedKeepAliveThrottlingEnabledInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold"];
                                    if (frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue != null && frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue.Type != JTokenType.Null)
                                    {
                                        double frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdInstance = ((double)frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold = frontEndCpuBasedKeepAliveThrottlingPercentCpuThresholdInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle"];
                                    if (frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue != null && frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue.Type != JTokenType.Null)
                                    {
                                        double frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleInstance = ((double)frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle = frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottleInstance;
                                    }
                                    
                                    JToken frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue = settingsValue["frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds"];
                                    if (frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue != null && frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsInstance = ((int)frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsValue);
                                        settingsInstance.FrontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds = frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSecondsInstance;
                                    }
                                    
                                    JToken frontEndMemoryThrottlingEnabledValue = settingsValue["frontEndMemoryThrottlingEnabled"];
                                    if (frontEndMemoryThrottlingEnabledValue != null && frontEndMemoryThrottlingEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndMemoryThrottlingEnabledInstance = ((bool)frontEndMemoryThrottlingEnabledValue);
                                        settingsInstance.FrontEndMemoryThrottlingEnabled = frontEndMemoryThrottlingEnabledInstance;
                                    }
                                    
                                    JToken frontEndMaxMillisecondsBetweenMemorySamplesValue = settingsValue["frontEndMaxMillisecondsBetweenMemorySamples"];
                                    if (frontEndMaxMillisecondsBetweenMemorySamplesValue != null && frontEndMaxMillisecondsBetweenMemorySamplesValue.Type != JTokenType.Null)
                                    {
                                        int frontEndMaxMillisecondsBetweenMemorySamplesInstance = ((int)frontEndMaxMillisecondsBetweenMemorySamplesValue);
                                        settingsInstance.FrontEndMaxMillisecondsBetweenMemorySamples = frontEndMaxMillisecondsBetweenMemorySamplesInstance;
                                    }
                                    
                                    JToken frontEndMemoryThrottleThresholdSettingsValue = settingsValue["frontEndMemoryThrottleThresholdSettings"];
                                    if (frontEndMemoryThrottleThresholdSettingsValue != null && frontEndMemoryThrottleThresholdSettingsValue.Type != JTokenType.Null)
                                    {
                                        string frontEndMemoryThrottleThresholdSettingsInstance = ((string)frontEndMemoryThrottleThresholdSettingsValue);
                                        settingsInstance.FrontEndMemoryThrottleThresholdSettings = frontEndMemoryThrottleThresholdSettingsInstance;
                                    }
                                    
                                    JToken frontEndMinThreadPoolThreadsValue = settingsValue["frontEndMinThreadPoolThreads"];
                                    if (frontEndMinThreadPoolThreadsValue != null && frontEndMinThreadPoolThreadsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndMinThreadPoolThreadsInstance = ((int)frontEndMinThreadPoolThreadsValue);
                                        settingsInstance.FrontEndMinimumThreadPoolThreads = frontEndMinThreadPoolThreadsInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue = settingsValue["frontEndThreadPoolBasedKeepAliveIOCompletionThreshold"];
                                    if (frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue != null && frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveIOCompletionThresholdInstance = ((int)frontEndThreadPoolBasedKeepAliveIOCompletionThresholdValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveIOCompletionThreshold = frontEndThreadPoolBasedKeepAliveIOCompletionThresholdInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue = settingsValue["frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold"];
                                    if (frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue != null && frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdInstance = ((int)frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveWorkerThreadThreshold = frontEndThreadPoolBasedKeepAliveWorkerThreadThresholdInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue = settingsValue["frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds"];
                                    if (frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue != null && frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue.Type != JTokenType.Null)
                                    {
                                        int frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsInstance = ((int)frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds = frontEndThreadPoolBasedKeepAliveMonitorIntervalInSecondsInstance;
                                    }
                                    
                                    JToken frontEndThreadPoolBasedKeepAlivePercentageValue = settingsValue["frontEndThreadPoolBasedKeepAlivePercentage"];
                                    if (frontEndThreadPoolBasedKeepAlivePercentageValue != null && frontEndThreadPoolBasedKeepAlivePercentageValue.Type != JTokenType.Null)
                                    {
                                        double frontEndThreadPoolBasedKeepAlivePercentageInstance = ((double)frontEndThreadPoolBasedKeepAlivePercentageValue);
                                        settingsInstance.FrontEndThreadPoolBasedKeepAlivePercentage = frontEndThreadPoolBasedKeepAlivePercentageInstance;
                                    }
                                    
                                    JToken frontEndUseSlaTimeInAvailabilityValue = settingsValue["frontEndUseSlaTimeInAvailability"];
                                    if (frontEndUseSlaTimeInAvailabilityValue != null && frontEndUseSlaTimeInAvailabilityValue.Type != JTokenType.Null)
                                    {
                                        bool frontEndUseSlaTimeInAvailabilityInstance = ((bool)frontEndUseSlaTimeInAvailabilityValue);
                                        settingsInstance.FrontEndUseSlaTimeInAvailability = frontEndUseSlaTimeInAvailabilityInstance;
                                    }
                                }
                                
                                JToken versionValue = propertiesValue["version"];
                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                {
                                    string versionInstance = ((string)versionValue);
                                    propertiesInstance.Version = versionInstance;
                                }
                                
                                JToken healthStatusValue = propertiesValue["healthStatus"];
                                if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                {
                                    HealthStatus healthStatusInstance = ((HealthStatus)Enum.Parse(typeof(HealthStatus), ((string)healthStatusValue), true));
                                    propertiesInstance.HealthStatus = healthStatusInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                resourceInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                resourceInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                resourceInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                resourceInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    resourceInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricDefinitionsResult> GetMetricDefinitionsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricDefinitionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/tableservices/default/metricdefinitions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricDefinitionsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricDefinitionsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    MetricDefinition metricDefinitionInstance = new MetricDefinition();
                                    result.Value.Add(metricDefinitionInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricDefinitionInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken unitValue = valueValue["unit"];
                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit unitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)unitValue), true));
                                        metricDefinitionInstance.Unit = unitInstance;
                                    }
                                    
                                    JToken primaryAggregationTypeValue = valueValue["primaryAggregationType"];
                                    if (primaryAggregationTypeValue != null && primaryAggregationTypeValue.Type != JTokenType.Null)
                                    {
                                        MetricPrimaryAggregationType primaryAggregationTypeInstance = ((MetricPrimaryAggregationType)Enum.Parse(typeof(MetricPrimaryAggregationType), ((string)primaryAggregationTypeValue), true));
                                        metricDefinitionInstance.PrimaryAggregationType = primaryAggregationTypeInstance;
                                    }
                                    
                                    JToken metricAvailabilitiesArray = valueValue["metricAvailabilities"];
                                    if (metricAvailabilitiesArray != null && metricAvailabilitiesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricAvailabilitiesValue in ((JArray)metricAvailabilitiesArray))
                                        {
                                            MetricAvailability metricAvailabilityInstance = new MetricAvailability();
                                            metricDefinitionInstance.MetricAvailabilities.Add(metricAvailabilityInstance);
                                            
                                            JToken timeGrainValue = metricAvailabilitiesValue["timeGrain"];
                                            if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                                metricAvailabilityInstance.TimeGrain = timeGrainInstance;
                                            }
                                            
                                            JToken retentionValue = metricAvailabilitiesValue["retention"];
                                            if (retentionValue != null && retentionValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan retentionInstance = XmlConvert.ToTimeSpan(((string)retentionValue));
                                                metricAvailabilityInstance.Retention = retentionInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='farmId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='filter'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<MetricsResult> GetMetricsAsync(string resourceGroupName, string farmId, string filter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (farmId == null)
            {
                throw new ArgumentNullException("farmId");
            }
            if (filter == null)
            {
                throw new ArgumentNullException("filter");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("farmId", farmId);
                tracingParameters.Add("filter", filter);
                TracingAdapter.Enter(invocationId, this, "GetMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Storage.Admin/farms/";
            url = url + Uri.EscapeDataString(farmId);
            url = url + "/tableservices/default/metrics";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-12-01-preview");
            List<string> odataFilter = new List<string>();
            odataFilter.Add(Uri.EscapeDataString(filter));
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MetricsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Metric metricInstance = new Metric();
                                    result.Metrics.Add(metricInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        LocalizableString nameInstance = new LocalizableString();
                                        metricInstance.Name = nameInstance;
                                        
                                        JToken valueValue2 = nameValue["value"];
                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue2);
                                            nameInstance.Value = valueInstance;
                                        }
                                        
                                        JToken localizedValueValue = nameValue["localizedValue"];
                                        if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                        {
                                            string localizedValueInstance = ((string)localizedValueValue);
                                            nameInstance.LocalizedValue = localizedValueInstance;
                                        }
                                    }
                                    
                                    JToken metricUnitValue = valueValue["metricUnit"];
                                    if (metricUnitValue != null && metricUnitValue.Type != JTokenType.Null)
                                    {
                                        MetricUnit metricUnitInstance = ((MetricUnit)Enum.Parse(typeof(MetricUnit), ((string)metricUnitValue), true));
                                        metricInstance.MetricUnit = metricUnitInstance;
                                    }
                                    
                                    JToken timeGrainValue = valueValue["timeGrain"];
                                    if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                        metricInstance.TimeGrain = timeGrainInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        metricInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = valueValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        metricInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken metricValuesArray = valueValue["metricValues"];
                                    if (metricValuesArray != null && metricValuesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken metricValuesValue in ((JArray)metricValuesArray))
                                        {
                                            MetricValue metricValueInstance = new MetricValue();
                                            metricInstance.MetricValues.Add(metricValueInstance);
                                            
                                            JToken timeStampValue = metricValuesValue["timeStamp"];
                                            if (timeStampValue != null && timeStampValue.Type != JTokenType.Null)
                                            {
                                                DateTime timeStampInstance = ((DateTime)timeStampValue);
                                                metricValueInstance.TimeStamp = timeStampInstance;
                                            }
                                            
                                            JToken averageValue = metricValuesValue["average"];
                                            if (averageValue != null && averageValue.Type != JTokenType.Null)
                                            {
                                                double averageInstance = ((double)averageValue);
                                                metricValueInstance.Average = averageInstance;
                                            }
                                            
                                            JToken minimumValue = metricValuesValue["minimum"];
                                            if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                            {
                                                double minimumInstance = ((double)minimumValue);
                                                metricValueInstance.Minimum = minimumInstance;
                                            }
                                            
                                            JToken maximumValue = metricValuesValue["maximum"];
                                            if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                            {
                                                double maximumInstance = ((double)maximumValue);
                                                metricValueInstance.Maximum = maximumInstance;
                                            }
                                            
                                            JToken totalValue = metricValuesValue["total"];
                                            if (totalValue != null && totalValue.Type != JTokenType.Null)
                                            {
                                                double totalInstance = ((double)totalValue);
                                                metricValueInstance.Total = totalInstance;
                                            }
                                            
                                            JToken countValue = metricValuesValue["count"];
                                            if (countValue != null && countValue.Type != JTokenType.Null)
                                            {
                                                int countInstance = ((int)countValue);
                                                metricValueInstance.Count = countInstance;
                                            }
                                            
                                            JToken propertiesValue = metricValuesValue["properties"];
                                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                            {
                                                string propertiesInstance = propertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                metricValueInstance.Properties = propertiesInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
