// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.Logic.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.Logic;
    using Microsoft.Azure.Management.Logic.Fluent;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The integration account map.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class IntegrationAccountMapInner : Microsoft.Azure.Management.ResourceManager.Fluent.Resource
    {
        /// <summary>
        /// Initializes a new instance of the IntegrationAccountMapInner class.
        /// </summary>
        public IntegrationAccountMapInner()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IntegrationAccountMapInner class.
        /// </summary>
        /// <param name="mapType">The map type. Possible values include:
        /// 'NotSpecified', 'Xslt'</param>
        /// <param name="parametersSchema">The parameters schema of integration
        /// account map.</param>
        /// <param name="createdTime">The created time.</param>
        /// <param name="changedTime">The changed time.</param>
        /// <param name="content">The content.</param>
        /// <param name="contentType">The content type.</param>
        /// <param name="contentLink">The content link.</param>
        /// <param name="metadata">The metadata.</param>
        public IntegrationAccountMapInner(MapType mapType, string location = default(string), string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), IntegrationAccountMapPropertiesParametersSchema parametersSchema = default(IntegrationAccountMapPropertiesParametersSchema), System.DateTime? createdTime = default(System.DateTime?), System.DateTime? changedTime = default(System.DateTime?), string content = default(string), string contentType = default(string), ContentLink contentLink = default(ContentLink), object metadata = default(object))
            : base(location, id, name, type, tags)
        {
            MapType = mapType;
            ParametersSchema = parametersSchema;
            CreatedTime = createdTime;
            ChangedTime = changedTime;
            Content = content;
            ContentType = contentType;
            ContentLink = contentLink;
            Metadata = metadata;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the map type. Possible values include: 'NotSpecified',
        /// 'Xslt'
        /// </summary>
        [JsonProperty(PropertyName = "properties.mapType")]
        public MapType MapType { get; set; }

        /// <summary>
        /// Gets or sets the parameters schema of integration account map.
        /// </summary>
        [JsonProperty(PropertyName = "properties.parametersSchema")]
        public IntegrationAccountMapPropertiesParametersSchema ParametersSchema { get; set; }

        /// <summary>
        /// Gets the created time.
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdTime")]
        public System.DateTime? CreatedTime { get; private set; }

        /// <summary>
        /// Gets the changed time.
        /// </summary>
        [JsonProperty(PropertyName = "properties.changedTime")]
        public System.DateTime? ChangedTime { get; private set; }

        /// <summary>
        /// Gets or sets the content.
        /// </summary>
        [JsonProperty(PropertyName = "properties.content")]
        public string Content { get; set; }

        /// <summary>
        /// Gets or sets the content type.
        /// </summary>
        [JsonProperty(PropertyName = "properties.contentType")]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets the content link.
        /// </summary>
        [JsonProperty(PropertyName = "properties.contentLink")]
        public ContentLink ContentLink { get; private set; }

        /// <summary>
        /// Gets or sets the metadata.
        /// </summary>
        [JsonProperty(PropertyName = "properties.metadata")]
        public object Metadata { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
