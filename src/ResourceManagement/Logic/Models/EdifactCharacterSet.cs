// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.Logic.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.Logic;
    using Microsoft.Azure.Management.Logic.Fluent;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for EdifactCharacterSet.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum EdifactCharacterSet
    {
        [EnumMember(Value = "NotSpecified")]
        NotSpecified,
        [EnumMember(Value = "UNOB")]
        UNOB,
        [EnumMember(Value = "UNOA")]
        UNOA,
        [EnumMember(Value = "UNOC")]
        UNOC,
        [EnumMember(Value = "UNOD")]
        UNOD,
        [EnumMember(Value = "UNOE")]
        UNOE,
        [EnumMember(Value = "UNOF")]
        UNOF,
        [EnumMember(Value = "UNOG")]
        UNOG,
        [EnumMember(Value = "UNOH")]
        UNOH,
        [EnumMember(Value = "UNOI")]
        UNOI,
        [EnumMember(Value = "UNOJ")]
        UNOJ,
        [EnumMember(Value = "UNOK")]
        UNOK,
        [EnumMember(Value = "UNOX")]
        UNOX,
        [EnumMember(Value = "UNOY")]
        UNOY,
        [EnumMember(Value = "KECA")]
        KECA
    }
    internal static class EdifactCharacterSetEnumExtension
    {
        internal static string ToSerializedValue(this EdifactCharacterSet? value)
        {
            return value == null ? null : ((EdifactCharacterSet)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this EdifactCharacterSet value)
        {
            switch( value )
            {
                case EdifactCharacterSet.NotSpecified:
                    return "NotSpecified";
                case EdifactCharacterSet.UNOB:
                    return "UNOB";
                case EdifactCharacterSet.UNOA:
                    return "UNOA";
                case EdifactCharacterSet.UNOC:
                    return "UNOC";
                case EdifactCharacterSet.UNOD:
                    return "UNOD";
                case EdifactCharacterSet.UNOE:
                    return "UNOE";
                case EdifactCharacterSet.UNOF:
                    return "UNOF";
                case EdifactCharacterSet.UNOG:
                    return "UNOG";
                case EdifactCharacterSet.UNOH:
                    return "UNOH";
                case EdifactCharacterSet.UNOI:
                    return "UNOI";
                case EdifactCharacterSet.UNOJ:
                    return "UNOJ";
                case EdifactCharacterSet.UNOK:
                    return "UNOK";
                case EdifactCharacterSet.UNOX:
                    return "UNOX";
                case EdifactCharacterSet.UNOY:
                    return "UNOY";
                case EdifactCharacterSet.KECA:
                    return "KECA";
            }
            return null;
        }

        internal static EdifactCharacterSet? ParseEdifactCharacterSet(this string value)
        {
            switch( value )
            {
                case "NotSpecified":
                    return EdifactCharacterSet.NotSpecified;
                case "UNOB":
                    return EdifactCharacterSet.UNOB;
                case "UNOA":
                    return EdifactCharacterSet.UNOA;
                case "UNOC":
                    return EdifactCharacterSet.UNOC;
                case "UNOD":
                    return EdifactCharacterSet.UNOD;
                case "UNOE":
                    return EdifactCharacterSet.UNOE;
                case "UNOF":
                    return EdifactCharacterSet.UNOF;
                case "UNOG":
                    return EdifactCharacterSet.UNOG;
                case "UNOH":
                    return EdifactCharacterSet.UNOH;
                case "UNOI":
                    return EdifactCharacterSet.UNOI;
                case "UNOJ":
                    return EdifactCharacterSet.UNOJ;
                case "UNOK":
                    return EdifactCharacterSet.UNOK;
                case "UNOX":
                    return EdifactCharacterSet.UNOX;
                case "UNOY":
                    return EdifactCharacterSet.UNOY;
                case "KECA":
                    return EdifactCharacterSet.KECA;
            }
            return null;
        }
    }
}
