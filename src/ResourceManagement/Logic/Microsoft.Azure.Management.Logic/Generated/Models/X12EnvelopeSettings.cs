// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Logic.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    public partial class X12EnvelopeSettings
    {
        /// <summary>
        /// Initializes a new instance of the X12EnvelopeSettings class.
        /// </summary>
        public X12EnvelopeSettings() { }

        /// <summary>
        /// Initializes a new instance of the X12EnvelopeSettings class.
        /// </summary>
        public X12EnvelopeSettings(int? controlStandardsId = default(int?), bool? useControlStandardsIdAsRepetitionCharacter = default(bool?), string senderApplicationId = default(string), string receiverApplicationId = default(string), string controlVersionNumber = default(string), int? interchangeControlNumberLowerBound = default(int?), int? interchangeControlNumberUpperBound = default(int?), bool? rolloverInterchangeControlNumber = default(bool?), bool? enableDefaultGroupHeaders = default(bool?), string functionalGroupId = default(string), int? groupControlNumberLowerBound = default(int?), int? groupControlNumberUpperBound = default(int?), bool? rolloverGroupControlNumber = default(bool?), string groupHeaderAgencyCode = default(string), string groupHeaderVersion = default(string), int? transactionSetControlNumberLowerBound = default(int?), int? transactionSetControlNumberUpperBound = default(int?), bool? rolloverTransactionSetControlNumber = default(bool?), string transactionSetControlNumberPrefix = default(string), string transactionSetControlNumberSuffix = default(string), bool? overwriteExistingTransactionSetControlNumber = default(bool?), X12DateFormat? groupHeaderDateFormat = default(X12DateFormat?), X12TimeFormat? groupHeaderTimeFormat = default(X12TimeFormat?), UsageIndicator? usageIndicator = default(UsageIndicator?))
        {
            ControlStandardsId = controlStandardsId;
            UseControlStandardsIdAsRepetitionCharacter = useControlStandardsIdAsRepetitionCharacter;
            SenderApplicationId = senderApplicationId;
            ReceiverApplicationId = receiverApplicationId;
            ControlVersionNumber = controlVersionNumber;
            InterchangeControlNumberLowerBound = interchangeControlNumberLowerBound;
            InterchangeControlNumberUpperBound = interchangeControlNumberUpperBound;
            RolloverInterchangeControlNumber = rolloverInterchangeControlNumber;
            EnableDefaultGroupHeaders = enableDefaultGroupHeaders;
            FunctionalGroupId = functionalGroupId;
            GroupControlNumberLowerBound = groupControlNumberLowerBound;
            GroupControlNumberUpperBound = groupControlNumberUpperBound;
            RolloverGroupControlNumber = rolloverGroupControlNumber;
            GroupHeaderAgencyCode = groupHeaderAgencyCode;
            GroupHeaderVersion = groupHeaderVersion;
            TransactionSetControlNumberLowerBound = transactionSetControlNumberLowerBound;
            TransactionSetControlNumberUpperBound = transactionSetControlNumberUpperBound;
            RolloverTransactionSetControlNumber = rolloverTransactionSetControlNumber;
            TransactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
            TransactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
            OverwriteExistingTransactionSetControlNumber = overwriteExistingTransactionSetControlNumber;
            GroupHeaderDateFormat = groupHeaderDateFormat;
            GroupHeaderTimeFormat = groupHeaderTimeFormat;
            UsageIndicator = usageIndicator;
        }

        /// <summary>
        /// Gets or sets the controls standards id.
        /// </summary>
        [JsonProperty(PropertyName = "controlStandardsId")]
        public int? ControlStandardsId { get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to use control standards
        /// id as repetition character.
        /// </summary>
        [JsonProperty(PropertyName = "useControlStandardsIdAsRepetitionCharacter")]
        public bool? UseControlStandardsIdAsRepetitionCharacter { get; set; }

        /// <summary>
        /// Gets or sets the sender application id.
        /// </summary>
        [JsonProperty(PropertyName = "senderApplicationId")]
        public string SenderApplicationId { get; set; }

        /// <summary>
        /// Gets or sets the receiver application id.
        /// </summary>
        [JsonProperty(PropertyName = "receiverApplicationId")]
        public string ReceiverApplicationId { get; set; }

        /// <summary>
        /// Gets or sets the control version number.
        /// </summary>
        [JsonProperty(PropertyName = "controlVersionNumber")]
        public string ControlVersionNumber { get; set; }

        /// <summary>
        /// Gets or sets the interchange  control number lower bound.
        /// </summary>
        [JsonProperty(PropertyName = "interchangeControlNumberLowerBound")]
        public int? InterchangeControlNumberLowerBound { get; set; }

        /// <summary>
        /// Gets or sets the interchange  control number upper bound.
        /// </summary>
        [JsonProperty(PropertyName = "interchangeControlNumberUpperBound")]
        public int? InterchangeControlNumberUpperBound { get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to rollover interchange
        /// control number.
        /// </summary>
        [JsonProperty(PropertyName = "rolloverInterchangeControlNumber")]
        public bool? RolloverInterchangeControlNumber { get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to enable default group
        /// headers.
        /// </summary>
        [JsonProperty(PropertyName = "enableDefaultGroupHeaders")]
        public bool? EnableDefaultGroupHeaders { get; set; }

        /// <summary>
        /// Gets or sets the functional group id.
        /// </summary>
        [JsonProperty(PropertyName = "functionalGroupId")]
        public string FunctionalGroupId { get; set; }

        /// <summary>
        /// Gets or sets the group control number lower bound.
        /// </summary>
        [JsonProperty(PropertyName = "groupControlNumberLowerBound")]
        public int? GroupControlNumberLowerBound { get; set; }

        /// <summary>
        /// Gets or sets the group control number upper bound.
        /// </summary>
        [JsonProperty(PropertyName = "groupControlNumberUpperBound")]
        public int? GroupControlNumberUpperBound { get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to rollover group
        /// control number.
        /// </summary>
        [JsonProperty(PropertyName = "rolloverGroupControlNumber")]
        public bool? RolloverGroupControlNumber { get; set; }

        /// <summary>
        /// Gets or sets the group header agency code.
        /// </summary>
        [JsonProperty(PropertyName = "groupHeaderAgencyCode")]
        public string GroupHeaderAgencyCode { get; set; }

        /// <summary>
        /// Gets or sets the group header version.
        /// </summary>
        [JsonProperty(PropertyName = "groupHeaderVersion")]
        public string GroupHeaderVersion { get; set; }

        /// <summary>
        /// Gets or sets the transaction set control number lower bound.
        /// </summary>
        [JsonProperty(PropertyName = "transactionSetControlNumberLowerBound")]
        public int? TransactionSetControlNumberLowerBound { get; set; }

        /// <summary>
        /// Gets or sets the transaction set control number upper bound.
        /// </summary>
        [JsonProperty(PropertyName = "transactionSetControlNumberUpperBound")]
        public int? TransactionSetControlNumberUpperBound { get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to rollover transaction
        /// set control number.
        /// </summary>
        [JsonProperty(PropertyName = "rolloverTransactionSetControlNumber")]
        public bool? RolloverTransactionSetControlNumber { get; set; }

        /// <summary>
        /// Gets or sets the transaction set control number prefix.
        /// </summary>
        [JsonProperty(PropertyName = "transactionSetControlNumberPrefix")]
        public string TransactionSetControlNumberPrefix { get; set; }

        /// <summary>
        /// Gets or sets the transaction set control number suffix.
        /// </summary>
        [JsonProperty(PropertyName = "transactionSetControlNumberSuffix")]
        public string TransactionSetControlNumberSuffix { get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to overwrite existing
        /// transaction set control number.
        /// </summary>
        [JsonProperty(PropertyName = "overwriteExistingTransactionSetControlNumber")]
        public bool? OverwriteExistingTransactionSetControlNumber { get; set; }

        /// <summary>
        /// Gets or sets the group header date format. Possible values
        /// include: 'NotSpecified', 'CCYYMMDD', 'YYMMDD'
        /// </summary>
        [JsonProperty(PropertyName = "groupHeaderDateFormat")]
        public X12DateFormat? GroupHeaderDateFormat { get; set; }

        /// <summary>
        /// Gets or sets the group header time format. Possible values
        /// include: 'NotSpecified', 'HHMM', 'HHMMSS', 'HHMMSSdd', 'HHMMSSd'
        /// </summary>
        [JsonProperty(PropertyName = "groupHeaderTimeFormat")]
        public X12TimeFormat? GroupHeaderTimeFormat { get; set; }

        /// <summary>
        /// Gets or sets the usage indicator. Possible values include:
        /// 'NotSpecified', 'Test', 'Information', 'Production'
        /// </summary>
        [JsonProperty(PropertyName = "usageIndicator")]
        public UsageIndicator? UsageIndicator { get; set; }

    }
}
