// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Logic.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// The Edifact agreement protocol settings.
    /// </summary>
    public partial class EdifactProtocolSettings
    {
        /// <summary>
        /// Initializes a new instance of the EdifactProtocolSettings class.
        /// </summary>
        public EdifactProtocolSettings() { }

        /// <summary>
        /// Initializes a new instance of the EdifactProtocolSettings class.
        /// </summary>
        public EdifactProtocolSettings(EdifactValidationSettings validationSettings, EdifactFramingSettings framingSettings, EdifactEnvelopeSettings envelopeSettings, EdifactAcknowledgementSettings acknowledgementSettings, EdifactMessageFilter messageFilter, EdifactProcessingSettings processingSettings, IList<EdifactSchemaReference> schemaReferences, IList<EdifactEnvelopeOverride> envelopeOverrides = default(IList<EdifactEnvelopeOverride>), IList<EdifactMessageIdentifier> messageFilterList = default(IList<EdifactMessageIdentifier>), IList<EdifactValidationOverride> validationOverrides = default(IList<EdifactValidationOverride>), IList<EdifactDelimiterOverride> edifactDelimiterOverrides = default(IList<EdifactDelimiterOverride>))
        {
            ValidationSettings = validationSettings;
            FramingSettings = framingSettings;
            EnvelopeSettings = envelopeSettings;
            AcknowledgementSettings = acknowledgementSettings;
            MessageFilter = messageFilter;
            ProcessingSettings = processingSettings;
            EnvelopeOverrides = envelopeOverrides;
            MessageFilterList = messageFilterList;
            SchemaReferences = schemaReferences;
            ValidationOverrides = validationOverrides;
            EdifactDelimiterOverrides = edifactDelimiterOverrides;
        }

        /// <summary>
        /// Gets or sets the EDIFACT validation settings.
        /// </summary>
        [JsonProperty(PropertyName = "validationSettings")]
        public EdifactValidationSettings ValidationSettings { get; set; }

        /// <summary>
        /// Gets or sets the EDIFACT framing settings.
        /// </summary>
        [JsonProperty(PropertyName = "framingSettings")]
        public EdifactFramingSettings FramingSettings { get; set; }

        /// <summary>
        /// Gets or sets the EDIFACT envelope settings.
        /// </summary>
        [JsonProperty(PropertyName = "envelopeSettings")]
        public EdifactEnvelopeSettings EnvelopeSettings { get; set; }

        /// <summary>
        /// Gets or sets the EDIFACT acknowledgement settings.
        /// </summary>
        [JsonProperty(PropertyName = "acknowledgementSettings")]
        public EdifactAcknowledgementSettings AcknowledgementSettings { get; set; }

        /// <summary>
        /// Gets or sets the EDIFACT message filter.
        /// </summary>
        [JsonProperty(PropertyName = "messageFilter")]
        public EdifactMessageFilter MessageFilter { get; set; }

        /// <summary>
        /// Gets or sets the EDIFACT processing Settings.
        /// </summary>
        [JsonProperty(PropertyName = "processingSettings")]
        public EdifactProcessingSettings ProcessingSettings { get; set; }

        /// <summary>
        /// Gets or sets the EDIFACT envelope override settings.
        /// </summary>
        [JsonProperty(PropertyName = "envelopeOverrides")]
        public IList<EdifactEnvelopeOverride> EnvelopeOverrides { get; set; }

        /// <summary>
        /// Gets or sets the EDIFACT message filter list.
        /// </summary>
        [JsonProperty(PropertyName = "messageFilterList")]
        public IList<EdifactMessageIdentifier> MessageFilterList { get; set; }

        /// <summary>
        /// Gets or sets the EDIFACT schema references.
        /// </summary>
        [JsonProperty(PropertyName = "schemaReferences")]
        public IList<EdifactSchemaReference> SchemaReferences { get; set; }

        /// <summary>
        /// Gets or sets the EDIFACT validation override settings.
        /// </summary>
        [JsonProperty(PropertyName = "validationOverrides")]
        public IList<EdifactValidationOverride> ValidationOverrides { get; set; }

        /// <summary>
        /// Gets or sets the EDIFACT delimiter override settings.
        /// </summary>
        [JsonProperty(PropertyName = "edifactDelimiterOverrides")]
        public IList<EdifactDelimiterOverride> EdifactDelimiterOverrides { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ValidationSettings == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ValidationSettings");
            }
            if (FramingSettings == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FramingSettings");
            }
            if (EnvelopeSettings == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EnvelopeSettings");
            }
            if (AcknowledgementSettings == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AcknowledgementSettings");
            }
            if (MessageFilter == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MessageFilter");
            }
            if (ProcessingSettings == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ProcessingSettings");
            }
            if (SchemaReferences == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SchemaReferences");
            }
            if (this.ValidationSettings != null)
            {
                this.ValidationSettings.Validate();
            }
            if (this.FramingSettings != null)
            {
                this.FramingSettings.Validate();
            }
            if (this.EnvelopeSettings != null)
            {
                this.EnvelopeSettings.Validate();
            }
            if (this.AcknowledgementSettings != null)
            {
                this.AcknowledgementSettings.Validate();
            }
            if (this.MessageFilter != null)
            {
                this.MessageFilter.Validate();
            }
            if (this.ProcessingSettings != null)
            {
                this.ProcessingSettings.Validate();
            }
            if (this.MessageFilterList != null)
            {
                foreach (var element in this.MessageFilterList)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.SchemaReferences != null)
            {
                foreach (var element1 in this.SchemaReferences)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (this.ValidationOverrides != null)
            {
                foreach (var element2 in this.ValidationOverrides)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (this.EdifactDelimiterOverrides != null)
            {
                foreach (var element3 in this.EdifactDelimiterOverrides)
                {
                    if (element3 != null)
                    {
                        element3.Validate();
                    }
                }
            }
        }
    }
}
