// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Logic.Models
{
    using Azure;
    using Management;
    using Logic;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The Edifact agreement framing settings.
    /// </summary>
    public partial class EdifactFramingSettings
    {
        /// <summary>
        /// Initializes a new instance of the EdifactFramingSettings class.
        /// </summary>
        public EdifactFramingSettings() { }

        /// <summary>
        /// Initializes a new instance of the EdifactFramingSettings class.
        /// </summary>
        /// <param name="protocolVersion">The protocol version.</param>
        /// <param name="dataElementSeparator">The data element
        /// separator.</param>
        /// <param name="componentSeparator">The component separator.</param>
        /// <param name="segmentTerminator">The segment terminator.</param>
        /// <param name="releaseIndicator">The release indicator.</param>
        /// <param name="repetitionSeparator">The repetition separator.</param>
        /// <param name="characterSet">The EDIFACT frame setting characterSet.
        /// Possible values include: 'NotSpecified', 'UNOB', 'UNOA', 'UNOC',
        /// 'UNOD', 'UNOE', 'UNOF', 'UNOG', 'UNOH', 'UNOI', 'UNOJ', 'UNOK',
        /// 'UNOX', 'UNOY', 'KECA'</param>
        /// <param name="decimalPointIndicator">The EDIFACT frame setting
        /// decimal indicator. Possible values include: 'NotSpecified',
        /// 'Comma', 'Decimal'</param>
        /// <param name="segmentTerminatorSuffix">The EDIFACT frame setting
        /// segment terminator suffix. Possible values include: 'NotSpecified',
        /// 'None', 'CR', 'LF', 'CRLF'</param>
        /// <param name="serviceCodeListDirectoryVersion">The service code list
        /// directory version.</param>
        /// <param name="characterEncoding">The character encoding.</param>
        public EdifactFramingSettings(int protocolVersion, int dataElementSeparator, int componentSeparator, int segmentTerminator, int releaseIndicator, int repetitionSeparator, EdifactCharacterSet characterSet, EdifactDecimalIndicator decimalPointIndicator, SegmentTerminatorSuffix segmentTerminatorSuffix, string serviceCodeListDirectoryVersion = default(string), string characterEncoding = default(string))
        {
            ServiceCodeListDirectoryVersion = serviceCodeListDirectoryVersion;
            CharacterEncoding = characterEncoding;
            ProtocolVersion = protocolVersion;
            DataElementSeparator = dataElementSeparator;
            ComponentSeparator = componentSeparator;
            SegmentTerminator = segmentTerminator;
            ReleaseIndicator = releaseIndicator;
            RepetitionSeparator = repetitionSeparator;
            CharacterSet = characterSet;
            DecimalPointIndicator = decimalPointIndicator;
            SegmentTerminatorSuffix = segmentTerminatorSuffix;
        }

        /// <summary>
        /// Gets or sets the service code list directory version.
        /// </summary>
        [JsonProperty(PropertyName = "serviceCodeListDirectoryVersion")]
        public string ServiceCodeListDirectoryVersion { get; set; }

        /// <summary>
        /// Gets or sets the character encoding.
        /// </summary>
        [JsonProperty(PropertyName = "characterEncoding")]
        public string CharacterEncoding { get; set; }

        /// <summary>
        /// Gets or sets the protocol version.
        /// </summary>
        [JsonProperty(PropertyName = "protocolVersion")]
        public int ProtocolVersion { get; set; }

        /// <summary>
        /// Gets or sets the data element separator.
        /// </summary>
        [JsonProperty(PropertyName = "dataElementSeparator")]
        public int DataElementSeparator { get; set; }

        /// <summary>
        /// Gets or sets the component separator.
        /// </summary>
        [JsonProperty(PropertyName = "componentSeparator")]
        public int ComponentSeparator { get; set; }

        /// <summary>
        /// Gets or sets the segment terminator.
        /// </summary>
        [JsonProperty(PropertyName = "segmentTerminator")]
        public int SegmentTerminator { get; set; }

        /// <summary>
        /// Gets or sets the release indicator.
        /// </summary>
        [JsonProperty(PropertyName = "releaseIndicator")]
        public int ReleaseIndicator { get; set; }

        /// <summary>
        /// Gets or sets the repetition separator.
        /// </summary>
        [JsonProperty(PropertyName = "repetitionSeparator")]
        public int RepetitionSeparator { get; set; }

        /// <summary>
        /// Gets or sets the EDIFACT frame setting characterSet. Possible
        /// values include: 'NotSpecified', 'UNOB', 'UNOA', 'UNOC', 'UNOD',
        /// 'UNOE', 'UNOF', 'UNOG', 'UNOH', 'UNOI', 'UNOJ', 'UNOK', 'UNOX',
        /// 'UNOY', 'KECA'
        /// </summary>
        [JsonProperty(PropertyName = "characterSet")]
        public EdifactCharacterSet CharacterSet { get; set; }

        /// <summary>
        /// Gets or sets the EDIFACT frame setting decimal indicator. Possible
        /// values include: 'NotSpecified', 'Comma', 'Decimal'
        /// </summary>
        [JsonProperty(PropertyName = "decimalPointIndicator")]
        public EdifactDecimalIndicator DecimalPointIndicator { get; set; }

        /// <summary>
        /// Gets or sets the EDIFACT frame setting segment terminator suffix.
        /// Possible values include: 'NotSpecified', 'None', 'CR', 'LF', 'CRLF'
        /// </summary>
        [JsonProperty(PropertyName = "segmentTerminatorSuffix")]
        public SegmentTerminatorSuffix SegmentTerminatorSuffix { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}

