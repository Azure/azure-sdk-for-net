// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Logic.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// The Edifact validation override settings.
    /// </summary>
    public partial class EdifactValidationOverride
    {
        /// <summary>
        /// Initializes a new instance of the EdifactValidationOverride class.
        /// </summary>
        public EdifactValidationOverride() { }

        /// <summary>
        /// Initializes a new instance of the EdifactValidationOverride class.
        /// </summary>
        public EdifactValidationOverride(string messageId, bool enforceCharacterSet, bool validateEDITypes, bool validateXSDTypes, bool allowLeadingAndTrailingSpacesAndZeroes, TrailingSeparatorPolicy trailingSeparatorPolicy, bool trimLeadingAndTrailingSpacesAndZeroes)
        {
            MessageId = messageId;
            EnforceCharacterSet = enforceCharacterSet;
            ValidateEDITypes = validateEDITypes;
            ValidateXSDTypes = validateXSDTypes;
            AllowLeadingAndTrailingSpacesAndZeroes = allowLeadingAndTrailingSpacesAndZeroes;
            TrailingSeparatorPolicy = trailingSeparatorPolicy;
            TrimLeadingAndTrailingSpacesAndZeroes = trimLeadingAndTrailingSpacesAndZeroes;
        }

        /// <summary>
        /// Gets or sets the message id on which the validation settings has
        /// to be applied.
        /// </summary>
        [JsonProperty(PropertyName = "messageId")]
        public string MessageId { get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to validate character
        /// Set.
        /// </summary>
        [JsonProperty(PropertyName = "enforceCharacterSet")]
        public bool EnforceCharacterSet { get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to validate EDI types.
        /// </summary>
        [JsonProperty(PropertyName = "validateEDITypes")]
        public bool ValidateEDITypes { get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to validate XSD types.
        /// </summary>
        [JsonProperty(PropertyName = "validateXSDTypes")]
        public bool ValidateXSDTypes { get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to allow leading and
        /// trailing spaces and zeroes.
        /// </summary>
        [JsonProperty(PropertyName = "allowLeadingAndTrailingSpacesAndZeroes")]
        public bool AllowLeadingAndTrailingSpacesAndZeroes { get; set; }

        /// <summary>
        /// Gets or sets the trailing separator policy. Possible values
        /// include: 'NotSpecified', 'NotAllowed', 'Optional', 'Mandatory'
        /// </summary>
        [JsonProperty(PropertyName = "trailingSeparatorPolicy")]
        public TrailingSeparatorPolicy TrailingSeparatorPolicy { get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to trim leading and
        /// trailing spaces and zeroes.
        /// </summary>
        [JsonProperty(PropertyName = "trimLeadingAndTrailingSpacesAndZeroes")]
        public bool TrimLeadingAndTrailingSpacesAndZeroes { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (MessageId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MessageId");
            }
        }
    }
}
