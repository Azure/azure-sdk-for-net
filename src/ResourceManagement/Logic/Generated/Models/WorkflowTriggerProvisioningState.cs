// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.Logic.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.Logic;
    using Microsoft.Azure.Management.Logic.Fluent;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for WorkflowTriggerProvisioningState.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum WorkflowTriggerProvisioningState
    {
        [EnumMember(Value = "NotSpecified")]
        NotSpecified,
        [EnumMember(Value = "Accepted")]
        Accepted,
        [EnumMember(Value = "Running")]
        Running,
        [EnumMember(Value = "Ready")]
        Ready,
        [EnumMember(Value = "Creating")]
        Creating,
        [EnumMember(Value = "Created")]
        Created,
        [EnumMember(Value = "Deleting")]
        Deleting,
        [EnumMember(Value = "Deleted")]
        Deleted,
        [EnumMember(Value = "Canceled")]
        Canceled,
        [EnumMember(Value = "Failed")]
        Failed,
        [EnumMember(Value = "Succeeded")]
        Succeeded,
        [EnumMember(Value = "Moving")]
        Moving,
        [EnumMember(Value = "Updating")]
        Updating,
        [EnumMember(Value = "Registering")]
        Registering,
        [EnumMember(Value = "Registered")]
        Registered,
        [EnumMember(Value = "Unregistering")]
        Unregistering,
        [EnumMember(Value = "Unregistered")]
        Unregistered,
        [EnumMember(Value = "Completed")]
        Completed
    }
    internal static class WorkflowTriggerProvisioningStateEnumExtension
    {
        internal static string ToSerializedValue(this WorkflowTriggerProvisioningState? value)
        {
            return value == null ? null : ((WorkflowTriggerProvisioningState)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this WorkflowTriggerProvisioningState value)
        {
            switch( value )
            {
                case WorkflowTriggerProvisioningState.NotSpecified:
                    return "NotSpecified";
                case WorkflowTriggerProvisioningState.Accepted:
                    return "Accepted";
                case WorkflowTriggerProvisioningState.Running:
                    return "Running";
                case WorkflowTriggerProvisioningState.Ready:
                    return "Ready";
                case WorkflowTriggerProvisioningState.Creating:
                    return "Creating";
                case WorkflowTriggerProvisioningState.Created:
                    return "Created";
                case WorkflowTriggerProvisioningState.Deleting:
                    return "Deleting";
                case WorkflowTriggerProvisioningState.Deleted:
                    return "Deleted";
                case WorkflowTriggerProvisioningState.Canceled:
                    return "Canceled";
                case WorkflowTriggerProvisioningState.Failed:
                    return "Failed";
                case WorkflowTriggerProvisioningState.Succeeded:
                    return "Succeeded";
                case WorkflowTriggerProvisioningState.Moving:
                    return "Moving";
                case WorkflowTriggerProvisioningState.Updating:
                    return "Updating";
                case WorkflowTriggerProvisioningState.Registering:
                    return "Registering";
                case WorkflowTriggerProvisioningState.Registered:
                    return "Registered";
                case WorkflowTriggerProvisioningState.Unregistering:
                    return "Unregistering";
                case WorkflowTriggerProvisioningState.Unregistered:
                    return "Unregistered";
                case WorkflowTriggerProvisioningState.Completed:
                    return "Completed";
            }
            return null;
        }

        internal static WorkflowTriggerProvisioningState? ParseWorkflowTriggerProvisioningState(this string value)
        {
            switch( value )
            {
                case "NotSpecified":
                    return WorkflowTriggerProvisioningState.NotSpecified;
                case "Accepted":
                    return WorkflowTriggerProvisioningState.Accepted;
                case "Running":
                    return WorkflowTriggerProvisioningState.Running;
                case "Ready":
                    return WorkflowTriggerProvisioningState.Ready;
                case "Creating":
                    return WorkflowTriggerProvisioningState.Creating;
                case "Created":
                    return WorkflowTriggerProvisioningState.Created;
                case "Deleting":
                    return WorkflowTriggerProvisioningState.Deleting;
                case "Deleted":
                    return WorkflowTriggerProvisioningState.Deleted;
                case "Canceled":
                    return WorkflowTriggerProvisioningState.Canceled;
                case "Failed":
                    return WorkflowTriggerProvisioningState.Failed;
                case "Succeeded":
                    return WorkflowTriggerProvisioningState.Succeeded;
                case "Moving":
                    return WorkflowTriggerProvisioningState.Moving;
                case "Updating":
                    return WorkflowTriggerProvisioningState.Updating;
                case "Registering":
                    return WorkflowTriggerProvisioningState.Registering;
                case "Registered":
                    return WorkflowTriggerProvisioningState.Registered;
                case "Unregistering":
                    return WorkflowTriggerProvisioningState.Unregistering;
                case "Unregistered":
                    return WorkflowTriggerProvisioningState.Unregistered;
                case "Completed":
                    return WorkflowTriggerProvisioningState.Completed;
            }
            return null;
        }
    }
}
