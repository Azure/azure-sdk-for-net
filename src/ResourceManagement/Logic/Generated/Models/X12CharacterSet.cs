// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.Logic.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.Logic;
    using Microsoft.Azure.Management.Logic.Fluent;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for X12CharacterSet.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum X12CharacterSet
    {
        [EnumMember(Value = "NotSpecified")]
        NotSpecified,
        [EnumMember(Value = "Basic")]
        Basic,
        [EnumMember(Value = "Extended")]
        Extended,
        [EnumMember(Value = "UTF8")]
        UTF8
    }
    internal static class X12CharacterSetEnumExtension
    {
        internal static string ToSerializedValue(this X12CharacterSet? value)
        {
            return value == null ? null : ((X12CharacterSet)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this X12CharacterSet value)
        {
            switch( value )
            {
                case X12CharacterSet.NotSpecified:
                    return "NotSpecified";
                case X12CharacterSet.Basic:
                    return "Basic";
                case X12CharacterSet.Extended:
                    return "Extended";
                case X12CharacterSet.UTF8:
                    return "UTF8";
            }
            return null;
        }

        internal static X12CharacterSet? ParseX12CharacterSet(this string value)
        {
            switch( value )
            {
                case "NotSpecified":
                    return X12CharacterSet.NotSpecified;
                case "Basic":
                    return X12CharacterSet.Basic;
                case "Extended":
                    return X12CharacterSet.Extended;
                case "UTF8":
                    return X12CharacterSet.UTF8;
            }
            return null;
        }
    }
}
