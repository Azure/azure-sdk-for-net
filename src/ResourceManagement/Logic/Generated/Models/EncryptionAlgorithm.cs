// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.Logic.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.Logic;
    using Microsoft.Azure.Management.Logic.Fluent;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for EncryptionAlgorithm.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum EncryptionAlgorithm
    {
        [EnumMember(Value = "NotSpecified")]
        NotSpecified,
        [EnumMember(Value = "None")]
        None,
        [EnumMember(Value = "DES3")]
        DES3,
        [EnumMember(Value = "RC2")]
        RC2,
        [EnumMember(Value = "AES128")]
        AES128,
        [EnumMember(Value = "AES192")]
        AES192,
        [EnumMember(Value = "AES256")]
        AES256
    }
    internal static class EncryptionAlgorithmEnumExtension
    {
        internal static string ToSerializedValue(this EncryptionAlgorithm? value)
        {
            return value == null ? null : ((EncryptionAlgorithm)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this EncryptionAlgorithm value)
        {
            switch( value )
            {
                case EncryptionAlgorithm.NotSpecified:
                    return "NotSpecified";
                case EncryptionAlgorithm.None:
                    return "None";
                case EncryptionAlgorithm.DES3:
                    return "DES3";
                case EncryptionAlgorithm.RC2:
                    return "RC2";
                case EncryptionAlgorithm.AES128:
                    return "AES128";
                case EncryptionAlgorithm.AES192:
                    return "AES192";
                case EncryptionAlgorithm.AES256:
                    return "AES256";
            }
            return null;
        }

        internal static EncryptionAlgorithm? ParseEncryptionAlgorithm(this string value)
        {
            switch( value )
            {
                case "NotSpecified":
                    return EncryptionAlgorithm.NotSpecified;
                case "None":
                    return EncryptionAlgorithm.None;
                case "DES3":
                    return EncryptionAlgorithm.DES3;
                case "RC2":
                    return EncryptionAlgorithm.RC2;
                case "AES128":
                    return EncryptionAlgorithm.AES128;
                case "AES192":
                    return EncryptionAlgorithm.AES192;
                case "AES256":
                    return EncryptionAlgorithm.AES256;
            }
            return null;
        }
    }
}
