// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.Logic.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.Logic;
    using Microsoft.Azure.Management.Logic.Fluent;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The integration account agreement filter for odata query.
    /// </summary>
    public partial class IntegrationAccountAgreementFilterInner
    {
        /// <summary>
        /// Initializes a new instance of the
        /// IntegrationAccountAgreementFilterInner class.
        /// </summary>
        public IntegrationAccountAgreementFilterInner()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// IntegrationAccountAgreementFilterInner class.
        /// </summary>
        /// <param name="agreementType">The agreement type of integration
        /// account agreement. Possible values include: 'NotSpecified', 'AS2',
        /// 'X12', 'Edifact'</param>
        public IntegrationAccountAgreementFilterInner(AgreementType agreementType)
        {
            AgreementType = agreementType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the agreement type of integration account agreement.
        /// Possible values include: 'NotSpecified', 'AS2', 'X12', 'Edifact'
        /// </summary>
        [JsonProperty(PropertyName = "agreementType")]
        public AgreementType AgreementType { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
