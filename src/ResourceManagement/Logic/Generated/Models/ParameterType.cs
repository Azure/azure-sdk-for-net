// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.Logic.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.Logic;
    using Microsoft.Azure.Management.Logic.Fluent;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for ParameterType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ParameterType
    {
        [EnumMember(Value = "NotSpecified")]
        NotSpecified,
        [EnumMember(Value = "String")]
        String,
        [EnumMember(Value = "SecureString")]
        SecureString,
        [EnumMember(Value = "Int")]
        Int,
        [EnumMember(Value = "Float")]
        Float,
        [EnumMember(Value = "Bool")]
        Bool,
        [EnumMember(Value = "Array")]
        Array,
        [EnumMember(Value = "Object")]
        Object,
        [EnumMember(Value = "SecureObject")]
        SecureObject
    }
    internal static class ParameterTypeEnumExtension
    {
        internal static string ToSerializedValue(this ParameterType? value)
        {
            return value == null ? null : ((ParameterType)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this ParameterType value)
        {
            switch( value )
            {
                case ParameterType.NotSpecified:
                    return "NotSpecified";
                case ParameterType.String:
                    return "String";
                case ParameterType.SecureString:
                    return "SecureString";
                case ParameterType.Int:
                    return "Int";
                case ParameterType.Float:
                    return "Float";
                case ParameterType.Bool:
                    return "Bool";
                case ParameterType.Array:
                    return "Array";
                case ParameterType.Object:
                    return "Object";
                case ParameterType.SecureObject:
                    return "SecureObject";
            }
            return null;
        }

        internal static ParameterType? ParseParameterType(this string value)
        {
            switch( value )
            {
                case "NotSpecified":
                    return ParameterType.NotSpecified;
                case "String":
                    return ParameterType.String;
                case "SecureString":
                    return ParameterType.SecureString;
                case "Int":
                    return ParameterType.Int;
                case "Float":
                    return ParameterType.Float;
                case "Bool":
                    return ParameterType.Bool;
                case "Array":
                    return ParameterType.Array;
                case "Object":
                    return ParameterType.Object;
                case "SecureObject":
                    return ParameterType.SecureObject;
            }
            return null;
        }
    }
}
