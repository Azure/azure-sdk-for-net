// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.Azure.Management.StreamAnalytics;
using Microsoft.Azure.Management.StreamAnalytics.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.StreamAnalytics
{
    /// <summary>
    /// Operations for managing the function(s) of the stream analytics job.
    /// </summary>
    internal partial class FunctionOperations : IServiceOperations<StreamAnalyticsManagementClient>, IFunctionOperations
    {
        /// <summary>
        /// Initializes a new instance of the FunctionOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal FunctionOperations(StreamAnalyticsManagementClient client)
        {
            this._client = client;
        }
        
        private StreamAnalyticsManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.StreamAnalytics.StreamAnalyticsManagementClient.
        /// </summary>
        public StreamAnalyticsManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Test the connectivity of a function for a stream analytics job.
        /// Asynchronous call.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='functionName'>
        /// Required. The name of the function for the stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The test result of the input or output data source.
        /// </returns>
        public async Task<ResourceTestConnectionResponse> BeginTestConnectionAsync(string resourceGroupName, string jobName, string functionName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (functionName == null)
            {
                throw new ArgumentNullException("functionName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("functionName", functionName);
                TracingAdapter.Enter(invocationId, this, "BeginTestConnectionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.StreamAnalytics/streamingjobs/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/functions/";
            url = url + Uri.EscapeDataString(functionName);
            url = url + "/test";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.BadRequest && statusCode != HttpStatusCode.NotFound)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ResourceTestConnectionResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.BadRequest || statusCode == HttpStatusCode.NotFound)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ResourceTestConnectionResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken statusValue = responseDoc["status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                string statusInstance = ((string)statusValue);
                                result.ResourceTestStatus = statusInstance;
                            }
                            
                            JToken errorValue = responseDoc["error"];
                            if (errorValue != null && errorValue.Type != JTokenType.Null)
                            {
                                ErrorResponse errorInstance = new ErrorResponse();
                                result.Error = errorInstance;
                                
                                JToken codeValue = errorValue["code"];
                                if (codeValue != null && codeValue.Type != JTokenType.Null)
                                {
                                    string codeInstance = ((string)codeValue);
                                    errorInstance.Code = codeInstance;
                                }
                                
                                JToken messageValue = errorValue["message"];
                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                {
                                    string messageInstance = ((string)messageValue);
                                    errorInstance.Message = messageInstance;
                                }
                                
                                JToken detailsValue = errorValue["details"];
                                if (detailsValue != null && detailsValue.Type != JTokenType.Null)
                                {
                                    ErrorDetailsResponse detailsInstance = new ErrorDetailsResponse();
                                    errorInstance.Details = detailsInstance;
                                    
                                    JToken codeValue2 = detailsValue["code"];
                                    if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                    {
                                        string codeInstance2 = ((string)codeValue2);
                                        detailsInstance.Code = codeInstance2;
                                    }
                                    
                                    JToken messageValue2 = detailsValue["message"];
                                    if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                    {
                                        string messageInstance2 = ((string)messageValue2);
                                        detailsInstance.Message = messageInstance2;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NotFound)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.BadRequest)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create or update a function for a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a function
        /// for a stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the function create or update operation.
        /// </returns>
        public async Task<FunctionCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string jobName, FunctionCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Function != null)
            {
                if (parameters.Function.Name == null)
                {
                    throw new ArgumentNullException("parameters.Function.Name");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.StreamAnalytics/streamingjobs/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/functions/";
            if (parameters.Function != null && parameters.Function.Name != null)
            {
                url = url + Uri.EscapeDataString(parameters.Function.Name);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject functionCreateOrUpdateParametersValue = new JObject();
                requestDoc = functionCreateOrUpdateParametersValue;
                
                if (parameters.Function != null)
                {
                    functionCreateOrUpdateParametersValue["name"] = parameters.Function.Name;
                    
                    if (parameters.Function.Properties != null)
                    {
                        JObject propertiesValue = new JObject();
                        functionCreateOrUpdateParametersValue["properties"] = propertiesValue;
                        if (parameters.Function.Properties is ScalarFunctionProperties)
                        {
                            propertiesValue["type"] = "Scalar";
                            ScalarFunctionProperties derived = ((ScalarFunctionProperties)parameters.Function.Properties);
                            
                            if (derived.Properties != null)
                            {
                                JObject propertiesValue2 = new JObject();
                                propertiesValue["properties"] = propertiesValue2;
                                
                                if (derived.Properties.Inputs != null)
                                {
                                    JArray inputsArray = new JArray();
                                    foreach (FunctionInput inputsItem in derived.Properties.Inputs)
                                    {
                                        JObject functionInputValue = new JObject();
                                        inputsArray.Add(functionInputValue);
                                        
                                        if (inputsItem.DataType != null)
                                        {
                                            functionInputValue["dataType"] = inputsItem.DataType;
                                        }
                                        
                                        if (inputsItem.IsConfigurationParameter != null)
                                        {
                                            functionInputValue["isConfigurationParameter"] = inputsItem.IsConfigurationParameter.Value;
                                        }
                                    }
                                    propertiesValue2["inputs"] = inputsArray;
                                }
                                
                                if (derived.Properties.Output != null)
                                {
                                    JObject outputValue = new JObject();
                                    propertiesValue2["output"] = outputValue;
                                    
                                    if (derived.Properties.Output.DataType != null)
                                    {
                                        outputValue["dataType"] = derived.Properties.Output.DataType;
                                    }
                                }
                                
                                if (derived.Properties.Binding != null)
                                {
                                    JObject bindingValue = new JObject();
                                    propertiesValue2["binding"] = bindingValue;
                                    if (derived.Properties.Binding is AzureMachineLearningWebServiceFunctionBinding)
                                    {
                                        bindingValue["type"] = "Microsoft.MachineLearning/WebService";
                                        AzureMachineLearningWebServiceFunctionBinding derived2 = ((AzureMachineLearningWebServiceFunctionBinding)derived.Properties.Binding);
                                        
                                        if (derived2.Properties != null)
                                        {
                                            JObject propertiesValue3 = new JObject();
                                            bindingValue["properties"] = propertiesValue3;
                                            
                                            if (derived2.Properties.Endpoint != null)
                                            {
                                                propertiesValue3["endpoint"] = derived2.Properties.Endpoint;
                                            }
                                            
                                            if (derived2.Properties.ApiKey != null)
                                            {
                                                propertiesValue3["apiKey"] = derived2.Properties.ApiKey;
                                            }
                                            
                                            if (derived2.Properties.Inputs != null)
                                            {
                                                JObject inputsValue = new JObject();
                                                propertiesValue3["inputs"] = inputsValue;
                                                
                                                inputsValue["name"] = derived2.Properties.Inputs.Name;
                                                
                                                if (derived2.Properties.Inputs.ColumnNames != null)
                                                {
                                                    JArray columnNamesArray = new JArray();
                                                    foreach (AzureMachineLearningWebServiceInputColumn columnNamesItem in derived2.Properties.Inputs.ColumnNames)
                                                    {
                                                        JObject azureMachineLearningWebServiceInputColumnValue = new JObject();
                                                        columnNamesArray.Add(azureMachineLearningWebServiceInputColumnValue);
                                                        
                                                        azureMachineLearningWebServiceInputColumnValue["name"] = columnNamesItem.Name;
                                                        
                                                        if (columnNamesItem.DataType != null)
                                                        {
                                                            azureMachineLearningWebServiceInputColumnValue["dataType"] = columnNamesItem.DataType;
                                                        }
                                                        
                                                        if (columnNamesItem.MapTo != null)
                                                        {
                                                            azureMachineLearningWebServiceInputColumnValue["mapTo"] = columnNamesItem.MapTo.Value;
                                                        }
                                                    }
                                                    inputsValue["columnNames"] = columnNamesArray;
                                                }
                                            }
                                            
                                            if (derived2.Properties.Outputs != null)
                                            {
                                                JArray outputsArray = new JArray();
                                                foreach (AzureMachineLearningWebServiceOutputColumn outputsItem in derived2.Properties.Outputs)
                                                {
                                                    JObject azureMachineLearningWebServiceOutputColumnValue = new JObject();
                                                    outputsArray.Add(azureMachineLearningWebServiceOutputColumnValue);
                                                    
                                                    azureMachineLearningWebServiceOutputColumnValue["name"] = outputsItem.Name;
                                                    
                                                    if (outputsItem.DataType != null)
                                                    {
                                                        azureMachineLearningWebServiceOutputColumnValue["dataType"] = outputsItem.DataType;
                                                    }
                                                }
                                                propertiesValue3["outputs"] = outputsArray;
                                            }
                                            
                                            if (derived2.Properties.BatchSize != null)
                                            {
                                                propertiesValue3["batchSize"] = derived2.Properties.BatchSize.Value;
                                            }
                                        }
                                        
                                        if (derived2.Type != null)
                                        {
                                            bindingValue["type"] = derived2.Type;
                                        }
                                    }
                                    if (derived.Properties.Binding is JavaScriptFunctionBinding)
                                    {
                                        bindingValue["type"] = "Microsoft.StreamAnalytics/JavascriptUdf";
                                        JavaScriptFunctionBinding derived3 = ((JavaScriptFunctionBinding)derived.Properties.Binding);
                                        
                                        if (derived3.Properties != null)
                                        {
                                            JObject propertiesValue4 = new JObject();
                                            bindingValue["properties"] = propertiesValue4;
                                            
                                            if (derived3.Properties.Script != null)
                                            {
                                                propertiesValue4["script"] = derived3.Properties.Script;
                                            }
                                        }
                                        
                                        if (derived3.Type != null)
                                        {
                                            bindingValue["type"] = derived3.Type;
                                        }
                                    }
                                }
                            }
                            
                            if (derived.Etag != null)
                            {
                                propertiesValue["etag"] = derived.Etag;
                            }
                            
                            if (derived.Type != null)
                            {
                                propertiesValue["type"] = derived.Type;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FunctionCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FunctionCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Function functionInstance = new Function();
                            result.Function = functionInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                functionInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue5 = responseDoc["properties"];
                            if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue5["type"]);
                                if (typeName == "Scalar")
                                {
                                    ScalarFunctionProperties scalarFunctionPropertiesInstance = new ScalarFunctionProperties();
                                    
                                    JToken propertiesValue6 = propertiesValue5["properties"];
                                    if (propertiesValue6 != null && propertiesValue6.Type != JTokenType.Null)
                                    {
                                        ScalarFunctionConfiguration propertiesInstance = new ScalarFunctionConfiguration();
                                        scalarFunctionPropertiesInstance.Properties = propertiesInstance;
                                        
                                        JToken inputsArray2 = propertiesValue6["inputs"];
                                        if (inputsArray2 != null && inputsArray2.Type != JTokenType.Null)
                                        {
                                            propertiesInstance.Inputs = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.FunctionInput>();
                                            foreach (JToken inputsValue2 in ((JArray)inputsArray2))
                                            {
                                                FunctionInput functionInputInstance = new FunctionInput();
                                                propertiesInstance.Inputs.Add(functionInputInstance);
                                                
                                                JToken dataTypeValue = inputsValue2["dataType"];
                                                if (dataTypeValue != null && dataTypeValue.Type != JTokenType.Null)
                                                {
                                                    string dataTypeInstance = ((string)dataTypeValue);
                                                    functionInputInstance.DataType = dataTypeInstance;
                                                }
                                                
                                                JToken isConfigurationParameterValue = inputsValue2["isConfigurationParameter"];
                                                if (isConfigurationParameterValue != null && isConfigurationParameterValue.Type != JTokenType.Null)
                                                {
                                                    bool isConfigurationParameterInstance = ((bool)isConfigurationParameterValue);
                                                    functionInputInstance.IsConfigurationParameter = isConfigurationParameterInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken outputValue2 = propertiesValue6["output"];
                                        if (outputValue2 != null && outputValue2.Type != JTokenType.Null)
                                        {
                                            FunctionOutput outputInstance = new FunctionOutput();
                                            propertiesInstance.Output = outputInstance;
                                            
                                            JToken dataTypeValue2 = outputValue2["dataType"];
                                            if (dataTypeValue2 != null && dataTypeValue2.Type != JTokenType.Null)
                                            {
                                                string dataTypeInstance2 = ((string)dataTypeValue2);
                                                outputInstance.DataType = dataTypeInstance2;
                                            }
                                        }
                                        
                                        JToken bindingValue2 = propertiesValue6["binding"];
                                        if (bindingValue2 != null && bindingValue2.Type != JTokenType.Null)
                                        {
                                            string typeName2 = ((string)bindingValue2["type"]);
                                            if (typeName2 == "Microsoft.MachineLearning/WebService")
                                            {
                                                AzureMachineLearningWebServiceFunctionBinding azureMachineLearningWebServiceFunctionBindingInstance = new AzureMachineLearningWebServiceFunctionBinding();
                                                
                                                JToken propertiesValue7 = bindingValue2["properties"];
                                                if (propertiesValue7 != null && propertiesValue7.Type != JTokenType.Null)
                                                {
                                                    AzureMachineLearningWebServiceFunctionBindingProperties propertiesInstance2 = new AzureMachineLearningWebServiceFunctionBindingProperties();
                                                    azureMachineLearningWebServiceFunctionBindingInstance.Properties = propertiesInstance2;
                                                    
                                                    JToken endpointValue = propertiesValue7["endpoint"];
                                                    if (endpointValue != null && endpointValue.Type != JTokenType.Null)
                                                    {
                                                        string endpointInstance = ((string)endpointValue);
                                                        propertiesInstance2.Endpoint = endpointInstance;
                                                    }
                                                    
                                                    JToken apiKeyValue = propertiesValue7["apiKey"];
                                                    if (apiKeyValue != null && apiKeyValue.Type != JTokenType.Null)
                                                    {
                                                        string apiKeyInstance = ((string)apiKeyValue);
                                                        propertiesInstance2.ApiKey = apiKeyInstance;
                                                    }
                                                    
                                                    JToken inputsValue3 = propertiesValue7["inputs"];
                                                    if (inputsValue3 != null && inputsValue3.Type != JTokenType.Null)
                                                    {
                                                        AzureMachineLearningWebServiceInputs inputsInstance = new AzureMachineLearningWebServiceInputs();
                                                        propertiesInstance2.Inputs = inputsInstance;
                                                        
                                                        JToken nameValue2 = inputsValue3["name"];
                                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance2 = ((string)nameValue2);
                                                            inputsInstance.Name = nameInstance2;
                                                        }
                                                        
                                                        JToken columnNamesArray2 = inputsValue3["columnNames"];
                                                        if (columnNamesArray2 != null && columnNamesArray2.Type != JTokenType.Null)
                                                        {
                                                            inputsInstance.ColumnNames = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.AzureMachineLearningWebServiceInputColumn>();
                                                            foreach (JToken columnNamesValue in ((JArray)columnNamesArray2))
                                                            {
                                                                AzureMachineLearningWebServiceInputColumn azureMachineLearningWebServiceInputColumnInstance = new AzureMachineLearningWebServiceInputColumn();
                                                                inputsInstance.ColumnNames.Add(azureMachineLearningWebServiceInputColumnInstance);
                                                                
                                                                JToken nameValue3 = columnNamesValue["name"];
                                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                                {
                                                                    string nameInstance3 = ((string)nameValue3);
                                                                    azureMachineLearningWebServiceInputColumnInstance.Name = nameInstance3;
                                                                }
                                                                
                                                                JToken dataTypeValue3 = columnNamesValue["dataType"];
                                                                if (dataTypeValue3 != null && dataTypeValue3.Type != JTokenType.Null)
                                                                {
                                                                    string dataTypeInstance3 = ((string)dataTypeValue3);
                                                                    azureMachineLearningWebServiceInputColumnInstance.DataType = dataTypeInstance3;
                                                                }
                                                                
                                                                JToken mapToValue = columnNamesValue["mapTo"];
                                                                if (mapToValue != null && mapToValue.Type != JTokenType.Null)
                                                                {
                                                                    int mapToInstance = ((int)mapToValue);
                                                                    azureMachineLearningWebServiceInputColumnInstance.MapTo = mapToInstance;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken outputsArray2 = propertiesValue7["outputs"];
                                                    if (outputsArray2 != null && outputsArray2.Type != JTokenType.Null)
                                                    {
                                                        propertiesInstance2.Outputs = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.AzureMachineLearningWebServiceOutputColumn>();
                                                        foreach (JToken outputsValue in ((JArray)outputsArray2))
                                                        {
                                                            AzureMachineLearningWebServiceOutputColumn azureMachineLearningWebServiceOutputColumnInstance = new AzureMachineLearningWebServiceOutputColumn();
                                                            propertiesInstance2.Outputs.Add(azureMachineLearningWebServiceOutputColumnInstance);
                                                            
                                                            JToken nameValue4 = outputsValue["name"];
                                                            if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance4 = ((string)nameValue4);
                                                                azureMachineLearningWebServiceOutputColumnInstance.Name = nameInstance4;
                                                            }
                                                            
                                                            JToken dataTypeValue4 = outputsValue["dataType"];
                                                            if (dataTypeValue4 != null && dataTypeValue4.Type != JTokenType.Null)
                                                            {
                                                                string dataTypeInstance4 = ((string)dataTypeValue4);
                                                                azureMachineLearningWebServiceOutputColumnInstance.DataType = dataTypeInstance4;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken batchSizeValue = propertiesValue7["batchSize"];
                                                    if (batchSizeValue != null && batchSizeValue.Type != JTokenType.Null)
                                                    {
                                                        int batchSizeInstance = ((int)batchSizeValue);
                                                        propertiesInstance2.BatchSize = batchSizeInstance;
                                                    }
                                                }
                                                
                                                JToken typeValue = bindingValue2["type"];
                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                {
                                                    string typeInstance = ((string)typeValue);
                                                    azureMachineLearningWebServiceFunctionBindingInstance.Type = typeInstance;
                                                }
                                                propertiesInstance.Binding = azureMachineLearningWebServiceFunctionBindingInstance;
                                            }
                                            if (typeName2 == "Microsoft.StreamAnalytics/JavascriptUdf")
                                            {
                                                JavaScriptFunctionBinding javaScriptFunctionBindingInstance = new JavaScriptFunctionBinding();
                                                
                                                JToken propertiesValue8 = bindingValue2["properties"];
                                                if (propertiesValue8 != null && propertiesValue8.Type != JTokenType.Null)
                                                {
                                                    JavaScriptFunctionBindingProperties propertiesInstance3 = new JavaScriptFunctionBindingProperties();
                                                    javaScriptFunctionBindingInstance.Properties = propertiesInstance3;
                                                    
                                                    JToken scriptValue = propertiesValue8["script"];
                                                    if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                                    {
                                                        string scriptInstance = ((string)scriptValue);
                                                        propertiesInstance3.Script = scriptInstance;
                                                    }
                                                }
                                                
                                                JToken typeValue2 = bindingValue2["type"];
                                                if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                {
                                                    string typeInstance2 = ((string)typeValue2);
                                                    javaScriptFunctionBindingInstance.Type = typeInstance2;
                                                }
                                                propertiesInstance.Binding = javaScriptFunctionBindingInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken etagValue = propertiesValue5["etag"];
                                    if (etagValue != null && etagValue.Type != JTokenType.Null)
                                    {
                                        string etagInstance = ((string)etagValue);
                                        scalarFunctionPropertiesInstance.Etag = etagInstance;
                                    }
                                    
                                    JToken typeValue3 = propertiesValue5["type"];
                                    if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                    {
                                        string typeInstance3 = ((string)typeValue3);
                                        scalarFunctionPropertiesInstance.Type = typeInstance3;
                                    }
                                    functionInstance.Properties = scalarFunctionPropertiesInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                    }
                    if (httpResponse.Headers.Contains("ETag"))
                    {
                        result.Function.Properties.Etag = httpResponse.Headers.GetValues("ETag").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create or update a function for a stream analytics job. The raw
        /// json content will be used.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='functionName'>
        /// Required. The name of the function for the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a function
        /// for a stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the function create or update operation.
        /// </returns>
        public async Task<FunctionCreateOrUpdateResponse> CreateOrUpdateWithRawJsonContentAsync(string resourceGroupName, string jobName, string functionName, FunctionCreateOrUpdateWithRawJsonContentParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (functionName == null)
            {
                throw new ArgumentNullException("functionName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Content == null)
            {
                throw new ArgumentNullException("parameters.Content");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("functionName", functionName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateWithRawJsonContentAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.StreamAnalytics/streamingjobs/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/functions/";
            url = url + Uri.EscapeDataString(functionName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = parameters.Content;
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FunctionCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FunctionCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Function functionInstance = new Function();
                            result.Function = functionInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                functionInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue["type"]);
                                if (typeName == "Scalar")
                                {
                                    ScalarFunctionProperties scalarFunctionPropertiesInstance = new ScalarFunctionProperties();
                                    
                                    JToken propertiesValue2 = propertiesValue["properties"];
                                    if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                    {
                                        ScalarFunctionConfiguration propertiesInstance = new ScalarFunctionConfiguration();
                                        scalarFunctionPropertiesInstance.Properties = propertiesInstance;
                                        
                                        JToken inputsArray = propertiesValue2["inputs"];
                                        if (inputsArray != null && inputsArray.Type != JTokenType.Null)
                                        {
                                            propertiesInstance.Inputs = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.FunctionInput>();
                                            foreach (JToken inputsValue in ((JArray)inputsArray))
                                            {
                                                FunctionInput functionInputInstance = new FunctionInput();
                                                propertiesInstance.Inputs.Add(functionInputInstance);
                                                
                                                JToken dataTypeValue = inputsValue["dataType"];
                                                if (dataTypeValue != null && dataTypeValue.Type != JTokenType.Null)
                                                {
                                                    string dataTypeInstance = ((string)dataTypeValue);
                                                    functionInputInstance.DataType = dataTypeInstance;
                                                }
                                                
                                                JToken isConfigurationParameterValue = inputsValue["isConfigurationParameter"];
                                                if (isConfigurationParameterValue != null && isConfigurationParameterValue.Type != JTokenType.Null)
                                                {
                                                    bool isConfigurationParameterInstance = ((bool)isConfigurationParameterValue);
                                                    functionInputInstance.IsConfigurationParameter = isConfigurationParameterInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken outputValue = propertiesValue2["output"];
                                        if (outputValue != null && outputValue.Type != JTokenType.Null)
                                        {
                                            FunctionOutput outputInstance = new FunctionOutput();
                                            propertiesInstance.Output = outputInstance;
                                            
                                            JToken dataTypeValue2 = outputValue["dataType"];
                                            if (dataTypeValue2 != null && dataTypeValue2.Type != JTokenType.Null)
                                            {
                                                string dataTypeInstance2 = ((string)dataTypeValue2);
                                                outputInstance.DataType = dataTypeInstance2;
                                            }
                                        }
                                        
                                        JToken bindingValue = propertiesValue2["binding"];
                                        if (bindingValue != null && bindingValue.Type != JTokenType.Null)
                                        {
                                            string typeName2 = ((string)bindingValue["type"]);
                                            if (typeName2 == "Microsoft.MachineLearning/WebService")
                                            {
                                                AzureMachineLearningWebServiceFunctionBinding azureMachineLearningWebServiceFunctionBindingInstance = new AzureMachineLearningWebServiceFunctionBinding();
                                                
                                                JToken propertiesValue3 = bindingValue["properties"];
                                                if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                                {
                                                    AzureMachineLearningWebServiceFunctionBindingProperties propertiesInstance2 = new AzureMachineLearningWebServiceFunctionBindingProperties();
                                                    azureMachineLearningWebServiceFunctionBindingInstance.Properties = propertiesInstance2;
                                                    
                                                    JToken endpointValue = propertiesValue3["endpoint"];
                                                    if (endpointValue != null && endpointValue.Type != JTokenType.Null)
                                                    {
                                                        string endpointInstance = ((string)endpointValue);
                                                        propertiesInstance2.Endpoint = endpointInstance;
                                                    }
                                                    
                                                    JToken apiKeyValue = propertiesValue3["apiKey"];
                                                    if (apiKeyValue != null && apiKeyValue.Type != JTokenType.Null)
                                                    {
                                                        string apiKeyInstance = ((string)apiKeyValue);
                                                        propertiesInstance2.ApiKey = apiKeyInstance;
                                                    }
                                                    
                                                    JToken inputsValue2 = propertiesValue3["inputs"];
                                                    if (inputsValue2 != null && inputsValue2.Type != JTokenType.Null)
                                                    {
                                                        AzureMachineLearningWebServiceInputs inputsInstance = new AzureMachineLearningWebServiceInputs();
                                                        propertiesInstance2.Inputs = inputsInstance;
                                                        
                                                        JToken nameValue2 = inputsValue2["name"];
                                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance2 = ((string)nameValue2);
                                                            inputsInstance.Name = nameInstance2;
                                                        }
                                                        
                                                        JToken columnNamesArray = inputsValue2["columnNames"];
                                                        if (columnNamesArray != null && columnNamesArray.Type != JTokenType.Null)
                                                        {
                                                            inputsInstance.ColumnNames = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.AzureMachineLearningWebServiceInputColumn>();
                                                            foreach (JToken columnNamesValue in ((JArray)columnNamesArray))
                                                            {
                                                                AzureMachineLearningWebServiceInputColumn azureMachineLearningWebServiceInputColumnInstance = new AzureMachineLearningWebServiceInputColumn();
                                                                inputsInstance.ColumnNames.Add(azureMachineLearningWebServiceInputColumnInstance);
                                                                
                                                                JToken nameValue3 = columnNamesValue["name"];
                                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                                {
                                                                    string nameInstance3 = ((string)nameValue3);
                                                                    azureMachineLearningWebServiceInputColumnInstance.Name = nameInstance3;
                                                                }
                                                                
                                                                JToken dataTypeValue3 = columnNamesValue["dataType"];
                                                                if (dataTypeValue3 != null && dataTypeValue3.Type != JTokenType.Null)
                                                                {
                                                                    string dataTypeInstance3 = ((string)dataTypeValue3);
                                                                    azureMachineLearningWebServiceInputColumnInstance.DataType = dataTypeInstance3;
                                                                }
                                                                
                                                                JToken mapToValue = columnNamesValue["mapTo"];
                                                                if (mapToValue != null && mapToValue.Type != JTokenType.Null)
                                                                {
                                                                    int mapToInstance = ((int)mapToValue);
                                                                    azureMachineLearningWebServiceInputColumnInstance.MapTo = mapToInstance;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken outputsArray = propertiesValue3["outputs"];
                                                    if (outputsArray != null && outputsArray.Type != JTokenType.Null)
                                                    {
                                                        propertiesInstance2.Outputs = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.AzureMachineLearningWebServiceOutputColumn>();
                                                        foreach (JToken outputsValue in ((JArray)outputsArray))
                                                        {
                                                            AzureMachineLearningWebServiceOutputColumn azureMachineLearningWebServiceOutputColumnInstance = new AzureMachineLearningWebServiceOutputColumn();
                                                            propertiesInstance2.Outputs.Add(azureMachineLearningWebServiceOutputColumnInstance);
                                                            
                                                            JToken nameValue4 = outputsValue["name"];
                                                            if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance4 = ((string)nameValue4);
                                                                azureMachineLearningWebServiceOutputColumnInstance.Name = nameInstance4;
                                                            }
                                                            
                                                            JToken dataTypeValue4 = outputsValue["dataType"];
                                                            if (dataTypeValue4 != null && dataTypeValue4.Type != JTokenType.Null)
                                                            {
                                                                string dataTypeInstance4 = ((string)dataTypeValue4);
                                                                azureMachineLearningWebServiceOutputColumnInstance.DataType = dataTypeInstance4;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken batchSizeValue = propertiesValue3["batchSize"];
                                                    if (batchSizeValue != null && batchSizeValue.Type != JTokenType.Null)
                                                    {
                                                        int batchSizeInstance = ((int)batchSizeValue);
                                                        propertiesInstance2.BatchSize = batchSizeInstance;
                                                    }
                                                }
                                                
                                                JToken typeValue = bindingValue["type"];
                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                {
                                                    string typeInstance = ((string)typeValue);
                                                    azureMachineLearningWebServiceFunctionBindingInstance.Type = typeInstance;
                                                }
                                                propertiesInstance.Binding = azureMachineLearningWebServiceFunctionBindingInstance;
                                            }
                                            if (typeName2 == "Microsoft.StreamAnalytics/JavascriptUdf")
                                            {
                                                JavaScriptFunctionBinding javaScriptFunctionBindingInstance = new JavaScriptFunctionBinding();
                                                
                                                JToken propertiesValue4 = bindingValue["properties"];
                                                if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                                {
                                                    JavaScriptFunctionBindingProperties propertiesInstance3 = new JavaScriptFunctionBindingProperties();
                                                    javaScriptFunctionBindingInstance.Properties = propertiesInstance3;
                                                    
                                                    JToken scriptValue = propertiesValue4["script"];
                                                    if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                                    {
                                                        string scriptInstance = ((string)scriptValue);
                                                        propertiesInstance3.Script = scriptInstance;
                                                    }
                                                }
                                                
                                                JToken typeValue2 = bindingValue["type"];
                                                if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                {
                                                    string typeInstance2 = ((string)typeValue2);
                                                    javaScriptFunctionBindingInstance.Type = typeInstance2;
                                                }
                                                propertiesInstance.Binding = javaScriptFunctionBindingInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken etagValue = propertiesValue["etag"];
                                    if (etagValue != null && etagValue.Type != JTokenType.Null)
                                    {
                                        string etagInstance = ((string)etagValue);
                                        scalarFunctionPropertiesInstance.Etag = etagInstance;
                                    }
                                    
                                    JToken typeValue3 = propertiesValue["type"];
                                    if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                    {
                                        string typeInstance3 = ((string)typeValue3);
                                        scalarFunctionPropertiesInstance.Type = typeInstance3;
                                    }
                                    functionInstance.Properties = scalarFunctionPropertiesInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                    }
                    if (httpResponse.Headers.Contains("ETag"))
                    {
                        result.Function.Properties.Etag = httpResponse.Headers.GetValues("ETag").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete a function for a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='functionName'>
        /// Required. The name of the function for the stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The common operation response.
        /// </returns>
        public async Task<CommonOperationResponse> DeleteAsync(string resourceGroupName, string jobName, string functionName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (functionName == null)
            {
                throw new ArgumentNullException("functionName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("functionName", functionName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.StreamAnalytics/streamingjobs/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/functions/";
            url = url + Uri.EscapeDataString(functionName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CommonOperationResponse result = null;
                    // Deserialize Response
                    result = new CommonOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get a function for a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='functionName'>
        /// Required. The name of the function for the stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the get stream analytics function operation.
        /// </returns>
        public async Task<FunctionGetResponse> GetAsync(string resourceGroupName, string jobName, string functionName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (functionName == null)
            {
                throw new ArgumentNullException("functionName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("functionName", functionName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.StreamAnalytics/streamingjobs/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/functions/";
            url = url + Uri.EscapeDataString(functionName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FunctionGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FunctionGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Function functionInstance = new Function();
                            result.Function = functionInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                functionInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue["type"]);
                                if (typeName == "Scalar")
                                {
                                    ScalarFunctionProperties scalarFunctionPropertiesInstance = new ScalarFunctionProperties();
                                    
                                    JToken propertiesValue2 = propertiesValue["properties"];
                                    if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                    {
                                        ScalarFunctionConfiguration propertiesInstance = new ScalarFunctionConfiguration();
                                        scalarFunctionPropertiesInstance.Properties = propertiesInstance;
                                        
                                        JToken inputsArray = propertiesValue2["inputs"];
                                        if (inputsArray != null && inputsArray.Type != JTokenType.Null)
                                        {
                                            propertiesInstance.Inputs = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.FunctionInput>();
                                            foreach (JToken inputsValue in ((JArray)inputsArray))
                                            {
                                                FunctionInput functionInputInstance = new FunctionInput();
                                                propertiesInstance.Inputs.Add(functionInputInstance);
                                                
                                                JToken dataTypeValue = inputsValue["dataType"];
                                                if (dataTypeValue != null && dataTypeValue.Type != JTokenType.Null)
                                                {
                                                    string dataTypeInstance = ((string)dataTypeValue);
                                                    functionInputInstance.DataType = dataTypeInstance;
                                                }
                                                
                                                JToken isConfigurationParameterValue = inputsValue["isConfigurationParameter"];
                                                if (isConfigurationParameterValue != null && isConfigurationParameterValue.Type != JTokenType.Null)
                                                {
                                                    bool isConfigurationParameterInstance = ((bool)isConfigurationParameterValue);
                                                    functionInputInstance.IsConfigurationParameter = isConfigurationParameterInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken outputValue = propertiesValue2["output"];
                                        if (outputValue != null && outputValue.Type != JTokenType.Null)
                                        {
                                            FunctionOutput outputInstance = new FunctionOutput();
                                            propertiesInstance.Output = outputInstance;
                                            
                                            JToken dataTypeValue2 = outputValue["dataType"];
                                            if (dataTypeValue2 != null && dataTypeValue2.Type != JTokenType.Null)
                                            {
                                                string dataTypeInstance2 = ((string)dataTypeValue2);
                                                outputInstance.DataType = dataTypeInstance2;
                                            }
                                        }
                                        
                                        JToken bindingValue = propertiesValue2["binding"];
                                        if (bindingValue != null && bindingValue.Type != JTokenType.Null)
                                        {
                                            string typeName2 = ((string)bindingValue["type"]);
                                            if (typeName2 == "Microsoft.MachineLearning/WebService")
                                            {
                                                AzureMachineLearningWebServiceFunctionBinding azureMachineLearningWebServiceFunctionBindingInstance = new AzureMachineLearningWebServiceFunctionBinding();
                                                
                                                JToken propertiesValue3 = bindingValue["properties"];
                                                if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                                {
                                                    AzureMachineLearningWebServiceFunctionBindingProperties propertiesInstance2 = new AzureMachineLearningWebServiceFunctionBindingProperties();
                                                    azureMachineLearningWebServiceFunctionBindingInstance.Properties = propertiesInstance2;
                                                    
                                                    JToken endpointValue = propertiesValue3["endpoint"];
                                                    if (endpointValue != null && endpointValue.Type != JTokenType.Null)
                                                    {
                                                        string endpointInstance = ((string)endpointValue);
                                                        propertiesInstance2.Endpoint = endpointInstance;
                                                    }
                                                    
                                                    JToken apiKeyValue = propertiesValue3["apiKey"];
                                                    if (apiKeyValue != null && apiKeyValue.Type != JTokenType.Null)
                                                    {
                                                        string apiKeyInstance = ((string)apiKeyValue);
                                                        propertiesInstance2.ApiKey = apiKeyInstance;
                                                    }
                                                    
                                                    JToken inputsValue2 = propertiesValue3["inputs"];
                                                    if (inputsValue2 != null && inputsValue2.Type != JTokenType.Null)
                                                    {
                                                        AzureMachineLearningWebServiceInputs inputsInstance = new AzureMachineLearningWebServiceInputs();
                                                        propertiesInstance2.Inputs = inputsInstance;
                                                        
                                                        JToken nameValue2 = inputsValue2["name"];
                                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance2 = ((string)nameValue2);
                                                            inputsInstance.Name = nameInstance2;
                                                        }
                                                        
                                                        JToken columnNamesArray = inputsValue2["columnNames"];
                                                        if (columnNamesArray != null && columnNamesArray.Type != JTokenType.Null)
                                                        {
                                                            inputsInstance.ColumnNames = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.AzureMachineLearningWebServiceInputColumn>();
                                                            foreach (JToken columnNamesValue in ((JArray)columnNamesArray))
                                                            {
                                                                AzureMachineLearningWebServiceInputColumn azureMachineLearningWebServiceInputColumnInstance = new AzureMachineLearningWebServiceInputColumn();
                                                                inputsInstance.ColumnNames.Add(azureMachineLearningWebServiceInputColumnInstance);
                                                                
                                                                JToken nameValue3 = columnNamesValue["name"];
                                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                                {
                                                                    string nameInstance3 = ((string)nameValue3);
                                                                    azureMachineLearningWebServiceInputColumnInstance.Name = nameInstance3;
                                                                }
                                                                
                                                                JToken dataTypeValue3 = columnNamesValue["dataType"];
                                                                if (dataTypeValue3 != null && dataTypeValue3.Type != JTokenType.Null)
                                                                {
                                                                    string dataTypeInstance3 = ((string)dataTypeValue3);
                                                                    azureMachineLearningWebServiceInputColumnInstance.DataType = dataTypeInstance3;
                                                                }
                                                                
                                                                JToken mapToValue = columnNamesValue["mapTo"];
                                                                if (mapToValue != null && mapToValue.Type != JTokenType.Null)
                                                                {
                                                                    int mapToInstance = ((int)mapToValue);
                                                                    azureMachineLearningWebServiceInputColumnInstance.MapTo = mapToInstance;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken outputsArray = propertiesValue3["outputs"];
                                                    if (outputsArray != null && outputsArray.Type != JTokenType.Null)
                                                    {
                                                        propertiesInstance2.Outputs = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.AzureMachineLearningWebServiceOutputColumn>();
                                                        foreach (JToken outputsValue in ((JArray)outputsArray))
                                                        {
                                                            AzureMachineLearningWebServiceOutputColumn azureMachineLearningWebServiceOutputColumnInstance = new AzureMachineLearningWebServiceOutputColumn();
                                                            propertiesInstance2.Outputs.Add(azureMachineLearningWebServiceOutputColumnInstance);
                                                            
                                                            JToken nameValue4 = outputsValue["name"];
                                                            if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance4 = ((string)nameValue4);
                                                                azureMachineLearningWebServiceOutputColumnInstance.Name = nameInstance4;
                                                            }
                                                            
                                                            JToken dataTypeValue4 = outputsValue["dataType"];
                                                            if (dataTypeValue4 != null && dataTypeValue4.Type != JTokenType.Null)
                                                            {
                                                                string dataTypeInstance4 = ((string)dataTypeValue4);
                                                                azureMachineLearningWebServiceOutputColumnInstance.DataType = dataTypeInstance4;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken batchSizeValue = propertiesValue3["batchSize"];
                                                    if (batchSizeValue != null && batchSizeValue.Type != JTokenType.Null)
                                                    {
                                                        int batchSizeInstance = ((int)batchSizeValue);
                                                        propertiesInstance2.BatchSize = batchSizeInstance;
                                                    }
                                                }
                                                
                                                JToken typeValue = bindingValue["type"];
                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                {
                                                    string typeInstance = ((string)typeValue);
                                                    azureMachineLearningWebServiceFunctionBindingInstance.Type = typeInstance;
                                                }
                                                propertiesInstance.Binding = azureMachineLearningWebServiceFunctionBindingInstance;
                                            }
                                            if (typeName2 == "Microsoft.StreamAnalytics/JavascriptUdf")
                                            {
                                                JavaScriptFunctionBinding javaScriptFunctionBindingInstance = new JavaScriptFunctionBinding();
                                                
                                                JToken propertiesValue4 = bindingValue["properties"];
                                                if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                                {
                                                    JavaScriptFunctionBindingProperties propertiesInstance3 = new JavaScriptFunctionBindingProperties();
                                                    javaScriptFunctionBindingInstance.Properties = propertiesInstance3;
                                                    
                                                    JToken scriptValue = propertiesValue4["script"];
                                                    if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                                    {
                                                        string scriptInstance = ((string)scriptValue);
                                                        propertiesInstance3.Script = scriptInstance;
                                                    }
                                                }
                                                
                                                JToken typeValue2 = bindingValue["type"];
                                                if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                {
                                                    string typeInstance2 = ((string)typeValue2);
                                                    javaScriptFunctionBindingInstance.Type = typeInstance2;
                                                }
                                                propertiesInstance.Binding = javaScriptFunctionBindingInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken etagValue = propertiesValue["etag"];
                                    if (etagValue != null && etagValue.Type != JTokenType.Null)
                                    {
                                        string etagInstance = ((string)etagValue);
                                        scalarFunctionPropertiesInstance.Etag = etagInstance;
                                    }
                                    
                                    JToken typeValue3 = propertiesValue["type"];
                                    if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                    {
                                        string typeInstance3 = ((string)typeValue3);
                                        scalarFunctionPropertiesInstance.Type = typeInstance3;
                                    }
                                    functionInstance.Properties = scalarFunctionPropertiesInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                    }
                    if (httpResponse.Headers.Contains("ETag"))
                    {
                        result.Function.Properties.Etag = httpResponse.Headers.GetValues("ETag").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get a list of the functions defined in a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the function list operation.
        /// </returns>
        public async Task<FunctionListResponse> ListFunctionsInJobAsync(string resourceGroupName, string jobName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                TracingAdapter.Enter(invocationId, this, "ListFunctionsInJobAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.StreamAnalytics/streamingjobs/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/functions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FunctionListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FunctionListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Function functionInstance = new Function();
                                    result.Value.Add(functionInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        functionInstance.Name = nameInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        string typeName = ((string)propertiesValue["type"]);
                                        if (typeName == "Scalar")
                                        {
                                            ScalarFunctionProperties scalarFunctionPropertiesInstance = new ScalarFunctionProperties();
                                            
                                            JToken propertiesValue2 = propertiesValue["properties"];
                                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                            {
                                                ScalarFunctionConfiguration propertiesInstance = new ScalarFunctionConfiguration();
                                                scalarFunctionPropertiesInstance.Properties = propertiesInstance;
                                                
                                                JToken inputsArray = propertiesValue2["inputs"];
                                                if (inputsArray != null && inputsArray.Type != JTokenType.Null)
                                                {
                                                    propertiesInstance.Inputs = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.FunctionInput>();
                                                    foreach (JToken inputsValue in ((JArray)inputsArray))
                                                    {
                                                        FunctionInput functionInputInstance = new FunctionInput();
                                                        propertiesInstance.Inputs.Add(functionInputInstance);
                                                        
                                                        JToken dataTypeValue = inputsValue["dataType"];
                                                        if (dataTypeValue != null && dataTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string dataTypeInstance = ((string)dataTypeValue);
                                                            functionInputInstance.DataType = dataTypeInstance;
                                                        }
                                                        
                                                        JToken isConfigurationParameterValue = inputsValue["isConfigurationParameter"];
                                                        if (isConfigurationParameterValue != null && isConfigurationParameterValue.Type != JTokenType.Null)
                                                        {
                                                            bool isConfigurationParameterInstance = ((bool)isConfigurationParameterValue);
                                                            functionInputInstance.IsConfigurationParameter = isConfigurationParameterInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken outputValue = propertiesValue2["output"];
                                                if (outputValue != null && outputValue.Type != JTokenType.Null)
                                                {
                                                    FunctionOutput outputInstance = new FunctionOutput();
                                                    propertiesInstance.Output = outputInstance;
                                                    
                                                    JToken dataTypeValue2 = outputValue["dataType"];
                                                    if (dataTypeValue2 != null && dataTypeValue2.Type != JTokenType.Null)
                                                    {
                                                        string dataTypeInstance2 = ((string)dataTypeValue2);
                                                        outputInstance.DataType = dataTypeInstance2;
                                                    }
                                                }
                                                
                                                JToken bindingValue = propertiesValue2["binding"];
                                                if (bindingValue != null && bindingValue.Type != JTokenType.Null)
                                                {
                                                    string typeName2 = ((string)bindingValue["type"]);
                                                    if (typeName2 == "Microsoft.MachineLearning/WebService")
                                                    {
                                                        AzureMachineLearningWebServiceFunctionBinding azureMachineLearningWebServiceFunctionBindingInstance = new AzureMachineLearningWebServiceFunctionBinding();
                                                        
                                                        JToken propertiesValue3 = bindingValue["properties"];
                                                        if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                                        {
                                                            AzureMachineLearningWebServiceFunctionBindingProperties propertiesInstance2 = new AzureMachineLearningWebServiceFunctionBindingProperties();
                                                            azureMachineLearningWebServiceFunctionBindingInstance.Properties = propertiesInstance2;
                                                            
                                                            JToken endpointValue = propertiesValue3["endpoint"];
                                                            if (endpointValue != null && endpointValue.Type != JTokenType.Null)
                                                            {
                                                                string endpointInstance = ((string)endpointValue);
                                                                propertiesInstance2.Endpoint = endpointInstance;
                                                            }
                                                            
                                                            JToken apiKeyValue = propertiesValue3["apiKey"];
                                                            if (apiKeyValue != null && apiKeyValue.Type != JTokenType.Null)
                                                            {
                                                                string apiKeyInstance = ((string)apiKeyValue);
                                                                propertiesInstance2.ApiKey = apiKeyInstance;
                                                            }
                                                            
                                                            JToken inputsValue2 = propertiesValue3["inputs"];
                                                            if (inputsValue2 != null && inputsValue2.Type != JTokenType.Null)
                                                            {
                                                                AzureMachineLearningWebServiceInputs inputsInstance = new AzureMachineLearningWebServiceInputs();
                                                                propertiesInstance2.Inputs = inputsInstance;
                                                                
                                                                JToken nameValue2 = inputsValue2["name"];
                                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                                {
                                                                    string nameInstance2 = ((string)nameValue2);
                                                                    inputsInstance.Name = nameInstance2;
                                                                }
                                                                
                                                                JToken columnNamesArray = inputsValue2["columnNames"];
                                                                if (columnNamesArray != null && columnNamesArray.Type != JTokenType.Null)
                                                                {
                                                                    inputsInstance.ColumnNames = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.AzureMachineLearningWebServiceInputColumn>();
                                                                    foreach (JToken columnNamesValue in ((JArray)columnNamesArray))
                                                                    {
                                                                        AzureMachineLearningWebServiceInputColumn azureMachineLearningWebServiceInputColumnInstance = new AzureMachineLearningWebServiceInputColumn();
                                                                        inputsInstance.ColumnNames.Add(azureMachineLearningWebServiceInputColumnInstance);
                                                                        
                                                                        JToken nameValue3 = columnNamesValue["name"];
                                                                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                                        {
                                                                            string nameInstance3 = ((string)nameValue3);
                                                                            azureMachineLearningWebServiceInputColumnInstance.Name = nameInstance3;
                                                                        }
                                                                        
                                                                        JToken dataTypeValue3 = columnNamesValue["dataType"];
                                                                        if (dataTypeValue3 != null && dataTypeValue3.Type != JTokenType.Null)
                                                                        {
                                                                            string dataTypeInstance3 = ((string)dataTypeValue3);
                                                                            azureMachineLearningWebServiceInputColumnInstance.DataType = dataTypeInstance3;
                                                                        }
                                                                        
                                                                        JToken mapToValue = columnNamesValue["mapTo"];
                                                                        if (mapToValue != null && mapToValue.Type != JTokenType.Null)
                                                                        {
                                                                            int mapToInstance = ((int)mapToValue);
                                                                            azureMachineLearningWebServiceInputColumnInstance.MapTo = mapToInstance;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            
                                                            JToken outputsArray = propertiesValue3["outputs"];
                                                            if (outputsArray != null && outputsArray.Type != JTokenType.Null)
                                                            {
                                                                propertiesInstance2.Outputs = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.AzureMachineLearningWebServiceOutputColumn>();
                                                                foreach (JToken outputsValue in ((JArray)outputsArray))
                                                                {
                                                                    AzureMachineLearningWebServiceOutputColumn azureMachineLearningWebServiceOutputColumnInstance = new AzureMachineLearningWebServiceOutputColumn();
                                                                    propertiesInstance2.Outputs.Add(azureMachineLearningWebServiceOutputColumnInstance);
                                                                    
                                                                    JToken nameValue4 = outputsValue["name"];
                                                                    if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                                    {
                                                                        string nameInstance4 = ((string)nameValue4);
                                                                        azureMachineLearningWebServiceOutputColumnInstance.Name = nameInstance4;
                                                                    }
                                                                    
                                                                    JToken dataTypeValue4 = outputsValue["dataType"];
                                                                    if (dataTypeValue4 != null && dataTypeValue4.Type != JTokenType.Null)
                                                                    {
                                                                        string dataTypeInstance4 = ((string)dataTypeValue4);
                                                                        azureMachineLearningWebServiceOutputColumnInstance.DataType = dataTypeInstance4;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            JToken batchSizeValue = propertiesValue3["batchSize"];
                                                            if (batchSizeValue != null && batchSizeValue.Type != JTokenType.Null)
                                                            {
                                                                int batchSizeInstance = ((int)batchSizeValue);
                                                                propertiesInstance2.BatchSize = batchSizeInstance;
                                                            }
                                                        }
                                                        
                                                        JToken typeValue = bindingValue["type"];
                                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                        {
                                                            string typeInstance = ((string)typeValue);
                                                            azureMachineLearningWebServiceFunctionBindingInstance.Type = typeInstance;
                                                        }
                                                        propertiesInstance.Binding = azureMachineLearningWebServiceFunctionBindingInstance;
                                                    }
                                                    if (typeName2 == "Microsoft.StreamAnalytics/JavascriptUdf")
                                                    {
                                                        JavaScriptFunctionBinding javaScriptFunctionBindingInstance = new JavaScriptFunctionBinding();
                                                        
                                                        JToken propertiesValue4 = bindingValue["properties"];
                                                        if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                                        {
                                                            JavaScriptFunctionBindingProperties propertiesInstance3 = new JavaScriptFunctionBindingProperties();
                                                            javaScriptFunctionBindingInstance.Properties = propertiesInstance3;
                                                            
                                                            JToken scriptValue = propertiesValue4["script"];
                                                            if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                                            {
                                                                string scriptInstance = ((string)scriptValue);
                                                                propertiesInstance3.Script = scriptInstance;
                                                            }
                                                        }
                                                        
                                                        JToken typeValue2 = bindingValue["type"];
                                                        if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                        {
                                                            string typeInstance2 = ((string)typeValue2);
                                                            javaScriptFunctionBindingInstance.Type = typeInstance2;
                                                        }
                                                        propertiesInstance.Binding = javaScriptFunctionBindingInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken etagValue = propertiesValue["etag"];
                                            if (etagValue != null && etagValue.Type != JTokenType.Null)
                                            {
                                                string etagInstance = ((string)etagValue);
                                                scalarFunctionPropertiesInstance.Etag = etagInstance;
                                            }
                                            
                                            JToken typeValue3 = propertiesValue["type"];
                                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                            {
                                                string typeInstance3 = ((string)typeValue3);
                                                scalarFunctionPropertiesInstance.Type = typeInstance3;
                                            }
                                            functionInstance.Properties = scalarFunctionPropertiesInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update a function for a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='functionName'>
        /// Required. The name of the function for the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to update a function for a stream
        /// analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the function patch operation.
        /// </returns>
        public async Task<FunctionPatchResponse> PatchAsync(string resourceGroupName, string jobName, string functionName, FunctionPatchParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (functionName == null)
            {
                throw new ArgumentNullException("functionName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Properties == null)
            {
                throw new ArgumentNullException("parameters.Properties");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("functionName", functionName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "PatchAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.StreamAnalytics/streamingjobs/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/functions/";
            url = url + Uri.EscapeDataString(functionName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject functionPatchParametersValue = new JObject();
                requestDoc = functionPatchParametersValue;
                
                JObject propertiesValue = new JObject();
                functionPatchParametersValue["properties"] = propertiesValue;
                if (parameters.Properties is ScalarFunctionProperties)
                {
                    propertiesValue["type"] = "Scalar";
                    ScalarFunctionProperties derived = ((ScalarFunctionProperties)parameters.Properties);
                    
                    if (derived.Properties != null)
                    {
                        JObject propertiesValue2 = new JObject();
                        propertiesValue["properties"] = propertiesValue2;
                        
                        if (derived.Properties.Inputs != null)
                        {
                            JArray inputsArray = new JArray();
                            foreach (FunctionInput inputsItem in derived.Properties.Inputs)
                            {
                                JObject functionInputValue = new JObject();
                                inputsArray.Add(functionInputValue);
                                
                                if (inputsItem.DataType != null)
                                {
                                    functionInputValue["dataType"] = inputsItem.DataType;
                                }
                                
                                if (inputsItem.IsConfigurationParameter != null)
                                {
                                    functionInputValue["isConfigurationParameter"] = inputsItem.IsConfigurationParameter.Value;
                                }
                            }
                            propertiesValue2["inputs"] = inputsArray;
                        }
                        
                        if (derived.Properties.Output != null)
                        {
                            JObject outputValue = new JObject();
                            propertiesValue2["output"] = outputValue;
                            
                            if (derived.Properties.Output.DataType != null)
                            {
                                outputValue["dataType"] = derived.Properties.Output.DataType;
                            }
                        }
                        
                        if (derived.Properties.Binding != null)
                        {
                            JObject bindingValue = new JObject();
                            propertiesValue2["binding"] = bindingValue;
                            if (derived.Properties.Binding is AzureMachineLearningWebServiceFunctionBinding)
                            {
                                bindingValue["type"] = "Microsoft.MachineLearning/WebService";
                                AzureMachineLearningWebServiceFunctionBinding derived2 = ((AzureMachineLearningWebServiceFunctionBinding)derived.Properties.Binding);
                                
                                if (derived2.Properties != null)
                                {
                                    JObject propertiesValue3 = new JObject();
                                    bindingValue["properties"] = propertiesValue3;
                                    
                                    if (derived2.Properties.Endpoint != null)
                                    {
                                        propertiesValue3["endpoint"] = derived2.Properties.Endpoint;
                                    }
                                    
                                    if (derived2.Properties.ApiKey != null)
                                    {
                                        propertiesValue3["apiKey"] = derived2.Properties.ApiKey;
                                    }
                                    
                                    if (derived2.Properties.Inputs != null)
                                    {
                                        JObject inputsValue = new JObject();
                                        propertiesValue3["inputs"] = inputsValue;
                                        
                                        inputsValue["name"] = derived2.Properties.Inputs.Name;
                                        
                                        if (derived2.Properties.Inputs.ColumnNames != null)
                                        {
                                            JArray columnNamesArray = new JArray();
                                            foreach (AzureMachineLearningWebServiceInputColumn columnNamesItem in derived2.Properties.Inputs.ColumnNames)
                                            {
                                                JObject azureMachineLearningWebServiceInputColumnValue = new JObject();
                                                columnNamesArray.Add(azureMachineLearningWebServiceInputColumnValue);
                                                
                                                azureMachineLearningWebServiceInputColumnValue["name"] = columnNamesItem.Name;
                                                
                                                if (columnNamesItem.DataType != null)
                                                {
                                                    azureMachineLearningWebServiceInputColumnValue["dataType"] = columnNamesItem.DataType;
                                                }
                                                
                                                if (columnNamesItem.MapTo != null)
                                                {
                                                    azureMachineLearningWebServiceInputColumnValue["mapTo"] = columnNamesItem.MapTo.Value;
                                                }
                                            }
                                            inputsValue["columnNames"] = columnNamesArray;
                                        }
                                    }
                                    
                                    if (derived2.Properties.Outputs != null)
                                    {
                                        JArray outputsArray = new JArray();
                                        foreach (AzureMachineLearningWebServiceOutputColumn outputsItem in derived2.Properties.Outputs)
                                        {
                                            JObject azureMachineLearningWebServiceOutputColumnValue = new JObject();
                                            outputsArray.Add(azureMachineLearningWebServiceOutputColumnValue);
                                            
                                            azureMachineLearningWebServiceOutputColumnValue["name"] = outputsItem.Name;
                                            
                                            if (outputsItem.DataType != null)
                                            {
                                                azureMachineLearningWebServiceOutputColumnValue["dataType"] = outputsItem.DataType;
                                            }
                                        }
                                        propertiesValue3["outputs"] = outputsArray;
                                    }
                                    
                                    if (derived2.Properties.BatchSize != null)
                                    {
                                        propertiesValue3["batchSize"] = derived2.Properties.BatchSize.Value;
                                    }
                                }
                                
                                if (derived2.Type != null)
                                {
                                    bindingValue["type"] = derived2.Type;
                                }
                            }
                            if (derived.Properties.Binding is JavaScriptFunctionBinding)
                            {
                                bindingValue["type"] = "Microsoft.StreamAnalytics/JavascriptUdf";
                                JavaScriptFunctionBinding derived3 = ((JavaScriptFunctionBinding)derived.Properties.Binding);
                                
                                if (derived3.Properties != null)
                                {
                                    JObject propertiesValue4 = new JObject();
                                    bindingValue["properties"] = propertiesValue4;
                                    
                                    if (derived3.Properties.Script != null)
                                    {
                                        propertiesValue4["script"] = derived3.Properties.Script;
                                    }
                                }
                                
                                if (derived3.Type != null)
                                {
                                    bindingValue["type"] = derived3.Type;
                                }
                            }
                        }
                    }
                    
                    if (derived.Etag != null)
                    {
                        propertiesValue["etag"] = derived.Etag;
                    }
                    
                    if (derived.Type != null)
                    {
                        propertiesValue["type"] = derived.Type;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FunctionPatchResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FunctionPatchResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken propertiesValue5 = responseDoc["properties"];
                            if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue5["type"]);
                                if (typeName == "Scalar")
                                {
                                    ScalarFunctionProperties scalarFunctionPropertiesInstance = new ScalarFunctionProperties();
                                    
                                    JToken propertiesValue6 = propertiesValue5["properties"];
                                    if (propertiesValue6 != null && propertiesValue6.Type != JTokenType.Null)
                                    {
                                        ScalarFunctionConfiguration propertiesInstance = new ScalarFunctionConfiguration();
                                        scalarFunctionPropertiesInstance.Properties = propertiesInstance;
                                        
                                        JToken inputsArray2 = propertiesValue6["inputs"];
                                        if (inputsArray2 != null && inputsArray2.Type != JTokenType.Null)
                                        {
                                            propertiesInstance.Inputs = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.FunctionInput>();
                                            foreach (JToken inputsValue2 in ((JArray)inputsArray2))
                                            {
                                                FunctionInput functionInputInstance = new FunctionInput();
                                                propertiesInstance.Inputs.Add(functionInputInstance);
                                                
                                                JToken dataTypeValue = inputsValue2["dataType"];
                                                if (dataTypeValue != null && dataTypeValue.Type != JTokenType.Null)
                                                {
                                                    string dataTypeInstance = ((string)dataTypeValue);
                                                    functionInputInstance.DataType = dataTypeInstance;
                                                }
                                                
                                                JToken isConfigurationParameterValue = inputsValue2["isConfigurationParameter"];
                                                if (isConfigurationParameterValue != null && isConfigurationParameterValue.Type != JTokenType.Null)
                                                {
                                                    bool isConfigurationParameterInstance = ((bool)isConfigurationParameterValue);
                                                    functionInputInstance.IsConfigurationParameter = isConfigurationParameterInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken outputValue2 = propertiesValue6["output"];
                                        if (outputValue2 != null && outputValue2.Type != JTokenType.Null)
                                        {
                                            FunctionOutput outputInstance = new FunctionOutput();
                                            propertiesInstance.Output = outputInstance;
                                            
                                            JToken dataTypeValue2 = outputValue2["dataType"];
                                            if (dataTypeValue2 != null && dataTypeValue2.Type != JTokenType.Null)
                                            {
                                                string dataTypeInstance2 = ((string)dataTypeValue2);
                                                outputInstance.DataType = dataTypeInstance2;
                                            }
                                        }
                                        
                                        JToken bindingValue2 = propertiesValue6["binding"];
                                        if (bindingValue2 != null && bindingValue2.Type != JTokenType.Null)
                                        {
                                            string typeName2 = ((string)bindingValue2["type"]);
                                            if (typeName2 == "Microsoft.MachineLearning/WebService")
                                            {
                                                AzureMachineLearningWebServiceFunctionBinding azureMachineLearningWebServiceFunctionBindingInstance = new AzureMachineLearningWebServiceFunctionBinding();
                                                
                                                JToken propertiesValue7 = bindingValue2["properties"];
                                                if (propertiesValue7 != null && propertiesValue7.Type != JTokenType.Null)
                                                {
                                                    AzureMachineLearningWebServiceFunctionBindingProperties propertiesInstance2 = new AzureMachineLearningWebServiceFunctionBindingProperties();
                                                    azureMachineLearningWebServiceFunctionBindingInstance.Properties = propertiesInstance2;
                                                    
                                                    JToken endpointValue = propertiesValue7["endpoint"];
                                                    if (endpointValue != null && endpointValue.Type != JTokenType.Null)
                                                    {
                                                        string endpointInstance = ((string)endpointValue);
                                                        propertiesInstance2.Endpoint = endpointInstance;
                                                    }
                                                    
                                                    JToken apiKeyValue = propertiesValue7["apiKey"];
                                                    if (apiKeyValue != null && apiKeyValue.Type != JTokenType.Null)
                                                    {
                                                        string apiKeyInstance = ((string)apiKeyValue);
                                                        propertiesInstance2.ApiKey = apiKeyInstance;
                                                    }
                                                    
                                                    JToken inputsValue3 = propertiesValue7["inputs"];
                                                    if (inputsValue3 != null && inputsValue3.Type != JTokenType.Null)
                                                    {
                                                        AzureMachineLearningWebServiceInputs inputsInstance = new AzureMachineLearningWebServiceInputs();
                                                        propertiesInstance2.Inputs = inputsInstance;
                                                        
                                                        JToken nameValue = inputsValue3["name"];
                                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance = ((string)nameValue);
                                                            inputsInstance.Name = nameInstance;
                                                        }
                                                        
                                                        JToken columnNamesArray2 = inputsValue3["columnNames"];
                                                        if (columnNamesArray2 != null && columnNamesArray2.Type != JTokenType.Null)
                                                        {
                                                            inputsInstance.ColumnNames = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.AzureMachineLearningWebServiceInputColumn>();
                                                            foreach (JToken columnNamesValue in ((JArray)columnNamesArray2))
                                                            {
                                                                AzureMachineLearningWebServiceInputColumn azureMachineLearningWebServiceInputColumnInstance = new AzureMachineLearningWebServiceInputColumn();
                                                                inputsInstance.ColumnNames.Add(azureMachineLearningWebServiceInputColumnInstance);
                                                                
                                                                JToken nameValue2 = columnNamesValue["name"];
                                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                                {
                                                                    string nameInstance2 = ((string)nameValue2);
                                                                    azureMachineLearningWebServiceInputColumnInstance.Name = nameInstance2;
                                                                }
                                                                
                                                                JToken dataTypeValue3 = columnNamesValue["dataType"];
                                                                if (dataTypeValue3 != null && dataTypeValue3.Type != JTokenType.Null)
                                                                {
                                                                    string dataTypeInstance3 = ((string)dataTypeValue3);
                                                                    azureMachineLearningWebServiceInputColumnInstance.DataType = dataTypeInstance3;
                                                                }
                                                                
                                                                JToken mapToValue = columnNamesValue["mapTo"];
                                                                if (mapToValue != null && mapToValue.Type != JTokenType.Null)
                                                                {
                                                                    int mapToInstance = ((int)mapToValue);
                                                                    azureMachineLearningWebServiceInputColumnInstance.MapTo = mapToInstance;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken outputsArray2 = propertiesValue7["outputs"];
                                                    if (outputsArray2 != null && outputsArray2.Type != JTokenType.Null)
                                                    {
                                                        propertiesInstance2.Outputs = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.AzureMachineLearningWebServiceOutputColumn>();
                                                        foreach (JToken outputsValue in ((JArray)outputsArray2))
                                                        {
                                                            AzureMachineLearningWebServiceOutputColumn azureMachineLearningWebServiceOutputColumnInstance = new AzureMachineLearningWebServiceOutputColumn();
                                                            propertiesInstance2.Outputs.Add(azureMachineLearningWebServiceOutputColumnInstance);
                                                            
                                                            JToken nameValue3 = outputsValue["name"];
                                                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance3 = ((string)nameValue3);
                                                                azureMachineLearningWebServiceOutputColumnInstance.Name = nameInstance3;
                                                            }
                                                            
                                                            JToken dataTypeValue4 = outputsValue["dataType"];
                                                            if (dataTypeValue4 != null && dataTypeValue4.Type != JTokenType.Null)
                                                            {
                                                                string dataTypeInstance4 = ((string)dataTypeValue4);
                                                                azureMachineLearningWebServiceOutputColumnInstance.DataType = dataTypeInstance4;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken batchSizeValue = propertiesValue7["batchSize"];
                                                    if (batchSizeValue != null && batchSizeValue.Type != JTokenType.Null)
                                                    {
                                                        int batchSizeInstance = ((int)batchSizeValue);
                                                        propertiesInstance2.BatchSize = batchSizeInstance;
                                                    }
                                                }
                                                
                                                JToken typeValue = bindingValue2["type"];
                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                {
                                                    string typeInstance = ((string)typeValue);
                                                    azureMachineLearningWebServiceFunctionBindingInstance.Type = typeInstance;
                                                }
                                                propertiesInstance.Binding = azureMachineLearningWebServiceFunctionBindingInstance;
                                            }
                                            if (typeName2 == "Microsoft.StreamAnalytics/JavascriptUdf")
                                            {
                                                JavaScriptFunctionBinding javaScriptFunctionBindingInstance = new JavaScriptFunctionBinding();
                                                
                                                JToken propertiesValue8 = bindingValue2["properties"];
                                                if (propertiesValue8 != null && propertiesValue8.Type != JTokenType.Null)
                                                {
                                                    JavaScriptFunctionBindingProperties propertiesInstance3 = new JavaScriptFunctionBindingProperties();
                                                    javaScriptFunctionBindingInstance.Properties = propertiesInstance3;
                                                    
                                                    JToken scriptValue = propertiesValue8["script"];
                                                    if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                                    {
                                                        string scriptInstance = ((string)scriptValue);
                                                        propertiesInstance3.Script = scriptInstance;
                                                    }
                                                }
                                                
                                                JToken typeValue2 = bindingValue2["type"];
                                                if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                {
                                                    string typeInstance2 = ((string)typeValue2);
                                                    javaScriptFunctionBindingInstance.Type = typeInstance2;
                                                }
                                                propertiesInstance.Binding = javaScriptFunctionBindingInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken etagValue = propertiesValue5["etag"];
                                    if (etagValue != null && etagValue.Type != JTokenType.Null)
                                    {
                                        string etagInstance = ((string)etagValue);
                                        scalarFunctionPropertiesInstance.Etag = etagInstance;
                                    }
                                    
                                    JToken typeValue3 = propertiesValue5["type"];
                                    if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                    {
                                        string typeInstance3 = ((string)typeValue3);
                                        scalarFunctionPropertiesInstance.Type = typeInstance3;
                                    }
                                    result.Properties = scalarFunctionPropertiesInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                    }
                    if (httpResponse.Headers.Contains("ETag"))
                    {
                        result.Properties.Etag = httpResponse.Headers.GetValues("ETag").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve the default definition of a function for a stream
        /// analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='functionName'>
        /// Required. The name of the function for the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to retrieve the default
        /// definition of a function for a stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the retrieve default function definition operation.
        /// </returns>
        public async Task<FunctionRetrieveDefaultDefinitionResponse> RetrieveDefaultDefinitionAsync(string resourceGroupName, string jobName, string functionName, FunctionRetrieveDefaultDefinitionParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (functionName == null)
            {
                throw new ArgumentNullException("functionName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("functionName", functionName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "RetrieveDefaultDefinitionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.StreamAnalytics/streamingjobs/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/functions/";
            url = url + Uri.EscapeDataString(functionName);
            url = url + "/RetrieveDefaultDefinition";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject functionRetrieveDefaultDefinitionParametersValue = new JObject();
                requestDoc = functionRetrieveDefaultDefinitionParametersValue;
                if (parameters is AzureMachineLearningWebServiceFunctionRetrieveDefaultDefinitionParameters)
                {
                    functionRetrieveDefaultDefinitionParametersValue["bindingType"] = "Microsoft.MachineLearning/WebService";
                    AzureMachineLearningWebServiceFunctionRetrieveDefaultDefinitionParameters derived = ((AzureMachineLearningWebServiceFunctionRetrieveDefaultDefinitionParameters)parameters);
                    
                    if (derived.BindingRetrievalProperties != null)
                    {
                        JObject bindingRetrievalPropertiesValue = new JObject();
                        functionRetrieveDefaultDefinitionParametersValue["bindingRetrievalProperties"] = bindingRetrievalPropertiesValue;
                        
                        if (derived.BindingRetrievalProperties.ExecuteEndpoint != null)
                        {
                            bindingRetrievalPropertiesValue["executeEndpoint"] = derived.BindingRetrievalProperties.ExecuteEndpoint;
                        }
                        
                        if (derived.BindingRetrievalProperties.UdfType != null)
                        {
                            bindingRetrievalPropertiesValue["udfType"] = derived.BindingRetrievalProperties.UdfType;
                        }
                    }
                    
                    if (derived.BindingType != null)
                    {
                        functionRetrieveDefaultDefinitionParametersValue["bindingType"] = derived.BindingType;
                    }
                }
                if (parameters is JavaScriptFunctionRetrieveDefaultDefinitionParameters)
                {
                    functionRetrieveDefaultDefinitionParametersValue["bindingType"] = "Microsoft.StreamAnalytics/JavascriptUdf";
                    JavaScriptFunctionRetrieveDefaultDefinitionParameters derived2 = ((JavaScriptFunctionRetrieveDefaultDefinitionParameters)parameters);
                    
                    if (derived2.BindingRetrievalProperties != null)
                    {
                        JObject bindingRetrievalPropertiesValue2 = new JObject();
                        functionRetrieveDefaultDefinitionParametersValue["bindingRetrievalProperties"] = bindingRetrievalPropertiesValue2;
                        
                        if (derived2.BindingRetrievalProperties.Script != null)
                        {
                            bindingRetrievalPropertiesValue2["script"] = derived2.BindingRetrievalProperties.Script;
                        }
                        
                        if (derived2.BindingRetrievalProperties.UdfType != null)
                        {
                            bindingRetrievalPropertiesValue2["udfType"] = derived2.BindingRetrievalProperties.UdfType;
                        }
                    }
                    
                    if (derived2.BindingType != null)
                    {
                        functionRetrieveDefaultDefinitionParametersValue["bindingType"] = derived2.BindingType;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FunctionRetrieveDefaultDefinitionResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FunctionRetrieveDefaultDefinitionResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Function functionInstance = new Function();
                            result.Function = functionInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                functionInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue["type"]);
                                if (typeName == "Scalar")
                                {
                                    ScalarFunctionProperties scalarFunctionPropertiesInstance = new ScalarFunctionProperties();
                                    
                                    JToken propertiesValue2 = propertiesValue["properties"];
                                    if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                    {
                                        ScalarFunctionConfiguration propertiesInstance = new ScalarFunctionConfiguration();
                                        scalarFunctionPropertiesInstance.Properties = propertiesInstance;
                                        
                                        JToken inputsArray = propertiesValue2["inputs"];
                                        if (inputsArray != null && inputsArray.Type != JTokenType.Null)
                                        {
                                            propertiesInstance.Inputs = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.FunctionInput>();
                                            foreach (JToken inputsValue in ((JArray)inputsArray))
                                            {
                                                FunctionInput functionInputInstance = new FunctionInput();
                                                propertiesInstance.Inputs.Add(functionInputInstance);
                                                
                                                JToken dataTypeValue = inputsValue["dataType"];
                                                if (dataTypeValue != null && dataTypeValue.Type != JTokenType.Null)
                                                {
                                                    string dataTypeInstance = ((string)dataTypeValue);
                                                    functionInputInstance.DataType = dataTypeInstance;
                                                }
                                                
                                                JToken isConfigurationParameterValue = inputsValue["isConfigurationParameter"];
                                                if (isConfigurationParameterValue != null && isConfigurationParameterValue.Type != JTokenType.Null)
                                                {
                                                    bool isConfigurationParameterInstance = ((bool)isConfigurationParameterValue);
                                                    functionInputInstance.IsConfigurationParameter = isConfigurationParameterInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken outputValue = propertiesValue2["output"];
                                        if (outputValue != null && outputValue.Type != JTokenType.Null)
                                        {
                                            FunctionOutput outputInstance = new FunctionOutput();
                                            propertiesInstance.Output = outputInstance;
                                            
                                            JToken dataTypeValue2 = outputValue["dataType"];
                                            if (dataTypeValue2 != null && dataTypeValue2.Type != JTokenType.Null)
                                            {
                                                string dataTypeInstance2 = ((string)dataTypeValue2);
                                                outputInstance.DataType = dataTypeInstance2;
                                            }
                                        }
                                        
                                        JToken bindingValue = propertiesValue2["binding"];
                                        if (bindingValue != null && bindingValue.Type != JTokenType.Null)
                                        {
                                            string typeName2 = ((string)bindingValue["type"]);
                                            if (typeName2 == "Microsoft.MachineLearning/WebService")
                                            {
                                                AzureMachineLearningWebServiceFunctionBinding azureMachineLearningWebServiceFunctionBindingInstance = new AzureMachineLearningWebServiceFunctionBinding();
                                                
                                                JToken propertiesValue3 = bindingValue["properties"];
                                                if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                                {
                                                    AzureMachineLearningWebServiceFunctionBindingProperties propertiesInstance2 = new AzureMachineLearningWebServiceFunctionBindingProperties();
                                                    azureMachineLearningWebServiceFunctionBindingInstance.Properties = propertiesInstance2;
                                                    
                                                    JToken endpointValue = propertiesValue3["endpoint"];
                                                    if (endpointValue != null && endpointValue.Type != JTokenType.Null)
                                                    {
                                                        string endpointInstance = ((string)endpointValue);
                                                        propertiesInstance2.Endpoint = endpointInstance;
                                                    }
                                                    
                                                    JToken apiKeyValue = propertiesValue3["apiKey"];
                                                    if (apiKeyValue != null && apiKeyValue.Type != JTokenType.Null)
                                                    {
                                                        string apiKeyInstance = ((string)apiKeyValue);
                                                        propertiesInstance2.ApiKey = apiKeyInstance;
                                                    }
                                                    
                                                    JToken inputsValue2 = propertiesValue3["inputs"];
                                                    if (inputsValue2 != null && inputsValue2.Type != JTokenType.Null)
                                                    {
                                                        AzureMachineLearningWebServiceInputs inputsInstance = new AzureMachineLearningWebServiceInputs();
                                                        propertiesInstance2.Inputs = inputsInstance;
                                                        
                                                        JToken nameValue2 = inputsValue2["name"];
                                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance2 = ((string)nameValue2);
                                                            inputsInstance.Name = nameInstance2;
                                                        }
                                                        
                                                        JToken columnNamesArray = inputsValue2["columnNames"];
                                                        if (columnNamesArray != null && columnNamesArray.Type != JTokenType.Null)
                                                        {
                                                            inputsInstance.ColumnNames = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.AzureMachineLearningWebServiceInputColumn>();
                                                            foreach (JToken columnNamesValue in ((JArray)columnNamesArray))
                                                            {
                                                                AzureMachineLearningWebServiceInputColumn azureMachineLearningWebServiceInputColumnInstance = new AzureMachineLearningWebServiceInputColumn();
                                                                inputsInstance.ColumnNames.Add(azureMachineLearningWebServiceInputColumnInstance);
                                                                
                                                                JToken nameValue3 = columnNamesValue["name"];
                                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                                {
                                                                    string nameInstance3 = ((string)nameValue3);
                                                                    azureMachineLearningWebServiceInputColumnInstance.Name = nameInstance3;
                                                                }
                                                                
                                                                JToken dataTypeValue3 = columnNamesValue["dataType"];
                                                                if (dataTypeValue3 != null && dataTypeValue3.Type != JTokenType.Null)
                                                                {
                                                                    string dataTypeInstance3 = ((string)dataTypeValue3);
                                                                    azureMachineLearningWebServiceInputColumnInstance.DataType = dataTypeInstance3;
                                                                }
                                                                
                                                                JToken mapToValue = columnNamesValue["mapTo"];
                                                                if (mapToValue != null && mapToValue.Type != JTokenType.Null)
                                                                {
                                                                    int mapToInstance = ((int)mapToValue);
                                                                    azureMachineLearningWebServiceInputColumnInstance.MapTo = mapToInstance;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken outputsArray = propertiesValue3["outputs"];
                                                    if (outputsArray != null && outputsArray.Type != JTokenType.Null)
                                                    {
                                                        propertiesInstance2.Outputs = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.AzureMachineLearningWebServiceOutputColumn>();
                                                        foreach (JToken outputsValue in ((JArray)outputsArray))
                                                        {
                                                            AzureMachineLearningWebServiceOutputColumn azureMachineLearningWebServiceOutputColumnInstance = new AzureMachineLearningWebServiceOutputColumn();
                                                            propertiesInstance2.Outputs.Add(azureMachineLearningWebServiceOutputColumnInstance);
                                                            
                                                            JToken nameValue4 = outputsValue["name"];
                                                            if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance4 = ((string)nameValue4);
                                                                azureMachineLearningWebServiceOutputColumnInstance.Name = nameInstance4;
                                                            }
                                                            
                                                            JToken dataTypeValue4 = outputsValue["dataType"];
                                                            if (dataTypeValue4 != null && dataTypeValue4.Type != JTokenType.Null)
                                                            {
                                                                string dataTypeInstance4 = ((string)dataTypeValue4);
                                                                azureMachineLearningWebServiceOutputColumnInstance.DataType = dataTypeInstance4;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken batchSizeValue = propertiesValue3["batchSize"];
                                                    if (batchSizeValue != null && batchSizeValue.Type != JTokenType.Null)
                                                    {
                                                        int batchSizeInstance = ((int)batchSizeValue);
                                                        propertiesInstance2.BatchSize = batchSizeInstance;
                                                    }
                                                }
                                                
                                                JToken typeValue = bindingValue["type"];
                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                {
                                                    string typeInstance = ((string)typeValue);
                                                    azureMachineLearningWebServiceFunctionBindingInstance.Type = typeInstance;
                                                }
                                                propertiesInstance.Binding = azureMachineLearningWebServiceFunctionBindingInstance;
                                            }
                                            if (typeName2 == "Microsoft.StreamAnalytics/JavascriptUdf")
                                            {
                                                JavaScriptFunctionBinding javaScriptFunctionBindingInstance = new JavaScriptFunctionBinding();
                                                
                                                JToken propertiesValue4 = bindingValue["properties"];
                                                if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                                {
                                                    JavaScriptFunctionBindingProperties propertiesInstance3 = new JavaScriptFunctionBindingProperties();
                                                    javaScriptFunctionBindingInstance.Properties = propertiesInstance3;
                                                    
                                                    JToken scriptValue = propertiesValue4["script"];
                                                    if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                                    {
                                                        string scriptInstance = ((string)scriptValue);
                                                        propertiesInstance3.Script = scriptInstance;
                                                    }
                                                }
                                                
                                                JToken typeValue2 = bindingValue["type"];
                                                if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                {
                                                    string typeInstance2 = ((string)typeValue2);
                                                    javaScriptFunctionBindingInstance.Type = typeInstance2;
                                                }
                                                propertiesInstance.Binding = javaScriptFunctionBindingInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken etagValue = propertiesValue["etag"];
                                    if (etagValue != null && etagValue.Type != JTokenType.Null)
                                    {
                                        string etagInstance = ((string)etagValue);
                                        scalarFunctionPropertiesInstance.Etag = etagInstance;
                                    }
                                    
                                    JToken typeValue3 = propertiesValue["type"];
                                    if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                    {
                                        string typeInstance3 = ((string)typeValue3);
                                        scalarFunctionPropertiesInstance.Type = typeInstance3;
                                    }
                                    functionInstance.Properties = scalarFunctionPropertiesInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                    }
                    if (httpResponse.Headers.Contains("ETag"))
                    {
                        result.Function.Properties.Etag = httpResponse.Headers.GetValues("ETag").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve the default definition of a function for a stream
        /// analytics job. The raw json content will be used for the request
        /// body.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='functionName'>
        /// Required. The name of the function for the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to retrieve the default
        /// definition of a function for a stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the retrieve default function definition operation.
        /// </returns>
        public async Task<FunctionRetrieveDefaultDefinitionResponse> RetrieveDefaultDefinitionWithRawJsonContentAsync(string resourceGroupName, string jobName, string functionName, FunctionRetrieveDefaultDefinitionWithRawJsonContentParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (functionName == null)
            {
                throw new ArgumentNullException("functionName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Content == null)
            {
                throw new ArgumentNullException("parameters.Content");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("functionName", functionName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "RetrieveDefaultDefinitionWithRawJsonContentAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.StreamAnalytics/streamingjobs/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/functions/";
            url = url + Uri.EscapeDataString(functionName);
            url = url + "/RetrieveDefaultDefinition";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = parameters.Content;
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FunctionRetrieveDefaultDefinitionResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FunctionRetrieveDefaultDefinitionResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Function functionInstance = new Function();
                            result.Function = functionInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                functionInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue["type"]);
                                if (typeName == "Scalar")
                                {
                                    ScalarFunctionProperties scalarFunctionPropertiesInstance = new ScalarFunctionProperties();
                                    
                                    JToken propertiesValue2 = propertiesValue["properties"];
                                    if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                    {
                                        ScalarFunctionConfiguration propertiesInstance = new ScalarFunctionConfiguration();
                                        scalarFunctionPropertiesInstance.Properties = propertiesInstance;
                                        
                                        JToken inputsArray = propertiesValue2["inputs"];
                                        if (inputsArray != null && inputsArray.Type != JTokenType.Null)
                                        {
                                            propertiesInstance.Inputs = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.FunctionInput>();
                                            foreach (JToken inputsValue in ((JArray)inputsArray))
                                            {
                                                FunctionInput functionInputInstance = new FunctionInput();
                                                propertiesInstance.Inputs.Add(functionInputInstance);
                                                
                                                JToken dataTypeValue = inputsValue["dataType"];
                                                if (dataTypeValue != null && dataTypeValue.Type != JTokenType.Null)
                                                {
                                                    string dataTypeInstance = ((string)dataTypeValue);
                                                    functionInputInstance.DataType = dataTypeInstance;
                                                }
                                                
                                                JToken isConfigurationParameterValue = inputsValue["isConfigurationParameter"];
                                                if (isConfigurationParameterValue != null && isConfigurationParameterValue.Type != JTokenType.Null)
                                                {
                                                    bool isConfigurationParameterInstance = ((bool)isConfigurationParameterValue);
                                                    functionInputInstance.IsConfigurationParameter = isConfigurationParameterInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken outputValue = propertiesValue2["output"];
                                        if (outputValue != null && outputValue.Type != JTokenType.Null)
                                        {
                                            FunctionOutput outputInstance = new FunctionOutput();
                                            propertiesInstance.Output = outputInstance;
                                            
                                            JToken dataTypeValue2 = outputValue["dataType"];
                                            if (dataTypeValue2 != null && dataTypeValue2.Type != JTokenType.Null)
                                            {
                                                string dataTypeInstance2 = ((string)dataTypeValue2);
                                                outputInstance.DataType = dataTypeInstance2;
                                            }
                                        }
                                        
                                        JToken bindingValue = propertiesValue2["binding"];
                                        if (bindingValue != null && bindingValue.Type != JTokenType.Null)
                                        {
                                            string typeName2 = ((string)bindingValue["type"]);
                                            if (typeName2 == "Microsoft.MachineLearning/WebService")
                                            {
                                                AzureMachineLearningWebServiceFunctionBinding azureMachineLearningWebServiceFunctionBindingInstance = new AzureMachineLearningWebServiceFunctionBinding();
                                                
                                                JToken propertiesValue3 = bindingValue["properties"];
                                                if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                                {
                                                    AzureMachineLearningWebServiceFunctionBindingProperties propertiesInstance2 = new AzureMachineLearningWebServiceFunctionBindingProperties();
                                                    azureMachineLearningWebServiceFunctionBindingInstance.Properties = propertiesInstance2;
                                                    
                                                    JToken endpointValue = propertiesValue3["endpoint"];
                                                    if (endpointValue != null && endpointValue.Type != JTokenType.Null)
                                                    {
                                                        string endpointInstance = ((string)endpointValue);
                                                        propertiesInstance2.Endpoint = endpointInstance;
                                                    }
                                                    
                                                    JToken apiKeyValue = propertiesValue3["apiKey"];
                                                    if (apiKeyValue != null && apiKeyValue.Type != JTokenType.Null)
                                                    {
                                                        string apiKeyInstance = ((string)apiKeyValue);
                                                        propertiesInstance2.ApiKey = apiKeyInstance;
                                                    }
                                                    
                                                    JToken inputsValue2 = propertiesValue3["inputs"];
                                                    if (inputsValue2 != null && inputsValue2.Type != JTokenType.Null)
                                                    {
                                                        AzureMachineLearningWebServiceInputs inputsInstance = new AzureMachineLearningWebServiceInputs();
                                                        propertiesInstance2.Inputs = inputsInstance;
                                                        
                                                        JToken nameValue2 = inputsValue2["name"];
                                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance2 = ((string)nameValue2);
                                                            inputsInstance.Name = nameInstance2;
                                                        }
                                                        
                                                        JToken columnNamesArray = inputsValue2["columnNames"];
                                                        if (columnNamesArray != null && columnNamesArray.Type != JTokenType.Null)
                                                        {
                                                            inputsInstance.ColumnNames = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.AzureMachineLearningWebServiceInputColumn>();
                                                            foreach (JToken columnNamesValue in ((JArray)columnNamesArray))
                                                            {
                                                                AzureMachineLearningWebServiceInputColumn azureMachineLearningWebServiceInputColumnInstance = new AzureMachineLearningWebServiceInputColumn();
                                                                inputsInstance.ColumnNames.Add(azureMachineLearningWebServiceInputColumnInstance);
                                                                
                                                                JToken nameValue3 = columnNamesValue["name"];
                                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                                {
                                                                    string nameInstance3 = ((string)nameValue3);
                                                                    azureMachineLearningWebServiceInputColumnInstance.Name = nameInstance3;
                                                                }
                                                                
                                                                JToken dataTypeValue3 = columnNamesValue["dataType"];
                                                                if (dataTypeValue3 != null && dataTypeValue3.Type != JTokenType.Null)
                                                                {
                                                                    string dataTypeInstance3 = ((string)dataTypeValue3);
                                                                    azureMachineLearningWebServiceInputColumnInstance.DataType = dataTypeInstance3;
                                                                }
                                                                
                                                                JToken mapToValue = columnNamesValue["mapTo"];
                                                                if (mapToValue != null && mapToValue.Type != JTokenType.Null)
                                                                {
                                                                    int mapToInstance = ((int)mapToValue);
                                                                    azureMachineLearningWebServiceInputColumnInstance.MapTo = mapToInstance;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken outputsArray = propertiesValue3["outputs"];
                                                    if (outputsArray != null && outputsArray.Type != JTokenType.Null)
                                                    {
                                                        propertiesInstance2.Outputs = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.AzureMachineLearningWebServiceOutputColumn>();
                                                        foreach (JToken outputsValue in ((JArray)outputsArray))
                                                        {
                                                            AzureMachineLearningWebServiceOutputColumn azureMachineLearningWebServiceOutputColumnInstance = new AzureMachineLearningWebServiceOutputColumn();
                                                            propertiesInstance2.Outputs.Add(azureMachineLearningWebServiceOutputColumnInstance);
                                                            
                                                            JToken nameValue4 = outputsValue["name"];
                                                            if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance4 = ((string)nameValue4);
                                                                azureMachineLearningWebServiceOutputColumnInstance.Name = nameInstance4;
                                                            }
                                                            
                                                            JToken dataTypeValue4 = outputsValue["dataType"];
                                                            if (dataTypeValue4 != null && dataTypeValue4.Type != JTokenType.Null)
                                                            {
                                                                string dataTypeInstance4 = ((string)dataTypeValue4);
                                                                azureMachineLearningWebServiceOutputColumnInstance.DataType = dataTypeInstance4;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken batchSizeValue = propertiesValue3["batchSize"];
                                                    if (batchSizeValue != null && batchSizeValue.Type != JTokenType.Null)
                                                    {
                                                        int batchSizeInstance = ((int)batchSizeValue);
                                                        propertiesInstance2.BatchSize = batchSizeInstance;
                                                    }
                                                }
                                                
                                                JToken typeValue = bindingValue["type"];
                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                {
                                                    string typeInstance = ((string)typeValue);
                                                    azureMachineLearningWebServiceFunctionBindingInstance.Type = typeInstance;
                                                }
                                                propertiesInstance.Binding = azureMachineLearningWebServiceFunctionBindingInstance;
                                            }
                                            if (typeName2 == "Microsoft.StreamAnalytics/JavascriptUdf")
                                            {
                                                JavaScriptFunctionBinding javaScriptFunctionBindingInstance = new JavaScriptFunctionBinding();
                                                
                                                JToken propertiesValue4 = bindingValue["properties"];
                                                if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                                {
                                                    JavaScriptFunctionBindingProperties propertiesInstance3 = new JavaScriptFunctionBindingProperties();
                                                    javaScriptFunctionBindingInstance.Properties = propertiesInstance3;
                                                    
                                                    JToken scriptValue = propertiesValue4["script"];
                                                    if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                                    {
                                                        string scriptInstance = ((string)scriptValue);
                                                        propertiesInstance3.Script = scriptInstance;
                                                    }
                                                }
                                                
                                                JToken typeValue2 = bindingValue["type"];
                                                if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                {
                                                    string typeInstance2 = ((string)typeValue2);
                                                    javaScriptFunctionBindingInstance.Type = typeInstance2;
                                                }
                                                propertiesInstance.Binding = javaScriptFunctionBindingInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken etagValue = propertiesValue["etag"];
                                    if (etagValue != null && etagValue.Type != JTokenType.Null)
                                    {
                                        string etagInstance = ((string)etagValue);
                                        scalarFunctionPropertiesInstance.Etag = etagInstance;
                                    }
                                    
                                    JToken typeValue3 = propertiesValue["type"];
                                    if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                    {
                                        string typeInstance3 = ((string)typeValue3);
                                        scalarFunctionPropertiesInstance.Type = typeInstance3;
                                    }
                                    functionInstance.Properties = scalarFunctionPropertiesInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                    }
                    if (httpResponse.Headers.Contains("ETag"))
                    {
                        result.Function.Properties.Etag = httpResponse.Headers.GetValues("ETag").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Test the connectivity of a function for a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='functionName'>
        /// Required. The name of the function for the stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The test result of the input or output data source.
        /// </returns>
        public async Task<ResourceTestConnectionResponse> TestConnectionAsync(string resourceGroupName, string jobName, string functionName, CancellationToken cancellationToken)
        {
            StreamAnalyticsManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("functionName", functionName);
                TracingAdapter.Enter(invocationId, this, "TestConnectionAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ResourceTestConnectionResponse response = await client.Functions.BeginTestConnectionAsync(resourceGroupName, jobName, functionName, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            ResourceTestConnectionResponse result = await client.GetTestConnectionStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 10;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetTestConnectionStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 10;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
    }
}
