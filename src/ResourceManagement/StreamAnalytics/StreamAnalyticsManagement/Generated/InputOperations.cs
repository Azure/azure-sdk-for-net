// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.StreamAnalytics;
using Microsoft.Azure.Management.StreamAnalytics.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.StreamAnalytics
{
    /// <summary>
    /// Operations for managing the input(s) of the stream analytics job.
    /// </summary>
    internal partial class InputOperations : IServiceOperations<StreamAnalyticsManagementClient>, IInputOperations
    {
        /// <summary>
        /// Initializes a new instance of the InputOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal InputOperations(StreamAnalyticsManagementClient client)
        {
            this._client = client;
        }
        
        private StreamAnalyticsManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.StreamAnalytics.StreamAnalyticsManagementClient.
        /// </summary>
        public StreamAnalyticsManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Test the connectivity of an input for a stream analytics job.
        /// Asynchronous call.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='inputName'>
        /// Required. The name of the input for the stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The test result of the input or output data source.
        /// </returns>
        public async Task<ResourceTestConnectionResponse> BeginTestConnectionAsync(string resourceGroupName, string jobName, string inputName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (inputName == null)
            {
                throw new ArgumentNullException("inputName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("inputName", inputName);
                TracingAdapter.Enter(invocationId, this, "BeginTestConnectionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.StreamAnalytics/streamingjobs/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/inputs/";
            url = url + Uri.EscapeDataString(inputName);
            url = url + "/test";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.BadRequest && statusCode != HttpStatusCode.NotFound)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ResourceTestConnectionResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.BadRequest || statusCode == HttpStatusCode.NotFound)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ResourceTestConnectionResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken statusValue = responseDoc["status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                string statusInstance = ((string)statusValue);
                                result.ResourceTestStatus = statusInstance;
                            }
                            
                            JToken errorValue = responseDoc["error"];
                            if (errorValue != null && errorValue.Type != JTokenType.Null)
                            {
                                ErrorResponse errorInstance = new ErrorResponse();
                                result.Error = errorInstance;
                                
                                JToken codeValue = errorValue["code"];
                                if (codeValue != null && codeValue.Type != JTokenType.Null)
                                {
                                    string codeInstance = ((string)codeValue);
                                    errorInstance.Code = codeInstance;
                                }
                                
                                JToken messageValue = errorValue["message"];
                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                {
                                    string messageInstance = ((string)messageValue);
                                    errorInstance.Message = messageInstance;
                                }
                                
                                JToken detailsValue = errorValue["details"];
                                if (detailsValue != null && detailsValue.Type != JTokenType.Null)
                                {
                                    ErrorDetailsResponse detailsInstance = new ErrorDetailsResponse();
                                    errorInstance.Details = detailsInstance;
                                    
                                    JToken codeValue2 = detailsValue["code"];
                                    if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                    {
                                        string codeInstance2 = ((string)codeValue2);
                                        detailsInstance.Code = codeInstance2;
                                    }
                                    
                                    JToken messageValue2 = detailsValue["message"];
                                    if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                    {
                                        string messageInstance2 = ((string)messageValue2);
                                        detailsInstance.Message = messageInstance2;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.BadRequest)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.NotFound)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create or update an input for a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update an input for
        /// a stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the input CreateOrUpdate operation.
        /// </returns>
        public async Task<InputCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string jobName, InputCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Input != null)
            {
                if (parameters.Input.Name == null)
                {
                    throw new ArgumentNullException("parameters.Input.Name");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.StreamAnalytics/streamingjobs/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/inputs/";
            if (parameters.Input != null && parameters.Input.Name != null)
            {
                url = url + Uri.EscapeDataString(parameters.Input.Name);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject inputCreateOrUpdateParametersValue = new JObject();
                requestDoc = inputCreateOrUpdateParametersValue;
                
                if (parameters.Input != null)
                {
                    inputCreateOrUpdateParametersValue["name"] = parameters.Input.Name;
                    
                    if (parameters.Input.Properties != null)
                    {
                        JObject propertiesValue = new JObject();
                        inputCreateOrUpdateParametersValue["properties"] = propertiesValue;
                        if (parameters.Input.Properties is ReferenceInputProperties)
                        {
                            propertiesValue["type"] = "Reference";
                            ReferenceInputProperties derived = ((ReferenceInputProperties)parameters.Input.Properties);
                            
                            if (derived.DataSource != null)
                            {
                                JObject datasourceValue = new JObject();
                                propertiesValue["datasource"] = datasourceValue;
                                if (derived.DataSource is BlobReferenceInputDataSource)
                                {
                                    datasourceValue["type"] = "Microsoft.Storage/Blob";
                                    BlobReferenceInputDataSource derived2 = ((BlobReferenceInputDataSource)derived.DataSource);
                                    
                                    if (derived2.Properties != null)
                                    {
                                        JObject propertiesValue2 = new JObject();
                                        datasourceValue["properties"] = propertiesValue2;
                                        
                                        if (derived2.Properties.StorageAccounts != null)
                                        {
                                            JArray storageAccountsArray = new JArray();
                                            foreach (StorageAccount storageAccountsItem in derived2.Properties.StorageAccounts)
                                            {
                                                JObject storageAccountValue = new JObject();
                                                storageAccountsArray.Add(storageAccountValue);
                                                
                                                if (storageAccountsItem.AccountName != null)
                                                {
                                                    storageAccountValue["accountName"] = storageAccountsItem.AccountName;
                                                }
                                                
                                                if (storageAccountsItem.AccountKey != null)
                                                {
                                                    storageAccountValue["accountKey"] = storageAccountsItem.AccountKey;
                                                }
                                            }
                                            propertiesValue2["storageAccounts"] = storageAccountsArray;
                                        }
                                        
                                        if (derived2.Properties.Container != null)
                                        {
                                            propertiesValue2["container"] = derived2.Properties.Container;
                                        }
                                        
                                        if (derived2.Properties.PathPattern != null)
                                        {
                                            propertiesValue2["pathPattern"] = derived2.Properties.PathPattern;
                                        }
                                        
                                        if (derived2.Properties.DateFormat != null)
                                        {
                                            propertiesValue2["dateFormat"] = derived2.Properties.DateFormat;
                                        }
                                        
                                        if (derived2.Properties.TimeFormat != null)
                                        {
                                            propertiesValue2["timeFormat"] = derived2.Properties.TimeFormat;
                                        }
                                    }
                                    
                                    if (derived2.Type != null)
                                    {
                                        datasourceValue["type"] = derived2.Type;
                                    }
                                }
                            }
                            
                            if (derived.Etag != null)
                            {
                                propertiesValue["etag"] = derived.Etag;
                            }
                            
                            if (derived.Type != null)
                            {
                                propertiesValue["type"] = derived.Type;
                            }
                            
                            if (derived.Serialization != null)
                            {
                                JObject serializationValue = new JObject();
                                propertiesValue["serialization"] = serializationValue;
                                if (derived.Serialization is CsvSerialization)
                                {
                                    serializationValue["type"] = "Csv";
                                    CsvSerialization derived3 = ((CsvSerialization)derived.Serialization);
                                    
                                    if (derived3.Properties != null)
                                    {
                                        JObject propertiesValue3 = new JObject();
                                        serializationValue["properties"] = propertiesValue3;
                                        
                                        if (derived3.Properties.FieldDelimiter != null)
                                        {
                                            propertiesValue3["fieldDelimiter"] = derived3.Properties.FieldDelimiter;
                                        }
                                        
                                        if (derived3.Properties.Encoding != null)
                                        {
                                            propertiesValue3["encoding"] = derived3.Properties.Encoding;
                                        }
                                    }
                                    
                                    if (derived3.Type != null)
                                    {
                                        serializationValue["type"] = derived3.Type;
                                    }
                                }
                                if (derived.Serialization is JsonSerialization)
                                {
                                    serializationValue["type"] = "Json";
                                    JsonSerialization derived4 = ((JsonSerialization)derived.Serialization);
                                    
                                    if (derived4.Properties != null)
                                    {
                                        JObject propertiesValue4 = new JObject();
                                        serializationValue["properties"] = propertiesValue4;
                                        
                                        if (derived4.Properties.Encoding != null)
                                        {
                                            propertiesValue4["encoding"] = derived4.Properties.Encoding;
                                        }
                                        
                                        if (derived4.Properties.Format != null)
                                        {
                                            propertiesValue4["format"] = derived4.Properties.Format;
                                        }
                                    }
                                    
                                    if (derived4.Type != null)
                                    {
                                        serializationValue["type"] = derived4.Type;
                                    }
                                }
                                if (derived.Serialization is AvroSerialization)
                                {
                                    serializationValue["type"] = "Avro";
                                    AvroSerialization derived5 = ((AvroSerialization)derived.Serialization);
                                    
                                    if (derived5.Properties != null)
                                    {
                                        serializationValue["properties"] = derived5.Properties.ToString();
                                    }
                                    
                                    if (derived5.Type != null)
                                    {
                                        serializationValue["type"] = derived5.Type;
                                    }
                                }
                            }
                            
                            if (derived.Diagnostics != null)
                            {
                                JObject diagnosticsValue = new JObject();
                                propertiesValue["diagnostics"] = diagnosticsValue;
                                
                                if (derived.Diagnostics.Conditions != null)
                                {
                                    if (derived.Diagnostics.Conditions is ILazyCollection == false || ((ILazyCollection)derived.Diagnostics.Conditions).IsInitialized)
                                    {
                                        JArray conditionsArray = new JArray();
                                        foreach (DiagnosticCondition conditionsItem in derived.Diagnostics.Conditions)
                                        {
                                            JObject diagnosticConditionValue = new JObject();
                                            conditionsArray.Add(diagnosticConditionValue);
                                            
                                            if (conditionsItem.Since != null)
                                            {
                                                diagnosticConditionValue["since"] = conditionsItem.Since.Value;
                                            }
                                            
                                            if (conditionsItem.Code != null)
                                            {
                                                diagnosticConditionValue["code"] = conditionsItem.Code;
                                            }
                                            
                                            if (conditionsItem.Message != null)
                                            {
                                                diagnosticConditionValue["message"] = conditionsItem.Message;
                                            }
                                        }
                                        diagnosticsValue["conditions"] = conditionsArray;
                                    }
                                }
                            }
                        }
                        if (parameters.Input.Properties is StreamInputProperties)
                        {
                            propertiesValue["type"] = "Stream";
                            StreamInputProperties derived6 = ((StreamInputProperties)parameters.Input.Properties);
                            
                            if (derived6.DataSource != null)
                            {
                                JObject datasourceValue2 = new JObject();
                                propertiesValue["datasource"] = datasourceValue2;
                                if (derived6.DataSource is BlobStreamInputDataSource)
                                {
                                    datasourceValue2["type"] = "Microsoft.Storage/Blob";
                                    BlobStreamInputDataSource derived7 = ((BlobStreamInputDataSource)derived6.DataSource);
                                    
                                    if (derived7.Properties != null)
                                    {
                                        JObject propertiesValue5 = new JObject();
                                        datasourceValue2["properties"] = propertiesValue5;
                                        
                                        if (derived7.Properties.StorageAccounts != null)
                                        {
                                            JArray storageAccountsArray2 = new JArray();
                                            foreach (StorageAccount storageAccountsItem2 in derived7.Properties.StorageAccounts)
                                            {
                                                JObject storageAccountValue2 = new JObject();
                                                storageAccountsArray2.Add(storageAccountValue2);
                                                
                                                if (storageAccountsItem2.AccountName != null)
                                                {
                                                    storageAccountValue2["accountName"] = storageAccountsItem2.AccountName;
                                                }
                                                
                                                if (storageAccountsItem2.AccountKey != null)
                                                {
                                                    storageAccountValue2["accountKey"] = storageAccountsItem2.AccountKey;
                                                }
                                            }
                                            propertiesValue5["storageAccounts"] = storageAccountsArray2;
                                        }
                                        
                                        if (derived7.Properties.Container != null)
                                        {
                                            propertiesValue5["container"] = derived7.Properties.Container;
                                        }
                                        
                                        if (derived7.Properties.PathPattern != null)
                                        {
                                            propertiesValue5["pathPattern"] = derived7.Properties.PathPattern;
                                        }
                                        
                                        if (derived7.Properties.DateFormat != null)
                                        {
                                            propertiesValue5["dateFormat"] = derived7.Properties.DateFormat;
                                        }
                                        
                                        if (derived7.Properties.TimeFormat != null)
                                        {
                                            propertiesValue5["timeFormat"] = derived7.Properties.TimeFormat;
                                        }
                                        
                                        if (derived7.Properties.SourcePartitionCount != null)
                                        {
                                            propertiesValue5["sourcePartitionCount"] = derived7.Properties.SourcePartitionCount.Value;
                                        }
                                    }
                                    
                                    if (derived7.Type != null)
                                    {
                                        datasourceValue2["type"] = derived7.Type;
                                    }
                                }
                                if (derived6.DataSource is EventHubStreamInputDataSource)
                                {
                                    datasourceValue2["type"] = "Microsoft.ServiceBus/EventHub";
                                    EventHubStreamInputDataSource derived8 = ((EventHubStreamInputDataSource)derived6.DataSource);
                                    
                                    if (derived8.Properties != null)
                                    {
                                        JObject propertiesValue6 = new JObject();
                                        datasourceValue2["properties"] = propertiesValue6;
                                        
                                        if (derived8.Properties.ServiceBusNamespace != null)
                                        {
                                            propertiesValue6["serviceBusNamespace"] = derived8.Properties.ServiceBusNamespace;
                                        }
                                        
                                        if (derived8.Properties.SharedAccessPolicyName != null)
                                        {
                                            propertiesValue6["sharedAccessPolicyName"] = derived8.Properties.SharedAccessPolicyName;
                                        }
                                        
                                        if (derived8.Properties.SharedAccessPolicyKey != null)
                                        {
                                            propertiesValue6["sharedAccessPolicyKey"] = derived8.Properties.SharedAccessPolicyKey;
                                        }
                                        
                                        if (derived8.Properties.EventHubName != null)
                                        {
                                            propertiesValue6["eventHubName"] = derived8.Properties.EventHubName;
                                        }
                                        
                                        if (derived8.Properties.ConsumerGroupName != null)
                                        {
                                            propertiesValue6["consumerGroupName"] = derived8.Properties.ConsumerGroupName;
                                        }
                                    }
                                    
                                    if (derived8.Type != null)
                                    {
                                        datasourceValue2["type"] = derived8.Type;
                                    }
                                }
                                if (derived6.DataSource is IoTHubStreamInputDataSource)
                                {
                                    datasourceValue2["type"] = "Microsoft.Devices/IotHubs";
                                    IoTHubStreamInputDataSource derived9 = ((IoTHubStreamInputDataSource)derived6.DataSource);
                                    
                                    if (derived9.Properties != null)
                                    {
                                        JObject propertiesValue7 = new JObject();
                                        datasourceValue2["properties"] = propertiesValue7;
                                        
                                        if (derived9.Properties.IotHubNamespace != null)
                                        {
                                            propertiesValue7["iotHubNamespace"] = derived9.Properties.IotHubNamespace;
                                        }
                                        
                                        if (derived9.Properties.SharedAccessPolicyName != null)
                                        {
                                            propertiesValue7["sharedAccessPolicyName"] = derived9.Properties.SharedAccessPolicyName;
                                        }
                                        
                                        if (derived9.Properties.SharedAccessPolicyKey != null)
                                        {
                                            propertiesValue7["sharedAccessPolicyKey"] = derived9.Properties.SharedAccessPolicyKey;
                                        }
                                        
                                        if (derived9.Properties.ConsumerGroupName != null)
                                        {
                                            propertiesValue7["consumerGroupName"] = derived9.Properties.ConsumerGroupName;
                                        }
                                    }
                                    
                                    if (derived9.Type != null)
                                    {
                                        datasourceValue2["type"] = derived9.Type;
                                    }
                                }
                            }
                            
                            if (derived6.Etag != null)
                            {
                                propertiesValue["etag"] = derived6.Etag;
                            }
                            
                            if (derived6.Type != null)
                            {
                                propertiesValue["type"] = derived6.Type;
                            }
                            
                            if (derived6.Serialization != null)
                            {
                                JObject serializationValue2 = new JObject();
                                propertiesValue["serialization"] = serializationValue2;
                                if (derived6.Serialization is CsvSerialization)
                                {
                                    serializationValue2["type"] = "Csv";
                                    CsvSerialization derived10 = ((CsvSerialization)derived6.Serialization);
                                    
                                    if (derived10.Properties != null)
                                    {
                                        JObject propertiesValue8 = new JObject();
                                        serializationValue2["properties"] = propertiesValue8;
                                        
                                        if (derived10.Properties.FieldDelimiter != null)
                                        {
                                            propertiesValue8["fieldDelimiter"] = derived10.Properties.FieldDelimiter;
                                        }
                                        
                                        if (derived10.Properties.Encoding != null)
                                        {
                                            propertiesValue8["encoding"] = derived10.Properties.Encoding;
                                        }
                                    }
                                    
                                    if (derived10.Type != null)
                                    {
                                        serializationValue2["type"] = derived10.Type;
                                    }
                                }
                                if (derived6.Serialization is JsonSerialization)
                                {
                                    serializationValue2["type"] = "Json";
                                    JsonSerialization derived11 = ((JsonSerialization)derived6.Serialization);
                                    
                                    if (derived11.Properties != null)
                                    {
                                        JObject propertiesValue9 = new JObject();
                                        serializationValue2["properties"] = propertiesValue9;
                                        
                                        if (derived11.Properties.Encoding != null)
                                        {
                                            propertiesValue9["encoding"] = derived11.Properties.Encoding;
                                        }
                                        
                                        if (derived11.Properties.Format != null)
                                        {
                                            propertiesValue9["format"] = derived11.Properties.Format;
                                        }
                                    }
                                    
                                    if (derived11.Type != null)
                                    {
                                        serializationValue2["type"] = derived11.Type;
                                    }
                                }
                                if (derived6.Serialization is AvroSerialization)
                                {
                                    serializationValue2["type"] = "Avro";
                                    AvroSerialization derived12 = ((AvroSerialization)derived6.Serialization);
                                    
                                    if (derived12.Properties != null)
                                    {
                                        serializationValue2["properties"] = derived12.Properties.ToString();
                                    }
                                    
                                    if (derived12.Type != null)
                                    {
                                        serializationValue2["type"] = derived12.Type;
                                    }
                                }
                            }
                            
                            if (derived6.Diagnostics != null)
                            {
                                JObject diagnosticsValue2 = new JObject();
                                propertiesValue["diagnostics"] = diagnosticsValue2;
                                
                                if (derived6.Diagnostics.Conditions != null)
                                {
                                    if (derived6.Diagnostics.Conditions is ILazyCollection == false || ((ILazyCollection)derived6.Diagnostics.Conditions).IsInitialized)
                                    {
                                        JArray conditionsArray2 = new JArray();
                                        foreach (DiagnosticCondition conditionsItem2 in derived6.Diagnostics.Conditions)
                                        {
                                            JObject diagnosticConditionValue2 = new JObject();
                                            conditionsArray2.Add(diagnosticConditionValue2);
                                            
                                            if (conditionsItem2.Since != null)
                                            {
                                                diagnosticConditionValue2["since"] = conditionsItem2.Since.Value;
                                            }
                                            
                                            if (conditionsItem2.Code != null)
                                            {
                                                diagnosticConditionValue2["code"] = conditionsItem2.Code;
                                            }
                                            
                                            if (conditionsItem2.Message != null)
                                            {
                                                diagnosticConditionValue2["message"] = conditionsItem2.Message;
                                            }
                                        }
                                        diagnosticsValue2["conditions"] = conditionsArray2;
                                    }
                                }
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    InputCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new InputCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Input inputInstance = new Input();
                            result.Input = inputInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                inputInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue10 = responseDoc["properties"];
                            if (propertiesValue10 != null && propertiesValue10.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue10["type"]);
                                if (typeName == "Reference")
                                {
                                    ReferenceInputProperties referenceInputPropertiesInstance = new ReferenceInputProperties();
                                    
                                    JToken datasourceValue3 = propertiesValue10["datasource"];
                                    if (datasourceValue3 != null && datasourceValue3.Type != JTokenType.Null)
                                    {
                                        string typeName2 = ((string)datasourceValue3["type"]);
                                        if (typeName2 == "Microsoft.Storage/Blob")
                                        {
                                            BlobReferenceInputDataSource blobReferenceInputDataSourceInstance = new BlobReferenceInputDataSource();
                                            
                                            JToken propertiesValue11 = datasourceValue3["properties"];
                                            if (propertiesValue11 != null && propertiesValue11.Type != JTokenType.Null)
                                            {
                                                BlobReferenceInputDataSourceProperties propertiesInstance = new BlobReferenceInputDataSourceProperties();
                                                blobReferenceInputDataSourceInstance.Properties = propertiesInstance;
                                                
                                                JToken storageAccountsArray3 = propertiesValue11["storageAccounts"];
                                                if (storageAccountsArray3 != null && storageAccountsArray3.Type != JTokenType.Null)
                                                {
                                                    propertiesInstance.StorageAccounts = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.StorageAccount>();
                                                    foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray3))
                                                    {
                                                        StorageAccount storageAccountInstance = new StorageAccount();
                                                        propertiesInstance.StorageAccounts.Add(storageAccountInstance);
                                                        
                                                        JToken accountNameValue = storageAccountsValue["accountName"];
                                                        if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                        {
                                                            string accountNameInstance = ((string)accountNameValue);
                                                            storageAccountInstance.AccountName = accountNameInstance;
                                                        }
                                                        
                                                        JToken accountKeyValue = storageAccountsValue["accountKey"];
                                                        if (accountKeyValue != null && accountKeyValue.Type != JTokenType.Null)
                                                        {
                                                            string accountKeyInstance = ((string)accountKeyValue);
                                                            storageAccountInstance.AccountKey = accountKeyInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken containerValue = propertiesValue11["container"];
                                                if (containerValue != null && containerValue.Type != JTokenType.Null)
                                                {
                                                    string containerInstance = ((string)containerValue);
                                                    propertiesInstance.Container = containerInstance;
                                                }
                                                
                                                JToken pathPatternValue = propertiesValue11["pathPattern"];
                                                if (pathPatternValue != null && pathPatternValue.Type != JTokenType.Null)
                                                {
                                                    string pathPatternInstance = ((string)pathPatternValue);
                                                    propertiesInstance.PathPattern = pathPatternInstance;
                                                }
                                                
                                                JToken dateFormatValue = propertiesValue11["dateFormat"];
                                                if (dateFormatValue != null && dateFormatValue.Type != JTokenType.Null)
                                                {
                                                    string dateFormatInstance = ((string)dateFormatValue);
                                                    propertiesInstance.DateFormat = dateFormatInstance;
                                                }
                                                
                                                JToken timeFormatValue = propertiesValue11["timeFormat"];
                                                if (timeFormatValue != null && timeFormatValue.Type != JTokenType.Null)
                                                {
                                                    string timeFormatInstance = ((string)timeFormatValue);
                                                    propertiesInstance.TimeFormat = timeFormatInstance;
                                                }
                                            }
                                            
                                            JToken typeValue = datasourceValue3["type"];
                                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                                            {
                                                string typeInstance = ((string)typeValue);
                                                blobReferenceInputDataSourceInstance.Type = typeInstance;
                                            }
                                            referenceInputPropertiesInstance.DataSource = blobReferenceInputDataSourceInstance;
                                        }
                                    }
                                    
                                    JToken etagValue = propertiesValue10["etag"];
                                    if (etagValue != null && etagValue.Type != JTokenType.Null)
                                    {
                                        string etagInstance = ((string)etagValue);
                                        referenceInputPropertiesInstance.Etag = etagInstance;
                                    }
                                    
                                    JToken typeValue2 = propertiesValue10["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        referenceInputPropertiesInstance.Type = typeInstance2;
                                    }
                                    
                                    JToken serializationValue3 = propertiesValue10["serialization"];
                                    if (serializationValue3 != null && serializationValue3.Type != JTokenType.Null)
                                    {
                                        string typeName3 = ((string)serializationValue3["type"]);
                                        if (typeName3 == "Csv")
                                        {
                                            CsvSerialization csvSerializationInstance = new CsvSerialization();
                                            
                                            JToken propertiesValue12 = serializationValue3["properties"];
                                            if (propertiesValue12 != null && propertiesValue12.Type != JTokenType.Null)
                                            {
                                                CsvSerializationProperties propertiesInstance2 = new CsvSerializationProperties();
                                                csvSerializationInstance.Properties = propertiesInstance2;
                                                
                                                JToken fieldDelimiterValue = propertiesValue12["fieldDelimiter"];
                                                if (fieldDelimiterValue != null && fieldDelimiterValue.Type != JTokenType.Null)
                                                {
                                                    string fieldDelimiterInstance = ((string)fieldDelimiterValue);
                                                    propertiesInstance2.FieldDelimiter = fieldDelimiterInstance;
                                                }
                                                
                                                JToken encodingValue = propertiesValue12["encoding"];
                                                if (encodingValue != null && encodingValue.Type != JTokenType.Null)
                                                {
                                                    string encodingInstance = ((string)encodingValue);
                                                    propertiesInstance2.Encoding = encodingInstance;
                                                }
                                            }
                                            
                                            JToken typeValue3 = serializationValue3["type"];
                                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                            {
                                                string typeInstance3 = ((string)typeValue3);
                                                csvSerializationInstance.Type = typeInstance3;
                                            }
                                            referenceInputPropertiesInstance.Serialization = csvSerializationInstance;
                                        }
                                        if (typeName3 == "Json")
                                        {
                                            JsonSerialization jsonSerializationInstance = new JsonSerialization();
                                            
                                            JToken propertiesValue13 = serializationValue3["properties"];
                                            if (propertiesValue13 != null && propertiesValue13.Type != JTokenType.Null)
                                            {
                                                JsonSerializationProperties propertiesInstance3 = new JsonSerializationProperties();
                                                jsonSerializationInstance.Properties = propertiesInstance3;
                                                
                                                JToken encodingValue2 = propertiesValue13["encoding"];
                                                if (encodingValue2 != null && encodingValue2.Type != JTokenType.Null)
                                                {
                                                    string encodingInstance2 = ((string)encodingValue2);
                                                    propertiesInstance3.Encoding = encodingInstance2;
                                                }
                                                
                                                JToken formatValue = propertiesValue13["format"];
                                                if (formatValue != null && formatValue.Type != JTokenType.Null)
                                                {
                                                    string formatInstance = ((string)formatValue);
                                                    propertiesInstance3.Format = formatInstance;
                                                }
                                            }
                                            
                                            JToken typeValue4 = serializationValue3["type"];
                                            if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                            {
                                                string typeInstance4 = ((string)typeValue4);
                                                jsonSerializationInstance.Type = typeInstance4;
                                            }
                                            referenceInputPropertiesInstance.Serialization = jsonSerializationInstance;
                                        }
                                        if (typeName3 == "Avro")
                                        {
                                            AvroSerialization avroSerializationInstance = new AvroSerialization();
                                            
                                            JToken propertiesValue14 = serializationValue3["properties"];
                                            if (propertiesValue14 != null && propertiesValue14.Type != JTokenType.Null)
                                            {
                                                AvroSerializationProperties propertiesInstance4 = new AvroSerializationProperties();
                                                avroSerializationInstance.Properties = propertiesInstance4;
                                            }
                                            
                                            JToken typeValue5 = serializationValue3["type"];
                                            if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                            {
                                                string typeInstance5 = ((string)typeValue5);
                                                avroSerializationInstance.Type = typeInstance5;
                                            }
                                            referenceInputPropertiesInstance.Serialization = avroSerializationInstance;
                                        }
                                    }
                                    
                                    JToken diagnosticsValue3 = propertiesValue10["diagnostics"];
                                    if (diagnosticsValue3 != null && diagnosticsValue3.Type != JTokenType.Null)
                                    {
                                        Diagnostics diagnosticsInstance = new Diagnostics();
                                        referenceInputPropertiesInstance.Diagnostics = diagnosticsInstance;
                                        
                                        JToken conditionsArray3 = diagnosticsValue3["conditions"];
                                        if (conditionsArray3 != null && conditionsArray3.Type != JTokenType.Null)
                                        {
                                            foreach (JToken conditionsValue in ((JArray)conditionsArray3))
                                            {
                                                DiagnosticCondition diagnosticConditionInstance = new DiagnosticCondition();
                                                diagnosticsInstance.Conditions.Add(diagnosticConditionInstance);
                                                
                                                JToken sinceValue = conditionsValue["since"];
                                                if (sinceValue != null && sinceValue.Type != JTokenType.Null)
                                                {
                                                    DateTime sinceInstance = ((DateTime)sinceValue);
                                                    diagnosticConditionInstance.Since = sinceInstance;
                                                }
                                                
                                                JToken codeValue = conditionsValue["code"];
                                                if (codeValue != null && codeValue.Type != JTokenType.Null)
                                                {
                                                    string codeInstance = ((string)codeValue);
                                                    diagnosticConditionInstance.Code = codeInstance;
                                                }
                                                
                                                JToken messageValue = conditionsValue["message"];
                                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                {
                                                    string messageInstance = ((string)messageValue);
                                                    diagnosticConditionInstance.Message = messageInstance;
                                                }
                                            }
                                        }
                                    }
                                    inputInstance.Properties = referenceInputPropertiesInstance;
                                }
                                if (typeName == "Stream")
                                {
                                    StreamInputProperties streamInputPropertiesInstance = new StreamInputProperties();
                                    
                                    JToken datasourceValue4 = propertiesValue10["datasource"];
                                    if (datasourceValue4 != null && datasourceValue4.Type != JTokenType.Null)
                                    {
                                        string typeName4 = ((string)datasourceValue4["type"]);
                                        if (typeName4 == "Microsoft.Storage/Blob")
                                        {
                                            BlobStreamInputDataSource blobStreamInputDataSourceInstance = new BlobStreamInputDataSource();
                                            
                                            JToken propertiesValue15 = datasourceValue4["properties"];
                                            if (propertiesValue15 != null && propertiesValue15.Type != JTokenType.Null)
                                            {
                                                BlobStreamInputDataSourceProperties propertiesInstance5 = new BlobStreamInputDataSourceProperties();
                                                blobStreamInputDataSourceInstance.Properties = propertiesInstance5;
                                                
                                                JToken storageAccountsArray4 = propertiesValue15["storageAccounts"];
                                                if (storageAccountsArray4 != null && storageAccountsArray4.Type != JTokenType.Null)
                                                {
                                                    propertiesInstance5.StorageAccounts = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.StorageAccount>();
                                                    foreach (JToken storageAccountsValue2 in ((JArray)storageAccountsArray4))
                                                    {
                                                        StorageAccount storageAccountInstance2 = new StorageAccount();
                                                        propertiesInstance5.StorageAccounts.Add(storageAccountInstance2);
                                                        
                                                        JToken accountNameValue2 = storageAccountsValue2["accountName"];
                                                        if (accountNameValue2 != null && accountNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string accountNameInstance2 = ((string)accountNameValue2);
                                                            storageAccountInstance2.AccountName = accountNameInstance2;
                                                        }
                                                        
                                                        JToken accountKeyValue2 = storageAccountsValue2["accountKey"];
                                                        if (accountKeyValue2 != null && accountKeyValue2.Type != JTokenType.Null)
                                                        {
                                                            string accountKeyInstance2 = ((string)accountKeyValue2);
                                                            storageAccountInstance2.AccountKey = accountKeyInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                JToken containerValue2 = propertiesValue15["container"];
                                                if (containerValue2 != null && containerValue2.Type != JTokenType.Null)
                                                {
                                                    string containerInstance2 = ((string)containerValue2);
                                                    propertiesInstance5.Container = containerInstance2;
                                                }
                                                
                                                JToken pathPatternValue2 = propertiesValue15["pathPattern"];
                                                if (pathPatternValue2 != null && pathPatternValue2.Type != JTokenType.Null)
                                                {
                                                    string pathPatternInstance2 = ((string)pathPatternValue2);
                                                    propertiesInstance5.PathPattern = pathPatternInstance2;
                                                }
                                                
                                                JToken dateFormatValue2 = propertiesValue15["dateFormat"];
                                                if (dateFormatValue2 != null && dateFormatValue2.Type != JTokenType.Null)
                                                {
                                                    string dateFormatInstance2 = ((string)dateFormatValue2);
                                                    propertiesInstance5.DateFormat = dateFormatInstance2;
                                                }
                                                
                                                JToken timeFormatValue2 = propertiesValue15["timeFormat"];
                                                if (timeFormatValue2 != null && timeFormatValue2.Type != JTokenType.Null)
                                                {
                                                    string timeFormatInstance2 = ((string)timeFormatValue2);
                                                    propertiesInstance5.TimeFormat = timeFormatInstance2;
                                                }
                                                
                                                JToken sourcePartitionCountValue = propertiesValue15["sourcePartitionCount"];
                                                if (sourcePartitionCountValue != null && sourcePartitionCountValue.Type != JTokenType.Null)
                                                {
                                                    int sourcePartitionCountInstance = ((int)sourcePartitionCountValue);
                                                    propertiesInstance5.SourcePartitionCount = sourcePartitionCountInstance;
                                                }
                                            }
                                            
                                            JToken typeValue6 = datasourceValue4["type"];
                                            if (typeValue6 != null && typeValue6.Type != JTokenType.Null)
                                            {
                                                string typeInstance6 = ((string)typeValue6);
                                                blobStreamInputDataSourceInstance.Type = typeInstance6;
                                            }
                                            streamInputPropertiesInstance.DataSource = blobStreamInputDataSourceInstance;
                                        }
                                        if (typeName4 == "Microsoft.ServiceBus/EventHub")
                                        {
                                            EventHubStreamInputDataSource eventHubStreamInputDataSourceInstance = new EventHubStreamInputDataSource();
                                            
                                            JToken propertiesValue16 = datasourceValue4["properties"];
                                            if (propertiesValue16 != null && propertiesValue16.Type != JTokenType.Null)
                                            {
                                                EventHubStreamInputDataSourceProperties propertiesInstance6 = new EventHubStreamInputDataSourceProperties();
                                                eventHubStreamInputDataSourceInstance.Properties = propertiesInstance6;
                                                
                                                JToken serviceBusNamespaceValue = propertiesValue16["serviceBusNamespace"];
                                                if (serviceBusNamespaceValue != null && serviceBusNamespaceValue.Type != JTokenType.Null)
                                                {
                                                    string serviceBusNamespaceInstance = ((string)serviceBusNamespaceValue);
                                                    propertiesInstance6.ServiceBusNamespace = serviceBusNamespaceInstance;
                                                }
                                                
                                                JToken sharedAccessPolicyNameValue = propertiesValue16["sharedAccessPolicyName"];
                                                if (sharedAccessPolicyNameValue != null && sharedAccessPolicyNameValue.Type != JTokenType.Null)
                                                {
                                                    string sharedAccessPolicyNameInstance = ((string)sharedAccessPolicyNameValue);
                                                    propertiesInstance6.SharedAccessPolicyName = sharedAccessPolicyNameInstance;
                                                }
                                                
                                                JToken sharedAccessPolicyKeyValue = propertiesValue16["sharedAccessPolicyKey"];
                                                if (sharedAccessPolicyKeyValue != null && sharedAccessPolicyKeyValue.Type != JTokenType.Null)
                                                {
                                                    string sharedAccessPolicyKeyInstance = ((string)sharedAccessPolicyKeyValue);
                                                    propertiesInstance6.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance;
                                                }
                                                
                                                JToken eventHubNameValue = propertiesValue16["eventHubName"];
                                                if (eventHubNameValue != null && eventHubNameValue.Type != JTokenType.Null)
                                                {
                                                    string eventHubNameInstance = ((string)eventHubNameValue);
                                                    propertiesInstance6.EventHubName = eventHubNameInstance;
                                                }
                                                
                                                JToken consumerGroupNameValue = propertiesValue16["consumerGroupName"];
                                                if (consumerGroupNameValue != null && consumerGroupNameValue.Type != JTokenType.Null)
                                                {
                                                    string consumerGroupNameInstance = ((string)consumerGroupNameValue);
                                                    propertiesInstance6.ConsumerGroupName = consumerGroupNameInstance;
                                                }
                                            }
                                            
                                            JToken typeValue7 = datasourceValue4["type"];
                                            if (typeValue7 != null && typeValue7.Type != JTokenType.Null)
                                            {
                                                string typeInstance7 = ((string)typeValue7);
                                                eventHubStreamInputDataSourceInstance.Type = typeInstance7;
                                            }
                                            streamInputPropertiesInstance.DataSource = eventHubStreamInputDataSourceInstance;
                                        }
                                        if (typeName4 == "Microsoft.Devices/IotHubs")
                                        {
                                            IoTHubStreamInputDataSource ioTHubStreamInputDataSourceInstance = new IoTHubStreamInputDataSource();
                                            
                                            JToken propertiesValue17 = datasourceValue4["properties"];
                                            if (propertiesValue17 != null && propertiesValue17.Type != JTokenType.Null)
                                            {
                                                IoTHubStreamInputDataSourceProperties propertiesInstance7 = new IoTHubStreamInputDataSourceProperties();
                                                ioTHubStreamInputDataSourceInstance.Properties = propertiesInstance7;
                                                
                                                JToken iotHubNamespaceValue = propertiesValue17["iotHubNamespace"];
                                                if (iotHubNamespaceValue != null && iotHubNamespaceValue.Type != JTokenType.Null)
                                                {
                                                    string iotHubNamespaceInstance = ((string)iotHubNamespaceValue);
                                                    propertiesInstance7.IotHubNamespace = iotHubNamespaceInstance;
                                                }
                                                
                                                JToken sharedAccessPolicyNameValue2 = propertiesValue17["sharedAccessPolicyName"];
                                                if (sharedAccessPolicyNameValue2 != null && sharedAccessPolicyNameValue2.Type != JTokenType.Null)
                                                {
                                                    string sharedAccessPolicyNameInstance2 = ((string)sharedAccessPolicyNameValue2);
                                                    propertiesInstance7.SharedAccessPolicyName = sharedAccessPolicyNameInstance2;
                                                }
                                                
                                                JToken sharedAccessPolicyKeyValue2 = propertiesValue17["sharedAccessPolicyKey"];
                                                if (sharedAccessPolicyKeyValue2 != null && sharedAccessPolicyKeyValue2.Type != JTokenType.Null)
                                                {
                                                    string sharedAccessPolicyKeyInstance2 = ((string)sharedAccessPolicyKeyValue2);
                                                    propertiesInstance7.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance2;
                                                }
                                                
                                                JToken consumerGroupNameValue2 = propertiesValue17["consumerGroupName"];
                                                if (consumerGroupNameValue2 != null && consumerGroupNameValue2.Type != JTokenType.Null)
                                                {
                                                    string consumerGroupNameInstance2 = ((string)consumerGroupNameValue2);
                                                    propertiesInstance7.ConsumerGroupName = consumerGroupNameInstance2;
                                                }
                                            }
                                            
                                            JToken typeValue8 = datasourceValue4["type"];
                                            if (typeValue8 != null && typeValue8.Type != JTokenType.Null)
                                            {
                                                string typeInstance8 = ((string)typeValue8);
                                                ioTHubStreamInputDataSourceInstance.Type = typeInstance8;
                                            }
                                            streamInputPropertiesInstance.DataSource = ioTHubStreamInputDataSourceInstance;
                                        }
                                    }
                                    
                                    JToken etagValue2 = propertiesValue10["etag"];
                                    if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                    {
                                        string etagInstance2 = ((string)etagValue2);
                                        streamInputPropertiesInstance.Etag = etagInstance2;
                                    }
                                    
                                    JToken typeValue9 = propertiesValue10["type"];
                                    if (typeValue9 != null && typeValue9.Type != JTokenType.Null)
                                    {
                                        string typeInstance9 = ((string)typeValue9);
                                        streamInputPropertiesInstance.Type = typeInstance9;
                                    }
                                    
                                    JToken serializationValue4 = propertiesValue10["serialization"];
                                    if (serializationValue4 != null && serializationValue4.Type != JTokenType.Null)
                                    {
                                        string typeName5 = ((string)serializationValue4["type"]);
                                        if (typeName5 == "Csv")
                                        {
                                            CsvSerialization csvSerializationInstance2 = new CsvSerialization();
                                            
                                            JToken propertiesValue18 = serializationValue4["properties"];
                                            if (propertiesValue18 != null && propertiesValue18.Type != JTokenType.Null)
                                            {
                                                CsvSerializationProperties propertiesInstance8 = new CsvSerializationProperties();
                                                csvSerializationInstance2.Properties = propertiesInstance8;
                                                
                                                JToken fieldDelimiterValue2 = propertiesValue18["fieldDelimiter"];
                                                if (fieldDelimiterValue2 != null && fieldDelimiterValue2.Type != JTokenType.Null)
                                                {
                                                    string fieldDelimiterInstance2 = ((string)fieldDelimiterValue2);
                                                    propertiesInstance8.FieldDelimiter = fieldDelimiterInstance2;
                                                }
                                                
                                                JToken encodingValue3 = propertiesValue18["encoding"];
                                                if (encodingValue3 != null && encodingValue3.Type != JTokenType.Null)
                                                {
                                                    string encodingInstance3 = ((string)encodingValue3);
                                                    propertiesInstance8.Encoding = encodingInstance3;
                                                }
                                            }
                                            
                                            JToken typeValue10 = serializationValue4["type"];
                                            if (typeValue10 != null && typeValue10.Type != JTokenType.Null)
                                            {
                                                string typeInstance10 = ((string)typeValue10);
                                                csvSerializationInstance2.Type = typeInstance10;
                                            }
                                            streamInputPropertiesInstance.Serialization = csvSerializationInstance2;
                                        }
                                        if (typeName5 == "Json")
                                        {
                                            JsonSerialization jsonSerializationInstance2 = new JsonSerialization();
                                            
                                            JToken propertiesValue19 = serializationValue4["properties"];
                                            if (propertiesValue19 != null && propertiesValue19.Type != JTokenType.Null)
                                            {
                                                JsonSerializationProperties propertiesInstance9 = new JsonSerializationProperties();
                                                jsonSerializationInstance2.Properties = propertiesInstance9;
                                                
                                                JToken encodingValue4 = propertiesValue19["encoding"];
                                                if (encodingValue4 != null && encodingValue4.Type != JTokenType.Null)
                                                {
                                                    string encodingInstance4 = ((string)encodingValue4);
                                                    propertiesInstance9.Encoding = encodingInstance4;
                                                }
                                                
                                                JToken formatValue2 = propertiesValue19["format"];
                                                if (formatValue2 != null && formatValue2.Type != JTokenType.Null)
                                                {
                                                    string formatInstance2 = ((string)formatValue2);
                                                    propertiesInstance9.Format = formatInstance2;
                                                }
                                            }
                                            
                                            JToken typeValue11 = serializationValue4["type"];
                                            if (typeValue11 != null && typeValue11.Type != JTokenType.Null)
                                            {
                                                string typeInstance11 = ((string)typeValue11);
                                                jsonSerializationInstance2.Type = typeInstance11;
                                            }
                                            streamInputPropertiesInstance.Serialization = jsonSerializationInstance2;
                                        }
                                        if (typeName5 == "Avro")
                                        {
                                            AvroSerialization avroSerializationInstance2 = new AvroSerialization();
                                            
                                            JToken propertiesValue20 = serializationValue4["properties"];
                                            if (propertiesValue20 != null && propertiesValue20.Type != JTokenType.Null)
                                            {
                                                AvroSerializationProperties propertiesInstance10 = new AvroSerializationProperties();
                                                avroSerializationInstance2.Properties = propertiesInstance10;
                                            }
                                            
                                            JToken typeValue12 = serializationValue4["type"];
                                            if (typeValue12 != null && typeValue12.Type != JTokenType.Null)
                                            {
                                                string typeInstance12 = ((string)typeValue12);
                                                avroSerializationInstance2.Type = typeInstance12;
                                            }
                                            streamInputPropertiesInstance.Serialization = avroSerializationInstance2;
                                        }
                                    }
                                    
                                    JToken diagnosticsValue4 = propertiesValue10["diagnostics"];
                                    if (diagnosticsValue4 != null && diagnosticsValue4.Type != JTokenType.Null)
                                    {
                                        Diagnostics diagnosticsInstance2 = new Diagnostics();
                                        streamInputPropertiesInstance.Diagnostics = diagnosticsInstance2;
                                        
                                        JToken conditionsArray4 = diagnosticsValue4["conditions"];
                                        if (conditionsArray4 != null && conditionsArray4.Type != JTokenType.Null)
                                        {
                                            foreach (JToken conditionsValue2 in ((JArray)conditionsArray4))
                                            {
                                                DiagnosticCondition diagnosticConditionInstance2 = new DiagnosticCondition();
                                                diagnosticsInstance2.Conditions.Add(diagnosticConditionInstance2);
                                                
                                                JToken sinceValue2 = conditionsValue2["since"];
                                                if (sinceValue2 != null && sinceValue2.Type != JTokenType.Null)
                                                {
                                                    DateTime sinceInstance2 = ((DateTime)sinceValue2);
                                                    diagnosticConditionInstance2.Since = sinceInstance2;
                                                }
                                                
                                                JToken codeValue2 = conditionsValue2["code"];
                                                if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                                {
                                                    string codeInstance2 = ((string)codeValue2);
                                                    diagnosticConditionInstance2.Code = codeInstance2;
                                                }
                                                
                                                JToken messageValue2 = conditionsValue2["message"];
                                                if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                                {
                                                    string messageInstance2 = ((string)messageValue2);
                                                    diagnosticConditionInstance2.Message = messageInstance2;
                                                }
                                            }
                                        }
                                    }
                                    inputInstance.Properties = streamInputPropertiesInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                    }
                    if (httpResponse.Headers.Contains("ETag"))
                    {
                        result.Input.Properties.Etag = httpResponse.Headers.GetValues("ETag").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create or update an input for a stream analytics job. The raw json
        /// content will be used.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='inputName'>
        /// Required. The name of the input for the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update an input for
        /// a stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the input CreateOrUpdate operation.
        /// </returns>
        public async Task<InputCreateOrUpdateResponse> CreateOrUpdateWithRawJsonContentAsync(string resourceGroupName, string jobName, string inputName, InputCreateOrUpdateWithRawJsonContentParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (inputName == null)
            {
                throw new ArgumentNullException("inputName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Content == null)
            {
                throw new ArgumentNullException("parameters.Content");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("inputName", inputName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateWithRawJsonContentAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.StreamAnalytics/streamingjobs/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/inputs/";
            url = url + Uri.EscapeDataString(inputName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = parameters.Content;
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    InputCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new InputCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Input inputInstance = new Input();
                            result.Input = inputInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                inputInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue["type"]);
                                if (typeName == "Reference")
                                {
                                    ReferenceInputProperties referenceInputPropertiesInstance = new ReferenceInputProperties();
                                    
                                    JToken datasourceValue = propertiesValue["datasource"];
                                    if (datasourceValue != null && datasourceValue.Type != JTokenType.Null)
                                    {
                                        string typeName2 = ((string)datasourceValue["type"]);
                                        if (typeName2 == "Microsoft.Storage/Blob")
                                        {
                                            BlobReferenceInputDataSource blobReferenceInputDataSourceInstance = new BlobReferenceInputDataSource();
                                            
                                            JToken propertiesValue2 = datasourceValue["properties"];
                                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                            {
                                                BlobReferenceInputDataSourceProperties propertiesInstance = new BlobReferenceInputDataSourceProperties();
                                                blobReferenceInputDataSourceInstance.Properties = propertiesInstance;
                                                
                                                JToken storageAccountsArray = propertiesValue2["storageAccounts"];
                                                if (storageAccountsArray != null && storageAccountsArray.Type != JTokenType.Null)
                                                {
                                                    propertiesInstance.StorageAccounts = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.StorageAccount>();
                                                    foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray))
                                                    {
                                                        StorageAccount storageAccountInstance = new StorageAccount();
                                                        propertiesInstance.StorageAccounts.Add(storageAccountInstance);
                                                        
                                                        JToken accountNameValue = storageAccountsValue["accountName"];
                                                        if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                        {
                                                            string accountNameInstance = ((string)accountNameValue);
                                                            storageAccountInstance.AccountName = accountNameInstance;
                                                        }
                                                        
                                                        JToken accountKeyValue = storageAccountsValue["accountKey"];
                                                        if (accountKeyValue != null && accountKeyValue.Type != JTokenType.Null)
                                                        {
                                                            string accountKeyInstance = ((string)accountKeyValue);
                                                            storageAccountInstance.AccountKey = accountKeyInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken containerValue = propertiesValue2["container"];
                                                if (containerValue != null && containerValue.Type != JTokenType.Null)
                                                {
                                                    string containerInstance = ((string)containerValue);
                                                    propertiesInstance.Container = containerInstance;
                                                }
                                                
                                                JToken pathPatternValue = propertiesValue2["pathPattern"];
                                                if (pathPatternValue != null && pathPatternValue.Type != JTokenType.Null)
                                                {
                                                    string pathPatternInstance = ((string)pathPatternValue);
                                                    propertiesInstance.PathPattern = pathPatternInstance;
                                                }
                                                
                                                JToken dateFormatValue = propertiesValue2["dateFormat"];
                                                if (dateFormatValue != null && dateFormatValue.Type != JTokenType.Null)
                                                {
                                                    string dateFormatInstance = ((string)dateFormatValue);
                                                    propertiesInstance.DateFormat = dateFormatInstance;
                                                }
                                                
                                                JToken timeFormatValue = propertiesValue2["timeFormat"];
                                                if (timeFormatValue != null && timeFormatValue.Type != JTokenType.Null)
                                                {
                                                    string timeFormatInstance = ((string)timeFormatValue);
                                                    propertiesInstance.TimeFormat = timeFormatInstance;
                                                }
                                            }
                                            
                                            JToken typeValue = datasourceValue["type"];
                                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                                            {
                                                string typeInstance = ((string)typeValue);
                                                blobReferenceInputDataSourceInstance.Type = typeInstance;
                                            }
                                            referenceInputPropertiesInstance.DataSource = blobReferenceInputDataSourceInstance;
                                        }
                                    }
                                    
                                    JToken etagValue = propertiesValue["etag"];
                                    if (etagValue != null && etagValue.Type != JTokenType.Null)
                                    {
                                        string etagInstance = ((string)etagValue);
                                        referenceInputPropertiesInstance.Etag = etagInstance;
                                    }
                                    
                                    JToken typeValue2 = propertiesValue["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        referenceInputPropertiesInstance.Type = typeInstance2;
                                    }
                                    
                                    JToken serializationValue = propertiesValue["serialization"];
                                    if (serializationValue != null && serializationValue.Type != JTokenType.Null)
                                    {
                                        string typeName3 = ((string)serializationValue["type"]);
                                        if (typeName3 == "Csv")
                                        {
                                            CsvSerialization csvSerializationInstance = new CsvSerialization();
                                            
                                            JToken propertiesValue3 = serializationValue["properties"];
                                            if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                            {
                                                CsvSerializationProperties propertiesInstance2 = new CsvSerializationProperties();
                                                csvSerializationInstance.Properties = propertiesInstance2;
                                                
                                                JToken fieldDelimiterValue = propertiesValue3["fieldDelimiter"];
                                                if (fieldDelimiterValue != null && fieldDelimiterValue.Type != JTokenType.Null)
                                                {
                                                    string fieldDelimiterInstance = ((string)fieldDelimiterValue);
                                                    propertiesInstance2.FieldDelimiter = fieldDelimiterInstance;
                                                }
                                                
                                                JToken encodingValue = propertiesValue3["encoding"];
                                                if (encodingValue != null && encodingValue.Type != JTokenType.Null)
                                                {
                                                    string encodingInstance = ((string)encodingValue);
                                                    propertiesInstance2.Encoding = encodingInstance;
                                                }
                                            }
                                            
                                            JToken typeValue3 = serializationValue["type"];
                                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                            {
                                                string typeInstance3 = ((string)typeValue3);
                                                csvSerializationInstance.Type = typeInstance3;
                                            }
                                            referenceInputPropertiesInstance.Serialization = csvSerializationInstance;
                                        }
                                        if (typeName3 == "Json")
                                        {
                                            JsonSerialization jsonSerializationInstance = new JsonSerialization();
                                            
                                            JToken propertiesValue4 = serializationValue["properties"];
                                            if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                            {
                                                JsonSerializationProperties propertiesInstance3 = new JsonSerializationProperties();
                                                jsonSerializationInstance.Properties = propertiesInstance3;
                                                
                                                JToken encodingValue2 = propertiesValue4["encoding"];
                                                if (encodingValue2 != null && encodingValue2.Type != JTokenType.Null)
                                                {
                                                    string encodingInstance2 = ((string)encodingValue2);
                                                    propertiesInstance3.Encoding = encodingInstance2;
                                                }
                                                
                                                JToken formatValue = propertiesValue4["format"];
                                                if (formatValue != null && formatValue.Type != JTokenType.Null)
                                                {
                                                    string formatInstance = ((string)formatValue);
                                                    propertiesInstance3.Format = formatInstance;
                                                }
                                            }
                                            
                                            JToken typeValue4 = serializationValue["type"];
                                            if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                            {
                                                string typeInstance4 = ((string)typeValue4);
                                                jsonSerializationInstance.Type = typeInstance4;
                                            }
                                            referenceInputPropertiesInstance.Serialization = jsonSerializationInstance;
                                        }
                                        if (typeName3 == "Avro")
                                        {
                                            AvroSerialization avroSerializationInstance = new AvroSerialization();
                                            
                                            JToken propertiesValue5 = serializationValue["properties"];
                                            if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                                            {
                                                AvroSerializationProperties propertiesInstance4 = new AvroSerializationProperties();
                                                avroSerializationInstance.Properties = propertiesInstance4;
                                            }
                                            
                                            JToken typeValue5 = serializationValue["type"];
                                            if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                            {
                                                string typeInstance5 = ((string)typeValue5);
                                                avroSerializationInstance.Type = typeInstance5;
                                            }
                                            referenceInputPropertiesInstance.Serialization = avroSerializationInstance;
                                        }
                                    }
                                    
                                    JToken diagnosticsValue = propertiesValue["diagnostics"];
                                    if (diagnosticsValue != null && diagnosticsValue.Type != JTokenType.Null)
                                    {
                                        Diagnostics diagnosticsInstance = new Diagnostics();
                                        referenceInputPropertiesInstance.Diagnostics = diagnosticsInstance;
                                        
                                        JToken conditionsArray = diagnosticsValue["conditions"];
                                        if (conditionsArray != null && conditionsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken conditionsValue in ((JArray)conditionsArray))
                                            {
                                                DiagnosticCondition diagnosticConditionInstance = new DiagnosticCondition();
                                                diagnosticsInstance.Conditions.Add(diagnosticConditionInstance);
                                                
                                                JToken sinceValue = conditionsValue["since"];
                                                if (sinceValue != null && sinceValue.Type != JTokenType.Null)
                                                {
                                                    DateTime sinceInstance = ((DateTime)sinceValue);
                                                    diagnosticConditionInstance.Since = sinceInstance;
                                                }
                                                
                                                JToken codeValue = conditionsValue["code"];
                                                if (codeValue != null && codeValue.Type != JTokenType.Null)
                                                {
                                                    string codeInstance = ((string)codeValue);
                                                    diagnosticConditionInstance.Code = codeInstance;
                                                }
                                                
                                                JToken messageValue = conditionsValue["message"];
                                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                {
                                                    string messageInstance = ((string)messageValue);
                                                    diagnosticConditionInstance.Message = messageInstance;
                                                }
                                            }
                                        }
                                    }
                                    inputInstance.Properties = referenceInputPropertiesInstance;
                                }
                                if (typeName == "Stream")
                                {
                                    StreamInputProperties streamInputPropertiesInstance = new StreamInputProperties();
                                    
                                    JToken datasourceValue2 = propertiesValue["datasource"];
                                    if (datasourceValue2 != null && datasourceValue2.Type != JTokenType.Null)
                                    {
                                        string typeName4 = ((string)datasourceValue2["type"]);
                                        if (typeName4 == "Microsoft.Storage/Blob")
                                        {
                                            BlobStreamInputDataSource blobStreamInputDataSourceInstance = new BlobStreamInputDataSource();
                                            
                                            JToken propertiesValue6 = datasourceValue2["properties"];
                                            if (propertiesValue6 != null && propertiesValue6.Type != JTokenType.Null)
                                            {
                                                BlobStreamInputDataSourceProperties propertiesInstance5 = new BlobStreamInputDataSourceProperties();
                                                blobStreamInputDataSourceInstance.Properties = propertiesInstance5;
                                                
                                                JToken storageAccountsArray2 = propertiesValue6["storageAccounts"];
                                                if (storageAccountsArray2 != null && storageAccountsArray2.Type != JTokenType.Null)
                                                {
                                                    propertiesInstance5.StorageAccounts = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.StorageAccount>();
                                                    foreach (JToken storageAccountsValue2 in ((JArray)storageAccountsArray2))
                                                    {
                                                        StorageAccount storageAccountInstance2 = new StorageAccount();
                                                        propertiesInstance5.StorageAccounts.Add(storageAccountInstance2);
                                                        
                                                        JToken accountNameValue2 = storageAccountsValue2["accountName"];
                                                        if (accountNameValue2 != null && accountNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string accountNameInstance2 = ((string)accountNameValue2);
                                                            storageAccountInstance2.AccountName = accountNameInstance2;
                                                        }
                                                        
                                                        JToken accountKeyValue2 = storageAccountsValue2["accountKey"];
                                                        if (accountKeyValue2 != null && accountKeyValue2.Type != JTokenType.Null)
                                                        {
                                                            string accountKeyInstance2 = ((string)accountKeyValue2);
                                                            storageAccountInstance2.AccountKey = accountKeyInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                JToken containerValue2 = propertiesValue6["container"];
                                                if (containerValue2 != null && containerValue2.Type != JTokenType.Null)
                                                {
                                                    string containerInstance2 = ((string)containerValue2);
                                                    propertiesInstance5.Container = containerInstance2;
                                                }
                                                
                                                JToken pathPatternValue2 = propertiesValue6["pathPattern"];
                                                if (pathPatternValue2 != null && pathPatternValue2.Type != JTokenType.Null)
                                                {
                                                    string pathPatternInstance2 = ((string)pathPatternValue2);
                                                    propertiesInstance5.PathPattern = pathPatternInstance2;
                                                }
                                                
                                                JToken dateFormatValue2 = propertiesValue6["dateFormat"];
                                                if (dateFormatValue2 != null && dateFormatValue2.Type != JTokenType.Null)
                                                {
                                                    string dateFormatInstance2 = ((string)dateFormatValue2);
                                                    propertiesInstance5.DateFormat = dateFormatInstance2;
                                                }
                                                
                                                JToken timeFormatValue2 = propertiesValue6["timeFormat"];
                                                if (timeFormatValue2 != null && timeFormatValue2.Type != JTokenType.Null)
                                                {
                                                    string timeFormatInstance2 = ((string)timeFormatValue2);
                                                    propertiesInstance5.TimeFormat = timeFormatInstance2;
                                                }
                                                
                                                JToken sourcePartitionCountValue = propertiesValue6["sourcePartitionCount"];
                                                if (sourcePartitionCountValue != null && sourcePartitionCountValue.Type != JTokenType.Null)
                                                {
                                                    int sourcePartitionCountInstance = ((int)sourcePartitionCountValue);
                                                    propertiesInstance5.SourcePartitionCount = sourcePartitionCountInstance;
                                                }
                                            }
                                            
                                            JToken typeValue6 = datasourceValue2["type"];
                                            if (typeValue6 != null && typeValue6.Type != JTokenType.Null)
                                            {
                                                string typeInstance6 = ((string)typeValue6);
                                                blobStreamInputDataSourceInstance.Type = typeInstance6;
                                            }
                                            streamInputPropertiesInstance.DataSource = blobStreamInputDataSourceInstance;
                                        }
                                        if (typeName4 == "Microsoft.ServiceBus/EventHub")
                                        {
                                            EventHubStreamInputDataSource eventHubStreamInputDataSourceInstance = new EventHubStreamInputDataSource();
                                            
                                            JToken propertiesValue7 = datasourceValue2["properties"];
                                            if (propertiesValue7 != null && propertiesValue7.Type != JTokenType.Null)
                                            {
                                                EventHubStreamInputDataSourceProperties propertiesInstance6 = new EventHubStreamInputDataSourceProperties();
                                                eventHubStreamInputDataSourceInstance.Properties = propertiesInstance6;
                                                
                                                JToken serviceBusNamespaceValue = propertiesValue7["serviceBusNamespace"];
                                                if (serviceBusNamespaceValue != null && serviceBusNamespaceValue.Type != JTokenType.Null)
                                                {
                                                    string serviceBusNamespaceInstance = ((string)serviceBusNamespaceValue);
                                                    propertiesInstance6.ServiceBusNamespace = serviceBusNamespaceInstance;
                                                }
                                                
                                                JToken sharedAccessPolicyNameValue = propertiesValue7["sharedAccessPolicyName"];
                                                if (sharedAccessPolicyNameValue != null && sharedAccessPolicyNameValue.Type != JTokenType.Null)
                                                {
                                                    string sharedAccessPolicyNameInstance = ((string)sharedAccessPolicyNameValue);
                                                    propertiesInstance6.SharedAccessPolicyName = sharedAccessPolicyNameInstance;
                                                }
                                                
                                                JToken sharedAccessPolicyKeyValue = propertiesValue7["sharedAccessPolicyKey"];
                                                if (sharedAccessPolicyKeyValue != null && sharedAccessPolicyKeyValue.Type != JTokenType.Null)
                                                {
                                                    string sharedAccessPolicyKeyInstance = ((string)sharedAccessPolicyKeyValue);
                                                    propertiesInstance6.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance;
                                                }
                                                
                                                JToken eventHubNameValue = propertiesValue7["eventHubName"];
                                                if (eventHubNameValue != null && eventHubNameValue.Type != JTokenType.Null)
                                                {
                                                    string eventHubNameInstance = ((string)eventHubNameValue);
                                                    propertiesInstance6.EventHubName = eventHubNameInstance;
                                                }
                                                
                                                JToken consumerGroupNameValue = propertiesValue7["consumerGroupName"];
                                                if (consumerGroupNameValue != null && consumerGroupNameValue.Type != JTokenType.Null)
                                                {
                                                    string consumerGroupNameInstance = ((string)consumerGroupNameValue);
                                                    propertiesInstance6.ConsumerGroupName = consumerGroupNameInstance;
                                                }
                                            }
                                            
                                            JToken typeValue7 = datasourceValue2["type"];
                                            if (typeValue7 != null && typeValue7.Type != JTokenType.Null)
                                            {
                                                string typeInstance7 = ((string)typeValue7);
                                                eventHubStreamInputDataSourceInstance.Type = typeInstance7;
                                            }
                                            streamInputPropertiesInstance.DataSource = eventHubStreamInputDataSourceInstance;
                                        }
                                        if (typeName4 == "Microsoft.Devices/IotHubs")
                                        {
                                            IoTHubStreamInputDataSource ioTHubStreamInputDataSourceInstance = new IoTHubStreamInputDataSource();
                                            
                                            JToken propertiesValue8 = datasourceValue2["properties"];
                                            if (propertiesValue8 != null && propertiesValue8.Type != JTokenType.Null)
                                            {
                                                IoTHubStreamInputDataSourceProperties propertiesInstance7 = new IoTHubStreamInputDataSourceProperties();
                                                ioTHubStreamInputDataSourceInstance.Properties = propertiesInstance7;
                                                
                                                JToken iotHubNamespaceValue = propertiesValue8["iotHubNamespace"];
                                                if (iotHubNamespaceValue != null && iotHubNamespaceValue.Type != JTokenType.Null)
                                                {
                                                    string iotHubNamespaceInstance = ((string)iotHubNamespaceValue);
                                                    propertiesInstance7.IotHubNamespace = iotHubNamespaceInstance;
                                                }
                                                
                                                JToken sharedAccessPolicyNameValue2 = propertiesValue8["sharedAccessPolicyName"];
                                                if (sharedAccessPolicyNameValue2 != null && sharedAccessPolicyNameValue2.Type != JTokenType.Null)
                                                {
                                                    string sharedAccessPolicyNameInstance2 = ((string)sharedAccessPolicyNameValue2);
                                                    propertiesInstance7.SharedAccessPolicyName = sharedAccessPolicyNameInstance2;
                                                }
                                                
                                                JToken sharedAccessPolicyKeyValue2 = propertiesValue8["sharedAccessPolicyKey"];
                                                if (sharedAccessPolicyKeyValue2 != null && sharedAccessPolicyKeyValue2.Type != JTokenType.Null)
                                                {
                                                    string sharedAccessPolicyKeyInstance2 = ((string)sharedAccessPolicyKeyValue2);
                                                    propertiesInstance7.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance2;
                                                }
                                                
                                                JToken consumerGroupNameValue2 = propertiesValue8["consumerGroupName"];
                                                if (consumerGroupNameValue2 != null && consumerGroupNameValue2.Type != JTokenType.Null)
                                                {
                                                    string consumerGroupNameInstance2 = ((string)consumerGroupNameValue2);
                                                    propertiesInstance7.ConsumerGroupName = consumerGroupNameInstance2;
                                                }
                                            }
                                            
                                            JToken typeValue8 = datasourceValue2["type"];
                                            if (typeValue8 != null && typeValue8.Type != JTokenType.Null)
                                            {
                                                string typeInstance8 = ((string)typeValue8);
                                                ioTHubStreamInputDataSourceInstance.Type = typeInstance8;
                                            }
                                            streamInputPropertiesInstance.DataSource = ioTHubStreamInputDataSourceInstance;
                                        }
                                    }
                                    
                                    JToken etagValue2 = propertiesValue["etag"];
                                    if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                    {
                                        string etagInstance2 = ((string)etagValue2);
                                        streamInputPropertiesInstance.Etag = etagInstance2;
                                    }
                                    
                                    JToken typeValue9 = propertiesValue["type"];
                                    if (typeValue9 != null && typeValue9.Type != JTokenType.Null)
                                    {
                                        string typeInstance9 = ((string)typeValue9);
                                        streamInputPropertiesInstance.Type = typeInstance9;
                                    }
                                    
                                    JToken serializationValue2 = propertiesValue["serialization"];
                                    if (serializationValue2 != null && serializationValue2.Type != JTokenType.Null)
                                    {
                                        string typeName5 = ((string)serializationValue2["type"]);
                                        if (typeName5 == "Csv")
                                        {
                                            CsvSerialization csvSerializationInstance2 = new CsvSerialization();
                                            
                                            JToken propertiesValue9 = serializationValue2["properties"];
                                            if (propertiesValue9 != null && propertiesValue9.Type != JTokenType.Null)
                                            {
                                                CsvSerializationProperties propertiesInstance8 = new CsvSerializationProperties();
                                                csvSerializationInstance2.Properties = propertiesInstance8;
                                                
                                                JToken fieldDelimiterValue2 = propertiesValue9["fieldDelimiter"];
                                                if (fieldDelimiterValue2 != null && fieldDelimiterValue2.Type != JTokenType.Null)
                                                {
                                                    string fieldDelimiterInstance2 = ((string)fieldDelimiterValue2);
                                                    propertiesInstance8.FieldDelimiter = fieldDelimiterInstance2;
                                                }
                                                
                                                JToken encodingValue3 = propertiesValue9["encoding"];
                                                if (encodingValue3 != null && encodingValue3.Type != JTokenType.Null)
                                                {
                                                    string encodingInstance3 = ((string)encodingValue3);
                                                    propertiesInstance8.Encoding = encodingInstance3;
                                                }
                                            }
                                            
                                            JToken typeValue10 = serializationValue2["type"];
                                            if (typeValue10 != null && typeValue10.Type != JTokenType.Null)
                                            {
                                                string typeInstance10 = ((string)typeValue10);
                                                csvSerializationInstance2.Type = typeInstance10;
                                            }
                                            streamInputPropertiesInstance.Serialization = csvSerializationInstance2;
                                        }
                                        if (typeName5 == "Json")
                                        {
                                            JsonSerialization jsonSerializationInstance2 = new JsonSerialization();
                                            
                                            JToken propertiesValue10 = serializationValue2["properties"];
                                            if (propertiesValue10 != null && propertiesValue10.Type != JTokenType.Null)
                                            {
                                                JsonSerializationProperties propertiesInstance9 = new JsonSerializationProperties();
                                                jsonSerializationInstance2.Properties = propertiesInstance9;
                                                
                                                JToken encodingValue4 = propertiesValue10["encoding"];
                                                if (encodingValue4 != null && encodingValue4.Type != JTokenType.Null)
                                                {
                                                    string encodingInstance4 = ((string)encodingValue4);
                                                    propertiesInstance9.Encoding = encodingInstance4;
                                                }
                                                
                                                JToken formatValue2 = propertiesValue10["format"];
                                                if (formatValue2 != null && formatValue2.Type != JTokenType.Null)
                                                {
                                                    string formatInstance2 = ((string)formatValue2);
                                                    propertiesInstance9.Format = formatInstance2;
                                                }
                                            }
                                            
                                            JToken typeValue11 = serializationValue2["type"];
                                            if (typeValue11 != null && typeValue11.Type != JTokenType.Null)
                                            {
                                                string typeInstance11 = ((string)typeValue11);
                                                jsonSerializationInstance2.Type = typeInstance11;
                                            }
                                            streamInputPropertiesInstance.Serialization = jsonSerializationInstance2;
                                        }
                                        if (typeName5 == "Avro")
                                        {
                                            AvroSerialization avroSerializationInstance2 = new AvroSerialization();
                                            
                                            JToken propertiesValue11 = serializationValue2["properties"];
                                            if (propertiesValue11 != null && propertiesValue11.Type != JTokenType.Null)
                                            {
                                                AvroSerializationProperties propertiesInstance10 = new AvroSerializationProperties();
                                                avroSerializationInstance2.Properties = propertiesInstance10;
                                            }
                                            
                                            JToken typeValue12 = serializationValue2["type"];
                                            if (typeValue12 != null && typeValue12.Type != JTokenType.Null)
                                            {
                                                string typeInstance12 = ((string)typeValue12);
                                                avroSerializationInstance2.Type = typeInstance12;
                                            }
                                            streamInputPropertiesInstance.Serialization = avroSerializationInstance2;
                                        }
                                    }
                                    
                                    JToken diagnosticsValue2 = propertiesValue["diagnostics"];
                                    if (diagnosticsValue2 != null && diagnosticsValue2.Type != JTokenType.Null)
                                    {
                                        Diagnostics diagnosticsInstance2 = new Diagnostics();
                                        streamInputPropertiesInstance.Diagnostics = diagnosticsInstance2;
                                        
                                        JToken conditionsArray2 = diagnosticsValue2["conditions"];
                                        if (conditionsArray2 != null && conditionsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken conditionsValue2 in ((JArray)conditionsArray2))
                                            {
                                                DiagnosticCondition diagnosticConditionInstance2 = new DiagnosticCondition();
                                                diagnosticsInstance2.Conditions.Add(diagnosticConditionInstance2);
                                                
                                                JToken sinceValue2 = conditionsValue2["since"];
                                                if (sinceValue2 != null && sinceValue2.Type != JTokenType.Null)
                                                {
                                                    DateTime sinceInstance2 = ((DateTime)sinceValue2);
                                                    diagnosticConditionInstance2.Since = sinceInstance2;
                                                }
                                                
                                                JToken codeValue2 = conditionsValue2["code"];
                                                if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                                {
                                                    string codeInstance2 = ((string)codeValue2);
                                                    diagnosticConditionInstance2.Code = codeInstance2;
                                                }
                                                
                                                JToken messageValue2 = conditionsValue2["message"];
                                                if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                                {
                                                    string messageInstance2 = ((string)messageValue2);
                                                    diagnosticConditionInstance2.Message = messageInstance2;
                                                }
                                            }
                                        }
                                    }
                                    inputInstance.Properties = streamInputPropertiesInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                    }
                    if (httpResponse.Headers.Contains("ETag"))
                    {
                        result.Input.Properties.Etag = httpResponse.Headers.GetValues("ETag").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete an input for a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='inputName'>
        /// Required. The name of the input for the stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The common operation response.
        /// </returns>
        public async Task<CommonOperationResponse> DeleteAsync(string resourceGroupName, string jobName, string inputName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (inputName == null)
            {
                throw new ArgumentNullException("inputName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("inputName", inputName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.StreamAnalytics/streamingjobs/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/inputs/";
            url = url + Uri.EscapeDataString(inputName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CommonOperationResponse result = null;
                    // Deserialize Response
                    result = new CommonOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get an input for a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='inputName'>
        /// Required. The name of the input for the stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the get stream analytics input operation.
        /// </returns>
        public async Task<InputGetResponse> GetAsync(string resourceGroupName, string jobName, string inputName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (inputName == null)
            {
                throw new ArgumentNullException("inputName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("inputName", inputName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.StreamAnalytics/streamingjobs/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/inputs/";
            url = url + Uri.EscapeDataString(inputName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    InputGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new InputGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Input inputInstance = new Input();
                            result.Input = inputInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                inputInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue["type"]);
                                if (typeName == "Reference")
                                {
                                    ReferenceInputProperties referenceInputPropertiesInstance = new ReferenceInputProperties();
                                    
                                    JToken datasourceValue = propertiesValue["datasource"];
                                    if (datasourceValue != null && datasourceValue.Type != JTokenType.Null)
                                    {
                                        string typeName2 = ((string)datasourceValue["type"]);
                                        if (typeName2 == "Microsoft.Storage/Blob")
                                        {
                                            BlobReferenceInputDataSource blobReferenceInputDataSourceInstance = new BlobReferenceInputDataSource();
                                            
                                            JToken propertiesValue2 = datasourceValue["properties"];
                                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                            {
                                                BlobReferenceInputDataSourceProperties propertiesInstance = new BlobReferenceInputDataSourceProperties();
                                                blobReferenceInputDataSourceInstance.Properties = propertiesInstance;
                                                
                                                JToken storageAccountsArray = propertiesValue2["storageAccounts"];
                                                if (storageAccountsArray != null && storageAccountsArray.Type != JTokenType.Null)
                                                {
                                                    propertiesInstance.StorageAccounts = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.StorageAccount>();
                                                    foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray))
                                                    {
                                                        StorageAccount storageAccountInstance = new StorageAccount();
                                                        propertiesInstance.StorageAccounts.Add(storageAccountInstance);
                                                        
                                                        JToken accountNameValue = storageAccountsValue["accountName"];
                                                        if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                        {
                                                            string accountNameInstance = ((string)accountNameValue);
                                                            storageAccountInstance.AccountName = accountNameInstance;
                                                        }
                                                        
                                                        JToken accountKeyValue = storageAccountsValue["accountKey"];
                                                        if (accountKeyValue != null && accountKeyValue.Type != JTokenType.Null)
                                                        {
                                                            string accountKeyInstance = ((string)accountKeyValue);
                                                            storageAccountInstance.AccountKey = accountKeyInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken containerValue = propertiesValue2["container"];
                                                if (containerValue != null && containerValue.Type != JTokenType.Null)
                                                {
                                                    string containerInstance = ((string)containerValue);
                                                    propertiesInstance.Container = containerInstance;
                                                }
                                                
                                                JToken pathPatternValue = propertiesValue2["pathPattern"];
                                                if (pathPatternValue != null && pathPatternValue.Type != JTokenType.Null)
                                                {
                                                    string pathPatternInstance = ((string)pathPatternValue);
                                                    propertiesInstance.PathPattern = pathPatternInstance;
                                                }
                                                
                                                JToken dateFormatValue = propertiesValue2["dateFormat"];
                                                if (dateFormatValue != null && dateFormatValue.Type != JTokenType.Null)
                                                {
                                                    string dateFormatInstance = ((string)dateFormatValue);
                                                    propertiesInstance.DateFormat = dateFormatInstance;
                                                }
                                                
                                                JToken timeFormatValue = propertiesValue2["timeFormat"];
                                                if (timeFormatValue != null && timeFormatValue.Type != JTokenType.Null)
                                                {
                                                    string timeFormatInstance = ((string)timeFormatValue);
                                                    propertiesInstance.TimeFormat = timeFormatInstance;
                                                }
                                            }
                                            
                                            JToken typeValue = datasourceValue["type"];
                                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                                            {
                                                string typeInstance = ((string)typeValue);
                                                blobReferenceInputDataSourceInstance.Type = typeInstance;
                                            }
                                            referenceInputPropertiesInstance.DataSource = blobReferenceInputDataSourceInstance;
                                        }
                                    }
                                    
                                    JToken etagValue = propertiesValue["etag"];
                                    if (etagValue != null && etagValue.Type != JTokenType.Null)
                                    {
                                        string etagInstance = ((string)etagValue);
                                        referenceInputPropertiesInstance.Etag = etagInstance;
                                    }
                                    
                                    JToken typeValue2 = propertiesValue["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        referenceInputPropertiesInstance.Type = typeInstance2;
                                    }
                                    
                                    JToken serializationValue = propertiesValue["serialization"];
                                    if (serializationValue != null && serializationValue.Type != JTokenType.Null)
                                    {
                                        string typeName3 = ((string)serializationValue["type"]);
                                        if (typeName3 == "Csv")
                                        {
                                            CsvSerialization csvSerializationInstance = new CsvSerialization();
                                            
                                            JToken propertiesValue3 = serializationValue["properties"];
                                            if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                            {
                                                CsvSerializationProperties propertiesInstance2 = new CsvSerializationProperties();
                                                csvSerializationInstance.Properties = propertiesInstance2;
                                                
                                                JToken fieldDelimiterValue = propertiesValue3["fieldDelimiter"];
                                                if (fieldDelimiterValue != null && fieldDelimiterValue.Type != JTokenType.Null)
                                                {
                                                    string fieldDelimiterInstance = ((string)fieldDelimiterValue);
                                                    propertiesInstance2.FieldDelimiter = fieldDelimiterInstance;
                                                }
                                                
                                                JToken encodingValue = propertiesValue3["encoding"];
                                                if (encodingValue != null && encodingValue.Type != JTokenType.Null)
                                                {
                                                    string encodingInstance = ((string)encodingValue);
                                                    propertiesInstance2.Encoding = encodingInstance;
                                                }
                                            }
                                            
                                            JToken typeValue3 = serializationValue["type"];
                                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                            {
                                                string typeInstance3 = ((string)typeValue3);
                                                csvSerializationInstance.Type = typeInstance3;
                                            }
                                            referenceInputPropertiesInstance.Serialization = csvSerializationInstance;
                                        }
                                        if (typeName3 == "Json")
                                        {
                                            JsonSerialization jsonSerializationInstance = new JsonSerialization();
                                            
                                            JToken propertiesValue4 = serializationValue["properties"];
                                            if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                            {
                                                JsonSerializationProperties propertiesInstance3 = new JsonSerializationProperties();
                                                jsonSerializationInstance.Properties = propertiesInstance3;
                                                
                                                JToken encodingValue2 = propertiesValue4["encoding"];
                                                if (encodingValue2 != null && encodingValue2.Type != JTokenType.Null)
                                                {
                                                    string encodingInstance2 = ((string)encodingValue2);
                                                    propertiesInstance3.Encoding = encodingInstance2;
                                                }
                                                
                                                JToken formatValue = propertiesValue4["format"];
                                                if (formatValue != null && formatValue.Type != JTokenType.Null)
                                                {
                                                    string formatInstance = ((string)formatValue);
                                                    propertiesInstance3.Format = formatInstance;
                                                }
                                            }
                                            
                                            JToken typeValue4 = serializationValue["type"];
                                            if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                            {
                                                string typeInstance4 = ((string)typeValue4);
                                                jsonSerializationInstance.Type = typeInstance4;
                                            }
                                            referenceInputPropertiesInstance.Serialization = jsonSerializationInstance;
                                        }
                                        if (typeName3 == "Avro")
                                        {
                                            AvroSerialization avroSerializationInstance = new AvroSerialization();
                                            
                                            JToken propertiesValue5 = serializationValue["properties"];
                                            if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                                            {
                                                AvroSerializationProperties propertiesInstance4 = new AvroSerializationProperties();
                                                avroSerializationInstance.Properties = propertiesInstance4;
                                            }
                                            
                                            JToken typeValue5 = serializationValue["type"];
                                            if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                            {
                                                string typeInstance5 = ((string)typeValue5);
                                                avroSerializationInstance.Type = typeInstance5;
                                            }
                                            referenceInputPropertiesInstance.Serialization = avroSerializationInstance;
                                        }
                                    }
                                    
                                    JToken diagnosticsValue = propertiesValue["diagnostics"];
                                    if (diagnosticsValue != null && diagnosticsValue.Type != JTokenType.Null)
                                    {
                                        Diagnostics diagnosticsInstance = new Diagnostics();
                                        referenceInputPropertiesInstance.Diagnostics = diagnosticsInstance;
                                        
                                        JToken conditionsArray = diagnosticsValue["conditions"];
                                        if (conditionsArray != null && conditionsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken conditionsValue in ((JArray)conditionsArray))
                                            {
                                                DiagnosticCondition diagnosticConditionInstance = new DiagnosticCondition();
                                                diagnosticsInstance.Conditions.Add(diagnosticConditionInstance);
                                                
                                                JToken sinceValue = conditionsValue["since"];
                                                if (sinceValue != null && sinceValue.Type != JTokenType.Null)
                                                {
                                                    DateTime sinceInstance = ((DateTime)sinceValue);
                                                    diagnosticConditionInstance.Since = sinceInstance;
                                                }
                                                
                                                JToken codeValue = conditionsValue["code"];
                                                if (codeValue != null && codeValue.Type != JTokenType.Null)
                                                {
                                                    string codeInstance = ((string)codeValue);
                                                    diagnosticConditionInstance.Code = codeInstance;
                                                }
                                                
                                                JToken messageValue = conditionsValue["message"];
                                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                {
                                                    string messageInstance = ((string)messageValue);
                                                    diagnosticConditionInstance.Message = messageInstance;
                                                }
                                            }
                                        }
                                    }
                                    inputInstance.Properties = referenceInputPropertiesInstance;
                                }
                                if (typeName == "Stream")
                                {
                                    StreamInputProperties streamInputPropertiesInstance = new StreamInputProperties();
                                    
                                    JToken datasourceValue2 = propertiesValue["datasource"];
                                    if (datasourceValue2 != null && datasourceValue2.Type != JTokenType.Null)
                                    {
                                        string typeName4 = ((string)datasourceValue2["type"]);
                                        if (typeName4 == "Microsoft.Storage/Blob")
                                        {
                                            BlobStreamInputDataSource blobStreamInputDataSourceInstance = new BlobStreamInputDataSource();
                                            
                                            JToken propertiesValue6 = datasourceValue2["properties"];
                                            if (propertiesValue6 != null && propertiesValue6.Type != JTokenType.Null)
                                            {
                                                BlobStreamInputDataSourceProperties propertiesInstance5 = new BlobStreamInputDataSourceProperties();
                                                blobStreamInputDataSourceInstance.Properties = propertiesInstance5;
                                                
                                                JToken storageAccountsArray2 = propertiesValue6["storageAccounts"];
                                                if (storageAccountsArray2 != null && storageAccountsArray2.Type != JTokenType.Null)
                                                {
                                                    propertiesInstance5.StorageAccounts = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.StorageAccount>();
                                                    foreach (JToken storageAccountsValue2 in ((JArray)storageAccountsArray2))
                                                    {
                                                        StorageAccount storageAccountInstance2 = new StorageAccount();
                                                        propertiesInstance5.StorageAccounts.Add(storageAccountInstance2);
                                                        
                                                        JToken accountNameValue2 = storageAccountsValue2["accountName"];
                                                        if (accountNameValue2 != null && accountNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string accountNameInstance2 = ((string)accountNameValue2);
                                                            storageAccountInstance2.AccountName = accountNameInstance2;
                                                        }
                                                        
                                                        JToken accountKeyValue2 = storageAccountsValue2["accountKey"];
                                                        if (accountKeyValue2 != null && accountKeyValue2.Type != JTokenType.Null)
                                                        {
                                                            string accountKeyInstance2 = ((string)accountKeyValue2);
                                                            storageAccountInstance2.AccountKey = accountKeyInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                JToken containerValue2 = propertiesValue6["container"];
                                                if (containerValue2 != null && containerValue2.Type != JTokenType.Null)
                                                {
                                                    string containerInstance2 = ((string)containerValue2);
                                                    propertiesInstance5.Container = containerInstance2;
                                                }
                                                
                                                JToken pathPatternValue2 = propertiesValue6["pathPattern"];
                                                if (pathPatternValue2 != null && pathPatternValue2.Type != JTokenType.Null)
                                                {
                                                    string pathPatternInstance2 = ((string)pathPatternValue2);
                                                    propertiesInstance5.PathPattern = pathPatternInstance2;
                                                }
                                                
                                                JToken dateFormatValue2 = propertiesValue6["dateFormat"];
                                                if (dateFormatValue2 != null && dateFormatValue2.Type != JTokenType.Null)
                                                {
                                                    string dateFormatInstance2 = ((string)dateFormatValue2);
                                                    propertiesInstance5.DateFormat = dateFormatInstance2;
                                                }
                                                
                                                JToken timeFormatValue2 = propertiesValue6["timeFormat"];
                                                if (timeFormatValue2 != null && timeFormatValue2.Type != JTokenType.Null)
                                                {
                                                    string timeFormatInstance2 = ((string)timeFormatValue2);
                                                    propertiesInstance5.TimeFormat = timeFormatInstance2;
                                                }
                                                
                                                JToken sourcePartitionCountValue = propertiesValue6["sourcePartitionCount"];
                                                if (sourcePartitionCountValue != null && sourcePartitionCountValue.Type != JTokenType.Null)
                                                {
                                                    int sourcePartitionCountInstance = ((int)sourcePartitionCountValue);
                                                    propertiesInstance5.SourcePartitionCount = sourcePartitionCountInstance;
                                                }
                                            }
                                            
                                            JToken typeValue6 = datasourceValue2["type"];
                                            if (typeValue6 != null && typeValue6.Type != JTokenType.Null)
                                            {
                                                string typeInstance6 = ((string)typeValue6);
                                                blobStreamInputDataSourceInstance.Type = typeInstance6;
                                            }
                                            streamInputPropertiesInstance.DataSource = blobStreamInputDataSourceInstance;
                                        }
                                        if (typeName4 == "Microsoft.ServiceBus/EventHub")
                                        {
                                            EventHubStreamInputDataSource eventHubStreamInputDataSourceInstance = new EventHubStreamInputDataSource();
                                            
                                            JToken propertiesValue7 = datasourceValue2["properties"];
                                            if (propertiesValue7 != null && propertiesValue7.Type != JTokenType.Null)
                                            {
                                                EventHubStreamInputDataSourceProperties propertiesInstance6 = new EventHubStreamInputDataSourceProperties();
                                                eventHubStreamInputDataSourceInstance.Properties = propertiesInstance6;
                                                
                                                JToken serviceBusNamespaceValue = propertiesValue7["serviceBusNamespace"];
                                                if (serviceBusNamespaceValue != null && serviceBusNamespaceValue.Type != JTokenType.Null)
                                                {
                                                    string serviceBusNamespaceInstance = ((string)serviceBusNamespaceValue);
                                                    propertiesInstance6.ServiceBusNamespace = serviceBusNamespaceInstance;
                                                }
                                                
                                                JToken sharedAccessPolicyNameValue = propertiesValue7["sharedAccessPolicyName"];
                                                if (sharedAccessPolicyNameValue != null && sharedAccessPolicyNameValue.Type != JTokenType.Null)
                                                {
                                                    string sharedAccessPolicyNameInstance = ((string)sharedAccessPolicyNameValue);
                                                    propertiesInstance6.SharedAccessPolicyName = sharedAccessPolicyNameInstance;
                                                }
                                                
                                                JToken sharedAccessPolicyKeyValue = propertiesValue7["sharedAccessPolicyKey"];
                                                if (sharedAccessPolicyKeyValue != null && sharedAccessPolicyKeyValue.Type != JTokenType.Null)
                                                {
                                                    string sharedAccessPolicyKeyInstance = ((string)sharedAccessPolicyKeyValue);
                                                    propertiesInstance6.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance;
                                                }
                                                
                                                JToken eventHubNameValue = propertiesValue7["eventHubName"];
                                                if (eventHubNameValue != null && eventHubNameValue.Type != JTokenType.Null)
                                                {
                                                    string eventHubNameInstance = ((string)eventHubNameValue);
                                                    propertiesInstance6.EventHubName = eventHubNameInstance;
                                                }
                                                
                                                JToken consumerGroupNameValue = propertiesValue7["consumerGroupName"];
                                                if (consumerGroupNameValue != null && consumerGroupNameValue.Type != JTokenType.Null)
                                                {
                                                    string consumerGroupNameInstance = ((string)consumerGroupNameValue);
                                                    propertiesInstance6.ConsumerGroupName = consumerGroupNameInstance;
                                                }
                                            }
                                            
                                            JToken typeValue7 = datasourceValue2["type"];
                                            if (typeValue7 != null && typeValue7.Type != JTokenType.Null)
                                            {
                                                string typeInstance7 = ((string)typeValue7);
                                                eventHubStreamInputDataSourceInstance.Type = typeInstance7;
                                            }
                                            streamInputPropertiesInstance.DataSource = eventHubStreamInputDataSourceInstance;
                                        }
                                        if (typeName4 == "Microsoft.Devices/IotHubs")
                                        {
                                            IoTHubStreamInputDataSource ioTHubStreamInputDataSourceInstance = new IoTHubStreamInputDataSource();
                                            
                                            JToken propertiesValue8 = datasourceValue2["properties"];
                                            if (propertiesValue8 != null && propertiesValue8.Type != JTokenType.Null)
                                            {
                                                IoTHubStreamInputDataSourceProperties propertiesInstance7 = new IoTHubStreamInputDataSourceProperties();
                                                ioTHubStreamInputDataSourceInstance.Properties = propertiesInstance7;
                                                
                                                JToken iotHubNamespaceValue = propertiesValue8["iotHubNamespace"];
                                                if (iotHubNamespaceValue != null && iotHubNamespaceValue.Type != JTokenType.Null)
                                                {
                                                    string iotHubNamespaceInstance = ((string)iotHubNamespaceValue);
                                                    propertiesInstance7.IotHubNamespace = iotHubNamespaceInstance;
                                                }
                                                
                                                JToken sharedAccessPolicyNameValue2 = propertiesValue8["sharedAccessPolicyName"];
                                                if (sharedAccessPolicyNameValue2 != null && sharedAccessPolicyNameValue2.Type != JTokenType.Null)
                                                {
                                                    string sharedAccessPolicyNameInstance2 = ((string)sharedAccessPolicyNameValue2);
                                                    propertiesInstance7.SharedAccessPolicyName = sharedAccessPolicyNameInstance2;
                                                }
                                                
                                                JToken sharedAccessPolicyKeyValue2 = propertiesValue8["sharedAccessPolicyKey"];
                                                if (sharedAccessPolicyKeyValue2 != null && sharedAccessPolicyKeyValue2.Type != JTokenType.Null)
                                                {
                                                    string sharedAccessPolicyKeyInstance2 = ((string)sharedAccessPolicyKeyValue2);
                                                    propertiesInstance7.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance2;
                                                }
                                                
                                                JToken consumerGroupNameValue2 = propertiesValue8["consumerGroupName"];
                                                if (consumerGroupNameValue2 != null && consumerGroupNameValue2.Type != JTokenType.Null)
                                                {
                                                    string consumerGroupNameInstance2 = ((string)consumerGroupNameValue2);
                                                    propertiesInstance7.ConsumerGroupName = consumerGroupNameInstance2;
                                                }
                                            }
                                            
                                            JToken typeValue8 = datasourceValue2["type"];
                                            if (typeValue8 != null && typeValue8.Type != JTokenType.Null)
                                            {
                                                string typeInstance8 = ((string)typeValue8);
                                                ioTHubStreamInputDataSourceInstance.Type = typeInstance8;
                                            }
                                            streamInputPropertiesInstance.DataSource = ioTHubStreamInputDataSourceInstance;
                                        }
                                    }
                                    
                                    JToken etagValue2 = propertiesValue["etag"];
                                    if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                    {
                                        string etagInstance2 = ((string)etagValue2);
                                        streamInputPropertiesInstance.Etag = etagInstance2;
                                    }
                                    
                                    JToken typeValue9 = propertiesValue["type"];
                                    if (typeValue9 != null && typeValue9.Type != JTokenType.Null)
                                    {
                                        string typeInstance9 = ((string)typeValue9);
                                        streamInputPropertiesInstance.Type = typeInstance9;
                                    }
                                    
                                    JToken serializationValue2 = propertiesValue["serialization"];
                                    if (serializationValue2 != null && serializationValue2.Type != JTokenType.Null)
                                    {
                                        string typeName5 = ((string)serializationValue2["type"]);
                                        if (typeName5 == "Csv")
                                        {
                                            CsvSerialization csvSerializationInstance2 = new CsvSerialization();
                                            
                                            JToken propertiesValue9 = serializationValue2["properties"];
                                            if (propertiesValue9 != null && propertiesValue9.Type != JTokenType.Null)
                                            {
                                                CsvSerializationProperties propertiesInstance8 = new CsvSerializationProperties();
                                                csvSerializationInstance2.Properties = propertiesInstance8;
                                                
                                                JToken fieldDelimiterValue2 = propertiesValue9["fieldDelimiter"];
                                                if (fieldDelimiterValue2 != null && fieldDelimiterValue2.Type != JTokenType.Null)
                                                {
                                                    string fieldDelimiterInstance2 = ((string)fieldDelimiterValue2);
                                                    propertiesInstance8.FieldDelimiter = fieldDelimiterInstance2;
                                                }
                                                
                                                JToken encodingValue3 = propertiesValue9["encoding"];
                                                if (encodingValue3 != null && encodingValue3.Type != JTokenType.Null)
                                                {
                                                    string encodingInstance3 = ((string)encodingValue3);
                                                    propertiesInstance8.Encoding = encodingInstance3;
                                                }
                                            }
                                            
                                            JToken typeValue10 = serializationValue2["type"];
                                            if (typeValue10 != null && typeValue10.Type != JTokenType.Null)
                                            {
                                                string typeInstance10 = ((string)typeValue10);
                                                csvSerializationInstance2.Type = typeInstance10;
                                            }
                                            streamInputPropertiesInstance.Serialization = csvSerializationInstance2;
                                        }
                                        if (typeName5 == "Json")
                                        {
                                            JsonSerialization jsonSerializationInstance2 = new JsonSerialization();
                                            
                                            JToken propertiesValue10 = serializationValue2["properties"];
                                            if (propertiesValue10 != null && propertiesValue10.Type != JTokenType.Null)
                                            {
                                                JsonSerializationProperties propertiesInstance9 = new JsonSerializationProperties();
                                                jsonSerializationInstance2.Properties = propertiesInstance9;
                                                
                                                JToken encodingValue4 = propertiesValue10["encoding"];
                                                if (encodingValue4 != null && encodingValue4.Type != JTokenType.Null)
                                                {
                                                    string encodingInstance4 = ((string)encodingValue4);
                                                    propertiesInstance9.Encoding = encodingInstance4;
                                                }
                                                
                                                JToken formatValue2 = propertiesValue10["format"];
                                                if (formatValue2 != null && formatValue2.Type != JTokenType.Null)
                                                {
                                                    string formatInstance2 = ((string)formatValue2);
                                                    propertiesInstance9.Format = formatInstance2;
                                                }
                                            }
                                            
                                            JToken typeValue11 = serializationValue2["type"];
                                            if (typeValue11 != null && typeValue11.Type != JTokenType.Null)
                                            {
                                                string typeInstance11 = ((string)typeValue11);
                                                jsonSerializationInstance2.Type = typeInstance11;
                                            }
                                            streamInputPropertiesInstance.Serialization = jsonSerializationInstance2;
                                        }
                                        if (typeName5 == "Avro")
                                        {
                                            AvroSerialization avroSerializationInstance2 = new AvroSerialization();
                                            
                                            JToken propertiesValue11 = serializationValue2["properties"];
                                            if (propertiesValue11 != null && propertiesValue11.Type != JTokenType.Null)
                                            {
                                                AvroSerializationProperties propertiesInstance10 = new AvroSerializationProperties();
                                                avroSerializationInstance2.Properties = propertiesInstance10;
                                            }
                                            
                                            JToken typeValue12 = serializationValue2["type"];
                                            if (typeValue12 != null && typeValue12.Type != JTokenType.Null)
                                            {
                                                string typeInstance12 = ((string)typeValue12);
                                                avroSerializationInstance2.Type = typeInstance12;
                                            }
                                            streamInputPropertiesInstance.Serialization = avroSerializationInstance2;
                                        }
                                    }
                                    
                                    JToken diagnosticsValue2 = propertiesValue["diagnostics"];
                                    if (diagnosticsValue2 != null && diagnosticsValue2.Type != JTokenType.Null)
                                    {
                                        Diagnostics diagnosticsInstance2 = new Diagnostics();
                                        streamInputPropertiesInstance.Diagnostics = diagnosticsInstance2;
                                        
                                        JToken conditionsArray2 = diagnosticsValue2["conditions"];
                                        if (conditionsArray2 != null && conditionsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken conditionsValue2 in ((JArray)conditionsArray2))
                                            {
                                                DiagnosticCondition diagnosticConditionInstance2 = new DiagnosticCondition();
                                                diagnosticsInstance2.Conditions.Add(diagnosticConditionInstance2);
                                                
                                                JToken sinceValue2 = conditionsValue2["since"];
                                                if (sinceValue2 != null && sinceValue2.Type != JTokenType.Null)
                                                {
                                                    DateTime sinceInstance2 = ((DateTime)sinceValue2);
                                                    diagnosticConditionInstance2.Since = sinceInstance2;
                                                }
                                                
                                                JToken codeValue2 = conditionsValue2["code"];
                                                if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                                {
                                                    string codeInstance2 = ((string)codeValue2);
                                                    diagnosticConditionInstance2.Code = codeInstance2;
                                                }
                                                
                                                JToken messageValue2 = conditionsValue2["message"];
                                                if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                                {
                                                    string messageInstance2 = ((string)messageValue2);
                                                    diagnosticConditionInstance2.Message = messageInstance2;
                                                }
                                            }
                                        }
                                    }
                                    inputInstance.Properties = streamInputPropertiesInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                    }
                    if (httpResponse.Headers.Contains("ETag"))
                    {
                        result.Input.Properties.Etag = httpResponse.Headers.GetValues("ETag").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get a list of the inputs defined in a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to list all the inputs in the
        /// specified stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the input list operation.
        /// </returns>
        public async Task<InputListResponse> ListInputInJobAsync(string resourceGroupName, string jobName, InputListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.PropertiesToSelect == null)
            {
                throw new ArgumentNullException("parameters.PropertiesToSelect");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListInputInJobAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.StreamAnalytics/streamingjobs/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/inputs";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("$select=" + Uri.EscapeDataString(parameters.PropertiesToSelect));
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    InputListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new InputListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Input inputInstance = new Input();
                                    result.Value.Add(inputInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        inputInstance.Name = nameInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        string typeName = ((string)propertiesValue["type"]);
                                        if (typeName == "Reference")
                                        {
                                            ReferenceInputProperties referenceInputPropertiesInstance = new ReferenceInputProperties();
                                            
                                            JToken datasourceValue = propertiesValue["datasource"];
                                            if (datasourceValue != null && datasourceValue.Type != JTokenType.Null)
                                            {
                                                string typeName2 = ((string)datasourceValue["type"]);
                                                if (typeName2 == "Microsoft.Storage/Blob")
                                                {
                                                    BlobReferenceInputDataSource blobReferenceInputDataSourceInstance = new BlobReferenceInputDataSource();
                                                    
                                                    JToken propertiesValue2 = datasourceValue["properties"];
                                                    if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                    {
                                                        BlobReferenceInputDataSourceProperties propertiesInstance = new BlobReferenceInputDataSourceProperties();
                                                        blobReferenceInputDataSourceInstance.Properties = propertiesInstance;
                                                        
                                                        JToken storageAccountsArray = propertiesValue2["storageAccounts"];
                                                        if (storageAccountsArray != null && storageAccountsArray.Type != JTokenType.Null)
                                                        {
                                                            propertiesInstance.StorageAccounts = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.StorageAccount>();
                                                            foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray))
                                                            {
                                                                StorageAccount storageAccountInstance = new StorageAccount();
                                                                propertiesInstance.StorageAccounts.Add(storageAccountInstance);
                                                                
                                                                JToken accountNameValue = storageAccountsValue["accountName"];
                                                                if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                                {
                                                                    string accountNameInstance = ((string)accountNameValue);
                                                                    storageAccountInstance.AccountName = accountNameInstance;
                                                                }
                                                                
                                                                JToken accountKeyValue = storageAccountsValue["accountKey"];
                                                                if (accountKeyValue != null && accountKeyValue.Type != JTokenType.Null)
                                                                {
                                                                    string accountKeyInstance = ((string)accountKeyValue);
                                                                    storageAccountInstance.AccountKey = accountKeyInstance;
                                                                }
                                                            }
                                                        }
                                                        
                                                        JToken containerValue = propertiesValue2["container"];
                                                        if (containerValue != null && containerValue.Type != JTokenType.Null)
                                                        {
                                                            string containerInstance = ((string)containerValue);
                                                            propertiesInstance.Container = containerInstance;
                                                        }
                                                        
                                                        JToken pathPatternValue = propertiesValue2["pathPattern"];
                                                        if (pathPatternValue != null && pathPatternValue.Type != JTokenType.Null)
                                                        {
                                                            string pathPatternInstance = ((string)pathPatternValue);
                                                            propertiesInstance.PathPattern = pathPatternInstance;
                                                        }
                                                        
                                                        JToken dateFormatValue = propertiesValue2["dateFormat"];
                                                        if (dateFormatValue != null && dateFormatValue.Type != JTokenType.Null)
                                                        {
                                                            string dateFormatInstance = ((string)dateFormatValue);
                                                            propertiesInstance.DateFormat = dateFormatInstance;
                                                        }
                                                        
                                                        JToken timeFormatValue = propertiesValue2["timeFormat"];
                                                        if (timeFormatValue != null && timeFormatValue.Type != JTokenType.Null)
                                                        {
                                                            string timeFormatInstance = ((string)timeFormatValue);
                                                            propertiesInstance.TimeFormat = timeFormatInstance;
                                                        }
                                                    }
                                                    
                                                    JToken typeValue = datasourceValue["type"];
                                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance = ((string)typeValue);
                                                        blobReferenceInputDataSourceInstance.Type = typeInstance;
                                                    }
                                                    referenceInputPropertiesInstance.DataSource = blobReferenceInputDataSourceInstance;
                                                }
                                            }
                                            
                                            JToken etagValue = propertiesValue["etag"];
                                            if (etagValue != null && etagValue.Type != JTokenType.Null)
                                            {
                                                string etagInstance = ((string)etagValue);
                                                referenceInputPropertiesInstance.Etag = etagInstance;
                                            }
                                            
                                            JToken typeValue2 = propertiesValue["type"];
                                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                            {
                                                string typeInstance2 = ((string)typeValue2);
                                                referenceInputPropertiesInstance.Type = typeInstance2;
                                            }
                                            
                                            JToken serializationValue = propertiesValue["serialization"];
                                            if (serializationValue != null && serializationValue.Type != JTokenType.Null)
                                            {
                                                string typeName3 = ((string)serializationValue["type"]);
                                                if (typeName3 == "Csv")
                                                {
                                                    CsvSerialization csvSerializationInstance = new CsvSerialization();
                                                    
                                                    JToken propertiesValue3 = serializationValue["properties"];
                                                    if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                                    {
                                                        CsvSerializationProperties propertiesInstance2 = new CsvSerializationProperties();
                                                        csvSerializationInstance.Properties = propertiesInstance2;
                                                        
                                                        JToken fieldDelimiterValue = propertiesValue3["fieldDelimiter"];
                                                        if (fieldDelimiterValue != null && fieldDelimiterValue.Type != JTokenType.Null)
                                                        {
                                                            string fieldDelimiterInstance = ((string)fieldDelimiterValue);
                                                            propertiesInstance2.FieldDelimiter = fieldDelimiterInstance;
                                                        }
                                                        
                                                        JToken encodingValue = propertiesValue3["encoding"];
                                                        if (encodingValue != null && encodingValue.Type != JTokenType.Null)
                                                        {
                                                            string encodingInstance = ((string)encodingValue);
                                                            propertiesInstance2.Encoding = encodingInstance;
                                                        }
                                                    }
                                                    
                                                    JToken typeValue3 = serializationValue["type"];
                                                    if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance3 = ((string)typeValue3);
                                                        csvSerializationInstance.Type = typeInstance3;
                                                    }
                                                    referenceInputPropertiesInstance.Serialization = csvSerializationInstance;
                                                }
                                                if (typeName3 == "Json")
                                                {
                                                    JsonSerialization jsonSerializationInstance = new JsonSerialization();
                                                    
                                                    JToken propertiesValue4 = serializationValue["properties"];
                                                    if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                                    {
                                                        JsonSerializationProperties propertiesInstance3 = new JsonSerializationProperties();
                                                        jsonSerializationInstance.Properties = propertiesInstance3;
                                                        
                                                        JToken encodingValue2 = propertiesValue4["encoding"];
                                                        if (encodingValue2 != null && encodingValue2.Type != JTokenType.Null)
                                                        {
                                                            string encodingInstance2 = ((string)encodingValue2);
                                                            propertiesInstance3.Encoding = encodingInstance2;
                                                        }
                                                        
                                                        JToken formatValue = propertiesValue4["format"];
                                                        if (formatValue != null && formatValue.Type != JTokenType.Null)
                                                        {
                                                            string formatInstance = ((string)formatValue);
                                                            propertiesInstance3.Format = formatInstance;
                                                        }
                                                    }
                                                    
                                                    JToken typeValue4 = serializationValue["type"];
                                                    if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance4 = ((string)typeValue4);
                                                        jsonSerializationInstance.Type = typeInstance4;
                                                    }
                                                    referenceInputPropertiesInstance.Serialization = jsonSerializationInstance;
                                                }
                                                if (typeName3 == "Avro")
                                                {
                                                    AvroSerialization avroSerializationInstance = new AvroSerialization();
                                                    
                                                    JToken propertiesValue5 = serializationValue["properties"];
                                                    if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                                                    {
                                                        AvroSerializationProperties propertiesInstance4 = new AvroSerializationProperties();
                                                        avroSerializationInstance.Properties = propertiesInstance4;
                                                    }
                                                    
                                                    JToken typeValue5 = serializationValue["type"];
                                                    if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance5 = ((string)typeValue5);
                                                        avroSerializationInstance.Type = typeInstance5;
                                                    }
                                                    referenceInputPropertiesInstance.Serialization = avroSerializationInstance;
                                                }
                                            }
                                            
                                            JToken diagnosticsValue = propertiesValue["diagnostics"];
                                            if (diagnosticsValue != null && diagnosticsValue.Type != JTokenType.Null)
                                            {
                                                Diagnostics diagnosticsInstance = new Diagnostics();
                                                referenceInputPropertiesInstance.Diagnostics = diagnosticsInstance;
                                                
                                                JToken conditionsArray = diagnosticsValue["conditions"];
                                                if (conditionsArray != null && conditionsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken conditionsValue in ((JArray)conditionsArray))
                                                    {
                                                        DiagnosticCondition diagnosticConditionInstance = new DiagnosticCondition();
                                                        diagnosticsInstance.Conditions.Add(diagnosticConditionInstance);
                                                        
                                                        JToken sinceValue = conditionsValue["since"];
                                                        if (sinceValue != null && sinceValue.Type != JTokenType.Null)
                                                        {
                                                            DateTime sinceInstance = ((DateTime)sinceValue);
                                                            diagnosticConditionInstance.Since = sinceInstance;
                                                        }
                                                        
                                                        JToken codeValue = conditionsValue["code"];
                                                        if (codeValue != null && codeValue.Type != JTokenType.Null)
                                                        {
                                                            string codeInstance = ((string)codeValue);
                                                            diagnosticConditionInstance.Code = codeInstance;
                                                        }
                                                        
                                                        JToken messageValue = conditionsValue["message"];
                                                        if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                        {
                                                            string messageInstance = ((string)messageValue);
                                                            diagnosticConditionInstance.Message = messageInstance;
                                                        }
                                                    }
                                                }
                                            }
                                            inputInstance.Properties = referenceInputPropertiesInstance;
                                        }
                                        if (typeName == "Stream")
                                        {
                                            StreamInputProperties streamInputPropertiesInstance = new StreamInputProperties();
                                            
                                            JToken datasourceValue2 = propertiesValue["datasource"];
                                            if (datasourceValue2 != null && datasourceValue2.Type != JTokenType.Null)
                                            {
                                                string typeName4 = ((string)datasourceValue2["type"]);
                                                if (typeName4 == "Microsoft.Storage/Blob")
                                                {
                                                    BlobStreamInputDataSource blobStreamInputDataSourceInstance = new BlobStreamInputDataSource();
                                                    
                                                    JToken propertiesValue6 = datasourceValue2["properties"];
                                                    if (propertiesValue6 != null && propertiesValue6.Type != JTokenType.Null)
                                                    {
                                                        BlobStreamInputDataSourceProperties propertiesInstance5 = new BlobStreamInputDataSourceProperties();
                                                        blobStreamInputDataSourceInstance.Properties = propertiesInstance5;
                                                        
                                                        JToken storageAccountsArray2 = propertiesValue6["storageAccounts"];
                                                        if (storageAccountsArray2 != null && storageAccountsArray2.Type != JTokenType.Null)
                                                        {
                                                            propertiesInstance5.StorageAccounts = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.StorageAccount>();
                                                            foreach (JToken storageAccountsValue2 in ((JArray)storageAccountsArray2))
                                                            {
                                                                StorageAccount storageAccountInstance2 = new StorageAccount();
                                                                propertiesInstance5.StorageAccounts.Add(storageAccountInstance2);
                                                                
                                                                JToken accountNameValue2 = storageAccountsValue2["accountName"];
                                                                if (accountNameValue2 != null && accountNameValue2.Type != JTokenType.Null)
                                                                {
                                                                    string accountNameInstance2 = ((string)accountNameValue2);
                                                                    storageAccountInstance2.AccountName = accountNameInstance2;
                                                                }
                                                                
                                                                JToken accountKeyValue2 = storageAccountsValue2["accountKey"];
                                                                if (accountKeyValue2 != null && accountKeyValue2.Type != JTokenType.Null)
                                                                {
                                                                    string accountKeyInstance2 = ((string)accountKeyValue2);
                                                                    storageAccountInstance2.AccountKey = accountKeyInstance2;
                                                                }
                                                            }
                                                        }
                                                        
                                                        JToken containerValue2 = propertiesValue6["container"];
                                                        if (containerValue2 != null && containerValue2.Type != JTokenType.Null)
                                                        {
                                                            string containerInstance2 = ((string)containerValue2);
                                                            propertiesInstance5.Container = containerInstance2;
                                                        }
                                                        
                                                        JToken pathPatternValue2 = propertiesValue6["pathPattern"];
                                                        if (pathPatternValue2 != null && pathPatternValue2.Type != JTokenType.Null)
                                                        {
                                                            string pathPatternInstance2 = ((string)pathPatternValue2);
                                                            propertiesInstance5.PathPattern = pathPatternInstance2;
                                                        }
                                                        
                                                        JToken dateFormatValue2 = propertiesValue6["dateFormat"];
                                                        if (dateFormatValue2 != null && dateFormatValue2.Type != JTokenType.Null)
                                                        {
                                                            string dateFormatInstance2 = ((string)dateFormatValue2);
                                                            propertiesInstance5.DateFormat = dateFormatInstance2;
                                                        }
                                                        
                                                        JToken timeFormatValue2 = propertiesValue6["timeFormat"];
                                                        if (timeFormatValue2 != null && timeFormatValue2.Type != JTokenType.Null)
                                                        {
                                                            string timeFormatInstance2 = ((string)timeFormatValue2);
                                                            propertiesInstance5.TimeFormat = timeFormatInstance2;
                                                        }
                                                        
                                                        JToken sourcePartitionCountValue = propertiesValue6["sourcePartitionCount"];
                                                        if (sourcePartitionCountValue != null && sourcePartitionCountValue.Type != JTokenType.Null)
                                                        {
                                                            int sourcePartitionCountInstance = ((int)sourcePartitionCountValue);
                                                            propertiesInstance5.SourcePartitionCount = sourcePartitionCountInstance;
                                                        }
                                                    }
                                                    
                                                    JToken typeValue6 = datasourceValue2["type"];
                                                    if (typeValue6 != null && typeValue6.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance6 = ((string)typeValue6);
                                                        blobStreamInputDataSourceInstance.Type = typeInstance6;
                                                    }
                                                    streamInputPropertiesInstance.DataSource = blobStreamInputDataSourceInstance;
                                                }
                                                if (typeName4 == "Microsoft.ServiceBus/EventHub")
                                                {
                                                    EventHubStreamInputDataSource eventHubStreamInputDataSourceInstance = new EventHubStreamInputDataSource();
                                                    
                                                    JToken propertiesValue7 = datasourceValue2["properties"];
                                                    if (propertiesValue7 != null && propertiesValue7.Type != JTokenType.Null)
                                                    {
                                                        EventHubStreamInputDataSourceProperties propertiesInstance6 = new EventHubStreamInputDataSourceProperties();
                                                        eventHubStreamInputDataSourceInstance.Properties = propertiesInstance6;
                                                        
                                                        JToken serviceBusNamespaceValue = propertiesValue7["serviceBusNamespace"];
                                                        if (serviceBusNamespaceValue != null && serviceBusNamespaceValue.Type != JTokenType.Null)
                                                        {
                                                            string serviceBusNamespaceInstance = ((string)serviceBusNamespaceValue);
                                                            propertiesInstance6.ServiceBusNamespace = serviceBusNamespaceInstance;
                                                        }
                                                        
                                                        JToken sharedAccessPolicyNameValue = propertiesValue7["sharedAccessPolicyName"];
                                                        if (sharedAccessPolicyNameValue != null && sharedAccessPolicyNameValue.Type != JTokenType.Null)
                                                        {
                                                            string sharedAccessPolicyNameInstance = ((string)sharedAccessPolicyNameValue);
                                                            propertiesInstance6.SharedAccessPolicyName = sharedAccessPolicyNameInstance;
                                                        }
                                                        
                                                        JToken sharedAccessPolicyKeyValue = propertiesValue7["sharedAccessPolicyKey"];
                                                        if (sharedAccessPolicyKeyValue != null && sharedAccessPolicyKeyValue.Type != JTokenType.Null)
                                                        {
                                                            string sharedAccessPolicyKeyInstance = ((string)sharedAccessPolicyKeyValue);
                                                            propertiesInstance6.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance;
                                                        }
                                                        
                                                        JToken eventHubNameValue = propertiesValue7["eventHubName"];
                                                        if (eventHubNameValue != null && eventHubNameValue.Type != JTokenType.Null)
                                                        {
                                                            string eventHubNameInstance = ((string)eventHubNameValue);
                                                            propertiesInstance6.EventHubName = eventHubNameInstance;
                                                        }
                                                        
                                                        JToken consumerGroupNameValue = propertiesValue7["consumerGroupName"];
                                                        if (consumerGroupNameValue != null && consumerGroupNameValue.Type != JTokenType.Null)
                                                        {
                                                            string consumerGroupNameInstance = ((string)consumerGroupNameValue);
                                                            propertiesInstance6.ConsumerGroupName = consumerGroupNameInstance;
                                                        }
                                                    }
                                                    
                                                    JToken typeValue7 = datasourceValue2["type"];
                                                    if (typeValue7 != null && typeValue7.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance7 = ((string)typeValue7);
                                                        eventHubStreamInputDataSourceInstance.Type = typeInstance7;
                                                    }
                                                    streamInputPropertiesInstance.DataSource = eventHubStreamInputDataSourceInstance;
                                                }
                                                if (typeName4 == "Microsoft.Devices/IotHubs")
                                                {
                                                    IoTHubStreamInputDataSource ioTHubStreamInputDataSourceInstance = new IoTHubStreamInputDataSource();
                                                    
                                                    JToken propertiesValue8 = datasourceValue2["properties"];
                                                    if (propertiesValue8 != null && propertiesValue8.Type != JTokenType.Null)
                                                    {
                                                        IoTHubStreamInputDataSourceProperties propertiesInstance7 = new IoTHubStreamInputDataSourceProperties();
                                                        ioTHubStreamInputDataSourceInstance.Properties = propertiesInstance7;
                                                        
                                                        JToken iotHubNamespaceValue = propertiesValue8["iotHubNamespace"];
                                                        if (iotHubNamespaceValue != null && iotHubNamespaceValue.Type != JTokenType.Null)
                                                        {
                                                            string iotHubNamespaceInstance = ((string)iotHubNamespaceValue);
                                                            propertiesInstance7.IotHubNamespace = iotHubNamespaceInstance;
                                                        }
                                                        
                                                        JToken sharedAccessPolicyNameValue2 = propertiesValue8["sharedAccessPolicyName"];
                                                        if (sharedAccessPolicyNameValue2 != null && sharedAccessPolicyNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string sharedAccessPolicyNameInstance2 = ((string)sharedAccessPolicyNameValue2);
                                                            propertiesInstance7.SharedAccessPolicyName = sharedAccessPolicyNameInstance2;
                                                        }
                                                        
                                                        JToken sharedAccessPolicyKeyValue2 = propertiesValue8["sharedAccessPolicyKey"];
                                                        if (sharedAccessPolicyKeyValue2 != null && sharedAccessPolicyKeyValue2.Type != JTokenType.Null)
                                                        {
                                                            string sharedAccessPolicyKeyInstance2 = ((string)sharedAccessPolicyKeyValue2);
                                                            propertiesInstance7.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance2;
                                                        }
                                                        
                                                        JToken consumerGroupNameValue2 = propertiesValue8["consumerGroupName"];
                                                        if (consumerGroupNameValue2 != null && consumerGroupNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string consumerGroupNameInstance2 = ((string)consumerGroupNameValue2);
                                                            propertiesInstance7.ConsumerGroupName = consumerGroupNameInstance2;
                                                        }
                                                    }
                                                    
                                                    JToken typeValue8 = datasourceValue2["type"];
                                                    if (typeValue8 != null && typeValue8.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance8 = ((string)typeValue8);
                                                        ioTHubStreamInputDataSourceInstance.Type = typeInstance8;
                                                    }
                                                    streamInputPropertiesInstance.DataSource = ioTHubStreamInputDataSourceInstance;
                                                }
                                            }
                                            
                                            JToken etagValue2 = propertiesValue["etag"];
                                            if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                            {
                                                string etagInstance2 = ((string)etagValue2);
                                                streamInputPropertiesInstance.Etag = etagInstance2;
                                            }
                                            
                                            JToken typeValue9 = propertiesValue["type"];
                                            if (typeValue9 != null && typeValue9.Type != JTokenType.Null)
                                            {
                                                string typeInstance9 = ((string)typeValue9);
                                                streamInputPropertiesInstance.Type = typeInstance9;
                                            }
                                            
                                            JToken serializationValue2 = propertiesValue["serialization"];
                                            if (serializationValue2 != null && serializationValue2.Type != JTokenType.Null)
                                            {
                                                string typeName5 = ((string)serializationValue2["type"]);
                                                if (typeName5 == "Csv")
                                                {
                                                    CsvSerialization csvSerializationInstance2 = new CsvSerialization();
                                                    
                                                    JToken propertiesValue9 = serializationValue2["properties"];
                                                    if (propertiesValue9 != null && propertiesValue9.Type != JTokenType.Null)
                                                    {
                                                        CsvSerializationProperties propertiesInstance8 = new CsvSerializationProperties();
                                                        csvSerializationInstance2.Properties = propertiesInstance8;
                                                        
                                                        JToken fieldDelimiterValue2 = propertiesValue9["fieldDelimiter"];
                                                        if (fieldDelimiterValue2 != null && fieldDelimiterValue2.Type != JTokenType.Null)
                                                        {
                                                            string fieldDelimiterInstance2 = ((string)fieldDelimiterValue2);
                                                            propertiesInstance8.FieldDelimiter = fieldDelimiterInstance2;
                                                        }
                                                        
                                                        JToken encodingValue3 = propertiesValue9["encoding"];
                                                        if (encodingValue3 != null && encodingValue3.Type != JTokenType.Null)
                                                        {
                                                            string encodingInstance3 = ((string)encodingValue3);
                                                            propertiesInstance8.Encoding = encodingInstance3;
                                                        }
                                                    }
                                                    
                                                    JToken typeValue10 = serializationValue2["type"];
                                                    if (typeValue10 != null && typeValue10.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance10 = ((string)typeValue10);
                                                        csvSerializationInstance2.Type = typeInstance10;
                                                    }
                                                    streamInputPropertiesInstance.Serialization = csvSerializationInstance2;
                                                }
                                                if (typeName5 == "Json")
                                                {
                                                    JsonSerialization jsonSerializationInstance2 = new JsonSerialization();
                                                    
                                                    JToken propertiesValue10 = serializationValue2["properties"];
                                                    if (propertiesValue10 != null && propertiesValue10.Type != JTokenType.Null)
                                                    {
                                                        JsonSerializationProperties propertiesInstance9 = new JsonSerializationProperties();
                                                        jsonSerializationInstance2.Properties = propertiesInstance9;
                                                        
                                                        JToken encodingValue4 = propertiesValue10["encoding"];
                                                        if (encodingValue4 != null && encodingValue4.Type != JTokenType.Null)
                                                        {
                                                            string encodingInstance4 = ((string)encodingValue4);
                                                            propertiesInstance9.Encoding = encodingInstance4;
                                                        }
                                                        
                                                        JToken formatValue2 = propertiesValue10["format"];
                                                        if (formatValue2 != null && formatValue2.Type != JTokenType.Null)
                                                        {
                                                            string formatInstance2 = ((string)formatValue2);
                                                            propertiesInstance9.Format = formatInstance2;
                                                        }
                                                    }
                                                    
                                                    JToken typeValue11 = serializationValue2["type"];
                                                    if (typeValue11 != null && typeValue11.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance11 = ((string)typeValue11);
                                                        jsonSerializationInstance2.Type = typeInstance11;
                                                    }
                                                    streamInputPropertiesInstance.Serialization = jsonSerializationInstance2;
                                                }
                                                if (typeName5 == "Avro")
                                                {
                                                    AvroSerialization avroSerializationInstance2 = new AvroSerialization();
                                                    
                                                    JToken propertiesValue11 = serializationValue2["properties"];
                                                    if (propertiesValue11 != null && propertiesValue11.Type != JTokenType.Null)
                                                    {
                                                        AvroSerializationProperties propertiesInstance10 = new AvroSerializationProperties();
                                                        avroSerializationInstance2.Properties = propertiesInstance10;
                                                    }
                                                    
                                                    JToken typeValue12 = serializationValue2["type"];
                                                    if (typeValue12 != null && typeValue12.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance12 = ((string)typeValue12);
                                                        avroSerializationInstance2.Type = typeInstance12;
                                                    }
                                                    streamInputPropertiesInstance.Serialization = avroSerializationInstance2;
                                                }
                                            }
                                            
                                            JToken diagnosticsValue2 = propertiesValue["diagnostics"];
                                            if (diagnosticsValue2 != null && diagnosticsValue2.Type != JTokenType.Null)
                                            {
                                                Diagnostics diagnosticsInstance2 = new Diagnostics();
                                                streamInputPropertiesInstance.Diagnostics = diagnosticsInstance2;
                                                
                                                JToken conditionsArray2 = diagnosticsValue2["conditions"];
                                                if (conditionsArray2 != null && conditionsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken conditionsValue2 in ((JArray)conditionsArray2))
                                                    {
                                                        DiagnosticCondition diagnosticConditionInstance2 = new DiagnosticCondition();
                                                        diagnosticsInstance2.Conditions.Add(diagnosticConditionInstance2);
                                                        
                                                        JToken sinceValue2 = conditionsValue2["since"];
                                                        if (sinceValue2 != null && sinceValue2.Type != JTokenType.Null)
                                                        {
                                                            DateTime sinceInstance2 = ((DateTime)sinceValue2);
                                                            diagnosticConditionInstance2.Since = sinceInstance2;
                                                        }
                                                        
                                                        JToken codeValue2 = conditionsValue2["code"];
                                                        if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                                        {
                                                            string codeInstance2 = ((string)codeValue2);
                                                            diagnosticConditionInstance2.Code = codeInstance2;
                                                        }
                                                        
                                                        JToken messageValue2 = conditionsValue2["message"];
                                                        if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                                        {
                                                            string messageInstance2 = ((string)messageValue2);
                                                            diagnosticConditionInstance2.Message = messageInstance2;
                                                        }
                                                    }
                                                }
                                            }
                                            inputInstance.Properties = streamInputPropertiesInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update an input for a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='inputName'>
        /// Required. The name of the input for the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to update an input for a stream
        /// analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the input patch operation.
        /// </returns>
        public async Task<InputPatchResponse> PatchAsync(string resourceGroupName, string jobName, string inputName, InputPatchParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (inputName == null)
            {
                throw new ArgumentNullException("inputName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Properties == null)
            {
                throw new ArgumentNullException("parameters.Properties");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("inputName", inputName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "PatchAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.StreamAnalytics/streamingjobs/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/inputs/";
            url = url + Uri.EscapeDataString(inputName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject inputPatchParametersValue = new JObject();
                requestDoc = inputPatchParametersValue;
                
                JObject propertiesValue = new JObject();
                inputPatchParametersValue["properties"] = propertiesValue;
                if (parameters.Properties is ReferenceInputProperties)
                {
                    propertiesValue["type"] = "Reference";
                    ReferenceInputProperties derived = ((ReferenceInputProperties)parameters.Properties);
                    
                    if (derived.DataSource != null)
                    {
                        JObject datasourceValue = new JObject();
                        propertiesValue["datasource"] = datasourceValue;
                        if (derived.DataSource is BlobReferenceInputDataSource)
                        {
                            datasourceValue["type"] = "Microsoft.Storage/Blob";
                            BlobReferenceInputDataSource derived2 = ((BlobReferenceInputDataSource)derived.DataSource);
                            
                            if (derived2.Properties != null)
                            {
                                JObject propertiesValue2 = new JObject();
                                datasourceValue["properties"] = propertiesValue2;
                                
                                if (derived2.Properties.StorageAccounts != null)
                                {
                                    JArray storageAccountsArray = new JArray();
                                    foreach (StorageAccount storageAccountsItem in derived2.Properties.StorageAccounts)
                                    {
                                        JObject storageAccountValue = new JObject();
                                        storageAccountsArray.Add(storageAccountValue);
                                        
                                        if (storageAccountsItem.AccountName != null)
                                        {
                                            storageAccountValue["accountName"] = storageAccountsItem.AccountName;
                                        }
                                        
                                        if (storageAccountsItem.AccountKey != null)
                                        {
                                            storageAccountValue["accountKey"] = storageAccountsItem.AccountKey;
                                        }
                                    }
                                    propertiesValue2["storageAccounts"] = storageAccountsArray;
                                }
                                
                                if (derived2.Properties.Container != null)
                                {
                                    propertiesValue2["container"] = derived2.Properties.Container;
                                }
                                
                                if (derived2.Properties.PathPattern != null)
                                {
                                    propertiesValue2["pathPattern"] = derived2.Properties.PathPattern;
                                }
                                
                                if (derived2.Properties.DateFormat != null)
                                {
                                    propertiesValue2["dateFormat"] = derived2.Properties.DateFormat;
                                }
                                
                                if (derived2.Properties.TimeFormat != null)
                                {
                                    propertiesValue2["timeFormat"] = derived2.Properties.TimeFormat;
                                }
                            }
                            
                            if (derived2.Type != null)
                            {
                                datasourceValue["type"] = derived2.Type;
                            }
                        }
                    }
                    
                    if (derived.Etag != null)
                    {
                        propertiesValue["etag"] = derived.Etag;
                    }
                    
                    if (derived.Type != null)
                    {
                        propertiesValue["type"] = derived.Type;
                    }
                    
                    if (derived.Serialization != null)
                    {
                        JObject serializationValue = new JObject();
                        propertiesValue["serialization"] = serializationValue;
                        if (derived.Serialization is CsvSerialization)
                        {
                            serializationValue["type"] = "Csv";
                            CsvSerialization derived3 = ((CsvSerialization)derived.Serialization);
                            
                            if (derived3.Properties != null)
                            {
                                JObject propertiesValue3 = new JObject();
                                serializationValue["properties"] = propertiesValue3;
                                
                                if (derived3.Properties.FieldDelimiter != null)
                                {
                                    propertiesValue3["fieldDelimiter"] = derived3.Properties.FieldDelimiter;
                                }
                                
                                if (derived3.Properties.Encoding != null)
                                {
                                    propertiesValue3["encoding"] = derived3.Properties.Encoding;
                                }
                            }
                            
                            if (derived3.Type != null)
                            {
                                serializationValue["type"] = derived3.Type;
                            }
                        }
                        if (derived.Serialization is JsonSerialization)
                        {
                            serializationValue["type"] = "Json";
                            JsonSerialization derived4 = ((JsonSerialization)derived.Serialization);
                            
                            if (derived4.Properties != null)
                            {
                                JObject propertiesValue4 = new JObject();
                                serializationValue["properties"] = propertiesValue4;
                                
                                if (derived4.Properties.Encoding != null)
                                {
                                    propertiesValue4["encoding"] = derived4.Properties.Encoding;
                                }
                                
                                if (derived4.Properties.Format != null)
                                {
                                    propertiesValue4["format"] = derived4.Properties.Format;
                                }
                            }
                            
                            if (derived4.Type != null)
                            {
                                serializationValue["type"] = derived4.Type;
                            }
                        }
                        if (derived.Serialization is AvroSerialization)
                        {
                            serializationValue["type"] = "Avro";
                            AvroSerialization derived5 = ((AvroSerialization)derived.Serialization);
                            
                            if (derived5.Properties != null)
                            {
                                serializationValue["properties"] = derived5.Properties.ToString();
                            }
                            
                            if (derived5.Type != null)
                            {
                                serializationValue["type"] = derived5.Type;
                            }
                        }
                    }
                    
                    if (derived.Diagnostics != null)
                    {
                        JObject diagnosticsValue = new JObject();
                        propertiesValue["diagnostics"] = diagnosticsValue;
                        
                        if (derived.Diagnostics.Conditions != null)
                        {
                            if (derived.Diagnostics.Conditions is ILazyCollection == false || ((ILazyCollection)derived.Diagnostics.Conditions).IsInitialized)
                            {
                                JArray conditionsArray = new JArray();
                                foreach (DiagnosticCondition conditionsItem in derived.Diagnostics.Conditions)
                                {
                                    JObject diagnosticConditionValue = new JObject();
                                    conditionsArray.Add(diagnosticConditionValue);
                                    
                                    if (conditionsItem.Since != null)
                                    {
                                        diagnosticConditionValue["since"] = conditionsItem.Since.Value;
                                    }
                                    
                                    if (conditionsItem.Code != null)
                                    {
                                        diagnosticConditionValue["code"] = conditionsItem.Code;
                                    }
                                    
                                    if (conditionsItem.Message != null)
                                    {
                                        diagnosticConditionValue["message"] = conditionsItem.Message;
                                    }
                                }
                                diagnosticsValue["conditions"] = conditionsArray;
                            }
                        }
                    }
                }
                if (parameters.Properties is StreamInputProperties)
                {
                    propertiesValue["type"] = "Stream";
                    StreamInputProperties derived6 = ((StreamInputProperties)parameters.Properties);
                    
                    if (derived6.DataSource != null)
                    {
                        JObject datasourceValue2 = new JObject();
                        propertiesValue["datasource"] = datasourceValue2;
                        if (derived6.DataSource is BlobStreamInputDataSource)
                        {
                            datasourceValue2["type"] = "Microsoft.Storage/Blob";
                            BlobStreamInputDataSource derived7 = ((BlobStreamInputDataSource)derived6.DataSource);
                            
                            if (derived7.Properties != null)
                            {
                                JObject propertiesValue5 = new JObject();
                                datasourceValue2["properties"] = propertiesValue5;
                                
                                if (derived7.Properties.StorageAccounts != null)
                                {
                                    JArray storageAccountsArray2 = new JArray();
                                    foreach (StorageAccount storageAccountsItem2 in derived7.Properties.StorageAccounts)
                                    {
                                        JObject storageAccountValue2 = new JObject();
                                        storageAccountsArray2.Add(storageAccountValue2);
                                        
                                        if (storageAccountsItem2.AccountName != null)
                                        {
                                            storageAccountValue2["accountName"] = storageAccountsItem2.AccountName;
                                        }
                                        
                                        if (storageAccountsItem2.AccountKey != null)
                                        {
                                            storageAccountValue2["accountKey"] = storageAccountsItem2.AccountKey;
                                        }
                                    }
                                    propertiesValue5["storageAccounts"] = storageAccountsArray2;
                                }
                                
                                if (derived7.Properties.Container != null)
                                {
                                    propertiesValue5["container"] = derived7.Properties.Container;
                                }
                                
                                if (derived7.Properties.PathPattern != null)
                                {
                                    propertiesValue5["pathPattern"] = derived7.Properties.PathPattern;
                                }
                                
                                if (derived7.Properties.DateFormat != null)
                                {
                                    propertiesValue5["dateFormat"] = derived7.Properties.DateFormat;
                                }
                                
                                if (derived7.Properties.TimeFormat != null)
                                {
                                    propertiesValue5["timeFormat"] = derived7.Properties.TimeFormat;
                                }
                                
                                if (derived7.Properties.SourcePartitionCount != null)
                                {
                                    propertiesValue5["sourcePartitionCount"] = derived7.Properties.SourcePartitionCount.Value;
                                }
                            }
                            
                            if (derived7.Type != null)
                            {
                                datasourceValue2["type"] = derived7.Type;
                            }
                        }
                        if (derived6.DataSource is EventHubStreamInputDataSource)
                        {
                            datasourceValue2["type"] = "Microsoft.ServiceBus/EventHub";
                            EventHubStreamInputDataSource derived8 = ((EventHubStreamInputDataSource)derived6.DataSource);
                            
                            if (derived8.Properties != null)
                            {
                                JObject propertiesValue6 = new JObject();
                                datasourceValue2["properties"] = propertiesValue6;
                                
                                if (derived8.Properties.ServiceBusNamespace != null)
                                {
                                    propertiesValue6["serviceBusNamespace"] = derived8.Properties.ServiceBusNamespace;
                                }
                                
                                if (derived8.Properties.SharedAccessPolicyName != null)
                                {
                                    propertiesValue6["sharedAccessPolicyName"] = derived8.Properties.SharedAccessPolicyName;
                                }
                                
                                if (derived8.Properties.SharedAccessPolicyKey != null)
                                {
                                    propertiesValue6["sharedAccessPolicyKey"] = derived8.Properties.SharedAccessPolicyKey;
                                }
                                
                                if (derived8.Properties.EventHubName != null)
                                {
                                    propertiesValue6["eventHubName"] = derived8.Properties.EventHubName;
                                }
                                
                                if (derived8.Properties.ConsumerGroupName != null)
                                {
                                    propertiesValue6["consumerGroupName"] = derived8.Properties.ConsumerGroupName;
                                }
                            }
                            
                            if (derived8.Type != null)
                            {
                                datasourceValue2["type"] = derived8.Type;
                            }
                        }
                        if (derived6.DataSource is IoTHubStreamInputDataSource)
                        {
                            datasourceValue2["type"] = "Microsoft.Devices/IotHubs";
                            IoTHubStreamInputDataSource derived9 = ((IoTHubStreamInputDataSource)derived6.DataSource);
                            
                            if (derived9.Properties != null)
                            {
                                JObject propertiesValue7 = new JObject();
                                datasourceValue2["properties"] = propertiesValue7;
                                
                                if (derived9.Properties.IotHubNamespace != null)
                                {
                                    propertiesValue7["iotHubNamespace"] = derived9.Properties.IotHubNamespace;
                                }
                                
                                if (derived9.Properties.SharedAccessPolicyName != null)
                                {
                                    propertiesValue7["sharedAccessPolicyName"] = derived9.Properties.SharedAccessPolicyName;
                                }
                                
                                if (derived9.Properties.SharedAccessPolicyKey != null)
                                {
                                    propertiesValue7["sharedAccessPolicyKey"] = derived9.Properties.SharedAccessPolicyKey;
                                }
                                
                                if (derived9.Properties.ConsumerGroupName != null)
                                {
                                    propertiesValue7["consumerGroupName"] = derived9.Properties.ConsumerGroupName;
                                }
                            }
                            
                            if (derived9.Type != null)
                            {
                                datasourceValue2["type"] = derived9.Type;
                            }
                        }
                    }
                    
                    if (derived6.Etag != null)
                    {
                        propertiesValue["etag"] = derived6.Etag;
                    }
                    
                    if (derived6.Type != null)
                    {
                        propertiesValue["type"] = derived6.Type;
                    }
                    
                    if (derived6.Serialization != null)
                    {
                        JObject serializationValue2 = new JObject();
                        propertiesValue["serialization"] = serializationValue2;
                        if (derived6.Serialization is CsvSerialization)
                        {
                            serializationValue2["type"] = "Csv";
                            CsvSerialization derived10 = ((CsvSerialization)derived6.Serialization);
                            
                            if (derived10.Properties != null)
                            {
                                JObject propertiesValue8 = new JObject();
                                serializationValue2["properties"] = propertiesValue8;
                                
                                if (derived10.Properties.FieldDelimiter != null)
                                {
                                    propertiesValue8["fieldDelimiter"] = derived10.Properties.FieldDelimiter;
                                }
                                
                                if (derived10.Properties.Encoding != null)
                                {
                                    propertiesValue8["encoding"] = derived10.Properties.Encoding;
                                }
                            }
                            
                            if (derived10.Type != null)
                            {
                                serializationValue2["type"] = derived10.Type;
                            }
                        }
                        if (derived6.Serialization is JsonSerialization)
                        {
                            serializationValue2["type"] = "Json";
                            JsonSerialization derived11 = ((JsonSerialization)derived6.Serialization);
                            
                            if (derived11.Properties != null)
                            {
                                JObject propertiesValue9 = new JObject();
                                serializationValue2["properties"] = propertiesValue9;
                                
                                if (derived11.Properties.Encoding != null)
                                {
                                    propertiesValue9["encoding"] = derived11.Properties.Encoding;
                                }
                                
                                if (derived11.Properties.Format != null)
                                {
                                    propertiesValue9["format"] = derived11.Properties.Format;
                                }
                            }
                            
                            if (derived11.Type != null)
                            {
                                serializationValue2["type"] = derived11.Type;
                            }
                        }
                        if (derived6.Serialization is AvroSerialization)
                        {
                            serializationValue2["type"] = "Avro";
                            AvroSerialization derived12 = ((AvroSerialization)derived6.Serialization);
                            
                            if (derived12.Properties != null)
                            {
                                serializationValue2["properties"] = derived12.Properties.ToString();
                            }
                            
                            if (derived12.Type != null)
                            {
                                serializationValue2["type"] = derived12.Type;
                            }
                        }
                    }
                    
                    if (derived6.Diagnostics != null)
                    {
                        JObject diagnosticsValue2 = new JObject();
                        propertiesValue["diagnostics"] = diagnosticsValue2;
                        
                        if (derived6.Diagnostics.Conditions != null)
                        {
                            if (derived6.Diagnostics.Conditions is ILazyCollection == false || ((ILazyCollection)derived6.Diagnostics.Conditions).IsInitialized)
                            {
                                JArray conditionsArray2 = new JArray();
                                foreach (DiagnosticCondition conditionsItem2 in derived6.Diagnostics.Conditions)
                                {
                                    JObject diagnosticConditionValue2 = new JObject();
                                    conditionsArray2.Add(diagnosticConditionValue2);
                                    
                                    if (conditionsItem2.Since != null)
                                    {
                                        diagnosticConditionValue2["since"] = conditionsItem2.Since.Value;
                                    }
                                    
                                    if (conditionsItem2.Code != null)
                                    {
                                        diagnosticConditionValue2["code"] = conditionsItem2.Code;
                                    }
                                    
                                    if (conditionsItem2.Message != null)
                                    {
                                        diagnosticConditionValue2["message"] = conditionsItem2.Message;
                                    }
                                }
                                diagnosticsValue2["conditions"] = conditionsArray2;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    InputPatchResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new InputPatchResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken propertiesValue10 = responseDoc["properties"];
                            if (propertiesValue10 != null && propertiesValue10.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue10["type"]);
                                if (typeName == "Reference")
                                {
                                    ReferenceInputProperties referenceInputPropertiesInstance = new ReferenceInputProperties();
                                    
                                    JToken datasourceValue3 = propertiesValue10["datasource"];
                                    if (datasourceValue3 != null && datasourceValue3.Type != JTokenType.Null)
                                    {
                                        string typeName2 = ((string)datasourceValue3["type"]);
                                        if (typeName2 == "Microsoft.Storage/Blob")
                                        {
                                            BlobReferenceInputDataSource blobReferenceInputDataSourceInstance = new BlobReferenceInputDataSource();
                                            
                                            JToken propertiesValue11 = datasourceValue3["properties"];
                                            if (propertiesValue11 != null && propertiesValue11.Type != JTokenType.Null)
                                            {
                                                BlobReferenceInputDataSourceProperties propertiesInstance = new BlobReferenceInputDataSourceProperties();
                                                blobReferenceInputDataSourceInstance.Properties = propertiesInstance;
                                                
                                                JToken storageAccountsArray3 = propertiesValue11["storageAccounts"];
                                                if (storageAccountsArray3 != null && storageAccountsArray3.Type != JTokenType.Null)
                                                {
                                                    propertiesInstance.StorageAccounts = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.StorageAccount>();
                                                    foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray3))
                                                    {
                                                        StorageAccount storageAccountInstance = new StorageAccount();
                                                        propertiesInstance.StorageAccounts.Add(storageAccountInstance);
                                                        
                                                        JToken accountNameValue = storageAccountsValue["accountName"];
                                                        if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                        {
                                                            string accountNameInstance = ((string)accountNameValue);
                                                            storageAccountInstance.AccountName = accountNameInstance;
                                                        }
                                                        
                                                        JToken accountKeyValue = storageAccountsValue["accountKey"];
                                                        if (accountKeyValue != null && accountKeyValue.Type != JTokenType.Null)
                                                        {
                                                            string accountKeyInstance = ((string)accountKeyValue);
                                                            storageAccountInstance.AccountKey = accountKeyInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken containerValue = propertiesValue11["container"];
                                                if (containerValue != null && containerValue.Type != JTokenType.Null)
                                                {
                                                    string containerInstance = ((string)containerValue);
                                                    propertiesInstance.Container = containerInstance;
                                                }
                                                
                                                JToken pathPatternValue = propertiesValue11["pathPattern"];
                                                if (pathPatternValue != null && pathPatternValue.Type != JTokenType.Null)
                                                {
                                                    string pathPatternInstance = ((string)pathPatternValue);
                                                    propertiesInstance.PathPattern = pathPatternInstance;
                                                }
                                                
                                                JToken dateFormatValue = propertiesValue11["dateFormat"];
                                                if (dateFormatValue != null && dateFormatValue.Type != JTokenType.Null)
                                                {
                                                    string dateFormatInstance = ((string)dateFormatValue);
                                                    propertiesInstance.DateFormat = dateFormatInstance;
                                                }
                                                
                                                JToken timeFormatValue = propertiesValue11["timeFormat"];
                                                if (timeFormatValue != null && timeFormatValue.Type != JTokenType.Null)
                                                {
                                                    string timeFormatInstance = ((string)timeFormatValue);
                                                    propertiesInstance.TimeFormat = timeFormatInstance;
                                                }
                                            }
                                            
                                            JToken typeValue = datasourceValue3["type"];
                                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                                            {
                                                string typeInstance = ((string)typeValue);
                                                blobReferenceInputDataSourceInstance.Type = typeInstance;
                                            }
                                            referenceInputPropertiesInstance.DataSource = blobReferenceInputDataSourceInstance;
                                        }
                                    }
                                    
                                    JToken etagValue = propertiesValue10["etag"];
                                    if (etagValue != null && etagValue.Type != JTokenType.Null)
                                    {
                                        string etagInstance = ((string)etagValue);
                                        referenceInputPropertiesInstance.Etag = etagInstance;
                                    }
                                    
                                    JToken typeValue2 = propertiesValue10["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        referenceInputPropertiesInstance.Type = typeInstance2;
                                    }
                                    
                                    JToken serializationValue3 = propertiesValue10["serialization"];
                                    if (serializationValue3 != null && serializationValue3.Type != JTokenType.Null)
                                    {
                                        string typeName3 = ((string)serializationValue3["type"]);
                                        if (typeName3 == "Csv")
                                        {
                                            CsvSerialization csvSerializationInstance = new CsvSerialization();
                                            
                                            JToken propertiesValue12 = serializationValue3["properties"];
                                            if (propertiesValue12 != null && propertiesValue12.Type != JTokenType.Null)
                                            {
                                                CsvSerializationProperties propertiesInstance2 = new CsvSerializationProperties();
                                                csvSerializationInstance.Properties = propertiesInstance2;
                                                
                                                JToken fieldDelimiterValue = propertiesValue12["fieldDelimiter"];
                                                if (fieldDelimiterValue != null && fieldDelimiterValue.Type != JTokenType.Null)
                                                {
                                                    string fieldDelimiterInstance = ((string)fieldDelimiterValue);
                                                    propertiesInstance2.FieldDelimiter = fieldDelimiterInstance;
                                                }
                                                
                                                JToken encodingValue = propertiesValue12["encoding"];
                                                if (encodingValue != null && encodingValue.Type != JTokenType.Null)
                                                {
                                                    string encodingInstance = ((string)encodingValue);
                                                    propertiesInstance2.Encoding = encodingInstance;
                                                }
                                            }
                                            
                                            JToken typeValue3 = serializationValue3["type"];
                                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                            {
                                                string typeInstance3 = ((string)typeValue3);
                                                csvSerializationInstance.Type = typeInstance3;
                                            }
                                            referenceInputPropertiesInstance.Serialization = csvSerializationInstance;
                                        }
                                        if (typeName3 == "Json")
                                        {
                                            JsonSerialization jsonSerializationInstance = new JsonSerialization();
                                            
                                            JToken propertiesValue13 = serializationValue3["properties"];
                                            if (propertiesValue13 != null && propertiesValue13.Type != JTokenType.Null)
                                            {
                                                JsonSerializationProperties propertiesInstance3 = new JsonSerializationProperties();
                                                jsonSerializationInstance.Properties = propertiesInstance3;
                                                
                                                JToken encodingValue2 = propertiesValue13["encoding"];
                                                if (encodingValue2 != null && encodingValue2.Type != JTokenType.Null)
                                                {
                                                    string encodingInstance2 = ((string)encodingValue2);
                                                    propertiesInstance3.Encoding = encodingInstance2;
                                                }
                                                
                                                JToken formatValue = propertiesValue13["format"];
                                                if (formatValue != null && formatValue.Type != JTokenType.Null)
                                                {
                                                    string formatInstance = ((string)formatValue);
                                                    propertiesInstance3.Format = formatInstance;
                                                }
                                            }
                                            
                                            JToken typeValue4 = serializationValue3["type"];
                                            if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                            {
                                                string typeInstance4 = ((string)typeValue4);
                                                jsonSerializationInstance.Type = typeInstance4;
                                            }
                                            referenceInputPropertiesInstance.Serialization = jsonSerializationInstance;
                                        }
                                        if (typeName3 == "Avro")
                                        {
                                            AvroSerialization avroSerializationInstance = new AvroSerialization();
                                            
                                            JToken propertiesValue14 = serializationValue3["properties"];
                                            if (propertiesValue14 != null && propertiesValue14.Type != JTokenType.Null)
                                            {
                                                AvroSerializationProperties propertiesInstance4 = new AvroSerializationProperties();
                                                avroSerializationInstance.Properties = propertiesInstance4;
                                            }
                                            
                                            JToken typeValue5 = serializationValue3["type"];
                                            if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                            {
                                                string typeInstance5 = ((string)typeValue5);
                                                avroSerializationInstance.Type = typeInstance5;
                                            }
                                            referenceInputPropertiesInstance.Serialization = avroSerializationInstance;
                                        }
                                    }
                                    
                                    JToken diagnosticsValue3 = propertiesValue10["diagnostics"];
                                    if (diagnosticsValue3 != null && diagnosticsValue3.Type != JTokenType.Null)
                                    {
                                        Diagnostics diagnosticsInstance = new Diagnostics();
                                        referenceInputPropertiesInstance.Diagnostics = diagnosticsInstance;
                                        
                                        JToken conditionsArray3 = diagnosticsValue3["conditions"];
                                        if (conditionsArray3 != null && conditionsArray3.Type != JTokenType.Null)
                                        {
                                            foreach (JToken conditionsValue in ((JArray)conditionsArray3))
                                            {
                                                DiagnosticCondition diagnosticConditionInstance = new DiagnosticCondition();
                                                diagnosticsInstance.Conditions.Add(diagnosticConditionInstance);
                                                
                                                JToken sinceValue = conditionsValue["since"];
                                                if (sinceValue != null && sinceValue.Type != JTokenType.Null)
                                                {
                                                    DateTime sinceInstance = ((DateTime)sinceValue);
                                                    diagnosticConditionInstance.Since = sinceInstance;
                                                }
                                                
                                                JToken codeValue = conditionsValue["code"];
                                                if (codeValue != null && codeValue.Type != JTokenType.Null)
                                                {
                                                    string codeInstance = ((string)codeValue);
                                                    diagnosticConditionInstance.Code = codeInstance;
                                                }
                                                
                                                JToken messageValue = conditionsValue["message"];
                                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                {
                                                    string messageInstance = ((string)messageValue);
                                                    diagnosticConditionInstance.Message = messageInstance;
                                                }
                                            }
                                        }
                                    }
                                    result.Properties = referenceInputPropertiesInstance;
                                }
                                if (typeName == "Stream")
                                {
                                    StreamInputProperties streamInputPropertiesInstance = new StreamInputProperties();
                                    
                                    JToken datasourceValue4 = propertiesValue10["datasource"];
                                    if (datasourceValue4 != null && datasourceValue4.Type != JTokenType.Null)
                                    {
                                        string typeName4 = ((string)datasourceValue4["type"]);
                                        if (typeName4 == "Microsoft.Storage/Blob")
                                        {
                                            BlobStreamInputDataSource blobStreamInputDataSourceInstance = new BlobStreamInputDataSource();
                                            
                                            JToken propertiesValue15 = datasourceValue4["properties"];
                                            if (propertiesValue15 != null && propertiesValue15.Type != JTokenType.Null)
                                            {
                                                BlobStreamInputDataSourceProperties propertiesInstance5 = new BlobStreamInputDataSourceProperties();
                                                blobStreamInputDataSourceInstance.Properties = propertiesInstance5;
                                                
                                                JToken storageAccountsArray4 = propertiesValue15["storageAccounts"];
                                                if (storageAccountsArray4 != null && storageAccountsArray4.Type != JTokenType.Null)
                                                {
                                                    propertiesInstance5.StorageAccounts = new System.Collections.Generic.List<Microsoft.Azure.Management.StreamAnalytics.Models.StorageAccount>();
                                                    foreach (JToken storageAccountsValue2 in ((JArray)storageAccountsArray4))
                                                    {
                                                        StorageAccount storageAccountInstance2 = new StorageAccount();
                                                        propertiesInstance5.StorageAccounts.Add(storageAccountInstance2);
                                                        
                                                        JToken accountNameValue2 = storageAccountsValue2["accountName"];
                                                        if (accountNameValue2 != null && accountNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string accountNameInstance2 = ((string)accountNameValue2);
                                                            storageAccountInstance2.AccountName = accountNameInstance2;
                                                        }
                                                        
                                                        JToken accountKeyValue2 = storageAccountsValue2["accountKey"];
                                                        if (accountKeyValue2 != null && accountKeyValue2.Type != JTokenType.Null)
                                                        {
                                                            string accountKeyInstance2 = ((string)accountKeyValue2);
                                                            storageAccountInstance2.AccountKey = accountKeyInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                JToken containerValue2 = propertiesValue15["container"];
                                                if (containerValue2 != null && containerValue2.Type != JTokenType.Null)
                                                {
                                                    string containerInstance2 = ((string)containerValue2);
                                                    propertiesInstance5.Container = containerInstance2;
                                                }
                                                
                                                JToken pathPatternValue2 = propertiesValue15["pathPattern"];
                                                if (pathPatternValue2 != null && pathPatternValue2.Type != JTokenType.Null)
                                                {
                                                    string pathPatternInstance2 = ((string)pathPatternValue2);
                                                    propertiesInstance5.PathPattern = pathPatternInstance2;
                                                }
                                                
                                                JToken dateFormatValue2 = propertiesValue15["dateFormat"];
                                                if (dateFormatValue2 != null && dateFormatValue2.Type != JTokenType.Null)
                                                {
                                                    string dateFormatInstance2 = ((string)dateFormatValue2);
                                                    propertiesInstance5.DateFormat = dateFormatInstance2;
                                                }
                                                
                                                JToken timeFormatValue2 = propertiesValue15["timeFormat"];
                                                if (timeFormatValue2 != null && timeFormatValue2.Type != JTokenType.Null)
                                                {
                                                    string timeFormatInstance2 = ((string)timeFormatValue2);
                                                    propertiesInstance5.TimeFormat = timeFormatInstance2;
                                                }
                                                
                                                JToken sourcePartitionCountValue = propertiesValue15["sourcePartitionCount"];
                                                if (sourcePartitionCountValue != null && sourcePartitionCountValue.Type != JTokenType.Null)
                                                {
                                                    int sourcePartitionCountInstance = ((int)sourcePartitionCountValue);
                                                    propertiesInstance5.SourcePartitionCount = sourcePartitionCountInstance;
                                                }
                                            }
                                            
                                            JToken typeValue6 = datasourceValue4["type"];
                                            if (typeValue6 != null && typeValue6.Type != JTokenType.Null)
                                            {
                                                string typeInstance6 = ((string)typeValue6);
                                                blobStreamInputDataSourceInstance.Type = typeInstance6;
                                            }
                                            streamInputPropertiesInstance.DataSource = blobStreamInputDataSourceInstance;
                                        }
                                        if (typeName4 == "Microsoft.ServiceBus/EventHub")
                                        {
                                            EventHubStreamInputDataSource eventHubStreamInputDataSourceInstance = new EventHubStreamInputDataSource();
                                            
                                            JToken propertiesValue16 = datasourceValue4["properties"];
                                            if (propertiesValue16 != null && propertiesValue16.Type != JTokenType.Null)
                                            {
                                                EventHubStreamInputDataSourceProperties propertiesInstance6 = new EventHubStreamInputDataSourceProperties();
                                                eventHubStreamInputDataSourceInstance.Properties = propertiesInstance6;
                                                
                                                JToken serviceBusNamespaceValue = propertiesValue16["serviceBusNamespace"];
                                                if (serviceBusNamespaceValue != null && serviceBusNamespaceValue.Type != JTokenType.Null)
                                                {
                                                    string serviceBusNamespaceInstance = ((string)serviceBusNamespaceValue);
                                                    propertiesInstance6.ServiceBusNamespace = serviceBusNamespaceInstance;
                                                }
                                                
                                                JToken sharedAccessPolicyNameValue = propertiesValue16["sharedAccessPolicyName"];
                                                if (sharedAccessPolicyNameValue != null && sharedAccessPolicyNameValue.Type != JTokenType.Null)
                                                {
                                                    string sharedAccessPolicyNameInstance = ((string)sharedAccessPolicyNameValue);
                                                    propertiesInstance6.SharedAccessPolicyName = sharedAccessPolicyNameInstance;
                                                }
                                                
                                                JToken sharedAccessPolicyKeyValue = propertiesValue16["sharedAccessPolicyKey"];
                                                if (sharedAccessPolicyKeyValue != null && sharedAccessPolicyKeyValue.Type != JTokenType.Null)
                                                {
                                                    string sharedAccessPolicyKeyInstance = ((string)sharedAccessPolicyKeyValue);
                                                    propertiesInstance6.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance;
                                                }
                                                
                                                JToken eventHubNameValue = propertiesValue16["eventHubName"];
                                                if (eventHubNameValue != null && eventHubNameValue.Type != JTokenType.Null)
                                                {
                                                    string eventHubNameInstance = ((string)eventHubNameValue);
                                                    propertiesInstance6.EventHubName = eventHubNameInstance;
                                                }
                                                
                                                JToken consumerGroupNameValue = propertiesValue16["consumerGroupName"];
                                                if (consumerGroupNameValue != null && consumerGroupNameValue.Type != JTokenType.Null)
                                                {
                                                    string consumerGroupNameInstance = ((string)consumerGroupNameValue);
                                                    propertiesInstance6.ConsumerGroupName = consumerGroupNameInstance;
                                                }
                                            }
                                            
                                            JToken typeValue7 = datasourceValue4["type"];
                                            if (typeValue7 != null && typeValue7.Type != JTokenType.Null)
                                            {
                                                string typeInstance7 = ((string)typeValue7);
                                                eventHubStreamInputDataSourceInstance.Type = typeInstance7;
                                            }
                                            streamInputPropertiesInstance.DataSource = eventHubStreamInputDataSourceInstance;
                                        }
                                        if (typeName4 == "Microsoft.Devices/IotHubs")
                                        {
                                            IoTHubStreamInputDataSource ioTHubStreamInputDataSourceInstance = new IoTHubStreamInputDataSource();
                                            
                                            JToken propertiesValue17 = datasourceValue4["properties"];
                                            if (propertiesValue17 != null && propertiesValue17.Type != JTokenType.Null)
                                            {
                                                IoTHubStreamInputDataSourceProperties propertiesInstance7 = new IoTHubStreamInputDataSourceProperties();
                                                ioTHubStreamInputDataSourceInstance.Properties = propertiesInstance7;
                                                
                                                JToken iotHubNamespaceValue = propertiesValue17["iotHubNamespace"];
                                                if (iotHubNamespaceValue != null && iotHubNamespaceValue.Type != JTokenType.Null)
                                                {
                                                    string iotHubNamespaceInstance = ((string)iotHubNamespaceValue);
                                                    propertiesInstance7.IotHubNamespace = iotHubNamespaceInstance;
                                                }
                                                
                                                JToken sharedAccessPolicyNameValue2 = propertiesValue17["sharedAccessPolicyName"];
                                                if (sharedAccessPolicyNameValue2 != null && sharedAccessPolicyNameValue2.Type != JTokenType.Null)
                                                {
                                                    string sharedAccessPolicyNameInstance2 = ((string)sharedAccessPolicyNameValue2);
                                                    propertiesInstance7.SharedAccessPolicyName = sharedAccessPolicyNameInstance2;
                                                }
                                                
                                                JToken sharedAccessPolicyKeyValue2 = propertiesValue17["sharedAccessPolicyKey"];
                                                if (sharedAccessPolicyKeyValue2 != null && sharedAccessPolicyKeyValue2.Type != JTokenType.Null)
                                                {
                                                    string sharedAccessPolicyKeyInstance2 = ((string)sharedAccessPolicyKeyValue2);
                                                    propertiesInstance7.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance2;
                                                }
                                                
                                                JToken consumerGroupNameValue2 = propertiesValue17["consumerGroupName"];
                                                if (consumerGroupNameValue2 != null && consumerGroupNameValue2.Type != JTokenType.Null)
                                                {
                                                    string consumerGroupNameInstance2 = ((string)consumerGroupNameValue2);
                                                    propertiesInstance7.ConsumerGroupName = consumerGroupNameInstance2;
                                                }
                                            }
                                            
                                            JToken typeValue8 = datasourceValue4["type"];
                                            if (typeValue8 != null && typeValue8.Type != JTokenType.Null)
                                            {
                                                string typeInstance8 = ((string)typeValue8);
                                                ioTHubStreamInputDataSourceInstance.Type = typeInstance8;
                                            }
                                            streamInputPropertiesInstance.DataSource = ioTHubStreamInputDataSourceInstance;
                                        }
                                    }
                                    
                                    JToken etagValue2 = propertiesValue10["etag"];
                                    if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                    {
                                        string etagInstance2 = ((string)etagValue2);
                                        streamInputPropertiesInstance.Etag = etagInstance2;
                                    }
                                    
                                    JToken typeValue9 = propertiesValue10["type"];
                                    if (typeValue9 != null && typeValue9.Type != JTokenType.Null)
                                    {
                                        string typeInstance9 = ((string)typeValue9);
                                        streamInputPropertiesInstance.Type = typeInstance9;
                                    }
                                    
                                    JToken serializationValue4 = propertiesValue10["serialization"];
                                    if (serializationValue4 != null && serializationValue4.Type != JTokenType.Null)
                                    {
                                        string typeName5 = ((string)serializationValue4["type"]);
                                        if (typeName5 == "Csv")
                                        {
                                            CsvSerialization csvSerializationInstance2 = new CsvSerialization();
                                            
                                            JToken propertiesValue18 = serializationValue4["properties"];
                                            if (propertiesValue18 != null && propertiesValue18.Type != JTokenType.Null)
                                            {
                                                CsvSerializationProperties propertiesInstance8 = new CsvSerializationProperties();
                                                csvSerializationInstance2.Properties = propertiesInstance8;
                                                
                                                JToken fieldDelimiterValue2 = propertiesValue18["fieldDelimiter"];
                                                if (fieldDelimiterValue2 != null && fieldDelimiterValue2.Type != JTokenType.Null)
                                                {
                                                    string fieldDelimiterInstance2 = ((string)fieldDelimiterValue2);
                                                    propertiesInstance8.FieldDelimiter = fieldDelimiterInstance2;
                                                }
                                                
                                                JToken encodingValue3 = propertiesValue18["encoding"];
                                                if (encodingValue3 != null && encodingValue3.Type != JTokenType.Null)
                                                {
                                                    string encodingInstance3 = ((string)encodingValue3);
                                                    propertiesInstance8.Encoding = encodingInstance3;
                                                }
                                            }
                                            
                                            JToken typeValue10 = serializationValue4["type"];
                                            if (typeValue10 != null && typeValue10.Type != JTokenType.Null)
                                            {
                                                string typeInstance10 = ((string)typeValue10);
                                                csvSerializationInstance2.Type = typeInstance10;
                                            }
                                            streamInputPropertiesInstance.Serialization = csvSerializationInstance2;
                                        }
                                        if (typeName5 == "Json")
                                        {
                                            JsonSerialization jsonSerializationInstance2 = new JsonSerialization();
                                            
                                            JToken propertiesValue19 = serializationValue4["properties"];
                                            if (propertiesValue19 != null && propertiesValue19.Type != JTokenType.Null)
                                            {
                                                JsonSerializationProperties propertiesInstance9 = new JsonSerializationProperties();
                                                jsonSerializationInstance2.Properties = propertiesInstance9;
                                                
                                                JToken encodingValue4 = propertiesValue19["encoding"];
                                                if (encodingValue4 != null && encodingValue4.Type != JTokenType.Null)
                                                {
                                                    string encodingInstance4 = ((string)encodingValue4);
                                                    propertiesInstance9.Encoding = encodingInstance4;
                                                }
                                                
                                                JToken formatValue2 = propertiesValue19["format"];
                                                if (formatValue2 != null && formatValue2.Type != JTokenType.Null)
                                                {
                                                    string formatInstance2 = ((string)formatValue2);
                                                    propertiesInstance9.Format = formatInstance2;
                                                }
                                            }
                                            
                                            JToken typeValue11 = serializationValue4["type"];
                                            if (typeValue11 != null && typeValue11.Type != JTokenType.Null)
                                            {
                                                string typeInstance11 = ((string)typeValue11);
                                                jsonSerializationInstance2.Type = typeInstance11;
                                            }
                                            streamInputPropertiesInstance.Serialization = jsonSerializationInstance2;
                                        }
                                        if (typeName5 == "Avro")
                                        {
                                            AvroSerialization avroSerializationInstance2 = new AvroSerialization();
                                            
                                            JToken propertiesValue20 = serializationValue4["properties"];
                                            if (propertiesValue20 != null && propertiesValue20.Type != JTokenType.Null)
                                            {
                                                AvroSerializationProperties propertiesInstance10 = new AvroSerializationProperties();
                                                avroSerializationInstance2.Properties = propertiesInstance10;
                                            }
                                            
                                            JToken typeValue12 = serializationValue4["type"];
                                            if (typeValue12 != null && typeValue12.Type != JTokenType.Null)
                                            {
                                                string typeInstance12 = ((string)typeValue12);
                                                avroSerializationInstance2.Type = typeInstance12;
                                            }
                                            streamInputPropertiesInstance.Serialization = avroSerializationInstance2;
                                        }
                                    }
                                    
                                    JToken diagnosticsValue4 = propertiesValue10["diagnostics"];
                                    if (diagnosticsValue4 != null && diagnosticsValue4.Type != JTokenType.Null)
                                    {
                                        Diagnostics diagnosticsInstance2 = new Diagnostics();
                                        streamInputPropertiesInstance.Diagnostics = diagnosticsInstance2;
                                        
                                        JToken conditionsArray4 = diagnosticsValue4["conditions"];
                                        if (conditionsArray4 != null && conditionsArray4.Type != JTokenType.Null)
                                        {
                                            foreach (JToken conditionsValue2 in ((JArray)conditionsArray4))
                                            {
                                                DiagnosticCondition diagnosticConditionInstance2 = new DiagnosticCondition();
                                                diagnosticsInstance2.Conditions.Add(diagnosticConditionInstance2);
                                                
                                                JToken sinceValue2 = conditionsValue2["since"];
                                                if (sinceValue2 != null && sinceValue2.Type != JTokenType.Null)
                                                {
                                                    DateTime sinceInstance2 = ((DateTime)sinceValue2);
                                                    diagnosticConditionInstance2.Since = sinceInstance2;
                                                }
                                                
                                                JToken codeValue2 = conditionsValue2["code"];
                                                if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                                {
                                                    string codeInstance2 = ((string)codeValue2);
                                                    diagnosticConditionInstance2.Code = codeInstance2;
                                                }
                                                
                                                JToken messageValue2 = conditionsValue2["message"];
                                                if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                                {
                                                    string messageInstance2 = ((string)messageValue2);
                                                    diagnosticConditionInstance2.Message = messageInstance2;
                                                }
                                            }
                                        }
                                    }
                                    result.Properties = streamInputPropertiesInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                    }
                    if (httpResponse.Headers.Contains("ETag"))
                    {
                        result.Properties.Etag = httpResponse.Headers.GetValues("ETag").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Test the connectivity of an input for a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='inputName'>
        /// Required. The name of the input for the stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The test result of the input or output data source.
        /// </returns>
        public async Task<ResourceTestConnectionResponse> TestConnectionAsync(string resourceGroupName, string jobName, string inputName, CancellationToken cancellationToken)
        {
            StreamAnalyticsManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("inputName", inputName);
                TracingAdapter.Enter(invocationId, this, "TestConnectionAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ResourceTestConnectionResponse response = await client.Inputs.BeginTestConnectionAsync(resourceGroupName, jobName, inputName, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            ResourceTestConnectionResponse result = await client.GetTestConnectionStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 10;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetTestConnectionStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 10;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
    }
}
