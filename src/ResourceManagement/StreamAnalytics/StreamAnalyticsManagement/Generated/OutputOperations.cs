// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.StreamAnalytics;
using Microsoft.Azure.Management.StreamAnalytics.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.StreamAnalytics
{
    /// <summary>
    /// Operations for managing the output(s) of the stream analytics job.
    /// </summary>
    internal partial class OutputOperations : IServiceOperations<StreamAnalyticsManagementClient>, IOutputOperations
    {
        /// <summary>
        /// Initializes a new instance of the OutputOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal OutputOperations(StreamAnalyticsManagementClient client)
        {
            this._client = client;
        }
        
        private StreamAnalyticsManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.StreamAnalytics.StreamAnalyticsManagementClient.
        /// </summary>
        public StreamAnalyticsManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Test an output for a stream analytics job. Asynchronous call.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='outputName'>
        /// Required. The name of the output for the stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The test result of the input or output data source.
        /// </returns>
        public async Task<ResourceTestConnectionResponse> BeginTestConnectionAsync(string resourceGroupName, string jobName, string outputName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (outputName == null)
            {
                throw new ArgumentNullException("outputName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("outputName", outputName);
                TracingAdapter.Enter(invocationId, this, "BeginTestConnectionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.StreamAnalytics/streamingjobs/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/outputs/";
            url = url + Uri.EscapeDataString(outputName);
            url = url + "/test";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.BadRequest && statusCode != HttpStatusCode.NotFound)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ResourceTestConnectionResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.BadRequest || statusCode == HttpStatusCode.NotFound)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ResourceTestConnectionResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken statusValue = responseDoc["status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                string statusInstance = ((string)statusValue);
                                result.ResourceTestStatus = statusInstance;
                            }
                            
                            JToken errorValue = responseDoc["error"];
                            if (errorValue != null && errorValue.Type != JTokenType.Null)
                            {
                                ErrorResponse errorInstance = new ErrorResponse();
                                result.Error = errorInstance;
                                
                                JToken codeValue = errorValue["code"];
                                if (codeValue != null && codeValue.Type != JTokenType.Null)
                                {
                                    string codeInstance = ((string)codeValue);
                                    errorInstance.Code = codeInstance;
                                }
                                
                                JToken messageValue = errorValue["message"];
                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                {
                                    string messageInstance = ((string)messageValue);
                                    errorInstance.Message = messageInstance;
                                }
                                
                                JToken detailsValue = errorValue["details"];
                                if (detailsValue != null && detailsValue.Type != JTokenType.Null)
                                {
                                    ErrorDetailsResponse detailsInstance = new ErrorDetailsResponse();
                                    errorInstance.Details = detailsInstance;
                                    
                                    JToken codeValue2 = detailsValue["code"];
                                    if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                    {
                                        string codeInstance2 = ((string)codeValue2);
                                        detailsInstance.Code = codeInstance2;
                                    }
                                    
                                    JToken messageValue2 = detailsValue["message"];
                                    if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                    {
                                        string messageInstance2 = ((string)messageValue2);
                                        detailsInstance.Message = messageInstance2;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NotFound)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.BadRequest)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create or update an output for a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update an output for
        /// a stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the output CreateOrUpdate operation.
        /// </returns>
        public async Task<OutputCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string jobName, OutputCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Output != null)
            {
                if (parameters.Output.Name == null)
                {
                    throw new ArgumentNullException("parameters.Output.Name");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.StreamAnalytics/streamingjobs/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/outputs/";
            if (parameters.Output != null && parameters.Output.Name != null)
            {
                url = url + Uri.EscapeDataString(parameters.Output.Name);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject outputCreateOrUpdateParametersValue = new JObject();
                requestDoc = outputCreateOrUpdateParametersValue;
                
                if (parameters.Output != null)
                {
                    outputCreateOrUpdateParametersValue["name"] = parameters.Output.Name;
                    
                    if (parameters.Output.Properties != null)
                    {
                        JObject propertiesValue = new JObject();
                        outputCreateOrUpdateParametersValue["properties"] = propertiesValue;
                        
                        if (parameters.Output.Properties.Etag != null)
                        {
                            propertiesValue["etag"] = parameters.Output.Properties.Etag;
                        }
                        
                        if (parameters.Output.Properties.DataSource != null)
                        {
                            JObject datasourceValue = new JObject();
                            propertiesValue["datasource"] = datasourceValue;
                            if (parameters.Output.Properties.DataSource is BlobOutputDataSource)
                            {
                                datasourceValue["type"] = "Microsoft.Storage/Blob";
                                BlobOutputDataSource derived = ((BlobOutputDataSource)parameters.Output.Properties.DataSource);
                                
                                if (derived.Properties != null)
                                {
                                    JObject propertiesValue2 = new JObject();
                                    datasourceValue["properties"] = propertiesValue2;
                                    
                                    if (derived.Properties.StorageAccounts != null)
                                    {
                                        JArray storageAccountsArray = new JArray();
                                        foreach (StorageAccount storageAccountsItem in derived.Properties.StorageAccounts)
                                        {
                                            JObject storageAccountValue = new JObject();
                                            storageAccountsArray.Add(storageAccountValue);
                                            
                                            if (storageAccountsItem.AccountName != null)
                                            {
                                                storageAccountValue["accountName"] = storageAccountsItem.AccountName;
                                            }
                                            
                                            if (storageAccountsItem.AccountKey != null)
                                            {
                                                storageAccountValue["accountKey"] = storageAccountsItem.AccountKey;
                                            }
                                        }
                                        propertiesValue2["storageAccounts"] = storageAccountsArray;
                                    }
                                    
                                    if (derived.Properties.Container != null)
                                    {
                                        propertiesValue2["container"] = derived.Properties.Container;
                                    }
                                    
                                    if (derived.Properties.PathPattern != null)
                                    {
                                        propertiesValue2["pathPattern"] = derived.Properties.PathPattern;
                                    }
                                    
                                    if (derived.Properties.DateFormat != null)
                                    {
                                        propertiesValue2["dateFormat"] = derived.Properties.DateFormat;
                                    }
                                    
                                    if (derived.Properties.TimeFormat != null)
                                    {
                                        propertiesValue2["timeFormat"] = derived.Properties.TimeFormat;
                                    }
                                }
                                
                                if (derived.Type != null)
                                {
                                    datasourceValue["type"] = derived.Type;
                                }
                            }
                            if (parameters.Output.Properties.DataSource is AzureTableOutputDataSource)
                            {
                                datasourceValue["type"] = "Microsoft.Storage/Table";
                                AzureTableOutputDataSource derived2 = ((AzureTableOutputDataSource)parameters.Output.Properties.DataSource);
                                
                                if (derived2.Properties != null)
                                {
                                    JObject propertiesValue3 = new JObject();
                                    datasourceValue["properties"] = propertiesValue3;
                                    
                                    if (derived2.Properties.AccountName != null)
                                    {
                                        propertiesValue3["accountName"] = derived2.Properties.AccountName;
                                    }
                                    
                                    if (derived2.Properties.AccountKey != null)
                                    {
                                        propertiesValue3["accountKey"] = derived2.Properties.AccountKey;
                                    }
                                    
                                    if (derived2.Properties.Table != null)
                                    {
                                        propertiesValue3["table"] = derived2.Properties.Table;
                                    }
                                    
                                    if (derived2.Properties.PartitionKey != null)
                                    {
                                        propertiesValue3["partitionKey"] = derived2.Properties.PartitionKey;
                                    }
                                    
                                    if (derived2.Properties.RowKey != null)
                                    {
                                        propertiesValue3["rowKey"] = derived2.Properties.RowKey;
                                    }
                                    
                                    if (derived2.Properties.ColumnsToRemove != null)
                                    {
                                        JArray columnsToRemoveArray = new JArray();
                                        foreach (string columnsToRemoveItem in derived2.Properties.ColumnsToRemove)
                                        {
                                            columnsToRemoveArray.Add(columnsToRemoveItem);
                                        }
                                        propertiesValue3["columnsToRemove"] = columnsToRemoveArray;
                                    }
                                    
                                    if (derived2.Properties.BatchSize != null)
                                    {
                                        propertiesValue3["batchSize"] = derived2.Properties.BatchSize.Value;
                                    }
                                }
                                
                                if (derived2.Type != null)
                                {
                                    datasourceValue["type"] = derived2.Type;
                                }
                            }
                            if (parameters.Output.Properties.DataSource is EventHubOutputDataSource)
                            {
                                datasourceValue["type"] = "Microsoft.ServiceBus/EventHub";
                                EventHubOutputDataSource derived3 = ((EventHubOutputDataSource)parameters.Output.Properties.DataSource);
                                
                                if (derived3.Properties != null)
                                {
                                    JObject propertiesValue4 = new JObject();
                                    datasourceValue["properties"] = propertiesValue4;
                                    
                                    if (derived3.Properties.ServiceBusNamespace != null)
                                    {
                                        propertiesValue4["serviceBusNamespace"] = derived3.Properties.ServiceBusNamespace;
                                    }
                                    
                                    if (derived3.Properties.SharedAccessPolicyName != null)
                                    {
                                        propertiesValue4["sharedAccessPolicyName"] = derived3.Properties.SharedAccessPolicyName;
                                    }
                                    
                                    if (derived3.Properties.SharedAccessPolicyKey != null)
                                    {
                                        propertiesValue4["sharedAccessPolicyKey"] = derived3.Properties.SharedAccessPolicyKey;
                                    }
                                    
                                    if (derived3.Properties.EventHubName != null)
                                    {
                                        propertiesValue4["eventHubName"] = derived3.Properties.EventHubName;
                                    }
                                    
                                    if (derived3.Properties.PartitionKey != null)
                                    {
                                        propertiesValue4["partitionKey"] = derived3.Properties.PartitionKey;
                                    }
                                }
                                
                                if (derived3.Type != null)
                                {
                                    datasourceValue["type"] = derived3.Type;
                                }
                            }
                            if (parameters.Output.Properties.DataSource is ServiceBusQueueOutputDataSource)
                            {
                                datasourceValue["type"] = "Microsoft.ServiceBus/Queue";
                                ServiceBusQueueOutputDataSource derived4 = ((ServiceBusQueueOutputDataSource)parameters.Output.Properties.DataSource);
                                
                                if (derived4.Properties != null)
                                {
                                    JObject propertiesValue5 = new JObject();
                                    datasourceValue["properties"] = propertiesValue5;
                                    
                                    if (derived4.Properties.ServiceBusNamespace != null)
                                    {
                                        propertiesValue5["serviceBusNamespace"] = derived4.Properties.ServiceBusNamespace;
                                    }
                                    
                                    if (derived4.Properties.SharedAccessPolicyName != null)
                                    {
                                        propertiesValue5["sharedAccessPolicyName"] = derived4.Properties.SharedAccessPolicyName;
                                    }
                                    
                                    if (derived4.Properties.SharedAccessPolicyKey != null)
                                    {
                                        propertiesValue5["sharedAccessPolicyKey"] = derived4.Properties.SharedAccessPolicyKey;
                                    }
                                    
                                    if (derived4.Properties.QueueName != null)
                                    {
                                        propertiesValue5["queueName"] = derived4.Properties.QueueName;
                                    }
                                }
                                
                                if (derived4.Type != null)
                                {
                                    datasourceValue["type"] = derived4.Type;
                                }
                            }
                            if (parameters.Output.Properties.DataSource is ServiceBusTopicOutputDataSource)
                            {
                                datasourceValue["type"] = "Microsoft.ServiceBus/Topic";
                                ServiceBusTopicOutputDataSource derived5 = ((ServiceBusTopicOutputDataSource)parameters.Output.Properties.DataSource);
                                
                                if (derived5.Properties != null)
                                {
                                    JObject propertiesValue6 = new JObject();
                                    datasourceValue["properties"] = propertiesValue6;
                                    
                                    if (derived5.Properties.ServiceBusNamespace != null)
                                    {
                                        propertiesValue6["serviceBusNamespace"] = derived5.Properties.ServiceBusNamespace;
                                    }
                                    
                                    if (derived5.Properties.SharedAccessPolicyName != null)
                                    {
                                        propertiesValue6["sharedAccessPolicyName"] = derived5.Properties.SharedAccessPolicyName;
                                    }
                                    
                                    if (derived5.Properties.SharedAccessPolicyKey != null)
                                    {
                                        propertiesValue6["sharedAccessPolicyKey"] = derived5.Properties.SharedAccessPolicyKey;
                                    }
                                    
                                    if (derived5.Properties.TopicName != null)
                                    {
                                        propertiesValue6["topicName"] = derived5.Properties.TopicName;
                                    }
                                }
                                
                                if (derived5.Type != null)
                                {
                                    datasourceValue["type"] = derived5.Type;
                                }
                            }
                            if (parameters.Output.Properties.DataSource is SqlAzureOutputDataSource)
                            {
                                datasourceValue["type"] = "Microsoft.Sql/Server/Database";
                                SqlAzureOutputDataSource derived6 = ((SqlAzureOutputDataSource)parameters.Output.Properties.DataSource);
                                
                                if (derived6.Properties != null)
                                {
                                    JObject propertiesValue7 = new JObject();
                                    datasourceValue["properties"] = propertiesValue7;
                                    
                                    if (derived6.Properties.Server != null)
                                    {
                                        propertiesValue7["server"] = derived6.Properties.Server;
                                    }
                                    
                                    if (derived6.Properties.Database != null)
                                    {
                                        propertiesValue7["database"] = derived6.Properties.Database;
                                    }
                                    
                                    if (derived6.Properties.User != null)
                                    {
                                        propertiesValue7["user"] = derived6.Properties.User;
                                    }
                                    
                                    if (derived6.Properties.Password != null)
                                    {
                                        propertiesValue7["password"] = derived6.Properties.Password;
                                    }
                                    
                                    if (derived6.Properties.Table != null)
                                    {
                                        propertiesValue7["table"] = derived6.Properties.Table;
                                    }
                                }
                                
                                if (derived6.Type != null)
                                {
                                    datasourceValue["type"] = derived6.Type;
                                }
                            }
                            if (parameters.Output.Properties.DataSource is DocumentDbOutputDataSource)
                            {
                                datasourceValue["type"] = "Microsoft.Storage/DocumentDB";
                                DocumentDbOutputDataSource derived7 = ((DocumentDbOutputDataSource)parameters.Output.Properties.DataSource);
                                
                                if (derived7.Properties != null)
                                {
                                    JObject propertiesValue8 = new JObject();
                                    datasourceValue["properties"] = propertiesValue8;
                                    
                                    if (derived7.Properties.AccountId != null)
                                    {
                                        propertiesValue8["accountId"] = derived7.Properties.AccountId;
                                    }
                                    
                                    if (derived7.Properties.AccountKey != null)
                                    {
                                        propertiesValue8["accountKey"] = derived7.Properties.AccountKey;
                                    }
                                    
                                    if (derived7.Properties.Database != null)
                                    {
                                        propertiesValue8["database"] = derived7.Properties.Database;
                                    }
                                    
                                    if (derived7.Properties.CollectionNamePattern != null)
                                    {
                                        propertiesValue8["collectionNamePattern"] = derived7.Properties.CollectionNamePattern;
                                    }
                                    
                                    if (derived7.Properties.PartitionKey != null)
                                    {
                                        propertiesValue8["partitionKey"] = derived7.Properties.PartitionKey;
                                    }
                                    
                                    if (derived7.Properties.DocumentId != null)
                                    {
                                        propertiesValue8["documentId"] = derived7.Properties.DocumentId;
                                    }
                                }
                                
                                if (derived7.Type != null)
                                {
                                    datasourceValue["type"] = derived7.Type;
                                }
                            }
                        }
                        
                        if (parameters.Output.Properties.Serialization != null)
                        {
                            JObject serializationValue = new JObject();
                            propertiesValue["serialization"] = serializationValue;
                            if (parameters.Output.Properties.Serialization is CsvSerialization)
                            {
                                serializationValue["type"] = "Csv";
                                CsvSerialization derived8 = ((CsvSerialization)parameters.Output.Properties.Serialization);
                                
                                if (derived8.Properties != null)
                                {
                                    JObject propertiesValue9 = new JObject();
                                    serializationValue["properties"] = propertiesValue9;
                                    
                                    if (derived8.Properties.FieldDelimiter != null)
                                    {
                                        propertiesValue9["fieldDelimiter"] = derived8.Properties.FieldDelimiter;
                                    }
                                    
                                    if (derived8.Properties.Encoding != null)
                                    {
                                        propertiesValue9["encoding"] = derived8.Properties.Encoding;
                                    }
                                }
                                
                                if (derived8.Type != null)
                                {
                                    serializationValue["type"] = derived8.Type;
                                }
                            }
                            if (parameters.Output.Properties.Serialization is JsonSerialization)
                            {
                                serializationValue["type"] = "Json";
                                JsonSerialization derived9 = ((JsonSerialization)parameters.Output.Properties.Serialization);
                                
                                if (derived9.Properties != null)
                                {
                                    JObject propertiesValue10 = new JObject();
                                    serializationValue["properties"] = propertiesValue10;
                                    
                                    if (derived9.Properties.Encoding != null)
                                    {
                                        propertiesValue10["encoding"] = derived9.Properties.Encoding;
                                    }
                                    
                                    if (derived9.Properties.Format != null)
                                    {
                                        propertiesValue10["format"] = derived9.Properties.Format;
                                    }
                                }
                                
                                if (derived9.Type != null)
                                {
                                    serializationValue["type"] = derived9.Type;
                                }
                            }
                            if (parameters.Output.Properties.Serialization is AvroSerialization)
                            {
                                serializationValue["type"] = "Avro";
                                AvroSerialization derived10 = ((AvroSerialization)parameters.Output.Properties.Serialization);
                                
                                if (derived10.Properties != null)
                                {
                                    serializationValue["properties"] = derived10.Properties.ToString();
                                }
                                
                                if (derived10.Type != null)
                                {
                                    serializationValue["type"] = derived10.Type;
                                }
                            }
                        }
                        
                        if (parameters.Output.Properties.Diagnostics != null)
                        {
                            JObject diagnosticsValue = new JObject();
                            propertiesValue["diagnostics"] = diagnosticsValue;
                            
                            if (parameters.Output.Properties.Diagnostics.Conditions != null)
                            {
                                if (parameters.Output.Properties.Diagnostics.Conditions is ILazyCollection == false || ((ILazyCollection)parameters.Output.Properties.Diagnostics.Conditions).IsInitialized)
                                {
                                    JArray conditionsArray = new JArray();
                                    foreach (DiagnosticCondition conditionsItem in parameters.Output.Properties.Diagnostics.Conditions)
                                    {
                                        JObject diagnosticConditionValue = new JObject();
                                        conditionsArray.Add(diagnosticConditionValue);
                                        
                                        if (conditionsItem.Since != null)
                                        {
                                            diagnosticConditionValue["since"] = conditionsItem.Since.Value;
                                        }
                                        
                                        if (conditionsItem.Code != null)
                                        {
                                            diagnosticConditionValue["code"] = conditionsItem.Code;
                                        }
                                        
                                        if (conditionsItem.Message != null)
                                        {
                                            diagnosticConditionValue["message"] = conditionsItem.Message;
                                        }
                                    }
                                    diagnosticsValue["conditions"] = conditionsArray;
                                }
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OutputCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new OutputCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Output outputInstance = new Output();
                            result.Output = outputInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                outputInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue11 = responseDoc["properties"];
                            if (propertiesValue11 != null && propertiesValue11.Type != JTokenType.Null)
                            {
                                OutputProperties propertiesInstance = new OutputProperties();
                                outputInstance.Properties = propertiesInstance;
                                
                                JToken etagValue = propertiesValue11["etag"];
                                if (etagValue != null && etagValue.Type != JTokenType.Null)
                                {
                                    string etagInstance = ((string)etagValue);
                                    propertiesInstance.Etag = etagInstance;
                                }
                                
                                JToken datasourceValue2 = propertiesValue11["datasource"];
                                if (datasourceValue2 != null && datasourceValue2.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)datasourceValue2["type"]);
                                    if (typeName == "Microsoft.Storage/Blob")
                                    {
                                        BlobOutputDataSource blobOutputDataSourceInstance = new BlobOutputDataSource();
                                        
                                        JToken propertiesValue12 = datasourceValue2["properties"];
                                        if (propertiesValue12 != null && propertiesValue12.Type != JTokenType.Null)
                                        {
                                            BlobOutputDataSourceProperties propertiesInstance2 = new BlobOutputDataSourceProperties();
                                            blobOutputDataSourceInstance.Properties = propertiesInstance2;
                                            
                                            JToken storageAccountsArray2 = propertiesValue12["storageAccounts"];
                                            if (storageAccountsArray2 != null && storageAccountsArray2.Type != JTokenType.Null)
                                            {
                                                propertiesInstance2.StorageAccounts = new List<StorageAccount>();
                                                foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray2))
                                                {
                                                    StorageAccount storageAccountInstance = new StorageAccount();
                                                    propertiesInstance2.StorageAccounts.Add(storageAccountInstance);
                                                    
                                                    JToken accountNameValue = storageAccountsValue["accountName"];
                                                    if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                    {
                                                        string accountNameInstance = ((string)accountNameValue);
                                                        storageAccountInstance.AccountName = accountNameInstance;
                                                    }
                                                    
                                                    JToken accountKeyValue = storageAccountsValue["accountKey"];
                                                    if (accountKeyValue != null && accountKeyValue.Type != JTokenType.Null)
                                                    {
                                                        string accountKeyInstance = ((string)accountKeyValue);
                                                        storageAccountInstance.AccountKey = accountKeyInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken containerValue = propertiesValue12["container"];
                                            if (containerValue != null && containerValue.Type != JTokenType.Null)
                                            {
                                                string containerInstance = ((string)containerValue);
                                                propertiesInstance2.Container = containerInstance;
                                            }
                                            
                                            JToken pathPatternValue = propertiesValue12["pathPattern"];
                                            if (pathPatternValue != null && pathPatternValue.Type != JTokenType.Null)
                                            {
                                                string pathPatternInstance = ((string)pathPatternValue);
                                                propertiesInstance2.PathPattern = pathPatternInstance;
                                            }
                                            
                                            JToken dateFormatValue = propertiesValue12["dateFormat"];
                                            if (dateFormatValue != null && dateFormatValue.Type != JTokenType.Null)
                                            {
                                                string dateFormatInstance = ((string)dateFormatValue);
                                                propertiesInstance2.DateFormat = dateFormatInstance;
                                            }
                                            
                                            JToken timeFormatValue = propertiesValue12["timeFormat"];
                                            if (timeFormatValue != null && timeFormatValue.Type != JTokenType.Null)
                                            {
                                                string timeFormatInstance = ((string)timeFormatValue);
                                                propertiesInstance2.TimeFormat = timeFormatInstance;
                                            }
                                        }
                                        
                                        JToken typeValue = datasourceValue2["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            blobOutputDataSourceInstance.Type = typeInstance;
                                        }
                                        propertiesInstance.DataSource = blobOutputDataSourceInstance;
                                    }
                                    if (typeName == "Microsoft.Storage/Table")
                                    {
                                        AzureTableOutputDataSource azureTableOutputDataSourceInstance = new AzureTableOutputDataSource();
                                        
                                        JToken propertiesValue13 = datasourceValue2["properties"];
                                        if (propertiesValue13 != null && propertiesValue13.Type != JTokenType.Null)
                                        {
                                            AzureTableOutputDataSourceProperties propertiesInstance3 = new AzureTableOutputDataSourceProperties();
                                            azureTableOutputDataSourceInstance.Properties = propertiesInstance3;
                                            
                                            JToken accountNameValue2 = propertiesValue13["accountName"];
                                            if (accountNameValue2 != null && accountNameValue2.Type != JTokenType.Null)
                                            {
                                                string accountNameInstance2 = ((string)accountNameValue2);
                                                propertiesInstance3.AccountName = accountNameInstance2;
                                            }
                                            
                                            JToken accountKeyValue2 = propertiesValue13["accountKey"];
                                            if (accountKeyValue2 != null && accountKeyValue2.Type != JTokenType.Null)
                                            {
                                                string accountKeyInstance2 = ((string)accountKeyValue2);
                                                propertiesInstance3.AccountKey = accountKeyInstance2;
                                            }
                                            
                                            JToken tableValue = propertiesValue13["table"];
                                            if (tableValue != null && tableValue.Type != JTokenType.Null)
                                            {
                                                string tableInstance = ((string)tableValue);
                                                propertiesInstance3.Table = tableInstance;
                                            }
                                            
                                            JToken partitionKeyValue = propertiesValue13["partitionKey"];
                                            if (partitionKeyValue != null && partitionKeyValue.Type != JTokenType.Null)
                                            {
                                                string partitionKeyInstance = ((string)partitionKeyValue);
                                                propertiesInstance3.PartitionKey = partitionKeyInstance;
                                            }
                                            
                                            JToken rowKeyValue = propertiesValue13["rowKey"];
                                            if (rowKeyValue != null && rowKeyValue.Type != JTokenType.Null)
                                            {
                                                string rowKeyInstance = ((string)rowKeyValue);
                                                propertiesInstance3.RowKey = rowKeyInstance;
                                            }
                                            
                                            JToken columnsToRemoveArray2 = propertiesValue13["columnsToRemove"];
                                            if (columnsToRemoveArray2 != null && columnsToRemoveArray2.Type != JTokenType.Null)
                                            {
                                                propertiesInstance3.ColumnsToRemove = new List<string>();
                                                foreach (JToken columnsToRemoveValue in ((JArray)columnsToRemoveArray2))
                                                {
                                                    propertiesInstance3.ColumnsToRemove.Add(((string)columnsToRemoveValue));
                                                }
                                            }
                                            
                                            JToken batchSizeValue = propertiesValue13["batchSize"];
                                            if (batchSizeValue != null && batchSizeValue.Type != JTokenType.Null)
                                            {
                                                int batchSizeInstance = ((int)batchSizeValue);
                                                propertiesInstance3.BatchSize = batchSizeInstance;
                                            }
                                        }
                                        
                                        JToken typeValue2 = datasourceValue2["type"];
                                        if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                        {
                                            string typeInstance2 = ((string)typeValue2);
                                            azureTableOutputDataSourceInstance.Type = typeInstance2;
                                        }
                                        propertiesInstance.DataSource = azureTableOutputDataSourceInstance;
                                    }
                                    if (typeName == "Microsoft.ServiceBus/EventHub")
                                    {
                                        EventHubOutputDataSource eventHubOutputDataSourceInstance = new EventHubOutputDataSource();
                                        
                                        JToken propertiesValue14 = datasourceValue2["properties"];
                                        if (propertiesValue14 != null && propertiesValue14.Type != JTokenType.Null)
                                        {
                                            EventHubOutputDataSourceProperties propertiesInstance4 = new EventHubOutputDataSourceProperties();
                                            eventHubOutputDataSourceInstance.Properties = propertiesInstance4;
                                            
                                            JToken serviceBusNamespaceValue = propertiesValue14["serviceBusNamespace"];
                                            if (serviceBusNamespaceValue != null && serviceBusNamespaceValue.Type != JTokenType.Null)
                                            {
                                                string serviceBusNamespaceInstance = ((string)serviceBusNamespaceValue);
                                                propertiesInstance4.ServiceBusNamespace = serviceBusNamespaceInstance;
                                            }
                                            
                                            JToken sharedAccessPolicyNameValue = propertiesValue14["sharedAccessPolicyName"];
                                            if (sharedAccessPolicyNameValue != null && sharedAccessPolicyNameValue.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyNameInstance = ((string)sharedAccessPolicyNameValue);
                                                propertiesInstance4.SharedAccessPolicyName = sharedAccessPolicyNameInstance;
                                            }
                                            
                                            JToken sharedAccessPolicyKeyValue = propertiesValue14["sharedAccessPolicyKey"];
                                            if (sharedAccessPolicyKeyValue != null && sharedAccessPolicyKeyValue.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyKeyInstance = ((string)sharedAccessPolicyKeyValue);
                                                propertiesInstance4.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance;
                                            }
                                            
                                            JToken eventHubNameValue = propertiesValue14["eventHubName"];
                                            if (eventHubNameValue != null && eventHubNameValue.Type != JTokenType.Null)
                                            {
                                                string eventHubNameInstance = ((string)eventHubNameValue);
                                                propertiesInstance4.EventHubName = eventHubNameInstance;
                                            }
                                            
                                            JToken partitionKeyValue2 = propertiesValue14["partitionKey"];
                                            if (partitionKeyValue2 != null && partitionKeyValue2.Type != JTokenType.Null)
                                            {
                                                string partitionKeyInstance2 = ((string)partitionKeyValue2);
                                                propertiesInstance4.PartitionKey = partitionKeyInstance2;
                                            }
                                        }
                                        
                                        JToken typeValue3 = datasourceValue2["type"];
                                        if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                        {
                                            string typeInstance3 = ((string)typeValue3);
                                            eventHubOutputDataSourceInstance.Type = typeInstance3;
                                        }
                                        propertiesInstance.DataSource = eventHubOutputDataSourceInstance;
                                    }
                                    if (typeName == "Microsoft.ServiceBus/Queue")
                                    {
                                        ServiceBusQueueOutputDataSource serviceBusQueueOutputDataSourceInstance = new ServiceBusQueueOutputDataSource();
                                        
                                        JToken propertiesValue15 = datasourceValue2["properties"];
                                        if (propertiesValue15 != null && propertiesValue15.Type != JTokenType.Null)
                                        {
                                            ServiceBusQueueOutputDataSourceProperties propertiesInstance5 = new ServiceBusQueueOutputDataSourceProperties();
                                            serviceBusQueueOutputDataSourceInstance.Properties = propertiesInstance5;
                                            
                                            JToken serviceBusNamespaceValue2 = propertiesValue15["serviceBusNamespace"];
                                            if (serviceBusNamespaceValue2 != null && serviceBusNamespaceValue2.Type != JTokenType.Null)
                                            {
                                                string serviceBusNamespaceInstance2 = ((string)serviceBusNamespaceValue2);
                                                propertiesInstance5.ServiceBusNamespace = serviceBusNamespaceInstance2;
                                            }
                                            
                                            JToken sharedAccessPolicyNameValue2 = propertiesValue15["sharedAccessPolicyName"];
                                            if (sharedAccessPolicyNameValue2 != null && sharedAccessPolicyNameValue2.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyNameInstance2 = ((string)sharedAccessPolicyNameValue2);
                                                propertiesInstance5.SharedAccessPolicyName = sharedAccessPolicyNameInstance2;
                                            }
                                            
                                            JToken sharedAccessPolicyKeyValue2 = propertiesValue15["sharedAccessPolicyKey"];
                                            if (sharedAccessPolicyKeyValue2 != null && sharedAccessPolicyKeyValue2.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyKeyInstance2 = ((string)sharedAccessPolicyKeyValue2);
                                                propertiesInstance5.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance2;
                                            }
                                            
                                            JToken queueNameValue = propertiesValue15["queueName"];
                                            if (queueNameValue != null && queueNameValue.Type != JTokenType.Null)
                                            {
                                                string queueNameInstance = ((string)queueNameValue);
                                                propertiesInstance5.QueueName = queueNameInstance;
                                            }
                                        }
                                        
                                        JToken typeValue4 = datasourceValue2["type"];
                                        if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                        {
                                            string typeInstance4 = ((string)typeValue4);
                                            serviceBusQueueOutputDataSourceInstance.Type = typeInstance4;
                                        }
                                        propertiesInstance.DataSource = serviceBusQueueOutputDataSourceInstance;
                                    }
                                    if (typeName == "Microsoft.ServiceBus/Topic")
                                    {
                                        ServiceBusTopicOutputDataSource serviceBusTopicOutputDataSourceInstance = new ServiceBusTopicOutputDataSource();
                                        
                                        JToken propertiesValue16 = datasourceValue2["properties"];
                                        if (propertiesValue16 != null && propertiesValue16.Type != JTokenType.Null)
                                        {
                                            ServiceBusTopicOutputDataSourceProperties propertiesInstance6 = new ServiceBusTopicOutputDataSourceProperties();
                                            serviceBusTopicOutputDataSourceInstance.Properties = propertiesInstance6;
                                            
                                            JToken serviceBusNamespaceValue3 = propertiesValue16["serviceBusNamespace"];
                                            if (serviceBusNamespaceValue3 != null && serviceBusNamespaceValue3.Type != JTokenType.Null)
                                            {
                                                string serviceBusNamespaceInstance3 = ((string)serviceBusNamespaceValue3);
                                                propertiesInstance6.ServiceBusNamespace = serviceBusNamespaceInstance3;
                                            }
                                            
                                            JToken sharedAccessPolicyNameValue3 = propertiesValue16["sharedAccessPolicyName"];
                                            if (sharedAccessPolicyNameValue3 != null && sharedAccessPolicyNameValue3.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyNameInstance3 = ((string)sharedAccessPolicyNameValue3);
                                                propertiesInstance6.SharedAccessPolicyName = sharedAccessPolicyNameInstance3;
                                            }
                                            
                                            JToken sharedAccessPolicyKeyValue3 = propertiesValue16["sharedAccessPolicyKey"];
                                            if (sharedAccessPolicyKeyValue3 != null && sharedAccessPolicyKeyValue3.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyKeyInstance3 = ((string)sharedAccessPolicyKeyValue3);
                                                propertiesInstance6.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance3;
                                            }
                                            
                                            JToken topicNameValue = propertiesValue16["topicName"];
                                            if (topicNameValue != null && topicNameValue.Type != JTokenType.Null)
                                            {
                                                string topicNameInstance = ((string)topicNameValue);
                                                propertiesInstance6.TopicName = topicNameInstance;
                                            }
                                        }
                                        
                                        JToken typeValue5 = datasourceValue2["type"];
                                        if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                        {
                                            string typeInstance5 = ((string)typeValue5);
                                            serviceBusTopicOutputDataSourceInstance.Type = typeInstance5;
                                        }
                                        propertiesInstance.DataSource = serviceBusTopicOutputDataSourceInstance;
                                    }
                                    if (typeName == "Microsoft.Sql/Server/Database")
                                    {
                                        SqlAzureOutputDataSource sqlAzureOutputDataSourceInstance = new SqlAzureOutputDataSource();
                                        
                                        JToken propertiesValue17 = datasourceValue2["properties"];
                                        if (propertiesValue17 != null && propertiesValue17.Type != JTokenType.Null)
                                        {
                                            SqlAzureOutputDataSourceProperties propertiesInstance7 = new SqlAzureOutputDataSourceProperties();
                                            sqlAzureOutputDataSourceInstance.Properties = propertiesInstance7;
                                            
                                            JToken serverValue = propertiesValue17["server"];
                                            if (serverValue != null && serverValue.Type != JTokenType.Null)
                                            {
                                                string serverInstance = ((string)serverValue);
                                                propertiesInstance7.Server = serverInstance;
                                            }
                                            
                                            JToken databaseValue = propertiesValue17["database"];
                                            if (databaseValue != null && databaseValue.Type != JTokenType.Null)
                                            {
                                                string databaseInstance = ((string)databaseValue);
                                                propertiesInstance7.Database = databaseInstance;
                                            }
                                            
                                            JToken userValue = propertiesValue17["user"];
                                            if (userValue != null && userValue.Type != JTokenType.Null)
                                            {
                                                string userInstance = ((string)userValue);
                                                propertiesInstance7.User = userInstance;
                                            }
                                            
                                            JToken passwordValue = propertiesValue17["password"];
                                            if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                            {
                                                string passwordInstance = ((string)passwordValue);
                                                propertiesInstance7.Password = passwordInstance;
                                            }
                                            
                                            JToken tableValue2 = propertiesValue17["table"];
                                            if (tableValue2 != null && tableValue2.Type != JTokenType.Null)
                                            {
                                                string tableInstance2 = ((string)tableValue2);
                                                propertiesInstance7.Table = tableInstance2;
                                            }
                                        }
                                        
                                        JToken typeValue6 = datasourceValue2["type"];
                                        if (typeValue6 != null && typeValue6.Type != JTokenType.Null)
                                        {
                                            string typeInstance6 = ((string)typeValue6);
                                            sqlAzureOutputDataSourceInstance.Type = typeInstance6;
                                        }
                                        propertiesInstance.DataSource = sqlAzureOutputDataSourceInstance;
                                    }
                                    if (typeName == "Microsoft.Storage/DocumentDB")
                                    {
                                        DocumentDbOutputDataSource documentDbOutputDataSourceInstance = new DocumentDbOutputDataSource();
                                        
                                        JToken propertiesValue18 = datasourceValue2["properties"];
                                        if (propertiesValue18 != null && propertiesValue18.Type != JTokenType.Null)
                                        {
                                            DocumentDbOutputDataSourceProperties propertiesInstance8 = new DocumentDbOutputDataSourceProperties();
                                            documentDbOutputDataSourceInstance.Properties = propertiesInstance8;
                                            
                                            JToken accountIdValue = propertiesValue18["accountId"];
                                            if (accountIdValue != null && accountIdValue.Type != JTokenType.Null)
                                            {
                                                string accountIdInstance = ((string)accountIdValue);
                                                propertiesInstance8.AccountId = accountIdInstance;
                                            }
                                            
                                            JToken accountKeyValue3 = propertiesValue18["accountKey"];
                                            if (accountKeyValue3 != null && accountKeyValue3.Type != JTokenType.Null)
                                            {
                                                string accountKeyInstance3 = ((string)accountKeyValue3);
                                                propertiesInstance8.AccountKey = accountKeyInstance3;
                                            }
                                            
                                            JToken databaseValue2 = propertiesValue18["database"];
                                            if (databaseValue2 != null && databaseValue2.Type != JTokenType.Null)
                                            {
                                                string databaseInstance2 = ((string)databaseValue2);
                                                propertiesInstance8.Database = databaseInstance2;
                                            }
                                            
                                            JToken collectionNamePatternValue = propertiesValue18["collectionNamePattern"];
                                            if (collectionNamePatternValue != null && collectionNamePatternValue.Type != JTokenType.Null)
                                            {
                                                string collectionNamePatternInstance = ((string)collectionNamePatternValue);
                                                propertiesInstance8.CollectionNamePattern = collectionNamePatternInstance;
                                            }
                                            
                                            JToken partitionKeyValue3 = propertiesValue18["partitionKey"];
                                            if (partitionKeyValue3 != null && partitionKeyValue3.Type != JTokenType.Null)
                                            {
                                                string partitionKeyInstance3 = ((string)partitionKeyValue3);
                                                propertiesInstance8.PartitionKey = partitionKeyInstance3;
                                            }
                                            
                                            JToken documentIdValue = propertiesValue18["documentId"];
                                            if (documentIdValue != null && documentIdValue.Type != JTokenType.Null)
                                            {
                                                string documentIdInstance = ((string)documentIdValue);
                                                propertiesInstance8.DocumentId = documentIdInstance;
                                            }
                                        }
                                        
                                        JToken typeValue7 = datasourceValue2["type"];
                                        if (typeValue7 != null && typeValue7.Type != JTokenType.Null)
                                        {
                                            string typeInstance7 = ((string)typeValue7);
                                            documentDbOutputDataSourceInstance.Type = typeInstance7;
                                        }
                                        propertiesInstance.DataSource = documentDbOutputDataSourceInstance;
                                    }
                                }
                                
                                JToken serializationValue2 = propertiesValue11["serialization"];
                                if (serializationValue2 != null && serializationValue2.Type != JTokenType.Null)
                                {
                                    string typeName2 = ((string)serializationValue2["type"]);
                                    if (typeName2 == "Csv")
                                    {
                                        CsvSerialization csvSerializationInstance = new CsvSerialization();
                                        
                                        JToken propertiesValue19 = serializationValue2["properties"];
                                        if (propertiesValue19 != null && propertiesValue19.Type != JTokenType.Null)
                                        {
                                            CsvSerializationProperties propertiesInstance9 = new CsvSerializationProperties();
                                            csvSerializationInstance.Properties = propertiesInstance9;
                                            
                                            JToken fieldDelimiterValue = propertiesValue19["fieldDelimiter"];
                                            if (fieldDelimiterValue != null && fieldDelimiterValue.Type != JTokenType.Null)
                                            {
                                                string fieldDelimiterInstance = ((string)fieldDelimiterValue);
                                                propertiesInstance9.FieldDelimiter = fieldDelimiterInstance;
                                            }
                                            
                                            JToken encodingValue = propertiesValue19["encoding"];
                                            if (encodingValue != null && encodingValue.Type != JTokenType.Null)
                                            {
                                                string encodingInstance = ((string)encodingValue);
                                                propertiesInstance9.Encoding = encodingInstance;
                                            }
                                        }
                                        
                                        JToken typeValue8 = serializationValue2["type"];
                                        if (typeValue8 != null && typeValue8.Type != JTokenType.Null)
                                        {
                                            string typeInstance8 = ((string)typeValue8);
                                            csvSerializationInstance.Type = typeInstance8;
                                        }
                                        propertiesInstance.Serialization = csvSerializationInstance;
                                    }
                                    if (typeName2 == "Json")
                                    {
                                        JsonSerialization jsonSerializationInstance = new JsonSerialization();
                                        
                                        JToken propertiesValue20 = serializationValue2["properties"];
                                        if (propertiesValue20 != null && propertiesValue20.Type != JTokenType.Null)
                                        {
                                            JsonSerializationProperties propertiesInstance10 = new JsonSerializationProperties();
                                            jsonSerializationInstance.Properties = propertiesInstance10;
                                            
                                            JToken encodingValue2 = propertiesValue20["encoding"];
                                            if (encodingValue2 != null && encodingValue2.Type != JTokenType.Null)
                                            {
                                                string encodingInstance2 = ((string)encodingValue2);
                                                propertiesInstance10.Encoding = encodingInstance2;
                                            }
                                            
                                            JToken formatValue = propertiesValue20["format"];
                                            if (formatValue != null && formatValue.Type != JTokenType.Null)
                                            {
                                                string formatInstance = ((string)formatValue);
                                                propertiesInstance10.Format = formatInstance;
                                            }
                                        }
                                        
                                        JToken typeValue9 = serializationValue2["type"];
                                        if (typeValue9 != null && typeValue9.Type != JTokenType.Null)
                                        {
                                            string typeInstance9 = ((string)typeValue9);
                                            jsonSerializationInstance.Type = typeInstance9;
                                        }
                                        propertiesInstance.Serialization = jsonSerializationInstance;
                                    }
                                    if (typeName2 == "Avro")
                                    {
                                        AvroSerialization avroSerializationInstance = new AvroSerialization();
                                        
                                        JToken propertiesValue21 = serializationValue2["properties"];
                                        if (propertiesValue21 != null && propertiesValue21.Type != JTokenType.Null)
                                        {
                                            AvroSerializationProperties propertiesInstance11 = new AvroSerializationProperties();
                                            avroSerializationInstance.Properties = propertiesInstance11;
                                        }
                                        
                                        JToken typeValue10 = serializationValue2["type"];
                                        if (typeValue10 != null && typeValue10.Type != JTokenType.Null)
                                        {
                                            string typeInstance10 = ((string)typeValue10);
                                            avroSerializationInstance.Type = typeInstance10;
                                        }
                                        propertiesInstance.Serialization = avroSerializationInstance;
                                    }
                                }
                                
                                JToken diagnosticsValue2 = propertiesValue11["diagnostics"];
                                if (diagnosticsValue2 != null && diagnosticsValue2.Type != JTokenType.Null)
                                {
                                    Diagnostics diagnosticsInstance = new Diagnostics();
                                    propertiesInstance.Diagnostics = diagnosticsInstance;
                                    
                                    JToken conditionsArray2 = diagnosticsValue2["conditions"];
                                    if (conditionsArray2 != null && conditionsArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken conditionsValue in ((JArray)conditionsArray2))
                                        {
                                            DiagnosticCondition diagnosticConditionInstance = new DiagnosticCondition();
                                            diagnosticsInstance.Conditions.Add(diagnosticConditionInstance);
                                            
                                            JToken sinceValue = conditionsValue["since"];
                                            if (sinceValue != null && sinceValue.Type != JTokenType.Null)
                                            {
                                                DateTime sinceInstance = ((DateTime)sinceValue);
                                                diagnosticConditionInstance.Since = sinceInstance;
                                            }
                                            
                                            JToken codeValue = conditionsValue["code"];
                                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                                            {
                                                string codeInstance = ((string)codeValue);
                                                diagnosticConditionInstance.Code = codeInstance;
                                            }
                                            
                                            JToken messageValue = conditionsValue["message"];
                                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                                            {
                                                string messageInstance = ((string)messageValue);
                                                diagnosticConditionInstance.Message = messageInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                    }
                    if (httpResponse.Headers.Contains("ETag"))
                    {
                        result.Output.Properties.Etag = httpResponse.Headers.GetValues("ETag").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create or update an output for a stream analytics job. The raw json
        /// content will be used.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='outputName'>
        /// Required. The name of the output for the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update an output for
        /// a stream analytics job. It is in json format
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the output CreateOrUpdate operation.
        /// </returns>
        public async Task<OutputCreateOrUpdateResponse> CreateOrUpdateWithRawJsonContentAsync(string resourceGroupName, string jobName, string outputName, OutputCreateOrUpdateWithRawJsonContentParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (outputName == null)
            {
                throw new ArgumentNullException("outputName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Content == null)
            {
                throw new ArgumentNullException("parameters.Content");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("outputName", outputName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateWithRawJsonContentAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.StreamAnalytics/streamingjobs/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/outputs/";
            url = url + Uri.EscapeDataString(outputName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = parameters.Content;
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OutputCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new OutputCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Output outputInstance = new Output();
                            result.Output = outputInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                outputInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                OutputProperties propertiesInstance = new OutputProperties();
                                outputInstance.Properties = propertiesInstance;
                                
                                JToken etagValue = propertiesValue["etag"];
                                if (etagValue != null && etagValue.Type != JTokenType.Null)
                                {
                                    string etagInstance = ((string)etagValue);
                                    propertiesInstance.Etag = etagInstance;
                                }
                                
                                JToken datasourceValue = propertiesValue["datasource"];
                                if (datasourceValue != null && datasourceValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)datasourceValue["type"]);
                                    if (typeName == "Microsoft.Storage/Blob")
                                    {
                                        BlobOutputDataSource blobOutputDataSourceInstance = new BlobOutputDataSource();
                                        
                                        JToken propertiesValue2 = datasourceValue["properties"];
                                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                        {
                                            BlobOutputDataSourceProperties propertiesInstance2 = new BlobOutputDataSourceProperties();
                                            blobOutputDataSourceInstance.Properties = propertiesInstance2;
                                            
                                            JToken storageAccountsArray = propertiesValue2["storageAccounts"];
                                            if (storageAccountsArray != null && storageAccountsArray.Type != JTokenType.Null)
                                            {
                                                propertiesInstance2.StorageAccounts = new List<StorageAccount>();
                                                foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray))
                                                {
                                                    StorageAccount storageAccountInstance = new StorageAccount();
                                                    propertiesInstance2.StorageAccounts.Add(storageAccountInstance);
                                                    
                                                    JToken accountNameValue = storageAccountsValue["accountName"];
                                                    if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                    {
                                                        string accountNameInstance = ((string)accountNameValue);
                                                        storageAccountInstance.AccountName = accountNameInstance;
                                                    }
                                                    
                                                    JToken accountKeyValue = storageAccountsValue["accountKey"];
                                                    if (accountKeyValue != null && accountKeyValue.Type != JTokenType.Null)
                                                    {
                                                        string accountKeyInstance = ((string)accountKeyValue);
                                                        storageAccountInstance.AccountKey = accountKeyInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken containerValue = propertiesValue2["container"];
                                            if (containerValue != null && containerValue.Type != JTokenType.Null)
                                            {
                                                string containerInstance = ((string)containerValue);
                                                propertiesInstance2.Container = containerInstance;
                                            }
                                            
                                            JToken pathPatternValue = propertiesValue2["pathPattern"];
                                            if (pathPatternValue != null && pathPatternValue.Type != JTokenType.Null)
                                            {
                                                string pathPatternInstance = ((string)pathPatternValue);
                                                propertiesInstance2.PathPattern = pathPatternInstance;
                                            }
                                            
                                            JToken dateFormatValue = propertiesValue2["dateFormat"];
                                            if (dateFormatValue != null && dateFormatValue.Type != JTokenType.Null)
                                            {
                                                string dateFormatInstance = ((string)dateFormatValue);
                                                propertiesInstance2.DateFormat = dateFormatInstance;
                                            }
                                            
                                            JToken timeFormatValue = propertiesValue2["timeFormat"];
                                            if (timeFormatValue != null && timeFormatValue.Type != JTokenType.Null)
                                            {
                                                string timeFormatInstance = ((string)timeFormatValue);
                                                propertiesInstance2.TimeFormat = timeFormatInstance;
                                            }
                                        }
                                        
                                        JToken typeValue = datasourceValue["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            blobOutputDataSourceInstance.Type = typeInstance;
                                        }
                                        propertiesInstance.DataSource = blobOutputDataSourceInstance;
                                    }
                                    if (typeName == "Microsoft.Storage/Table")
                                    {
                                        AzureTableOutputDataSource azureTableOutputDataSourceInstance = new AzureTableOutputDataSource();
                                        
                                        JToken propertiesValue3 = datasourceValue["properties"];
                                        if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                        {
                                            AzureTableOutputDataSourceProperties propertiesInstance3 = new AzureTableOutputDataSourceProperties();
                                            azureTableOutputDataSourceInstance.Properties = propertiesInstance3;
                                            
                                            JToken accountNameValue2 = propertiesValue3["accountName"];
                                            if (accountNameValue2 != null && accountNameValue2.Type != JTokenType.Null)
                                            {
                                                string accountNameInstance2 = ((string)accountNameValue2);
                                                propertiesInstance3.AccountName = accountNameInstance2;
                                            }
                                            
                                            JToken accountKeyValue2 = propertiesValue3["accountKey"];
                                            if (accountKeyValue2 != null && accountKeyValue2.Type != JTokenType.Null)
                                            {
                                                string accountKeyInstance2 = ((string)accountKeyValue2);
                                                propertiesInstance3.AccountKey = accountKeyInstance2;
                                            }
                                            
                                            JToken tableValue = propertiesValue3["table"];
                                            if (tableValue != null && tableValue.Type != JTokenType.Null)
                                            {
                                                string tableInstance = ((string)tableValue);
                                                propertiesInstance3.Table = tableInstance;
                                            }
                                            
                                            JToken partitionKeyValue = propertiesValue3["partitionKey"];
                                            if (partitionKeyValue != null && partitionKeyValue.Type != JTokenType.Null)
                                            {
                                                string partitionKeyInstance = ((string)partitionKeyValue);
                                                propertiesInstance3.PartitionKey = partitionKeyInstance;
                                            }
                                            
                                            JToken rowKeyValue = propertiesValue3["rowKey"];
                                            if (rowKeyValue != null && rowKeyValue.Type != JTokenType.Null)
                                            {
                                                string rowKeyInstance = ((string)rowKeyValue);
                                                propertiesInstance3.RowKey = rowKeyInstance;
                                            }
                                            
                                            JToken columnsToRemoveArray = propertiesValue3["columnsToRemove"];
                                            if (columnsToRemoveArray != null && columnsToRemoveArray.Type != JTokenType.Null)
                                            {
                                                propertiesInstance3.ColumnsToRemove = new List<string>();
                                                foreach (JToken columnsToRemoveValue in ((JArray)columnsToRemoveArray))
                                                {
                                                    propertiesInstance3.ColumnsToRemove.Add(((string)columnsToRemoveValue));
                                                }
                                            }
                                            
                                            JToken batchSizeValue = propertiesValue3["batchSize"];
                                            if (batchSizeValue != null && batchSizeValue.Type != JTokenType.Null)
                                            {
                                                int batchSizeInstance = ((int)batchSizeValue);
                                                propertiesInstance3.BatchSize = batchSizeInstance;
                                            }
                                        }
                                        
                                        JToken typeValue2 = datasourceValue["type"];
                                        if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                        {
                                            string typeInstance2 = ((string)typeValue2);
                                            azureTableOutputDataSourceInstance.Type = typeInstance2;
                                        }
                                        propertiesInstance.DataSource = azureTableOutputDataSourceInstance;
                                    }
                                    if (typeName == "Microsoft.ServiceBus/EventHub")
                                    {
                                        EventHubOutputDataSource eventHubOutputDataSourceInstance = new EventHubOutputDataSource();
                                        
                                        JToken propertiesValue4 = datasourceValue["properties"];
                                        if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                        {
                                            EventHubOutputDataSourceProperties propertiesInstance4 = new EventHubOutputDataSourceProperties();
                                            eventHubOutputDataSourceInstance.Properties = propertiesInstance4;
                                            
                                            JToken serviceBusNamespaceValue = propertiesValue4["serviceBusNamespace"];
                                            if (serviceBusNamespaceValue != null && serviceBusNamespaceValue.Type != JTokenType.Null)
                                            {
                                                string serviceBusNamespaceInstance = ((string)serviceBusNamespaceValue);
                                                propertiesInstance4.ServiceBusNamespace = serviceBusNamespaceInstance;
                                            }
                                            
                                            JToken sharedAccessPolicyNameValue = propertiesValue4["sharedAccessPolicyName"];
                                            if (sharedAccessPolicyNameValue != null && sharedAccessPolicyNameValue.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyNameInstance = ((string)sharedAccessPolicyNameValue);
                                                propertiesInstance4.SharedAccessPolicyName = sharedAccessPolicyNameInstance;
                                            }
                                            
                                            JToken sharedAccessPolicyKeyValue = propertiesValue4["sharedAccessPolicyKey"];
                                            if (sharedAccessPolicyKeyValue != null && sharedAccessPolicyKeyValue.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyKeyInstance = ((string)sharedAccessPolicyKeyValue);
                                                propertiesInstance4.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance;
                                            }
                                            
                                            JToken eventHubNameValue = propertiesValue4["eventHubName"];
                                            if (eventHubNameValue != null && eventHubNameValue.Type != JTokenType.Null)
                                            {
                                                string eventHubNameInstance = ((string)eventHubNameValue);
                                                propertiesInstance4.EventHubName = eventHubNameInstance;
                                            }
                                            
                                            JToken partitionKeyValue2 = propertiesValue4["partitionKey"];
                                            if (partitionKeyValue2 != null && partitionKeyValue2.Type != JTokenType.Null)
                                            {
                                                string partitionKeyInstance2 = ((string)partitionKeyValue2);
                                                propertiesInstance4.PartitionKey = partitionKeyInstance2;
                                            }
                                        }
                                        
                                        JToken typeValue3 = datasourceValue["type"];
                                        if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                        {
                                            string typeInstance3 = ((string)typeValue3);
                                            eventHubOutputDataSourceInstance.Type = typeInstance3;
                                        }
                                        propertiesInstance.DataSource = eventHubOutputDataSourceInstance;
                                    }
                                    if (typeName == "Microsoft.ServiceBus/Queue")
                                    {
                                        ServiceBusQueueOutputDataSource serviceBusQueueOutputDataSourceInstance = new ServiceBusQueueOutputDataSource();
                                        
                                        JToken propertiesValue5 = datasourceValue["properties"];
                                        if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                                        {
                                            ServiceBusQueueOutputDataSourceProperties propertiesInstance5 = new ServiceBusQueueOutputDataSourceProperties();
                                            serviceBusQueueOutputDataSourceInstance.Properties = propertiesInstance5;
                                            
                                            JToken serviceBusNamespaceValue2 = propertiesValue5["serviceBusNamespace"];
                                            if (serviceBusNamespaceValue2 != null && serviceBusNamespaceValue2.Type != JTokenType.Null)
                                            {
                                                string serviceBusNamespaceInstance2 = ((string)serviceBusNamespaceValue2);
                                                propertiesInstance5.ServiceBusNamespace = serviceBusNamespaceInstance2;
                                            }
                                            
                                            JToken sharedAccessPolicyNameValue2 = propertiesValue5["sharedAccessPolicyName"];
                                            if (sharedAccessPolicyNameValue2 != null && sharedAccessPolicyNameValue2.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyNameInstance2 = ((string)sharedAccessPolicyNameValue2);
                                                propertiesInstance5.SharedAccessPolicyName = sharedAccessPolicyNameInstance2;
                                            }
                                            
                                            JToken sharedAccessPolicyKeyValue2 = propertiesValue5["sharedAccessPolicyKey"];
                                            if (sharedAccessPolicyKeyValue2 != null && sharedAccessPolicyKeyValue2.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyKeyInstance2 = ((string)sharedAccessPolicyKeyValue2);
                                                propertiesInstance5.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance2;
                                            }
                                            
                                            JToken queueNameValue = propertiesValue5["queueName"];
                                            if (queueNameValue != null && queueNameValue.Type != JTokenType.Null)
                                            {
                                                string queueNameInstance = ((string)queueNameValue);
                                                propertiesInstance5.QueueName = queueNameInstance;
                                            }
                                        }
                                        
                                        JToken typeValue4 = datasourceValue["type"];
                                        if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                        {
                                            string typeInstance4 = ((string)typeValue4);
                                            serviceBusQueueOutputDataSourceInstance.Type = typeInstance4;
                                        }
                                        propertiesInstance.DataSource = serviceBusQueueOutputDataSourceInstance;
                                    }
                                    if (typeName == "Microsoft.ServiceBus/Topic")
                                    {
                                        ServiceBusTopicOutputDataSource serviceBusTopicOutputDataSourceInstance = new ServiceBusTopicOutputDataSource();
                                        
                                        JToken propertiesValue6 = datasourceValue["properties"];
                                        if (propertiesValue6 != null && propertiesValue6.Type != JTokenType.Null)
                                        {
                                            ServiceBusTopicOutputDataSourceProperties propertiesInstance6 = new ServiceBusTopicOutputDataSourceProperties();
                                            serviceBusTopicOutputDataSourceInstance.Properties = propertiesInstance6;
                                            
                                            JToken serviceBusNamespaceValue3 = propertiesValue6["serviceBusNamespace"];
                                            if (serviceBusNamespaceValue3 != null && serviceBusNamespaceValue3.Type != JTokenType.Null)
                                            {
                                                string serviceBusNamespaceInstance3 = ((string)serviceBusNamespaceValue3);
                                                propertiesInstance6.ServiceBusNamespace = serviceBusNamespaceInstance3;
                                            }
                                            
                                            JToken sharedAccessPolicyNameValue3 = propertiesValue6["sharedAccessPolicyName"];
                                            if (sharedAccessPolicyNameValue3 != null && sharedAccessPolicyNameValue3.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyNameInstance3 = ((string)sharedAccessPolicyNameValue3);
                                                propertiesInstance6.SharedAccessPolicyName = sharedAccessPolicyNameInstance3;
                                            }
                                            
                                            JToken sharedAccessPolicyKeyValue3 = propertiesValue6["sharedAccessPolicyKey"];
                                            if (sharedAccessPolicyKeyValue3 != null && sharedAccessPolicyKeyValue3.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyKeyInstance3 = ((string)sharedAccessPolicyKeyValue3);
                                                propertiesInstance6.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance3;
                                            }
                                            
                                            JToken topicNameValue = propertiesValue6["topicName"];
                                            if (topicNameValue != null && topicNameValue.Type != JTokenType.Null)
                                            {
                                                string topicNameInstance = ((string)topicNameValue);
                                                propertiesInstance6.TopicName = topicNameInstance;
                                            }
                                        }
                                        
                                        JToken typeValue5 = datasourceValue["type"];
                                        if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                        {
                                            string typeInstance5 = ((string)typeValue5);
                                            serviceBusTopicOutputDataSourceInstance.Type = typeInstance5;
                                        }
                                        propertiesInstance.DataSource = serviceBusTopicOutputDataSourceInstance;
                                    }
                                    if (typeName == "Microsoft.Sql/Server/Database")
                                    {
                                        SqlAzureOutputDataSource sqlAzureOutputDataSourceInstance = new SqlAzureOutputDataSource();
                                        
                                        JToken propertiesValue7 = datasourceValue["properties"];
                                        if (propertiesValue7 != null && propertiesValue7.Type != JTokenType.Null)
                                        {
                                            SqlAzureOutputDataSourceProperties propertiesInstance7 = new SqlAzureOutputDataSourceProperties();
                                            sqlAzureOutputDataSourceInstance.Properties = propertiesInstance7;
                                            
                                            JToken serverValue = propertiesValue7["server"];
                                            if (serverValue != null && serverValue.Type != JTokenType.Null)
                                            {
                                                string serverInstance = ((string)serverValue);
                                                propertiesInstance7.Server = serverInstance;
                                            }
                                            
                                            JToken databaseValue = propertiesValue7["database"];
                                            if (databaseValue != null && databaseValue.Type != JTokenType.Null)
                                            {
                                                string databaseInstance = ((string)databaseValue);
                                                propertiesInstance7.Database = databaseInstance;
                                            }
                                            
                                            JToken userValue = propertiesValue7["user"];
                                            if (userValue != null && userValue.Type != JTokenType.Null)
                                            {
                                                string userInstance = ((string)userValue);
                                                propertiesInstance7.User = userInstance;
                                            }
                                            
                                            JToken passwordValue = propertiesValue7["password"];
                                            if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                            {
                                                string passwordInstance = ((string)passwordValue);
                                                propertiesInstance7.Password = passwordInstance;
                                            }
                                            
                                            JToken tableValue2 = propertiesValue7["table"];
                                            if (tableValue2 != null && tableValue2.Type != JTokenType.Null)
                                            {
                                                string tableInstance2 = ((string)tableValue2);
                                                propertiesInstance7.Table = tableInstance2;
                                            }
                                        }
                                        
                                        JToken typeValue6 = datasourceValue["type"];
                                        if (typeValue6 != null && typeValue6.Type != JTokenType.Null)
                                        {
                                            string typeInstance6 = ((string)typeValue6);
                                            sqlAzureOutputDataSourceInstance.Type = typeInstance6;
                                        }
                                        propertiesInstance.DataSource = sqlAzureOutputDataSourceInstance;
                                    }
                                    if (typeName == "Microsoft.Storage/DocumentDB")
                                    {
                                        DocumentDbOutputDataSource documentDbOutputDataSourceInstance = new DocumentDbOutputDataSource();
                                        
                                        JToken propertiesValue8 = datasourceValue["properties"];
                                        if (propertiesValue8 != null && propertiesValue8.Type != JTokenType.Null)
                                        {
                                            DocumentDbOutputDataSourceProperties propertiesInstance8 = new DocumentDbOutputDataSourceProperties();
                                            documentDbOutputDataSourceInstance.Properties = propertiesInstance8;
                                            
                                            JToken accountIdValue = propertiesValue8["accountId"];
                                            if (accountIdValue != null && accountIdValue.Type != JTokenType.Null)
                                            {
                                                string accountIdInstance = ((string)accountIdValue);
                                                propertiesInstance8.AccountId = accountIdInstance;
                                            }
                                            
                                            JToken accountKeyValue3 = propertiesValue8["accountKey"];
                                            if (accountKeyValue3 != null && accountKeyValue3.Type != JTokenType.Null)
                                            {
                                                string accountKeyInstance3 = ((string)accountKeyValue3);
                                                propertiesInstance8.AccountKey = accountKeyInstance3;
                                            }
                                            
                                            JToken databaseValue2 = propertiesValue8["database"];
                                            if (databaseValue2 != null && databaseValue2.Type != JTokenType.Null)
                                            {
                                                string databaseInstance2 = ((string)databaseValue2);
                                                propertiesInstance8.Database = databaseInstance2;
                                            }
                                            
                                            JToken collectionNamePatternValue = propertiesValue8["collectionNamePattern"];
                                            if (collectionNamePatternValue != null && collectionNamePatternValue.Type != JTokenType.Null)
                                            {
                                                string collectionNamePatternInstance = ((string)collectionNamePatternValue);
                                                propertiesInstance8.CollectionNamePattern = collectionNamePatternInstance;
                                            }
                                            
                                            JToken partitionKeyValue3 = propertiesValue8["partitionKey"];
                                            if (partitionKeyValue3 != null && partitionKeyValue3.Type != JTokenType.Null)
                                            {
                                                string partitionKeyInstance3 = ((string)partitionKeyValue3);
                                                propertiesInstance8.PartitionKey = partitionKeyInstance3;
                                            }
                                            
                                            JToken documentIdValue = propertiesValue8["documentId"];
                                            if (documentIdValue != null && documentIdValue.Type != JTokenType.Null)
                                            {
                                                string documentIdInstance = ((string)documentIdValue);
                                                propertiesInstance8.DocumentId = documentIdInstance;
                                            }
                                        }
                                        
                                        JToken typeValue7 = datasourceValue["type"];
                                        if (typeValue7 != null && typeValue7.Type != JTokenType.Null)
                                        {
                                            string typeInstance7 = ((string)typeValue7);
                                            documentDbOutputDataSourceInstance.Type = typeInstance7;
                                        }
                                        propertiesInstance.DataSource = documentDbOutputDataSourceInstance;
                                    }
                                }
                                
                                JToken serializationValue = propertiesValue["serialization"];
                                if (serializationValue != null && serializationValue.Type != JTokenType.Null)
                                {
                                    string typeName2 = ((string)serializationValue["type"]);
                                    if (typeName2 == "Csv")
                                    {
                                        CsvSerialization csvSerializationInstance = new CsvSerialization();
                                        
                                        JToken propertiesValue9 = serializationValue["properties"];
                                        if (propertiesValue9 != null && propertiesValue9.Type != JTokenType.Null)
                                        {
                                            CsvSerializationProperties propertiesInstance9 = new CsvSerializationProperties();
                                            csvSerializationInstance.Properties = propertiesInstance9;
                                            
                                            JToken fieldDelimiterValue = propertiesValue9["fieldDelimiter"];
                                            if (fieldDelimiterValue != null && fieldDelimiterValue.Type != JTokenType.Null)
                                            {
                                                string fieldDelimiterInstance = ((string)fieldDelimiterValue);
                                                propertiesInstance9.FieldDelimiter = fieldDelimiterInstance;
                                            }
                                            
                                            JToken encodingValue = propertiesValue9["encoding"];
                                            if (encodingValue != null && encodingValue.Type != JTokenType.Null)
                                            {
                                                string encodingInstance = ((string)encodingValue);
                                                propertiesInstance9.Encoding = encodingInstance;
                                            }
                                        }
                                        
                                        JToken typeValue8 = serializationValue["type"];
                                        if (typeValue8 != null && typeValue8.Type != JTokenType.Null)
                                        {
                                            string typeInstance8 = ((string)typeValue8);
                                            csvSerializationInstance.Type = typeInstance8;
                                        }
                                        propertiesInstance.Serialization = csvSerializationInstance;
                                    }
                                    if (typeName2 == "Json")
                                    {
                                        JsonSerialization jsonSerializationInstance = new JsonSerialization();
                                        
                                        JToken propertiesValue10 = serializationValue["properties"];
                                        if (propertiesValue10 != null && propertiesValue10.Type != JTokenType.Null)
                                        {
                                            JsonSerializationProperties propertiesInstance10 = new JsonSerializationProperties();
                                            jsonSerializationInstance.Properties = propertiesInstance10;
                                            
                                            JToken encodingValue2 = propertiesValue10["encoding"];
                                            if (encodingValue2 != null && encodingValue2.Type != JTokenType.Null)
                                            {
                                                string encodingInstance2 = ((string)encodingValue2);
                                                propertiesInstance10.Encoding = encodingInstance2;
                                            }
                                            
                                            JToken formatValue = propertiesValue10["format"];
                                            if (formatValue != null && formatValue.Type != JTokenType.Null)
                                            {
                                                string formatInstance = ((string)formatValue);
                                                propertiesInstance10.Format = formatInstance;
                                            }
                                        }
                                        
                                        JToken typeValue9 = serializationValue["type"];
                                        if (typeValue9 != null && typeValue9.Type != JTokenType.Null)
                                        {
                                            string typeInstance9 = ((string)typeValue9);
                                            jsonSerializationInstance.Type = typeInstance9;
                                        }
                                        propertiesInstance.Serialization = jsonSerializationInstance;
                                    }
                                    if (typeName2 == "Avro")
                                    {
                                        AvroSerialization avroSerializationInstance = new AvroSerialization();
                                        
                                        JToken propertiesValue11 = serializationValue["properties"];
                                        if (propertiesValue11 != null && propertiesValue11.Type != JTokenType.Null)
                                        {
                                            AvroSerializationProperties propertiesInstance11 = new AvroSerializationProperties();
                                            avroSerializationInstance.Properties = propertiesInstance11;
                                        }
                                        
                                        JToken typeValue10 = serializationValue["type"];
                                        if (typeValue10 != null && typeValue10.Type != JTokenType.Null)
                                        {
                                            string typeInstance10 = ((string)typeValue10);
                                            avroSerializationInstance.Type = typeInstance10;
                                        }
                                        propertiesInstance.Serialization = avroSerializationInstance;
                                    }
                                }
                                
                                JToken diagnosticsValue = propertiesValue["diagnostics"];
                                if (diagnosticsValue != null && diagnosticsValue.Type != JTokenType.Null)
                                {
                                    Diagnostics diagnosticsInstance = new Diagnostics();
                                    propertiesInstance.Diagnostics = diagnosticsInstance;
                                    
                                    JToken conditionsArray = diagnosticsValue["conditions"];
                                    if (conditionsArray != null && conditionsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken conditionsValue in ((JArray)conditionsArray))
                                        {
                                            DiagnosticCondition diagnosticConditionInstance = new DiagnosticCondition();
                                            diagnosticsInstance.Conditions.Add(diagnosticConditionInstance);
                                            
                                            JToken sinceValue = conditionsValue["since"];
                                            if (sinceValue != null && sinceValue.Type != JTokenType.Null)
                                            {
                                                DateTime sinceInstance = ((DateTime)sinceValue);
                                                diagnosticConditionInstance.Since = sinceInstance;
                                            }
                                            
                                            JToken codeValue = conditionsValue["code"];
                                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                                            {
                                                string codeInstance = ((string)codeValue);
                                                diagnosticConditionInstance.Code = codeInstance;
                                            }
                                            
                                            JToken messageValue = conditionsValue["message"];
                                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                                            {
                                                string messageInstance = ((string)messageValue);
                                                diagnosticConditionInstance.Message = messageInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                    }
                    if (httpResponse.Headers.Contains("ETag"))
                    {
                        result.Output.Properties.Etag = httpResponse.Headers.GetValues("ETag").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete an output for a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='outputName'>
        /// Required. The name of the output for the stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The common operation response.
        /// </returns>
        public async Task<CommonOperationResponse> DeleteAsync(string resourceGroupName, string jobName, string outputName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (outputName == null)
            {
                throw new ArgumentNullException("outputName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("outputName", outputName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.StreamAnalytics/streamingjobs/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/outputs/";
            url = url + Uri.EscapeDataString(outputName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CommonOperationResponse result = null;
                    // Deserialize Response
                    result = new CommonOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get an output for a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='outputName'>
        /// Required. The name of the output for the stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the output get operation.
        /// </returns>
        public async Task<OutputGetResponse> GetAsync(string resourceGroupName, string jobName, string outputName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (outputName == null)
            {
                throw new ArgumentNullException("outputName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("outputName", outputName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.StreamAnalytics/streamingjobs/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/outputs/";
            url = url + Uri.EscapeDataString(outputName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OutputGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new OutputGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Output outputInstance = new Output();
                            result.Output = outputInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                outputInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                OutputProperties propertiesInstance = new OutputProperties();
                                outputInstance.Properties = propertiesInstance;
                                
                                JToken etagValue = propertiesValue["etag"];
                                if (etagValue != null && etagValue.Type != JTokenType.Null)
                                {
                                    string etagInstance = ((string)etagValue);
                                    propertiesInstance.Etag = etagInstance;
                                }
                                
                                JToken datasourceValue = propertiesValue["datasource"];
                                if (datasourceValue != null && datasourceValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)datasourceValue["type"]);
                                    if (typeName == "Microsoft.Storage/Blob")
                                    {
                                        BlobOutputDataSource blobOutputDataSourceInstance = new BlobOutputDataSource();
                                        
                                        JToken propertiesValue2 = datasourceValue["properties"];
                                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                        {
                                            BlobOutputDataSourceProperties propertiesInstance2 = new BlobOutputDataSourceProperties();
                                            blobOutputDataSourceInstance.Properties = propertiesInstance2;
                                            
                                            JToken storageAccountsArray = propertiesValue2["storageAccounts"];
                                            if (storageAccountsArray != null && storageAccountsArray.Type != JTokenType.Null)
                                            {
                                                propertiesInstance2.StorageAccounts = new List<StorageAccount>();
                                                foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray))
                                                {
                                                    StorageAccount storageAccountInstance = new StorageAccount();
                                                    propertiesInstance2.StorageAccounts.Add(storageAccountInstance);
                                                    
                                                    JToken accountNameValue = storageAccountsValue["accountName"];
                                                    if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                    {
                                                        string accountNameInstance = ((string)accountNameValue);
                                                        storageAccountInstance.AccountName = accountNameInstance;
                                                    }
                                                    
                                                    JToken accountKeyValue = storageAccountsValue["accountKey"];
                                                    if (accountKeyValue != null && accountKeyValue.Type != JTokenType.Null)
                                                    {
                                                        string accountKeyInstance = ((string)accountKeyValue);
                                                        storageAccountInstance.AccountKey = accountKeyInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken containerValue = propertiesValue2["container"];
                                            if (containerValue != null && containerValue.Type != JTokenType.Null)
                                            {
                                                string containerInstance = ((string)containerValue);
                                                propertiesInstance2.Container = containerInstance;
                                            }
                                            
                                            JToken pathPatternValue = propertiesValue2["pathPattern"];
                                            if (pathPatternValue != null && pathPatternValue.Type != JTokenType.Null)
                                            {
                                                string pathPatternInstance = ((string)pathPatternValue);
                                                propertiesInstance2.PathPattern = pathPatternInstance;
                                            }
                                            
                                            JToken dateFormatValue = propertiesValue2["dateFormat"];
                                            if (dateFormatValue != null && dateFormatValue.Type != JTokenType.Null)
                                            {
                                                string dateFormatInstance = ((string)dateFormatValue);
                                                propertiesInstance2.DateFormat = dateFormatInstance;
                                            }
                                            
                                            JToken timeFormatValue = propertiesValue2["timeFormat"];
                                            if (timeFormatValue != null && timeFormatValue.Type != JTokenType.Null)
                                            {
                                                string timeFormatInstance = ((string)timeFormatValue);
                                                propertiesInstance2.TimeFormat = timeFormatInstance;
                                            }
                                        }
                                        
                                        JToken typeValue = datasourceValue["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            blobOutputDataSourceInstance.Type = typeInstance;
                                        }
                                        propertiesInstance.DataSource = blobOutputDataSourceInstance;
                                    }
                                    if (typeName == "Microsoft.Storage/Table")
                                    {
                                        AzureTableOutputDataSource azureTableOutputDataSourceInstance = new AzureTableOutputDataSource();
                                        
                                        JToken propertiesValue3 = datasourceValue["properties"];
                                        if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                        {
                                            AzureTableOutputDataSourceProperties propertiesInstance3 = new AzureTableOutputDataSourceProperties();
                                            azureTableOutputDataSourceInstance.Properties = propertiesInstance3;
                                            
                                            JToken accountNameValue2 = propertiesValue3["accountName"];
                                            if (accountNameValue2 != null && accountNameValue2.Type != JTokenType.Null)
                                            {
                                                string accountNameInstance2 = ((string)accountNameValue2);
                                                propertiesInstance3.AccountName = accountNameInstance2;
                                            }
                                            
                                            JToken accountKeyValue2 = propertiesValue3["accountKey"];
                                            if (accountKeyValue2 != null && accountKeyValue2.Type != JTokenType.Null)
                                            {
                                                string accountKeyInstance2 = ((string)accountKeyValue2);
                                                propertiesInstance3.AccountKey = accountKeyInstance2;
                                            }
                                            
                                            JToken tableValue = propertiesValue3["table"];
                                            if (tableValue != null && tableValue.Type != JTokenType.Null)
                                            {
                                                string tableInstance = ((string)tableValue);
                                                propertiesInstance3.Table = tableInstance;
                                            }
                                            
                                            JToken partitionKeyValue = propertiesValue3["partitionKey"];
                                            if (partitionKeyValue != null && partitionKeyValue.Type != JTokenType.Null)
                                            {
                                                string partitionKeyInstance = ((string)partitionKeyValue);
                                                propertiesInstance3.PartitionKey = partitionKeyInstance;
                                            }
                                            
                                            JToken rowKeyValue = propertiesValue3["rowKey"];
                                            if (rowKeyValue != null && rowKeyValue.Type != JTokenType.Null)
                                            {
                                                string rowKeyInstance = ((string)rowKeyValue);
                                                propertiesInstance3.RowKey = rowKeyInstance;
                                            }
                                            
                                            JToken columnsToRemoveArray = propertiesValue3["columnsToRemove"];
                                            if (columnsToRemoveArray != null && columnsToRemoveArray.Type != JTokenType.Null)
                                            {
                                                propertiesInstance3.ColumnsToRemove = new List<string>();
                                                foreach (JToken columnsToRemoveValue in ((JArray)columnsToRemoveArray))
                                                {
                                                    propertiesInstance3.ColumnsToRemove.Add(((string)columnsToRemoveValue));
                                                }
                                            }
                                            
                                            JToken batchSizeValue = propertiesValue3["batchSize"];
                                            if (batchSizeValue != null && batchSizeValue.Type != JTokenType.Null)
                                            {
                                                int batchSizeInstance = ((int)batchSizeValue);
                                                propertiesInstance3.BatchSize = batchSizeInstance;
                                            }
                                        }
                                        
                                        JToken typeValue2 = datasourceValue["type"];
                                        if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                        {
                                            string typeInstance2 = ((string)typeValue2);
                                            azureTableOutputDataSourceInstance.Type = typeInstance2;
                                        }
                                        propertiesInstance.DataSource = azureTableOutputDataSourceInstance;
                                    }
                                    if (typeName == "Microsoft.ServiceBus/EventHub")
                                    {
                                        EventHubOutputDataSource eventHubOutputDataSourceInstance = new EventHubOutputDataSource();
                                        
                                        JToken propertiesValue4 = datasourceValue["properties"];
                                        if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                        {
                                            EventHubOutputDataSourceProperties propertiesInstance4 = new EventHubOutputDataSourceProperties();
                                            eventHubOutputDataSourceInstance.Properties = propertiesInstance4;
                                            
                                            JToken serviceBusNamespaceValue = propertiesValue4["serviceBusNamespace"];
                                            if (serviceBusNamespaceValue != null && serviceBusNamespaceValue.Type != JTokenType.Null)
                                            {
                                                string serviceBusNamespaceInstance = ((string)serviceBusNamespaceValue);
                                                propertiesInstance4.ServiceBusNamespace = serviceBusNamespaceInstance;
                                            }
                                            
                                            JToken sharedAccessPolicyNameValue = propertiesValue4["sharedAccessPolicyName"];
                                            if (sharedAccessPolicyNameValue != null && sharedAccessPolicyNameValue.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyNameInstance = ((string)sharedAccessPolicyNameValue);
                                                propertiesInstance4.SharedAccessPolicyName = sharedAccessPolicyNameInstance;
                                            }
                                            
                                            JToken sharedAccessPolicyKeyValue = propertiesValue4["sharedAccessPolicyKey"];
                                            if (sharedAccessPolicyKeyValue != null && sharedAccessPolicyKeyValue.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyKeyInstance = ((string)sharedAccessPolicyKeyValue);
                                                propertiesInstance4.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance;
                                            }
                                            
                                            JToken eventHubNameValue = propertiesValue4["eventHubName"];
                                            if (eventHubNameValue != null && eventHubNameValue.Type != JTokenType.Null)
                                            {
                                                string eventHubNameInstance = ((string)eventHubNameValue);
                                                propertiesInstance4.EventHubName = eventHubNameInstance;
                                            }
                                            
                                            JToken partitionKeyValue2 = propertiesValue4["partitionKey"];
                                            if (partitionKeyValue2 != null && partitionKeyValue2.Type != JTokenType.Null)
                                            {
                                                string partitionKeyInstance2 = ((string)partitionKeyValue2);
                                                propertiesInstance4.PartitionKey = partitionKeyInstance2;
                                            }
                                        }
                                        
                                        JToken typeValue3 = datasourceValue["type"];
                                        if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                        {
                                            string typeInstance3 = ((string)typeValue3);
                                            eventHubOutputDataSourceInstance.Type = typeInstance3;
                                        }
                                        propertiesInstance.DataSource = eventHubOutputDataSourceInstance;
                                    }
                                    if (typeName == "Microsoft.ServiceBus/Queue")
                                    {
                                        ServiceBusQueueOutputDataSource serviceBusQueueOutputDataSourceInstance = new ServiceBusQueueOutputDataSource();
                                        
                                        JToken propertiesValue5 = datasourceValue["properties"];
                                        if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                                        {
                                            ServiceBusQueueOutputDataSourceProperties propertiesInstance5 = new ServiceBusQueueOutputDataSourceProperties();
                                            serviceBusQueueOutputDataSourceInstance.Properties = propertiesInstance5;
                                            
                                            JToken serviceBusNamespaceValue2 = propertiesValue5["serviceBusNamespace"];
                                            if (serviceBusNamespaceValue2 != null && serviceBusNamespaceValue2.Type != JTokenType.Null)
                                            {
                                                string serviceBusNamespaceInstance2 = ((string)serviceBusNamespaceValue2);
                                                propertiesInstance5.ServiceBusNamespace = serviceBusNamespaceInstance2;
                                            }
                                            
                                            JToken sharedAccessPolicyNameValue2 = propertiesValue5["sharedAccessPolicyName"];
                                            if (sharedAccessPolicyNameValue2 != null && sharedAccessPolicyNameValue2.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyNameInstance2 = ((string)sharedAccessPolicyNameValue2);
                                                propertiesInstance5.SharedAccessPolicyName = sharedAccessPolicyNameInstance2;
                                            }
                                            
                                            JToken sharedAccessPolicyKeyValue2 = propertiesValue5["sharedAccessPolicyKey"];
                                            if (sharedAccessPolicyKeyValue2 != null && sharedAccessPolicyKeyValue2.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyKeyInstance2 = ((string)sharedAccessPolicyKeyValue2);
                                                propertiesInstance5.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance2;
                                            }
                                            
                                            JToken queueNameValue = propertiesValue5["queueName"];
                                            if (queueNameValue != null && queueNameValue.Type != JTokenType.Null)
                                            {
                                                string queueNameInstance = ((string)queueNameValue);
                                                propertiesInstance5.QueueName = queueNameInstance;
                                            }
                                        }
                                        
                                        JToken typeValue4 = datasourceValue["type"];
                                        if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                        {
                                            string typeInstance4 = ((string)typeValue4);
                                            serviceBusQueueOutputDataSourceInstance.Type = typeInstance4;
                                        }
                                        propertiesInstance.DataSource = serviceBusQueueOutputDataSourceInstance;
                                    }
                                    if (typeName == "Microsoft.ServiceBus/Topic")
                                    {
                                        ServiceBusTopicOutputDataSource serviceBusTopicOutputDataSourceInstance = new ServiceBusTopicOutputDataSource();
                                        
                                        JToken propertiesValue6 = datasourceValue["properties"];
                                        if (propertiesValue6 != null && propertiesValue6.Type != JTokenType.Null)
                                        {
                                            ServiceBusTopicOutputDataSourceProperties propertiesInstance6 = new ServiceBusTopicOutputDataSourceProperties();
                                            serviceBusTopicOutputDataSourceInstance.Properties = propertiesInstance6;
                                            
                                            JToken serviceBusNamespaceValue3 = propertiesValue6["serviceBusNamespace"];
                                            if (serviceBusNamespaceValue3 != null && serviceBusNamespaceValue3.Type != JTokenType.Null)
                                            {
                                                string serviceBusNamespaceInstance3 = ((string)serviceBusNamespaceValue3);
                                                propertiesInstance6.ServiceBusNamespace = serviceBusNamespaceInstance3;
                                            }
                                            
                                            JToken sharedAccessPolicyNameValue3 = propertiesValue6["sharedAccessPolicyName"];
                                            if (sharedAccessPolicyNameValue3 != null && sharedAccessPolicyNameValue3.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyNameInstance3 = ((string)sharedAccessPolicyNameValue3);
                                                propertiesInstance6.SharedAccessPolicyName = sharedAccessPolicyNameInstance3;
                                            }
                                            
                                            JToken sharedAccessPolicyKeyValue3 = propertiesValue6["sharedAccessPolicyKey"];
                                            if (sharedAccessPolicyKeyValue3 != null && sharedAccessPolicyKeyValue3.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyKeyInstance3 = ((string)sharedAccessPolicyKeyValue3);
                                                propertiesInstance6.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance3;
                                            }
                                            
                                            JToken topicNameValue = propertiesValue6["topicName"];
                                            if (topicNameValue != null && topicNameValue.Type != JTokenType.Null)
                                            {
                                                string topicNameInstance = ((string)topicNameValue);
                                                propertiesInstance6.TopicName = topicNameInstance;
                                            }
                                        }
                                        
                                        JToken typeValue5 = datasourceValue["type"];
                                        if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                        {
                                            string typeInstance5 = ((string)typeValue5);
                                            serviceBusTopicOutputDataSourceInstance.Type = typeInstance5;
                                        }
                                        propertiesInstance.DataSource = serviceBusTopicOutputDataSourceInstance;
                                    }
                                    if (typeName == "Microsoft.Sql/Server/Database")
                                    {
                                        SqlAzureOutputDataSource sqlAzureOutputDataSourceInstance = new SqlAzureOutputDataSource();
                                        
                                        JToken propertiesValue7 = datasourceValue["properties"];
                                        if (propertiesValue7 != null && propertiesValue7.Type != JTokenType.Null)
                                        {
                                            SqlAzureOutputDataSourceProperties propertiesInstance7 = new SqlAzureOutputDataSourceProperties();
                                            sqlAzureOutputDataSourceInstance.Properties = propertiesInstance7;
                                            
                                            JToken serverValue = propertiesValue7["server"];
                                            if (serverValue != null && serverValue.Type != JTokenType.Null)
                                            {
                                                string serverInstance = ((string)serverValue);
                                                propertiesInstance7.Server = serverInstance;
                                            }
                                            
                                            JToken databaseValue = propertiesValue7["database"];
                                            if (databaseValue != null && databaseValue.Type != JTokenType.Null)
                                            {
                                                string databaseInstance = ((string)databaseValue);
                                                propertiesInstance7.Database = databaseInstance;
                                            }
                                            
                                            JToken userValue = propertiesValue7["user"];
                                            if (userValue != null && userValue.Type != JTokenType.Null)
                                            {
                                                string userInstance = ((string)userValue);
                                                propertiesInstance7.User = userInstance;
                                            }
                                            
                                            JToken passwordValue = propertiesValue7["password"];
                                            if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                            {
                                                string passwordInstance = ((string)passwordValue);
                                                propertiesInstance7.Password = passwordInstance;
                                            }
                                            
                                            JToken tableValue2 = propertiesValue7["table"];
                                            if (tableValue2 != null && tableValue2.Type != JTokenType.Null)
                                            {
                                                string tableInstance2 = ((string)tableValue2);
                                                propertiesInstance7.Table = tableInstance2;
                                            }
                                        }
                                        
                                        JToken typeValue6 = datasourceValue["type"];
                                        if (typeValue6 != null && typeValue6.Type != JTokenType.Null)
                                        {
                                            string typeInstance6 = ((string)typeValue6);
                                            sqlAzureOutputDataSourceInstance.Type = typeInstance6;
                                        }
                                        propertiesInstance.DataSource = sqlAzureOutputDataSourceInstance;
                                    }
                                    if (typeName == "Microsoft.Storage/DocumentDB")
                                    {
                                        DocumentDbOutputDataSource documentDbOutputDataSourceInstance = new DocumentDbOutputDataSource();
                                        
                                        JToken propertiesValue8 = datasourceValue["properties"];
                                        if (propertiesValue8 != null && propertiesValue8.Type != JTokenType.Null)
                                        {
                                            DocumentDbOutputDataSourceProperties propertiesInstance8 = new DocumentDbOutputDataSourceProperties();
                                            documentDbOutputDataSourceInstance.Properties = propertiesInstance8;
                                            
                                            JToken accountIdValue = propertiesValue8["accountId"];
                                            if (accountIdValue != null && accountIdValue.Type != JTokenType.Null)
                                            {
                                                string accountIdInstance = ((string)accountIdValue);
                                                propertiesInstance8.AccountId = accountIdInstance;
                                            }
                                            
                                            JToken accountKeyValue3 = propertiesValue8["accountKey"];
                                            if (accountKeyValue3 != null && accountKeyValue3.Type != JTokenType.Null)
                                            {
                                                string accountKeyInstance3 = ((string)accountKeyValue3);
                                                propertiesInstance8.AccountKey = accountKeyInstance3;
                                            }
                                            
                                            JToken databaseValue2 = propertiesValue8["database"];
                                            if (databaseValue2 != null && databaseValue2.Type != JTokenType.Null)
                                            {
                                                string databaseInstance2 = ((string)databaseValue2);
                                                propertiesInstance8.Database = databaseInstance2;
                                            }
                                            
                                            JToken collectionNamePatternValue = propertiesValue8["collectionNamePattern"];
                                            if (collectionNamePatternValue != null && collectionNamePatternValue.Type != JTokenType.Null)
                                            {
                                                string collectionNamePatternInstance = ((string)collectionNamePatternValue);
                                                propertiesInstance8.CollectionNamePattern = collectionNamePatternInstance;
                                            }
                                            
                                            JToken partitionKeyValue3 = propertiesValue8["partitionKey"];
                                            if (partitionKeyValue3 != null && partitionKeyValue3.Type != JTokenType.Null)
                                            {
                                                string partitionKeyInstance3 = ((string)partitionKeyValue3);
                                                propertiesInstance8.PartitionKey = partitionKeyInstance3;
                                            }
                                            
                                            JToken documentIdValue = propertiesValue8["documentId"];
                                            if (documentIdValue != null && documentIdValue.Type != JTokenType.Null)
                                            {
                                                string documentIdInstance = ((string)documentIdValue);
                                                propertiesInstance8.DocumentId = documentIdInstance;
                                            }
                                        }
                                        
                                        JToken typeValue7 = datasourceValue["type"];
                                        if (typeValue7 != null && typeValue7.Type != JTokenType.Null)
                                        {
                                            string typeInstance7 = ((string)typeValue7);
                                            documentDbOutputDataSourceInstance.Type = typeInstance7;
                                        }
                                        propertiesInstance.DataSource = documentDbOutputDataSourceInstance;
                                    }
                                }
                                
                                JToken serializationValue = propertiesValue["serialization"];
                                if (serializationValue != null && serializationValue.Type != JTokenType.Null)
                                {
                                    string typeName2 = ((string)serializationValue["type"]);
                                    if (typeName2 == "Csv")
                                    {
                                        CsvSerialization csvSerializationInstance = new CsvSerialization();
                                        
                                        JToken propertiesValue9 = serializationValue["properties"];
                                        if (propertiesValue9 != null && propertiesValue9.Type != JTokenType.Null)
                                        {
                                            CsvSerializationProperties propertiesInstance9 = new CsvSerializationProperties();
                                            csvSerializationInstance.Properties = propertiesInstance9;
                                            
                                            JToken fieldDelimiterValue = propertiesValue9["fieldDelimiter"];
                                            if (fieldDelimiterValue != null && fieldDelimiterValue.Type != JTokenType.Null)
                                            {
                                                string fieldDelimiterInstance = ((string)fieldDelimiterValue);
                                                propertiesInstance9.FieldDelimiter = fieldDelimiterInstance;
                                            }
                                            
                                            JToken encodingValue = propertiesValue9["encoding"];
                                            if (encodingValue != null && encodingValue.Type != JTokenType.Null)
                                            {
                                                string encodingInstance = ((string)encodingValue);
                                                propertiesInstance9.Encoding = encodingInstance;
                                            }
                                        }
                                        
                                        JToken typeValue8 = serializationValue["type"];
                                        if (typeValue8 != null && typeValue8.Type != JTokenType.Null)
                                        {
                                            string typeInstance8 = ((string)typeValue8);
                                            csvSerializationInstance.Type = typeInstance8;
                                        }
                                        propertiesInstance.Serialization = csvSerializationInstance;
                                    }
                                    if (typeName2 == "Json")
                                    {
                                        JsonSerialization jsonSerializationInstance = new JsonSerialization();
                                        
                                        JToken propertiesValue10 = serializationValue["properties"];
                                        if (propertiesValue10 != null && propertiesValue10.Type != JTokenType.Null)
                                        {
                                            JsonSerializationProperties propertiesInstance10 = new JsonSerializationProperties();
                                            jsonSerializationInstance.Properties = propertiesInstance10;
                                            
                                            JToken encodingValue2 = propertiesValue10["encoding"];
                                            if (encodingValue2 != null && encodingValue2.Type != JTokenType.Null)
                                            {
                                                string encodingInstance2 = ((string)encodingValue2);
                                                propertiesInstance10.Encoding = encodingInstance2;
                                            }
                                            
                                            JToken formatValue = propertiesValue10["format"];
                                            if (formatValue != null && formatValue.Type != JTokenType.Null)
                                            {
                                                string formatInstance = ((string)formatValue);
                                                propertiesInstance10.Format = formatInstance;
                                            }
                                        }
                                        
                                        JToken typeValue9 = serializationValue["type"];
                                        if (typeValue9 != null && typeValue9.Type != JTokenType.Null)
                                        {
                                            string typeInstance9 = ((string)typeValue9);
                                            jsonSerializationInstance.Type = typeInstance9;
                                        }
                                        propertiesInstance.Serialization = jsonSerializationInstance;
                                    }
                                    if (typeName2 == "Avro")
                                    {
                                        AvroSerialization avroSerializationInstance = new AvroSerialization();
                                        
                                        JToken propertiesValue11 = serializationValue["properties"];
                                        if (propertiesValue11 != null && propertiesValue11.Type != JTokenType.Null)
                                        {
                                            AvroSerializationProperties propertiesInstance11 = new AvroSerializationProperties();
                                            avroSerializationInstance.Properties = propertiesInstance11;
                                        }
                                        
                                        JToken typeValue10 = serializationValue["type"];
                                        if (typeValue10 != null && typeValue10.Type != JTokenType.Null)
                                        {
                                            string typeInstance10 = ((string)typeValue10);
                                            avroSerializationInstance.Type = typeInstance10;
                                        }
                                        propertiesInstance.Serialization = avroSerializationInstance;
                                    }
                                }
                                
                                JToken diagnosticsValue = propertiesValue["diagnostics"];
                                if (diagnosticsValue != null && diagnosticsValue.Type != JTokenType.Null)
                                {
                                    Diagnostics diagnosticsInstance = new Diagnostics();
                                    propertiesInstance.Diagnostics = diagnosticsInstance;
                                    
                                    JToken conditionsArray = diagnosticsValue["conditions"];
                                    if (conditionsArray != null && conditionsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken conditionsValue in ((JArray)conditionsArray))
                                        {
                                            DiagnosticCondition diagnosticConditionInstance = new DiagnosticCondition();
                                            diagnosticsInstance.Conditions.Add(diagnosticConditionInstance);
                                            
                                            JToken sinceValue = conditionsValue["since"];
                                            if (sinceValue != null && sinceValue.Type != JTokenType.Null)
                                            {
                                                DateTime sinceInstance = ((DateTime)sinceValue);
                                                diagnosticConditionInstance.Since = sinceInstance;
                                            }
                                            
                                            JToken codeValue = conditionsValue["code"];
                                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                                            {
                                                string codeInstance = ((string)codeValue);
                                                diagnosticConditionInstance.Code = codeInstance;
                                            }
                                            
                                            JToken messageValue = conditionsValue["message"];
                                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                                            {
                                                string messageInstance = ((string)messageValue);
                                                diagnosticConditionInstance.Message = messageInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                    }
                    if (httpResponse.Headers.Contains("ETag"))
                    {
                        result.Output.Properties.Etag = httpResponse.Headers.GetValues("ETag").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get a list of the outputs defined in a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to list all the outputs in the
        /// specified stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the output list operation.
        /// </returns>
        public async Task<OutputListResponse> ListOutputInJobAsync(string resourceGroupName, string jobName, OutputListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.PropertiesToSelect == null)
            {
                throw new ArgumentNullException("parameters.PropertiesToSelect");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListOutputInJobAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.StreamAnalytics/streamingjobs/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/outputs";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("$select=" + Uri.EscapeDataString(parameters.PropertiesToSelect));
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OutputListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new OutputListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Output outputInstance = new Output();
                                    result.Value.Add(outputInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        outputInstance.Name = nameInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        OutputProperties propertiesInstance = new OutputProperties();
                                        outputInstance.Properties = propertiesInstance;
                                        
                                        JToken etagValue = propertiesValue["etag"];
                                        if (etagValue != null && etagValue.Type != JTokenType.Null)
                                        {
                                            string etagInstance = ((string)etagValue);
                                            propertiesInstance.Etag = etagInstance;
                                        }
                                        
                                        JToken datasourceValue = propertiesValue["datasource"];
                                        if (datasourceValue != null && datasourceValue.Type != JTokenType.Null)
                                        {
                                            string typeName = ((string)datasourceValue["type"]);
                                            if (typeName == "Microsoft.Storage/Blob")
                                            {
                                                BlobOutputDataSource blobOutputDataSourceInstance = new BlobOutputDataSource();
                                                
                                                JToken propertiesValue2 = datasourceValue["properties"];
                                                if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                {
                                                    BlobOutputDataSourceProperties propertiesInstance2 = new BlobOutputDataSourceProperties();
                                                    blobOutputDataSourceInstance.Properties = propertiesInstance2;
                                                    
                                                    JToken storageAccountsArray = propertiesValue2["storageAccounts"];
                                                    if (storageAccountsArray != null && storageAccountsArray.Type != JTokenType.Null)
                                                    {
                                                        propertiesInstance2.StorageAccounts = new List<StorageAccount>();
                                                        foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray))
                                                        {
                                                            StorageAccount storageAccountInstance = new StorageAccount();
                                                            propertiesInstance2.StorageAccounts.Add(storageAccountInstance);
                                                            
                                                            JToken accountNameValue = storageAccountsValue["accountName"];
                                                            if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                            {
                                                                string accountNameInstance = ((string)accountNameValue);
                                                                storageAccountInstance.AccountName = accountNameInstance;
                                                            }
                                                            
                                                            JToken accountKeyValue = storageAccountsValue["accountKey"];
                                                            if (accountKeyValue != null && accountKeyValue.Type != JTokenType.Null)
                                                            {
                                                                string accountKeyInstance = ((string)accountKeyValue);
                                                                storageAccountInstance.AccountKey = accountKeyInstance;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken containerValue = propertiesValue2["container"];
                                                    if (containerValue != null && containerValue.Type != JTokenType.Null)
                                                    {
                                                        string containerInstance = ((string)containerValue);
                                                        propertiesInstance2.Container = containerInstance;
                                                    }
                                                    
                                                    JToken pathPatternValue = propertiesValue2["pathPattern"];
                                                    if (pathPatternValue != null && pathPatternValue.Type != JTokenType.Null)
                                                    {
                                                        string pathPatternInstance = ((string)pathPatternValue);
                                                        propertiesInstance2.PathPattern = pathPatternInstance;
                                                    }
                                                    
                                                    JToken dateFormatValue = propertiesValue2["dateFormat"];
                                                    if (dateFormatValue != null && dateFormatValue.Type != JTokenType.Null)
                                                    {
                                                        string dateFormatInstance = ((string)dateFormatValue);
                                                        propertiesInstance2.DateFormat = dateFormatInstance;
                                                    }
                                                    
                                                    JToken timeFormatValue = propertiesValue2["timeFormat"];
                                                    if (timeFormatValue != null && timeFormatValue.Type != JTokenType.Null)
                                                    {
                                                        string timeFormatInstance = ((string)timeFormatValue);
                                                        propertiesInstance2.TimeFormat = timeFormatInstance;
                                                    }
                                                }
                                                
                                                JToken typeValue = datasourceValue["type"];
                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                {
                                                    string typeInstance = ((string)typeValue);
                                                    blobOutputDataSourceInstance.Type = typeInstance;
                                                }
                                                propertiesInstance.DataSource = blobOutputDataSourceInstance;
                                            }
                                            if (typeName == "Microsoft.Storage/Table")
                                            {
                                                AzureTableOutputDataSource azureTableOutputDataSourceInstance = new AzureTableOutputDataSource();
                                                
                                                JToken propertiesValue3 = datasourceValue["properties"];
                                                if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                                {
                                                    AzureTableOutputDataSourceProperties propertiesInstance3 = new AzureTableOutputDataSourceProperties();
                                                    azureTableOutputDataSourceInstance.Properties = propertiesInstance3;
                                                    
                                                    JToken accountNameValue2 = propertiesValue3["accountName"];
                                                    if (accountNameValue2 != null && accountNameValue2.Type != JTokenType.Null)
                                                    {
                                                        string accountNameInstance2 = ((string)accountNameValue2);
                                                        propertiesInstance3.AccountName = accountNameInstance2;
                                                    }
                                                    
                                                    JToken accountKeyValue2 = propertiesValue3["accountKey"];
                                                    if (accountKeyValue2 != null && accountKeyValue2.Type != JTokenType.Null)
                                                    {
                                                        string accountKeyInstance2 = ((string)accountKeyValue2);
                                                        propertiesInstance3.AccountKey = accountKeyInstance2;
                                                    }
                                                    
                                                    JToken tableValue = propertiesValue3["table"];
                                                    if (tableValue != null && tableValue.Type != JTokenType.Null)
                                                    {
                                                        string tableInstance = ((string)tableValue);
                                                        propertiesInstance3.Table = tableInstance;
                                                    }
                                                    
                                                    JToken partitionKeyValue = propertiesValue3["partitionKey"];
                                                    if (partitionKeyValue != null && partitionKeyValue.Type != JTokenType.Null)
                                                    {
                                                        string partitionKeyInstance = ((string)partitionKeyValue);
                                                        propertiesInstance3.PartitionKey = partitionKeyInstance;
                                                    }
                                                    
                                                    JToken rowKeyValue = propertiesValue3["rowKey"];
                                                    if (rowKeyValue != null && rowKeyValue.Type != JTokenType.Null)
                                                    {
                                                        string rowKeyInstance = ((string)rowKeyValue);
                                                        propertiesInstance3.RowKey = rowKeyInstance;
                                                    }
                                                    
                                                    JToken columnsToRemoveArray = propertiesValue3["columnsToRemove"];
                                                    if (columnsToRemoveArray != null && columnsToRemoveArray.Type != JTokenType.Null)
                                                    {
                                                        propertiesInstance3.ColumnsToRemove = new List<string>();
                                                        foreach (JToken columnsToRemoveValue in ((JArray)columnsToRemoveArray))
                                                        {
                                                            propertiesInstance3.ColumnsToRemove.Add(((string)columnsToRemoveValue));
                                                        }
                                                    }
                                                    
                                                    JToken batchSizeValue = propertiesValue3["batchSize"];
                                                    if (batchSizeValue != null && batchSizeValue.Type != JTokenType.Null)
                                                    {
                                                        int batchSizeInstance = ((int)batchSizeValue);
                                                        propertiesInstance3.BatchSize = batchSizeInstance;
                                                    }
                                                }
                                                
                                                JToken typeValue2 = datasourceValue["type"];
                                                if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                {
                                                    string typeInstance2 = ((string)typeValue2);
                                                    azureTableOutputDataSourceInstance.Type = typeInstance2;
                                                }
                                                propertiesInstance.DataSource = azureTableOutputDataSourceInstance;
                                            }
                                            if (typeName == "Microsoft.ServiceBus/EventHub")
                                            {
                                                EventHubOutputDataSource eventHubOutputDataSourceInstance = new EventHubOutputDataSource();
                                                
                                                JToken propertiesValue4 = datasourceValue["properties"];
                                                if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                                {
                                                    EventHubOutputDataSourceProperties propertiesInstance4 = new EventHubOutputDataSourceProperties();
                                                    eventHubOutputDataSourceInstance.Properties = propertiesInstance4;
                                                    
                                                    JToken serviceBusNamespaceValue = propertiesValue4["serviceBusNamespace"];
                                                    if (serviceBusNamespaceValue != null && serviceBusNamespaceValue.Type != JTokenType.Null)
                                                    {
                                                        string serviceBusNamespaceInstance = ((string)serviceBusNamespaceValue);
                                                        propertiesInstance4.ServiceBusNamespace = serviceBusNamespaceInstance;
                                                    }
                                                    
                                                    JToken sharedAccessPolicyNameValue = propertiesValue4["sharedAccessPolicyName"];
                                                    if (sharedAccessPolicyNameValue != null && sharedAccessPolicyNameValue.Type != JTokenType.Null)
                                                    {
                                                        string sharedAccessPolicyNameInstance = ((string)sharedAccessPolicyNameValue);
                                                        propertiesInstance4.SharedAccessPolicyName = sharedAccessPolicyNameInstance;
                                                    }
                                                    
                                                    JToken sharedAccessPolicyKeyValue = propertiesValue4["sharedAccessPolicyKey"];
                                                    if (sharedAccessPolicyKeyValue != null && sharedAccessPolicyKeyValue.Type != JTokenType.Null)
                                                    {
                                                        string sharedAccessPolicyKeyInstance = ((string)sharedAccessPolicyKeyValue);
                                                        propertiesInstance4.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance;
                                                    }
                                                    
                                                    JToken eventHubNameValue = propertiesValue4["eventHubName"];
                                                    if (eventHubNameValue != null && eventHubNameValue.Type != JTokenType.Null)
                                                    {
                                                        string eventHubNameInstance = ((string)eventHubNameValue);
                                                        propertiesInstance4.EventHubName = eventHubNameInstance;
                                                    }
                                                    
                                                    JToken partitionKeyValue2 = propertiesValue4["partitionKey"];
                                                    if (partitionKeyValue2 != null && partitionKeyValue2.Type != JTokenType.Null)
                                                    {
                                                        string partitionKeyInstance2 = ((string)partitionKeyValue2);
                                                        propertiesInstance4.PartitionKey = partitionKeyInstance2;
                                                    }
                                                }
                                                
                                                JToken typeValue3 = datasourceValue["type"];
                                                if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                                {
                                                    string typeInstance3 = ((string)typeValue3);
                                                    eventHubOutputDataSourceInstance.Type = typeInstance3;
                                                }
                                                propertiesInstance.DataSource = eventHubOutputDataSourceInstance;
                                            }
                                            if (typeName == "Microsoft.ServiceBus/Queue")
                                            {
                                                ServiceBusQueueOutputDataSource serviceBusQueueOutputDataSourceInstance = new ServiceBusQueueOutputDataSource();
                                                
                                                JToken propertiesValue5 = datasourceValue["properties"];
                                                if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                                                {
                                                    ServiceBusQueueOutputDataSourceProperties propertiesInstance5 = new ServiceBusQueueOutputDataSourceProperties();
                                                    serviceBusQueueOutputDataSourceInstance.Properties = propertiesInstance5;
                                                    
                                                    JToken serviceBusNamespaceValue2 = propertiesValue5["serviceBusNamespace"];
                                                    if (serviceBusNamespaceValue2 != null && serviceBusNamespaceValue2.Type != JTokenType.Null)
                                                    {
                                                        string serviceBusNamespaceInstance2 = ((string)serviceBusNamespaceValue2);
                                                        propertiesInstance5.ServiceBusNamespace = serviceBusNamespaceInstance2;
                                                    }
                                                    
                                                    JToken sharedAccessPolicyNameValue2 = propertiesValue5["sharedAccessPolicyName"];
                                                    if (sharedAccessPolicyNameValue2 != null && sharedAccessPolicyNameValue2.Type != JTokenType.Null)
                                                    {
                                                        string sharedAccessPolicyNameInstance2 = ((string)sharedAccessPolicyNameValue2);
                                                        propertiesInstance5.SharedAccessPolicyName = sharedAccessPolicyNameInstance2;
                                                    }
                                                    
                                                    JToken sharedAccessPolicyKeyValue2 = propertiesValue5["sharedAccessPolicyKey"];
                                                    if (sharedAccessPolicyKeyValue2 != null && sharedAccessPolicyKeyValue2.Type != JTokenType.Null)
                                                    {
                                                        string sharedAccessPolicyKeyInstance2 = ((string)sharedAccessPolicyKeyValue2);
                                                        propertiesInstance5.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance2;
                                                    }
                                                    
                                                    JToken queueNameValue = propertiesValue5["queueName"];
                                                    if (queueNameValue != null && queueNameValue.Type != JTokenType.Null)
                                                    {
                                                        string queueNameInstance = ((string)queueNameValue);
                                                        propertiesInstance5.QueueName = queueNameInstance;
                                                    }
                                                }
                                                
                                                JToken typeValue4 = datasourceValue["type"];
                                                if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                                {
                                                    string typeInstance4 = ((string)typeValue4);
                                                    serviceBusQueueOutputDataSourceInstance.Type = typeInstance4;
                                                }
                                                propertiesInstance.DataSource = serviceBusQueueOutputDataSourceInstance;
                                            }
                                            if (typeName == "Microsoft.ServiceBus/Topic")
                                            {
                                                ServiceBusTopicOutputDataSource serviceBusTopicOutputDataSourceInstance = new ServiceBusTopicOutputDataSource();
                                                
                                                JToken propertiesValue6 = datasourceValue["properties"];
                                                if (propertiesValue6 != null && propertiesValue6.Type != JTokenType.Null)
                                                {
                                                    ServiceBusTopicOutputDataSourceProperties propertiesInstance6 = new ServiceBusTopicOutputDataSourceProperties();
                                                    serviceBusTopicOutputDataSourceInstance.Properties = propertiesInstance6;
                                                    
                                                    JToken serviceBusNamespaceValue3 = propertiesValue6["serviceBusNamespace"];
                                                    if (serviceBusNamespaceValue3 != null && serviceBusNamespaceValue3.Type != JTokenType.Null)
                                                    {
                                                        string serviceBusNamespaceInstance3 = ((string)serviceBusNamespaceValue3);
                                                        propertiesInstance6.ServiceBusNamespace = serviceBusNamespaceInstance3;
                                                    }
                                                    
                                                    JToken sharedAccessPolicyNameValue3 = propertiesValue6["sharedAccessPolicyName"];
                                                    if (sharedAccessPolicyNameValue3 != null && sharedAccessPolicyNameValue3.Type != JTokenType.Null)
                                                    {
                                                        string sharedAccessPolicyNameInstance3 = ((string)sharedAccessPolicyNameValue3);
                                                        propertiesInstance6.SharedAccessPolicyName = sharedAccessPolicyNameInstance3;
                                                    }
                                                    
                                                    JToken sharedAccessPolicyKeyValue3 = propertiesValue6["sharedAccessPolicyKey"];
                                                    if (sharedAccessPolicyKeyValue3 != null && sharedAccessPolicyKeyValue3.Type != JTokenType.Null)
                                                    {
                                                        string sharedAccessPolicyKeyInstance3 = ((string)sharedAccessPolicyKeyValue3);
                                                        propertiesInstance6.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance3;
                                                    }
                                                    
                                                    JToken topicNameValue = propertiesValue6["topicName"];
                                                    if (topicNameValue != null && topicNameValue.Type != JTokenType.Null)
                                                    {
                                                        string topicNameInstance = ((string)topicNameValue);
                                                        propertiesInstance6.TopicName = topicNameInstance;
                                                    }
                                                }
                                                
                                                JToken typeValue5 = datasourceValue["type"];
                                                if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                                {
                                                    string typeInstance5 = ((string)typeValue5);
                                                    serviceBusTopicOutputDataSourceInstance.Type = typeInstance5;
                                                }
                                                propertiesInstance.DataSource = serviceBusTopicOutputDataSourceInstance;
                                            }
                                            if (typeName == "Microsoft.Sql/Server/Database")
                                            {
                                                SqlAzureOutputDataSource sqlAzureOutputDataSourceInstance = new SqlAzureOutputDataSource();
                                                
                                                JToken propertiesValue7 = datasourceValue["properties"];
                                                if (propertiesValue7 != null && propertiesValue7.Type != JTokenType.Null)
                                                {
                                                    SqlAzureOutputDataSourceProperties propertiesInstance7 = new SqlAzureOutputDataSourceProperties();
                                                    sqlAzureOutputDataSourceInstance.Properties = propertiesInstance7;
                                                    
                                                    JToken serverValue = propertiesValue7["server"];
                                                    if (serverValue != null && serverValue.Type != JTokenType.Null)
                                                    {
                                                        string serverInstance = ((string)serverValue);
                                                        propertiesInstance7.Server = serverInstance;
                                                    }
                                                    
                                                    JToken databaseValue = propertiesValue7["database"];
                                                    if (databaseValue != null && databaseValue.Type != JTokenType.Null)
                                                    {
                                                        string databaseInstance = ((string)databaseValue);
                                                        propertiesInstance7.Database = databaseInstance;
                                                    }
                                                    
                                                    JToken userValue = propertiesValue7["user"];
                                                    if (userValue != null && userValue.Type != JTokenType.Null)
                                                    {
                                                        string userInstance = ((string)userValue);
                                                        propertiesInstance7.User = userInstance;
                                                    }
                                                    
                                                    JToken passwordValue = propertiesValue7["password"];
                                                    if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                                    {
                                                        string passwordInstance = ((string)passwordValue);
                                                        propertiesInstance7.Password = passwordInstance;
                                                    }
                                                    
                                                    JToken tableValue2 = propertiesValue7["table"];
                                                    if (tableValue2 != null && tableValue2.Type != JTokenType.Null)
                                                    {
                                                        string tableInstance2 = ((string)tableValue2);
                                                        propertiesInstance7.Table = tableInstance2;
                                                    }
                                                }
                                                
                                                JToken typeValue6 = datasourceValue["type"];
                                                if (typeValue6 != null && typeValue6.Type != JTokenType.Null)
                                                {
                                                    string typeInstance6 = ((string)typeValue6);
                                                    sqlAzureOutputDataSourceInstance.Type = typeInstance6;
                                                }
                                                propertiesInstance.DataSource = sqlAzureOutputDataSourceInstance;
                                            }
                                            if (typeName == "Microsoft.Storage/DocumentDB")
                                            {
                                                DocumentDbOutputDataSource documentDbOutputDataSourceInstance = new DocumentDbOutputDataSource();
                                                
                                                JToken propertiesValue8 = datasourceValue["properties"];
                                                if (propertiesValue8 != null && propertiesValue8.Type != JTokenType.Null)
                                                {
                                                    DocumentDbOutputDataSourceProperties propertiesInstance8 = new DocumentDbOutputDataSourceProperties();
                                                    documentDbOutputDataSourceInstance.Properties = propertiesInstance8;
                                                    
                                                    JToken accountIdValue = propertiesValue8["accountId"];
                                                    if (accountIdValue != null && accountIdValue.Type != JTokenType.Null)
                                                    {
                                                        string accountIdInstance = ((string)accountIdValue);
                                                        propertiesInstance8.AccountId = accountIdInstance;
                                                    }
                                                    
                                                    JToken accountKeyValue3 = propertiesValue8["accountKey"];
                                                    if (accountKeyValue3 != null && accountKeyValue3.Type != JTokenType.Null)
                                                    {
                                                        string accountKeyInstance3 = ((string)accountKeyValue3);
                                                        propertiesInstance8.AccountKey = accountKeyInstance3;
                                                    }
                                                    
                                                    JToken databaseValue2 = propertiesValue8["database"];
                                                    if (databaseValue2 != null && databaseValue2.Type != JTokenType.Null)
                                                    {
                                                        string databaseInstance2 = ((string)databaseValue2);
                                                        propertiesInstance8.Database = databaseInstance2;
                                                    }
                                                    
                                                    JToken collectionNamePatternValue = propertiesValue8["collectionNamePattern"];
                                                    if (collectionNamePatternValue != null && collectionNamePatternValue.Type != JTokenType.Null)
                                                    {
                                                        string collectionNamePatternInstance = ((string)collectionNamePatternValue);
                                                        propertiesInstance8.CollectionNamePattern = collectionNamePatternInstance;
                                                    }
                                                    
                                                    JToken partitionKeyValue3 = propertiesValue8["partitionKey"];
                                                    if (partitionKeyValue3 != null && partitionKeyValue3.Type != JTokenType.Null)
                                                    {
                                                        string partitionKeyInstance3 = ((string)partitionKeyValue3);
                                                        propertiesInstance8.PartitionKey = partitionKeyInstance3;
                                                    }
                                                    
                                                    JToken documentIdValue = propertiesValue8["documentId"];
                                                    if (documentIdValue != null && documentIdValue.Type != JTokenType.Null)
                                                    {
                                                        string documentIdInstance = ((string)documentIdValue);
                                                        propertiesInstance8.DocumentId = documentIdInstance;
                                                    }
                                                }
                                                
                                                JToken typeValue7 = datasourceValue["type"];
                                                if (typeValue7 != null && typeValue7.Type != JTokenType.Null)
                                                {
                                                    string typeInstance7 = ((string)typeValue7);
                                                    documentDbOutputDataSourceInstance.Type = typeInstance7;
                                                }
                                                propertiesInstance.DataSource = documentDbOutputDataSourceInstance;
                                            }
                                        }
                                        
                                        JToken serializationValue = propertiesValue["serialization"];
                                        if (serializationValue != null && serializationValue.Type != JTokenType.Null)
                                        {
                                            string typeName2 = ((string)serializationValue["type"]);
                                            if (typeName2 == "Csv")
                                            {
                                                CsvSerialization csvSerializationInstance = new CsvSerialization();
                                                
                                                JToken propertiesValue9 = serializationValue["properties"];
                                                if (propertiesValue9 != null && propertiesValue9.Type != JTokenType.Null)
                                                {
                                                    CsvSerializationProperties propertiesInstance9 = new CsvSerializationProperties();
                                                    csvSerializationInstance.Properties = propertiesInstance9;
                                                    
                                                    JToken fieldDelimiterValue = propertiesValue9["fieldDelimiter"];
                                                    if (fieldDelimiterValue != null && fieldDelimiterValue.Type != JTokenType.Null)
                                                    {
                                                        string fieldDelimiterInstance = ((string)fieldDelimiterValue);
                                                        propertiesInstance9.FieldDelimiter = fieldDelimiterInstance;
                                                    }
                                                    
                                                    JToken encodingValue = propertiesValue9["encoding"];
                                                    if (encodingValue != null && encodingValue.Type != JTokenType.Null)
                                                    {
                                                        string encodingInstance = ((string)encodingValue);
                                                        propertiesInstance9.Encoding = encodingInstance;
                                                    }
                                                }
                                                
                                                JToken typeValue8 = serializationValue["type"];
                                                if (typeValue8 != null && typeValue8.Type != JTokenType.Null)
                                                {
                                                    string typeInstance8 = ((string)typeValue8);
                                                    csvSerializationInstance.Type = typeInstance8;
                                                }
                                                propertiesInstance.Serialization = csvSerializationInstance;
                                            }
                                            if (typeName2 == "Json")
                                            {
                                                JsonSerialization jsonSerializationInstance = new JsonSerialization();
                                                
                                                JToken propertiesValue10 = serializationValue["properties"];
                                                if (propertiesValue10 != null && propertiesValue10.Type != JTokenType.Null)
                                                {
                                                    JsonSerializationProperties propertiesInstance10 = new JsonSerializationProperties();
                                                    jsonSerializationInstance.Properties = propertiesInstance10;
                                                    
                                                    JToken encodingValue2 = propertiesValue10["encoding"];
                                                    if (encodingValue2 != null && encodingValue2.Type != JTokenType.Null)
                                                    {
                                                        string encodingInstance2 = ((string)encodingValue2);
                                                        propertiesInstance10.Encoding = encodingInstance2;
                                                    }
                                                    
                                                    JToken formatValue = propertiesValue10["format"];
                                                    if (formatValue != null && formatValue.Type != JTokenType.Null)
                                                    {
                                                        string formatInstance = ((string)formatValue);
                                                        propertiesInstance10.Format = formatInstance;
                                                    }
                                                }
                                                
                                                JToken typeValue9 = serializationValue["type"];
                                                if (typeValue9 != null && typeValue9.Type != JTokenType.Null)
                                                {
                                                    string typeInstance9 = ((string)typeValue9);
                                                    jsonSerializationInstance.Type = typeInstance9;
                                                }
                                                propertiesInstance.Serialization = jsonSerializationInstance;
                                            }
                                            if (typeName2 == "Avro")
                                            {
                                                AvroSerialization avroSerializationInstance = new AvroSerialization();
                                                
                                                JToken propertiesValue11 = serializationValue["properties"];
                                                if (propertiesValue11 != null && propertiesValue11.Type != JTokenType.Null)
                                                {
                                                    AvroSerializationProperties propertiesInstance11 = new AvroSerializationProperties();
                                                    avroSerializationInstance.Properties = propertiesInstance11;
                                                }
                                                
                                                JToken typeValue10 = serializationValue["type"];
                                                if (typeValue10 != null && typeValue10.Type != JTokenType.Null)
                                                {
                                                    string typeInstance10 = ((string)typeValue10);
                                                    avroSerializationInstance.Type = typeInstance10;
                                                }
                                                propertiesInstance.Serialization = avroSerializationInstance;
                                            }
                                        }
                                        
                                        JToken diagnosticsValue = propertiesValue["diagnostics"];
                                        if (diagnosticsValue != null && diagnosticsValue.Type != JTokenType.Null)
                                        {
                                            Diagnostics diagnosticsInstance = new Diagnostics();
                                            propertiesInstance.Diagnostics = diagnosticsInstance;
                                            
                                            JToken conditionsArray = diagnosticsValue["conditions"];
                                            if (conditionsArray != null && conditionsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken conditionsValue in ((JArray)conditionsArray))
                                                {
                                                    DiagnosticCondition diagnosticConditionInstance = new DiagnosticCondition();
                                                    diagnosticsInstance.Conditions.Add(diagnosticConditionInstance);
                                                    
                                                    JToken sinceValue = conditionsValue["since"];
                                                    if (sinceValue != null && sinceValue.Type != JTokenType.Null)
                                                    {
                                                        DateTime sinceInstance = ((DateTime)sinceValue);
                                                        diagnosticConditionInstance.Since = sinceInstance;
                                                    }
                                                    
                                                    JToken codeValue = conditionsValue["code"];
                                                    if (codeValue != null && codeValue.Type != JTokenType.Null)
                                                    {
                                                        string codeInstance = ((string)codeValue);
                                                        diagnosticConditionInstance.Code = codeInstance;
                                                    }
                                                    
                                                    JToken messageValue = conditionsValue["message"];
                                                    if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance = ((string)messageValue);
                                                        diagnosticConditionInstance.Message = messageInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update an output for a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='outputName'>
        /// Required. The name of the output for the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update an output for
        /// a stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the output patch operation.
        /// </returns>
        public async Task<OutputPatchResponse> PatchAsync(string resourceGroupName, string jobName, string outputName, OutputPatchParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (outputName == null)
            {
                throw new ArgumentNullException("outputName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Properties == null)
            {
                throw new ArgumentNullException("parameters.Properties");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("outputName", outputName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "PatchAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.StreamAnalytics/streamingjobs/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/outputs/";
            url = url + Uri.EscapeDataString(outputName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject outputPatchParametersValue = new JObject();
                requestDoc = outputPatchParametersValue;
                
                JObject propertiesValue = new JObject();
                outputPatchParametersValue["properties"] = propertiesValue;
                
                if (parameters.Properties.Etag != null)
                {
                    propertiesValue["etag"] = parameters.Properties.Etag;
                }
                
                if (parameters.Properties.DataSource != null)
                {
                    JObject datasourceValue = new JObject();
                    propertiesValue["datasource"] = datasourceValue;
                    if (parameters.Properties.DataSource is BlobOutputDataSource)
                    {
                        datasourceValue["type"] = "Microsoft.Storage/Blob";
                        BlobOutputDataSource derived = ((BlobOutputDataSource)parameters.Properties.DataSource);
                        
                        if (derived.Properties != null)
                        {
                            JObject propertiesValue2 = new JObject();
                            datasourceValue["properties"] = propertiesValue2;
                            
                            if (derived.Properties.StorageAccounts != null)
                            {
                                JArray storageAccountsArray = new JArray();
                                foreach (StorageAccount storageAccountsItem in derived.Properties.StorageAccounts)
                                {
                                    JObject storageAccountValue = new JObject();
                                    storageAccountsArray.Add(storageAccountValue);
                                    
                                    if (storageAccountsItem.AccountName != null)
                                    {
                                        storageAccountValue["accountName"] = storageAccountsItem.AccountName;
                                    }
                                    
                                    if (storageAccountsItem.AccountKey != null)
                                    {
                                        storageAccountValue["accountKey"] = storageAccountsItem.AccountKey;
                                    }
                                }
                                propertiesValue2["storageAccounts"] = storageAccountsArray;
                            }
                            
                            if (derived.Properties.Container != null)
                            {
                                propertiesValue2["container"] = derived.Properties.Container;
                            }
                            
                            if (derived.Properties.PathPattern != null)
                            {
                                propertiesValue2["pathPattern"] = derived.Properties.PathPattern;
                            }
                            
                            if (derived.Properties.DateFormat != null)
                            {
                                propertiesValue2["dateFormat"] = derived.Properties.DateFormat;
                            }
                            
                            if (derived.Properties.TimeFormat != null)
                            {
                                propertiesValue2["timeFormat"] = derived.Properties.TimeFormat;
                            }
                        }
                        
                        if (derived.Type != null)
                        {
                            datasourceValue["type"] = derived.Type;
                        }
                    }
                    if (parameters.Properties.DataSource is AzureTableOutputDataSource)
                    {
                        datasourceValue["type"] = "Microsoft.Storage/Table";
                        AzureTableOutputDataSource derived2 = ((AzureTableOutputDataSource)parameters.Properties.DataSource);
                        
                        if (derived2.Properties != null)
                        {
                            JObject propertiesValue3 = new JObject();
                            datasourceValue["properties"] = propertiesValue3;
                            
                            if (derived2.Properties.AccountName != null)
                            {
                                propertiesValue3["accountName"] = derived2.Properties.AccountName;
                            }
                            
                            if (derived2.Properties.AccountKey != null)
                            {
                                propertiesValue3["accountKey"] = derived2.Properties.AccountKey;
                            }
                            
                            if (derived2.Properties.Table != null)
                            {
                                propertiesValue3["table"] = derived2.Properties.Table;
                            }
                            
                            if (derived2.Properties.PartitionKey != null)
                            {
                                propertiesValue3["partitionKey"] = derived2.Properties.PartitionKey;
                            }
                            
                            if (derived2.Properties.RowKey != null)
                            {
                                propertiesValue3["rowKey"] = derived2.Properties.RowKey;
                            }
                            
                            if (derived2.Properties.ColumnsToRemove != null)
                            {
                                JArray columnsToRemoveArray = new JArray();
                                foreach (string columnsToRemoveItem in derived2.Properties.ColumnsToRemove)
                                {
                                    columnsToRemoveArray.Add(columnsToRemoveItem);
                                }
                                propertiesValue3["columnsToRemove"] = columnsToRemoveArray;
                            }
                            
                            if (derived2.Properties.BatchSize != null)
                            {
                                propertiesValue3["batchSize"] = derived2.Properties.BatchSize.Value;
                            }
                        }
                        
                        if (derived2.Type != null)
                        {
                            datasourceValue["type"] = derived2.Type;
                        }
                    }
                    if (parameters.Properties.DataSource is EventHubOutputDataSource)
                    {
                        datasourceValue["type"] = "Microsoft.ServiceBus/EventHub";
                        EventHubOutputDataSource derived3 = ((EventHubOutputDataSource)parameters.Properties.DataSource);
                        
                        if (derived3.Properties != null)
                        {
                            JObject propertiesValue4 = new JObject();
                            datasourceValue["properties"] = propertiesValue4;
                            
                            if (derived3.Properties.ServiceBusNamespace != null)
                            {
                                propertiesValue4["serviceBusNamespace"] = derived3.Properties.ServiceBusNamespace;
                            }
                            
                            if (derived3.Properties.SharedAccessPolicyName != null)
                            {
                                propertiesValue4["sharedAccessPolicyName"] = derived3.Properties.SharedAccessPolicyName;
                            }
                            
                            if (derived3.Properties.SharedAccessPolicyKey != null)
                            {
                                propertiesValue4["sharedAccessPolicyKey"] = derived3.Properties.SharedAccessPolicyKey;
                            }
                            
                            if (derived3.Properties.EventHubName != null)
                            {
                                propertiesValue4["eventHubName"] = derived3.Properties.EventHubName;
                            }
                            
                            if (derived3.Properties.PartitionKey != null)
                            {
                                propertiesValue4["partitionKey"] = derived3.Properties.PartitionKey;
                            }
                        }
                        
                        if (derived3.Type != null)
                        {
                            datasourceValue["type"] = derived3.Type;
                        }
                    }
                    if (parameters.Properties.DataSource is ServiceBusQueueOutputDataSource)
                    {
                        datasourceValue["type"] = "Microsoft.ServiceBus/Queue";
                        ServiceBusQueueOutputDataSource derived4 = ((ServiceBusQueueOutputDataSource)parameters.Properties.DataSource);
                        
                        if (derived4.Properties != null)
                        {
                            JObject propertiesValue5 = new JObject();
                            datasourceValue["properties"] = propertiesValue5;
                            
                            if (derived4.Properties.ServiceBusNamespace != null)
                            {
                                propertiesValue5["serviceBusNamespace"] = derived4.Properties.ServiceBusNamespace;
                            }
                            
                            if (derived4.Properties.SharedAccessPolicyName != null)
                            {
                                propertiesValue5["sharedAccessPolicyName"] = derived4.Properties.SharedAccessPolicyName;
                            }
                            
                            if (derived4.Properties.SharedAccessPolicyKey != null)
                            {
                                propertiesValue5["sharedAccessPolicyKey"] = derived4.Properties.SharedAccessPolicyKey;
                            }
                            
                            if (derived4.Properties.QueueName != null)
                            {
                                propertiesValue5["queueName"] = derived4.Properties.QueueName;
                            }
                        }
                        
                        if (derived4.Type != null)
                        {
                            datasourceValue["type"] = derived4.Type;
                        }
                    }
                    if (parameters.Properties.DataSource is ServiceBusTopicOutputDataSource)
                    {
                        datasourceValue["type"] = "Microsoft.ServiceBus/Topic";
                        ServiceBusTopicOutputDataSource derived5 = ((ServiceBusTopicOutputDataSource)parameters.Properties.DataSource);
                        
                        if (derived5.Properties != null)
                        {
                            JObject propertiesValue6 = new JObject();
                            datasourceValue["properties"] = propertiesValue6;
                            
                            if (derived5.Properties.ServiceBusNamespace != null)
                            {
                                propertiesValue6["serviceBusNamespace"] = derived5.Properties.ServiceBusNamespace;
                            }
                            
                            if (derived5.Properties.SharedAccessPolicyName != null)
                            {
                                propertiesValue6["sharedAccessPolicyName"] = derived5.Properties.SharedAccessPolicyName;
                            }
                            
                            if (derived5.Properties.SharedAccessPolicyKey != null)
                            {
                                propertiesValue6["sharedAccessPolicyKey"] = derived5.Properties.SharedAccessPolicyKey;
                            }
                            
                            if (derived5.Properties.TopicName != null)
                            {
                                propertiesValue6["topicName"] = derived5.Properties.TopicName;
                            }
                        }
                        
                        if (derived5.Type != null)
                        {
                            datasourceValue["type"] = derived5.Type;
                        }
                    }
                    if (parameters.Properties.DataSource is SqlAzureOutputDataSource)
                    {
                        datasourceValue["type"] = "Microsoft.Sql/Server/Database";
                        SqlAzureOutputDataSource derived6 = ((SqlAzureOutputDataSource)parameters.Properties.DataSource);
                        
                        if (derived6.Properties != null)
                        {
                            JObject propertiesValue7 = new JObject();
                            datasourceValue["properties"] = propertiesValue7;
                            
                            if (derived6.Properties.Server != null)
                            {
                                propertiesValue7["server"] = derived6.Properties.Server;
                            }
                            
                            if (derived6.Properties.Database != null)
                            {
                                propertiesValue7["database"] = derived6.Properties.Database;
                            }
                            
                            if (derived6.Properties.User != null)
                            {
                                propertiesValue7["user"] = derived6.Properties.User;
                            }
                            
                            if (derived6.Properties.Password != null)
                            {
                                propertiesValue7["password"] = derived6.Properties.Password;
                            }
                            
                            if (derived6.Properties.Table != null)
                            {
                                propertiesValue7["table"] = derived6.Properties.Table;
                            }
                        }
                        
                        if (derived6.Type != null)
                        {
                            datasourceValue["type"] = derived6.Type;
                        }
                    }
                    if (parameters.Properties.DataSource is DocumentDbOutputDataSource)
                    {
                        datasourceValue["type"] = "Microsoft.Storage/DocumentDB";
                        DocumentDbOutputDataSource derived7 = ((DocumentDbOutputDataSource)parameters.Properties.DataSource);
                        
                        if (derived7.Properties != null)
                        {
                            JObject propertiesValue8 = new JObject();
                            datasourceValue["properties"] = propertiesValue8;
                            
                            if (derived7.Properties.AccountId != null)
                            {
                                propertiesValue8["accountId"] = derived7.Properties.AccountId;
                            }
                            
                            if (derived7.Properties.AccountKey != null)
                            {
                                propertiesValue8["accountKey"] = derived7.Properties.AccountKey;
                            }
                            
                            if (derived7.Properties.Database != null)
                            {
                                propertiesValue8["database"] = derived7.Properties.Database;
                            }
                            
                            if (derived7.Properties.CollectionNamePattern != null)
                            {
                                propertiesValue8["collectionNamePattern"] = derived7.Properties.CollectionNamePattern;
                            }
                            
                            if (derived7.Properties.PartitionKey != null)
                            {
                                propertiesValue8["partitionKey"] = derived7.Properties.PartitionKey;
                            }
                            
                            if (derived7.Properties.DocumentId != null)
                            {
                                propertiesValue8["documentId"] = derived7.Properties.DocumentId;
                            }
                        }
                        
                        if (derived7.Type != null)
                        {
                            datasourceValue["type"] = derived7.Type;
                        }
                    }
                }
                
                if (parameters.Properties.Serialization != null)
                {
                    JObject serializationValue = new JObject();
                    propertiesValue["serialization"] = serializationValue;
                    if (parameters.Properties.Serialization is CsvSerialization)
                    {
                        serializationValue["type"] = "Csv";
                        CsvSerialization derived8 = ((CsvSerialization)parameters.Properties.Serialization);
                        
                        if (derived8.Properties != null)
                        {
                            JObject propertiesValue9 = new JObject();
                            serializationValue["properties"] = propertiesValue9;
                            
                            if (derived8.Properties.FieldDelimiter != null)
                            {
                                propertiesValue9["fieldDelimiter"] = derived8.Properties.FieldDelimiter;
                            }
                            
                            if (derived8.Properties.Encoding != null)
                            {
                                propertiesValue9["encoding"] = derived8.Properties.Encoding;
                            }
                        }
                        
                        if (derived8.Type != null)
                        {
                            serializationValue["type"] = derived8.Type;
                        }
                    }
                    if (parameters.Properties.Serialization is JsonSerialization)
                    {
                        serializationValue["type"] = "Json";
                        JsonSerialization derived9 = ((JsonSerialization)parameters.Properties.Serialization);
                        
                        if (derived9.Properties != null)
                        {
                            JObject propertiesValue10 = new JObject();
                            serializationValue["properties"] = propertiesValue10;
                            
                            if (derived9.Properties.Encoding != null)
                            {
                                propertiesValue10["encoding"] = derived9.Properties.Encoding;
                            }
                            
                            if (derived9.Properties.Format != null)
                            {
                                propertiesValue10["format"] = derived9.Properties.Format;
                            }
                        }
                        
                        if (derived9.Type != null)
                        {
                            serializationValue["type"] = derived9.Type;
                        }
                    }
                    if (parameters.Properties.Serialization is AvroSerialization)
                    {
                        serializationValue["type"] = "Avro";
                        AvroSerialization derived10 = ((AvroSerialization)parameters.Properties.Serialization);
                        
                        if (derived10.Properties != null)
                        {
                            serializationValue["properties"] = derived10.Properties.ToString();
                        }
                        
                        if (derived10.Type != null)
                        {
                            serializationValue["type"] = derived10.Type;
                        }
                    }
                }
                
                if (parameters.Properties.Diagnostics != null)
                {
                    JObject diagnosticsValue = new JObject();
                    propertiesValue["diagnostics"] = diagnosticsValue;
                    
                    if (parameters.Properties.Diagnostics.Conditions != null)
                    {
                        if (parameters.Properties.Diagnostics.Conditions is ILazyCollection == false || ((ILazyCollection)parameters.Properties.Diagnostics.Conditions).IsInitialized)
                        {
                            JArray conditionsArray = new JArray();
                            foreach (DiagnosticCondition conditionsItem in parameters.Properties.Diagnostics.Conditions)
                            {
                                JObject diagnosticConditionValue = new JObject();
                                conditionsArray.Add(diagnosticConditionValue);
                                
                                if (conditionsItem.Since != null)
                                {
                                    diagnosticConditionValue["since"] = conditionsItem.Since.Value;
                                }
                                
                                if (conditionsItem.Code != null)
                                {
                                    diagnosticConditionValue["code"] = conditionsItem.Code;
                                }
                                
                                if (conditionsItem.Message != null)
                                {
                                    diagnosticConditionValue["message"] = conditionsItem.Message;
                                }
                            }
                            diagnosticsValue["conditions"] = conditionsArray;
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OutputPatchResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new OutputPatchResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken propertiesValue11 = responseDoc["properties"];
                            if (propertiesValue11 != null && propertiesValue11.Type != JTokenType.Null)
                            {
                                OutputProperties propertiesInstance = new OutputProperties();
                                result.Properties = propertiesInstance;
                                
                                JToken etagValue = propertiesValue11["etag"];
                                if (etagValue != null && etagValue.Type != JTokenType.Null)
                                {
                                    string etagInstance = ((string)etagValue);
                                    propertiesInstance.Etag = etagInstance;
                                }
                                
                                JToken datasourceValue2 = propertiesValue11["datasource"];
                                if (datasourceValue2 != null && datasourceValue2.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)datasourceValue2["type"]);
                                    if (typeName == "Microsoft.Storage/Blob")
                                    {
                                        BlobOutputDataSource blobOutputDataSourceInstance = new BlobOutputDataSource();
                                        
                                        JToken propertiesValue12 = datasourceValue2["properties"];
                                        if (propertiesValue12 != null && propertiesValue12.Type != JTokenType.Null)
                                        {
                                            BlobOutputDataSourceProperties propertiesInstance2 = new BlobOutputDataSourceProperties();
                                            blobOutputDataSourceInstance.Properties = propertiesInstance2;
                                            
                                            JToken storageAccountsArray2 = propertiesValue12["storageAccounts"];
                                            if (storageAccountsArray2 != null && storageAccountsArray2.Type != JTokenType.Null)
                                            {
                                                propertiesInstance2.StorageAccounts = new List<StorageAccount>();
                                                foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray2))
                                                {
                                                    StorageAccount storageAccountInstance = new StorageAccount();
                                                    propertiesInstance2.StorageAccounts.Add(storageAccountInstance);
                                                    
                                                    JToken accountNameValue = storageAccountsValue["accountName"];
                                                    if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                    {
                                                        string accountNameInstance = ((string)accountNameValue);
                                                        storageAccountInstance.AccountName = accountNameInstance;
                                                    }
                                                    
                                                    JToken accountKeyValue = storageAccountsValue["accountKey"];
                                                    if (accountKeyValue != null && accountKeyValue.Type != JTokenType.Null)
                                                    {
                                                        string accountKeyInstance = ((string)accountKeyValue);
                                                        storageAccountInstance.AccountKey = accountKeyInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken containerValue = propertiesValue12["container"];
                                            if (containerValue != null && containerValue.Type != JTokenType.Null)
                                            {
                                                string containerInstance = ((string)containerValue);
                                                propertiesInstance2.Container = containerInstance;
                                            }
                                            
                                            JToken pathPatternValue = propertiesValue12["pathPattern"];
                                            if (pathPatternValue != null && pathPatternValue.Type != JTokenType.Null)
                                            {
                                                string pathPatternInstance = ((string)pathPatternValue);
                                                propertiesInstance2.PathPattern = pathPatternInstance;
                                            }
                                            
                                            JToken dateFormatValue = propertiesValue12["dateFormat"];
                                            if (dateFormatValue != null && dateFormatValue.Type != JTokenType.Null)
                                            {
                                                string dateFormatInstance = ((string)dateFormatValue);
                                                propertiesInstance2.DateFormat = dateFormatInstance;
                                            }
                                            
                                            JToken timeFormatValue = propertiesValue12["timeFormat"];
                                            if (timeFormatValue != null && timeFormatValue.Type != JTokenType.Null)
                                            {
                                                string timeFormatInstance = ((string)timeFormatValue);
                                                propertiesInstance2.TimeFormat = timeFormatInstance;
                                            }
                                        }
                                        
                                        JToken typeValue = datasourceValue2["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            blobOutputDataSourceInstance.Type = typeInstance;
                                        }
                                        propertiesInstance.DataSource = blobOutputDataSourceInstance;
                                    }
                                    if (typeName == "Microsoft.Storage/Table")
                                    {
                                        AzureTableOutputDataSource azureTableOutputDataSourceInstance = new AzureTableOutputDataSource();
                                        
                                        JToken propertiesValue13 = datasourceValue2["properties"];
                                        if (propertiesValue13 != null && propertiesValue13.Type != JTokenType.Null)
                                        {
                                            AzureTableOutputDataSourceProperties propertiesInstance3 = new AzureTableOutputDataSourceProperties();
                                            azureTableOutputDataSourceInstance.Properties = propertiesInstance3;
                                            
                                            JToken accountNameValue2 = propertiesValue13["accountName"];
                                            if (accountNameValue2 != null && accountNameValue2.Type != JTokenType.Null)
                                            {
                                                string accountNameInstance2 = ((string)accountNameValue2);
                                                propertiesInstance3.AccountName = accountNameInstance2;
                                            }
                                            
                                            JToken accountKeyValue2 = propertiesValue13["accountKey"];
                                            if (accountKeyValue2 != null && accountKeyValue2.Type != JTokenType.Null)
                                            {
                                                string accountKeyInstance2 = ((string)accountKeyValue2);
                                                propertiesInstance3.AccountKey = accountKeyInstance2;
                                            }
                                            
                                            JToken tableValue = propertiesValue13["table"];
                                            if (tableValue != null && tableValue.Type != JTokenType.Null)
                                            {
                                                string tableInstance = ((string)tableValue);
                                                propertiesInstance3.Table = tableInstance;
                                            }
                                            
                                            JToken partitionKeyValue = propertiesValue13["partitionKey"];
                                            if (partitionKeyValue != null && partitionKeyValue.Type != JTokenType.Null)
                                            {
                                                string partitionKeyInstance = ((string)partitionKeyValue);
                                                propertiesInstance3.PartitionKey = partitionKeyInstance;
                                            }
                                            
                                            JToken rowKeyValue = propertiesValue13["rowKey"];
                                            if (rowKeyValue != null && rowKeyValue.Type != JTokenType.Null)
                                            {
                                                string rowKeyInstance = ((string)rowKeyValue);
                                                propertiesInstance3.RowKey = rowKeyInstance;
                                            }
                                            
                                            JToken columnsToRemoveArray2 = propertiesValue13["columnsToRemove"];
                                            if (columnsToRemoveArray2 != null && columnsToRemoveArray2.Type != JTokenType.Null)
                                            {
                                                propertiesInstance3.ColumnsToRemove = new List<string>();
                                                foreach (JToken columnsToRemoveValue in ((JArray)columnsToRemoveArray2))
                                                {
                                                    propertiesInstance3.ColumnsToRemove.Add(((string)columnsToRemoveValue));
                                                }
                                            }
                                            
                                            JToken batchSizeValue = propertiesValue13["batchSize"];
                                            if (batchSizeValue != null && batchSizeValue.Type != JTokenType.Null)
                                            {
                                                int batchSizeInstance = ((int)batchSizeValue);
                                                propertiesInstance3.BatchSize = batchSizeInstance;
                                            }
                                        }
                                        
                                        JToken typeValue2 = datasourceValue2["type"];
                                        if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                        {
                                            string typeInstance2 = ((string)typeValue2);
                                            azureTableOutputDataSourceInstance.Type = typeInstance2;
                                        }
                                        propertiesInstance.DataSource = azureTableOutputDataSourceInstance;
                                    }
                                    if (typeName == "Microsoft.ServiceBus/EventHub")
                                    {
                                        EventHubOutputDataSource eventHubOutputDataSourceInstance = new EventHubOutputDataSource();
                                        
                                        JToken propertiesValue14 = datasourceValue2["properties"];
                                        if (propertiesValue14 != null && propertiesValue14.Type != JTokenType.Null)
                                        {
                                            EventHubOutputDataSourceProperties propertiesInstance4 = new EventHubOutputDataSourceProperties();
                                            eventHubOutputDataSourceInstance.Properties = propertiesInstance4;
                                            
                                            JToken serviceBusNamespaceValue = propertiesValue14["serviceBusNamespace"];
                                            if (serviceBusNamespaceValue != null && serviceBusNamespaceValue.Type != JTokenType.Null)
                                            {
                                                string serviceBusNamespaceInstance = ((string)serviceBusNamespaceValue);
                                                propertiesInstance4.ServiceBusNamespace = serviceBusNamespaceInstance;
                                            }
                                            
                                            JToken sharedAccessPolicyNameValue = propertiesValue14["sharedAccessPolicyName"];
                                            if (sharedAccessPolicyNameValue != null && sharedAccessPolicyNameValue.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyNameInstance = ((string)sharedAccessPolicyNameValue);
                                                propertiesInstance4.SharedAccessPolicyName = sharedAccessPolicyNameInstance;
                                            }
                                            
                                            JToken sharedAccessPolicyKeyValue = propertiesValue14["sharedAccessPolicyKey"];
                                            if (sharedAccessPolicyKeyValue != null && sharedAccessPolicyKeyValue.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyKeyInstance = ((string)sharedAccessPolicyKeyValue);
                                                propertiesInstance4.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance;
                                            }
                                            
                                            JToken eventHubNameValue = propertiesValue14["eventHubName"];
                                            if (eventHubNameValue != null && eventHubNameValue.Type != JTokenType.Null)
                                            {
                                                string eventHubNameInstance = ((string)eventHubNameValue);
                                                propertiesInstance4.EventHubName = eventHubNameInstance;
                                            }
                                            
                                            JToken partitionKeyValue2 = propertiesValue14["partitionKey"];
                                            if (partitionKeyValue2 != null && partitionKeyValue2.Type != JTokenType.Null)
                                            {
                                                string partitionKeyInstance2 = ((string)partitionKeyValue2);
                                                propertiesInstance4.PartitionKey = partitionKeyInstance2;
                                            }
                                        }
                                        
                                        JToken typeValue3 = datasourceValue2["type"];
                                        if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                        {
                                            string typeInstance3 = ((string)typeValue3);
                                            eventHubOutputDataSourceInstance.Type = typeInstance3;
                                        }
                                        propertiesInstance.DataSource = eventHubOutputDataSourceInstance;
                                    }
                                    if (typeName == "Microsoft.ServiceBus/Queue")
                                    {
                                        ServiceBusQueueOutputDataSource serviceBusQueueOutputDataSourceInstance = new ServiceBusQueueOutputDataSource();
                                        
                                        JToken propertiesValue15 = datasourceValue2["properties"];
                                        if (propertiesValue15 != null && propertiesValue15.Type != JTokenType.Null)
                                        {
                                            ServiceBusQueueOutputDataSourceProperties propertiesInstance5 = new ServiceBusQueueOutputDataSourceProperties();
                                            serviceBusQueueOutputDataSourceInstance.Properties = propertiesInstance5;
                                            
                                            JToken serviceBusNamespaceValue2 = propertiesValue15["serviceBusNamespace"];
                                            if (serviceBusNamespaceValue2 != null && serviceBusNamespaceValue2.Type != JTokenType.Null)
                                            {
                                                string serviceBusNamespaceInstance2 = ((string)serviceBusNamespaceValue2);
                                                propertiesInstance5.ServiceBusNamespace = serviceBusNamespaceInstance2;
                                            }
                                            
                                            JToken sharedAccessPolicyNameValue2 = propertiesValue15["sharedAccessPolicyName"];
                                            if (sharedAccessPolicyNameValue2 != null && sharedAccessPolicyNameValue2.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyNameInstance2 = ((string)sharedAccessPolicyNameValue2);
                                                propertiesInstance5.SharedAccessPolicyName = sharedAccessPolicyNameInstance2;
                                            }
                                            
                                            JToken sharedAccessPolicyKeyValue2 = propertiesValue15["sharedAccessPolicyKey"];
                                            if (sharedAccessPolicyKeyValue2 != null && sharedAccessPolicyKeyValue2.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyKeyInstance2 = ((string)sharedAccessPolicyKeyValue2);
                                                propertiesInstance5.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance2;
                                            }
                                            
                                            JToken queueNameValue = propertiesValue15["queueName"];
                                            if (queueNameValue != null && queueNameValue.Type != JTokenType.Null)
                                            {
                                                string queueNameInstance = ((string)queueNameValue);
                                                propertiesInstance5.QueueName = queueNameInstance;
                                            }
                                        }
                                        
                                        JToken typeValue4 = datasourceValue2["type"];
                                        if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                        {
                                            string typeInstance4 = ((string)typeValue4);
                                            serviceBusQueueOutputDataSourceInstance.Type = typeInstance4;
                                        }
                                        propertiesInstance.DataSource = serviceBusQueueOutputDataSourceInstance;
                                    }
                                    if (typeName == "Microsoft.ServiceBus/Topic")
                                    {
                                        ServiceBusTopicOutputDataSource serviceBusTopicOutputDataSourceInstance = new ServiceBusTopicOutputDataSource();
                                        
                                        JToken propertiesValue16 = datasourceValue2["properties"];
                                        if (propertiesValue16 != null && propertiesValue16.Type != JTokenType.Null)
                                        {
                                            ServiceBusTopicOutputDataSourceProperties propertiesInstance6 = new ServiceBusTopicOutputDataSourceProperties();
                                            serviceBusTopicOutputDataSourceInstance.Properties = propertiesInstance6;
                                            
                                            JToken serviceBusNamespaceValue3 = propertiesValue16["serviceBusNamespace"];
                                            if (serviceBusNamespaceValue3 != null && serviceBusNamespaceValue3.Type != JTokenType.Null)
                                            {
                                                string serviceBusNamespaceInstance3 = ((string)serviceBusNamespaceValue3);
                                                propertiesInstance6.ServiceBusNamespace = serviceBusNamespaceInstance3;
                                            }
                                            
                                            JToken sharedAccessPolicyNameValue3 = propertiesValue16["sharedAccessPolicyName"];
                                            if (sharedAccessPolicyNameValue3 != null && sharedAccessPolicyNameValue3.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyNameInstance3 = ((string)sharedAccessPolicyNameValue3);
                                                propertiesInstance6.SharedAccessPolicyName = sharedAccessPolicyNameInstance3;
                                            }
                                            
                                            JToken sharedAccessPolicyKeyValue3 = propertiesValue16["sharedAccessPolicyKey"];
                                            if (sharedAccessPolicyKeyValue3 != null && sharedAccessPolicyKeyValue3.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyKeyInstance3 = ((string)sharedAccessPolicyKeyValue3);
                                                propertiesInstance6.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance3;
                                            }
                                            
                                            JToken topicNameValue = propertiesValue16["topicName"];
                                            if (topicNameValue != null && topicNameValue.Type != JTokenType.Null)
                                            {
                                                string topicNameInstance = ((string)topicNameValue);
                                                propertiesInstance6.TopicName = topicNameInstance;
                                            }
                                        }
                                        
                                        JToken typeValue5 = datasourceValue2["type"];
                                        if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                        {
                                            string typeInstance5 = ((string)typeValue5);
                                            serviceBusTopicOutputDataSourceInstance.Type = typeInstance5;
                                        }
                                        propertiesInstance.DataSource = serviceBusTopicOutputDataSourceInstance;
                                    }
                                    if (typeName == "Microsoft.Sql/Server/Database")
                                    {
                                        SqlAzureOutputDataSource sqlAzureOutputDataSourceInstance = new SqlAzureOutputDataSource();
                                        
                                        JToken propertiesValue17 = datasourceValue2["properties"];
                                        if (propertiesValue17 != null && propertiesValue17.Type != JTokenType.Null)
                                        {
                                            SqlAzureOutputDataSourceProperties propertiesInstance7 = new SqlAzureOutputDataSourceProperties();
                                            sqlAzureOutputDataSourceInstance.Properties = propertiesInstance7;
                                            
                                            JToken serverValue = propertiesValue17["server"];
                                            if (serverValue != null && serverValue.Type != JTokenType.Null)
                                            {
                                                string serverInstance = ((string)serverValue);
                                                propertiesInstance7.Server = serverInstance;
                                            }
                                            
                                            JToken databaseValue = propertiesValue17["database"];
                                            if (databaseValue != null && databaseValue.Type != JTokenType.Null)
                                            {
                                                string databaseInstance = ((string)databaseValue);
                                                propertiesInstance7.Database = databaseInstance;
                                            }
                                            
                                            JToken userValue = propertiesValue17["user"];
                                            if (userValue != null && userValue.Type != JTokenType.Null)
                                            {
                                                string userInstance = ((string)userValue);
                                                propertiesInstance7.User = userInstance;
                                            }
                                            
                                            JToken passwordValue = propertiesValue17["password"];
                                            if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                            {
                                                string passwordInstance = ((string)passwordValue);
                                                propertiesInstance7.Password = passwordInstance;
                                            }
                                            
                                            JToken tableValue2 = propertiesValue17["table"];
                                            if (tableValue2 != null && tableValue2.Type != JTokenType.Null)
                                            {
                                                string tableInstance2 = ((string)tableValue2);
                                                propertiesInstance7.Table = tableInstance2;
                                            }
                                        }
                                        
                                        JToken typeValue6 = datasourceValue2["type"];
                                        if (typeValue6 != null && typeValue6.Type != JTokenType.Null)
                                        {
                                            string typeInstance6 = ((string)typeValue6);
                                            sqlAzureOutputDataSourceInstance.Type = typeInstance6;
                                        }
                                        propertiesInstance.DataSource = sqlAzureOutputDataSourceInstance;
                                    }
                                    if (typeName == "Microsoft.Storage/DocumentDB")
                                    {
                                        DocumentDbOutputDataSource documentDbOutputDataSourceInstance = new DocumentDbOutputDataSource();
                                        
                                        JToken propertiesValue18 = datasourceValue2["properties"];
                                        if (propertiesValue18 != null && propertiesValue18.Type != JTokenType.Null)
                                        {
                                            DocumentDbOutputDataSourceProperties propertiesInstance8 = new DocumentDbOutputDataSourceProperties();
                                            documentDbOutputDataSourceInstance.Properties = propertiesInstance8;
                                            
                                            JToken accountIdValue = propertiesValue18["accountId"];
                                            if (accountIdValue != null && accountIdValue.Type != JTokenType.Null)
                                            {
                                                string accountIdInstance = ((string)accountIdValue);
                                                propertiesInstance8.AccountId = accountIdInstance;
                                            }
                                            
                                            JToken accountKeyValue3 = propertiesValue18["accountKey"];
                                            if (accountKeyValue3 != null && accountKeyValue3.Type != JTokenType.Null)
                                            {
                                                string accountKeyInstance3 = ((string)accountKeyValue3);
                                                propertiesInstance8.AccountKey = accountKeyInstance3;
                                            }
                                            
                                            JToken databaseValue2 = propertiesValue18["database"];
                                            if (databaseValue2 != null && databaseValue2.Type != JTokenType.Null)
                                            {
                                                string databaseInstance2 = ((string)databaseValue2);
                                                propertiesInstance8.Database = databaseInstance2;
                                            }
                                            
                                            JToken collectionNamePatternValue = propertiesValue18["collectionNamePattern"];
                                            if (collectionNamePatternValue != null && collectionNamePatternValue.Type != JTokenType.Null)
                                            {
                                                string collectionNamePatternInstance = ((string)collectionNamePatternValue);
                                                propertiesInstance8.CollectionNamePattern = collectionNamePatternInstance;
                                            }
                                            
                                            JToken partitionKeyValue3 = propertiesValue18["partitionKey"];
                                            if (partitionKeyValue3 != null && partitionKeyValue3.Type != JTokenType.Null)
                                            {
                                                string partitionKeyInstance3 = ((string)partitionKeyValue3);
                                                propertiesInstance8.PartitionKey = partitionKeyInstance3;
                                            }
                                            
                                            JToken documentIdValue = propertiesValue18["documentId"];
                                            if (documentIdValue != null && documentIdValue.Type != JTokenType.Null)
                                            {
                                                string documentIdInstance = ((string)documentIdValue);
                                                propertiesInstance8.DocumentId = documentIdInstance;
                                            }
                                        }
                                        
                                        JToken typeValue7 = datasourceValue2["type"];
                                        if (typeValue7 != null && typeValue7.Type != JTokenType.Null)
                                        {
                                            string typeInstance7 = ((string)typeValue7);
                                            documentDbOutputDataSourceInstance.Type = typeInstance7;
                                        }
                                        propertiesInstance.DataSource = documentDbOutputDataSourceInstance;
                                    }
                                }
                                
                                JToken serializationValue2 = propertiesValue11["serialization"];
                                if (serializationValue2 != null && serializationValue2.Type != JTokenType.Null)
                                {
                                    string typeName2 = ((string)serializationValue2["type"]);
                                    if (typeName2 == "Csv")
                                    {
                                        CsvSerialization csvSerializationInstance = new CsvSerialization();
                                        
                                        JToken propertiesValue19 = serializationValue2["properties"];
                                        if (propertiesValue19 != null && propertiesValue19.Type != JTokenType.Null)
                                        {
                                            CsvSerializationProperties propertiesInstance9 = new CsvSerializationProperties();
                                            csvSerializationInstance.Properties = propertiesInstance9;
                                            
                                            JToken fieldDelimiterValue = propertiesValue19["fieldDelimiter"];
                                            if (fieldDelimiterValue != null && fieldDelimiterValue.Type != JTokenType.Null)
                                            {
                                                string fieldDelimiterInstance = ((string)fieldDelimiterValue);
                                                propertiesInstance9.FieldDelimiter = fieldDelimiterInstance;
                                            }
                                            
                                            JToken encodingValue = propertiesValue19["encoding"];
                                            if (encodingValue != null && encodingValue.Type != JTokenType.Null)
                                            {
                                                string encodingInstance = ((string)encodingValue);
                                                propertiesInstance9.Encoding = encodingInstance;
                                            }
                                        }
                                        
                                        JToken typeValue8 = serializationValue2["type"];
                                        if (typeValue8 != null && typeValue8.Type != JTokenType.Null)
                                        {
                                            string typeInstance8 = ((string)typeValue8);
                                            csvSerializationInstance.Type = typeInstance8;
                                        }
                                        propertiesInstance.Serialization = csvSerializationInstance;
                                    }
                                    if (typeName2 == "Json")
                                    {
                                        JsonSerialization jsonSerializationInstance = new JsonSerialization();
                                        
                                        JToken propertiesValue20 = serializationValue2["properties"];
                                        if (propertiesValue20 != null && propertiesValue20.Type != JTokenType.Null)
                                        {
                                            JsonSerializationProperties propertiesInstance10 = new JsonSerializationProperties();
                                            jsonSerializationInstance.Properties = propertiesInstance10;
                                            
                                            JToken encodingValue2 = propertiesValue20["encoding"];
                                            if (encodingValue2 != null && encodingValue2.Type != JTokenType.Null)
                                            {
                                                string encodingInstance2 = ((string)encodingValue2);
                                                propertiesInstance10.Encoding = encodingInstance2;
                                            }
                                            
                                            JToken formatValue = propertiesValue20["format"];
                                            if (formatValue != null && formatValue.Type != JTokenType.Null)
                                            {
                                                string formatInstance = ((string)formatValue);
                                                propertiesInstance10.Format = formatInstance;
                                            }
                                        }
                                        
                                        JToken typeValue9 = serializationValue2["type"];
                                        if (typeValue9 != null && typeValue9.Type != JTokenType.Null)
                                        {
                                            string typeInstance9 = ((string)typeValue9);
                                            jsonSerializationInstance.Type = typeInstance9;
                                        }
                                        propertiesInstance.Serialization = jsonSerializationInstance;
                                    }
                                    if (typeName2 == "Avro")
                                    {
                                        AvroSerialization avroSerializationInstance = new AvroSerialization();
                                        
                                        JToken propertiesValue21 = serializationValue2["properties"];
                                        if (propertiesValue21 != null && propertiesValue21.Type != JTokenType.Null)
                                        {
                                            AvroSerializationProperties propertiesInstance11 = new AvroSerializationProperties();
                                            avroSerializationInstance.Properties = propertiesInstance11;
                                        }
                                        
                                        JToken typeValue10 = serializationValue2["type"];
                                        if (typeValue10 != null && typeValue10.Type != JTokenType.Null)
                                        {
                                            string typeInstance10 = ((string)typeValue10);
                                            avroSerializationInstance.Type = typeInstance10;
                                        }
                                        propertiesInstance.Serialization = avroSerializationInstance;
                                    }
                                }
                                
                                JToken diagnosticsValue2 = propertiesValue11["diagnostics"];
                                if (diagnosticsValue2 != null && diagnosticsValue2.Type != JTokenType.Null)
                                {
                                    Diagnostics diagnosticsInstance = new Diagnostics();
                                    propertiesInstance.Diagnostics = diagnosticsInstance;
                                    
                                    JToken conditionsArray2 = diagnosticsValue2["conditions"];
                                    if (conditionsArray2 != null && conditionsArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken conditionsValue in ((JArray)conditionsArray2))
                                        {
                                            DiagnosticCondition diagnosticConditionInstance = new DiagnosticCondition();
                                            diagnosticsInstance.Conditions.Add(diagnosticConditionInstance);
                                            
                                            JToken sinceValue = conditionsValue["since"];
                                            if (sinceValue != null && sinceValue.Type != JTokenType.Null)
                                            {
                                                DateTime sinceInstance = ((DateTime)sinceValue);
                                                diagnosticConditionInstance.Since = sinceInstance;
                                            }
                                            
                                            JToken codeValue = conditionsValue["code"];
                                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                                            {
                                                string codeInstance = ((string)codeValue);
                                                diagnosticConditionInstance.Code = codeInstance;
                                            }
                                            
                                            JToken messageValue = conditionsValue["message"];
                                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                                            {
                                                string messageInstance = ((string)messageValue);
                                                diagnosticConditionInstance.Message = messageInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                    }
                    if (httpResponse.Headers.Contains("ETag"))
                    {
                        result.Properties.Etag = httpResponse.Headers.GetValues("ETag").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Test an output for a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='outputName'>
        /// Required. The name of the output for the stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The test result of the input or output data source.
        /// </returns>
        public async Task<ResourceTestConnectionResponse> TestConnectionAsync(string resourceGroupName, string jobName, string outputName, CancellationToken cancellationToken)
        {
            StreamAnalyticsManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("outputName", outputName);
                TracingAdapter.Enter(invocationId, this, "TestConnectionAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ResourceTestConnectionResponse response = await client.Outputs.BeginTestConnectionAsync(resourceGroupName, jobName, outputName, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            ResourceTestConnectionResponse result = await client.GetTestConnectionStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 10;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetTestConnectionStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 10;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
    }
}
