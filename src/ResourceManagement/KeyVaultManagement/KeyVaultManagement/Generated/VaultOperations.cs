// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure.Management.KeyVault;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.KeyVault
{
    /// <summary>
    /// Vault operations
    /// </summary>
    internal partial class VaultOperations : IServiceOperations<KeyVaultManagementClient>, IVaultOperations
    {
        /// <summary>
        /// Initializes a new instance of the VaultOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal VaultOperations(KeyVaultManagementClient client)
        {
            this._client = client;
        }
        
        private KeyVaultManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.KeyVault.KeyVaultManagementClient.
        /// </summary>
        public KeyVaultManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Creates a new Azure key vault.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the server
        /// belongs.
        /// </param>
        /// <param name='vaultName'>
        /// Required. Name of the vault
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters to create or update the vault
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Vault information.
        /// </returns>
        public async Task<VaultGetResponse> CreateOrUpdateAsync(string resourceGroupName, string vaultName, VaultCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vaultName == null)
            {
                throw new ArgumentNullException("vaultName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Location == null)
            {
                throw new ArgumentNullException("parameters.Location");
            }
            if (parameters.Properties == null)
            {
                throw new ArgumentNullException("parameters.Properties");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vaultName", vaultName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.KeyVault";
            url = url + "/vaults/";
            url = url + Uri.EscapeDataString(vaultName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject vaultCreateOrUpdateParametersValue = new JObject();
                requestDoc = vaultCreateOrUpdateParametersValue;
                
                JObject propertiesValue = new JObject();
                vaultCreateOrUpdateParametersValue["properties"] = propertiesValue;
                
                if (parameters.Properties.VaultUri != null)
                {
                    propertiesValue["vaultUri"] = parameters.Properties.VaultUri;
                }
                
                propertiesValue["tenantId"] = parameters.Properties.TenantId.ToString();
                
                if (parameters.Properties.Sku != null)
                {
                    JObject skuValue = new JObject();
                    propertiesValue["sku"] = skuValue;
                    
                    if (parameters.Properties.Sku.Family != null)
                    {
                        skuValue["family"] = parameters.Properties.Sku.Family;
                    }
                    
                    if (parameters.Properties.Sku.Name != null)
                    {
                        skuValue["name"] = parameters.Properties.Sku.Name;
                    }
                }
                
                if (parameters.Properties.AccessPolicies != null)
                {
                    if (parameters.Properties.AccessPolicies is ILazyCollection == false || ((ILazyCollection)parameters.Properties.AccessPolicies).IsInitialized)
                    {
                        JArray accessPoliciesArray = new JArray();
                        foreach (AccessPolicyEntry accessPoliciesItem in parameters.Properties.AccessPolicies)
                        {
                            JObject accessPolicyEntryValue = new JObject();
                            accessPoliciesArray.Add(accessPolicyEntryValue);
                            
                            accessPolicyEntryValue["tenantId"] = accessPoliciesItem.TenantId.ToString();
                            
                            accessPolicyEntryValue["objectId"] = accessPoliciesItem.ObjectId.ToString();
                            
                            if (accessPoliciesItem.ApplicationId != null)
                            {
                                accessPolicyEntryValue["applicationId"] = accessPoliciesItem.ApplicationId.Value.ToString();
                            }
                            
                            if (accessPoliciesItem.PermissionsRawJsonString != null)
                            {
                                accessPolicyEntryValue["permissions"] = JObject.Parse(accessPoliciesItem.PermissionsRawJsonString);
                            }
                        }
                        propertiesValue["accessPolicies"] = accessPoliciesArray;
                    }
                }
                
                propertiesValue["enabledForDeployment"] = parameters.Properties.EnabledForDeployment;
                
                vaultCreateOrUpdateParametersValue["location"] = parameters.Location;
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    vaultCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VaultGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VaultGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Vault vaultInstance = new Vault();
                            result.Vault = vaultInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                VaultProperties propertiesInstance = new VaultProperties();
                                vaultInstance.Properties = propertiesInstance;
                                
                                JToken vaultUriValue = propertiesValue2["vaultUri"];
                                if (vaultUriValue != null && vaultUriValue.Type != JTokenType.Null)
                                {
                                    string vaultUriInstance = ((string)vaultUriValue);
                                    propertiesInstance.VaultUri = vaultUriInstance;
                                }
                                
                                JToken tenantIdValue = propertiesValue2["tenantId"];
                                if (tenantIdValue != null && tenantIdValue.Type != JTokenType.Null)
                                {
                                    Guid tenantIdInstance = Guid.Parse(((string)tenantIdValue));
                                    propertiesInstance.TenantId = tenantIdInstance;
                                }
                                
                                JToken skuValue2 = propertiesValue2["sku"];
                                if (skuValue2 != null && skuValue2.Type != JTokenType.Null)
                                {
                                    Sku skuInstance = new Sku();
                                    propertiesInstance.Sku = skuInstance;
                                    
                                    JToken familyValue = skuValue2["family"];
                                    if (familyValue != null && familyValue.Type != JTokenType.Null)
                                    {
                                        string familyInstance = ((string)familyValue);
                                        skuInstance.Family = familyInstance;
                                    }
                                    
                                    JToken nameValue = skuValue2["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        skuInstance.Name = nameInstance;
                                    }
                                }
                                
                                JToken accessPoliciesArray2 = propertiesValue2["accessPolicies"];
                                if (accessPoliciesArray2 != null && accessPoliciesArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken accessPoliciesValue in ((JArray)accessPoliciesArray2))
                                    {
                                        AccessPolicyEntry accessPolicyEntryInstance = new AccessPolicyEntry();
                                        propertiesInstance.AccessPolicies.Add(accessPolicyEntryInstance);
                                        
                                        JToken tenantIdValue2 = accessPoliciesValue["tenantId"];
                                        if (tenantIdValue2 != null && tenantIdValue2.Type != JTokenType.Null)
                                        {
                                            Guid tenantIdInstance2 = Guid.Parse(((string)tenantIdValue2));
                                            accessPolicyEntryInstance.TenantId = tenantIdInstance2;
                                        }
                                        
                                        JToken objectIdValue = accessPoliciesValue["objectId"];
                                        if (objectIdValue != null && objectIdValue.Type != JTokenType.Null)
                                        {
                                            Guid objectIdInstance = Guid.Parse(((string)objectIdValue));
                                            accessPolicyEntryInstance.ObjectId = objectIdInstance;
                                        }
                                        
                                        JToken applicationIdValue = accessPoliciesValue["applicationId"];
                                        if (applicationIdValue != null && applicationIdValue.Type != JTokenType.Null)
                                        {
                                            Guid applicationIdInstance = Guid.Parse(((string)applicationIdValue));
                                            accessPolicyEntryInstance.ApplicationId = applicationIdInstance;
                                        }
                                        
                                        JToken permissionsValue = accessPoliciesValue["permissions"];
                                        if (permissionsValue != null && permissionsValue.Type != JTokenType.Null)
                                        {
                                            string permissionsInstance = permissionsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                            accessPolicyEntryInstance.PermissionsRawJsonString = permissionsInstance;
                                        }
                                    }
                                }
                                
                                JToken enabledForDeploymentValue = propertiesValue2["enabledForDeployment"];
                                if (enabledForDeploymentValue != null && enabledForDeploymentValue.Type != JTokenType.Null)
                                {
                                    bool enabledForDeploymentInstance = ((bool)enabledForDeploymentValue);
                                    propertiesInstance.EnabledForDeployment = enabledForDeploymentInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                vaultInstance.Id = idInstance;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                vaultInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                vaultInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                vaultInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    vaultInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes the specified Azure key vault.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the vault belongs.
        /// </param>
        /// <param name='vaultName'>
        /// Required. The name of the vault to delete
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Vault information.
        /// </returns>
        public async Task<VaultGetResponse> DeleteAsync(string resourceGroupName, string vaultName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vaultName == null)
            {
                throw new ArgumentNullException("vaultName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vaultName", vaultName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.KeyVault";
            url = url + "/vaults/";
            url = url + Uri.EscapeDataString(vaultName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VaultGetResponse result = null;
                    // Deserialize Response
                    result = new VaultGetResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the specified Azure key vault.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the vault belongs.
        /// </param>
        /// <param name='vaultName'>
        /// Required. The name of the vault.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Vault information.
        /// </returns>
        public async Task<VaultGetResponse> GetAsync(string resourceGroupName, string vaultName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (vaultName == null)
            {
                throw new ArgumentNullException("vaultName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("vaultName", vaultName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.KeyVault";
            url = url + "/vaults/";
            url = url + Uri.EscapeDataString(vaultName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VaultGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VaultGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Vault vaultInstance = new Vault();
                            result.Vault = vaultInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                VaultProperties propertiesInstance = new VaultProperties();
                                vaultInstance.Properties = propertiesInstance;
                                
                                JToken vaultUriValue = propertiesValue["vaultUri"];
                                if (vaultUriValue != null && vaultUriValue.Type != JTokenType.Null)
                                {
                                    string vaultUriInstance = ((string)vaultUriValue);
                                    propertiesInstance.VaultUri = vaultUriInstance;
                                }
                                
                                JToken tenantIdValue = propertiesValue["tenantId"];
                                if (tenantIdValue != null && tenantIdValue.Type != JTokenType.Null)
                                {
                                    Guid tenantIdInstance = Guid.Parse(((string)tenantIdValue));
                                    propertiesInstance.TenantId = tenantIdInstance;
                                }
                                
                                JToken skuValue = propertiesValue["sku"];
                                if (skuValue != null && skuValue.Type != JTokenType.Null)
                                {
                                    Sku skuInstance = new Sku();
                                    propertiesInstance.Sku = skuInstance;
                                    
                                    JToken familyValue = skuValue["family"];
                                    if (familyValue != null && familyValue.Type != JTokenType.Null)
                                    {
                                        string familyInstance = ((string)familyValue);
                                        skuInstance.Family = familyInstance;
                                    }
                                    
                                    JToken nameValue = skuValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        skuInstance.Name = nameInstance;
                                    }
                                }
                                
                                JToken accessPoliciesArray = propertiesValue["accessPolicies"];
                                if (accessPoliciesArray != null && accessPoliciesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken accessPoliciesValue in ((JArray)accessPoliciesArray))
                                    {
                                        AccessPolicyEntry accessPolicyEntryInstance = new AccessPolicyEntry();
                                        propertiesInstance.AccessPolicies.Add(accessPolicyEntryInstance);
                                        
                                        JToken tenantIdValue2 = accessPoliciesValue["tenantId"];
                                        if (tenantIdValue2 != null && tenantIdValue2.Type != JTokenType.Null)
                                        {
                                            Guid tenantIdInstance2 = Guid.Parse(((string)tenantIdValue2));
                                            accessPolicyEntryInstance.TenantId = tenantIdInstance2;
                                        }
                                        
                                        JToken objectIdValue = accessPoliciesValue["objectId"];
                                        if (objectIdValue != null && objectIdValue.Type != JTokenType.Null)
                                        {
                                            Guid objectIdInstance = Guid.Parse(((string)objectIdValue));
                                            accessPolicyEntryInstance.ObjectId = objectIdInstance;
                                        }
                                        
                                        JToken applicationIdValue = accessPoliciesValue["applicationId"];
                                        if (applicationIdValue != null && applicationIdValue.Type != JTokenType.Null)
                                        {
                                            Guid applicationIdInstance = Guid.Parse(((string)applicationIdValue));
                                            accessPolicyEntryInstance.ApplicationId = applicationIdInstance;
                                        }
                                        
                                        JToken permissionsValue = accessPoliciesValue["permissions"];
                                        if (permissionsValue != null && permissionsValue.Type != JTokenType.Null)
                                        {
                                            string permissionsInstance = permissionsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                            accessPolicyEntryInstance.PermissionsRawJsonString = permissionsInstance;
                                        }
                                    }
                                }
                                
                                JToken enabledForDeploymentValue = propertiesValue["enabledForDeployment"];
                                if (enabledForDeploymentValue != null && enabledForDeploymentValue.Type != JTokenType.Null)
                                {
                                    bool enabledForDeploymentInstance = ((bool)enabledForDeploymentValue);
                                    propertiesInstance.EnabledForDeployment = enabledForDeploymentInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                vaultInstance.Id = idInstance;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                vaultInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                vaultInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                vaultInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    vaultInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List operation gets information about the vaults associated
        /// either with the subscription if no resource group is specified or
        /// within the specified resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Optional. An optional argument which specifies the name of the
        /// resource group that constrains the set of vaults that are returned.
        /// </param>
        /// <param name='top'>
        /// Required. Maximum number of results to return.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of vaults
        /// </returns>
        public async Task<VaultListResponse> ListAsync(string resourceGroupName, int top, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("top", top);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            if (resourceGroupName != null)
            {
                url = url + Uri.EscapeDataString(resourceGroupName);
            }
            url = url + "/resources";
            List<string> queryParameters = new List<string>();
            List<string> odataFilter = new List<string>();
            odataFilter.Add("resourceType eq 'Microsoft.KeyVault/vaults' ");
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            queryParameters.Add("$top=" + Uri.EscapeDataString(top.ToString()));
            queryParameters.Add("api-version=2014-04-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VaultListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VaultListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Vault vaultInstance = new Vault();
                                    result.Vaults.Add(vaultInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        VaultProperties propertiesInstance = new VaultProperties();
                                        vaultInstance.Properties = propertiesInstance;
                                        
                                        JToken vaultUriValue = propertiesValue["vaultUri"];
                                        if (vaultUriValue != null && vaultUriValue.Type != JTokenType.Null)
                                        {
                                            string vaultUriInstance = ((string)vaultUriValue);
                                            propertiesInstance.VaultUri = vaultUriInstance;
                                        }
                                        
                                        JToken tenantIdValue = propertiesValue["tenantId"];
                                        if (tenantIdValue != null && tenantIdValue.Type != JTokenType.Null)
                                        {
                                            Guid tenantIdInstance = Guid.Parse(((string)tenantIdValue));
                                            propertiesInstance.TenantId = tenantIdInstance;
                                        }
                                        
                                        JToken skuValue = propertiesValue["sku"];
                                        if (skuValue != null && skuValue.Type != JTokenType.Null)
                                        {
                                            Sku skuInstance = new Sku();
                                            propertiesInstance.Sku = skuInstance;
                                            
                                            JToken familyValue = skuValue["family"];
                                            if (familyValue != null && familyValue.Type != JTokenType.Null)
                                            {
                                                string familyInstance = ((string)familyValue);
                                                skuInstance.Family = familyInstance;
                                            }
                                            
                                            JToken nameValue = skuValue["name"];
                                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                                            {
                                                string nameInstance = ((string)nameValue);
                                                skuInstance.Name = nameInstance;
                                            }
                                        }
                                        
                                        JToken accessPoliciesArray = propertiesValue["accessPolicies"];
                                        if (accessPoliciesArray != null && accessPoliciesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken accessPoliciesValue in ((JArray)accessPoliciesArray))
                                            {
                                                AccessPolicyEntry accessPolicyEntryInstance = new AccessPolicyEntry();
                                                propertiesInstance.AccessPolicies.Add(accessPolicyEntryInstance);
                                                
                                                JToken tenantIdValue2 = accessPoliciesValue["tenantId"];
                                                if (tenantIdValue2 != null && tenantIdValue2.Type != JTokenType.Null)
                                                {
                                                    Guid tenantIdInstance2 = Guid.Parse(((string)tenantIdValue2));
                                                    accessPolicyEntryInstance.TenantId = tenantIdInstance2;
                                                }
                                                
                                                JToken objectIdValue = accessPoliciesValue["objectId"];
                                                if (objectIdValue != null && objectIdValue.Type != JTokenType.Null)
                                                {
                                                    Guid objectIdInstance = Guid.Parse(((string)objectIdValue));
                                                    accessPolicyEntryInstance.ObjectId = objectIdInstance;
                                                }
                                                
                                                JToken applicationIdValue = accessPoliciesValue["applicationId"];
                                                if (applicationIdValue != null && applicationIdValue.Type != JTokenType.Null)
                                                {
                                                    Guid applicationIdInstance = Guid.Parse(((string)applicationIdValue));
                                                    accessPolicyEntryInstance.ApplicationId = applicationIdInstance;
                                                }
                                                
                                                JToken permissionsValue = accessPoliciesValue["permissions"];
                                                if (permissionsValue != null && permissionsValue.Type != JTokenType.Null)
                                                {
                                                    string permissionsInstance = permissionsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                    accessPolicyEntryInstance.PermissionsRawJsonString = permissionsInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken enabledForDeploymentValue = propertiesValue["enabledForDeployment"];
                                        if (enabledForDeploymentValue != null && enabledForDeploymentValue.Type != JTokenType.Null)
                                        {
                                            bool enabledForDeploymentInstance = ((bool)enabledForDeploymentValue);
                                            propertiesInstance.EnabledForDeployment = enabledForDeploymentInstance;
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        vaultInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue2 = valueValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        vaultInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        vaultInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        vaultInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            vaultInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the next set of vaults based on the previously returned
        /// NextLink value.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to List
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of vaults
        /// </returns>
        public async Task<VaultListResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VaultListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VaultListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Vault vaultInstance = new Vault();
                                    result.Vaults.Add(vaultInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        VaultProperties propertiesInstance = new VaultProperties();
                                        vaultInstance.Properties = propertiesInstance;
                                        
                                        JToken vaultUriValue = propertiesValue["vaultUri"];
                                        if (vaultUriValue != null && vaultUriValue.Type != JTokenType.Null)
                                        {
                                            string vaultUriInstance = ((string)vaultUriValue);
                                            propertiesInstance.VaultUri = vaultUriInstance;
                                        }
                                        
                                        JToken tenantIdValue = propertiesValue["tenantId"];
                                        if (tenantIdValue != null && tenantIdValue.Type != JTokenType.Null)
                                        {
                                            Guid tenantIdInstance = Guid.Parse(((string)tenantIdValue));
                                            propertiesInstance.TenantId = tenantIdInstance;
                                        }
                                        
                                        JToken skuValue = propertiesValue["sku"];
                                        if (skuValue != null && skuValue.Type != JTokenType.Null)
                                        {
                                            Sku skuInstance = new Sku();
                                            propertiesInstance.Sku = skuInstance;
                                            
                                            JToken familyValue = skuValue["family"];
                                            if (familyValue != null && familyValue.Type != JTokenType.Null)
                                            {
                                                string familyInstance = ((string)familyValue);
                                                skuInstance.Family = familyInstance;
                                            }
                                            
                                            JToken nameValue = skuValue["name"];
                                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                                            {
                                                string nameInstance = ((string)nameValue);
                                                skuInstance.Name = nameInstance;
                                            }
                                        }
                                        
                                        JToken accessPoliciesArray = propertiesValue["accessPolicies"];
                                        if (accessPoliciesArray != null && accessPoliciesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken accessPoliciesValue in ((JArray)accessPoliciesArray))
                                            {
                                                AccessPolicyEntry accessPolicyEntryInstance = new AccessPolicyEntry();
                                                propertiesInstance.AccessPolicies.Add(accessPolicyEntryInstance);
                                                
                                                JToken tenantIdValue2 = accessPoliciesValue["tenantId"];
                                                if (tenantIdValue2 != null && tenantIdValue2.Type != JTokenType.Null)
                                                {
                                                    Guid tenantIdInstance2 = Guid.Parse(((string)tenantIdValue2));
                                                    accessPolicyEntryInstance.TenantId = tenantIdInstance2;
                                                }
                                                
                                                JToken objectIdValue = accessPoliciesValue["objectId"];
                                                if (objectIdValue != null && objectIdValue.Type != JTokenType.Null)
                                                {
                                                    Guid objectIdInstance = Guid.Parse(((string)objectIdValue));
                                                    accessPolicyEntryInstance.ObjectId = objectIdInstance;
                                                }
                                                
                                                JToken applicationIdValue = accessPoliciesValue["applicationId"];
                                                if (applicationIdValue != null && applicationIdValue.Type != JTokenType.Null)
                                                {
                                                    Guid applicationIdInstance = Guid.Parse(((string)applicationIdValue));
                                                    accessPolicyEntryInstance.ApplicationId = applicationIdInstance;
                                                }
                                                
                                                JToken permissionsValue = accessPoliciesValue["permissions"];
                                                if (permissionsValue != null && permissionsValue.Type != JTokenType.Null)
                                                {
                                                    string permissionsInstance = permissionsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                    accessPolicyEntryInstance.PermissionsRawJsonString = permissionsInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken enabledForDeploymentValue = propertiesValue["enabledForDeployment"];
                                        if (enabledForDeploymentValue != null && enabledForDeploymentValue.Type != JTokenType.Null)
                                        {
                                            bool enabledForDeploymentInstance = ((bool)enabledForDeploymentValue);
                                            propertiesInstance.EnabledForDeployment = enabledForDeploymentInstance;
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        vaultInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue2 = valueValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        vaultInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        vaultInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        vaultInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            vaultInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
