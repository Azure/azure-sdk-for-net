// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.KeyVault;

namespace Microsoft.Azure.Management.KeyVault
{
    /// <summary>
    /// The Windows Azure management API provides a RESTful set of web services
    /// that interact with Azure Key Vault.
    /// </summary>
    public static partial class VaultOperationsExtensions
    {
        /// <summary>
        /// Creates a new Azure key vault.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.KeyVault.IVaultOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the server
        /// belongs.
        /// </param>
        /// <param name='vaultName'>
        /// Required. Name of the vault
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters to create or update the vault
        /// </param>
        /// <returns>
        /// Vault information.
        /// </returns>
        public static VaultGetResponse CreateOrUpdate(this IVaultOperations operations, string resourceGroupName, string vaultName, VaultCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVaultOperations)s).CreateOrUpdateAsync(resourceGroupName, vaultName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates a new Azure key vault.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.KeyVault.IVaultOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the server
        /// belongs.
        /// </param>
        /// <param name='vaultName'>
        /// Required. Name of the vault
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters to create or update the vault
        /// </param>
        /// <returns>
        /// Vault information.
        /// </returns>
        public static Task<VaultGetResponse> CreateOrUpdateAsync(this IVaultOperations operations, string resourceGroupName, string vaultName, VaultCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateAsync(resourceGroupName, vaultName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes the specified Azure key vault.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.KeyVault.IVaultOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the vault belongs.
        /// </param>
        /// <param name='vaultName'>
        /// Required. The name of the vault to delete
        /// </param>
        /// <returns>
        /// Vault information.
        /// </returns>
        public static VaultGetResponse Delete(this IVaultOperations operations, string resourceGroupName, string vaultName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVaultOperations)s).DeleteAsync(resourceGroupName, vaultName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes the specified Azure key vault.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.KeyVault.IVaultOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the vault belongs.
        /// </param>
        /// <param name='vaultName'>
        /// Required. The name of the vault to delete
        /// </param>
        /// <returns>
        /// Vault information.
        /// </returns>
        public static Task<VaultGetResponse> DeleteAsync(this IVaultOperations operations, string resourceGroupName, string vaultName)
        {
            return operations.DeleteAsync(resourceGroupName, vaultName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the specified Azure key vault.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.KeyVault.IVaultOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the vault belongs.
        /// </param>
        /// <param name='vaultName'>
        /// Required. The name of the vault.
        /// </param>
        /// <returns>
        /// Vault information.
        /// </returns>
        public static VaultGetResponse Get(this IVaultOperations operations, string resourceGroupName, string vaultName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVaultOperations)s).GetAsync(resourceGroupName, vaultName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the specified Azure key vault.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.KeyVault.IVaultOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the vault belongs.
        /// </param>
        /// <param name='vaultName'>
        /// Required. The name of the vault.
        /// </param>
        /// <returns>
        /// Vault information.
        /// </returns>
        public static Task<VaultGetResponse> GetAsync(this IVaultOperations operations, string resourceGroupName, string vaultName)
        {
            return operations.GetAsync(resourceGroupName, vaultName, CancellationToken.None);
        }
        
        /// <summary>
        /// The List operation gets information about the vaults associated
        /// either with the subscription if no resource group is specified or
        /// within the specified resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.KeyVault.IVaultOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Optional. An optional argument which specifies the name of the
        /// resource group that constrains the set of vaults that are returned.
        /// </param>
        /// <param name='top'>
        /// Required. Maximum number of results to return.
        /// </param>
        /// <returns>
        /// List of vaults
        /// </returns>
        public static VaultListResponse List(this IVaultOperations operations, string resourceGroupName, int top)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVaultOperations)s).ListAsync(resourceGroupName, top);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The List operation gets information about the vaults associated
        /// either with the subscription if no resource group is specified or
        /// within the specified resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.KeyVault.IVaultOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Optional. An optional argument which specifies the name of the
        /// resource group that constrains the set of vaults that are returned.
        /// </param>
        /// <param name='top'>
        /// Required. Maximum number of results to return.
        /// </param>
        /// <returns>
        /// List of vaults
        /// </returns>
        public static Task<VaultListResponse> ListAsync(this IVaultOperations operations, string resourceGroupName, int top)
        {
            return operations.ListAsync(resourceGroupName, top, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the next set of vaults based on the previously returned
        /// NextLink value.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.KeyVault.IVaultOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to List
        /// operation.
        /// </param>
        /// <returns>
        /// List of vaults
        /// </returns>
        public static VaultListResponse ListNext(this IVaultOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVaultOperations)s).ListNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the next set of vaults based on the previously returned
        /// NextLink value.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.KeyVault.IVaultOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to List
        /// operation.
        /// </param>
        /// <returns>
        /// List of vaults
        /// </returns>
        public static Task<VaultListResponse> ListNextAsync(this IVaultOperations operations, string nextLink)
        {
            return operations.ListNextAsync(nextLink, CancellationToken.None);
        }
    }
}
