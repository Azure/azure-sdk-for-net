// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.KeyVault;

namespace Microsoft.Azure.Management.KeyVault
{
    /// <summary>
    /// Vault operations
    /// </summary>
    public partial interface IVaultOperations
    {
        /// <summary>
        /// Creates a new Azure key vault.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the Resource Group to which the server belongs.
        /// </param>
        /// <param name='vaultName'>
        /// Name of the vault
        /// </param>
        /// <param name='parameters'>
        /// Parameters to create or update the vault
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Vault information.
        /// </returns>
        Task<VaultGetResponse> CreateOrUpdateAsync(string resourceGroupName, string vaultName, VaultCreateOrUpdateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Deletes the specified Azure key vault.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the Resource Group to which the vault belongs.
        /// </param>
        /// <param name='vaultName'>
        /// The name of the vault to delete
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Vault information.
        /// </returns>
        Task<VaultGetResponse> DeleteAsync(string resourceGroupName, string vaultName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets the specified Azure key vault.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the Resource Group to which the vault belongs.
        /// </param>
        /// <param name='vaultName'>
        /// The name of the vault.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Vault information.
        /// </returns>
        Task<VaultGetResponse> GetAsync(string resourceGroupName, string vaultName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The List operation gets information about the vaults associated
        /// either with the subscription if no resource group is specified or
        /// within the specified resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// An optional argument which specifies the name of the resource group
        /// that constrains the set of vaults that are returned.
        /// </param>
        /// <param name='top'>
        /// Maximum number of results to return.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of vaults
        /// </returns>
        Task<VaultListResponse> ListAsync(string resourceGroupName, int top, CancellationToken cancellationToken);
        
        /// <summary>
        /// Get the next set of vaults based on the previously returned
        /// NextLink value.
        /// </summary>
        /// <param name='nextLink'>
        /// NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of vaults
        /// </returns>
        Task<VaultListResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken);
    }
}
