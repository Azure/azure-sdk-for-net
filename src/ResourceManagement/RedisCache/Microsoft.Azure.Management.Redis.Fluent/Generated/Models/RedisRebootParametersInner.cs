// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Redis.Fluent.Models
{
    using System.Linq;

    /// <summary>
    /// Specifies which Redis node(s) to reboot.
    /// </summary>
    public partial class RedisRebootParametersInner
    {
        /// <summary>
        /// Initializes a new instance of the RedisRebootParametersInner class.
        /// </summary>
        public RedisRebootParametersInner() { }

        /// <summary>
        /// Initializes a new instance of the RedisRebootParametersInner class.
        /// </summary>
        /// <param name="rebootType">Which Redis node(s) to reboot. Depending
        /// on this value data loss is possible. Possible values include:
        /// 'PrimaryNode', 'SecondaryNode', 'AllNodes'</param>
        /// <param name="shardId">If clustering is enabled, the ID of the
        /// shard to be rebooted.</param>
        public RedisRebootParametersInner(string rebootType, int? shardId = default(int?))
        {
            RebootType = rebootType;
            ShardId = shardId;
        }

        /// <summary>
        /// Gets or sets which Redis node(s) to reboot. Depending on this
        /// value data loss is possible. Possible values include:
        /// 'PrimaryNode', 'SecondaryNode', 'AllNodes'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rebootType")]
        public string RebootType { get; set; }

        /// <summary>
        /// Gets or sets if clustering is enabled, the ID of the shard to be
        /// rebooted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "shardId")]
        public int? ShardId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RebootType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RebootType");
            }
        }
    }
}
