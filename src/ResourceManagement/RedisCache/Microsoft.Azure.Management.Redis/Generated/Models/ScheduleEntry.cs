// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Redis.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    public partial class ScheduleEntry
    {
        /// <summary>
        /// Initializes a new instance of the ScheduleEntry class.
        /// </summary>
        public ScheduleEntry() { }

        /// <summary>
        /// Initializes a new instance of the ScheduleEntry class.
        /// </summary>
        public ScheduleEntry(string dayOfWeek, int startHourUtc, TimeSpan? maintenanceWindow = default(TimeSpan?))
        {
            DayOfWeek = dayOfWeek;
            StartHourUtc = startHourUtc;
            MaintenanceWindow = maintenanceWindow;
        }

        /// <summary>
        /// Gets or sets day of week when cache can be patched. Possible
        /// values include: 'Monday', 'Tuesday', 'Wednesday', 'Thursday',
        /// 'Friday', 'Saturday', 'Sunday'
        /// </summary>
        [JsonProperty(PropertyName = "dayOfWeek")]
        public string DayOfWeek { get; set; }

        /// <summary>
        /// Gets or sets start hour after which cache patching can start.
        /// </summary>
        [JsonProperty(PropertyName = "startHourUtc")]
        public int StartHourUtc { get; set; }

        /// <summary>
        /// Gets or sets ISO8601 timespan specifying how much time cache
        /// patching can take.
        /// </summary>
        [JsonProperty(PropertyName = "maintenanceWindow")]
        public TimeSpan? MaintenanceWindow { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (DayOfWeek == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DayOfWeek");
            }
        }
    }
}
