// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.DevTestLabs.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// A lab.
    /// </summary>
    [JsonTransformation]
    public partial class Lab : IResource
    {
        /// <summary>
        /// Initializes a new instance of the Lab class.
        /// </summary>
        public Lab() { }

        /// <summary>
        /// Initializes a new instance of the Lab class.
        /// </summary>
        public Lab(string defaultStorageAccount = default(string), string artifactsStorageAccount = default(string), string vaultName = default(string), string labStorageType = default(string), DateTime? createdDate = default(DateTime?), string provisioningState = default(string), string uniqueIdentifier = default(string), string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>))
        {
            DefaultStorageAccount = defaultStorageAccount;
            ArtifactsStorageAccount = artifactsStorageAccount;
            VaultName = vaultName;
            LabStorageType = labStorageType;
            CreatedDate = createdDate;
            ProvisioningState = provisioningState;
            UniqueIdentifier = uniqueIdentifier;
            Id = id;
            Name = name;
            Type = type;
            Location = location;
            Tags = tags;
        }

        /// <summary>
        /// The lab's default storage account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.defaultStorageAccount")]
        public string DefaultStorageAccount { get; set; }

        /// <summary>
        /// The artifact storage account of the lab.
        /// </summary>
        [JsonProperty(PropertyName = "properties.artifactsStorageAccount")]
        public string ArtifactsStorageAccount { get; set; }

        /// <summary>
        /// The name of the key vault of the lab.
        /// </summary>
        [JsonProperty(PropertyName = "properties.vaultName")]
        public string VaultName { get; set; }

        /// <summary>
        /// The type of the lab storage. Possible values include: 'Standard',
        /// 'Premium'
        /// </summary>
        [JsonProperty(PropertyName = "properties.labStorageType")]
        public string LabStorageType { get; set; }

        /// <summary>
        /// The creation date of the lab.
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// The provisioning status of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// The unique immutable identifier of a resource (Guid).
        /// </summary>
        [JsonProperty(PropertyName = "properties.uniqueIdentifier")]
        public string UniqueIdentifier { get; set; }

        /// <summary>
        /// The identifier of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// The type of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// The tags of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

    }
}
