// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure.Management.ApiApps;
using Microsoft.Azure.Management.ApiApps.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.ApiApps
{
    /// <summary>
    /// ApiApp operations  (see
    /// http://azure.microsoft.com/en-us/services/app-service/api/ for more
    /// information)
    /// </summary>
    internal partial class ApiAppOperations : IServiceOperations<ApiAppManagementClient>, IApiAppOperations
    {
        /// <summary>
        /// Initializes a new instance of the ApiAppOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ApiAppOperations(ApiAppManagementClient client)
        {
            this._client = client;
        }
        
        private ApiAppManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.ApiApps.ApiAppManagementClient.
        /// </summary>
        public ApiAppManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Get information about a specific ApiApp
        /// </summary>
        /// <param name='resourceGroup'>
        /// Required. The resource group containing the api app
        /// </param>
        /// <param name='name'>
        /// Required. The instance name of the apiapp
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<GetApiAppResponse> GetAsync(string resourceGroup, string name, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroup == null)
            {
                throw new ArgumentNullException("resourceGroup");
            }
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroup", resourceGroup);
                tracingParameters.Add("name", name);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroup);
            url = url + "/providers/Microsoft.AppService/apiapps/";
            url = url + Uri.EscapeDataString(name);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetApiAppResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GetApiAppResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ApiApp apiAppInstance = new ApiApp();
                            result.ApiApp = apiAppInstance;
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                apiAppInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                apiAppInstance.Name = nameInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                apiAppInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    apiAppInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JToken packageValue = propertiesValue["package"];
                                if (packageValue != null && packageValue.Type != JTokenType.Null)
                                {
                                    MicroservicePackage packageInstance = new MicroservicePackage();
                                    apiAppInstance.Package = packageInstance;
                                    
                                    JToken idValue2 = packageValue["id"];
                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                    {
                                        string idInstance2 = ((string)idValue2);
                                        packageInstance.Id = idInstance2;
                                    }
                                    
                                    JToken versionValue = packageValue["version"];
                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                    {
                                        string versionInstance = ((string)versionValue);
                                        packageInstance.Version = versionInstance;
                                    }
                                    
                                    JToken authenticationArray = packageValue["authentication"];
                                    if (authenticationArray != null && authenticationArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken authenticationValue in ((JArray)authenticationArray))
                                        {
                                            MicroserviceAuthentication microserviceAuthenticationInstance = new MicroserviceAuthentication();
                                            packageInstance.Authentication.Add(microserviceAuthenticationInstance);
                                            
                                            JToken typeValue2 = authenticationValue["type"];
                                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                            {
                                                string typeInstance = ((string)typeValue2);
                                                microserviceAuthenticationInstance.Type = typeInstance;
                                            }
                                            
                                            JToken scopesArray = authenticationValue["scopes"];
                                            if (scopesArray != null && scopesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken scopesValue in ((JArray)scopesArray))
                                                {
                                                    microserviceAuthenticationInstance.Scopes.Add(((string)scopesValue));
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken linksArray = packageValue["links"];
                                    if (linksArray != null && linksArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken linksValue in ((JArray)linksArray))
                                        {
                                            MicroserviceLink microserviceLinkInstance = new MicroserviceLink();
                                            packageInstance.Links.Add(microserviceLinkInstance);
                                            
                                            JToken textValue = linksValue["text"];
                                            if (textValue != null && textValue.Type != JTokenType.Null)
                                            {
                                                string textInstance = ((string)textValue);
                                                microserviceLinkInstance.Text = textInstance;
                                            }
                                            
                                            JToken urlValue = linksValue["Url"];
                                            if (urlValue != null && urlValue.Type != JTokenType.Null)
                                            {
                                                string urlInstance = ((string)urlValue);
                                                microserviceLinkInstance.Url = urlInstance;
                                            }
                                        }
                                    }
                                }
                                
                                JToken updatePolicyValue = propertiesValue["updatePolicy"];
                                if (updatePolicyValue != null && updatePolicyValue.Type != JTokenType.Null)
                                {
                                    string updatePolicyInstance = ((string)updatePolicyValue);
                                    apiAppInstance.UpdatePolicy = updatePolicyInstance;
                                }
                                
                                JToken accessLevelValue = propertiesValue["accessLevel"];
                                if (accessLevelValue != null && accessLevelValue.Type != JTokenType.Null)
                                {
                                    string accessLevelInstance = ((string)accessLevelValue);
                                    apiAppInstance.AccessLevel = accessLevelInstance;
                                }
                                
                                JToken apiValue = propertiesValue["api"];
                                if (apiValue != null && apiValue.Type != JTokenType.Null)
                                {
                                    MicroserviceApi apiInstance = new MicroserviceApi();
                                    apiAppInstance.Api = apiInstance;
                                    
                                    JToken endpointValue = apiValue["endpoint"];
                                    if (endpointValue != null && endpointValue.Type != JTokenType.Null)
                                    {
                                        string endpointInstance = ((string)endpointValue);
                                        apiInstance.Endpoint = endpointInstance;
                                    }
                                    
                                    JToken hasDefinitionValue = apiValue["hasDefinition"];
                                    if (hasDefinitionValue != null && hasDefinitionValue.Type != JTokenType.Null)
                                    {
                                        bool hasDefinitionInstance = ((bool)hasDefinitionValue);
                                        apiInstance.HasDefinition = hasDefinitionInstance;
                                    }
                                }
                                
                                JToken hostValue = propertiesValue["host"];
                                if (hostValue != null && hostValue.Type != JTokenType.Null)
                                {
                                    ResourceReference hostInstance = new ResourceReference();
                                    apiAppInstance.Host = hostInstance;
                                    
                                    JToken idValue3 = hostValue["id"];
                                    if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                    {
                                        string idInstance3 = ((string)idValue3);
                                        hostInstance.Id = idInstance3;
                                    }
                                    
                                    JToken resourceNameValue = hostValue["resourceName"];
                                    if (resourceNameValue != null && resourceNameValue.Type != JTokenType.Null)
                                    {
                                        string resourceNameInstance = ((string)resourceNameValue);
                                        hostInstance.ResourceName = resourceNameInstance;
                                    }
                                    
                                    JToken resourceTypeValue = hostValue["resourceType"];
                                    if (resourceTypeValue != null && resourceTypeValue.Type != JTokenType.Null)
                                    {
                                        string resourceTypeInstance = ((string)resourceTypeValue);
                                        hostInstance.ResourceType = resourceTypeInstance;
                                    }
                                }
                                
                                JToken gatewayValue = propertiesValue["gateway"];
                                if (gatewayValue != null && gatewayValue.Type != JTokenType.Null)
                                {
                                    ResourceReference gatewayInstance = new ResourceReference();
                                    apiAppInstance.Gateway = gatewayInstance;
                                    
                                    JToken idValue4 = gatewayValue["id"];
                                    if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                    {
                                        string idInstance4 = ((string)idValue4);
                                        gatewayInstance.Id = idInstance4;
                                    }
                                    
                                    JToken resourceNameValue2 = gatewayValue["resourceName"];
                                    if (resourceNameValue2 != null && resourceNameValue2.Type != JTokenType.Null)
                                    {
                                        string resourceNameInstance2 = ((string)resourceNameValue2);
                                        gatewayInstance.ResourceName = resourceNameInstance2;
                                    }
                                    
                                    JToken resourceTypeValue2 = gatewayValue["resourceType"];
                                    if (resourceTypeValue2 != null && resourceTypeValue2.Type != JTokenType.Null)
                                    {
                                        string resourceTypeInstance2 = ((string)resourceTypeValue2);
                                        gatewayInstance.ResourceType = resourceTypeInstance2;
                                    }
                                }
                                
                                JToken dependenciesArray = propertiesValue["dependencies"];
                                if (dependenciesArray != null && dependenciesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken dependenciesValue in ((JArray)dependenciesArray))
                                    {
                                        apiAppInstance.Dependencies.Add(((string)dependenciesValue));
                                    }
                                }
                                
                                JToken statusArray = propertiesValue["status"];
                                if (statusArray != null && statusArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken statusValue in ((JArray)statusArray))
                                    {
                                        StatusCheckEntry statusCheckEntryInstance = new StatusCheckEntry();
                                        apiAppInstance.Status.Add(statusCheckEntryInstance);
                                        
                                        JToken nameValue2 = statusValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            statusCheckEntryInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken messageValue = statusValue["message"];
                                        if (messageValue != null && messageValue.Type != JTokenType.Null)
                                        {
                                            string messageInstance = ((string)messageValue);
                                            statusCheckEntryInstance.Message = messageInstance;
                                        }
                                        
                                        JToken statusLevelValue = statusValue["statusLevel"];
                                        if (statusLevelValue != null && statusLevelValue.Type != JTokenType.Null)
                                        {
                                            string statusLevelInstance = ((string)statusLevelValue);
                                            statusCheckEntryInstance.StatusLevel = statusLevelInstance;
                                        }
                                    }
                                }
                                
                                JToken authenticationValue2 = propertiesValue["authentication"];
                                if (authenticationValue2 != null && authenticationValue2.Type != JTokenType.Null)
                                {
                                    MicroserviceAuthentication authenticationInstance = new MicroserviceAuthentication();
                                    apiAppInstance.Authentication = authenticationInstance;
                                    
                                    JToken typeValue3 = authenticationValue2["type"];
                                    if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue3);
                                        authenticationInstance.Type = typeInstance2;
                                    }
                                    
                                    JToken scopesArray2 = authenticationValue2["scopes"];
                                    if (scopesArray2 != null && scopesArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken scopesValue2 in ((JArray)scopesArray2))
                                        {
                                            authenticationInstance.Scopes.Add(((string)scopesValue2));
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Return list of the deployed ApiApps for the resource group
        /// </summary>
        /// <param name='resourceGroup'>
        /// Required. Name of the resource group containing the apiapps to list
        /// </param>
        /// <param name='expand'>
        /// Optional. Option controlling how much data to return, valid options
        /// are "basic" or "detail"
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<ListApiAppsResponse> ListAsync(string resourceGroup, string expand, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroup == null)
            {
                throw new ArgumentNullException("resourceGroup");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroup", resourceGroup);
                tracingParameters.Add("expand", expand);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroup);
            url = url + "/providers/Microsoft.AppService/apiapps";
            List<string> queryParameters = new List<string>();
            if (expand != null)
            {
                queryParameters.Add("$expand=" + Uri.EscapeDataString(expand));
            }
            queryParameters.Add("api-version=2015-03-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ListApiAppsResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ListApiAppsResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ApiApp apiAppJsonInstance = new ApiApp();
                                    result.ApiApps.Add(apiAppJsonInstance);
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        apiAppJsonInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        apiAppJsonInstance.Name = nameInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        apiAppJsonInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            apiAppJsonInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        JToken packageValue = propertiesValue["package"];
                                        if (packageValue != null && packageValue.Type != JTokenType.Null)
                                        {
                                            MicroservicePackage packageInstance = new MicroservicePackage();
                                            apiAppJsonInstance.Package = packageInstance;
                                            
                                            JToken idValue2 = packageValue["id"];
                                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                            {
                                                string idInstance2 = ((string)idValue2);
                                                packageInstance.Id = idInstance2;
                                            }
                                            
                                            JToken versionValue = packageValue["version"];
                                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                                            {
                                                string versionInstance = ((string)versionValue);
                                                packageInstance.Version = versionInstance;
                                            }
                                            
                                            JToken authenticationArray = packageValue["authentication"];
                                            if (authenticationArray != null && authenticationArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken authenticationValue in ((JArray)authenticationArray))
                                                {
                                                    MicroserviceAuthentication microserviceAuthenticationInstance = new MicroserviceAuthentication();
                                                    packageInstance.Authentication.Add(microserviceAuthenticationInstance);
                                                    
                                                    JToken typeValue2 = authenticationValue["type"];
                                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance = ((string)typeValue2);
                                                        microserviceAuthenticationInstance.Type = typeInstance;
                                                    }
                                                    
                                                    JToken scopesArray = authenticationValue["scopes"];
                                                    if (scopesArray != null && scopesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken scopesValue in ((JArray)scopesArray))
                                                        {
                                                            microserviceAuthenticationInstance.Scopes.Add(((string)scopesValue));
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken linksArray = packageValue["links"];
                                            if (linksArray != null && linksArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken linksValue in ((JArray)linksArray))
                                                {
                                                    MicroserviceLink microserviceLinkInstance = new MicroserviceLink();
                                                    packageInstance.Links.Add(microserviceLinkInstance);
                                                    
                                                    JToken textValue = linksValue["text"];
                                                    if (textValue != null && textValue.Type != JTokenType.Null)
                                                    {
                                                        string textInstance = ((string)textValue);
                                                        microserviceLinkInstance.Text = textInstance;
                                                    }
                                                    
                                                    JToken urlValue = linksValue["Url"];
                                                    if (urlValue != null && urlValue.Type != JTokenType.Null)
                                                    {
                                                        string urlInstance = ((string)urlValue);
                                                        microserviceLinkInstance.Url = urlInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken updatePolicyValue = propertiesValue["updatePolicy"];
                                        if (updatePolicyValue != null && updatePolicyValue.Type != JTokenType.Null)
                                        {
                                            string updatePolicyInstance = ((string)updatePolicyValue);
                                            apiAppJsonInstance.UpdatePolicy = updatePolicyInstance;
                                        }
                                        
                                        JToken accessLevelValue = propertiesValue["accessLevel"];
                                        if (accessLevelValue != null && accessLevelValue.Type != JTokenType.Null)
                                        {
                                            string accessLevelInstance = ((string)accessLevelValue);
                                            apiAppJsonInstance.AccessLevel = accessLevelInstance;
                                        }
                                        
                                        JToken apiValue = propertiesValue["api"];
                                        if (apiValue != null && apiValue.Type != JTokenType.Null)
                                        {
                                            MicroserviceApi apiInstance = new MicroserviceApi();
                                            apiAppJsonInstance.Api = apiInstance;
                                            
                                            JToken endpointValue = apiValue["endpoint"];
                                            if (endpointValue != null && endpointValue.Type != JTokenType.Null)
                                            {
                                                string endpointInstance = ((string)endpointValue);
                                                apiInstance.Endpoint = endpointInstance;
                                            }
                                            
                                            JToken hasDefinitionValue = apiValue["hasDefinition"];
                                            if (hasDefinitionValue != null && hasDefinitionValue.Type != JTokenType.Null)
                                            {
                                                bool hasDefinitionInstance = ((bool)hasDefinitionValue);
                                                apiInstance.HasDefinition = hasDefinitionInstance;
                                            }
                                        }
                                        
                                        JToken hostValue = propertiesValue["host"];
                                        if (hostValue != null && hostValue.Type != JTokenType.Null)
                                        {
                                            ResourceReference hostInstance = new ResourceReference();
                                            apiAppJsonInstance.Host = hostInstance;
                                            
                                            JToken idValue3 = hostValue["id"];
                                            if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                            {
                                                string idInstance3 = ((string)idValue3);
                                                hostInstance.Id = idInstance3;
                                            }
                                            
                                            JToken resourceNameValue = hostValue["resourceName"];
                                            if (resourceNameValue != null && resourceNameValue.Type != JTokenType.Null)
                                            {
                                                string resourceNameInstance = ((string)resourceNameValue);
                                                hostInstance.ResourceName = resourceNameInstance;
                                            }
                                            
                                            JToken resourceTypeValue = hostValue["resourceType"];
                                            if (resourceTypeValue != null && resourceTypeValue.Type != JTokenType.Null)
                                            {
                                                string resourceTypeInstance = ((string)resourceTypeValue);
                                                hostInstance.ResourceType = resourceTypeInstance;
                                            }
                                        }
                                        
                                        JToken gatewayValue = propertiesValue["gateway"];
                                        if (gatewayValue != null && gatewayValue.Type != JTokenType.Null)
                                        {
                                            ResourceReference gatewayInstance = new ResourceReference();
                                            apiAppJsonInstance.Gateway = gatewayInstance;
                                            
                                            JToken idValue4 = gatewayValue["id"];
                                            if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                            {
                                                string idInstance4 = ((string)idValue4);
                                                gatewayInstance.Id = idInstance4;
                                            }
                                            
                                            JToken resourceNameValue2 = gatewayValue["resourceName"];
                                            if (resourceNameValue2 != null && resourceNameValue2.Type != JTokenType.Null)
                                            {
                                                string resourceNameInstance2 = ((string)resourceNameValue2);
                                                gatewayInstance.ResourceName = resourceNameInstance2;
                                            }
                                            
                                            JToken resourceTypeValue2 = gatewayValue["resourceType"];
                                            if (resourceTypeValue2 != null && resourceTypeValue2.Type != JTokenType.Null)
                                            {
                                                string resourceTypeInstance2 = ((string)resourceTypeValue2);
                                                gatewayInstance.ResourceType = resourceTypeInstance2;
                                            }
                                        }
                                        
                                        JToken dependenciesArray = propertiesValue["dependencies"];
                                        if (dependenciesArray != null && dependenciesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken dependenciesValue in ((JArray)dependenciesArray))
                                            {
                                                apiAppJsonInstance.Dependencies.Add(((string)dependenciesValue));
                                            }
                                        }
                                        
                                        JToken statusArray = propertiesValue["status"];
                                        if (statusArray != null && statusArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken statusValue in ((JArray)statusArray))
                                            {
                                                StatusCheckEntry statusCheckEntryInstance = new StatusCheckEntry();
                                                apiAppJsonInstance.Status.Add(statusCheckEntryInstance);
                                                
                                                JToken nameValue2 = statusValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    statusCheckEntryInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken messageValue = statusValue["message"];
                                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                {
                                                    string messageInstance = ((string)messageValue);
                                                    statusCheckEntryInstance.Message = messageInstance;
                                                }
                                                
                                                JToken statusLevelValue = statusValue["statusLevel"];
                                                if (statusLevelValue != null && statusLevelValue.Type != JTokenType.Null)
                                                {
                                                    string statusLevelInstance = ((string)statusLevelValue);
                                                    statusCheckEntryInstance.StatusLevel = statusLevelInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken authenticationValue2 = propertiesValue["authentication"];
                                        if (authenticationValue2 != null && authenticationValue2.Type != JTokenType.Null)
                                        {
                                            MicroserviceAuthentication authenticationInstance = new MicroserviceAuthentication();
                                            apiAppJsonInstance.Authentication = authenticationInstance;
                                            
                                            JToken typeValue3 = authenticationValue2["type"];
                                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                            {
                                                string typeInstance2 = ((string)typeValue3);
                                                authenticationInstance.Type = typeInstance2;
                                            }
                                            
                                            JToken scopesArray2 = authenticationValue2["scopes"];
                                            if (scopesArray2 != null && scopesArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken scopesValue2 in ((JArray)scopesArray2))
                                                {
                                                    authenticationInstance.Scopes.Add(((string)scopesValue2));
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Return list of the deployed ApiApps for this subscription
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<ListApiAppsResponse> ListAllAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListAllAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/Microsoft.AppService/apiapps";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ListApiAppsResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ListApiAppsResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ApiApp apiAppJsonInstance = new ApiApp();
                                    result.ApiApps.Add(apiAppJsonInstance);
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        apiAppJsonInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        apiAppJsonInstance.Name = nameInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        apiAppJsonInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            apiAppJsonInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        JToken packageValue = propertiesValue["package"];
                                        if (packageValue != null && packageValue.Type != JTokenType.Null)
                                        {
                                            MicroservicePackage packageInstance = new MicroservicePackage();
                                            apiAppJsonInstance.Package = packageInstance;
                                            
                                            JToken idValue2 = packageValue["id"];
                                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                            {
                                                string idInstance2 = ((string)idValue2);
                                                packageInstance.Id = idInstance2;
                                            }
                                            
                                            JToken versionValue = packageValue["version"];
                                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                                            {
                                                string versionInstance = ((string)versionValue);
                                                packageInstance.Version = versionInstance;
                                            }
                                            
                                            JToken authenticationArray = packageValue["authentication"];
                                            if (authenticationArray != null && authenticationArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken authenticationValue in ((JArray)authenticationArray))
                                                {
                                                    MicroserviceAuthentication microserviceAuthenticationInstance = new MicroserviceAuthentication();
                                                    packageInstance.Authentication.Add(microserviceAuthenticationInstance);
                                                    
                                                    JToken typeValue2 = authenticationValue["type"];
                                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance = ((string)typeValue2);
                                                        microserviceAuthenticationInstance.Type = typeInstance;
                                                    }
                                                    
                                                    JToken scopesArray = authenticationValue["scopes"];
                                                    if (scopesArray != null && scopesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken scopesValue in ((JArray)scopesArray))
                                                        {
                                                            microserviceAuthenticationInstance.Scopes.Add(((string)scopesValue));
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken linksArray = packageValue["links"];
                                            if (linksArray != null && linksArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken linksValue in ((JArray)linksArray))
                                                {
                                                    MicroserviceLink microserviceLinkInstance = new MicroserviceLink();
                                                    packageInstance.Links.Add(microserviceLinkInstance);
                                                    
                                                    JToken textValue = linksValue["text"];
                                                    if (textValue != null && textValue.Type != JTokenType.Null)
                                                    {
                                                        string textInstance = ((string)textValue);
                                                        microserviceLinkInstance.Text = textInstance;
                                                    }
                                                    
                                                    JToken urlValue = linksValue["Url"];
                                                    if (urlValue != null && urlValue.Type != JTokenType.Null)
                                                    {
                                                        string urlInstance = ((string)urlValue);
                                                        microserviceLinkInstance.Url = urlInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken updatePolicyValue = propertiesValue["updatePolicy"];
                                        if (updatePolicyValue != null && updatePolicyValue.Type != JTokenType.Null)
                                        {
                                            string updatePolicyInstance = ((string)updatePolicyValue);
                                            apiAppJsonInstance.UpdatePolicy = updatePolicyInstance;
                                        }
                                        
                                        JToken accessLevelValue = propertiesValue["accessLevel"];
                                        if (accessLevelValue != null && accessLevelValue.Type != JTokenType.Null)
                                        {
                                            string accessLevelInstance = ((string)accessLevelValue);
                                            apiAppJsonInstance.AccessLevel = accessLevelInstance;
                                        }
                                        
                                        JToken apiValue = propertiesValue["api"];
                                        if (apiValue != null && apiValue.Type != JTokenType.Null)
                                        {
                                            MicroserviceApi apiInstance = new MicroserviceApi();
                                            apiAppJsonInstance.Api = apiInstance;
                                            
                                            JToken endpointValue = apiValue["endpoint"];
                                            if (endpointValue != null && endpointValue.Type != JTokenType.Null)
                                            {
                                                string endpointInstance = ((string)endpointValue);
                                                apiInstance.Endpoint = endpointInstance;
                                            }
                                            
                                            JToken hasDefinitionValue = apiValue["hasDefinition"];
                                            if (hasDefinitionValue != null && hasDefinitionValue.Type != JTokenType.Null)
                                            {
                                                bool hasDefinitionInstance = ((bool)hasDefinitionValue);
                                                apiInstance.HasDefinition = hasDefinitionInstance;
                                            }
                                        }
                                        
                                        JToken hostValue = propertiesValue["host"];
                                        if (hostValue != null && hostValue.Type != JTokenType.Null)
                                        {
                                            ResourceReference hostInstance = new ResourceReference();
                                            apiAppJsonInstance.Host = hostInstance;
                                            
                                            JToken idValue3 = hostValue["id"];
                                            if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                            {
                                                string idInstance3 = ((string)idValue3);
                                                hostInstance.Id = idInstance3;
                                            }
                                            
                                            JToken resourceNameValue = hostValue["resourceName"];
                                            if (resourceNameValue != null && resourceNameValue.Type != JTokenType.Null)
                                            {
                                                string resourceNameInstance = ((string)resourceNameValue);
                                                hostInstance.ResourceName = resourceNameInstance;
                                            }
                                            
                                            JToken resourceTypeValue = hostValue["resourceType"];
                                            if (resourceTypeValue != null && resourceTypeValue.Type != JTokenType.Null)
                                            {
                                                string resourceTypeInstance = ((string)resourceTypeValue);
                                                hostInstance.ResourceType = resourceTypeInstance;
                                            }
                                        }
                                        
                                        JToken gatewayValue = propertiesValue["gateway"];
                                        if (gatewayValue != null && gatewayValue.Type != JTokenType.Null)
                                        {
                                            ResourceReference gatewayInstance = new ResourceReference();
                                            apiAppJsonInstance.Gateway = gatewayInstance;
                                            
                                            JToken idValue4 = gatewayValue["id"];
                                            if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                            {
                                                string idInstance4 = ((string)idValue4);
                                                gatewayInstance.Id = idInstance4;
                                            }
                                            
                                            JToken resourceNameValue2 = gatewayValue["resourceName"];
                                            if (resourceNameValue2 != null && resourceNameValue2.Type != JTokenType.Null)
                                            {
                                                string resourceNameInstance2 = ((string)resourceNameValue2);
                                                gatewayInstance.ResourceName = resourceNameInstance2;
                                            }
                                            
                                            JToken resourceTypeValue2 = gatewayValue["resourceType"];
                                            if (resourceTypeValue2 != null && resourceTypeValue2.Type != JTokenType.Null)
                                            {
                                                string resourceTypeInstance2 = ((string)resourceTypeValue2);
                                                gatewayInstance.ResourceType = resourceTypeInstance2;
                                            }
                                        }
                                        
                                        JToken dependenciesArray = propertiesValue["dependencies"];
                                        if (dependenciesArray != null && dependenciesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken dependenciesValue in ((JArray)dependenciesArray))
                                            {
                                                apiAppJsonInstance.Dependencies.Add(((string)dependenciesValue));
                                            }
                                        }
                                        
                                        JToken statusArray = propertiesValue["status"];
                                        if (statusArray != null && statusArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken statusValue in ((JArray)statusArray))
                                            {
                                                StatusCheckEntry statusCheckEntryInstance = new StatusCheckEntry();
                                                apiAppJsonInstance.Status.Add(statusCheckEntryInstance);
                                                
                                                JToken nameValue2 = statusValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    statusCheckEntryInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken messageValue = statusValue["message"];
                                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                {
                                                    string messageInstance = ((string)messageValue);
                                                    statusCheckEntryInstance.Message = messageInstance;
                                                }
                                                
                                                JToken statusLevelValue = statusValue["statusLevel"];
                                                if (statusLevelValue != null && statusLevelValue.Type != JTokenType.Null)
                                                {
                                                    string statusLevelInstance = ((string)statusLevelValue);
                                                    statusCheckEntryInstance.StatusLevel = statusLevelInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken authenticationValue2 = propertiesValue["authentication"];
                                        if (authenticationValue2 != null && authenticationValue2.Type != JTokenType.Null)
                                        {
                                            MicroserviceAuthentication authenticationInstance = new MicroserviceAuthentication();
                                            apiAppJsonInstance.Authentication = authenticationInstance;
                                            
                                            JToken typeValue3 = authenticationValue2["type"];
                                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                            {
                                                string typeInstance2 = ((string)typeValue3);
                                                authenticationInstance.Type = typeInstance2;
                                            }
                                            
                                            JToken scopesArray2 = authenticationValue2["scopes"];
                                            if (scopesArray2 != null && scopesArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken scopesValue2 in ((JArray)scopesArray2))
                                                {
                                                    authenticationInstance.Scopes.Add(((string)scopesValue2));
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List the next set of ApiApps from the previous list call.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. NextLink from a previous successful call to List
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<ListApiAppsResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ListApiAppsResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ListApiAppsResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                ApiApp apiAppJsonInstance = new ApiApp();
                                result.ApiApps.Add(apiAppJsonInstance);
                                
                                JToken typeValue = valueValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                }
                                
                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    apiAppJsonInstance.Id = idInstance;
                                }
                                
                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    apiAppJsonInstance.Name = nameInstance;
                                }
                                
                                JToken locationValue = valueValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    apiAppJsonInstance.Location = locationInstance;
                                }
                                
                                JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in tagsSequenceElement)
                                    {
                                        string tagsKey = ((string)property.Name);
                                        string tagsValue = ((string)property.Value);
                                        apiAppJsonInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                                
                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    JToken packageValue = propertiesValue["package"];
                                    if (packageValue != null && packageValue.Type != JTokenType.Null)
                                    {
                                        MicroservicePackage packageInstance = new MicroservicePackage();
                                        apiAppJsonInstance.Package = packageInstance;
                                        
                                        JToken idValue2 = packageValue["id"];
                                        if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                        {
                                            string idInstance2 = ((string)idValue2);
                                            packageInstance.Id = idInstance2;
                                        }
                                        
                                        JToken versionValue = packageValue["version"];
                                        if (versionValue != null && versionValue.Type != JTokenType.Null)
                                        {
                                            string versionInstance = ((string)versionValue);
                                            packageInstance.Version = versionInstance;
                                        }
                                        
                                        JToken authenticationArray = packageValue["authentication"];
                                        if (authenticationArray != null && authenticationArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken authenticationValue in ((JArray)authenticationArray))
                                            {
                                                MicroserviceAuthentication microserviceAuthenticationInstance = new MicroserviceAuthentication();
                                                packageInstance.Authentication.Add(microserviceAuthenticationInstance);
                                                
                                                JToken typeValue2 = authenticationValue["type"];
                                                if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                {
                                                    string typeInstance = ((string)typeValue2);
                                                    microserviceAuthenticationInstance.Type = typeInstance;
                                                }
                                                
                                                JToken scopesArray = authenticationValue["scopes"];
                                                if (scopesArray != null && scopesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken scopesValue in ((JArray)scopesArray))
                                                    {
                                                        microserviceAuthenticationInstance.Scopes.Add(((string)scopesValue));
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken linksArray = packageValue["links"];
                                        if (linksArray != null && linksArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken linksValue in ((JArray)linksArray))
                                            {
                                                MicroserviceLink microserviceLinkInstance = new MicroserviceLink();
                                                packageInstance.Links.Add(microserviceLinkInstance);
                                                
                                                JToken textValue = linksValue["text"];
                                                if (textValue != null && textValue.Type != JTokenType.Null)
                                                {
                                                    string textInstance = ((string)textValue);
                                                    microserviceLinkInstance.Text = textInstance;
                                                }
                                                
                                                JToken urlValue = linksValue["Url"];
                                                if (urlValue != null && urlValue.Type != JTokenType.Null)
                                                {
                                                    string urlInstance = ((string)urlValue);
                                                    microserviceLinkInstance.Url = urlInstance;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken updatePolicyValue = propertiesValue["updatePolicy"];
                                    if (updatePolicyValue != null && updatePolicyValue.Type != JTokenType.Null)
                                    {
                                        string updatePolicyInstance = ((string)updatePolicyValue);
                                        apiAppJsonInstance.UpdatePolicy = updatePolicyInstance;
                                    }
                                    
                                    JToken accessLevelValue = propertiesValue["accessLevel"];
                                    if (accessLevelValue != null && accessLevelValue.Type != JTokenType.Null)
                                    {
                                        string accessLevelInstance = ((string)accessLevelValue);
                                        apiAppJsonInstance.AccessLevel = accessLevelInstance;
                                    }
                                    
                                    JToken apiValue = propertiesValue["api"];
                                    if (apiValue != null && apiValue.Type != JTokenType.Null)
                                    {
                                        MicroserviceApi apiInstance = new MicroserviceApi();
                                        apiAppJsonInstance.Api = apiInstance;
                                        
                                        JToken endpointValue = apiValue["endpoint"];
                                        if (endpointValue != null && endpointValue.Type != JTokenType.Null)
                                        {
                                            string endpointInstance = ((string)endpointValue);
                                            apiInstance.Endpoint = endpointInstance;
                                        }
                                        
                                        JToken hasDefinitionValue = apiValue["hasDefinition"];
                                        if (hasDefinitionValue != null && hasDefinitionValue.Type != JTokenType.Null)
                                        {
                                            bool hasDefinitionInstance = ((bool)hasDefinitionValue);
                                            apiInstance.HasDefinition = hasDefinitionInstance;
                                        }
                                    }
                                    
                                    JToken hostValue = propertiesValue["host"];
                                    if (hostValue != null && hostValue.Type != JTokenType.Null)
                                    {
                                        ResourceReference hostInstance = new ResourceReference();
                                        apiAppJsonInstance.Host = hostInstance;
                                        
                                        JToken idValue3 = hostValue["id"];
                                        if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                        {
                                            string idInstance3 = ((string)idValue3);
                                            hostInstance.Id = idInstance3;
                                        }
                                        
                                        JToken resourceNameValue = hostValue["resourceName"];
                                        if (resourceNameValue != null && resourceNameValue.Type != JTokenType.Null)
                                        {
                                            string resourceNameInstance = ((string)resourceNameValue);
                                            hostInstance.ResourceName = resourceNameInstance;
                                        }
                                        
                                        JToken resourceTypeValue = hostValue["resourceType"];
                                        if (resourceTypeValue != null && resourceTypeValue.Type != JTokenType.Null)
                                        {
                                            string resourceTypeInstance = ((string)resourceTypeValue);
                                            hostInstance.ResourceType = resourceTypeInstance;
                                        }
                                    }
                                    
                                    JToken gatewayValue = propertiesValue["gateway"];
                                    if (gatewayValue != null && gatewayValue.Type != JTokenType.Null)
                                    {
                                        ResourceReference gatewayInstance = new ResourceReference();
                                        apiAppJsonInstance.Gateway = gatewayInstance;
                                        
                                        JToken idValue4 = gatewayValue["id"];
                                        if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                        {
                                            string idInstance4 = ((string)idValue4);
                                            gatewayInstance.Id = idInstance4;
                                        }
                                        
                                        JToken resourceNameValue2 = gatewayValue["resourceName"];
                                        if (resourceNameValue2 != null && resourceNameValue2.Type != JTokenType.Null)
                                        {
                                            string resourceNameInstance2 = ((string)resourceNameValue2);
                                            gatewayInstance.ResourceName = resourceNameInstance2;
                                        }
                                        
                                        JToken resourceTypeValue2 = gatewayValue["resourceType"];
                                        if (resourceTypeValue2 != null && resourceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string resourceTypeInstance2 = ((string)resourceTypeValue2);
                                            gatewayInstance.ResourceType = resourceTypeInstance2;
                                        }
                                    }
                                    
                                    JToken dependenciesArray = propertiesValue["dependencies"];
                                    if (dependenciesArray != null && dependenciesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken dependenciesValue in ((JArray)dependenciesArray))
                                        {
                                            apiAppJsonInstance.Dependencies.Add(((string)dependenciesValue));
                                        }
                                    }
                                    
                                    JToken statusArray = propertiesValue["status"];
                                    if (statusArray != null && statusArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken statusValue in ((JArray)statusArray))
                                        {
                                            StatusCheckEntry statusCheckEntryInstance = new StatusCheckEntry();
                                            apiAppJsonInstance.Status.Add(statusCheckEntryInstance);
                                            
                                            JToken nameValue2 = statusValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                statusCheckEntryInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken messageValue = statusValue["message"];
                                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                                            {
                                                string messageInstance = ((string)messageValue);
                                                statusCheckEntryInstance.Message = messageInstance;
                                            }
                                            
                                            JToken statusLevelValue = statusValue["statusLevel"];
                                            if (statusLevelValue != null && statusLevelValue.Type != JTokenType.Null)
                                            {
                                                string statusLevelInstance = ((string)statusLevelValue);
                                                statusCheckEntryInstance.StatusLevel = statusLevelInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken authenticationValue2 = propertiesValue["authentication"];
                                    if (authenticationValue2 != null && authenticationValue2.Type != JTokenType.Null)
                                    {
                                        MicroserviceAuthentication authenticationInstance = new MicroserviceAuthentication();
                                        apiAppJsonInstance.Authentication = authenticationInstance;
                                        
                                        JToken typeValue3 = authenticationValue2["type"];
                                        if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                        {
                                            string typeInstance2 = ((string)typeValue3);
                                            authenticationInstance.Type = typeInstance2;
                                        }
                                        
                                        JToken scopesArray2 = authenticationValue2["scopes"];
                                        if (scopesArray2 != null && scopesArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken scopesValue2 in ((JArray)scopesArray2))
                                            {
                                                authenticationInstance.Scopes.Add(((string)scopesValue2));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                        JToken nextLinkValue = responseDoc["nextLink"];
                        if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                        {
                            string nextLinkInstance = ((string)nextLinkValue);
                            result.NextLink = nextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
