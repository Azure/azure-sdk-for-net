// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.ContainerRegistry.Models
{
    using System.Linq;

    /// <summary>
    /// An object that represents a container registry.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class Registry : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Registry class.
        /// </summary>
        public Registry() { }

        /// <summary>
        /// Initializes a new instance of the Registry class.
        /// </summary>
        /// <param name="location">The location of the resource. This cannot
        /// be changed after the resource is created.</param>
        /// <param name="storageAccount">The properties of the storage account
        /// for the container registry. If specified, the storage account
        /// must be in the same physical location as the container
        /// registry.</param>
        /// <param name="id">The resource ID.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the resource.</param>
        /// <param name="tags">The tags of the resource.</param>
        /// <param name="loginServer">The URL that can be used to log into the
        /// container registry.</param>
        /// <param name="creationDate">The creation date of the container
        /// registry in ISO8601 format.</param>
        /// <param name="adminUserEnabled">The value that indicates whether
        /// the admin user is enabled. This value is false by default.</param>
        public Registry(string location, StorageAccountProperties storageAccount, string id = default(string), string name = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string loginServer = default(string), System.DateTime? creationDate = default(System.DateTime?), bool? adminUserEnabled = default(bool?))
            : base(location, id, name, type, tags)
        {
            LoginServer = loginServer;
            CreationDate = creationDate;
            AdminUserEnabled = adminUserEnabled;
            StorageAccount = storageAccount;
        }

        /// <summary>
        /// Gets the URL that can be used to log into the container registry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.loginServer")]
        public string LoginServer { get; private set; }

        /// <summary>
        /// Gets the creation date of the container registry in ISO8601 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.creationDate")]
        public System.DateTime? CreationDate { get; private set; }

        /// <summary>
        /// Gets or sets the value that indicates whether the admin user is
        /// enabled. This value is false by default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.adminUserEnabled")]
        public bool? AdminUserEnabled { get; set; }

        /// <summary>
        /// Gets or sets the properties of the storage account for the
        /// container registry. If specified, the storage account must be in
        /// the same physical location as the container registry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.storageAccount")]
        public StorageAccountProperties StorageAccount { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (StorageAccount == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "StorageAccount");
            }
            if (this.StorageAccount != null)
            {
                this.StorageAccount.Validate();
            }
        }
    }
}
