// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.DataFactories;
using Microsoft.Azure.Management.DataFactories.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.DataFactories
{
    /// <summary>
    /// Operations for managing data factory linkedServices.
    /// </summary>
    internal partial class LinkedServiceOperations : IServiceOperations<DataPipelineManagementClient>, ILinkedServiceOperations
    {
        /// <summary>
        /// Initializes a new instance of the LinkedServiceOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal LinkedServiceOperations(DataPipelineManagementClient client)
        {
            this._client = client;
        }
        
        private DataPipelineManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.DataFactories.DataPipelineManagementClient.
        /// </summary>
        public DataPipelineManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Create or update a data factory linkedService.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. The name of the data factory.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a data
        /// factory linkedService.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update data factory linkedService operation response.
        /// </returns>
        public async Task<LinkedServiceCreateOrUpdateResponse> BeginCreateOrUpdateAsync(string resourceGroupName, string dataFactoryName, LinkedServiceCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.LinkedService.Name != null && parameters.LinkedService.Name.Length > 260)
            {
                throw new ArgumentOutOfRangeException("parameters.LinkedService.Name");
            }
            if (Regex.IsMatch(parameters.LinkedService.Name, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.LinkedService.Name");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/linkedservices/";
            if (parameters.LinkedService != null && parameters.LinkedService.Name != null)
            {
                url = url + Uri.EscapeDataString(parameters.LinkedService.Name);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-01-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject linkedServiceCreateOrUpdateParametersValue = new JObject();
                requestDoc = linkedServiceCreateOrUpdateParametersValue;
                
                if (parameters.LinkedService != null)
                {
                    if (parameters.LinkedService.Name != null)
                    {
                        linkedServiceCreateOrUpdateParametersValue["name"] = parameters.LinkedService.Name;
                    }
                    
                    if (parameters.LinkedService.Properties != null)
                    {
                        JObject propertiesValue = new JObject();
                        linkedServiceCreateOrUpdateParametersValue["properties"] = propertiesValue;
                        if (parameters.LinkedService.Properties is AzureBatchLinkedService)
                        {
                            propertiesValue["type"] = "AzureBatchLinkedService";
                            AzureBatchLinkedService derived = ((AzureBatchLinkedService)parameters.LinkedService.Properties);
                            
                            propertiesValue["accountName"] = derived.AccountName;
                            
                            propertiesValue["accessKey"] = derived.AccessKey;
                            
                            propertiesValue["poolName"] = derived.PoolName;
                            
                            propertiesValue["linkedServiceName"] = derived.LinkedServiceName;
                            
                            if (derived.Description != null)
                            {
                                propertiesValue["description"] = derived.Description;
                            }
                            
                            if (derived.ProvisioningState != null)
                            {
                                propertiesValue["provisioningState"] = derived.ProvisioningState;
                            }
                            
                            if (derived.HubName != null)
                            {
                                propertiesValue["hubName"] = derived.HubName;
                            }
                            
                            if (derived.ErrorMessage != null)
                            {
                                propertiesValue["errorMessage"] = derived.ErrorMessage;
                            }
                        }
                        if (parameters.LinkedService.Properties is AzureMLLinkedService)
                        {
                            propertiesValue["type"] = "AzureMLLinkedService";
                            AzureMLLinkedService derived2 = ((AzureMLLinkedService)parameters.LinkedService.Properties);
                            
                            propertiesValue["mlEndpoint"] = derived2.MlEndpoint;
                            
                            propertiesValue["apiKey"] = derived2.ApiKey;
                            
                            if (derived2.Description != null)
                            {
                                propertiesValue["description"] = derived2.Description;
                            }
                            
                            if (derived2.ProvisioningState != null)
                            {
                                propertiesValue["provisioningState"] = derived2.ProvisioningState;
                            }
                            
                            if (derived2.HubName != null)
                            {
                                propertiesValue["hubName"] = derived2.HubName;
                            }
                            
                            if (derived2.ErrorMessage != null)
                            {
                                propertiesValue["errorMessage"] = derived2.ErrorMessage;
                            }
                        }
                        if (parameters.LinkedService.Properties is AzureSqlLinkedService)
                        {
                            propertiesValue["type"] = "AzureSqlLinkedService";
                            AzureSqlLinkedService derived3 = ((AzureSqlLinkedService)parameters.LinkedService.Properties);
                            
                            propertiesValue["connectionString"] = derived3.ConnectionString;
                            
                            if (derived3.Description != null)
                            {
                                propertiesValue["description"] = derived3.Description;
                            }
                            
                            if (derived3.ProvisioningState != null)
                            {
                                propertiesValue["provisioningState"] = derived3.ProvisioningState;
                            }
                            
                            if (derived3.HubName != null)
                            {
                                propertiesValue["hubName"] = derived3.HubName;
                            }
                            
                            if (derived3.ErrorMessage != null)
                            {
                                propertiesValue["errorMessage"] = derived3.ErrorMessage;
                            }
                        }
                        if (parameters.LinkedService.Properties is AzureStorageLinkedService)
                        {
                            propertiesValue["type"] = "AzureStorageLinkedService";
                            AzureStorageLinkedService derived4 = ((AzureStorageLinkedService)parameters.LinkedService.Properties);
                            
                            propertiesValue["connectionString"] = derived4.ConnectionString;
                            
                            if (derived4.Description != null)
                            {
                                propertiesValue["description"] = derived4.Description;
                            }
                            
                            if (derived4.ProvisioningState != null)
                            {
                                propertiesValue["provisioningState"] = derived4.ProvisioningState;
                            }
                            
                            if (derived4.HubName != null)
                            {
                                propertiesValue["hubName"] = derived4.HubName;
                            }
                            
                            if (derived4.ErrorMessage != null)
                            {
                                propertiesValue["errorMessage"] = derived4.ErrorMessage;
                            }
                        }
                        if (parameters.LinkedService.Properties is CustomLinkedService)
                        {
                            propertiesValue["type"] = "CustomLinkedService";
                            CustomLinkedService derived5 = ((CustomLinkedService)parameters.LinkedService.Properties);
                            
                            if (derived5.ExtendedProperties != null)
                            {
                                if (derived5.ExtendedProperties is ILazyCollection == false || ((ILazyCollection)derived5.ExtendedProperties).IsInitialized)
                                {
                                    JObject extendedPropertiesDictionary = new JObject();
                                    foreach (KeyValuePair<string, string> pair in derived5.ExtendedProperties)
                                    {
                                        string extendedPropertiesKey = pair.Key;
                                        string extendedPropertiesValue = pair.Value;
                                        extendedPropertiesDictionary[extendedPropertiesKey] = extendedPropertiesValue;
                                    }
                                    propertiesValue["extendedProperties"] = extendedPropertiesDictionary;
                                }
                            }
                            
                            if (derived5.Description != null)
                            {
                                propertiesValue["description"] = derived5.Description;
                            }
                            
                            if (derived5.ProvisioningState != null)
                            {
                                propertiesValue["provisioningState"] = derived5.ProvisioningState;
                            }
                            
                            if (derived5.HubName != null)
                            {
                                propertiesValue["hubName"] = derived5.HubName;
                            }
                            
                            if (derived5.ErrorMessage != null)
                            {
                                propertiesValue["errorMessage"] = derived5.ErrorMessage;
                            }
                        }
                        if (parameters.LinkedService.Properties is HDInsightBYOCLinkedService)
                        {
                            propertiesValue["type"] = "HDInsightBYOCLinkedService";
                            HDInsightBYOCLinkedService derived6 = ((HDInsightBYOCLinkedService)parameters.LinkedService.Properties);
                            
                            propertiesValue["clusterUri"] = derived6.ClusterUri;
                            
                            propertiesValue["userName"] = derived6.UserName;
                            
                            propertiesValue["password"] = derived6.Password;
                            
                            if (derived6.LinkedServiceName != null)
                            {
                                propertiesValue["linkedServiceName"] = derived6.LinkedServiceName;
                            }
                            
                            if (derived6.Hcatalog != null)
                            {
                                JObject hcatalogValue = new JObject();
                                propertiesValue["hcatalog"] = hcatalogValue;
                                
                                if (derived6.Hcatalog.LinkedServiceName != null)
                                {
                                    hcatalogValue["linkedServiceName"] = derived6.Hcatalog.LinkedServiceName;
                                }
                                
                                hcatalogValue["recoverPartitions"] = derived6.Hcatalog.RecoverPartitions;
                                
                                hcatalogValue["alterSchema"] = derived6.Hcatalog.AlterSchema;
                            }
                            
                            if (derived6.Description != null)
                            {
                                propertiesValue["description"] = derived6.Description;
                            }
                            
                            if (derived6.ProvisioningState != null)
                            {
                                propertiesValue["provisioningState"] = derived6.ProvisioningState;
                            }
                            
                            if (derived6.HubName != null)
                            {
                                propertiesValue["hubName"] = derived6.HubName;
                            }
                            
                            if (derived6.ErrorMessage != null)
                            {
                                propertiesValue["errorMessage"] = derived6.ErrorMessage;
                            }
                        }
                        if (parameters.LinkedService.Properties is HDInsightOnDemandLinkedService)
                        {
                            propertiesValue["type"] = "HDInsightOnDemandLinkedService";
                            HDInsightOnDemandLinkedService derived7 = ((HDInsightOnDemandLinkedService)parameters.LinkedService.Properties);
                            
                            if (derived7.Version != null)
                            {
                                propertiesValue["version"] = derived7.Version;
                            }
                            
                            if (derived7.ClusterType != null)
                            {
                                propertiesValue["clusterType"] = derived7.ClusterType;
                            }
                            
                            propertiesValue["clusterSize"] = derived7.ClusterSize;
                            
                            propertiesValue["timeToLive"] = derived7.TimeToLive.ToString();
                            
                            propertiesValue["linkedServiceName"] = derived7.LinkedServiceName;
                            
                            if (derived7.HiveCustomLibrariesContainer != null)
                            {
                                propertiesValue["hiveCustomLibrariesContainer"] = derived7.HiveCustomLibrariesContainer;
                            }
                            
                            if (derived7.CoreConfiguration != null)
                            {
                                if (derived7.CoreConfiguration is ILazyCollection == false || ((ILazyCollection)derived7.CoreConfiguration).IsInitialized)
                                {
                                    JObject coreConfigurationDictionary = new JObject();
                                    foreach (KeyValuePair<string, string> pair2 in derived7.CoreConfiguration)
                                    {
                                        string coreConfigurationKey = pair2.Key;
                                        string coreConfigurationValue = pair2.Value;
                                        coreConfigurationDictionary[coreConfigurationKey] = coreConfigurationValue;
                                    }
                                    propertiesValue["coreConfiguration"] = coreConfigurationDictionary;
                                }
                            }
                            
                            if (derived7.HBaseConfiguration != null)
                            {
                                if (derived7.HBaseConfiguration is ILazyCollection == false || ((ILazyCollection)derived7.HBaseConfiguration).IsInitialized)
                                {
                                    JObject hBaseConfigurationDictionary = new JObject();
                                    foreach (KeyValuePair<string, string> pair3 in derived7.HBaseConfiguration)
                                    {
                                        string hBaseConfigurationKey = pair3.Key;
                                        string hBaseConfigurationValue = pair3.Value;
                                        hBaseConfigurationDictionary[hBaseConfigurationKey] = hBaseConfigurationValue;
                                    }
                                    propertiesValue["hBaseConfiguration"] = hBaseConfigurationDictionary;
                                }
                            }
                            
                            if (derived7.HdfsConfiguration != null)
                            {
                                if (derived7.HdfsConfiguration is ILazyCollection == false || ((ILazyCollection)derived7.HdfsConfiguration).IsInitialized)
                                {
                                    JObject hdfsConfigurationDictionary = new JObject();
                                    foreach (KeyValuePair<string, string> pair4 in derived7.HdfsConfiguration)
                                    {
                                        string hdfsConfigurationKey = pair4.Key;
                                        string hdfsConfigurationValue = pair4.Value;
                                        hdfsConfigurationDictionary[hdfsConfigurationKey] = hdfsConfigurationValue;
                                    }
                                    propertiesValue["hdfsConfiguration"] = hdfsConfigurationDictionary;
                                }
                            }
                            
                            if (derived7.HiveConfiguration != null)
                            {
                                if (derived7.HiveConfiguration is ILazyCollection == false || ((ILazyCollection)derived7.HiveConfiguration).IsInitialized)
                                {
                                    JObject hiveConfigurationDictionary = new JObject();
                                    foreach (KeyValuePair<string, string> pair5 in derived7.HiveConfiguration)
                                    {
                                        string hiveConfigurationKey = pair5.Key;
                                        string hiveConfigurationValue = pair5.Value;
                                        hiveConfigurationDictionary[hiveConfigurationKey] = hiveConfigurationValue;
                                    }
                                    propertiesValue["hiveConfiguration"] = hiveConfigurationDictionary;
                                }
                            }
                            
                            if (derived7.MapReduceConfiguration != null)
                            {
                                if (derived7.MapReduceConfiguration is ILazyCollection == false || ((ILazyCollection)derived7.MapReduceConfiguration).IsInitialized)
                                {
                                    JObject mapReduceConfigurationDictionary = new JObject();
                                    foreach (KeyValuePair<string, string> pair6 in derived7.MapReduceConfiguration)
                                    {
                                        string mapReduceConfigurationKey = pair6.Key;
                                        string mapReduceConfigurationValue = pair6.Value;
                                        mapReduceConfigurationDictionary[mapReduceConfigurationKey] = mapReduceConfigurationValue;
                                    }
                                    propertiesValue["mapReduceConfiguration"] = mapReduceConfigurationDictionary;
                                }
                            }
                            
                            if (derived7.OozieConfiguration != null)
                            {
                                if (derived7.OozieConfiguration is ILazyCollection == false || ((ILazyCollection)derived7.OozieConfiguration).IsInitialized)
                                {
                                    JObject oozieConfigurationDictionary = new JObject();
                                    foreach (KeyValuePair<string, string> pair7 in derived7.OozieConfiguration)
                                    {
                                        string oozieConfigurationKey = pair7.Key;
                                        string oozieConfigurationValue = pair7.Value;
                                        oozieConfigurationDictionary[oozieConfigurationKey] = oozieConfigurationValue;
                                    }
                                    propertiesValue["oozieConfiguration"] = oozieConfigurationDictionary;
                                }
                            }
                            
                            if (derived7.StormConfiguration != null)
                            {
                                if (derived7.StormConfiguration is ILazyCollection == false || ((ILazyCollection)derived7.StormConfiguration).IsInitialized)
                                {
                                    JObject stormConfigurationDictionary = new JObject();
                                    foreach (KeyValuePair<string, string> pair8 in derived7.StormConfiguration)
                                    {
                                        string stormConfigurationKey = pair8.Key;
                                        string stormConfigurationValue = pair8.Value;
                                        stormConfigurationDictionary[stormConfigurationKey] = stormConfigurationValue;
                                    }
                                    propertiesValue["stormConfiguration"] = stormConfigurationDictionary;
                                }
                            }
                            
                            if (derived7.SparkConfiguration != null)
                            {
                                if (derived7.SparkConfiguration is ILazyCollection == false || ((ILazyCollection)derived7.SparkConfiguration).IsInitialized)
                                {
                                    JObject sparkConfigurationDictionary = new JObject();
                                    foreach (KeyValuePair<string, string> pair9 in derived7.SparkConfiguration)
                                    {
                                        string sparkConfigurationKey = pair9.Key;
                                        string sparkConfigurationValue = pair9.Value;
                                        sparkConfigurationDictionary[sparkConfigurationKey] = sparkConfigurationValue;
                                    }
                                    propertiesValue["sparkConfiguration"] = sparkConfigurationDictionary;
                                }
                            }
                            
                            if (derived7.YarnConfiguration != null)
                            {
                                if (derived7.YarnConfiguration is ILazyCollection == false || ((ILazyCollection)derived7.YarnConfiguration).IsInitialized)
                                {
                                    JObject yarnConfigurationDictionary = new JObject();
                                    foreach (KeyValuePair<string, string> pair10 in derived7.YarnConfiguration)
                                    {
                                        string yarnConfigurationKey = pair10.Key;
                                        string yarnConfigurationValue = pair10.Value;
                                        yarnConfigurationDictionary[yarnConfigurationKey] = yarnConfigurationValue;
                                    }
                                    propertiesValue["yarnConfiguration"] = yarnConfigurationDictionary;
                                }
                            }
                            
                            if (derived7.AdditionalLinkedServiceNames != null)
                            {
                                if (derived7.AdditionalLinkedServiceNames is ILazyCollection == false || ((ILazyCollection)derived7.AdditionalLinkedServiceNames).IsInitialized)
                                {
                                    JArray additionalLinkedServiceNamesArray = new JArray();
                                    foreach (string additionalLinkedServiceNamesItem in derived7.AdditionalLinkedServiceNames)
                                    {
                                        additionalLinkedServiceNamesArray.Add(additionalLinkedServiceNamesItem);
                                    }
                                    propertiesValue["additionalLinkedServiceNames"] = additionalLinkedServiceNamesArray;
                                }
                            }
                            
                            if (derived7.Hcatalog != null)
                            {
                                JObject hcatalogValue2 = new JObject();
                                propertiesValue["hcatalog"] = hcatalogValue2;
                                
                                if (derived7.Hcatalog.LinkedServiceName != null)
                                {
                                    hcatalogValue2["linkedServiceName"] = derived7.Hcatalog.LinkedServiceName;
                                }
                                
                                hcatalogValue2["recoverPartitions"] = derived7.Hcatalog.RecoverPartitions;
                                
                                hcatalogValue2["alterSchema"] = derived7.Hcatalog.AlterSchema;
                            }
                            
                            if (derived7.DataNodeSize != null)
                            {
                                propertiesValue["dataNodeSize"] = derived7.DataNodeSize;
                            }
                            
                            if (derived7.HeadNodeSize != null)
                            {
                                propertiesValue["headNodeSize"] = derived7.HeadNodeSize;
                            }
                            
                            if (derived7.ZookeeperNodeSize != null)
                            {
                                propertiesValue["zookeeperNodeSize"] = derived7.ZookeeperNodeSize;
                            }
                            
                            if (derived7.OSType != null)
                            {
                                propertiesValue["osType"] = derived7.OSType;
                            }
                            
                            if (derived7.SshPassword != null)
                            {
                                propertiesValue["sshPassword"] = derived7.SshPassword;
                            }
                            
                            if (derived7.SshPublicKey != null)
                            {
                                propertiesValue["sshPublicKey"] = derived7.SshPublicKey;
                            }
                            
                            if (derived7.SshUserName != null)
                            {
                                propertiesValue["sshUserName"] = derived7.SshUserName;
                            }
                            
                            if (derived7.Description != null)
                            {
                                propertiesValue["description"] = derived7.Description;
                            }
                            
                            if (derived7.ProvisioningState != null)
                            {
                                propertiesValue["provisioningState"] = derived7.ProvisioningState;
                            }
                            
                            if (derived7.HubName != null)
                            {
                                propertiesValue["hubName"] = derived7.HubName;
                            }
                            
                            if (derived7.ErrorMessage != null)
                            {
                                propertiesValue["errorMessage"] = derived7.ErrorMessage;
                            }
                        }
                        if (parameters.LinkedService.Properties is OnPremisesDb2LinkedService)
                        {
                            propertiesValue["type"] = "OnPremisesDb2LinkedService";
                            OnPremisesDb2LinkedService derived8 = ((OnPremisesDb2LinkedService)parameters.LinkedService.Properties);
                            
                            propertiesValue["server"] = derived8.Server;
                            
                            propertiesValue["database"] = derived8.Database;
                            
                            if (derived8.Schema != null)
                            {
                                propertiesValue["schema"] = derived8.Schema;
                            }
                            
                            propertiesValue["authenticationType"] = derived8.AuthenticationType;
                            
                            if (derived8.Username != null)
                            {
                                propertiesValue["username"] = derived8.Username;
                            }
                            
                            if (derived8.Password != null)
                            {
                                propertiesValue["password"] = derived8.Password;
                            }
                            
                            propertiesValue["gatewayName"] = derived8.GatewayName;
                            
                            if (derived8.EncryptedCredential != null)
                            {
                                propertiesValue["encryptedCredential"] = derived8.EncryptedCredential;
                            }
                            
                            if (derived8.Description != null)
                            {
                                propertiesValue["description"] = derived8.Description;
                            }
                            
                            if (derived8.ProvisioningState != null)
                            {
                                propertiesValue["provisioningState"] = derived8.ProvisioningState;
                            }
                            
                            if (derived8.HubName != null)
                            {
                                propertiesValue["hubName"] = derived8.HubName;
                            }
                            
                            if (derived8.ErrorMessage != null)
                            {
                                propertiesValue["errorMessage"] = derived8.ErrorMessage;
                            }
                        }
                        if (parameters.LinkedService.Properties is OnPremisesFileSystemLinkedService)
                        {
                            propertiesValue["type"] = "OnPremisesFileSystemLinkedService";
                            OnPremisesFileSystemLinkedService derived9 = ((OnPremisesFileSystemLinkedService)parameters.LinkedService.Properties);
                            
                            propertiesValue["host"] = derived9.Host;
                            
                            propertiesValue["gatewayName"] = derived9.GatewayName;
                            
                            if (derived9.UserId != null)
                            {
                                propertiesValue["userId"] = derived9.UserId;
                            }
                            
                            if (derived9.Password != null)
                            {
                                propertiesValue["password"] = derived9.Password;
                            }
                            
                            if (derived9.EncryptedCredential != null)
                            {
                                propertiesValue["encryptedCredential"] = derived9.EncryptedCredential;
                            }
                            
                            if (derived9.Description != null)
                            {
                                propertiesValue["description"] = derived9.Description;
                            }
                            
                            if (derived9.ProvisioningState != null)
                            {
                                propertiesValue["provisioningState"] = derived9.ProvisioningState;
                            }
                            
                            if (derived9.HubName != null)
                            {
                                propertiesValue["hubName"] = derived9.HubName;
                            }
                            
                            if (derived9.ErrorMessage != null)
                            {
                                propertiesValue["errorMessage"] = derived9.ErrorMessage;
                            }
                        }
                        if (parameters.LinkedService.Properties is OnPremisesMySqlLinkedService)
                        {
                            propertiesValue["type"] = "OnPremisesMySqlLinkedService";
                            OnPremisesMySqlLinkedService derived10 = ((OnPremisesMySqlLinkedService)parameters.LinkedService.Properties);
                            
                            propertiesValue["server"] = derived10.Server;
                            
                            propertiesValue["database"] = derived10.Database;
                            
                            if (derived10.Schema != null)
                            {
                                propertiesValue["schema"] = derived10.Schema;
                            }
                            
                            propertiesValue["authenticationType"] = derived10.AuthenticationType;
                            
                            if (derived10.Username != null)
                            {
                                propertiesValue["username"] = derived10.Username;
                            }
                            
                            if (derived10.Password != null)
                            {
                                propertiesValue["password"] = derived10.Password;
                            }
                            
                            propertiesValue["gatewayName"] = derived10.GatewayName;
                            
                            if (derived10.EncryptedCredential != null)
                            {
                                propertiesValue["encryptedCredential"] = derived10.EncryptedCredential;
                            }
                            
                            if (derived10.Description != null)
                            {
                                propertiesValue["description"] = derived10.Description;
                            }
                            
                            if (derived10.ProvisioningState != null)
                            {
                                propertiesValue["provisioningState"] = derived10.ProvisioningState;
                            }
                            
                            if (derived10.HubName != null)
                            {
                                propertiesValue["hubName"] = derived10.HubName;
                            }
                            
                            if (derived10.ErrorMessage != null)
                            {
                                propertiesValue["errorMessage"] = derived10.ErrorMessage;
                            }
                        }
                        if (parameters.LinkedService.Properties is OnPremisesOracleLinkedService)
                        {
                            propertiesValue["type"] = "OnPremisesOracleLinkedService";
                            OnPremisesOracleLinkedService derived11 = ((OnPremisesOracleLinkedService)parameters.LinkedService.Properties);
                            
                            propertiesValue["connectionString"] = derived11.ConnectionString;
                            
                            propertiesValue["gatewayName"] = derived11.GatewayName;
                            
                            if (derived11.UserName != null)
                            {
                                propertiesValue["userName"] = derived11.UserName;
                            }
                            
                            if (derived11.Password != null)
                            {
                                propertiesValue["password"] = derived11.Password;
                            }
                            
                            if (derived11.Description != null)
                            {
                                propertiesValue["description"] = derived11.Description;
                            }
                            
                            if (derived11.ProvisioningState != null)
                            {
                                propertiesValue["provisioningState"] = derived11.ProvisioningState;
                            }
                            
                            if (derived11.HubName != null)
                            {
                                propertiesValue["hubName"] = derived11.HubName;
                            }
                            
                            if (derived11.ErrorMessage != null)
                            {
                                propertiesValue["errorMessage"] = derived11.ErrorMessage;
                            }
                        }
                        if (parameters.LinkedService.Properties is OnPremisesPostgreSqlLinkedService)
                        {
                            propertiesValue["type"] = "OnPremisesPostgreSqlLinkedService";
                            OnPremisesPostgreSqlLinkedService derived12 = ((OnPremisesPostgreSqlLinkedService)parameters.LinkedService.Properties);
                            
                            propertiesValue["server"] = derived12.Server;
                            
                            propertiesValue["database"] = derived12.Database;
                            
                            if (derived12.Schema != null)
                            {
                                propertiesValue["schema"] = derived12.Schema;
                            }
                            
                            propertiesValue["authenticationType"] = derived12.AuthenticationType;
                            
                            if (derived12.Username != null)
                            {
                                propertiesValue["username"] = derived12.Username;
                            }
                            
                            if (derived12.Password != null)
                            {
                                propertiesValue["password"] = derived12.Password;
                            }
                            
                            propertiesValue["gatewayName"] = derived12.GatewayName;
                            
                            if (derived12.EncryptedCredential != null)
                            {
                                propertiesValue["encryptedCredential"] = derived12.EncryptedCredential;
                            }
                            
                            if (derived12.Description != null)
                            {
                                propertiesValue["description"] = derived12.Description;
                            }
                            
                            if (derived12.ProvisioningState != null)
                            {
                                propertiesValue["provisioningState"] = derived12.ProvisioningState;
                            }
                            
                            if (derived12.HubName != null)
                            {
                                propertiesValue["hubName"] = derived12.HubName;
                            }
                            
                            if (derived12.ErrorMessage != null)
                            {
                                propertiesValue["errorMessage"] = derived12.ErrorMessage;
                            }
                        }
                        if (parameters.LinkedService.Properties is OnPremisesSqlLinkedService)
                        {
                            propertiesValue["type"] = "OnPremisesSqlLinkedService";
                            OnPremisesSqlLinkedService derived13 = ((OnPremisesSqlLinkedService)parameters.LinkedService.Properties);
                            
                            propertiesValue["connectionString"] = derived13.ConnectionString;
                            
                            propertiesValue["gatewayName"] = derived13.GatewayName;
                            
                            if (derived13.UserName != null)
                            {
                                propertiesValue["userName"] = derived13.UserName;
                            }
                            
                            if (derived13.Password != null)
                            {
                                propertiesValue["password"] = derived13.Password;
                            }
                            
                            if (derived13.Description != null)
                            {
                                propertiesValue["description"] = derived13.Description;
                            }
                            
                            if (derived13.ProvisioningState != null)
                            {
                                propertiesValue["provisioningState"] = derived13.ProvisioningState;
                            }
                            
                            if (derived13.HubName != null)
                            {
                                propertiesValue["hubName"] = derived13.HubName;
                            }
                            
                            if (derived13.ErrorMessage != null)
                            {
                                propertiesValue["errorMessage"] = derived13.ErrorMessage;
                            }
                        }
                        if (parameters.LinkedService.Properties is OnPremisesSybaseLinkedService)
                        {
                            propertiesValue["type"] = "OnPremisesSybaseLinkedService";
                            OnPremisesSybaseLinkedService derived14 = ((OnPremisesSybaseLinkedService)parameters.LinkedService.Properties);
                            
                            propertiesValue["server"] = derived14.Server;
                            
                            propertiesValue["database"] = derived14.Database;
                            
                            if (derived14.Schema != null)
                            {
                                propertiesValue["schema"] = derived14.Schema;
                            }
                            
                            propertiesValue["authenticationType"] = derived14.AuthenticationType;
                            
                            if (derived14.Username != null)
                            {
                                propertiesValue["username"] = derived14.Username;
                            }
                            
                            if (derived14.Password != null)
                            {
                                propertiesValue["password"] = derived14.Password;
                            }
                            
                            propertiesValue["gatewayName"] = derived14.GatewayName;
                            
                            if (derived14.EncryptedCredential != null)
                            {
                                propertiesValue["encryptedCredential"] = derived14.EncryptedCredential;
                            }
                            
                            if (derived14.Description != null)
                            {
                                propertiesValue["description"] = derived14.Description;
                            }
                            
                            if (derived14.ProvisioningState != null)
                            {
                                propertiesValue["provisioningState"] = derived14.ProvisioningState;
                            }
                            
                            if (derived14.HubName != null)
                            {
                                propertiesValue["hubName"] = derived14.HubName;
                            }
                            
                            if (derived14.ErrorMessage != null)
                            {
                                propertiesValue["errorMessage"] = derived14.ErrorMessage;
                            }
                        }
                        if (parameters.LinkedService.Properties is OnPremisesTeradataLinkedService)
                        {
                            propertiesValue["type"] = "OnPremisesTeradataLinkedService";
                            OnPremisesTeradataLinkedService derived15 = ((OnPremisesTeradataLinkedService)parameters.LinkedService.Properties);
                            
                            propertiesValue["server"] = derived15.Server;
                            
                            propertiesValue["database"] = derived15.Database;
                            
                            if (derived15.Schema != null)
                            {
                                propertiesValue["schema"] = derived15.Schema;
                            }
                            
                            propertiesValue["authenticationType"] = derived15.AuthenticationType;
                            
                            if (derived15.Username != null)
                            {
                                propertiesValue["username"] = derived15.Username;
                            }
                            
                            if (derived15.Password != null)
                            {
                                propertiesValue["password"] = derived15.Password;
                            }
                            
                            propertiesValue["gatewayName"] = derived15.GatewayName;
                            
                            if (derived15.EncryptedCredential != null)
                            {
                                propertiesValue["encryptedCredential"] = derived15.EncryptedCredential;
                            }
                            
                            if (derived15.Description != null)
                            {
                                propertiesValue["description"] = derived15.Description;
                            }
                            
                            if (derived15.ProvisioningState != null)
                            {
                                propertiesValue["provisioningState"] = derived15.ProvisioningState;
                            }
                            
                            if (derived15.HubName != null)
                            {
                                propertiesValue["hubName"] = derived15.HubName;
                            }
                            
                            if (derived15.ErrorMessage != null)
                            {
                                propertiesValue["errorMessage"] = derived15.ErrorMessage;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LinkedServiceCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new LinkedServiceCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            LinkedService linkedServiceInstance = new LinkedService();
                            result.LinkedService = linkedServiceInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                linkedServiceInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue2["type"]);
                                if (typeName == "AzureBatchLinkedService")
                                {
                                    AzureBatchLinkedService azureBatchLinkedServiceInstance = new AzureBatchLinkedService();
                                    
                                    JToken accountNameValue = propertiesValue2["accountName"];
                                    if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                    {
                                        string accountNameInstance = ((string)accountNameValue);
                                        azureBatchLinkedServiceInstance.AccountName = accountNameInstance;
                                    }
                                    
                                    JToken accessKeyValue = propertiesValue2["accessKey"];
                                    if (accessKeyValue != null && accessKeyValue.Type != JTokenType.Null)
                                    {
                                        string accessKeyInstance = ((string)accessKeyValue);
                                        azureBatchLinkedServiceInstance.AccessKey = accessKeyInstance;
                                    }
                                    
                                    JToken poolNameValue = propertiesValue2["poolName"];
                                    if (poolNameValue != null && poolNameValue.Type != JTokenType.Null)
                                    {
                                        string poolNameInstance = ((string)poolNameValue);
                                        azureBatchLinkedServiceInstance.PoolName = poolNameInstance;
                                    }
                                    
                                    JToken linkedServiceNameValue = propertiesValue2["linkedServiceName"];
                                    if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                        azureBatchLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance;
                                    }
                                    
                                    JToken descriptionValue = propertiesValue2["description"];
                                    if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance = ((string)descriptionValue);
                                        azureBatchLinkedServiceInstance.Description = descriptionInstance;
                                    }
                                    
                                    JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                        azureBatchLinkedServiceInstance.ProvisioningState = provisioningStateInstance;
                                    }
                                    
                                    JToken hubNameValue = propertiesValue2["hubName"];
                                    if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance = ((string)hubNameValue);
                                        azureBatchLinkedServiceInstance.HubName = hubNameInstance;
                                    }
                                    
                                    JToken errorMessageValue = propertiesValue2["errorMessage"];
                                    if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance = ((string)errorMessageValue);
                                        azureBatchLinkedServiceInstance.ErrorMessage = errorMessageInstance;
                                    }
                                    linkedServiceInstance.Properties = azureBatchLinkedServiceInstance;
                                }
                                if (typeName == "AzureMLLinkedService")
                                {
                                    AzureMLLinkedService azureMLLinkedServiceInstance = new AzureMLLinkedService();
                                    
                                    JToken mlEndpointValue = propertiesValue2["mlEndpoint"];
                                    if (mlEndpointValue != null && mlEndpointValue.Type != JTokenType.Null)
                                    {
                                        string mlEndpointInstance = ((string)mlEndpointValue);
                                        azureMLLinkedServiceInstance.MlEndpoint = mlEndpointInstance;
                                    }
                                    
                                    JToken apiKeyValue = propertiesValue2["apiKey"];
                                    if (apiKeyValue != null && apiKeyValue.Type != JTokenType.Null)
                                    {
                                        string apiKeyInstance = ((string)apiKeyValue);
                                        azureMLLinkedServiceInstance.ApiKey = apiKeyInstance;
                                    }
                                    
                                    JToken descriptionValue2 = propertiesValue2["description"];
                                    if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance2 = ((string)descriptionValue2);
                                        azureMLLinkedServiceInstance.Description = descriptionInstance2;
                                    }
                                    
                                    JToken provisioningStateValue2 = propertiesValue2["provisioningState"];
                                    if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                        azureMLLinkedServiceInstance.ProvisioningState = provisioningStateInstance2;
                                    }
                                    
                                    JToken hubNameValue2 = propertiesValue2["hubName"];
                                    if (hubNameValue2 != null && hubNameValue2.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance2 = ((string)hubNameValue2);
                                        azureMLLinkedServiceInstance.HubName = hubNameInstance2;
                                    }
                                    
                                    JToken errorMessageValue2 = propertiesValue2["errorMessage"];
                                    if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance2 = ((string)errorMessageValue2);
                                        azureMLLinkedServiceInstance.ErrorMessage = errorMessageInstance2;
                                    }
                                    linkedServiceInstance.Properties = azureMLLinkedServiceInstance;
                                }
                                if (typeName == "AzureSqlLinkedService")
                                {
                                    AzureSqlLinkedService azureSqlLinkedServiceInstance = new AzureSqlLinkedService();
                                    
                                    JToken connectionStringValue = propertiesValue2["connectionString"];
                                    if (connectionStringValue != null && connectionStringValue.Type != JTokenType.Null)
                                    {
                                        string connectionStringInstance = ((string)connectionStringValue);
                                        azureSqlLinkedServiceInstance.ConnectionString = connectionStringInstance;
                                    }
                                    
                                    JToken descriptionValue3 = propertiesValue2["description"];
                                    if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance3 = ((string)descriptionValue3);
                                        azureSqlLinkedServiceInstance.Description = descriptionInstance3;
                                    }
                                    
                                    JToken provisioningStateValue3 = propertiesValue2["provisioningState"];
                                    if (provisioningStateValue3 != null && provisioningStateValue3.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance3 = ((string)provisioningStateValue3);
                                        azureSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance3;
                                    }
                                    
                                    JToken hubNameValue3 = propertiesValue2["hubName"];
                                    if (hubNameValue3 != null && hubNameValue3.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance3 = ((string)hubNameValue3);
                                        azureSqlLinkedServiceInstance.HubName = hubNameInstance3;
                                    }
                                    
                                    JToken errorMessageValue3 = propertiesValue2["errorMessage"];
                                    if (errorMessageValue3 != null && errorMessageValue3.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance3 = ((string)errorMessageValue3);
                                        azureSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance3;
                                    }
                                    linkedServiceInstance.Properties = azureSqlLinkedServiceInstance;
                                }
                                if (typeName == "AzureStorageLinkedService")
                                {
                                    AzureStorageLinkedService azureStorageLinkedServiceInstance = new AzureStorageLinkedService();
                                    
                                    JToken connectionStringValue2 = propertiesValue2["connectionString"];
                                    if (connectionStringValue2 != null && connectionStringValue2.Type != JTokenType.Null)
                                    {
                                        string connectionStringInstance2 = ((string)connectionStringValue2);
                                        azureStorageLinkedServiceInstance.ConnectionString = connectionStringInstance2;
                                    }
                                    
                                    JToken descriptionValue4 = propertiesValue2["description"];
                                    if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance4 = ((string)descriptionValue4);
                                        azureStorageLinkedServiceInstance.Description = descriptionInstance4;
                                    }
                                    
                                    JToken provisioningStateValue4 = propertiesValue2["provisioningState"];
                                    if (provisioningStateValue4 != null && provisioningStateValue4.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance4 = ((string)provisioningStateValue4);
                                        azureStorageLinkedServiceInstance.ProvisioningState = provisioningStateInstance4;
                                    }
                                    
                                    JToken hubNameValue4 = propertiesValue2["hubName"];
                                    if (hubNameValue4 != null && hubNameValue4.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance4 = ((string)hubNameValue4);
                                        azureStorageLinkedServiceInstance.HubName = hubNameInstance4;
                                    }
                                    
                                    JToken errorMessageValue4 = propertiesValue2["errorMessage"];
                                    if (errorMessageValue4 != null && errorMessageValue4.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance4 = ((string)errorMessageValue4);
                                        azureStorageLinkedServiceInstance.ErrorMessage = errorMessageInstance4;
                                    }
                                    linkedServiceInstance.Properties = azureStorageLinkedServiceInstance;
                                }
                                if (typeName == "CustomLinkedService")
                                {
                                    CustomLinkedService customLinkedServiceInstance = new CustomLinkedService();
                                    
                                    JToken extendedPropertiesSequenceElement = ((JToken)propertiesValue2["extendedProperties"]);
                                    if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in extendedPropertiesSequenceElement)
                                        {
                                            string extendedPropertiesKey2 = ((string)property.Name);
                                            string extendedPropertiesValue2 = ((string)property.Value);
                                            customLinkedServiceInstance.ExtendedProperties.Add(extendedPropertiesKey2, extendedPropertiesValue2);
                                        }
                                    }
                                    
                                    JToken descriptionValue5 = propertiesValue2["description"];
                                    if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance5 = ((string)descriptionValue5);
                                        customLinkedServiceInstance.Description = descriptionInstance5;
                                    }
                                    
                                    JToken provisioningStateValue5 = propertiesValue2["provisioningState"];
                                    if (provisioningStateValue5 != null && provisioningStateValue5.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance5 = ((string)provisioningStateValue5);
                                        customLinkedServiceInstance.ProvisioningState = provisioningStateInstance5;
                                    }
                                    
                                    JToken hubNameValue5 = propertiesValue2["hubName"];
                                    if (hubNameValue5 != null && hubNameValue5.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance5 = ((string)hubNameValue5);
                                        customLinkedServiceInstance.HubName = hubNameInstance5;
                                    }
                                    
                                    JToken errorMessageValue5 = propertiesValue2["errorMessage"];
                                    if (errorMessageValue5 != null && errorMessageValue5.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance5 = ((string)errorMessageValue5);
                                        customLinkedServiceInstance.ErrorMessage = errorMessageInstance5;
                                    }
                                    linkedServiceInstance.Properties = customLinkedServiceInstance;
                                }
                                if (typeName == "HDInsightBYOCLinkedService")
                                {
                                    HDInsightBYOCLinkedService hDInsightBYOCLinkedServiceInstance = new HDInsightBYOCLinkedService();
                                    
                                    JToken clusterUriValue = propertiesValue2["clusterUri"];
                                    if (clusterUriValue != null && clusterUriValue.Type != JTokenType.Null)
                                    {
                                        string clusterUriInstance = ((string)clusterUriValue);
                                        hDInsightBYOCLinkedServiceInstance.ClusterUri = clusterUriInstance;
                                    }
                                    
                                    JToken userNameValue = propertiesValue2["userName"];
                                    if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                    {
                                        string userNameInstance = ((string)userNameValue);
                                        hDInsightBYOCLinkedServiceInstance.UserName = userNameInstance;
                                    }
                                    
                                    JToken passwordValue = propertiesValue2["password"];
                                    if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                    {
                                        string passwordInstance = ((string)passwordValue);
                                        hDInsightBYOCLinkedServiceInstance.Password = passwordInstance;
                                    }
                                    
                                    JToken linkedServiceNameValue2 = propertiesValue2["linkedServiceName"];
                                    if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                        hDInsightBYOCLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance2;
                                    }
                                    
                                    JToken hcatalogValue3 = propertiesValue2["hcatalog"];
                                    if (hcatalogValue3 != null && hcatalogValue3.Type != JTokenType.Null)
                                    {
                                        HCatalogProperties hcatalogInstance = new HCatalogProperties();
                                        hDInsightBYOCLinkedServiceInstance.Hcatalog = hcatalogInstance;
                                        
                                        JToken linkedServiceNameValue3 = hcatalogValue3["linkedServiceName"];
                                        if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                            hcatalogInstance.LinkedServiceName = linkedServiceNameInstance3;
                                        }
                                        
                                        JToken recoverPartitionsValue = hcatalogValue3["recoverPartitions"];
                                        if (recoverPartitionsValue != null && recoverPartitionsValue.Type != JTokenType.Null)
                                        {
                                            bool recoverPartitionsInstance = ((bool)recoverPartitionsValue);
                                            hcatalogInstance.RecoverPartitions = recoverPartitionsInstance;
                                        }
                                        
                                        JToken alterSchemaValue = hcatalogValue3["alterSchema"];
                                        if (alterSchemaValue != null && alterSchemaValue.Type != JTokenType.Null)
                                        {
                                            bool alterSchemaInstance = ((bool)alterSchemaValue);
                                            hcatalogInstance.AlterSchema = alterSchemaInstance;
                                        }
                                    }
                                    
                                    JToken descriptionValue6 = propertiesValue2["description"];
                                    if (descriptionValue6 != null && descriptionValue6.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance6 = ((string)descriptionValue6);
                                        hDInsightBYOCLinkedServiceInstance.Description = descriptionInstance6;
                                    }
                                    
                                    JToken provisioningStateValue6 = propertiesValue2["provisioningState"];
                                    if (provisioningStateValue6 != null && provisioningStateValue6.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance6 = ((string)provisioningStateValue6);
                                        hDInsightBYOCLinkedServiceInstance.ProvisioningState = provisioningStateInstance6;
                                    }
                                    
                                    JToken hubNameValue6 = propertiesValue2["hubName"];
                                    if (hubNameValue6 != null && hubNameValue6.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance6 = ((string)hubNameValue6);
                                        hDInsightBYOCLinkedServiceInstance.HubName = hubNameInstance6;
                                    }
                                    
                                    JToken errorMessageValue6 = propertiesValue2["errorMessage"];
                                    if (errorMessageValue6 != null && errorMessageValue6.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance6 = ((string)errorMessageValue6);
                                        hDInsightBYOCLinkedServiceInstance.ErrorMessage = errorMessageInstance6;
                                    }
                                    linkedServiceInstance.Properties = hDInsightBYOCLinkedServiceInstance;
                                }
                                if (typeName == "HDInsightOnDemandLinkedService")
                                {
                                    HDInsightOnDemandLinkedService hDInsightOnDemandLinkedServiceInstance = new HDInsightOnDemandLinkedService();
                                    
                                    JToken versionValue = propertiesValue2["version"];
                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                    {
                                        string versionInstance = ((string)versionValue);
                                        hDInsightOnDemandLinkedServiceInstance.Version = versionInstance;
                                    }
                                    
                                    JToken clusterTypeValue = propertiesValue2["clusterType"];
                                    if (clusterTypeValue != null && clusterTypeValue.Type != JTokenType.Null)
                                    {
                                        string clusterTypeInstance = ((string)clusterTypeValue);
                                        hDInsightOnDemandLinkedServiceInstance.ClusterType = clusterTypeInstance;
                                    }
                                    
                                    JToken clusterSizeValue = propertiesValue2["clusterSize"];
                                    if (clusterSizeValue != null && clusterSizeValue.Type != JTokenType.Null)
                                    {
                                        int clusterSizeInstance = ((int)clusterSizeValue);
                                        hDInsightOnDemandLinkedServiceInstance.ClusterSize = clusterSizeInstance;
                                    }
                                    
                                    JToken timeToLiveValue = propertiesValue2["timeToLive"];
                                    if (timeToLiveValue != null && timeToLiveValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan timeToLiveInstance = TimeSpan.Parse(((string)timeToLiveValue), CultureInfo.InvariantCulture);
                                        hDInsightOnDemandLinkedServiceInstance.TimeToLive = timeToLiveInstance;
                                    }
                                    
                                    JToken linkedServiceNameValue4 = propertiesValue2["linkedServiceName"];
                                    if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                        hDInsightOnDemandLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance4;
                                    }
                                    
                                    JToken hiveCustomLibrariesContainerValue = propertiesValue2["hiveCustomLibrariesContainer"];
                                    if (hiveCustomLibrariesContainerValue != null && hiveCustomLibrariesContainerValue.Type != JTokenType.Null)
                                    {
                                        string hiveCustomLibrariesContainerInstance = ((string)hiveCustomLibrariesContainerValue);
                                        hDInsightOnDemandLinkedServiceInstance.HiveCustomLibrariesContainer = hiveCustomLibrariesContainerInstance;
                                    }
                                    
                                    JToken coreConfigurationSequenceElement = ((JToken)propertiesValue2["coreConfiguration"]);
                                    if (coreConfigurationSequenceElement != null && coreConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in coreConfigurationSequenceElement)
                                        {
                                            string coreConfigurationKey2 = ((string)property2.Name);
                                            string coreConfigurationValue2 = ((string)property2.Value);
                                            hDInsightOnDemandLinkedServiceInstance.CoreConfiguration.Add(coreConfigurationKey2, coreConfigurationValue2);
                                        }
                                    }
                                    
                                    JToken hBaseConfigurationSequenceElement = ((JToken)propertiesValue2["hBaseConfiguration"]);
                                    if (hBaseConfigurationSequenceElement != null && hBaseConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property3 in hBaseConfigurationSequenceElement)
                                        {
                                            string hBaseConfigurationKey2 = ((string)property3.Name);
                                            string hBaseConfigurationValue2 = ((string)property3.Value);
                                            hDInsightOnDemandLinkedServiceInstance.HBaseConfiguration.Add(hBaseConfigurationKey2, hBaseConfigurationValue2);
                                        }
                                    }
                                    
                                    JToken hdfsConfigurationSequenceElement = ((JToken)propertiesValue2["hdfsConfiguration"]);
                                    if (hdfsConfigurationSequenceElement != null && hdfsConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property4 in hdfsConfigurationSequenceElement)
                                        {
                                            string hdfsConfigurationKey2 = ((string)property4.Name);
                                            string hdfsConfigurationValue2 = ((string)property4.Value);
                                            hDInsightOnDemandLinkedServiceInstance.HdfsConfiguration.Add(hdfsConfigurationKey2, hdfsConfigurationValue2);
                                        }
                                    }
                                    
                                    JToken hiveConfigurationSequenceElement = ((JToken)propertiesValue2["hiveConfiguration"]);
                                    if (hiveConfigurationSequenceElement != null && hiveConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property5 in hiveConfigurationSequenceElement)
                                        {
                                            string hiveConfigurationKey2 = ((string)property5.Name);
                                            string hiveConfigurationValue2 = ((string)property5.Value);
                                            hDInsightOnDemandLinkedServiceInstance.HiveConfiguration.Add(hiveConfigurationKey2, hiveConfigurationValue2);
                                        }
                                    }
                                    
                                    JToken mapReduceConfigurationSequenceElement = ((JToken)propertiesValue2["mapReduceConfiguration"]);
                                    if (mapReduceConfigurationSequenceElement != null && mapReduceConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property6 in mapReduceConfigurationSequenceElement)
                                        {
                                            string mapReduceConfigurationKey2 = ((string)property6.Name);
                                            string mapReduceConfigurationValue2 = ((string)property6.Value);
                                            hDInsightOnDemandLinkedServiceInstance.MapReduceConfiguration.Add(mapReduceConfigurationKey2, mapReduceConfigurationValue2);
                                        }
                                    }
                                    
                                    JToken oozieConfigurationSequenceElement = ((JToken)propertiesValue2["oozieConfiguration"]);
                                    if (oozieConfigurationSequenceElement != null && oozieConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property7 in oozieConfigurationSequenceElement)
                                        {
                                            string oozieConfigurationKey2 = ((string)property7.Name);
                                            string oozieConfigurationValue2 = ((string)property7.Value);
                                            hDInsightOnDemandLinkedServiceInstance.OozieConfiguration.Add(oozieConfigurationKey2, oozieConfigurationValue2);
                                        }
                                    }
                                    
                                    JToken stormConfigurationSequenceElement = ((JToken)propertiesValue2["stormConfiguration"]);
                                    if (stormConfigurationSequenceElement != null && stormConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property8 in stormConfigurationSequenceElement)
                                        {
                                            string stormConfigurationKey2 = ((string)property8.Name);
                                            string stormConfigurationValue2 = ((string)property8.Value);
                                            hDInsightOnDemandLinkedServiceInstance.StormConfiguration.Add(stormConfigurationKey2, stormConfigurationValue2);
                                        }
                                    }
                                    
                                    JToken sparkConfigurationSequenceElement = ((JToken)propertiesValue2["sparkConfiguration"]);
                                    if (sparkConfigurationSequenceElement != null && sparkConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property9 in sparkConfigurationSequenceElement)
                                        {
                                            string sparkConfigurationKey2 = ((string)property9.Name);
                                            string sparkConfigurationValue2 = ((string)property9.Value);
                                            hDInsightOnDemandLinkedServiceInstance.SparkConfiguration.Add(sparkConfigurationKey2, sparkConfigurationValue2);
                                        }
                                    }
                                    
                                    JToken yarnConfigurationSequenceElement = ((JToken)propertiesValue2["yarnConfiguration"]);
                                    if (yarnConfigurationSequenceElement != null && yarnConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property10 in yarnConfigurationSequenceElement)
                                        {
                                            string yarnConfigurationKey2 = ((string)property10.Name);
                                            string yarnConfigurationValue2 = ((string)property10.Value);
                                            hDInsightOnDemandLinkedServiceInstance.YarnConfiguration.Add(yarnConfigurationKey2, yarnConfigurationValue2);
                                        }
                                    }
                                    
                                    JToken additionalLinkedServiceNamesArray2 = propertiesValue2["additionalLinkedServiceNames"];
                                    if (additionalLinkedServiceNamesArray2 != null && additionalLinkedServiceNamesArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken additionalLinkedServiceNamesValue in ((JArray)additionalLinkedServiceNamesArray2))
                                        {
                                            hDInsightOnDemandLinkedServiceInstance.AdditionalLinkedServiceNames.Add(((string)additionalLinkedServiceNamesValue));
                                        }
                                    }
                                    
                                    JToken hcatalogValue4 = propertiesValue2["hcatalog"];
                                    if (hcatalogValue4 != null && hcatalogValue4.Type != JTokenType.Null)
                                    {
                                        HCatalogProperties hcatalogInstance2 = new HCatalogProperties();
                                        hDInsightOnDemandLinkedServiceInstance.Hcatalog = hcatalogInstance2;
                                        
                                        JToken linkedServiceNameValue5 = hcatalogValue4["linkedServiceName"];
                                        if (linkedServiceNameValue5 != null && linkedServiceNameValue5.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance5 = ((string)linkedServiceNameValue5);
                                            hcatalogInstance2.LinkedServiceName = linkedServiceNameInstance5;
                                        }
                                        
                                        JToken recoverPartitionsValue2 = hcatalogValue4["recoverPartitions"];
                                        if (recoverPartitionsValue2 != null && recoverPartitionsValue2.Type != JTokenType.Null)
                                        {
                                            bool recoverPartitionsInstance2 = ((bool)recoverPartitionsValue2);
                                            hcatalogInstance2.RecoverPartitions = recoverPartitionsInstance2;
                                        }
                                        
                                        JToken alterSchemaValue2 = hcatalogValue4["alterSchema"];
                                        if (alterSchemaValue2 != null && alterSchemaValue2.Type != JTokenType.Null)
                                        {
                                            bool alterSchemaInstance2 = ((bool)alterSchemaValue2);
                                            hcatalogInstance2.AlterSchema = alterSchemaInstance2;
                                        }
                                    }
                                    
                                    JToken dataNodeSizeValue = propertiesValue2["dataNodeSize"];
                                    if (dataNodeSizeValue != null && dataNodeSizeValue.Type != JTokenType.Null)
                                    {
                                        string dataNodeSizeInstance = ((string)dataNodeSizeValue);
                                        hDInsightOnDemandLinkedServiceInstance.DataNodeSize = dataNodeSizeInstance;
                                    }
                                    
                                    JToken headNodeSizeValue = propertiesValue2["headNodeSize"];
                                    if (headNodeSizeValue != null && headNodeSizeValue.Type != JTokenType.Null)
                                    {
                                        string headNodeSizeInstance = ((string)headNodeSizeValue);
                                        hDInsightOnDemandLinkedServiceInstance.HeadNodeSize = headNodeSizeInstance;
                                    }
                                    
                                    JToken zookeeperNodeSizeValue = propertiesValue2["zookeeperNodeSize"];
                                    if (zookeeperNodeSizeValue != null && zookeeperNodeSizeValue.Type != JTokenType.Null)
                                    {
                                        string zookeeperNodeSizeInstance = ((string)zookeeperNodeSizeValue);
                                        hDInsightOnDemandLinkedServiceInstance.ZookeeperNodeSize = zookeeperNodeSizeInstance;
                                    }
                                    
                                    JToken osTypeValue = propertiesValue2["osType"];
                                    if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                    {
                                        string osTypeInstance = ((string)osTypeValue);
                                        hDInsightOnDemandLinkedServiceInstance.OSType = osTypeInstance;
                                    }
                                    
                                    JToken sshPasswordValue = propertiesValue2["sshPassword"];
                                    if (sshPasswordValue != null && sshPasswordValue.Type != JTokenType.Null)
                                    {
                                        string sshPasswordInstance = ((string)sshPasswordValue);
                                        hDInsightOnDemandLinkedServiceInstance.SshPassword = sshPasswordInstance;
                                    }
                                    
                                    JToken sshPublicKeyValue = propertiesValue2["sshPublicKey"];
                                    if (sshPublicKeyValue != null && sshPublicKeyValue.Type != JTokenType.Null)
                                    {
                                        string sshPublicKeyInstance = ((string)sshPublicKeyValue);
                                        hDInsightOnDemandLinkedServiceInstance.SshPublicKey = sshPublicKeyInstance;
                                    }
                                    
                                    JToken sshUserNameValue = propertiesValue2["sshUserName"];
                                    if (sshUserNameValue != null && sshUserNameValue.Type != JTokenType.Null)
                                    {
                                        string sshUserNameInstance = ((string)sshUserNameValue);
                                        hDInsightOnDemandLinkedServiceInstance.SshUserName = sshUserNameInstance;
                                    }
                                    
                                    JToken descriptionValue7 = propertiesValue2["description"];
                                    if (descriptionValue7 != null && descriptionValue7.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance7 = ((string)descriptionValue7);
                                        hDInsightOnDemandLinkedServiceInstance.Description = descriptionInstance7;
                                    }
                                    
                                    JToken provisioningStateValue7 = propertiesValue2["provisioningState"];
                                    if (provisioningStateValue7 != null && provisioningStateValue7.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance7 = ((string)provisioningStateValue7);
                                        hDInsightOnDemandLinkedServiceInstance.ProvisioningState = provisioningStateInstance7;
                                    }
                                    
                                    JToken hubNameValue7 = propertiesValue2["hubName"];
                                    if (hubNameValue7 != null && hubNameValue7.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance7 = ((string)hubNameValue7);
                                        hDInsightOnDemandLinkedServiceInstance.HubName = hubNameInstance7;
                                    }
                                    
                                    JToken errorMessageValue7 = propertiesValue2["errorMessage"];
                                    if (errorMessageValue7 != null && errorMessageValue7.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance7 = ((string)errorMessageValue7);
                                        hDInsightOnDemandLinkedServiceInstance.ErrorMessage = errorMessageInstance7;
                                    }
                                    linkedServiceInstance.Properties = hDInsightOnDemandLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesDb2LinkedService")
                                {
                                    OnPremisesDb2LinkedService onPremisesDb2LinkedServiceInstance = new OnPremisesDb2LinkedService();
                                    
                                    JToken serverValue = propertiesValue2["server"];
                                    if (serverValue != null && serverValue.Type != JTokenType.Null)
                                    {
                                        string serverInstance = ((string)serverValue);
                                        onPremisesDb2LinkedServiceInstance.Server = serverInstance;
                                    }
                                    
                                    JToken databaseValue = propertiesValue2["database"];
                                    if (databaseValue != null && databaseValue.Type != JTokenType.Null)
                                    {
                                        string databaseInstance = ((string)databaseValue);
                                        onPremisesDb2LinkedServiceInstance.Database = databaseInstance;
                                    }
                                    
                                    JToken schemaValue = propertiesValue2["schema"];
                                    if (schemaValue != null && schemaValue.Type != JTokenType.Null)
                                    {
                                        string schemaInstance = ((string)schemaValue);
                                        onPremisesDb2LinkedServiceInstance.Schema = schemaInstance;
                                    }
                                    
                                    JToken authenticationTypeValue = propertiesValue2["authenticationType"];
                                    if (authenticationTypeValue != null && authenticationTypeValue.Type != JTokenType.Null)
                                    {
                                        string authenticationTypeInstance = ((string)authenticationTypeValue);
                                        onPremisesDb2LinkedServiceInstance.AuthenticationType = authenticationTypeInstance;
                                    }
                                    
                                    JToken usernameValue = propertiesValue2["username"];
                                    if (usernameValue != null && usernameValue.Type != JTokenType.Null)
                                    {
                                        string usernameInstance = ((string)usernameValue);
                                        onPremisesDb2LinkedServiceInstance.Username = usernameInstance;
                                    }
                                    
                                    JToken passwordValue2 = propertiesValue2["password"];
                                    if (passwordValue2 != null && passwordValue2.Type != JTokenType.Null)
                                    {
                                        string passwordInstance2 = ((string)passwordValue2);
                                        onPremisesDb2LinkedServiceInstance.Password = passwordInstance2;
                                    }
                                    
                                    JToken gatewayNameValue = propertiesValue2["gatewayName"];
                                    if (gatewayNameValue != null && gatewayNameValue.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance = ((string)gatewayNameValue);
                                        onPremisesDb2LinkedServiceInstance.GatewayName = gatewayNameInstance;
                                    }
                                    
                                    JToken encryptedCredentialValue = propertiesValue2["encryptedCredential"];
                                    if (encryptedCredentialValue != null && encryptedCredentialValue.Type != JTokenType.Null)
                                    {
                                        string encryptedCredentialInstance = ((string)encryptedCredentialValue);
                                        onPremisesDb2LinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance;
                                    }
                                    
                                    JToken descriptionValue8 = propertiesValue2["description"];
                                    if (descriptionValue8 != null && descriptionValue8.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance8 = ((string)descriptionValue8);
                                        onPremisesDb2LinkedServiceInstance.Description = descriptionInstance8;
                                    }
                                    
                                    JToken provisioningStateValue8 = propertiesValue2["provisioningState"];
                                    if (provisioningStateValue8 != null && provisioningStateValue8.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance8 = ((string)provisioningStateValue8);
                                        onPremisesDb2LinkedServiceInstance.ProvisioningState = provisioningStateInstance8;
                                    }
                                    
                                    JToken hubNameValue8 = propertiesValue2["hubName"];
                                    if (hubNameValue8 != null && hubNameValue8.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance8 = ((string)hubNameValue8);
                                        onPremisesDb2LinkedServiceInstance.HubName = hubNameInstance8;
                                    }
                                    
                                    JToken errorMessageValue8 = propertiesValue2["errorMessage"];
                                    if (errorMessageValue8 != null && errorMessageValue8.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance8 = ((string)errorMessageValue8);
                                        onPremisesDb2LinkedServiceInstance.ErrorMessage = errorMessageInstance8;
                                    }
                                    linkedServiceInstance.Properties = onPremisesDb2LinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesFileSystemLinkedService")
                                {
                                    OnPremisesFileSystemLinkedService onPremisesFileSystemLinkedServiceInstance = new OnPremisesFileSystemLinkedService();
                                    
                                    JToken hostValue = propertiesValue2["host"];
                                    if (hostValue != null && hostValue.Type != JTokenType.Null)
                                    {
                                        string hostInstance = ((string)hostValue);
                                        onPremisesFileSystemLinkedServiceInstance.Host = hostInstance;
                                    }
                                    
                                    JToken gatewayNameValue2 = propertiesValue2["gatewayName"];
                                    if (gatewayNameValue2 != null && gatewayNameValue2.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance2 = ((string)gatewayNameValue2);
                                        onPremisesFileSystemLinkedServiceInstance.GatewayName = gatewayNameInstance2;
                                    }
                                    
                                    JToken userIdValue = propertiesValue2["userId"];
                                    if (userIdValue != null && userIdValue.Type != JTokenType.Null)
                                    {
                                        string userIdInstance = ((string)userIdValue);
                                        onPremisesFileSystemLinkedServiceInstance.UserId = userIdInstance;
                                    }
                                    
                                    JToken passwordValue3 = propertiesValue2["password"];
                                    if (passwordValue3 != null && passwordValue3.Type != JTokenType.Null)
                                    {
                                        string passwordInstance3 = ((string)passwordValue3);
                                        onPremisesFileSystemLinkedServiceInstance.Password = passwordInstance3;
                                    }
                                    
                                    JToken encryptedCredentialValue2 = propertiesValue2["encryptedCredential"];
                                    if (encryptedCredentialValue2 != null && encryptedCredentialValue2.Type != JTokenType.Null)
                                    {
                                        string encryptedCredentialInstance2 = ((string)encryptedCredentialValue2);
                                        onPremisesFileSystemLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance2;
                                    }
                                    
                                    JToken descriptionValue9 = propertiesValue2["description"];
                                    if (descriptionValue9 != null && descriptionValue9.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance9 = ((string)descriptionValue9);
                                        onPremisesFileSystemLinkedServiceInstance.Description = descriptionInstance9;
                                    }
                                    
                                    JToken provisioningStateValue9 = propertiesValue2["provisioningState"];
                                    if (provisioningStateValue9 != null && provisioningStateValue9.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance9 = ((string)provisioningStateValue9);
                                        onPremisesFileSystemLinkedServiceInstance.ProvisioningState = provisioningStateInstance9;
                                    }
                                    
                                    JToken hubNameValue9 = propertiesValue2["hubName"];
                                    if (hubNameValue9 != null && hubNameValue9.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance9 = ((string)hubNameValue9);
                                        onPremisesFileSystemLinkedServiceInstance.HubName = hubNameInstance9;
                                    }
                                    
                                    JToken errorMessageValue9 = propertiesValue2["errorMessage"];
                                    if (errorMessageValue9 != null && errorMessageValue9.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance9 = ((string)errorMessageValue9);
                                        onPremisesFileSystemLinkedServiceInstance.ErrorMessage = errorMessageInstance9;
                                    }
                                    linkedServiceInstance.Properties = onPremisesFileSystemLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesMySqlLinkedService")
                                {
                                    OnPremisesMySqlLinkedService onPremisesMySqlLinkedServiceInstance = new OnPremisesMySqlLinkedService();
                                    
                                    JToken serverValue2 = propertiesValue2["server"];
                                    if (serverValue2 != null && serverValue2.Type != JTokenType.Null)
                                    {
                                        string serverInstance2 = ((string)serverValue2);
                                        onPremisesMySqlLinkedServiceInstance.Server = serverInstance2;
                                    }
                                    
                                    JToken databaseValue2 = propertiesValue2["database"];
                                    if (databaseValue2 != null && databaseValue2.Type != JTokenType.Null)
                                    {
                                        string databaseInstance2 = ((string)databaseValue2);
                                        onPremisesMySqlLinkedServiceInstance.Database = databaseInstance2;
                                    }
                                    
                                    JToken schemaValue2 = propertiesValue2["schema"];
                                    if (schemaValue2 != null && schemaValue2.Type != JTokenType.Null)
                                    {
                                        string schemaInstance2 = ((string)schemaValue2);
                                        onPremisesMySqlLinkedServiceInstance.Schema = schemaInstance2;
                                    }
                                    
                                    JToken authenticationTypeValue2 = propertiesValue2["authenticationType"];
                                    if (authenticationTypeValue2 != null && authenticationTypeValue2.Type != JTokenType.Null)
                                    {
                                        string authenticationTypeInstance2 = ((string)authenticationTypeValue2);
                                        onPremisesMySqlLinkedServiceInstance.AuthenticationType = authenticationTypeInstance2;
                                    }
                                    
                                    JToken usernameValue2 = propertiesValue2["username"];
                                    if (usernameValue2 != null && usernameValue2.Type != JTokenType.Null)
                                    {
                                        string usernameInstance2 = ((string)usernameValue2);
                                        onPremisesMySqlLinkedServiceInstance.Username = usernameInstance2;
                                    }
                                    
                                    JToken passwordValue4 = propertiesValue2["password"];
                                    if (passwordValue4 != null && passwordValue4.Type != JTokenType.Null)
                                    {
                                        string passwordInstance4 = ((string)passwordValue4);
                                        onPremisesMySqlLinkedServiceInstance.Password = passwordInstance4;
                                    }
                                    
                                    JToken gatewayNameValue3 = propertiesValue2["gatewayName"];
                                    if (gatewayNameValue3 != null && gatewayNameValue3.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance3 = ((string)gatewayNameValue3);
                                        onPremisesMySqlLinkedServiceInstance.GatewayName = gatewayNameInstance3;
                                    }
                                    
                                    JToken encryptedCredentialValue3 = propertiesValue2["encryptedCredential"];
                                    if (encryptedCredentialValue3 != null && encryptedCredentialValue3.Type != JTokenType.Null)
                                    {
                                        string encryptedCredentialInstance3 = ((string)encryptedCredentialValue3);
                                        onPremisesMySqlLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance3;
                                    }
                                    
                                    JToken descriptionValue10 = propertiesValue2["description"];
                                    if (descriptionValue10 != null && descriptionValue10.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance10 = ((string)descriptionValue10);
                                        onPremisesMySqlLinkedServiceInstance.Description = descriptionInstance10;
                                    }
                                    
                                    JToken provisioningStateValue10 = propertiesValue2["provisioningState"];
                                    if (provisioningStateValue10 != null && provisioningStateValue10.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance10 = ((string)provisioningStateValue10);
                                        onPremisesMySqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance10;
                                    }
                                    
                                    JToken hubNameValue10 = propertiesValue2["hubName"];
                                    if (hubNameValue10 != null && hubNameValue10.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance10 = ((string)hubNameValue10);
                                        onPremisesMySqlLinkedServiceInstance.HubName = hubNameInstance10;
                                    }
                                    
                                    JToken errorMessageValue10 = propertiesValue2["errorMessage"];
                                    if (errorMessageValue10 != null && errorMessageValue10.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance10 = ((string)errorMessageValue10);
                                        onPremisesMySqlLinkedServiceInstance.ErrorMessage = errorMessageInstance10;
                                    }
                                    linkedServiceInstance.Properties = onPremisesMySqlLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesOracleLinkedService")
                                {
                                    OnPremisesOracleLinkedService onPremisesOracleLinkedServiceInstance = new OnPremisesOracleLinkedService();
                                    
                                    JToken connectionStringValue3 = propertiesValue2["connectionString"];
                                    if (connectionStringValue3 != null && connectionStringValue3.Type != JTokenType.Null)
                                    {
                                        string connectionStringInstance3 = ((string)connectionStringValue3);
                                        onPremisesOracleLinkedServiceInstance.ConnectionString = connectionStringInstance3;
                                    }
                                    
                                    JToken gatewayNameValue4 = propertiesValue2["gatewayName"];
                                    if (gatewayNameValue4 != null && gatewayNameValue4.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance4 = ((string)gatewayNameValue4);
                                        onPremisesOracleLinkedServiceInstance.GatewayName = gatewayNameInstance4;
                                    }
                                    
                                    JToken userNameValue2 = propertiesValue2["userName"];
                                    if (userNameValue2 != null && userNameValue2.Type != JTokenType.Null)
                                    {
                                        string userNameInstance2 = ((string)userNameValue2);
                                        onPremisesOracleLinkedServiceInstance.UserName = userNameInstance2;
                                    }
                                    
                                    JToken passwordValue5 = propertiesValue2["password"];
                                    if (passwordValue5 != null && passwordValue5.Type != JTokenType.Null)
                                    {
                                        string passwordInstance5 = ((string)passwordValue5);
                                        onPremisesOracleLinkedServiceInstance.Password = passwordInstance5;
                                    }
                                    
                                    JToken descriptionValue11 = propertiesValue2["description"];
                                    if (descriptionValue11 != null && descriptionValue11.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance11 = ((string)descriptionValue11);
                                        onPremisesOracleLinkedServiceInstance.Description = descriptionInstance11;
                                    }
                                    
                                    JToken provisioningStateValue11 = propertiesValue2["provisioningState"];
                                    if (provisioningStateValue11 != null && provisioningStateValue11.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance11 = ((string)provisioningStateValue11);
                                        onPremisesOracleLinkedServiceInstance.ProvisioningState = provisioningStateInstance11;
                                    }
                                    
                                    JToken hubNameValue11 = propertiesValue2["hubName"];
                                    if (hubNameValue11 != null && hubNameValue11.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance11 = ((string)hubNameValue11);
                                        onPremisesOracleLinkedServiceInstance.HubName = hubNameInstance11;
                                    }
                                    
                                    JToken errorMessageValue11 = propertiesValue2["errorMessage"];
                                    if (errorMessageValue11 != null && errorMessageValue11.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance11 = ((string)errorMessageValue11);
                                        onPremisesOracleLinkedServiceInstance.ErrorMessage = errorMessageInstance11;
                                    }
                                    linkedServiceInstance.Properties = onPremisesOracleLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesPostgreSqlLinkedService")
                                {
                                    OnPremisesPostgreSqlLinkedService onPremisesPostgreSqlLinkedServiceInstance = new OnPremisesPostgreSqlLinkedService();
                                    
                                    JToken serverValue3 = propertiesValue2["server"];
                                    if (serverValue3 != null && serverValue3.Type != JTokenType.Null)
                                    {
                                        string serverInstance3 = ((string)serverValue3);
                                        onPremisesPostgreSqlLinkedServiceInstance.Server = serverInstance3;
                                    }
                                    
                                    JToken databaseValue3 = propertiesValue2["database"];
                                    if (databaseValue3 != null && databaseValue3.Type != JTokenType.Null)
                                    {
                                        string databaseInstance3 = ((string)databaseValue3);
                                        onPremisesPostgreSqlLinkedServiceInstance.Database = databaseInstance3;
                                    }
                                    
                                    JToken schemaValue3 = propertiesValue2["schema"];
                                    if (schemaValue3 != null && schemaValue3.Type != JTokenType.Null)
                                    {
                                        string schemaInstance3 = ((string)schemaValue3);
                                        onPremisesPostgreSqlLinkedServiceInstance.Schema = schemaInstance3;
                                    }
                                    
                                    JToken authenticationTypeValue3 = propertiesValue2["authenticationType"];
                                    if (authenticationTypeValue3 != null && authenticationTypeValue3.Type != JTokenType.Null)
                                    {
                                        string authenticationTypeInstance3 = ((string)authenticationTypeValue3);
                                        onPremisesPostgreSqlLinkedServiceInstance.AuthenticationType = authenticationTypeInstance3;
                                    }
                                    
                                    JToken usernameValue3 = propertiesValue2["username"];
                                    if (usernameValue3 != null && usernameValue3.Type != JTokenType.Null)
                                    {
                                        string usernameInstance3 = ((string)usernameValue3);
                                        onPremisesPostgreSqlLinkedServiceInstance.Username = usernameInstance3;
                                    }
                                    
                                    JToken passwordValue6 = propertiesValue2["password"];
                                    if (passwordValue6 != null && passwordValue6.Type != JTokenType.Null)
                                    {
                                        string passwordInstance6 = ((string)passwordValue6);
                                        onPremisesPostgreSqlLinkedServiceInstance.Password = passwordInstance6;
                                    }
                                    
                                    JToken gatewayNameValue5 = propertiesValue2["gatewayName"];
                                    if (gatewayNameValue5 != null && gatewayNameValue5.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance5 = ((string)gatewayNameValue5);
                                        onPremisesPostgreSqlLinkedServiceInstance.GatewayName = gatewayNameInstance5;
                                    }
                                    
                                    JToken encryptedCredentialValue4 = propertiesValue2["encryptedCredential"];
                                    if (encryptedCredentialValue4 != null && encryptedCredentialValue4.Type != JTokenType.Null)
                                    {
                                        string encryptedCredentialInstance4 = ((string)encryptedCredentialValue4);
                                        onPremisesPostgreSqlLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance4;
                                    }
                                    
                                    JToken descriptionValue12 = propertiesValue2["description"];
                                    if (descriptionValue12 != null && descriptionValue12.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance12 = ((string)descriptionValue12);
                                        onPremisesPostgreSqlLinkedServiceInstance.Description = descriptionInstance12;
                                    }
                                    
                                    JToken provisioningStateValue12 = propertiesValue2["provisioningState"];
                                    if (provisioningStateValue12 != null && provisioningStateValue12.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance12 = ((string)provisioningStateValue12);
                                        onPremisesPostgreSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance12;
                                    }
                                    
                                    JToken hubNameValue12 = propertiesValue2["hubName"];
                                    if (hubNameValue12 != null && hubNameValue12.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance12 = ((string)hubNameValue12);
                                        onPremisesPostgreSqlLinkedServiceInstance.HubName = hubNameInstance12;
                                    }
                                    
                                    JToken errorMessageValue12 = propertiesValue2["errorMessage"];
                                    if (errorMessageValue12 != null && errorMessageValue12.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance12 = ((string)errorMessageValue12);
                                        onPremisesPostgreSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance12;
                                    }
                                    linkedServiceInstance.Properties = onPremisesPostgreSqlLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesSqlLinkedService")
                                {
                                    OnPremisesSqlLinkedService onPremisesSqlLinkedServiceInstance = new OnPremisesSqlLinkedService();
                                    
                                    JToken connectionStringValue4 = propertiesValue2["connectionString"];
                                    if (connectionStringValue4 != null && connectionStringValue4.Type != JTokenType.Null)
                                    {
                                        string connectionStringInstance4 = ((string)connectionStringValue4);
                                        onPremisesSqlLinkedServiceInstance.ConnectionString = connectionStringInstance4;
                                    }
                                    
                                    JToken gatewayNameValue6 = propertiesValue2["gatewayName"];
                                    if (gatewayNameValue6 != null && gatewayNameValue6.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance6 = ((string)gatewayNameValue6);
                                        onPremisesSqlLinkedServiceInstance.GatewayName = gatewayNameInstance6;
                                    }
                                    
                                    JToken userNameValue3 = propertiesValue2["userName"];
                                    if (userNameValue3 != null && userNameValue3.Type != JTokenType.Null)
                                    {
                                        string userNameInstance3 = ((string)userNameValue3);
                                        onPremisesSqlLinkedServiceInstance.UserName = userNameInstance3;
                                    }
                                    
                                    JToken passwordValue7 = propertiesValue2["password"];
                                    if (passwordValue7 != null && passwordValue7.Type != JTokenType.Null)
                                    {
                                        string passwordInstance7 = ((string)passwordValue7);
                                        onPremisesSqlLinkedServiceInstance.Password = passwordInstance7;
                                    }
                                    
                                    JToken descriptionValue13 = propertiesValue2["description"];
                                    if (descriptionValue13 != null && descriptionValue13.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance13 = ((string)descriptionValue13);
                                        onPremisesSqlLinkedServiceInstance.Description = descriptionInstance13;
                                    }
                                    
                                    JToken provisioningStateValue13 = propertiesValue2["provisioningState"];
                                    if (provisioningStateValue13 != null && provisioningStateValue13.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance13 = ((string)provisioningStateValue13);
                                        onPremisesSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance13;
                                    }
                                    
                                    JToken hubNameValue13 = propertiesValue2["hubName"];
                                    if (hubNameValue13 != null && hubNameValue13.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance13 = ((string)hubNameValue13);
                                        onPremisesSqlLinkedServiceInstance.HubName = hubNameInstance13;
                                    }
                                    
                                    JToken errorMessageValue13 = propertiesValue2["errorMessage"];
                                    if (errorMessageValue13 != null && errorMessageValue13.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance13 = ((string)errorMessageValue13);
                                        onPremisesSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance13;
                                    }
                                    linkedServiceInstance.Properties = onPremisesSqlLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesSybaseLinkedService")
                                {
                                    OnPremisesSybaseLinkedService onPremisesSybaseLinkedServiceInstance = new OnPremisesSybaseLinkedService();
                                    
                                    JToken serverValue4 = propertiesValue2["server"];
                                    if (serverValue4 != null && serverValue4.Type != JTokenType.Null)
                                    {
                                        string serverInstance4 = ((string)serverValue4);
                                        onPremisesSybaseLinkedServiceInstance.Server = serverInstance4;
                                    }
                                    
                                    JToken databaseValue4 = propertiesValue2["database"];
                                    if (databaseValue4 != null && databaseValue4.Type != JTokenType.Null)
                                    {
                                        string databaseInstance4 = ((string)databaseValue4);
                                        onPremisesSybaseLinkedServiceInstance.Database = databaseInstance4;
                                    }
                                    
                                    JToken schemaValue4 = propertiesValue2["schema"];
                                    if (schemaValue4 != null && schemaValue4.Type != JTokenType.Null)
                                    {
                                        string schemaInstance4 = ((string)schemaValue4);
                                        onPremisesSybaseLinkedServiceInstance.Schema = schemaInstance4;
                                    }
                                    
                                    JToken authenticationTypeValue4 = propertiesValue2["authenticationType"];
                                    if (authenticationTypeValue4 != null && authenticationTypeValue4.Type != JTokenType.Null)
                                    {
                                        string authenticationTypeInstance4 = ((string)authenticationTypeValue4);
                                        onPremisesSybaseLinkedServiceInstance.AuthenticationType = authenticationTypeInstance4;
                                    }
                                    
                                    JToken usernameValue4 = propertiesValue2["username"];
                                    if (usernameValue4 != null && usernameValue4.Type != JTokenType.Null)
                                    {
                                        string usernameInstance4 = ((string)usernameValue4);
                                        onPremisesSybaseLinkedServiceInstance.Username = usernameInstance4;
                                    }
                                    
                                    JToken passwordValue8 = propertiesValue2["password"];
                                    if (passwordValue8 != null && passwordValue8.Type != JTokenType.Null)
                                    {
                                        string passwordInstance8 = ((string)passwordValue8);
                                        onPremisesSybaseLinkedServiceInstance.Password = passwordInstance8;
                                    }
                                    
                                    JToken gatewayNameValue7 = propertiesValue2["gatewayName"];
                                    if (gatewayNameValue7 != null && gatewayNameValue7.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance7 = ((string)gatewayNameValue7);
                                        onPremisesSybaseLinkedServiceInstance.GatewayName = gatewayNameInstance7;
                                    }
                                    
                                    JToken encryptedCredentialValue5 = propertiesValue2["encryptedCredential"];
                                    if (encryptedCredentialValue5 != null && encryptedCredentialValue5.Type != JTokenType.Null)
                                    {
                                        string encryptedCredentialInstance5 = ((string)encryptedCredentialValue5);
                                        onPremisesSybaseLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance5;
                                    }
                                    
                                    JToken descriptionValue14 = propertiesValue2["description"];
                                    if (descriptionValue14 != null && descriptionValue14.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance14 = ((string)descriptionValue14);
                                        onPremisesSybaseLinkedServiceInstance.Description = descriptionInstance14;
                                    }
                                    
                                    JToken provisioningStateValue14 = propertiesValue2["provisioningState"];
                                    if (provisioningStateValue14 != null && provisioningStateValue14.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance14 = ((string)provisioningStateValue14);
                                        onPremisesSybaseLinkedServiceInstance.ProvisioningState = provisioningStateInstance14;
                                    }
                                    
                                    JToken hubNameValue14 = propertiesValue2["hubName"];
                                    if (hubNameValue14 != null && hubNameValue14.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance14 = ((string)hubNameValue14);
                                        onPremisesSybaseLinkedServiceInstance.HubName = hubNameInstance14;
                                    }
                                    
                                    JToken errorMessageValue14 = propertiesValue2["errorMessage"];
                                    if (errorMessageValue14 != null && errorMessageValue14.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance14 = ((string)errorMessageValue14);
                                        onPremisesSybaseLinkedServiceInstance.ErrorMessage = errorMessageInstance14;
                                    }
                                    linkedServiceInstance.Properties = onPremisesSybaseLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesTeradataLinkedService")
                                {
                                    OnPremisesTeradataLinkedService onPremisesTeradataLinkedServiceInstance = new OnPremisesTeradataLinkedService();
                                    
                                    JToken serverValue5 = propertiesValue2["server"];
                                    if (serverValue5 != null && serverValue5.Type != JTokenType.Null)
                                    {
                                        string serverInstance5 = ((string)serverValue5);
                                        onPremisesTeradataLinkedServiceInstance.Server = serverInstance5;
                                    }
                                    
                                    JToken databaseValue5 = propertiesValue2["database"];
                                    if (databaseValue5 != null && databaseValue5.Type != JTokenType.Null)
                                    {
                                        string databaseInstance5 = ((string)databaseValue5);
                                        onPremisesTeradataLinkedServiceInstance.Database = databaseInstance5;
                                    }
                                    
                                    JToken schemaValue5 = propertiesValue2["schema"];
                                    if (schemaValue5 != null && schemaValue5.Type != JTokenType.Null)
                                    {
                                        string schemaInstance5 = ((string)schemaValue5);
                                        onPremisesTeradataLinkedServiceInstance.Schema = schemaInstance5;
                                    }
                                    
                                    JToken authenticationTypeValue5 = propertiesValue2["authenticationType"];
                                    if (authenticationTypeValue5 != null && authenticationTypeValue5.Type != JTokenType.Null)
                                    {
                                        string authenticationTypeInstance5 = ((string)authenticationTypeValue5);
                                        onPremisesTeradataLinkedServiceInstance.AuthenticationType = authenticationTypeInstance5;
                                    }
                                    
                                    JToken usernameValue5 = propertiesValue2["username"];
                                    if (usernameValue5 != null && usernameValue5.Type != JTokenType.Null)
                                    {
                                        string usernameInstance5 = ((string)usernameValue5);
                                        onPremisesTeradataLinkedServiceInstance.Username = usernameInstance5;
                                    }
                                    
                                    JToken passwordValue9 = propertiesValue2["password"];
                                    if (passwordValue9 != null && passwordValue9.Type != JTokenType.Null)
                                    {
                                        string passwordInstance9 = ((string)passwordValue9);
                                        onPremisesTeradataLinkedServiceInstance.Password = passwordInstance9;
                                    }
                                    
                                    JToken gatewayNameValue8 = propertiesValue2["gatewayName"];
                                    if (gatewayNameValue8 != null && gatewayNameValue8.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance8 = ((string)gatewayNameValue8);
                                        onPremisesTeradataLinkedServiceInstance.GatewayName = gatewayNameInstance8;
                                    }
                                    
                                    JToken encryptedCredentialValue6 = propertiesValue2["encryptedCredential"];
                                    if (encryptedCredentialValue6 != null && encryptedCredentialValue6.Type != JTokenType.Null)
                                    {
                                        string encryptedCredentialInstance6 = ((string)encryptedCredentialValue6);
                                        onPremisesTeradataLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance6;
                                    }
                                    
                                    JToken descriptionValue15 = propertiesValue2["description"];
                                    if (descriptionValue15 != null && descriptionValue15.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance15 = ((string)descriptionValue15);
                                        onPremisesTeradataLinkedServiceInstance.Description = descriptionInstance15;
                                    }
                                    
                                    JToken provisioningStateValue15 = propertiesValue2["provisioningState"];
                                    if (provisioningStateValue15 != null && provisioningStateValue15.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance15 = ((string)provisioningStateValue15);
                                        onPremisesTeradataLinkedServiceInstance.ProvisioningState = provisioningStateInstance15;
                                    }
                                    
                                    JToken hubNameValue15 = propertiesValue2["hubName"];
                                    if (hubNameValue15 != null && hubNameValue15.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance15 = ((string)hubNameValue15);
                                        onPremisesTeradataLinkedServiceInstance.HubName = hubNameInstance15;
                                    }
                                    
                                    JToken errorMessageValue15 = propertiesValue2["errorMessage"];
                                    if (errorMessageValue15 != null && errorMessageValue15.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance15 = ((string)errorMessageValue15);
                                        onPremisesTeradataLinkedServiceInstance.ErrorMessage = errorMessageInstance15;
                                    }
                                    linkedServiceInstance.Properties = onPremisesTeradataLinkedServiceInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    result.Location = url;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create or update a data factory linkedService with raw json content.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. The name of the data factory.
        /// </param>
        /// <param name='linkedServiceName'>
        /// Required. The name of the data factory table to be created or
        /// updated.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a data
        /// factory linkedService.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update data factory linkedService operation response.
        /// </returns>
        public async Task<LinkedServiceCreateOrUpdateResponse> BeginCreateOrUpdateWithRawJsonContentAsync(string resourceGroupName, string dataFactoryName, string linkedServiceName, LinkedServiceCreateOrUpdateWithRawJsonContentParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (linkedServiceName == null)
            {
                throw new ArgumentNullException("linkedServiceName");
            }
            if (linkedServiceName != null && linkedServiceName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("linkedServiceName");
            }
            if (Regex.IsMatch(linkedServiceName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("linkedServiceName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Content == null)
            {
                throw new ArgumentNullException("parameters.Content");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("linkedServiceName", linkedServiceName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateOrUpdateWithRawJsonContentAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/linkedservices/";
            url = url + Uri.EscapeDataString(linkedServiceName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-01-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = parameters.Content;
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LinkedServiceCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new LinkedServiceCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            LinkedService linkedServiceInstance = new LinkedService();
                            result.LinkedService = linkedServiceInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                linkedServiceInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue["type"]);
                                if (typeName == "AzureBatchLinkedService")
                                {
                                    AzureBatchLinkedService azureBatchLinkedServiceInstance = new AzureBatchLinkedService();
                                    
                                    JToken accountNameValue = propertiesValue["accountName"];
                                    if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                    {
                                        string accountNameInstance = ((string)accountNameValue);
                                        azureBatchLinkedServiceInstance.AccountName = accountNameInstance;
                                    }
                                    
                                    JToken accessKeyValue = propertiesValue["accessKey"];
                                    if (accessKeyValue != null && accessKeyValue.Type != JTokenType.Null)
                                    {
                                        string accessKeyInstance = ((string)accessKeyValue);
                                        azureBatchLinkedServiceInstance.AccessKey = accessKeyInstance;
                                    }
                                    
                                    JToken poolNameValue = propertiesValue["poolName"];
                                    if (poolNameValue != null && poolNameValue.Type != JTokenType.Null)
                                    {
                                        string poolNameInstance = ((string)poolNameValue);
                                        azureBatchLinkedServiceInstance.PoolName = poolNameInstance;
                                    }
                                    
                                    JToken linkedServiceNameValue = propertiesValue["linkedServiceName"];
                                    if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                        azureBatchLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance;
                                    }
                                    
                                    JToken descriptionValue = propertiesValue["description"];
                                    if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance = ((string)descriptionValue);
                                        azureBatchLinkedServiceInstance.Description = descriptionInstance;
                                    }
                                    
                                    JToken provisioningStateValue = propertiesValue["provisioningState"];
                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                        azureBatchLinkedServiceInstance.ProvisioningState = provisioningStateInstance;
                                    }
                                    
                                    JToken hubNameValue = propertiesValue["hubName"];
                                    if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance = ((string)hubNameValue);
                                        azureBatchLinkedServiceInstance.HubName = hubNameInstance;
                                    }
                                    
                                    JToken errorMessageValue = propertiesValue["errorMessage"];
                                    if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance = ((string)errorMessageValue);
                                        azureBatchLinkedServiceInstance.ErrorMessage = errorMessageInstance;
                                    }
                                    linkedServiceInstance.Properties = azureBatchLinkedServiceInstance;
                                }
                                if (typeName == "AzureMLLinkedService")
                                {
                                    AzureMLLinkedService azureMLLinkedServiceInstance = new AzureMLLinkedService();
                                    
                                    JToken mlEndpointValue = propertiesValue["mlEndpoint"];
                                    if (mlEndpointValue != null && mlEndpointValue.Type != JTokenType.Null)
                                    {
                                        string mlEndpointInstance = ((string)mlEndpointValue);
                                        azureMLLinkedServiceInstance.MlEndpoint = mlEndpointInstance;
                                    }
                                    
                                    JToken apiKeyValue = propertiesValue["apiKey"];
                                    if (apiKeyValue != null && apiKeyValue.Type != JTokenType.Null)
                                    {
                                        string apiKeyInstance = ((string)apiKeyValue);
                                        azureMLLinkedServiceInstance.ApiKey = apiKeyInstance;
                                    }
                                    
                                    JToken descriptionValue2 = propertiesValue["description"];
                                    if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance2 = ((string)descriptionValue2);
                                        azureMLLinkedServiceInstance.Description = descriptionInstance2;
                                    }
                                    
                                    JToken provisioningStateValue2 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                        azureMLLinkedServiceInstance.ProvisioningState = provisioningStateInstance2;
                                    }
                                    
                                    JToken hubNameValue2 = propertiesValue["hubName"];
                                    if (hubNameValue2 != null && hubNameValue2.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance2 = ((string)hubNameValue2);
                                        azureMLLinkedServiceInstance.HubName = hubNameInstance2;
                                    }
                                    
                                    JToken errorMessageValue2 = propertiesValue["errorMessage"];
                                    if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance2 = ((string)errorMessageValue2);
                                        azureMLLinkedServiceInstance.ErrorMessage = errorMessageInstance2;
                                    }
                                    linkedServiceInstance.Properties = azureMLLinkedServiceInstance;
                                }
                                if (typeName == "AzureSqlLinkedService")
                                {
                                    AzureSqlLinkedService azureSqlLinkedServiceInstance = new AzureSqlLinkedService();
                                    
                                    JToken connectionStringValue = propertiesValue["connectionString"];
                                    if (connectionStringValue != null && connectionStringValue.Type != JTokenType.Null)
                                    {
                                        string connectionStringInstance = ((string)connectionStringValue);
                                        azureSqlLinkedServiceInstance.ConnectionString = connectionStringInstance;
                                    }
                                    
                                    JToken descriptionValue3 = propertiesValue["description"];
                                    if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance3 = ((string)descriptionValue3);
                                        azureSqlLinkedServiceInstance.Description = descriptionInstance3;
                                    }
                                    
                                    JToken provisioningStateValue3 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue3 != null && provisioningStateValue3.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance3 = ((string)provisioningStateValue3);
                                        azureSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance3;
                                    }
                                    
                                    JToken hubNameValue3 = propertiesValue["hubName"];
                                    if (hubNameValue3 != null && hubNameValue3.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance3 = ((string)hubNameValue3);
                                        azureSqlLinkedServiceInstance.HubName = hubNameInstance3;
                                    }
                                    
                                    JToken errorMessageValue3 = propertiesValue["errorMessage"];
                                    if (errorMessageValue3 != null && errorMessageValue3.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance3 = ((string)errorMessageValue3);
                                        azureSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance3;
                                    }
                                    linkedServiceInstance.Properties = azureSqlLinkedServiceInstance;
                                }
                                if (typeName == "AzureStorageLinkedService")
                                {
                                    AzureStorageLinkedService azureStorageLinkedServiceInstance = new AzureStorageLinkedService();
                                    
                                    JToken connectionStringValue2 = propertiesValue["connectionString"];
                                    if (connectionStringValue2 != null && connectionStringValue2.Type != JTokenType.Null)
                                    {
                                        string connectionStringInstance2 = ((string)connectionStringValue2);
                                        azureStorageLinkedServiceInstance.ConnectionString = connectionStringInstance2;
                                    }
                                    
                                    JToken descriptionValue4 = propertiesValue["description"];
                                    if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance4 = ((string)descriptionValue4);
                                        azureStorageLinkedServiceInstance.Description = descriptionInstance4;
                                    }
                                    
                                    JToken provisioningStateValue4 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue4 != null && provisioningStateValue4.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance4 = ((string)provisioningStateValue4);
                                        azureStorageLinkedServiceInstance.ProvisioningState = provisioningStateInstance4;
                                    }
                                    
                                    JToken hubNameValue4 = propertiesValue["hubName"];
                                    if (hubNameValue4 != null && hubNameValue4.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance4 = ((string)hubNameValue4);
                                        azureStorageLinkedServiceInstance.HubName = hubNameInstance4;
                                    }
                                    
                                    JToken errorMessageValue4 = propertiesValue["errorMessage"];
                                    if (errorMessageValue4 != null && errorMessageValue4.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance4 = ((string)errorMessageValue4);
                                        azureStorageLinkedServiceInstance.ErrorMessage = errorMessageInstance4;
                                    }
                                    linkedServiceInstance.Properties = azureStorageLinkedServiceInstance;
                                }
                                if (typeName == "CustomLinkedService")
                                {
                                    CustomLinkedService customLinkedServiceInstance = new CustomLinkedService();
                                    
                                    JToken extendedPropertiesSequenceElement = ((JToken)propertiesValue["extendedProperties"]);
                                    if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in extendedPropertiesSequenceElement)
                                        {
                                            string extendedPropertiesKey = ((string)property.Name);
                                            string extendedPropertiesValue = ((string)property.Value);
                                            customLinkedServiceInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                        }
                                    }
                                    
                                    JToken descriptionValue5 = propertiesValue["description"];
                                    if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance5 = ((string)descriptionValue5);
                                        customLinkedServiceInstance.Description = descriptionInstance5;
                                    }
                                    
                                    JToken provisioningStateValue5 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue5 != null && provisioningStateValue5.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance5 = ((string)provisioningStateValue5);
                                        customLinkedServiceInstance.ProvisioningState = provisioningStateInstance5;
                                    }
                                    
                                    JToken hubNameValue5 = propertiesValue["hubName"];
                                    if (hubNameValue5 != null && hubNameValue5.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance5 = ((string)hubNameValue5);
                                        customLinkedServiceInstance.HubName = hubNameInstance5;
                                    }
                                    
                                    JToken errorMessageValue5 = propertiesValue["errorMessage"];
                                    if (errorMessageValue5 != null && errorMessageValue5.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance5 = ((string)errorMessageValue5);
                                        customLinkedServiceInstance.ErrorMessage = errorMessageInstance5;
                                    }
                                    linkedServiceInstance.Properties = customLinkedServiceInstance;
                                }
                                if (typeName == "HDInsightBYOCLinkedService")
                                {
                                    HDInsightBYOCLinkedService hDInsightBYOCLinkedServiceInstance = new HDInsightBYOCLinkedService();
                                    
                                    JToken clusterUriValue = propertiesValue["clusterUri"];
                                    if (clusterUriValue != null && clusterUriValue.Type != JTokenType.Null)
                                    {
                                        string clusterUriInstance = ((string)clusterUriValue);
                                        hDInsightBYOCLinkedServiceInstance.ClusterUri = clusterUriInstance;
                                    }
                                    
                                    JToken userNameValue = propertiesValue["userName"];
                                    if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                    {
                                        string userNameInstance = ((string)userNameValue);
                                        hDInsightBYOCLinkedServiceInstance.UserName = userNameInstance;
                                    }
                                    
                                    JToken passwordValue = propertiesValue["password"];
                                    if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                    {
                                        string passwordInstance = ((string)passwordValue);
                                        hDInsightBYOCLinkedServiceInstance.Password = passwordInstance;
                                    }
                                    
                                    JToken linkedServiceNameValue2 = propertiesValue["linkedServiceName"];
                                    if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                        hDInsightBYOCLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance2;
                                    }
                                    
                                    JToken hcatalogValue = propertiesValue["hcatalog"];
                                    if (hcatalogValue != null && hcatalogValue.Type != JTokenType.Null)
                                    {
                                        HCatalogProperties hcatalogInstance = new HCatalogProperties();
                                        hDInsightBYOCLinkedServiceInstance.Hcatalog = hcatalogInstance;
                                        
                                        JToken linkedServiceNameValue3 = hcatalogValue["linkedServiceName"];
                                        if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                            hcatalogInstance.LinkedServiceName = linkedServiceNameInstance3;
                                        }
                                        
                                        JToken recoverPartitionsValue = hcatalogValue["recoverPartitions"];
                                        if (recoverPartitionsValue != null && recoverPartitionsValue.Type != JTokenType.Null)
                                        {
                                            bool recoverPartitionsInstance = ((bool)recoverPartitionsValue);
                                            hcatalogInstance.RecoverPartitions = recoverPartitionsInstance;
                                        }
                                        
                                        JToken alterSchemaValue = hcatalogValue["alterSchema"];
                                        if (alterSchemaValue != null && alterSchemaValue.Type != JTokenType.Null)
                                        {
                                            bool alterSchemaInstance = ((bool)alterSchemaValue);
                                            hcatalogInstance.AlterSchema = alterSchemaInstance;
                                        }
                                    }
                                    
                                    JToken descriptionValue6 = propertiesValue["description"];
                                    if (descriptionValue6 != null && descriptionValue6.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance6 = ((string)descriptionValue6);
                                        hDInsightBYOCLinkedServiceInstance.Description = descriptionInstance6;
                                    }
                                    
                                    JToken provisioningStateValue6 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue6 != null && provisioningStateValue6.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance6 = ((string)provisioningStateValue6);
                                        hDInsightBYOCLinkedServiceInstance.ProvisioningState = provisioningStateInstance6;
                                    }
                                    
                                    JToken hubNameValue6 = propertiesValue["hubName"];
                                    if (hubNameValue6 != null && hubNameValue6.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance6 = ((string)hubNameValue6);
                                        hDInsightBYOCLinkedServiceInstance.HubName = hubNameInstance6;
                                    }
                                    
                                    JToken errorMessageValue6 = propertiesValue["errorMessage"];
                                    if (errorMessageValue6 != null && errorMessageValue6.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance6 = ((string)errorMessageValue6);
                                        hDInsightBYOCLinkedServiceInstance.ErrorMessage = errorMessageInstance6;
                                    }
                                    linkedServiceInstance.Properties = hDInsightBYOCLinkedServiceInstance;
                                }
                                if (typeName == "HDInsightOnDemandLinkedService")
                                {
                                    HDInsightOnDemandLinkedService hDInsightOnDemandLinkedServiceInstance = new HDInsightOnDemandLinkedService();
                                    
                                    JToken versionValue = propertiesValue["version"];
                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                    {
                                        string versionInstance = ((string)versionValue);
                                        hDInsightOnDemandLinkedServiceInstance.Version = versionInstance;
                                    }
                                    
                                    JToken clusterTypeValue = propertiesValue["clusterType"];
                                    if (clusterTypeValue != null && clusterTypeValue.Type != JTokenType.Null)
                                    {
                                        string clusterTypeInstance = ((string)clusterTypeValue);
                                        hDInsightOnDemandLinkedServiceInstance.ClusterType = clusterTypeInstance;
                                    }
                                    
                                    JToken clusterSizeValue = propertiesValue["clusterSize"];
                                    if (clusterSizeValue != null && clusterSizeValue.Type != JTokenType.Null)
                                    {
                                        int clusterSizeInstance = ((int)clusterSizeValue);
                                        hDInsightOnDemandLinkedServiceInstance.ClusterSize = clusterSizeInstance;
                                    }
                                    
                                    JToken timeToLiveValue = propertiesValue["timeToLive"];
                                    if (timeToLiveValue != null && timeToLiveValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan timeToLiveInstance = TimeSpan.Parse(((string)timeToLiveValue), CultureInfo.InvariantCulture);
                                        hDInsightOnDemandLinkedServiceInstance.TimeToLive = timeToLiveInstance;
                                    }
                                    
                                    JToken linkedServiceNameValue4 = propertiesValue["linkedServiceName"];
                                    if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                        hDInsightOnDemandLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance4;
                                    }
                                    
                                    JToken hiveCustomLibrariesContainerValue = propertiesValue["hiveCustomLibrariesContainer"];
                                    if (hiveCustomLibrariesContainerValue != null && hiveCustomLibrariesContainerValue.Type != JTokenType.Null)
                                    {
                                        string hiveCustomLibrariesContainerInstance = ((string)hiveCustomLibrariesContainerValue);
                                        hDInsightOnDemandLinkedServiceInstance.HiveCustomLibrariesContainer = hiveCustomLibrariesContainerInstance;
                                    }
                                    
                                    JToken coreConfigurationSequenceElement = ((JToken)propertiesValue["coreConfiguration"]);
                                    if (coreConfigurationSequenceElement != null && coreConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in coreConfigurationSequenceElement)
                                        {
                                            string coreConfigurationKey = ((string)property2.Name);
                                            string coreConfigurationValue = ((string)property2.Value);
                                            hDInsightOnDemandLinkedServiceInstance.CoreConfiguration.Add(coreConfigurationKey, coreConfigurationValue);
                                        }
                                    }
                                    
                                    JToken hBaseConfigurationSequenceElement = ((JToken)propertiesValue["hBaseConfiguration"]);
                                    if (hBaseConfigurationSequenceElement != null && hBaseConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property3 in hBaseConfigurationSequenceElement)
                                        {
                                            string hBaseConfigurationKey = ((string)property3.Name);
                                            string hBaseConfigurationValue = ((string)property3.Value);
                                            hDInsightOnDemandLinkedServiceInstance.HBaseConfiguration.Add(hBaseConfigurationKey, hBaseConfigurationValue);
                                        }
                                    }
                                    
                                    JToken hdfsConfigurationSequenceElement = ((JToken)propertiesValue["hdfsConfiguration"]);
                                    if (hdfsConfigurationSequenceElement != null && hdfsConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property4 in hdfsConfigurationSequenceElement)
                                        {
                                            string hdfsConfigurationKey = ((string)property4.Name);
                                            string hdfsConfigurationValue = ((string)property4.Value);
                                            hDInsightOnDemandLinkedServiceInstance.HdfsConfiguration.Add(hdfsConfigurationKey, hdfsConfigurationValue);
                                        }
                                    }
                                    
                                    JToken hiveConfigurationSequenceElement = ((JToken)propertiesValue["hiveConfiguration"]);
                                    if (hiveConfigurationSequenceElement != null && hiveConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property5 in hiveConfigurationSequenceElement)
                                        {
                                            string hiveConfigurationKey = ((string)property5.Name);
                                            string hiveConfigurationValue = ((string)property5.Value);
                                            hDInsightOnDemandLinkedServiceInstance.HiveConfiguration.Add(hiveConfigurationKey, hiveConfigurationValue);
                                        }
                                    }
                                    
                                    JToken mapReduceConfigurationSequenceElement = ((JToken)propertiesValue["mapReduceConfiguration"]);
                                    if (mapReduceConfigurationSequenceElement != null && mapReduceConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property6 in mapReduceConfigurationSequenceElement)
                                        {
                                            string mapReduceConfigurationKey = ((string)property6.Name);
                                            string mapReduceConfigurationValue = ((string)property6.Value);
                                            hDInsightOnDemandLinkedServiceInstance.MapReduceConfiguration.Add(mapReduceConfigurationKey, mapReduceConfigurationValue);
                                        }
                                    }
                                    
                                    JToken oozieConfigurationSequenceElement = ((JToken)propertiesValue["oozieConfiguration"]);
                                    if (oozieConfigurationSequenceElement != null && oozieConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property7 in oozieConfigurationSequenceElement)
                                        {
                                            string oozieConfigurationKey = ((string)property7.Name);
                                            string oozieConfigurationValue = ((string)property7.Value);
                                            hDInsightOnDemandLinkedServiceInstance.OozieConfiguration.Add(oozieConfigurationKey, oozieConfigurationValue);
                                        }
                                    }
                                    
                                    JToken stormConfigurationSequenceElement = ((JToken)propertiesValue["stormConfiguration"]);
                                    if (stormConfigurationSequenceElement != null && stormConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property8 in stormConfigurationSequenceElement)
                                        {
                                            string stormConfigurationKey = ((string)property8.Name);
                                            string stormConfigurationValue = ((string)property8.Value);
                                            hDInsightOnDemandLinkedServiceInstance.StormConfiguration.Add(stormConfigurationKey, stormConfigurationValue);
                                        }
                                    }
                                    
                                    JToken sparkConfigurationSequenceElement = ((JToken)propertiesValue["sparkConfiguration"]);
                                    if (sparkConfigurationSequenceElement != null && sparkConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property9 in sparkConfigurationSequenceElement)
                                        {
                                            string sparkConfigurationKey = ((string)property9.Name);
                                            string sparkConfigurationValue = ((string)property9.Value);
                                            hDInsightOnDemandLinkedServiceInstance.SparkConfiguration.Add(sparkConfigurationKey, sparkConfigurationValue);
                                        }
                                    }
                                    
                                    JToken yarnConfigurationSequenceElement = ((JToken)propertiesValue["yarnConfiguration"]);
                                    if (yarnConfigurationSequenceElement != null && yarnConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property10 in yarnConfigurationSequenceElement)
                                        {
                                            string yarnConfigurationKey = ((string)property10.Name);
                                            string yarnConfigurationValue = ((string)property10.Value);
                                            hDInsightOnDemandLinkedServiceInstance.YarnConfiguration.Add(yarnConfigurationKey, yarnConfigurationValue);
                                        }
                                    }
                                    
                                    JToken additionalLinkedServiceNamesArray = propertiesValue["additionalLinkedServiceNames"];
                                    if (additionalLinkedServiceNamesArray != null && additionalLinkedServiceNamesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken additionalLinkedServiceNamesValue in ((JArray)additionalLinkedServiceNamesArray))
                                        {
                                            hDInsightOnDemandLinkedServiceInstance.AdditionalLinkedServiceNames.Add(((string)additionalLinkedServiceNamesValue));
                                        }
                                    }
                                    
                                    JToken hcatalogValue2 = propertiesValue["hcatalog"];
                                    if (hcatalogValue2 != null && hcatalogValue2.Type != JTokenType.Null)
                                    {
                                        HCatalogProperties hcatalogInstance2 = new HCatalogProperties();
                                        hDInsightOnDemandLinkedServiceInstance.Hcatalog = hcatalogInstance2;
                                        
                                        JToken linkedServiceNameValue5 = hcatalogValue2["linkedServiceName"];
                                        if (linkedServiceNameValue5 != null && linkedServiceNameValue5.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance5 = ((string)linkedServiceNameValue5);
                                            hcatalogInstance2.LinkedServiceName = linkedServiceNameInstance5;
                                        }
                                        
                                        JToken recoverPartitionsValue2 = hcatalogValue2["recoverPartitions"];
                                        if (recoverPartitionsValue2 != null && recoverPartitionsValue2.Type != JTokenType.Null)
                                        {
                                            bool recoverPartitionsInstance2 = ((bool)recoverPartitionsValue2);
                                            hcatalogInstance2.RecoverPartitions = recoverPartitionsInstance2;
                                        }
                                        
                                        JToken alterSchemaValue2 = hcatalogValue2["alterSchema"];
                                        if (alterSchemaValue2 != null && alterSchemaValue2.Type != JTokenType.Null)
                                        {
                                            bool alterSchemaInstance2 = ((bool)alterSchemaValue2);
                                            hcatalogInstance2.AlterSchema = alterSchemaInstance2;
                                        }
                                    }
                                    
                                    JToken dataNodeSizeValue = propertiesValue["dataNodeSize"];
                                    if (dataNodeSizeValue != null && dataNodeSizeValue.Type != JTokenType.Null)
                                    {
                                        string dataNodeSizeInstance = ((string)dataNodeSizeValue);
                                        hDInsightOnDemandLinkedServiceInstance.DataNodeSize = dataNodeSizeInstance;
                                    }
                                    
                                    JToken headNodeSizeValue = propertiesValue["headNodeSize"];
                                    if (headNodeSizeValue != null && headNodeSizeValue.Type != JTokenType.Null)
                                    {
                                        string headNodeSizeInstance = ((string)headNodeSizeValue);
                                        hDInsightOnDemandLinkedServiceInstance.HeadNodeSize = headNodeSizeInstance;
                                    }
                                    
                                    JToken zookeeperNodeSizeValue = propertiesValue["zookeeperNodeSize"];
                                    if (zookeeperNodeSizeValue != null && zookeeperNodeSizeValue.Type != JTokenType.Null)
                                    {
                                        string zookeeperNodeSizeInstance = ((string)zookeeperNodeSizeValue);
                                        hDInsightOnDemandLinkedServiceInstance.ZookeeperNodeSize = zookeeperNodeSizeInstance;
                                    }
                                    
                                    JToken osTypeValue = propertiesValue["osType"];
                                    if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                    {
                                        string osTypeInstance = ((string)osTypeValue);
                                        hDInsightOnDemandLinkedServiceInstance.OSType = osTypeInstance;
                                    }
                                    
                                    JToken sshPasswordValue = propertiesValue["sshPassword"];
                                    if (sshPasswordValue != null && sshPasswordValue.Type != JTokenType.Null)
                                    {
                                        string sshPasswordInstance = ((string)sshPasswordValue);
                                        hDInsightOnDemandLinkedServiceInstance.SshPassword = sshPasswordInstance;
                                    }
                                    
                                    JToken sshPublicKeyValue = propertiesValue["sshPublicKey"];
                                    if (sshPublicKeyValue != null && sshPublicKeyValue.Type != JTokenType.Null)
                                    {
                                        string sshPublicKeyInstance = ((string)sshPublicKeyValue);
                                        hDInsightOnDemandLinkedServiceInstance.SshPublicKey = sshPublicKeyInstance;
                                    }
                                    
                                    JToken sshUserNameValue = propertiesValue["sshUserName"];
                                    if (sshUserNameValue != null && sshUserNameValue.Type != JTokenType.Null)
                                    {
                                        string sshUserNameInstance = ((string)sshUserNameValue);
                                        hDInsightOnDemandLinkedServiceInstance.SshUserName = sshUserNameInstance;
                                    }
                                    
                                    JToken descriptionValue7 = propertiesValue["description"];
                                    if (descriptionValue7 != null && descriptionValue7.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance7 = ((string)descriptionValue7);
                                        hDInsightOnDemandLinkedServiceInstance.Description = descriptionInstance7;
                                    }
                                    
                                    JToken provisioningStateValue7 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue7 != null && provisioningStateValue7.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance7 = ((string)provisioningStateValue7);
                                        hDInsightOnDemandLinkedServiceInstance.ProvisioningState = provisioningStateInstance7;
                                    }
                                    
                                    JToken hubNameValue7 = propertiesValue["hubName"];
                                    if (hubNameValue7 != null && hubNameValue7.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance7 = ((string)hubNameValue7);
                                        hDInsightOnDemandLinkedServiceInstance.HubName = hubNameInstance7;
                                    }
                                    
                                    JToken errorMessageValue7 = propertiesValue["errorMessage"];
                                    if (errorMessageValue7 != null && errorMessageValue7.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance7 = ((string)errorMessageValue7);
                                        hDInsightOnDemandLinkedServiceInstance.ErrorMessage = errorMessageInstance7;
                                    }
                                    linkedServiceInstance.Properties = hDInsightOnDemandLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesDb2LinkedService")
                                {
                                    OnPremisesDb2LinkedService onPremisesDb2LinkedServiceInstance = new OnPremisesDb2LinkedService();
                                    
                                    JToken serverValue = propertiesValue["server"];
                                    if (serverValue != null && serverValue.Type != JTokenType.Null)
                                    {
                                        string serverInstance = ((string)serverValue);
                                        onPremisesDb2LinkedServiceInstance.Server = serverInstance;
                                    }
                                    
                                    JToken databaseValue = propertiesValue["database"];
                                    if (databaseValue != null && databaseValue.Type != JTokenType.Null)
                                    {
                                        string databaseInstance = ((string)databaseValue);
                                        onPremisesDb2LinkedServiceInstance.Database = databaseInstance;
                                    }
                                    
                                    JToken schemaValue = propertiesValue["schema"];
                                    if (schemaValue != null && schemaValue.Type != JTokenType.Null)
                                    {
                                        string schemaInstance = ((string)schemaValue);
                                        onPremisesDb2LinkedServiceInstance.Schema = schemaInstance;
                                    }
                                    
                                    JToken authenticationTypeValue = propertiesValue["authenticationType"];
                                    if (authenticationTypeValue != null && authenticationTypeValue.Type != JTokenType.Null)
                                    {
                                        string authenticationTypeInstance = ((string)authenticationTypeValue);
                                        onPremisesDb2LinkedServiceInstance.AuthenticationType = authenticationTypeInstance;
                                    }
                                    
                                    JToken usernameValue = propertiesValue["username"];
                                    if (usernameValue != null && usernameValue.Type != JTokenType.Null)
                                    {
                                        string usernameInstance = ((string)usernameValue);
                                        onPremisesDb2LinkedServiceInstance.Username = usernameInstance;
                                    }
                                    
                                    JToken passwordValue2 = propertiesValue["password"];
                                    if (passwordValue2 != null && passwordValue2.Type != JTokenType.Null)
                                    {
                                        string passwordInstance2 = ((string)passwordValue2);
                                        onPremisesDb2LinkedServiceInstance.Password = passwordInstance2;
                                    }
                                    
                                    JToken gatewayNameValue = propertiesValue["gatewayName"];
                                    if (gatewayNameValue != null && gatewayNameValue.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance = ((string)gatewayNameValue);
                                        onPremisesDb2LinkedServiceInstance.GatewayName = gatewayNameInstance;
                                    }
                                    
                                    JToken encryptedCredentialValue = propertiesValue["encryptedCredential"];
                                    if (encryptedCredentialValue != null && encryptedCredentialValue.Type != JTokenType.Null)
                                    {
                                        string encryptedCredentialInstance = ((string)encryptedCredentialValue);
                                        onPremisesDb2LinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance;
                                    }
                                    
                                    JToken descriptionValue8 = propertiesValue["description"];
                                    if (descriptionValue8 != null && descriptionValue8.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance8 = ((string)descriptionValue8);
                                        onPremisesDb2LinkedServiceInstance.Description = descriptionInstance8;
                                    }
                                    
                                    JToken provisioningStateValue8 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue8 != null && provisioningStateValue8.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance8 = ((string)provisioningStateValue8);
                                        onPremisesDb2LinkedServiceInstance.ProvisioningState = provisioningStateInstance8;
                                    }
                                    
                                    JToken hubNameValue8 = propertiesValue["hubName"];
                                    if (hubNameValue8 != null && hubNameValue8.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance8 = ((string)hubNameValue8);
                                        onPremisesDb2LinkedServiceInstance.HubName = hubNameInstance8;
                                    }
                                    
                                    JToken errorMessageValue8 = propertiesValue["errorMessage"];
                                    if (errorMessageValue8 != null && errorMessageValue8.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance8 = ((string)errorMessageValue8);
                                        onPremisesDb2LinkedServiceInstance.ErrorMessage = errorMessageInstance8;
                                    }
                                    linkedServiceInstance.Properties = onPremisesDb2LinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesFileSystemLinkedService")
                                {
                                    OnPremisesFileSystemLinkedService onPremisesFileSystemLinkedServiceInstance = new OnPremisesFileSystemLinkedService();
                                    
                                    JToken hostValue = propertiesValue["host"];
                                    if (hostValue != null && hostValue.Type != JTokenType.Null)
                                    {
                                        string hostInstance = ((string)hostValue);
                                        onPremisesFileSystemLinkedServiceInstance.Host = hostInstance;
                                    }
                                    
                                    JToken gatewayNameValue2 = propertiesValue["gatewayName"];
                                    if (gatewayNameValue2 != null && gatewayNameValue2.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance2 = ((string)gatewayNameValue2);
                                        onPremisesFileSystemLinkedServiceInstance.GatewayName = gatewayNameInstance2;
                                    }
                                    
                                    JToken userIdValue = propertiesValue["userId"];
                                    if (userIdValue != null && userIdValue.Type != JTokenType.Null)
                                    {
                                        string userIdInstance = ((string)userIdValue);
                                        onPremisesFileSystemLinkedServiceInstance.UserId = userIdInstance;
                                    }
                                    
                                    JToken passwordValue3 = propertiesValue["password"];
                                    if (passwordValue3 != null && passwordValue3.Type != JTokenType.Null)
                                    {
                                        string passwordInstance3 = ((string)passwordValue3);
                                        onPremisesFileSystemLinkedServiceInstance.Password = passwordInstance3;
                                    }
                                    
                                    JToken encryptedCredentialValue2 = propertiesValue["encryptedCredential"];
                                    if (encryptedCredentialValue2 != null && encryptedCredentialValue2.Type != JTokenType.Null)
                                    {
                                        string encryptedCredentialInstance2 = ((string)encryptedCredentialValue2);
                                        onPremisesFileSystemLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance2;
                                    }
                                    
                                    JToken descriptionValue9 = propertiesValue["description"];
                                    if (descriptionValue9 != null && descriptionValue9.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance9 = ((string)descriptionValue9);
                                        onPremisesFileSystemLinkedServiceInstance.Description = descriptionInstance9;
                                    }
                                    
                                    JToken provisioningStateValue9 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue9 != null && provisioningStateValue9.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance9 = ((string)provisioningStateValue9);
                                        onPremisesFileSystemLinkedServiceInstance.ProvisioningState = provisioningStateInstance9;
                                    }
                                    
                                    JToken hubNameValue9 = propertiesValue["hubName"];
                                    if (hubNameValue9 != null && hubNameValue9.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance9 = ((string)hubNameValue9);
                                        onPremisesFileSystemLinkedServiceInstance.HubName = hubNameInstance9;
                                    }
                                    
                                    JToken errorMessageValue9 = propertiesValue["errorMessage"];
                                    if (errorMessageValue9 != null && errorMessageValue9.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance9 = ((string)errorMessageValue9);
                                        onPremisesFileSystemLinkedServiceInstance.ErrorMessage = errorMessageInstance9;
                                    }
                                    linkedServiceInstance.Properties = onPremisesFileSystemLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesMySqlLinkedService")
                                {
                                    OnPremisesMySqlLinkedService onPremisesMySqlLinkedServiceInstance = new OnPremisesMySqlLinkedService();
                                    
                                    JToken serverValue2 = propertiesValue["server"];
                                    if (serverValue2 != null && serverValue2.Type != JTokenType.Null)
                                    {
                                        string serverInstance2 = ((string)serverValue2);
                                        onPremisesMySqlLinkedServiceInstance.Server = serverInstance2;
                                    }
                                    
                                    JToken databaseValue2 = propertiesValue["database"];
                                    if (databaseValue2 != null && databaseValue2.Type != JTokenType.Null)
                                    {
                                        string databaseInstance2 = ((string)databaseValue2);
                                        onPremisesMySqlLinkedServiceInstance.Database = databaseInstance2;
                                    }
                                    
                                    JToken schemaValue2 = propertiesValue["schema"];
                                    if (schemaValue2 != null && schemaValue2.Type != JTokenType.Null)
                                    {
                                        string schemaInstance2 = ((string)schemaValue2);
                                        onPremisesMySqlLinkedServiceInstance.Schema = schemaInstance2;
                                    }
                                    
                                    JToken authenticationTypeValue2 = propertiesValue["authenticationType"];
                                    if (authenticationTypeValue2 != null && authenticationTypeValue2.Type != JTokenType.Null)
                                    {
                                        string authenticationTypeInstance2 = ((string)authenticationTypeValue2);
                                        onPremisesMySqlLinkedServiceInstance.AuthenticationType = authenticationTypeInstance2;
                                    }
                                    
                                    JToken usernameValue2 = propertiesValue["username"];
                                    if (usernameValue2 != null && usernameValue2.Type != JTokenType.Null)
                                    {
                                        string usernameInstance2 = ((string)usernameValue2);
                                        onPremisesMySqlLinkedServiceInstance.Username = usernameInstance2;
                                    }
                                    
                                    JToken passwordValue4 = propertiesValue["password"];
                                    if (passwordValue4 != null && passwordValue4.Type != JTokenType.Null)
                                    {
                                        string passwordInstance4 = ((string)passwordValue4);
                                        onPremisesMySqlLinkedServiceInstance.Password = passwordInstance4;
                                    }
                                    
                                    JToken gatewayNameValue3 = propertiesValue["gatewayName"];
                                    if (gatewayNameValue3 != null && gatewayNameValue3.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance3 = ((string)gatewayNameValue3);
                                        onPremisesMySqlLinkedServiceInstance.GatewayName = gatewayNameInstance3;
                                    }
                                    
                                    JToken encryptedCredentialValue3 = propertiesValue["encryptedCredential"];
                                    if (encryptedCredentialValue3 != null && encryptedCredentialValue3.Type != JTokenType.Null)
                                    {
                                        string encryptedCredentialInstance3 = ((string)encryptedCredentialValue3);
                                        onPremisesMySqlLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance3;
                                    }
                                    
                                    JToken descriptionValue10 = propertiesValue["description"];
                                    if (descriptionValue10 != null && descriptionValue10.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance10 = ((string)descriptionValue10);
                                        onPremisesMySqlLinkedServiceInstance.Description = descriptionInstance10;
                                    }
                                    
                                    JToken provisioningStateValue10 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue10 != null && provisioningStateValue10.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance10 = ((string)provisioningStateValue10);
                                        onPremisesMySqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance10;
                                    }
                                    
                                    JToken hubNameValue10 = propertiesValue["hubName"];
                                    if (hubNameValue10 != null && hubNameValue10.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance10 = ((string)hubNameValue10);
                                        onPremisesMySqlLinkedServiceInstance.HubName = hubNameInstance10;
                                    }
                                    
                                    JToken errorMessageValue10 = propertiesValue["errorMessage"];
                                    if (errorMessageValue10 != null && errorMessageValue10.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance10 = ((string)errorMessageValue10);
                                        onPremisesMySqlLinkedServiceInstance.ErrorMessage = errorMessageInstance10;
                                    }
                                    linkedServiceInstance.Properties = onPremisesMySqlLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesOracleLinkedService")
                                {
                                    OnPremisesOracleLinkedService onPremisesOracleLinkedServiceInstance = new OnPremisesOracleLinkedService();
                                    
                                    JToken connectionStringValue3 = propertiesValue["connectionString"];
                                    if (connectionStringValue3 != null && connectionStringValue3.Type != JTokenType.Null)
                                    {
                                        string connectionStringInstance3 = ((string)connectionStringValue3);
                                        onPremisesOracleLinkedServiceInstance.ConnectionString = connectionStringInstance3;
                                    }
                                    
                                    JToken gatewayNameValue4 = propertiesValue["gatewayName"];
                                    if (gatewayNameValue4 != null && gatewayNameValue4.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance4 = ((string)gatewayNameValue4);
                                        onPremisesOracleLinkedServiceInstance.GatewayName = gatewayNameInstance4;
                                    }
                                    
                                    JToken userNameValue2 = propertiesValue["userName"];
                                    if (userNameValue2 != null && userNameValue2.Type != JTokenType.Null)
                                    {
                                        string userNameInstance2 = ((string)userNameValue2);
                                        onPremisesOracleLinkedServiceInstance.UserName = userNameInstance2;
                                    }
                                    
                                    JToken passwordValue5 = propertiesValue["password"];
                                    if (passwordValue5 != null && passwordValue5.Type != JTokenType.Null)
                                    {
                                        string passwordInstance5 = ((string)passwordValue5);
                                        onPremisesOracleLinkedServiceInstance.Password = passwordInstance5;
                                    }
                                    
                                    JToken descriptionValue11 = propertiesValue["description"];
                                    if (descriptionValue11 != null && descriptionValue11.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance11 = ((string)descriptionValue11);
                                        onPremisesOracleLinkedServiceInstance.Description = descriptionInstance11;
                                    }
                                    
                                    JToken provisioningStateValue11 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue11 != null && provisioningStateValue11.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance11 = ((string)provisioningStateValue11);
                                        onPremisesOracleLinkedServiceInstance.ProvisioningState = provisioningStateInstance11;
                                    }
                                    
                                    JToken hubNameValue11 = propertiesValue["hubName"];
                                    if (hubNameValue11 != null && hubNameValue11.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance11 = ((string)hubNameValue11);
                                        onPremisesOracleLinkedServiceInstance.HubName = hubNameInstance11;
                                    }
                                    
                                    JToken errorMessageValue11 = propertiesValue["errorMessage"];
                                    if (errorMessageValue11 != null && errorMessageValue11.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance11 = ((string)errorMessageValue11);
                                        onPremisesOracleLinkedServiceInstance.ErrorMessage = errorMessageInstance11;
                                    }
                                    linkedServiceInstance.Properties = onPremisesOracleLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesPostgreSqlLinkedService")
                                {
                                    OnPremisesPostgreSqlLinkedService onPremisesPostgreSqlLinkedServiceInstance = new OnPremisesPostgreSqlLinkedService();
                                    
                                    JToken serverValue3 = propertiesValue["server"];
                                    if (serverValue3 != null && serverValue3.Type != JTokenType.Null)
                                    {
                                        string serverInstance3 = ((string)serverValue3);
                                        onPremisesPostgreSqlLinkedServiceInstance.Server = serverInstance3;
                                    }
                                    
                                    JToken databaseValue3 = propertiesValue["database"];
                                    if (databaseValue3 != null && databaseValue3.Type != JTokenType.Null)
                                    {
                                        string databaseInstance3 = ((string)databaseValue3);
                                        onPremisesPostgreSqlLinkedServiceInstance.Database = databaseInstance3;
                                    }
                                    
                                    JToken schemaValue3 = propertiesValue["schema"];
                                    if (schemaValue3 != null && schemaValue3.Type != JTokenType.Null)
                                    {
                                        string schemaInstance3 = ((string)schemaValue3);
                                        onPremisesPostgreSqlLinkedServiceInstance.Schema = schemaInstance3;
                                    }
                                    
                                    JToken authenticationTypeValue3 = propertiesValue["authenticationType"];
                                    if (authenticationTypeValue3 != null && authenticationTypeValue3.Type != JTokenType.Null)
                                    {
                                        string authenticationTypeInstance3 = ((string)authenticationTypeValue3);
                                        onPremisesPostgreSqlLinkedServiceInstance.AuthenticationType = authenticationTypeInstance3;
                                    }
                                    
                                    JToken usernameValue3 = propertiesValue["username"];
                                    if (usernameValue3 != null && usernameValue3.Type != JTokenType.Null)
                                    {
                                        string usernameInstance3 = ((string)usernameValue3);
                                        onPremisesPostgreSqlLinkedServiceInstance.Username = usernameInstance3;
                                    }
                                    
                                    JToken passwordValue6 = propertiesValue["password"];
                                    if (passwordValue6 != null && passwordValue6.Type != JTokenType.Null)
                                    {
                                        string passwordInstance6 = ((string)passwordValue6);
                                        onPremisesPostgreSqlLinkedServiceInstance.Password = passwordInstance6;
                                    }
                                    
                                    JToken gatewayNameValue5 = propertiesValue["gatewayName"];
                                    if (gatewayNameValue5 != null && gatewayNameValue5.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance5 = ((string)gatewayNameValue5);
                                        onPremisesPostgreSqlLinkedServiceInstance.GatewayName = gatewayNameInstance5;
                                    }
                                    
                                    JToken encryptedCredentialValue4 = propertiesValue["encryptedCredential"];
                                    if (encryptedCredentialValue4 != null && encryptedCredentialValue4.Type != JTokenType.Null)
                                    {
                                        string encryptedCredentialInstance4 = ((string)encryptedCredentialValue4);
                                        onPremisesPostgreSqlLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance4;
                                    }
                                    
                                    JToken descriptionValue12 = propertiesValue["description"];
                                    if (descriptionValue12 != null && descriptionValue12.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance12 = ((string)descriptionValue12);
                                        onPremisesPostgreSqlLinkedServiceInstance.Description = descriptionInstance12;
                                    }
                                    
                                    JToken provisioningStateValue12 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue12 != null && provisioningStateValue12.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance12 = ((string)provisioningStateValue12);
                                        onPremisesPostgreSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance12;
                                    }
                                    
                                    JToken hubNameValue12 = propertiesValue["hubName"];
                                    if (hubNameValue12 != null && hubNameValue12.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance12 = ((string)hubNameValue12);
                                        onPremisesPostgreSqlLinkedServiceInstance.HubName = hubNameInstance12;
                                    }
                                    
                                    JToken errorMessageValue12 = propertiesValue["errorMessage"];
                                    if (errorMessageValue12 != null && errorMessageValue12.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance12 = ((string)errorMessageValue12);
                                        onPremisesPostgreSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance12;
                                    }
                                    linkedServiceInstance.Properties = onPremisesPostgreSqlLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesSqlLinkedService")
                                {
                                    OnPremisesSqlLinkedService onPremisesSqlLinkedServiceInstance = new OnPremisesSqlLinkedService();
                                    
                                    JToken connectionStringValue4 = propertiesValue["connectionString"];
                                    if (connectionStringValue4 != null && connectionStringValue4.Type != JTokenType.Null)
                                    {
                                        string connectionStringInstance4 = ((string)connectionStringValue4);
                                        onPremisesSqlLinkedServiceInstance.ConnectionString = connectionStringInstance4;
                                    }
                                    
                                    JToken gatewayNameValue6 = propertiesValue["gatewayName"];
                                    if (gatewayNameValue6 != null && gatewayNameValue6.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance6 = ((string)gatewayNameValue6);
                                        onPremisesSqlLinkedServiceInstance.GatewayName = gatewayNameInstance6;
                                    }
                                    
                                    JToken userNameValue3 = propertiesValue["userName"];
                                    if (userNameValue3 != null && userNameValue3.Type != JTokenType.Null)
                                    {
                                        string userNameInstance3 = ((string)userNameValue3);
                                        onPremisesSqlLinkedServiceInstance.UserName = userNameInstance3;
                                    }
                                    
                                    JToken passwordValue7 = propertiesValue["password"];
                                    if (passwordValue7 != null && passwordValue7.Type != JTokenType.Null)
                                    {
                                        string passwordInstance7 = ((string)passwordValue7);
                                        onPremisesSqlLinkedServiceInstance.Password = passwordInstance7;
                                    }
                                    
                                    JToken descriptionValue13 = propertiesValue["description"];
                                    if (descriptionValue13 != null && descriptionValue13.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance13 = ((string)descriptionValue13);
                                        onPremisesSqlLinkedServiceInstance.Description = descriptionInstance13;
                                    }
                                    
                                    JToken provisioningStateValue13 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue13 != null && provisioningStateValue13.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance13 = ((string)provisioningStateValue13);
                                        onPremisesSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance13;
                                    }
                                    
                                    JToken hubNameValue13 = propertiesValue["hubName"];
                                    if (hubNameValue13 != null && hubNameValue13.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance13 = ((string)hubNameValue13);
                                        onPremisesSqlLinkedServiceInstance.HubName = hubNameInstance13;
                                    }
                                    
                                    JToken errorMessageValue13 = propertiesValue["errorMessage"];
                                    if (errorMessageValue13 != null && errorMessageValue13.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance13 = ((string)errorMessageValue13);
                                        onPremisesSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance13;
                                    }
                                    linkedServiceInstance.Properties = onPremisesSqlLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesSybaseLinkedService")
                                {
                                    OnPremisesSybaseLinkedService onPremisesSybaseLinkedServiceInstance = new OnPremisesSybaseLinkedService();
                                    
                                    JToken serverValue4 = propertiesValue["server"];
                                    if (serverValue4 != null && serverValue4.Type != JTokenType.Null)
                                    {
                                        string serverInstance4 = ((string)serverValue4);
                                        onPremisesSybaseLinkedServiceInstance.Server = serverInstance4;
                                    }
                                    
                                    JToken databaseValue4 = propertiesValue["database"];
                                    if (databaseValue4 != null && databaseValue4.Type != JTokenType.Null)
                                    {
                                        string databaseInstance4 = ((string)databaseValue4);
                                        onPremisesSybaseLinkedServiceInstance.Database = databaseInstance4;
                                    }
                                    
                                    JToken schemaValue4 = propertiesValue["schema"];
                                    if (schemaValue4 != null && schemaValue4.Type != JTokenType.Null)
                                    {
                                        string schemaInstance4 = ((string)schemaValue4);
                                        onPremisesSybaseLinkedServiceInstance.Schema = schemaInstance4;
                                    }
                                    
                                    JToken authenticationTypeValue4 = propertiesValue["authenticationType"];
                                    if (authenticationTypeValue4 != null && authenticationTypeValue4.Type != JTokenType.Null)
                                    {
                                        string authenticationTypeInstance4 = ((string)authenticationTypeValue4);
                                        onPremisesSybaseLinkedServiceInstance.AuthenticationType = authenticationTypeInstance4;
                                    }
                                    
                                    JToken usernameValue4 = propertiesValue["username"];
                                    if (usernameValue4 != null && usernameValue4.Type != JTokenType.Null)
                                    {
                                        string usernameInstance4 = ((string)usernameValue4);
                                        onPremisesSybaseLinkedServiceInstance.Username = usernameInstance4;
                                    }
                                    
                                    JToken passwordValue8 = propertiesValue["password"];
                                    if (passwordValue8 != null && passwordValue8.Type != JTokenType.Null)
                                    {
                                        string passwordInstance8 = ((string)passwordValue8);
                                        onPremisesSybaseLinkedServiceInstance.Password = passwordInstance8;
                                    }
                                    
                                    JToken gatewayNameValue7 = propertiesValue["gatewayName"];
                                    if (gatewayNameValue7 != null && gatewayNameValue7.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance7 = ((string)gatewayNameValue7);
                                        onPremisesSybaseLinkedServiceInstance.GatewayName = gatewayNameInstance7;
                                    }
                                    
                                    JToken encryptedCredentialValue5 = propertiesValue["encryptedCredential"];
                                    if (encryptedCredentialValue5 != null && encryptedCredentialValue5.Type != JTokenType.Null)
                                    {
                                        string encryptedCredentialInstance5 = ((string)encryptedCredentialValue5);
                                        onPremisesSybaseLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance5;
                                    }
                                    
                                    JToken descriptionValue14 = propertiesValue["description"];
                                    if (descriptionValue14 != null && descriptionValue14.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance14 = ((string)descriptionValue14);
                                        onPremisesSybaseLinkedServiceInstance.Description = descriptionInstance14;
                                    }
                                    
                                    JToken provisioningStateValue14 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue14 != null && provisioningStateValue14.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance14 = ((string)provisioningStateValue14);
                                        onPremisesSybaseLinkedServiceInstance.ProvisioningState = provisioningStateInstance14;
                                    }
                                    
                                    JToken hubNameValue14 = propertiesValue["hubName"];
                                    if (hubNameValue14 != null && hubNameValue14.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance14 = ((string)hubNameValue14);
                                        onPremisesSybaseLinkedServiceInstance.HubName = hubNameInstance14;
                                    }
                                    
                                    JToken errorMessageValue14 = propertiesValue["errorMessage"];
                                    if (errorMessageValue14 != null && errorMessageValue14.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance14 = ((string)errorMessageValue14);
                                        onPremisesSybaseLinkedServiceInstance.ErrorMessage = errorMessageInstance14;
                                    }
                                    linkedServiceInstance.Properties = onPremisesSybaseLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesTeradataLinkedService")
                                {
                                    OnPremisesTeradataLinkedService onPremisesTeradataLinkedServiceInstance = new OnPremisesTeradataLinkedService();
                                    
                                    JToken serverValue5 = propertiesValue["server"];
                                    if (serverValue5 != null && serverValue5.Type != JTokenType.Null)
                                    {
                                        string serverInstance5 = ((string)serverValue5);
                                        onPremisesTeradataLinkedServiceInstance.Server = serverInstance5;
                                    }
                                    
                                    JToken databaseValue5 = propertiesValue["database"];
                                    if (databaseValue5 != null && databaseValue5.Type != JTokenType.Null)
                                    {
                                        string databaseInstance5 = ((string)databaseValue5);
                                        onPremisesTeradataLinkedServiceInstance.Database = databaseInstance5;
                                    }
                                    
                                    JToken schemaValue5 = propertiesValue["schema"];
                                    if (schemaValue5 != null && schemaValue5.Type != JTokenType.Null)
                                    {
                                        string schemaInstance5 = ((string)schemaValue5);
                                        onPremisesTeradataLinkedServiceInstance.Schema = schemaInstance5;
                                    }
                                    
                                    JToken authenticationTypeValue5 = propertiesValue["authenticationType"];
                                    if (authenticationTypeValue5 != null && authenticationTypeValue5.Type != JTokenType.Null)
                                    {
                                        string authenticationTypeInstance5 = ((string)authenticationTypeValue5);
                                        onPremisesTeradataLinkedServiceInstance.AuthenticationType = authenticationTypeInstance5;
                                    }
                                    
                                    JToken usernameValue5 = propertiesValue["username"];
                                    if (usernameValue5 != null && usernameValue5.Type != JTokenType.Null)
                                    {
                                        string usernameInstance5 = ((string)usernameValue5);
                                        onPremisesTeradataLinkedServiceInstance.Username = usernameInstance5;
                                    }
                                    
                                    JToken passwordValue9 = propertiesValue["password"];
                                    if (passwordValue9 != null && passwordValue9.Type != JTokenType.Null)
                                    {
                                        string passwordInstance9 = ((string)passwordValue9);
                                        onPremisesTeradataLinkedServiceInstance.Password = passwordInstance9;
                                    }
                                    
                                    JToken gatewayNameValue8 = propertiesValue["gatewayName"];
                                    if (gatewayNameValue8 != null && gatewayNameValue8.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance8 = ((string)gatewayNameValue8);
                                        onPremisesTeradataLinkedServiceInstance.GatewayName = gatewayNameInstance8;
                                    }
                                    
                                    JToken encryptedCredentialValue6 = propertiesValue["encryptedCredential"];
                                    if (encryptedCredentialValue6 != null && encryptedCredentialValue6.Type != JTokenType.Null)
                                    {
                                        string encryptedCredentialInstance6 = ((string)encryptedCredentialValue6);
                                        onPremisesTeradataLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance6;
                                    }
                                    
                                    JToken descriptionValue15 = propertiesValue["description"];
                                    if (descriptionValue15 != null && descriptionValue15.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance15 = ((string)descriptionValue15);
                                        onPremisesTeradataLinkedServiceInstance.Description = descriptionInstance15;
                                    }
                                    
                                    JToken provisioningStateValue15 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue15 != null && provisioningStateValue15.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance15 = ((string)provisioningStateValue15);
                                        onPremisesTeradataLinkedServiceInstance.ProvisioningState = provisioningStateInstance15;
                                    }
                                    
                                    JToken hubNameValue15 = propertiesValue["hubName"];
                                    if (hubNameValue15 != null && hubNameValue15.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance15 = ((string)hubNameValue15);
                                        onPremisesTeradataLinkedServiceInstance.HubName = hubNameInstance15;
                                    }
                                    
                                    JToken errorMessageValue15 = propertiesValue["errorMessage"];
                                    if (errorMessageValue15 != null && errorMessageValue15.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance15 = ((string)errorMessageValue15);
                                        onPremisesTeradataLinkedServiceInstance.ErrorMessage = errorMessageInstance15;
                                    }
                                    linkedServiceInstance.Properties = onPremisesTeradataLinkedServiceInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    result.Location = url;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete a data factory linkedService instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='linkedServiceName'>
        /// Required. A unique data factory linkedService name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginDeleteAsync(string resourceGroupName, string dataFactoryName, string linkedServiceName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (linkedServiceName == null)
            {
                throw new ArgumentNullException("linkedServiceName");
            }
            if (linkedServiceName != null && linkedServiceName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("linkedServiceName");
            }
            if (Regex.IsMatch(linkedServiceName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("linkedServiceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("linkedServiceName", linkedServiceName);
                TracingAdapter.Enter(invocationId, this, "BeginDeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/linkedservices/";
            url = url + Uri.EscapeDataString(linkedServiceName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-01-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create or update a data factory linkedService.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. The name of the data factory.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a data
        /// factory linkedService.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update data factory linkedService operation response.
        /// </returns>
        public async Task<LinkedServiceCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string dataFactoryName, LinkedServiceCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            DataPipelineManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LinkedServiceCreateOrUpdateResponse response = await client.LinkedServices.BeginCreateOrUpdateAsync(resourceGroupName, dataFactoryName, parameters, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            LinkedServiceCreateOrUpdateResponse result = await client.LinkedServices.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 5;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.LinkedServices.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 5;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Create or update a data factory linkedService with raw json content.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. The name of the data factory.
        /// </param>
        /// <param name='linkedServiceName'>
        /// Required. The name of the data factory table to be created or
        /// updated.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a data
        /// factory linkedService.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update data factory linkedService operation response.
        /// </returns>
        public async Task<LinkedServiceCreateOrUpdateResponse> CreateOrUpdateWithRawJsonContentAsync(string resourceGroupName, string dataFactoryName, string linkedServiceName, LinkedServiceCreateOrUpdateWithRawJsonContentParameters parameters, CancellationToken cancellationToken)
        {
            DataPipelineManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("linkedServiceName", linkedServiceName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateWithRawJsonContentAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LinkedServiceCreateOrUpdateResponse response = await client.LinkedServices.BeginCreateOrUpdateWithRawJsonContentAsync(resourceGroupName, dataFactoryName, linkedServiceName, parameters, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            LinkedServiceCreateOrUpdateResponse result = await client.LinkedServices.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 5;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.LinkedServices.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 5;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Delete a data factory linkedService instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='linkedServiceName'>
        /// Required. A unique data factory linkedService name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> DeleteAsync(string resourceGroupName, string dataFactoryName, string linkedServiceName, CancellationToken cancellationToken)
        {
            DataPipelineManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("linkedServiceName", linkedServiceName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.LinkedServices.BeginDeleteAsync(resourceGroupName, dataFactoryName, linkedServiceName, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Gets a data factory linkedService instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='linkedServiceName'>
        /// Required. A unique data factory linkedService name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get data factory linkedService operation response.
        /// </returns>
        public async Task<LinkedServiceGetResponse> GetAsync(string resourceGroupName, string dataFactoryName, string linkedServiceName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (linkedServiceName == null)
            {
                throw new ArgumentNullException("linkedServiceName");
            }
            if (linkedServiceName != null && linkedServiceName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("linkedServiceName");
            }
            if (Regex.IsMatch(linkedServiceName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("linkedServiceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("linkedServiceName", linkedServiceName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/linkedservices/";
            url = url + Uri.EscapeDataString(linkedServiceName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-01-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LinkedServiceGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new LinkedServiceGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            LinkedService linkedServiceInstance = new LinkedService();
                            result.LinkedService = linkedServiceInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                linkedServiceInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue["type"]);
                                if (typeName == "AzureBatchLinkedService")
                                {
                                    AzureBatchLinkedService azureBatchLinkedServiceInstance = new AzureBatchLinkedService();
                                    
                                    JToken accountNameValue = propertiesValue["accountName"];
                                    if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                    {
                                        string accountNameInstance = ((string)accountNameValue);
                                        azureBatchLinkedServiceInstance.AccountName = accountNameInstance;
                                    }
                                    
                                    JToken accessKeyValue = propertiesValue["accessKey"];
                                    if (accessKeyValue != null && accessKeyValue.Type != JTokenType.Null)
                                    {
                                        string accessKeyInstance = ((string)accessKeyValue);
                                        azureBatchLinkedServiceInstance.AccessKey = accessKeyInstance;
                                    }
                                    
                                    JToken poolNameValue = propertiesValue["poolName"];
                                    if (poolNameValue != null && poolNameValue.Type != JTokenType.Null)
                                    {
                                        string poolNameInstance = ((string)poolNameValue);
                                        azureBatchLinkedServiceInstance.PoolName = poolNameInstance;
                                    }
                                    
                                    JToken linkedServiceNameValue = propertiesValue["linkedServiceName"];
                                    if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                        azureBatchLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance;
                                    }
                                    
                                    JToken descriptionValue = propertiesValue["description"];
                                    if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance = ((string)descriptionValue);
                                        azureBatchLinkedServiceInstance.Description = descriptionInstance;
                                    }
                                    
                                    JToken provisioningStateValue = propertiesValue["provisioningState"];
                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                        azureBatchLinkedServiceInstance.ProvisioningState = provisioningStateInstance;
                                    }
                                    
                                    JToken hubNameValue = propertiesValue["hubName"];
                                    if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance = ((string)hubNameValue);
                                        azureBatchLinkedServiceInstance.HubName = hubNameInstance;
                                    }
                                    
                                    JToken errorMessageValue = propertiesValue["errorMessage"];
                                    if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance = ((string)errorMessageValue);
                                        azureBatchLinkedServiceInstance.ErrorMessage = errorMessageInstance;
                                    }
                                    linkedServiceInstance.Properties = azureBatchLinkedServiceInstance;
                                }
                                if (typeName == "AzureMLLinkedService")
                                {
                                    AzureMLLinkedService azureMLLinkedServiceInstance = new AzureMLLinkedService();
                                    
                                    JToken mlEndpointValue = propertiesValue["mlEndpoint"];
                                    if (mlEndpointValue != null && mlEndpointValue.Type != JTokenType.Null)
                                    {
                                        string mlEndpointInstance = ((string)mlEndpointValue);
                                        azureMLLinkedServiceInstance.MlEndpoint = mlEndpointInstance;
                                    }
                                    
                                    JToken apiKeyValue = propertiesValue["apiKey"];
                                    if (apiKeyValue != null && apiKeyValue.Type != JTokenType.Null)
                                    {
                                        string apiKeyInstance = ((string)apiKeyValue);
                                        azureMLLinkedServiceInstance.ApiKey = apiKeyInstance;
                                    }
                                    
                                    JToken descriptionValue2 = propertiesValue["description"];
                                    if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance2 = ((string)descriptionValue2);
                                        azureMLLinkedServiceInstance.Description = descriptionInstance2;
                                    }
                                    
                                    JToken provisioningStateValue2 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                        azureMLLinkedServiceInstance.ProvisioningState = provisioningStateInstance2;
                                    }
                                    
                                    JToken hubNameValue2 = propertiesValue["hubName"];
                                    if (hubNameValue2 != null && hubNameValue2.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance2 = ((string)hubNameValue2);
                                        azureMLLinkedServiceInstance.HubName = hubNameInstance2;
                                    }
                                    
                                    JToken errorMessageValue2 = propertiesValue["errorMessage"];
                                    if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance2 = ((string)errorMessageValue2);
                                        azureMLLinkedServiceInstance.ErrorMessage = errorMessageInstance2;
                                    }
                                    linkedServiceInstance.Properties = azureMLLinkedServiceInstance;
                                }
                                if (typeName == "AzureSqlLinkedService")
                                {
                                    AzureSqlLinkedService azureSqlLinkedServiceInstance = new AzureSqlLinkedService();
                                    
                                    JToken connectionStringValue = propertiesValue["connectionString"];
                                    if (connectionStringValue != null && connectionStringValue.Type != JTokenType.Null)
                                    {
                                        string connectionStringInstance = ((string)connectionStringValue);
                                        azureSqlLinkedServiceInstance.ConnectionString = connectionStringInstance;
                                    }
                                    
                                    JToken descriptionValue3 = propertiesValue["description"];
                                    if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance3 = ((string)descriptionValue3);
                                        azureSqlLinkedServiceInstance.Description = descriptionInstance3;
                                    }
                                    
                                    JToken provisioningStateValue3 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue3 != null && provisioningStateValue3.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance3 = ((string)provisioningStateValue3);
                                        azureSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance3;
                                    }
                                    
                                    JToken hubNameValue3 = propertiesValue["hubName"];
                                    if (hubNameValue3 != null && hubNameValue3.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance3 = ((string)hubNameValue3);
                                        azureSqlLinkedServiceInstance.HubName = hubNameInstance3;
                                    }
                                    
                                    JToken errorMessageValue3 = propertiesValue["errorMessage"];
                                    if (errorMessageValue3 != null && errorMessageValue3.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance3 = ((string)errorMessageValue3);
                                        azureSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance3;
                                    }
                                    linkedServiceInstance.Properties = azureSqlLinkedServiceInstance;
                                }
                                if (typeName == "AzureStorageLinkedService")
                                {
                                    AzureStorageLinkedService azureStorageLinkedServiceInstance = new AzureStorageLinkedService();
                                    
                                    JToken connectionStringValue2 = propertiesValue["connectionString"];
                                    if (connectionStringValue2 != null && connectionStringValue2.Type != JTokenType.Null)
                                    {
                                        string connectionStringInstance2 = ((string)connectionStringValue2);
                                        azureStorageLinkedServiceInstance.ConnectionString = connectionStringInstance2;
                                    }
                                    
                                    JToken descriptionValue4 = propertiesValue["description"];
                                    if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance4 = ((string)descriptionValue4);
                                        azureStorageLinkedServiceInstance.Description = descriptionInstance4;
                                    }
                                    
                                    JToken provisioningStateValue4 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue4 != null && provisioningStateValue4.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance4 = ((string)provisioningStateValue4);
                                        azureStorageLinkedServiceInstance.ProvisioningState = provisioningStateInstance4;
                                    }
                                    
                                    JToken hubNameValue4 = propertiesValue["hubName"];
                                    if (hubNameValue4 != null && hubNameValue4.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance4 = ((string)hubNameValue4);
                                        azureStorageLinkedServiceInstance.HubName = hubNameInstance4;
                                    }
                                    
                                    JToken errorMessageValue4 = propertiesValue["errorMessage"];
                                    if (errorMessageValue4 != null && errorMessageValue4.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance4 = ((string)errorMessageValue4);
                                        azureStorageLinkedServiceInstance.ErrorMessage = errorMessageInstance4;
                                    }
                                    linkedServiceInstance.Properties = azureStorageLinkedServiceInstance;
                                }
                                if (typeName == "CustomLinkedService")
                                {
                                    CustomLinkedService customLinkedServiceInstance = new CustomLinkedService();
                                    
                                    JToken extendedPropertiesSequenceElement = ((JToken)propertiesValue["extendedProperties"]);
                                    if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in extendedPropertiesSequenceElement)
                                        {
                                            string extendedPropertiesKey = ((string)property.Name);
                                            string extendedPropertiesValue = ((string)property.Value);
                                            customLinkedServiceInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                        }
                                    }
                                    
                                    JToken descriptionValue5 = propertiesValue["description"];
                                    if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance5 = ((string)descriptionValue5);
                                        customLinkedServiceInstance.Description = descriptionInstance5;
                                    }
                                    
                                    JToken provisioningStateValue5 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue5 != null && provisioningStateValue5.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance5 = ((string)provisioningStateValue5);
                                        customLinkedServiceInstance.ProvisioningState = provisioningStateInstance5;
                                    }
                                    
                                    JToken hubNameValue5 = propertiesValue["hubName"];
                                    if (hubNameValue5 != null && hubNameValue5.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance5 = ((string)hubNameValue5);
                                        customLinkedServiceInstance.HubName = hubNameInstance5;
                                    }
                                    
                                    JToken errorMessageValue5 = propertiesValue["errorMessage"];
                                    if (errorMessageValue5 != null && errorMessageValue5.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance5 = ((string)errorMessageValue5);
                                        customLinkedServiceInstance.ErrorMessage = errorMessageInstance5;
                                    }
                                    linkedServiceInstance.Properties = customLinkedServiceInstance;
                                }
                                if (typeName == "HDInsightBYOCLinkedService")
                                {
                                    HDInsightBYOCLinkedService hDInsightBYOCLinkedServiceInstance = new HDInsightBYOCLinkedService();
                                    
                                    JToken clusterUriValue = propertiesValue["clusterUri"];
                                    if (clusterUriValue != null && clusterUriValue.Type != JTokenType.Null)
                                    {
                                        string clusterUriInstance = ((string)clusterUriValue);
                                        hDInsightBYOCLinkedServiceInstance.ClusterUri = clusterUriInstance;
                                    }
                                    
                                    JToken userNameValue = propertiesValue["userName"];
                                    if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                    {
                                        string userNameInstance = ((string)userNameValue);
                                        hDInsightBYOCLinkedServiceInstance.UserName = userNameInstance;
                                    }
                                    
                                    JToken passwordValue = propertiesValue["password"];
                                    if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                    {
                                        string passwordInstance = ((string)passwordValue);
                                        hDInsightBYOCLinkedServiceInstance.Password = passwordInstance;
                                    }
                                    
                                    JToken linkedServiceNameValue2 = propertiesValue["linkedServiceName"];
                                    if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                        hDInsightBYOCLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance2;
                                    }
                                    
                                    JToken hcatalogValue = propertiesValue["hcatalog"];
                                    if (hcatalogValue != null && hcatalogValue.Type != JTokenType.Null)
                                    {
                                        HCatalogProperties hcatalogInstance = new HCatalogProperties();
                                        hDInsightBYOCLinkedServiceInstance.Hcatalog = hcatalogInstance;
                                        
                                        JToken linkedServiceNameValue3 = hcatalogValue["linkedServiceName"];
                                        if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                            hcatalogInstance.LinkedServiceName = linkedServiceNameInstance3;
                                        }
                                        
                                        JToken recoverPartitionsValue = hcatalogValue["recoverPartitions"];
                                        if (recoverPartitionsValue != null && recoverPartitionsValue.Type != JTokenType.Null)
                                        {
                                            bool recoverPartitionsInstance = ((bool)recoverPartitionsValue);
                                            hcatalogInstance.RecoverPartitions = recoverPartitionsInstance;
                                        }
                                        
                                        JToken alterSchemaValue = hcatalogValue["alterSchema"];
                                        if (alterSchemaValue != null && alterSchemaValue.Type != JTokenType.Null)
                                        {
                                            bool alterSchemaInstance = ((bool)alterSchemaValue);
                                            hcatalogInstance.AlterSchema = alterSchemaInstance;
                                        }
                                    }
                                    
                                    JToken descriptionValue6 = propertiesValue["description"];
                                    if (descriptionValue6 != null && descriptionValue6.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance6 = ((string)descriptionValue6);
                                        hDInsightBYOCLinkedServiceInstance.Description = descriptionInstance6;
                                    }
                                    
                                    JToken provisioningStateValue6 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue6 != null && provisioningStateValue6.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance6 = ((string)provisioningStateValue6);
                                        hDInsightBYOCLinkedServiceInstance.ProvisioningState = provisioningStateInstance6;
                                    }
                                    
                                    JToken hubNameValue6 = propertiesValue["hubName"];
                                    if (hubNameValue6 != null && hubNameValue6.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance6 = ((string)hubNameValue6);
                                        hDInsightBYOCLinkedServiceInstance.HubName = hubNameInstance6;
                                    }
                                    
                                    JToken errorMessageValue6 = propertiesValue["errorMessage"];
                                    if (errorMessageValue6 != null && errorMessageValue6.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance6 = ((string)errorMessageValue6);
                                        hDInsightBYOCLinkedServiceInstance.ErrorMessage = errorMessageInstance6;
                                    }
                                    linkedServiceInstance.Properties = hDInsightBYOCLinkedServiceInstance;
                                }
                                if (typeName == "HDInsightOnDemandLinkedService")
                                {
                                    HDInsightOnDemandLinkedService hDInsightOnDemandLinkedServiceInstance = new HDInsightOnDemandLinkedService();
                                    
                                    JToken versionValue = propertiesValue["version"];
                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                    {
                                        string versionInstance = ((string)versionValue);
                                        hDInsightOnDemandLinkedServiceInstance.Version = versionInstance;
                                    }
                                    
                                    JToken clusterTypeValue = propertiesValue["clusterType"];
                                    if (clusterTypeValue != null && clusterTypeValue.Type != JTokenType.Null)
                                    {
                                        string clusterTypeInstance = ((string)clusterTypeValue);
                                        hDInsightOnDemandLinkedServiceInstance.ClusterType = clusterTypeInstance;
                                    }
                                    
                                    JToken clusterSizeValue = propertiesValue["clusterSize"];
                                    if (clusterSizeValue != null && clusterSizeValue.Type != JTokenType.Null)
                                    {
                                        int clusterSizeInstance = ((int)clusterSizeValue);
                                        hDInsightOnDemandLinkedServiceInstance.ClusterSize = clusterSizeInstance;
                                    }
                                    
                                    JToken timeToLiveValue = propertiesValue["timeToLive"];
                                    if (timeToLiveValue != null && timeToLiveValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan timeToLiveInstance = TimeSpan.Parse(((string)timeToLiveValue), CultureInfo.InvariantCulture);
                                        hDInsightOnDemandLinkedServiceInstance.TimeToLive = timeToLiveInstance;
                                    }
                                    
                                    JToken linkedServiceNameValue4 = propertiesValue["linkedServiceName"];
                                    if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                        hDInsightOnDemandLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance4;
                                    }
                                    
                                    JToken hiveCustomLibrariesContainerValue = propertiesValue["hiveCustomLibrariesContainer"];
                                    if (hiveCustomLibrariesContainerValue != null && hiveCustomLibrariesContainerValue.Type != JTokenType.Null)
                                    {
                                        string hiveCustomLibrariesContainerInstance = ((string)hiveCustomLibrariesContainerValue);
                                        hDInsightOnDemandLinkedServiceInstance.HiveCustomLibrariesContainer = hiveCustomLibrariesContainerInstance;
                                    }
                                    
                                    JToken coreConfigurationSequenceElement = ((JToken)propertiesValue["coreConfiguration"]);
                                    if (coreConfigurationSequenceElement != null && coreConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in coreConfigurationSequenceElement)
                                        {
                                            string coreConfigurationKey = ((string)property2.Name);
                                            string coreConfigurationValue = ((string)property2.Value);
                                            hDInsightOnDemandLinkedServiceInstance.CoreConfiguration.Add(coreConfigurationKey, coreConfigurationValue);
                                        }
                                    }
                                    
                                    JToken hBaseConfigurationSequenceElement = ((JToken)propertiesValue["hBaseConfiguration"]);
                                    if (hBaseConfigurationSequenceElement != null && hBaseConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property3 in hBaseConfigurationSequenceElement)
                                        {
                                            string hBaseConfigurationKey = ((string)property3.Name);
                                            string hBaseConfigurationValue = ((string)property3.Value);
                                            hDInsightOnDemandLinkedServiceInstance.HBaseConfiguration.Add(hBaseConfigurationKey, hBaseConfigurationValue);
                                        }
                                    }
                                    
                                    JToken hdfsConfigurationSequenceElement = ((JToken)propertiesValue["hdfsConfiguration"]);
                                    if (hdfsConfigurationSequenceElement != null && hdfsConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property4 in hdfsConfigurationSequenceElement)
                                        {
                                            string hdfsConfigurationKey = ((string)property4.Name);
                                            string hdfsConfigurationValue = ((string)property4.Value);
                                            hDInsightOnDemandLinkedServiceInstance.HdfsConfiguration.Add(hdfsConfigurationKey, hdfsConfigurationValue);
                                        }
                                    }
                                    
                                    JToken hiveConfigurationSequenceElement = ((JToken)propertiesValue["hiveConfiguration"]);
                                    if (hiveConfigurationSequenceElement != null && hiveConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property5 in hiveConfigurationSequenceElement)
                                        {
                                            string hiveConfigurationKey = ((string)property5.Name);
                                            string hiveConfigurationValue = ((string)property5.Value);
                                            hDInsightOnDemandLinkedServiceInstance.HiveConfiguration.Add(hiveConfigurationKey, hiveConfigurationValue);
                                        }
                                    }
                                    
                                    JToken mapReduceConfigurationSequenceElement = ((JToken)propertiesValue["mapReduceConfiguration"]);
                                    if (mapReduceConfigurationSequenceElement != null && mapReduceConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property6 in mapReduceConfigurationSequenceElement)
                                        {
                                            string mapReduceConfigurationKey = ((string)property6.Name);
                                            string mapReduceConfigurationValue = ((string)property6.Value);
                                            hDInsightOnDemandLinkedServiceInstance.MapReduceConfiguration.Add(mapReduceConfigurationKey, mapReduceConfigurationValue);
                                        }
                                    }
                                    
                                    JToken oozieConfigurationSequenceElement = ((JToken)propertiesValue["oozieConfiguration"]);
                                    if (oozieConfigurationSequenceElement != null && oozieConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property7 in oozieConfigurationSequenceElement)
                                        {
                                            string oozieConfigurationKey = ((string)property7.Name);
                                            string oozieConfigurationValue = ((string)property7.Value);
                                            hDInsightOnDemandLinkedServiceInstance.OozieConfiguration.Add(oozieConfigurationKey, oozieConfigurationValue);
                                        }
                                    }
                                    
                                    JToken stormConfigurationSequenceElement = ((JToken)propertiesValue["stormConfiguration"]);
                                    if (stormConfigurationSequenceElement != null && stormConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property8 in stormConfigurationSequenceElement)
                                        {
                                            string stormConfigurationKey = ((string)property8.Name);
                                            string stormConfigurationValue = ((string)property8.Value);
                                            hDInsightOnDemandLinkedServiceInstance.StormConfiguration.Add(stormConfigurationKey, stormConfigurationValue);
                                        }
                                    }
                                    
                                    JToken sparkConfigurationSequenceElement = ((JToken)propertiesValue["sparkConfiguration"]);
                                    if (sparkConfigurationSequenceElement != null && sparkConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property9 in sparkConfigurationSequenceElement)
                                        {
                                            string sparkConfigurationKey = ((string)property9.Name);
                                            string sparkConfigurationValue = ((string)property9.Value);
                                            hDInsightOnDemandLinkedServiceInstance.SparkConfiguration.Add(sparkConfigurationKey, sparkConfigurationValue);
                                        }
                                    }
                                    
                                    JToken yarnConfigurationSequenceElement = ((JToken)propertiesValue["yarnConfiguration"]);
                                    if (yarnConfigurationSequenceElement != null && yarnConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property10 in yarnConfigurationSequenceElement)
                                        {
                                            string yarnConfigurationKey = ((string)property10.Name);
                                            string yarnConfigurationValue = ((string)property10.Value);
                                            hDInsightOnDemandLinkedServiceInstance.YarnConfiguration.Add(yarnConfigurationKey, yarnConfigurationValue);
                                        }
                                    }
                                    
                                    JToken additionalLinkedServiceNamesArray = propertiesValue["additionalLinkedServiceNames"];
                                    if (additionalLinkedServiceNamesArray != null && additionalLinkedServiceNamesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken additionalLinkedServiceNamesValue in ((JArray)additionalLinkedServiceNamesArray))
                                        {
                                            hDInsightOnDemandLinkedServiceInstance.AdditionalLinkedServiceNames.Add(((string)additionalLinkedServiceNamesValue));
                                        }
                                    }
                                    
                                    JToken hcatalogValue2 = propertiesValue["hcatalog"];
                                    if (hcatalogValue2 != null && hcatalogValue2.Type != JTokenType.Null)
                                    {
                                        HCatalogProperties hcatalogInstance2 = new HCatalogProperties();
                                        hDInsightOnDemandLinkedServiceInstance.Hcatalog = hcatalogInstance2;
                                        
                                        JToken linkedServiceNameValue5 = hcatalogValue2["linkedServiceName"];
                                        if (linkedServiceNameValue5 != null && linkedServiceNameValue5.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance5 = ((string)linkedServiceNameValue5);
                                            hcatalogInstance2.LinkedServiceName = linkedServiceNameInstance5;
                                        }
                                        
                                        JToken recoverPartitionsValue2 = hcatalogValue2["recoverPartitions"];
                                        if (recoverPartitionsValue2 != null && recoverPartitionsValue2.Type != JTokenType.Null)
                                        {
                                            bool recoverPartitionsInstance2 = ((bool)recoverPartitionsValue2);
                                            hcatalogInstance2.RecoverPartitions = recoverPartitionsInstance2;
                                        }
                                        
                                        JToken alterSchemaValue2 = hcatalogValue2["alterSchema"];
                                        if (alterSchemaValue2 != null && alterSchemaValue2.Type != JTokenType.Null)
                                        {
                                            bool alterSchemaInstance2 = ((bool)alterSchemaValue2);
                                            hcatalogInstance2.AlterSchema = alterSchemaInstance2;
                                        }
                                    }
                                    
                                    JToken dataNodeSizeValue = propertiesValue["dataNodeSize"];
                                    if (dataNodeSizeValue != null && dataNodeSizeValue.Type != JTokenType.Null)
                                    {
                                        string dataNodeSizeInstance = ((string)dataNodeSizeValue);
                                        hDInsightOnDemandLinkedServiceInstance.DataNodeSize = dataNodeSizeInstance;
                                    }
                                    
                                    JToken headNodeSizeValue = propertiesValue["headNodeSize"];
                                    if (headNodeSizeValue != null && headNodeSizeValue.Type != JTokenType.Null)
                                    {
                                        string headNodeSizeInstance = ((string)headNodeSizeValue);
                                        hDInsightOnDemandLinkedServiceInstance.HeadNodeSize = headNodeSizeInstance;
                                    }
                                    
                                    JToken zookeeperNodeSizeValue = propertiesValue["zookeeperNodeSize"];
                                    if (zookeeperNodeSizeValue != null && zookeeperNodeSizeValue.Type != JTokenType.Null)
                                    {
                                        string zookeeperNodeSizeInstance = ((string)zookeeperNodeSizeValue);
                                        hDInsightOnDemandLinkedServiceInstance.ZookeeperNodeSize = zookeeperNodeSizeInstance;
                                    }
                                    
                                    JToken osTypeValue = propertiesValue["osType"];
                                    if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                    {
                                        string osTypeInstance = ((string)osTypeValue);
                                        hDInsightOnDemandLinkedServiceInstance.OSType = osTypeInstance;
                                    }
                                    
                                    JToken sshPasswordValue = propertiesValue["sshPassword"];
                                    if (sshPasswordValue != null && sshPasswordValue.Type != JTokenType.Null)
                                    {
                                        string sshPasswordInstance = ((string)sshPasswordValue);
                                        hDInsightOnDemandLinkedServiceInstance.SshPassword = sshPasswordInstance;
                                    }
                                    
                                    JToken sshPublicKeyValue = propertiesValue["sshPublicKey"];
                                    if (sshPublicKeyValue != null && sshPublicKeyValue.Type != JTokenType.Null)
                                    {
                                        string sshPublicKeyInstance = ((string)sshPublicKeyValue);
                                        hDInsightOnDemandLinkedServiceInstance.SshPublicKey = sshPublicKeyInstance;
                                    }
                                    
                                    JToken sshUserNameValue = propertiesValue["sshUserName"];
                                    if (sshUserNameValue != null && sshUserNameValue.Type != JTokenType.Null)
                                    {
                                        string sshUserNameInstance = ((string)sshUserNameValue);
                                        hDInsightOnDemandLinkedServiceInstance.SshUserName = sshUserNameInstance;
                                    }
                                    
                                    JToken descriptionValue7 = propertiesValue["description"];
                                    if (descriptionValue7 != null && descriptionValue7.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance7 = ((string)descriptionValue7);
                                        hDInsightOnDemandLinkedServiceInstance.Description = descriptionInstance7;
                                    }
                                    
                                    JToken provisioningStateValue7 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue7 != null && provisioningStateValue7.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance7 = ((string)provisioningStateValue7);
                                        hDInsightOnDemandLinkedServiceInstance.ProvisioningState = provisioningStateInstance7;
                                    }
                                    
                                    JToken hubNameValue7 = propertiesValue["hubName"];
                                    if (hubNameValue7 != null && hubNameValue7.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance7 = ((string)hubNameValue7);
                                        hDInsightOnDemandLinkedServiceInstance.HubName = hubNameInstance7;
                                    }
                                    
                                    JToken errorMessageValue7 = propertiesValue["errorMessage"];
                                    if (errorMessageValue7 != null && errorMessageValue7.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance7 = ((string)errorMessageValue7);
                                        hDInsightOnDemandLinkedServiceInstance.ErrorMessage = errorMessageInstance7;
                                    }
                                    linkedServiceInstance.Properties = hDInsightOnDemandLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesDb2LinkedService")
                                {
                                    OnPremisesDb2LinkedService onPremisesDb2LinkedServiceInstance = new OnPremisesDb2LinkedService();
                                    
                                    JToken serverValue = propertiesValue["server"];
                                    if (serverValue != null && serverValue.Type != JTokenType.Null)
                                    {
                                        string serverInstance = ((string)serverValue);
                                        onPremisesDb2LinkedServiceInstance.Server = serverInstance;
                                    }
                                    
                                    JToken databaseValue = propertiesValue["database"];
                                    if (databaseValue != null && databaseValue.Type != JTokenType.Null)
                                    {
                                        string databaseInstance = ((string)databaseValue);
                                        onPremisesDb2LinkedServiceInstance.Database = databaseInstance;
                                    }
                                    
                                    JToken schemaValue = propertiesValue["schema"];
                                    if (schemaValue != null && schemaValue.Type != JTokenType.Null)
                                    {
                                        string schemaInstance = ((string)schemaValue);
                                        onPremisesDb2LinkedServiceInstance.Schema = schemaInstance;
                                    }
                                    
                                    JToken authenticationTypeValue = propertiesValue["authenticationType"];
                                    if (authenticationTypeValue != null && authenticationTypeValue.Type != JTokenType.Null)
                                    {
                                        string authenticationTypeInstance = ((string)authenticationTypeValue);
                                        onPremisesDb2LinkedServiceInstance.AuthenticationType = authenticationTypeInstance;
                                    }
                                    
                                    JToken usernameValue = propertiesValue["username"];
                                    if (usernameValue != null && usernameValue.Type != JTokenType.Null)
                                    {
                                        string usernameInstance = ((string)usernameValue);
                                        onPremisesDb2LinkedServiceInstance.Username = usernameInstance;
                                    }
                                    
                                    JToken passwordValue2 = propertiesValue["password"];
                                    if (passwordValue2 != null && passwordValue2.Type != JTokenType.Null)
                                    {
                                        string passwordInstance2 = ((string)passwordValue2);
                                        onPremisesDb2LinkedServiceInstance.Password = passwordInstance2;
                                    }
                                    
                                    JToken gatewayNameValue = propertiesValue["gatewayName"];
                                    if (gatewayNameValue != null && gatewayNameValue.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance = ((string)gatewayNameValue);
                                        onPremisesDb2LinkedServiceInstance.GatewayName = gatewayNameInstance;
                                    }
                                    
                                    JToken encryptedCredentialValue = propertiesValue["encryptedCredential"];
                                    if (encryptedCredentialValue != null && encryptedCredentialValue.Type != JTokenType.Null)
                                    {
                                        string encryptedCredentialInstance = ((string)encryptedCredentialValue);
                                        onPremisesDb2LinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance;
                                    }
                                    
                                    JToken descriptionValue8 = propertiesValue["description"];
                                    if (descriptionValue8 != null && descriptionValue8.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance8 = ((string)descriptionValue8);
                                        onPremisesDb2LinkedServiceInstance.Description = descriptionInstance8;
                                    }
                                    
                                    JToken provisioningStateValue8 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue8 != null && provisioningStateValue8.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance8 = ((string)provisioningStateValue8);
                                        onPremisesDb2LinkedServiceInstance.ProvisioningState = provisioningStateInstance8;
                                    }
                                    
                                    JToken hubNameValue8 = propertiesValue["hubName"];
                                    if (hubNameValue8 != null && hubNameValue8.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance8 = ((string)hubNameValue8);
                                        onPremisesDb2LinkedServiceInstance.HubName = hubNameInstance8;
                                    }
                                    
                                    JToken errorMessageValue8 = propertiesValue["errorMessage"];
                                    if (errorMessageValue8 != null && errorMessageValue8.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance8 = ((string)errorMessageValue8);
                                        onPremisesDb2LinkedServiceInstance.ErrorMessage = errorMessageInstance8;
                                    }
                                    linkedServiceInstance.Properties = onPremisesDb2LinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesFileSystemLinkedService")
                                {
                                    OnPremisesFileSystemLinkedService onPremisesFileSystemLinkedServiceInstance = new OnPremisesFileSystemLinkedService();
                                    
                                    JToken hostValue = propertiesValue["host"];
                                    if (hostValue != null && hostValue.Type != JTokenType.Null)
                                    {
                                        string hostInstance = ((string)hostValue);
                                        onPremisesFileSystemLinkedServiceInstance.Host = hostInstance;
                                    }
                                    
                                    JToken gatewayNameValue2 = propertiesValue["gatewayName"];
                                    if (gatewayNameValue2 != null && gatewayNameValue2.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance2 = ((string)gatewayNameValue2);
                                        onPremisesFileSystemLinkedServiceInstance.GatewayName = gatewayNameInstance2;
                                    }
                                    
                                    JToken userIdValue = propertiesValue["userId"];
                                    if (userIdValue != null && userIdValue.Type != JTokenType.Null)
                                    {
                                        string userIdInstance = ((string)userIdValue);
                                        onPremisesFileSystemLinkedServiceInstance.UserId = userIdInstance;
                                    }
                                    
                                    JToken passwordValue3 = propertiesValue["password"];
                                    if (passwordValue3 != null && passwordValue3.Type != JTokenType.Null)
                                    {
                                        string passwordInstance3 = ((string)passwordValue3);
                                        onPremisesFileSystemLinkedServiceInstance.Password = passwordInstance3;
                                    }
                                    
                                    JToken encryptedCredentialValue2 = propertiesValue["encryptedCredential"];
                                    if (encryptedCredentialValue2 != null && encryptedCredentialValue2.Type != JTokenType.Null)
                                    {
                                        string encryptedCredentialInstance2 = ((string)encryptedCredentialValue2);
                                        onPremisesFileSystemLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance2;
                                    }
                                    
                                    JToken descriptionValue9 = propertiesValue["description"];
                                    if (descriptionValue9 != null && descriptionValue9.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance9 = ((string)descriptionValue9);
                                        onPremisesFileSystemLinkedServiceInstance.Description = descriptionInstance9;
                                    }
                                    
                                    JToken provisioningStateValue9 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue9 != null && provisioningStateValue9.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance9 = ((string)provisioningStateValue9);
                                        onPremisesFileSystemLinkedServiceInstance.ProvisioningState = provisioningStateInstance9;
                                    }
                                    
                                    JToken hubNameValue9 = propertiesValue["hubName"];
                                    if (hubNameValue9 != null && hubNameValue9.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance9 = ((string)hubNameValue9);
                                        onPremisesFileSystemLinkedServiceInstance.HubName = hubNameInstance9;
                                    }
                                    
                                    JToken errorMessageValue9 = propertiesValue["errorMessage"];
                                    if (errorMessageValue9 != null && errorMessageValue9.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance9 = ((string)errorMessageValue9);
                                        onPremisesFileSystemLinkedServiceInstance.ErrorMessage = errorMessageInstance9;
                                    }
                                    linkedServiceInstance.Properties = onPremisesFileSystemLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesMySqlLinkedService")
                                {
                                    OnPremisesMySqlLinkedService onPremisesMySqlLinkedServiceInstance = new OnPremisesMySqlLinkedService();
                                    
                                    JToken serverValue2 = propertiesValue["server"];
                                    if (serverValue2 != null && serverValue2.Type != JTokenType.Null)
                                    {
                                        string serverInstance2 = ((string)serverValue2);
                                        onPremisesMySqlLinkedServiceInstance.Server = serverInstance2;
                                    }
                                    
                                    JToken databaseValue2 = propertiesValue["database"];
                                    if (databaseValue2 != null && databaseValue2.Type != JTokenType.Null)
                                    {
                                        string databaseInstance2 = ((string)databaseValue2);
                                        onPremisesMySqlLinkedServiceInstance.Database = databaseInstance2;
                                    }
                                    
                                    JToken schemaValue2 = propertiesValue["schema"];
                                    if (schemaValue2 != null && schemaValue2.Type != JTokenType.Null)
                                    {
                                        string schemaInstance2 = ((string)schemaValue2);
                                        onPremisesMySqlLinkedServiceInstance.Schema = schemaInstance2;
                                    }
                                    
                                    JToken authenticationTypeValue2 = propertiesValue["authenticationType"];
                                    if (authenticationTypeValue2 != null && authenticationTypeValue2.Type != JTokenType.Null)
                                    {
                                        string authenticationTypeInstance2 = ((string)authenticationTypeValue2);
                                        onPremisesMySqlLinkedServiceInstance.AuthenticationType = authenticationTypeInstance2;
                                    }
                                    
                                    JToken usernameValue2 = propertiesValue["username"];
                                    if (usernameValue2 != null && usernameValue2.Type != JTokenType.Null)
                                    {
                                        string usernameInstance2 = ((string)usernameValue2);
                                        onPremisesMySqlLinkedServiceInstance.Username = usernameInstance2;
                                    }
                                    
                                    JToken passwordValue4 = propertiesValue["password"];
                                    if (passwordValue4 != null && passwordValue4.Type != JTokenType.Null)
                                    {
                                        string passwordInstance4 = ((string)passwordValue4);
                                        onPremisesMySqlLinkedServiceInstance.Password = passwordInstance4;
                                    }
                                    
                                    JToken gatewayNameValue3 = propertiesValue["gatewayName"];
                                    if (gatewayNameValue3 != null && gatewayNameValue3.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance3 = ((string)gatewayNameValue3);
                                        onPremisesMySqlLinkedServiceInstance.GatewayName = gatewayNameInstance3;
                                    }
                                    
                                    JToken encryptedCredentialValue3 = propertiesValue["encryptedCredential"];
                                    if (encryptedCredentialValue3 != null && encryptedCredentialValue3.Type != JTokenType.Null)
                                    {
                                        string encryptedCredentialInstance3 = ((string)encryptedCredentialValue3);
                                        onPremisesMySqlLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance3;
                                    }
                                    
                                    JToken descriptionValue10 = propertiesValue["description"];
                                    if (descriptionValue10 != null && descriptionValue10.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance10 = ((string)descriptionValue10);
                                        onPremisesMySqlLinkedServiceInstance.Description = descriptionInstance10;
                                    }
                                    
                                    JToken provisioningStateValue10 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue10 != null && provisioningStateValue10.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance10 = ((string)provisioningStateValue10);
                                        onPremisesMySqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance10;
                                    }
                                    
                                    JToken hubNameValue10 = propertiesValue["hubName"];
                                    if (hubNameValue10 != null && hubNameValue10.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance10 = ((string)hubNameValue10);
                                        onPremisesMySqlLinkedServiceInstance.HubName = hubNameInstance10;
                                    }
                                    
                                    JToken errorMessageValue10 = propertiesValue["errorMessage"];
                                    if (errorMessageValue10 != null && errorMessageValue10.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance10 = ((string)errorMessageValue10);
                                        onPremisesMySqlLinkedServiceInstance.ErrorMessage = errorMessageInstance10;
                                    }
                                    linkedServiceInstance.Properties = onPremisesMySqlLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesOracleLinkedService")
                                {
                                    OnPremisesOracleLinkedService onPremisesOracleLinkedServiceInstance = new OnPremisesOracleLinkedService();
                                    
                                    JToken connectionStringValue3 = propertiesValue["connectionString"];
                                    if (connectionStringValue3 != null && connectionStringValue3.Type != JTokenType.Null)
                                    {
                                        string connectionStringInstance3 = ((string)connectionStringValue3);
                                        onPremisesOracleLinkedServiceInstance.ConnectionString = connectionStringInstance3;
                                    }
                                    
                                    JToken gatewayNameValue4 = propertiesValue["gatewayName"];
                                    if (gatewayNameValue4 != null && gatewayNameValue4.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance4 = ((string)gatewayNameValue4);
                                        onPremisesOracleLinkedServiceInstance.GatewayName = gatewayNameInstance4;
                                    }
                                    
                                    JToken userNameValue2 = propertiesValue["userName"];
                                    if (userNameValue2 != null && userNameValue2.Type != JTokenType.Null)
                                    {
                                        string userNameInstance2 = ((string)userNameValue2);
                                        onPremisesOracleLinkedServiceInstance.UserName = userNameInstance2;
                                    }
                                    
                                    JToken passwordValue5 = propertiesValue["password"];
                                    if (passwordValue5 != null && passwordValue5.Type != JTokenType.Null)
                                    {
                                        string passwordInstance5 = ((string)passwordValue5);
                                        onPremisesOracleLinkedServiceInstance.Password = passwordInstance5;
                                    }
                                    
                                    JToken descriptionValue11 = propertiesValue["description"];
                                    if (descriptionValue11 != null && descriptionValue11.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance11 = ((string)descriptionValue11);
                                        onPremisesOracleLinkedServiceInstance.Description = descriptionInstance11;
                                    }
                                    
                                    JToken provisioningStateValue11 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue11 != null && provisioningStateValue11.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance11 = ((string)provisioningStateValue11);
                                        onPremisesOracleLinkedServiceInstance.ProvisioningState = provisioningStateInstance11;
                                    }
                                    
                                    JToken hubNameValue11 = propertiesValue["hubName"];
                                    if (hubNameValue11 != null && hubNameValue11.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance11 = ((string)hubNameValue11);
                                        onPremisesOracleLinkedServiceInstance.HubName = hubNameInstance11;
                                    }
                                    
                                    JToken errorMessageValue11 = propertiesValue["errorMessage"];
                                    if (errorMessageValue11 != null && errorMessageValue11.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance11 = ((string)errorMessageValue11);
                                        onPremisesOracleLinkedServiceInstance.ErrorMessage = errorMessageInstance11;
                                    }
                                    linkedServiceInstance.Properties = onPremisesOracleLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesPostgreSqlLinkedService")
                                {
                                    OnPremisesPostgreSqlLinkedService onPremisesPostgreSqlLinkedServiceInstance = new OnPremisesPostgreSqlLinkedService();
                                    
                                    JToken serverValue3 = propertiesValue["server"];
                                    if (serverValue3 != null && serverValue3.Type != JTokenType.Null)
                                    {
                                        string serverInstance3 = ((string)serverValue3);
                                        onPremisesPostgreSqlLinkedServiceInstance.Server = serverInstance3;
                                    }
                                    
                                    JToken databaseValue3 = propertiesValue["database"];
                                    if (databaseValue3 != null && databaseValue3.Type != JTokenType.Null)
                                    {
                                        string databaseInstance3 = ((string)databaseValue3);
                                        onPremisesPostgreSqlLinkedServiceInstance.Database = databaseInstance3;
                                    }
                                    
                                    JToken schemaValue3 = propertiesValue["schema"];
                                    if (schemaValue3 != null && schemaValue3.Type != JTokenType.Null)
                                    {
                                        string schemaInstance3 = ((string)schemaValue3);
                                        onPremisesPostgreSqlLinkedServiceInstance.Schema = schemaInstance3;
                                    }
                                    
                                    JToken authenticationTypeValue3 = propertiesValue["authenticationType"];
                                    if (authenticationTypeValue3 != null && authenticationTypeValue3.Type != JTokenType.Null)
                                    {
                                        string authenticationTypeInstance3 = ((string)authenticationTypeValue3);
                                        onPremisesPostgreSqlLinkedServiceInstance.AuthenticationType = authenticationTypeInstance3;
                                    }
                                    
                                    JToken usernameValue3 = propertiesValue["username"];
                                    if (usernameValue3 != null && usernameValue3.Type != JTokenType.Null)
                                    {
                                        string usernameInstance3 = ((string)usernameValue3);
                                        onPremisesPostgreSqlLinkedServiceInstance.Username = usernameInstance3;
                                    }
                                    
                                    JToken passwordValue6 = propertiesValue["password"];
                                    if (passwordValue6 != null && passwordValue6.Type != JTokenType.Null)
                                    {
                                        string passwordInstance6 = ((string)passwordValue6);
                                        onPremisesPostgreSqlLinkedServiceInstance.Password = passwordInstance6;
                                    }
                                    
                                    JToken gatewayNameValue5 = propertiesValue["gatewayName"];
                                    if (gatewayNameValue5 != null && gatewayNameValue5.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance5 = ((string)gatewayNameValue5);
                                        onPremisesPostgreSqlLinkedServiceInstance.GatewayName = gatewayNameInstance5;
                                    }
                                    
                                    JToken encryptedCredentialValue4 = propertiesValue["encryptedCredential"];
                                    if (encryptedCredentialValue4 != null && encryptedCredentialValue4.Type != JTokenType.Null)
                                    {
                                        string encryptedCredentialInstance4 = ((string)encryptedCredentialValue4);
                                        onPremisesPostgreSqlLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance4;
                                    }
                                    
                                    JToken descriptionValue12 = propertiesValue["description"];
                                    if (descriptionValue12 != null && descriptionValue12.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance12 = ((string)descriptionValue12);
                                        onPremisesPostgreSqlLinkedServiceInstance.Description = descriptionInstance12;
                                    }
                                    
                                    JToken provisioningStateValue12 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue12 != null && provisioningStateValue12.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance12 = ((string)provisioningStateValue12);
                                        onPremisesPostgreSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance12;
                                    }
                                    
                                    JToken hubNameValue12 = propertiesValue["hubName"];
                                    if (hubNameValue12 != null && hubNameValue12.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance12 = ((string)hubNameValue12);
                                        onPremisesPostgreSqlLinkedServiceInstance.HubName = hubNameInstance12;
                                    }
                                    
                                    JToken errorMessageValue12 = propertiesValue["errorMessage"];
                                    if (errorMessageValue12 != null && errorMessageValue12.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance12 = ((string)errorMessageValue12);
                                        onPremisesPostgreSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance12;
                                    }
                                    linkedServiceInstance.Properties = onPremisesPostgreSqlLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesSqlLinkedService")
                                {
                                    OnPremisesSqlLinkedService onPremisesSqlLinkedServiceInstance = new OnPremisesSqlLinkedService();
                                    
                                    JToken connectionStringValue4 = propertiesValue["connectionString"];
                                    if (connectionStringValue4 != null && connectionStringValue4.Type != JTokenType.Null)
                                    {
                                        string connectionStringInstance4 = ((string)connectionStringValue4);
                                        onPremisesSqlLinkedServiceInstance.ConnectionString = connectionStringInstance4;
                                    }
                                    
                                    JToken gatewayNameValue6 = propertiesValue["gatewayName"];
                                    if (gatewayNameValue6 != null && gatewayNameValue6.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance6 = ((string)gatewayNameValue6);
                                        onPremisesSqlLinkedServiceInstance.GatewayName = gatewayNameInstance6;
                                    }
                                    
                                    JToken userNameValue3 = propertiesValue["userName"];
                                    if (userNameValue3 != null && userNameValue3.Type != JTokenType.Null)
                                    {
                                        string userNameInstance3 = ((string)userNameValue3);
                                        onPremisesSqlLinkedServiceInstance.UserName = userNameInstance3;
                                    }
                                    
                                    JToken passwordValue7 = propertiesValue["password"];
                                    if (passwordValue7 != null && passwordValue7.Type != JTokenType.Null)
                                    {
                                        string passwordInstance7 = ((string)passwordValue7);
                                        onPremisesSqlLinkedServiceInstance.Password = passwordInstance7;
                                    }
                                    
                                    JToken descriptionValue13 = propertiesValue["description"];
                                    if (descriptionValue13 != null && descriptionValue13.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance13 = ((string)descriptionValue13);
                                        onPremisesSqlLinkedServiceInstance.Description = descriptionInstance13;
                                    }
                                    
                                    JToken provisioningStateValue13 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue13 != null && provisioningStateValue13.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance13 = ((string)provisioningStateValue13);
                                        onPremisesSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance13;
                                    }
                                    
                                    JToken hubNameValue13 = propertiesValue["hubName"];
                                    if (hubNameValue13 != null && hubNameValue13.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance13 = ((string)hubNameValue13);
                                        onPremisesSqlLinkedServiceInstance.HubName = hubNameInstance13;
                                    }
                                    
                                    JToken errorMessageValue13 = propertiesValue["errorMessage"];
                                    if (errorMessageValue13 != null && errorMessageValue13.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance13 = ((string)errorMessageValue13);
                                        onPremisesSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance13;
                                    }
                                    linkedServiceInstance.Properties = onPremisesSqlLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesSybaseLinkedService")
                                {
                                    OnPremisesSybaseLinkedService onPremisesSybaseLinkedServiceInstance = new OnPremisesSybaseLinkedService();
                                    
                                    JToken serverValue4 = propertiesValue["server"];
                                    if (serverValue4 != null && serverValue4.Type != JTokenType.Null)
                                    {
                                        string serverInstance4 = ((string)serverValue4);
                                        onPremisesSybaseLinkedServiceInstance.Server = serverInstance4;
                                    }
                                    
                                    JToken databaseValue4 = propertiesValue["database"];
                                    if (databaseValue4 != null && databaseValue4.Type != JTokenType.Null)
                                    {
                                        string databaseInstance4 = ((string)databaseValue4);
                                        onPremisesSybaseLinkedServiceInstance.Database = databaseInstance4;
                                    }
                                    
                                    JToken schemaValue4 = propertiesValue["schema"];
                                    if (schemaValue4 != null && schemaValue4.Type != JTokenType.Null)
                                    {
                                        string schemaInstance4 = ((string)schemaValue4);
                                        onPremisesSybaseLinkedServiceInstance.Schema = schemaInstance4;
                                    }
                                    
                                    JToken authenticationTypeValue4 = propertiesValue["authenticationType"];
                                    if (authenticationTypeValue4 != null && authenticationTypeValue4.Type != JTokenType.Null)
                                    {
                                        string authenticationTypeInstance4 = ((string)authenticationTypeValue4);
                                        onPremisesSybaseLinkedServiceInstance.AuthenticationType = authenticationTypeInstance4;
                                    }
                                    
                                    JToken usernameValue4 = propertiesValue["username"];
                                    if (usernameValue4 != null && usernameValue4.Type != JTokenType.Null)
                                    {
                                        string usernameInstance4 = ((string)usernameValue4);
                                        onPremisesSybaseLinkedServiceInstance.Username = usernameInstance4;
                                    }
                                    
                                    JToken passwordValue8 = propertiesValue["password"];
                                    if (passwordValue8 != null && passwordValue8.Type != JTokenType.Null)
                                    {
                                        string passwordInstance8 = ((string)passwordValue8);
                                        onPremisesSybaseLinkedServiceInstance.Password = passwordInstance8;
                                    }
                                    
                                    JToken gatewayNameValue7 = propertiesValue["gatewayName"];
                                    if (gatewayNameValue7 != null && gatewayNameValue7.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance7 = ((string)gatewayNameValue7);
                                        onPremisesSybaseLinkedServiceInstance.GatewayName = gatewayNameInstance7;
                                    }
                                    
                                    JToken encryptedCredentialValue5 = propertiesValue["encryptedCredential"];
                                    if (encryptedCredentialValue5 != null && encryptedCredentialValue5.Type != JTokenType.Null)
                                    {
                                        string encryptedCredentialInstance5 = ((string)encryptedCredentialValue5);
                                        onPremisesSybaseLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance5;
                                    }
                                    
                                    JToken descriptionValue14 = propertiesValue["description"];
                                    if (descriptionValue14 != null && descriptionValue14.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance14 = ((string)descriptionValue14);
                                        onPremisesSybaseLinkedServiceInstance.Description = descriptionInstance14;
                                    }
                                    
                                    JToken provisioningStateValue14 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue14 != null && provisioningStateValue14.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance14 = ((string)provisioningStateValue14);
                                        onPremisesSybaseLinkedServiceInstance.ProvisioningState = provisioningStateInstance14;
                                    }
                                    
                                    JToken hubNameValue14 = propertiesValue["hubName"];
                                    if (hubNameValue14 != null && hubNameValue14.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance14 = ((string)hubNameValue14);
                                        onPremisesSybaseLinkedServiceInstance.HubName = hubNameInstance14;
                                    }
                                    
                                    JToken errorMessageValue14 = propertiesValue["errorMessage"];
                                    if (errorMessageValue14 != null && errorMessageValue14.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance14 = ((string)errorMessageValue14);
                                        onPremisesSybaseLinkedServiceInstance.ErrorMessage = errorMessageInstance14;
                                    }
                                    linkedServiceInstance.Properties = onPremisesSybaseLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesTeradataLinkedService")
                                {
                                    OnPremisesTeradataLinkedService onPremisesTeradataLinkedServiceInstance = new OnPremisesTeradataLinkedService();
                                    
                                    JToken serverValue5 = propertiesValue["server"];
                                    if (serverValue5 != null && serverValue5.Type != JTokenType.Null)
                                    {
                                        string serverInstance5 = ((string)serverValue5);
                                        onPremisesTeradataLinkedServiceInstance.Server = serverInstance5;
                                    }
                                    
                                    JToken databaseValue5 = propertiesValue["database"];
                                    if (databaseValue5 != null && databaseValue5.Type != JTokenType.Null)
                                    {
                                        string databaseInstance5 = ((string)databaseValue5);
                                        onPremisesTeradataLinkedServiceInstance.Database = databaseInstance5;
                                    }
                                    
                                    JToken schemaValue5 = propertiesValue["schema"];
                                    if (schemaValue5 != null && schemaValue5.Type != JTokenType.Null)
                                    {
                                        string schemaInstance5 = ((string)schemaValue5);
                                        onPremisesTeradataLinkedServiceInstance.Schema = schemaInstance5;
                                    }
                                    
                                    JToken authenticationTypeValue5 = propertiesValue["authenticationType"];
                                    if (authenticationTypeValue5 != null && authenticationTypeValue5.Type != JTokenType.Null)
                                    {
                                        string authenticationTypeInstance5 = ((string)authenticationTypeValue5);
                                        onPremisesTeradataLinkedServiceInstance.AuthenticationType = authenticationTypeInstance5;
                                    }
                                    
                                    JToken usernameValue5 = propertiesValue["username"];
                                    if (usernameValue5 != null && usernameValue5.Type != JTokenType.Null)
                                    {
                                        string usernameInstance5 = ((string)usernameValue5);
                                        onPremisesTeradataLinkedServiceInstance.Username = usernameInstance5;
                                    }
                                    
                                    JToken passwordValue9 = propertiesValue["password"];
                                    if (passwordValue9 != null && passwordValue9.Type != JTokenType.Null)
                                    {
                                        string passwordInstance9 = ((string)passwordValue9);
                                        onPremisesTeradataLinkedServiceInstance.Password = passwordInstance9;
                                    }
                                    
                                    JToken gatewayNameValue8 = propertiesValue["gatewayName"];
                                    if (gatewayNameValue8 != null && gatewayNameValue8.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance8 = ((string)gatewayNameValue8);
                                        onPremisesTeradataLinkedServiceInstance.GatewayName = gatewayNameInstance8;
                                    }
                                    
                                    JToken encryptedCredentialValue6 = propertiesValue["encryptedCredential"];
                                    if (encryptedCredentialValue6 != null && encryptedCredentialValue6.Type != JTokenType.Null)
                                    {
                                        string encryptedCredentialInstance6 = ((string)encryptedCredentialValue6);
                                        onPremisesTeradataLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance6;
                                    }
                                    
                                    JToken descriptionValue15 = propertiesValue["description"];
                                    if (descriptionValue15 != null && descriptionValue15.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance15 = ((string)descriptionValue15);
                                        onPremisesTeradataLinkedServiceInstance.Description = descriptionInstance15;
                                    }
                                    
                                    JToken provisioningStateValue15 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue15 != null && provisioningStateValue15.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance15 = ((string)provisioningStateValue15);
                                        onPremisesTeradataLinkedServiceInstance.ProvisioningState = provisioningStateInstance15;
                                    }
                                    
                                    JToken hubNameValue15 = propertiesValue["hubName"];
                                    if (hubNameValue15 != null && hubNameValue15.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance15 = ((string)hubNameValue15);
                                        onPremisesTeradataLinkedServiceInstance.HubName = hubNameInstance15;
                                    }
                                    
                                    JToken errorMessageValue15 = propertiesValue["errorMessage"];
                                    if (errorMessageValue15 != null && errorMessageValue15.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance15 = ((string)errorMessageValue15);
                                        onPremisesTeradataLinkedServiceInstance.ErrorMessage = errorMessageInstance15;
                                    }
                                    linkedServiceInstance.Properties = onPremisesTeradataLinkedServiceInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update data factory linkedService operation response.
        /// </returns>
        public async Task<LinkedServiceCreateOrUpdateResponse> GetCreateOrUpdateStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetCreateOrUpdateStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01-preview");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LinkedServiceCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new LinkedServiceCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            LinkedService linkedServiceInstance = new LinkedService();
                            result.LinkedService = linkedServiceInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                linkedServiceInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue["type"]);
                                if (typeName == "AzureBatchLinkedService")
                                {
                                    AzureBatchLinkedService azureBatchLinkedServiceInstance = new AzureBatchLinkedService();
                                    
                                    JToken accountNameValue = propertiesValue["accountName"];
                                    if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                    {
                                        string accountNameInstance = ((string)accountNameValue);
                                        azureBatchLinkedServiceInstance.AccountName = accountNameInstance;
                                    }
                                    
                                    JToken accessKeyValue = propertiesValue["accessKey"];
                                    if (accessKeyValue != null && accessKeyValue.Type != JTokenType.Null)
                                    {
                                        string accessKeyInstance = ((string)accessKeyValue);
                                        azureBatchLinkedServiceInstance.AccessKey = accessKeyInstance;
                                    }
                                    
                                    JToken poolNameValue = propertiesValue["poolName"];
                                    if (poolNameValue != null && poolNameValue.Type != JTokenType.Null)
                                    {
                                        string poolNameInstance = ((string)poolNameValue);
                                        azureBatchLinkedServiceInstance.PoolName = poolNameInstance;
                                    }
                                    
                                    JToken linkedServiceNameValue = propertiesValue["linkedServiceName"];
                                    if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                        azureBatchLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance;
                                    }
                                    
                                    JToken descriptionValue = propertiesValue["description"];
                                    if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance = ((string)descriptionValue);
                                        azureBatchLinkedServiceInstance.Description = descriptionInstance;
                                    }
                                    
                                    JToken provisioningStateValue = propertiesValue["provisioningState"];
                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                        azureBatchLinkedServiceInstance.ProvisioningState = provisioningStateInstance;
                                    }
                                    
                                    JToken hubNameValue = propertiesValue["hubName"];
                                    if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance = ((string)hubNameValue);
                                        azureBatchLinkedServiceInstance.HubName = hubNameInstance;
                                    }
                                    
                                    JToken errorMessageValue = propertiesValue["errorMessage"];
                                    if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance = ((string)errorMessageValue);
                                        azureBatchLinkedServiceInstance.ErrorMessage = errorMessageInstance;
                                    }
                                    linkedServiceInstance.Properties = azureBatchLinkedServiceInstance;
                                }
                                if (typeName == "AzureMLLinkedService")
                                {
                                    AzureMLLinkedService azureMLLinkedServiceInstance = new AzureMLLinkedService();
                                    
                                    JToken mlEndpointValue = propertiesValue["mlEndpoint"];
                                    if (mlEndpointValue != null && mlEndpointValue.Type != JTokenType.Null)
                                    {
                                        string mlEndpointInstance = ((string)mlEndpointValue);
                                        azureMLLinkedServiceInstance.MlEndpoint = mlEndpointInstance;
                                    }
                                    
                                    JToken apiKeyValue = propertiesValue["apiKey"];
                                    if (apiKeyValue != null && apiKeyValue.Type != JTokenType.Null)
                                    {
                                        string apiKeyInstance = ((string)apiKeyValue);
                                        azureMLLinkedServiceInstance.ApiKey = apiKeyInstance;
                                    }
                                    
                                    JToken descriptionValue2 = propertiesValue["description"];
                                    if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance2 = ((string)descriptionValue2);
                                        azureMLLinkedServiceInstance.Description = descriptionInstance2;
                                    }
                                    
                                    JToken provisioningStateValue2 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                        azureMLLinkedServiceInstance.ProvisioningState = provisioningStateInstance2;
                                    }
                                    
                                    JToken hubNameValue2 = propertiesValue["hubName"];
                                    if (hubNameValue2 != null && hubNameValue2.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance2 = ((string)hubNameValue2);
                                        azureMLLinkedServiceInstance.HubName = hubNameInstance2;
                                    }
                                    
                                    JToken errorMessageValue2 = propertiesValue["errorMessage"];
                                    if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance2 = ((string)errorMessageValue2);
                                        azureMLLinkedServiceInstance.ErrorMessage = errorMessageInstance2;
                                    }
                                    linkedServiceInstance.Properties = azureMLLinkedServiceInstance;
                                }
                                if (typeName == "AzureSqlLinkedService")
                                {
                                    AzureSqlLinkedService azureSqlLinkedServiceInstance = new AzureSqlLinkedService();
                                    
                                    JToken connectionStringValue = propertiesValue["connectionString"];
                                    if (connectionStringValue != null && connectionStringValue.Type != JTokenType.Null)
                                    {
                                        string connectionStringInstance = ((string)connectionStringValue);
                                        azureSqlLinkedServiceInstance.ConnectionString = connectionStringInstance;
                                    }
                                    
                                    JToken descriptionValue3 = propertiesValue["description"];
                                    if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance3 = ((string)descriptionValue3);
                                        azureSqlLinkedServiceInstance.Description = descriptionInstance3;
                                    }
                                    
                                    JToken provisioningStateValue3 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue3 != null && provisioningStateValue3.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance3 = ((string)provisioningStateValue3);
                                        azureSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance3;
                                    }
                                    
                                    JToken hubNameValue3 = propertiesValue["hubName"];
                                    if (hubNameValue3 != null && hubNameValue3.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance3 = ((string)hubNameValue3);
                                        azureSqlLinkedServiceInstance.HubName = hubNameInstance3;
                                    }
                                    
                                    JToken errorMessageValue3 = propertiesValue["errorMessage"];
                                    if (errorMessageValue3 != null && errorMessageValue3.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance3 = ((string)errorMessageValue3);
                                        azureSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance3;
                                    }
                                    linkedServiceInstance.Properties = azureSqlLinkedServiceInstance;
                                }
                                if (typeName == "AzureStorageLinkedService")
                                {
                                    AzureStorageLinkedService azureStorageLinkedServiceInstance = new AzureStorageLinkedService();
                                    
                                    JToken connectionStringValue2 = propertiesValue["connectionString"];
                                    if (connectionStringValue2 != null && connectionStringValue2.Type != JTokenType.Null)
                                    {
                                        string connectionStringInstance2 = ((string)connectionStringValue2);
                                        azureStorageLinkedServiceInstance.ConnectionString = connectionStringInstance2;
                                    }
                                    
                                    JToken descriptionValue4 = propertiesValue["description"];
                                    if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance4 = ((string)descriptionValue4);
                                        azureStorageLinkedServiceInstance.Description = descriptionInstance4;
                                    }
                                    
                                    JToken provisioningStateValue4 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue4 != null && provisioningStateValue4.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance4 = ((string)provisioningStateValue4);
                                        azureStorageLinkedServiceInstance.ProvisioningState = provisioningStateInstance4;
                                    }
                                    
                                    JToken hubNameValue4 = propertiesValue["hubName"];
                                    if (hubNameValue4 != null && hubNameValue4.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance4 = ((string)hubNameValue4);
                                        azureStorageLinkedServiceInstance.HubName = hubNameInstance4;
                                    }
                                    
                                    JToken errorMessageValue4 = propertiesValue["errorMessage"];
                                    if (errorMessageValue4 != null && errorMessageValue4.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance4 = ((string)errorMessageValue4);
                                        azureStorageLinkedServiceInstance.ErrorMessage = errorMessageInstance4;
                                    }
                                    linkedServiceInstance.Properties = azureStorageLinkedServiceInstance;
                                }
                                if (typeName == "CustomLinkedService")
                                {
                                    CustomLinkedService customLinkedServiceInstance = new CustomLinkedService();
                                    
                                    JToken extendedPropertiesSequenceElement = ((JToken)propertiesValue["extendedProperties"]);
                                    if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in extendedPropertiesSequenceElement)
                                        {
                                            string extendedPropertiesKey = ((string)property.Name);
                                            string extendedPropertiesValue = ((string)property.Value);
                                            customLinkedServiceInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                        }
                                    }
                                    
                                    JToken descriptionValue5 = propertiesValue["description"];
                                    if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance5 = ((string)descriptionValue5);
                                        customLinkedServiceInstance.Description = descriptionInstance5;
                                    }
                                    
                                    JToken provisioningStateValue5 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue5 != null && provisioningStateValue5.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance5 = ((string)provisioningStateValue5);
                                        customLinkedServiceInstance.ProvisioningState = provisioningStateInstance5;
                                    }
                                    
                                    JToken hubNameValue5 = propertiesValue["hubName"];
                                    if (hubNameValue5 != null && hubNameValue5.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance5 = ((string)hubNameValue5);
                                        customLinkedServiceInstance.HubName = hubNameInstance5;
                                    }
                                    
                                    JToken errorMessageValue5 = propertiesValue["errorMessage"];
                                    if (errorMessageValue5 != null && errorMessageValue5.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance5 = ((string)errorMessageValue5);
                                        customLinkedServiceInstance.ErrorMessage = errorMessageInstance5;
                                    }
                                    linkedServiceInstance.Properties = customLinkedServiceInstance;
                                }
                                if (typeName == "HDInsightBYOCLinkedService")
                                {
                                    HDInsightBYOCLinkedService hDInsightBYOCLinkedServiceInstance = new HDInsightBYOCLinkedService();
                                    
                                    JToken clusterUriValue = propertiesValue["clusterUri"];
                                    if (clusterUriValue != null && clusterUriValue.Type != JTokenType.Null)
                                    {
                                        string clusterUriInstance = ((string)clusterUriValue);
                                        hDInsightBYOCLinkedServiceInstance.ClusterUri = clusterUriInstance;
                                    }
                                    
                                    JToken userNameValue = propertiesValue["userName"];
                                    if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                    {
                                        string userNameInstance = ((string)userNameValue);
                                        hDInsightBYOCLinkedServiceInstance.UserName = userNameInstance;
                                    }
                                    
                                    JToken passwordValue = propertiesValue["password"];
                                    if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                    {
                                        string passwordInstance = ((string)passwordValue);
                                        hDInsightBYOCLinkedServiceInstance.Password = passwordInstance;
                                    }
                                    
                                    JToken linkedServiceNameValue2 = propertiesValue["linkedServiceName"];
                                    if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                        hDInsightBYOCLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance2;
                                    }
                                    
                                    JToken hcatalogValue = propertiesValue["hcatalog"];
                                    if (hcatalogValue != null && hcatalogValue.Type != JTokenType.Null)
                                    {
                                        HCatalogProperties hcatalogInstance = new HCatalogProperties();
                                        hDInsightBYOCLinkedServiceInstance.Hcatalog = hcatalogInstance;
                                        
                                        JToken linkedServiceNameValue3 = hcatalogValue["linkedServiceName"];
                                        if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                            hcatalogInstance.LinkedServiceName = linkedServiceNameInstance3;
                                        }
                                        
                                        JToken recoverPartitionsValue = hcatalogValue["recoverPartitions"];
                                        if (recoverPartitionsValue != null && recoverPartitionsValue.Type != JTokenType.Null)
                                        {
                                            bool recoverPartitionsInstance = ((bool)recoverPartitionsValue);
                                            hcatalogInstance.RecoverPartitions = recoverPartitionsInstance;
                                        }
                                        
                                        JToken alterSchemaValue = hcatalogValue["alterSchema"];
                                        if (alterSchemaValue != null && alterSchemaValue.Type != JTokenType.Null)
                                        {
                                            bool alterSchemaInstance = ((bool)alterSchemaValue);
                                            hcatalogInstance.AlterSchema = alterSchemaInstance;
                                        }
                                    }
                                    
                                    JToken descriptionValue6 = propertiesValue["description"];
                                    if (descriptionValue6 != null && descriptionValue6.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance6 = ((string)descriptionValue6);
                                        hDInsightBYOCLinkedServiceInstance.Description = descriptionInstance6;
                                    }
                                    
                                    JToken provisioningStateValue6 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue6 != null && provisioningStateValue6.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance6 = ((string)provisioningStateValue6);
                                        hDInsightBYOCLinkedServiceInstance.ProvisioningState = provisioningStateInstance6;
                                    }
                                    
                                    JToken hubNameValue6 = propertiesValue["hubName"];
                                    if (hubNameValue6 != null && hubNameValue6.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance6 = ((string)hubNameValue6);
                                        hDInsightBYOCLinkedServiceInstance.HubName = hubNameInstance6;
                                    }
                                    
                                    JToken errorMessageValue6 = propertiesValue["errorMessage"];
                                    if (errorMessageValue6 != null && errorMessageValue6.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance6 = ((string)errorMessageValue6);
                                        hDInsightBYOCLinkedServiceInstance.ErrorMessage = errorMessageInstance6;
                                    }
                                    linkedServiceInstance.Properties = hDInsightBYOCLinkedServiceInstance;
                                }
                                if (typeName == "HDInsightOnDemandLinkedService")
                                {
                                    HDInsightOnDemandLinkedService hDInsightOnDemandLinkedServiceInstance = new HDInsightOnDemandLinkedService();
                                    
                                    JToken versionValue = propertiesValue["version"];
                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                    {
                                        string versionInstance = ((string)versionValue);
                                        hDInsightOnDemandLinkedServiceInstance.Version = versionInstance;
                                    }
                                    
                                    JToken clusterTypeValue = propertiesValue["clusterType"];
                                    if (clusterTypeValue != null && clusterTypeValue.Type != JTokenType.Null)
                                    {
                                        string clusterTypeInstance = ((string)clusterTypeValue);
                                        hDInsightOnDemandLinkedServiceInstance.ClusterType = clusterTypeInstance;
                                    }
                                    
                                    JToken clusterSizeValue = propertiesValue["clusterSize"];
                                    if (clusterSizeValue != null && clusterSizeValue.Type != JTokenType.Null)
                                    {
                                        int clusterSizeInstance = ((int)clusterSizeValue);
                                        hDInsightOnDemandLinkedServiceInstance.ClusterSize = clusterSizeInstance;
                                    }
                                    
                                    JToken timeToLiveValue = propertiesValue["timeToLive"];
                                    if (timeToLiveValue != null && timeToLiveValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan timeToLiveInstance = TimeSpan.Parse(((string)timeToLiveValue), CultureInfo.InvariantCulture);
                                        hDInsightOnDemandLinkedServiceInstance.TimeToLive = timeToLiveInstance;
                                    }
                                    
                                    JToken linkedServiceNameValue4 = propertiesValue["linkedServiceName"];
                                    if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                    {
                                        string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                        hDInsightOnDemandLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance4;
                                    }
                                    
                                    JToken hiveCustomLibrariesContainerValue = propertiesValue["hiveCustomLibrariesContainer"];
                                    if (hiveCustomLibrariesContainerValue != null && hiveCustomLibrariesContainerValue.Type != JTokenType.Null)
                                    {
                                        string hiveCustomLibrariesContainerInstance = ((string)hiveCustomLibrariesContainerValue);
                                        hDInsightOnDemandLinkedServiceInstance.HiveCustomLibrariesContainer = hiveCustomLibrariesContainerInstance;
                                    }
                                    
                                    JToken coreConfigurationSequenceElement = ((JToken)propertiesValue["coreConfiguration"]);
                                    if (coreConfigurationSequenceElement != null && coreConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in coreConfigurationSequenceElement)
                                        {
                                            string coreConfigurationKey = ((string)property2.Name);
                                            string coreConfigurationValue = ((string)property2.Value);
                                            hDInsightOnDemandLinkedServiceInstance.CoreConfiguration.Add(coreConfigurationKey, coreConfigurationValue);
                                        }
                                    }
                                    
                                    JToken hBaseConfigurationSequenceElement = ((JToken)propertiesValue["hBaseConfiguration"]);
                                    if (hBaseConfigurationSequenceElement != null && hBaseConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property3 in hBaseConfigurationSequenceElement)
                                        {
                                            string hBaseConfigurationKey = ((string)property3.Name);
                                            string hBaseConfigurationValue = ((string)property3.Value);
                                            hDInsightOnDemandLinkedServiceInstance.HBaseConfiguration.Add(hBaseConfigurationKey, hBaseConfigurationValue);
                                        }
                                    }
                                    
                                    JToken hdfsConfigurationSequenceElement = ((JToken)propertiesValue["hdfsConfiguration"]);
                                    if (hdfsConfigurationSequenceElement != null && hdfsConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property4 in hdfsConfigurationSequenceElement)
                                        {
                                            string hdfsConfigurationKey = ((string)property4.Name);
                                            string hdfsConfigurationValue = ((string)property4.Value);
                                            hDInsightOnDemandLinkedServiceInstance.HdfsConfiguration.Add(hdfsConfigurationKey, hdfsConfigurationValue);
                                        }
                                    }
                                    
                                    JToken hiveConfigurationSequenceElement = ((JToken)propertiesValue["hiveConfiguration"]);
                                    if (hiveConfigurationSequenceElement != null && hiveConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property5 in hiveConfigurationSequenceElement)
                                        {
                                            string hiveConfigurationKey = ((string)property5.Name);
                                            string hiveConfigurationValue = ((string)property5.Value);
                                            hDInsightOnDemandLinkedServiceInstance.HiveConfiguration.Add(hiveConfigurationKey, hiveConfigurationValue);
                                        }
                                    }
                                    
                                    JToken mapReduceConfigurationSequenceElement = ((JToken)propertiesValue["mapReduceConfiguration"]);
                                    if (mapReduceConfigurationSequenceElement != null && mapReduceConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property6 in mapReduceConfigurationSequenceElement)
                                        {
                                            string mapReduceConfigurationKey = ((string)property6.Name);
                                            string mapReduceConfigurationValue = ((string)property6.Value);
                                            hDInsightOnDemandLinkedServiceInstance.MapReduceConfiguration.Add(mapReduceConfigurationKey, mapReduceConfigurationValue);
                                        }
                                    }
                                    
                                    JToken oozieConfigurationSequenceElement = ((JToken)propertiesValue["oozieConfiguration"]);
                                    if (oozieConfigurationSequenceElement != null && oozieConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property7 in oozieConfigurationSequenceElement)
                                        {
                                            string oozieConfigurationKey = ((string)property7.Name);
                                            string oozieConfigurationValue = ((string)property7.Value);
                                            hDInsightOnDemandLinkedServiceInstance.OozieConfiguration.Add(oozieConfigurationKey, oozieConfigurationValue);
                                        }
                                    }
                                    
                                    JToken stormConfigurationSequenceElement = ((JToken)propertiesValue["stormConfiguration"]);
                                    if (stormConfigurationSequenceElement != null && stormConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property8 in stormConfigurationSequenceElement)
                                        {
                                            string stormConfigurationKey = ((string)property8.Name);
                                            string stormConfigurationValue = ((string)property8.Value);
                                            hDInsightOnDemandLinkedServiceInstance.StormConfiguration.Add(stormConfigurationKey, stormConfigurationValue);
                                        }
                                    }
                                    
                                    JToken sparkConfigurationSequenceElement = ((JToken)propertiesValue["sparkConfiguration"]);
                                    if (sparkConfigurationSequenceElement != null && sparkConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property9 in sparkConfigurationSequenceElement)
                                        {
                                            string sparkConfigurationKey = ((string)property9.Name);
                                            string sparkConfigurationValue = ((string)property9.Value);
                                            hDInsightOnDemandLinkedServiceInstance.SparkConfiguration.Add(sparkConfigurationKey, sparkConfigurationValue);
                                        }
                                    }
                                    
                                    JToken yarnConfigurationSequenceElement = ((JToken)propertiesValue["yarnConfiguration"]);
                                    if (yarnConfigurationSequenceElement != null && yarnConfigurationSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property10 in yarnConfigurationSequenceElement)
                                        {
                                            string yarnConfigurationKey = ((string)property10.Name);
                                            string yarnConfigurationValue = ((string)property10.Value);
                                            hDInsightOnDemandLinkedServiceInstance.YarnConfiguration.Add(yarnConfigurationKey, yarnConfigurationValue);
                                        }
                                    }
                                    
                                    JToken additionalLinkedServiceNamesArray = propertiesValue["additionalLinkedServiceNames"];
                                    if (additionalLinkedServiceNamesArray != null && additionalLinkedServiceNamesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken additionalLinkedServiceNamesValue in ((JArray)additionalLinkedServiceNamesArray))
                                        {
                                            hDInsightOnDemandLinkedServiceInstance.AdditionalLinkedServiceNames.Add(((string)additionalLinkedServiceNamesValue));
                                        }
                                    }
                                    
                                    JToken hcatalogValue2 = propertiesValue["hcatalog"];
                                    if (hcatalogValue2 != null && hcatalogValue2.Type != JTokenType.Null)
                                    {
                                        HCatalogProperties hcatalogInstance2 = new HCatalogProperties();
                                        hDInsightOnDemandLinkedServiceInstance.Hcatalog = hcatalogInstance2;
                                        
                                        JToken linkedServiceNameValue5 = hcatalogValue2["linkedServiceName"];
                                        if (linkedServiceNameValue5 != null && linkedServiceNameValue5.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance5 = ((string)linkedServiceNameValue5);
                                            hcatalogInstance2.LinkedServiceName = linkedServiceNameInstance5;
                                        }
                                        
                                        JToken recoverPartitionsValue2 = hcatalogValue2["recoverPartitions"];
                                        if (recoverPartitionsValue2 != null && recoverPartitionsValue2.Type != JTokenType.Null)
                                        {
                                            bool recoverPartitionsInstance2 = ((bool)recoverPartitionsValue2);
                                            hcatalogInstance2.RecoverPartitions = recoverPartitionsInstance2;
                                        }
                                        
                                        JToken alterSchemaValue2 = hcatalogValue2["alterSchema"];
                                        if (alterSchemaValue2 != null && alterSchemaValue2.Type != JTokenType.Null)
                                        {
                                            bool alterSchemaInstance2 = ((bool)alterSchemaValue2);
                                            hcatalogInstance2.AlterSchema = alterSchemaInstance2;
                                        }
                                    }
                                    
                                    JToken dataNodeSizeValue = propertiesValue["dataNodeSize"];
                                    if (dataNodeSizeValue != null && dataNodeSizeValue.Type != JTokenType.Null)
                                    {
                                        string dataNodeSizeInstance = ((string)dataNodeSizeValue);
                                        hDInsightOnDemandLinkedServiceInstance.DataNodeSize = dataNodeSizeInstance;
                                    }
                                    
                                    JToken headNodeSizeValue = propertiesValue["headNodeSize"];
                                    if (headNodeSizeValue != null && headNodeSizeValue.Type != JTokenType.Null)
                                    {
                                        string headNodeSizeInstance = ((string)headNodeSizeValue);
                                        hDInsightOnDemandLinkedServiceInstance.HeadNodeSize = headNodeSizeInstance;
                                    }
                                    
                                    JToken zookeeperNodeSizeValue = propertiesValue["zookeeperNodeSize"];
                                    if (zookeeperNodeSizeValue != null && zookeeperNodeSizeValue.Type != JTokenType.Null)
                                    {
                                        string zookeeperNodeSizeInstance = ((string)zookeeperNodeSizeValue);
                                        hDInsightOnDemandLinkedServiceInstance.ZookeeperNodeSize = zookeeperNodeSizeInstance;
                                    }
                                    
                                    JToken osTypeValue = propertiesValue["osType"];
                                    if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                    {
                                        string osTypeInstance = ((string)osTypeValue);
                                        hDInsightOnDemandLinkedServiceInstance.OSType = osTypeInstance;
                                    }
                                    
                                    JToken sshPasswordValue = propertiesValue["sshPassword"];
                                    if (sshPasswordValue != null && sshPasswordValue.Type != JTokenType.Null)
                                    {
                                        string sshPasswordInstance = ((string)sshPasswordValue);
                                        hDInsightOnDemandLinkedServiceInstance.SshPassword = sshPasswordInstance;
                                    }
                                    
                                    JToken sshPublicKeyValue = propertiesValue["sshPublicKey"];
                                    if (sshPublicKeyValue != null && sshPublicKeyValue.Type != JTokenType.Null)
                                    {
                                        string sshPublicKeyInstance = ((string)sshPublicKeyValue);
                                        hDInsightOnDemandLinkedServiceInstance.SshPublicKey = sshPublicKeyInstance;
                                    }
                                    
                                    JToken sshUserNameValue = propertiesValue["sshUserName"];
                                    if (sshUserNameValue != null && sshUserNameValue.Type != JTokenType.Null)
                                    {
                                        string sshUserNameInstance = ((string)sshUserNameValue);
                                        hDInsightOnDemandLinkedServiceInstance.SshUserName = sshUserNameInstance;
                                    }
                                    
                                    JToken descriptionValue7 = propertiesValue["description"];
                                    if (descriptionValue7 != null && descriptionValue7.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance7 = ((string)descriptionValue7);
                                        hDInsightOnDemandLinkedServiceInstance.Description = descriptionInstance7;
                                    }
                                    
                                    JToken provisioningStateValue7 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue7 != null && provisioningStateValue7.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance7 = ((string)provisioningStateValue7);
                                        hDInsightOnDemandLinkedServiceInstance.ProvisioningState = provisioningStateInstance7;
                                    }
                                    
                                    JToken hubNameValue7 = propertiesValue["hubName"];
                                    if (hubNameValue7 != null && hubNameValue7.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance7 = ((string)hubNameValue7);
                                        hDInsightOnDemandLinkedServiceInstance.HubName = hubNameInstance7;
                                    }
                                    
                                    JToken errorMessageValue7 = propertiesValue["errorMessage"];
                                    if (errorMessageValue7 != null && errorMessageValue7.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance7 = ((string)errorMessageValue7);
                                        hDInsightOnDemandLinkedServiceInstance.ErrorMessage = errorMessageInstance7;
                                    }
                                    linkedServiceInstance.Properties = hDInsightOnDemandLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesDb2LinkedService")
                                {
                                    OnPremisesDb2LinkedService onPremisesDb2LinkedServiceInstance = new OnPremisesDb2LinkedService();
                                    
                                    JToken serverValue = propertiesValue["server"];
                                    if (serverValue != null && serverValue.Type != JTokenType.Null)
                                    {
                                        string serverInstance = ((string)serverValue);
                                        onPremisesDb2LinkedServiceInstance.Server = serverInstance;
                                    }
                                    
                                    JToken databaseValue = propertiesValue["database"];
                                    if (databaseValue != null && databaseValue.Type != JTokenType.Null)
                                    {
                                        string databaseInstance = ((string)databaseValue);
                                        onPremisesDb2LinkedServiceInstance.Database = databaseInstance;
                                    }
                                    
                                    JToken schemaValue = propertiesValue["schema"];
                                    if (schemaValue != null && schemaValue.Type != JTokenType.Null)
                                    {
                                        string schemaInstance = ((string)schemaValue);
                                        onPremisesDb2LinkedServiceInstance.Schema = schemaInstance;
                                    }
                                    
                                    JToken authenticationTypeValue = propertiesValue["authenticationType"];
                                    if (authenticationTypeValue != null && authenticationTypeValue.Type != JTokenType.Null)
                                    {
                                        string authenticationTypeInstance = ((string)authenticationTypeValue);
                                        onPremisesDb2LinkedServiceInstance.AuthenticationType = authenticationTypeInstance;
                                    }
                                    
                                    JToken usernameValue = propertiesValue["username"];
                                    if (usernameValue != null && usernameValue.Type != JTokenType.Null)
                                    {
                                        string usernameInstance = ((string)usernameValue);
                                        onPremisesDb2LinkedServiceInstance.Username = usernameInstance;
                                    }
                                    
                                    JToken passwordValue2 = propertiesValue["password"];
                                    if (passwordValue2 != null && passwordValue2.Type != JTokenType.Null)
                                    {
                                        string passwordInstance2 = ((string)passwordValue2);
                                        onPremisesDb2LinkedServiceInstance.Password = passwordInstance2;
                                    }
                                    
                                    JToken gatewayNameValue = propertiesValue["gatewayName"];
                                    if (gatewayNameValue != null && gatewayNameValue.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance = ((string)gatewayNameValue);
                                        onPremisesDb2LinkedServiceInstance.GatewayName = gatewayNameInstance;
                                    }
                                    
                                    JToken encryptedCredentialValue = propertiesValue["encryptedCredential"];
                                    if (encryptedCredentialValue != null && encryptedCredentialValue.Type != JTokenType.Null)
                                    {
                                        string encryptedCredentialInstance = ((string)encryptedCredentialValue);
                                        onPremisesDb2LinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance;
                                    }
                                    
                                    JToken descriptionValue8 = propertiesValue["description"];
                                    if (descriptionValue8 != null && descriptionValue8.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance8 = ((string)descriptionValue8);
                                        onPremisesDb2LinkedServiceInstance.Description = descriptionInstance8;
                                    }
                                    
                                    JToken provisioningStateValue8 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue8 != null && provisioningStateValue8.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance8 = ((string)provisioningStateValue8);
                                        onPremisesDb2LinkedServiceInstance.ProvisioningState = provisioningStateInstance8;
                                    }
                                    
                                    JToken hubNameValue8 = propertiesValue["hubName"];
                                    if (hubNameValue8 != null && hubNameValue8.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance8 = ((string)hubNameValue8);
                                        onPremisesDb2LinkedServiceInstance.HubName = hubNameInstance8;
                                    }
                                    
                                    JToken errorMessageValue8 = propertiesValue["errorMessage"];
                                    if (errorMessageValue8 != null && errorMessageValue8.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance8 = ((string)errorMessageValue8);
                                        onPremisesDb2LinkedServiceInstance.ErrorMessage = errorMessageInstance8;
                                    }
                                    linkedServiceInstance.Properties = onPremisesDb2LinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesFileSystemLinkedService")
                                {
                                    OnPremisesFileSystemLinkedService onPremisesFileSystemLinkedServiceInstance = new OnPremisesFileSystemLinkedService();
                                    
                                    JToken hostValue = propertiesValue["host"];
                                    if (hostValue != null && hostValue.Type != JTokenType.Null)
                                    {
                                        string hostInstance = ((string)hostValue);
                                        onPremisesFileSystemLinkedServiceInstance.Host = hostInstance;
                                    }
                                    
                                    JToken gatewayNameValue2 = propertiesValue["gatewayName"];
                                    if (gatewayNameValue2 != null && gatewayNameValue2.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance2 = ((string)gatewayNameValue2);
                                        onPremisesFileSystemLinkedServiceInstance.GatewayName = gatewayNameInstance2;
                                    }
                                    
                                    JToken userIdValue = propertiesValue["userId"];
                                    if (userIdValue != null && userIdValue.Type != JTokenType.Null)
                                    {
                                        string userIdInstance = ((string)userIdValue);
                                        onPremisesFileSystemLinkedServiceInstance.UserId = userIdInstance;
                                    }
                                    
                                    JToken passwordValue3 = propertiesValue["password"];
                                    if (passwordValue3 != null && passwordValue3.Type != JTokenType.Null)
                                    {
                                        string passwordInstance3 = ((string)passwordValue3);
                                        onPremisesFileSystemLinkedServiceInstance.Password = passwordInstance3;
                                    }
                                    
                                    JToken encryptedCredentialValue2 = propertiesValue["encryptedCredential"];
                                    if (encryptedCredentialValue2 != null && encryptedCredentialValue2.Type != JTokenType.Null)
                                    {
                                        string encryptedCredentialInstance2 = ((string)encryptedCredentialValue2);
                                        onPremisesFileSystemLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance2;
                                    }
                                    
                                    JToken descriptionValue9 = propertiesValue["description"];
                                    if (descriptionValue9 != null && descriptionValue9.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance9 = ((string)descriptionValue9);
                                        onPremisesFileSystemLinkedServiceInstance.Description = descriptionInstance9;
                                    }
                                    
                                    JToken provisioningStateValue9 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue9 != null && provisioningStateValue9.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance9 = ((string)provisioningStateValue9);
                                        onPremisesFileSystemLinkedServiceInstance.ProvisioningState = provisioningStateInstance9;
                                    }
                                    
                                    JToken hubNameValue9 = propertiesValue["hubName"];
                                    if (hubNameValue9 != null && hubNameValue9.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance9 = ((string)hubNameValue9);
                                        onPremisesFileSystemLinkedServiceInstance.HubName = hubNameInstance9;
                                    }
                                    
                                    JToken errorMessageValue9 = propertiesValue["errorMessage"];
                                    if (errorMessageValue9 != null && errorMessageValue9.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance9 = ((string)errorMessageValue9);
                                        onPremisesFileSystemLinkedServiceInstance.ErrorMessage = errorMessageInstance9;
                                    }
                                    linkedServiceInstance.Properties = onPremisesFileSystemLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesMySqlLinkedService")
                                {
                                    OnPremisesMySqlLinkedService onPremisesMySqlLinkedServiceInstance = new OnPremisesMySqlLinkedService();
                                    
                                    JToken serverValue2 = propertiesValue["server"];
                                    if (serverValue2 != null && serverValue2.Type != JTokenType.Null)
                                    {
                                        string serverInstance2 = ((string)serverValue2);
                                        onPremisesMySqlLinkedServiceInstance.Server = serverInstance2;
                                    }
                                    
                                    JToken databaseValue2 = propertiesValue["database"];
                                    if (databaseValue2 != null && databaseValue2.Type != JTokenType.Null)
                                    {
                                        string databaseInstance2 = ((string)databaseValue2);
                                        onPremisesMySqlLinkedServiceInstance.Database = databaseInstance2;
                                    }
                                    
                                    JToken schemaValue2 = propertiesValue["schema"];
                                    if (schemaValue2 != null && schemaValue2.Type != JTokenType.Null)
                                    {
                                        string schemaInstance2 = ((string)schemaValue2);
                                        onPremisesMySqlLinkedServiceInstance.Schema = schemaInstance2;
                                    }
                                    
                                    JToken authenticationTypeValue2 = propertiesValue["authenticationType"];
                                    if (authenticationTypeValue2 != null && authenticationTypeValue2.Type != JTokenType.Null)
                                    {
                                        string authenticationTypeInstance2 = ((string)authenticationTypeValue2);
                                        onPremisesMySqlLinkedServiceInstance.AuthenticationType = authenticationTypeInstance2;
                                    }
                                    
                                    JToken usernameValue2 = propertiesValue["username"];
                                    if (usernameValue2 != null && usernameValue2.Type != JTokenType.Null)
                                    {
                                        string usernameInstance2 = ((string)usernameValue2);
                                        onPremisesMySqlLinkedServiceInstance.Username = usernameInstance2;
                                    }
                                    
                                    JToken passwordValue4 = propertiesValue["password"];
                                    if (passwordValue4 != null && passwordValue4.Type != JTokenType.Null)
                                    {
                                        string passwordInstance4 = ((string)passwordValue4);
                                        onPremisesMySqlLinkedServiceInstance.Password = passwordInstance4;
                                    }
                                    
                                    JToken gatewayNameValue3 = propertiesValue["gatewayName"];
                                    if (gatewayNameValue3 != null && gatewayNameValue3.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance3 = ((string)gatewayNameValue3);
                                        onPremisesMySqlLinkedServiceInstance.GatewayName = gatewayNameInstance3;
                                    }
                                    
                                    JToken encryptedCredentialValue3 = propertiesValue["encryptedCredential"];
                                    if (encryptedCredentialValue3 != null && encryptedCredentialValue3.Type != JTokenType.Null)
                                    {
                                        string encryptedCredentialInstance3 = ((string)encryptedCredentialValue3);
                                        onPremisesMySqlLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance3;
                                    }
                                    
                                    JToken descriptionValue10 = propertiesValue["description"];
                                    if (descriptionValue10 != null && descriptionValue10.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance10 = ((string)descriptionValue10);
                                        onPremisesMySqlLinkedServiceInstance.Description = descriptionInstance10;
                                    }
                                    
                                    JToken provisioningStateValue10 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue10 != null && provisioningStateValue10.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance10 = ((string)provisioningStateValue10);
                                        onPremisesMySqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance10;
                                    }
                                    
                                    JToken hubNameValue10 = propertiesValue["hubName"];
                                    if (hubNameValue10 != null && hubNameValue10.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance10 = ((string)hubNameValue10);
                                        onPremisesMySqlLinkedServiceInstance.HubName = hubNameInstance10;
                                    }
                                    
                                    JToken errorMessageValue10 = propertiesValue["errorMessage"];
                                    if (errorMessageValue10 != null && errorMessageValue10.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance10 = ((string)errorMessageValue10);
                                        onPremisesMySqlLinkedServiceInstance.ErrorMessage = errorMessageInstance10;
                                    }
                                    linkedServiceInstance.Properties = onPremisesMySqlLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesOracleLinkedService")
                                {
                                    OnPremisesOracleLinkedService onPremisesOracleLinkedServiceInstance = new OnPremisesOracleLinkedService();
                                    
                                    JToken connectionStringValue3 = propertiesValue["connectionString"];
                                    if (connectionStringValue3 != null && connectionStringValue3.Type != JTokenType.Null)
                                    {
                                        string connectionStringInstance3 = ((string)connectionStringValue3);
                                        onPremisesOracleLinkedServiceInstance.ConnectionString = connectionStringInstance3;
                                    }
                                    
                                    JToken gatewayNameValue4 = propertiesValue["gatewayName"];
                                    if (gatewayNameValue4 != null && gatewayNameValue4.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance4 = ((string)gatewayNameValue4);
                                        onPremisesOracleLinkedServiceInstance.GatewayName = gatewayNameInstance4;
                                    }
                                    
                                    JToken userNameValue2 = propertiesValue["userName"];
                                    if (userNameValue2 != null && userNameValue2.Type != JTokenType.Null)
                                    {
                                        string userNameInstance2 = ((string)userNameValue2);
                                        onPremisesOracleLinkedServiceInstance.UserName = userNameInstance2;
                                    }
                                    
                                    JToken passwordValue5 = propertiesValue["password"];
                                    if (passwordValue5 != null && passwordValue5.Type != JTokenType.Null)
                                    {
                                        string passwordInstance5 = ((string)passwordValue5);
                                        onPremisesOracleLinkedServiceInstance.Password = passwordInstance5;
                                    }
                                    
                                    JToken descriptionValue11 = propertiesValue["description"];
                                    if (descriptionValue11 != null && descriptionValue11.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance11 = ((string)descriptionValue11);
                                        onPremisesOracleLinkedServiceInstance.Description = descriptionInstance11;
                                    }
                                    
                                    JToken provisioningStateValue11 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue11 != null && provisioningStateValue11.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance11 = ((string)provisioningStateValue11);
                                        onPremisesOracleLinkedServiceInstance.ProvisioningState = provisioningStateInstance11;
                                    }
                                    
                                    JToken hubNameValue11 = propertiesValue["hubName"];
                                    if (hubNameValue11 != null && hubNameValue11.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance11 = ((string)hubNameValue11);
                                        onPremisesOracleLinkedServiceInstance.HubName = hubNameInstance11;
                                    }
                                    
                                    JToken errorMessageValue11 = propertiesValue["errorMessage"];
                                    if (errorMessageValue11 != null && errorMessageValue11.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance11 = ((string)errorMessageValue11);
                                        onPremisesOracleLinkedServiceInstance.ErrorMessage = errorMessageInstance11;
                                    }
                                    linkedServiceInstance.Properties = onPremisesOracleLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesPostgreSqlLinkedService")
                                {
                                    OnPremisesPostgreSqlLinkedService onPremisesPostgreSqlLinkedServiceInstance = new OnPremisesPostgreSqlLinkedService();
                                    
                                    JToken serverValue3 = propertiesValue["server"];
                                    if (serverValue3 != null && serverValue3.Type != JTokenType.Null)
                                    {
                                        string serverInstance3 = ((string)serverValue3);
                                        onPremisesPostgreSqlLinkedServiceInstance.Server = serverInstance3;
                                    }
                                    
                                    JToken databaseValue3 = propertiesValue["database"];
                                    if (databaseValue3 != null && databaseValue3.Type != JTokenType.Null)
                                    {
                                        string databaseInstance3 = ((string)databaseValue3);
                                        onPremisesPostgreSqlLinkedServiceInstance.Database = databaseInstance3;
                                    }
                                    
                                    JToken schemaValue3 = propertiesValue["schema"];
                                    if (schemaValue3 != null && schemaValue3.Type != JTokenType.Null)
                                    {
                                        string schemaInstance3 = ((string)schemaValue3);
                                        onPremisesPostgreSqlLinkedServiceInstance.Schema = schemaInstance3;
                                    }
                                    
                                    JToken authenticationTypeValue3 = propertiesValue["authenticationType"];
                                    if (authenticationTypeValue3 != null && authenticationTypeValue3.Type != JTokenType.Null)
                                    {
                                        string authenticationTypeInstance3 = ((string)authenticationTypeValue3);
                                        onPremisesPostgreSqlLinkedServiceInstance.AuthenticationType = authenticationTypeInstance3;
                                    }
                                    
                                    JToken usernameValue3 = propertiesValue["username"];
                                    if (usernameValue3 != null && usernameValue3.Type != JTokenType.Null)
                                    {
                                        string usernameInstance3 = ((string)usernameValue3);
                                        onPremisesPostgreSqlLinkedServiceInstance.Username = usernameInstance3;
                                    }
                                    
                                    JToken passwordValue6 = propertiesValue["password"];
                                    if (passwordValue6 != null && passwordValue6.Type != JTokenType.Null)
                                    {
                                        string passwordInstance6 = ((string)passwordValue6);
                                        onPremisesPostgreSqlLinkedServiceInstance.Password = passwordInstance6;
                                    }
                                    
                                    JToken gatewayNameValue5 = propertiesValue["gatewayName"];
                                    if (gatewayNameValue5 != null && gatewayNameValue5.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance5 = ((string)gatewayNameValue5);
                                        onPremisesPostgreSqlLinkedServiceInstance.GatewayName = gatewayNameInstance5;
                                    }
                                    
                                    JToken encryptedCredentialValue4 = propertiesValue["encryptedCredential"];
                                    if (encryptedCredentialValue4 != null && encryptedCredentialValue4.Type != JTokenType.Null)
                                    {
                                        string encryptedCredentialInstance4 = ((string)encryptedCredentialValue4);
                                        onPremisesPostgreSqlLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance4;
                                    }
                                    
                                    JToken descriptionValue12 = propertiesValue["description"];
                                    if (descriptionValue12 != null && descriptionValue12.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance12 = ((string)descriptionValue12);
                                        onPremisesPostgreSqlLinkedServiceInstance.Description = descriptionInstance12;
                                    }
                                    
                                    JToken provisioningStateValue12 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue12 != null && provisioningStateValue12.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance12 = ((string)provisioningStateValue12);
                                        onPremisesPostgreSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance12;
                                    }
                                    
                                    JToken hubNameValue12 = propertiesValue["hubName"];
                                    if (hubNameValue12 != null && hubNameValue12.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance12 = ((string)hubNameValue12);
                                        onPremisesPostgreSqlLinkedServiceInstance.HubName = hubNameInstance12;
                                    }
                                    
                                    JToken errorMessageValue12 = propertiesValue["errorMessage"];
                                    if (errorMessageValue12 != null && errorMessageValue12.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance12 = ((string)errorMessageValue12);
                                        onPremisesPostgreSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance12;
                                    }
                                    linkedServiceInstance.Properties = onPremisesPostgreSqlLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesSqlLinkedService")
                                {
                                    OnPremisesSqlLinkedService onPremisesSqlLinkedServiceInstance = new OnPremisesSqlLinkedService();
                                    
                                    JToken connectionStringValue4 = propertiesValue["connectionString"];
                                    if (connectionStringValue4 != null && connectionStringValue4.Type != JTokenType.Null)
                                    {
                                        string connectionStringInstance4 = ((string)connectionStringValue4);
                                        onPremisesSqlLinkedServiceInstance.ConnectionString = connectionStringInstance4;
                                    }
                                    
                                    JToken gatewayNameValue6 = propertiesValue["gatewayName"];
                                    if (gatewayNameValue6 != null && gatewayNameValue6.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance6 = ((string)gatewayNameValue6);
                                        onPremisesSqlLinkedServiceInstance.GatewayName = gatewayNameInstance6;
                                    }
                                    
                                    JToken userNameValue3 = propertiesValue["userName"];
                                    if (userNameValue3 != null && userNameValue3.Type != JTokenType.Null)
                                    {
                                        string userNameInstance3 = ((string)userNameValue3);
                                        onPremisesSqlLinkedServiceInstance.UserName = userNameInstance3;
                                    }
                                    
                                    JToken passwordValue7 = propertiesValue["password"];
                                    if (passwordValue7 != null && passwordValue7.Type != JTokenType.Null)
                                    {
                                        string passwordInstance7 = ((string)passwordValue7);
                                        onPremisesSqlLinkedServiceInstance.Password = passwordInstance7;
                                    }
                                    
                                    JToken descriptionValue13 = propertiesValue["description"];
                                    if (descriptionValue13 != null && descriptionValue13.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance13 = ((string)descriptionValue13);
                                        onPremisesSqlLinkedServiceInstance.Description = descriptionInstance13;
                                    }
                                    
                                    JToken provisioningStateValue13 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue13 != null && provisioningStateValue13.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance13 = ((string)provisioningStateValue13);
                                        onPremisesSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance13;
                                    }
                                    
                                    JToken hubNameValue13 = propertiesValue["hubName"];
                                    if (hubNameValue13 != null && hubNameValue13.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance13 = ((string)hubNameValue13);
                                        onPremisesSqlLinkedServiceInstance.HubName = hubNameInstance13;
                                    }
                                    
                                    JToken errorMessageValue13 = propertiesValue["errorMessage"];
                                    if (errorMessageValue13 != null && errorMessageValue13.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance13 = ((string)errorMessageValue13);
                                        onPremisesSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance13;
                                    }
                                    linkedServiceInstance.Properties = onPremisesSqlLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesSybaseLinkedService")
                                {
                                    OnPremisesSybaseLinkedService onPremisesSybaseLinkedServiceInstance = new OnPremisesSybaseLinkedService();
                                    
                                    JToken serverValue4 = propertiesValue["server"];
                                    if (serverValue4 != null && serverValue4.Type != JTokenType.Null)
                                    {
                                        string serverInstance4 = ((string)serverValue4);
                                        onPremisesSybaseLinkedServiceInstance.Server = serverInstance4;
                                    }
                                    
                                    JToken databaseValue4 = propertiesValue["database"];
                                    if (databaseValue4 != null && databaseValue4.Type != JTokenType.Null)
                                    {
                                        string databaseInstance4 = ((string)databaseValue4);
                                        onPremisesSybaseLinkedServiceInstance.Database = databaseInstance4;
                                    }
                                    
                                    JToken schemaValue4 = propertiesValue["schema"];
                                    if (schemaValue4 != null && schemaValue4.Type != JTokenType.Null)
                                    {
                                        string schemaInstance4 = ((string)schemaValue4);
                                        onPremisesSybaseLinkedServiceInstance.Schema = schemaInstance4;
                                    }
                                    
                                    JToken authenticationTypeValue4 = propertiesValue["authenticationType"];
                                    if (authenticationTypeValue4 != null && authenticationTypeValue4.Type != JTokenType.Null)
                                    {
                                        string authenticationTypeInstance4 = ((string)authenticationTypeValue4);
                                        onPremisesSybaseLinkedServiceInstance.AuthenticationType = authenticationTypeInstance4;
                                    }
                                    
                                    JToken usernameValue4 = propertiesValue["username"];
                                    if (usernameValue4 != null && usernameValue4.Type != JTokenType.Null)
                                    {
                                        string usernameInstance4 = ((string)usernameValue4);
                                        onPremisesSybaseLinkedServiceInstance.Username = usernameInstance4;
                                    }
                                    
                                    JToken passwordValue8 = propertiesValue["password"];
                                    if (passwordValue8 != null && passwordValue8.Type != JTokenType.Null)
                                    {
                                        string passwordInstance8 = ((string)passwordValue8);
                                        onPremisesSybaseLinkedServiceInstance.Password = passwordInstance8;
                                    }
                                    
                                    JToken gatewayNameValue7 = propertiesValue["gatewayName"];
                                    if (gatewayNameValue7 != null && gatewayNameValue7.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance7 = ((string)gatewayNameValue7);
                                        onPremisesSybaseLinkedServiceInstance.GatewayName = gatewayNameInstance7;
                                    }
                                    
                                    JToken encryptedCredentialValue5 = propertiesValue["encryptedCredential"];
                                    if (encryptedCredentialValue5 != null && encryptedCredentialValue5.Type != JTokenType.Null)
                                    {
                                        string encryptedCredentialInstance5 = ((string)encryptedCredentialValue5);
                                        onPremisesSybaseLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance5;
                                    }
                                    
                                    JToken descriptionValue14 = propertiesValue["description"];
                                    if (descriptionValue14 != null && descriptionValue14.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance14 = ((string)descriptionValue14);
                                        onPremisesSybaseLinkedServiceInstance.Description = descriptionInstance14;
                                    }
                                    
                                    JToken provisioningStateValue14 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue14 != null && provisioningStateValue14.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance14 = ((string)provisioningStateValue14);
                                        onPremisesSybaseLinkedServiceInstance.ProvisioningState = provisioningStateInstance14;
                                    }
                                    
                                    JToken hubNameValue14 = propertiesValue["hubName"];
                                    if (hubNameValue14 != null && hubNameValue14.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance14 = ((string)hubNameValue14);
                                        onPremisesSybaseLinkedServiceInstance.HubName = hubNameInstance14;
                                    }
                                    
                                    JToken errorMessageValue14 = propertiesValue["errorMessage"];
                                    if (errorMessageValue14 != null && errorMessageValue14.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance14 = ((string)errorMessageValue14);
                                        onPremisesSybaseLinkedServiceInstance.ErrorMessage = errorMessageInstance14;
                                    }
                                    linkedServiceInstance.Properties = onPremisesSybaseLinkedServiceInstance;
                                }
                                if (typeName == "OnPremisesTeradataLinkedService")
                                {
                                    OnPremisesTeradataLinkedService onPremisesTeradataLinkedServiceInstance = new OnPremisesTeradataLinkedService();
                                    
                                    JToken serverValue5 = propertiesValue["server"];
                                    if (serverValue5 != null && serverValue5.Type != JTokenType.Null)
                                    {
                                        string serverInstance5 = ((string)serverValue5);
                                        onPremisesTeradataLinkedServiceInstance.Server = serverInstance5;
                                    }
                                    
                                    JToken databaseValue5 = propertiesValue["database"];
                                    if (databaseValue5 != null && databaseValue5.Type != JTokenType.Null)
                                    {
                                        string databaseInstance5 = ((string)databaseValue5);
                                        onPremisesTeradataLinkedServiceInstance.Database = databaseInstance5;
                                    }
                                    
                                    JToken schemaValue5 = propertiesValue["schema"];
                                    if (schemaValue5 != null && schemaValue5.Type != JTokenType.Null)
                                    {
                                        string schemaInstance5 = ((string)schemaValue5);
                                        onPremisesTeradataLinkedServiceInstance.Schema = schemaInstance5;
                                    }
                                    
                                    JToken authenticationTypeValue5 = propertiesValue["authenticationType"];
                                    if (authenticationTypeValue5 != null && authenticationTypeValue5.Type != JTokenType.Null)
                                    {
                                        string authenticationTypeInstance5 = ((string)authenticationTypeValue5);
                                        onPremisesTeradataLinkedServiceInstance.AuthenticationType = authenticationTypeInstance5;
                                    }
                                    
                                    JToken usernameValue5 = propertiesValue["username"];
                                    if (usernameValue5 != null && usernameValue5.Type != JTokenType.Null)
                                    {
                                        string usernameInstance5 = ((string)usernameValue5);
                                        onPremisesTeradataLinkedServiceInstance.Username = usernameInstance5;
                                    }
                                    
                                    JToken passwordValue9 = propertiesValue["password"];
                                    if (passwordValue9 != null && passwordValue9.Type != JTokenType.Null)
                                    {
                                        string passwordInstance9 = ((string)passwordValue9);
                                        onPremisesTeradataLinkedServiceInstance.Password = passwordInstance9;
                                    }
                                    
                                    JToken gatewayNameValue8 = propertiesValue["gatewayName"];
                                    if (gatewayNameValue8 != null && gatewayNameValue8.Type != JTokenType.Null)
                                    {
                                        string gatewayNameInstance8 = ((string)gatewayNameValue8);
                                        onPremisesTeradataLinkedServiceInstance.GatewayName = gatewayNameInstance8;
                                    }
                                    
                                    JToken encryptedCredentialValue6 = propertiesValue["encryptedCredential"];
                                    if (encryptedCredentialValue6 != null && encryptedCredentialValue6.Type != JTokenType.Null)
                                    {
                                        string encryptedCredentialInstance6 = ((string)encryptedCredentialValue6);
                                        onPremisesTeradataLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance6;
                                    }
                                    
                                    JToken descriptionValue15 = propertiesValue["description"];
                                    if (descriptionValue15 != null && descriptionValue15.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance15 = ((string)descriptionValue15);
                                        onPremisesTeradataLinkedServiceInstance.Description = descriptionInstance15;
                                    }
                                    
                                    JToken provisioningStateValue15 = propertiesValue["provisioningState"];
                                    if (provisioningStateValue15 != null && provisioningStateValue15.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance15 = ((string)provisioningStateValue15);
                                        onPremisesTeradataLinkedServiceInstance.ProvisioningState = provisioningStateInstance15;
                                    }
                                    
                                    JToken hubNameValue15 = propertiesValue["hubName"];
                                    if (hubNameValue15 != null && hubNameValue15.Type != JTokenType.Null)
                                    {
                                        string hubNameInstance15 = ((string)hubNameValue15);
                                        onPremisesTeradataLinkedServiceInstance.HubName = hubNameInstance15;
                                    }
                                    
                                    JToken errorMessageValue15 = propertiesValue["errorMessage"];
                                    if (errorMessageValue15 != null && errorMessageValue15.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance15 = ((string)errorMessageValue15);
                                        onPremisesTeradataLinkedServiceInstance.ErrorMessage = errorMessageInstance15;
                                    }
                                    linkedServiceInstance.Properties = onPremisesTeradataLinkedServiceInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    result.Location = url;
                    if (result.LinkedService != null && result.LinkedService.Properties != null && result.LinkedService.Properties.ProvisioningState == "Failed")
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (result.LinkedService != null && result.LinkedService.Properties != null && result.LinkedService.Properties.ProvisioningState == "Succeeded")
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the first page of linked service instances with the link to
        /// the next page.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List data factory linkedServices operation response.
        /// </returns>
        public async Task<LinkedServiceListResponse> ListAsync(string resourceGroupName, string dataFactoryName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/linkedServices";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-01-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LinkedServiceListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new LinkedServiceListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    LinkedService linkedServiceInstance = new LinkedService();
                                    result.LinkedServices.Add(linkedServiceInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        linkedServiceInstance.Name = nameInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        string typeName = ((string)propertiesValue["type"]);
                                        if (typeName == "AzureBatchLinkedService")
                                        {
                                            AzureBatchLinkedService azureBatchLinkedServiceInstance = new AzureBatchLinkedService();
                                            
                                            JToken accountNameValue = propertiesValue["accountName"];
                                            if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                            {
                                                string accountNameInstance = ((string)accountNameValue);
                                                azureBatchLinkedServiceInstance.AccountName = accountNameInstance;
                                            }
                                            
                                            JToken accessKeyValue = propertiesValue["accessKey"];
                                            if (accessKeyValue != null && accessKeyValue.Type != JTokenType.Null)
                                            {
                                                string accessKeyInstance = ((string)accessKeyValue);
                                                azureBatchLinkedServiceInstance.AccessKey = accessKeyInstance;
                                            }
                                            
                                            JToken poolNameValue = propertiesValue["poolName"];
                                            if (poolNameValue != null && poolNameValue.Type != JTokenType.Null)
                                            {
                                                string poolNameInstance = ((string)poolNameValue);
                                                azureBatchLinkedServiceInstance.PoolName = poolNameInstance;
                                            }
                                            
                                            JToken linkedServiceNameValue = propertiesValue["linkedServiceName"];
                                            if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                                azureBatchLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance;
                                            }
                                            
                                            JToken descriptionValue = propertiesValue["description"];
                                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance = ((string)descriptionValue);
                                                azureBatchLinkedServiceInstance.Description = descriptionInstance;
                                            }
                                            
                                            JToken provisioningStateValue = propertiesValue["provisioningState"];
                                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance = ((string)provisioningStateValue);
                                                azureBatchLinkedServiceInstance.ProvisioningState = provisioningStateInstance;
                                            }
                                            
                                            JToken hubNameValue = propertiesValue["hubName"];
                                            if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance = ((string)hubNameValue);
                                                azureBatchLinkedServiceInstance.HubName = hubNameInstance;
                                            }
                                            
                                            JToken errorMessageValue = propertiesValue["errorMessage"];
                                            if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance = ((string)errorMessageValue);
                                                azureBatchLinkedServiceInstance.ErrorMessage = errorMessageInstance;
                                            }
                                            linkedServiceInstance.Properties = azureBatchLinkedServiceInstance;
                                        }
                                        if (typeName == "AzureMLLinkedService")
                                        {
                                            AzureMLLinkedService azureMLLinkedServiceInstance = new AzureMLLinkedService();
                                            
                                            JToken mlEndpointValue = propertiesValue["mlEndpoint"];
                                            if (mlEndpointValue != null && mlEndpointValue.Type != JTokenType.Null)
                                            {
                                                string mlEndpointInstance = ((string)mlEndpointValue);
                                                azureMLLinkedServiceInstance.MlEndpoint = mlEndpointInstance;
                                            }
                                            
                                            JToken apiKeyValue = propertiesValue["apiKey"];
                                            if (apiKeyValue != null && apiKeyValue.Type != JTokenType.Null)
                                            {
                                                string apiKeyInstance = ((string)apiKeyValue);
                                                azureMLLinkedServiceInstance.ApiKey = apiKeyInstance;
                                            }
                                            
                                            JToken descriptionValue2 = propertiesValue["description"];
                                            if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance2 = ((string)descriptionValue2);
                                                azureMLLinkedServiceInstance.Description = descriptionInstance2;
                                            }
                                            
                                            JToken provisioningStateValue2 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                                azureMLLinkedServiceInstance.ProvisioningState = provisioningStateInstance2;
                                            }
                                            
                                            JToken hubNameValue2 = propertiesValue["hubName"];
                                            if (hubNameValue2 != null && hubNameValue2.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance2 = ((string)hubNameValue2);
                                                azureMLLinkedServiceInstance.HubName = hubNameInstance2;
                                            }
                                            
                                            JToken errorMessageValue2 = propertiesValue["errorMessage"];
                                            if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance2 = ((string)errorMessageValue2);
                                                azureMLLinkedServiceInstance.ErrorMessage = errorMessageInstance2;
                                            }
                                            linkedServiceInstance.Properties = azureMLLinkedServiceInstance;
                                        }
                                        if (typeName == "AzureSqlLinkedService")
                                        {
                                            AzureSqlLinkedService azureSqlLinkedServiceInstance = new AzureSqlLinkedService();
                                            
                                            JToken connectionStringValue = propertiesValue["connectionString"];
                                            if (connectionStringValue != null && connectionStringValue.Type != JTokenType.Null)
                                            {
                                                string connectionStringInstance = ((string)connectionStringValue);
                                                azureSqlLinkedServiceInstance.ConnectionString = connectionStringInstance;
                                            }
                                            
                                            JToken descriptionValue3 = propertiesValue["description"];
                                            if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance3 = ((string)descriptionValue3);
                                                azureSqlLinkedServiceInstance.Description = descriptionInstance3;
                                            }
                                            
                                            JToken provisioningStateValue3 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue3 != null && provisioningStateValue3.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance3 = ((string)provisioningStateValue3);
                                                azureSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance3;
                                            }
                                            
                                            JToken hubNameValue3 = propertiesValue["hubName"];
                                            if (hubNameValue3 != null && hubNameValue3.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance3 = ((string)hubNameValue3);
                                                azureSqlLinkedServiceInstance.HubName = hubNameInstance3;
                                            }
                                            
                                            JToken errorMessageValue3 = propertiesValue["errorMessage"];
                                            if (errorMessageValue3 != null && errorMessageValue3.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance3 = ((string)errorMessageValue3);
                                                azureSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance3;
                                            }
                                            linkedServiceInstance.Properties = azureSqlLinkedServiceInstance;
                                        }
                                        if (typeName == "AzureStorageLinkedService")
                                        {
                                            AzureStorageLinkedService azureStorageLinkedServiceInstance = new AzureStorageLinkedService();
                                            
                                            JToken connectionStringValue2 = propertiesValue["connectionString"];
                                            if (connectionStringValue2 != null && connectionStringValue2.Type != JTokenType.Null)
                                            {
                                                string connectionStringInstance2 = ((string)connectionStringValue2);
                                                azureStorageLinkedServiceInstance.ConnectionString = connectionStringInstance2;
                                            }
                                            
                                            JToken descriptionValue4 = propertiesValue["description"];
                                            if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance4 = ((string)descriptionValue4);
                                                azureStorageLinkedServiceInstance.Description = descriptionInstance4;
                                            }
                                            
                                            JToken provisioningStateValue4 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue4 != null && provisioningStateValue4.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance4 = ((string)provisioningStateValue4);
                                                azureStorageLinkedServiceInstance.ProvisioningState = provisioningStateInstance4;
                                            }
                                            
                                            JToken hubNameValue4 = propertiesValue["hubName"];
                                            if (hubNameValue4 != null && hubNameValue4.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance4 = ((string)hubNameValue4);
                                                azureStorageLinkedServiceInstance.HubName = hubNameInstance4;
                                            }
                                            
                                            JToken errorMessageValue4 = propertiesValue["errorMessage"];
                                            if (errorMessageValue4 != null && errorMessageValue4.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance4 = ((string)errorMessageValue4);
                                                azureStorageLinkedServiceInstance.ErrorMessage = errorMessageInstance4;
                                            }
                                            linkedServiceInstance.Properties = azureStorageLinkedServiceInstance;
                                        }
                                        if (typeName == "CustomLinkedService")
                                        {
                                            CustomLinkedService customLinkedServiceInstance = new CustomLinkedService();
                                            
                                            JToken extendedPropertiesSequenceElement = ((JToken)propertiesValue["extendedProperties"]);
                                            if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property in extendedPropertiesSequenceElement)
                                                {
                                                    string extendedPropertiesKey = ((string)property.Name);
                                                    string extendedPropertiesValue = ((string)property.Value);
                                                    customLinkedServiceInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                                }
                                            }
                                            
                                            JToken descriptionValue5 = propertiesValue["description"];
                                            if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance5 = ((string)descriptionValue5);
                                                customLinkedServiceInstance.Description = descriptionInstance5;
                                            }
                                            
                                            JToken provisioningStateValue5 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue5 != null && provisioningStateValue5.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance5 = ((string)provisioningStateValue5);
                                                customLinkedServiceInstance.ProvisioningState = provisioningStateInstance5;
                                            }
                                            
                                            JToken hubNameValue5 = propertiesValue["hubName"];
                                            if (hubNameValue5 != null && hubNameValue5.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance5 = ((string)hubNameValue5);
                                                customLinkedServiceInstance.HubName = hubNameInstance5;
                                            }
                                            
                                            JToken errorMessageValue5 = propertiesValue["errorMessage"];
                                            if (errorMessageValue5 != null && errorMessageValue5.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance5 = ((string)errorMessageValue5);
                                                customLinkedServiceInstance.ErrorMessage = errorMessageInstance5;
                                            }
                                            linkedServiceInstance.Properties = customLinkedServiceInstance;
                                        }
                                        if (typeName == "HDInsightBYOCLinkedService")
                                        {
                                            HDInsightBYOCLinkedService hDInsightBYOCLinkedServiceInstance = new HDInsightBYOCLinkedService();
                                            
                                            JToken clusterUriValue = propertiesValue["clusterUri"];
                                            if (clusterUriValue != null && clusterUriValue.Type != JTokenType.Null)
                                            {
                                                string clusterUriInstance = ((string)clusterUriValue);
                                                hDInsightBYOCLinkedServiceInstance.ClusterUri = clusterUriInstance;
                                            }
                                            
                                            JToken userNameValue = propertiesValue["userName"];
                                            if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                            {
                                                string userNameInstance = ((string)userNameValue);
                                                hDInsightBYOCLinkedServiceInstance.UserName = userNameInstance;
                                            }
                                            
                                            JToken passwordValue = propertiesValue["password"];
                                            if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                            {
                                                string passwordInstance = ((string)passwordValue);
                                                hDInsightBYOCLinkedServiceInstance.Password = passwordInstance;
                                            }
                                            
                                            JToken linkedServiceNameValue2 = propertiesValue["linkedServiceName"];
                                            if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                                hDInsightBYOCLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance2;
                                            }
                                            
                                            JToken hcatalogValue = propertiesValue["hcatalog"];
                                            if (hcatalogValue != null && hcatalogValue.Type != JTokenType.Null)
                                            {
                                                HCatalogProperties hcatalogInstance = new HCatalogProperties();
                                                hDInsightBYOCLinkedServiceInstance.Hcatalog = hcatalogInstance;
                                                
                                                JToken linkedServiceNameValue3 = hcatalogValue["linkedServiceName"];
                                                if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                                    hcatalogInstance.LinkedServiceName = linkedServiceNameInstance3;
                                                }
                                                
                                                JToken recoverPartitionsValue = hcatalogValue["recoverPartitions"];
                                                if (recoverPartitionsValue != null && recoverPartitionsValue.Type != JTokenType.Null)
                                                {
                                                    bool recoverPartitionsInstance = ((bool)recoverPartitionsValue);
                                                    hcatalogInstance.RecoverPartitions = recoverPartitionsInstance;
                                                }
                                                
                                                JToken alterSchemaValue = hcatalogValue["alterSchema"];
                                                if (alterSchemaValue != null && alterSchemaValue.Type != JTokenType.Null)
                                                {
                                                    bool alterSchemaInstance = ((bool)alterSchemaValue);
                                                    hcatalogInstance.AlterSchema = alterSchemaInstance;
                                                }
                                            }
                                            
                                            JToken descriptionValue6 = propertiesValue["description"];
                                            if (descriptionValue6 != null && descriptionValue6.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance6 = ((string)descriptionValue6);
                                                hDInsightBYOCLinkedServiceInstance.Description = descriptionInstance6;
                                            }
                                            
                                            JToken provisioningStateValue6 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue6 != null && provisioningStateValue6.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance6 = ((string)provisioningStateValue6);
                                                hDInsightBYOCLinkedServiceInstance.ProvisioningState = provisioningStateInstance6;
                                            }
                                            
                                            JToken hubNameValue6 = propertiesValue["hubName"];
                                            if (hubNameValue6 != null && hubNameValue6.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance6 = ((string)hubNameValue6);
                                                hDInsightBYOCLinkedServiceInstance.HubName = hubNameInstance6;
                                            }
                                            
                                            JToken errorMessageValue6 = propertiesValue["errorMessage"];
                                            if (errorMessageValue6 != null && errorMessageValue6.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance6 = ((string)errorMessageValue6);
                                                hDInsightBYOCLinkedServiceInstance.ErrorMessage = errorMessageInstance6;
                                            }
                                            linkedServiceInstance.Properties = hDInsightBYOCLinkedServiceInstance;
                                        }
                                        if (typeName == "HDInsightOnDemandLinkedService")
                                        {
                                            HDInsightOnDemandLinkedService hDInsightOnDemandLinkedServiceInstance = new HDInsightOnDemandLinkedService();
                                            
                                            JToken versionValue = propertiesValue["version"];
                                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                                            {
                                                string versionInstance = ((string)versionValue);
                                                hDInsightOnDemandLinkedServiceInstance.Version = versionInstance;
                                            }
                                            
                                            JToken clusterTypeValue = propertiesValue["clusterType"];
                                            if (clusterTypeValue != null && clusterTypeValue.Type != JTokenType.Null)
                                            {
                                                string clusterTypeInstance = ((string)clusterTypeValue);
                                                hDInsightOnDemandLinkedServiceInstance.ClusterType = clusterTypeInstance;
                                            }
                                            
                                            JToken clusterSizeValue = propertiesValue["clusterSize"];
                                            if (clusterSizeValue != null && clusterSizeValue.Type != JTokenType.Null)
                                            {
                                                int clusterSizeInstance = ((int)clusterSizeValue);
                                                hDInsightOnDemandLinkedServiceInstance.ClusterSize = clusterSizeInstance;
                                            }
                                            
                                            JToken timeToLiveValue = propertiesValue["timeToLive"];
                                            if (timeToLiveValue != null && timeToLiveValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeToLiveInstance = TimeSpan.Parse(((string)timeToLiveValue), CultureInfo.InvariantCulture);
                                                hDInsightOnDemandLinkedServiceInstance.TimeToLive = timeToLiveInstance;
                                            }
                                            
                                            JToken linkedServiceNameValue4 = propertiesValue["linkedServiceName"];
                                            if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                                hDInsightOnDemandLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance4;
                                            }
                                            
                                            JToken hiveCustomLibrariesContainerValue = propertiesValue["hiveCustomLibrariesContainer"];
                                            if (hiveCustomLibrariesContainerValue != null && hiveCustomLibrariesContainerValue.Type != JTokenType.Null)
                                            {
                                                string hiveCustomLibrariesContainerInstance = ((string)hiveCustomLibrariesContainerValue);
                                                hDInsightOnDemandLinkedServiceInstance.HiveCustomLibrariesContainer = hiveCustomLibrariesContainerInstance;
                                            }
                                            
                                            JToken coreConfigurationSequenceElement = ((JToken)propertiesValue["coreConfiguration"]);
                                            if (coreConfigurationSequenceElement != null && coreConfigurationSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property2 in coreConfigurationSequenceElement)
                                                {
                                                    string coreConfigurationKey = ((string)property2.Name);
                                                    string coreConfigurationValue = ((string)property2.Value);
                                                    hDInsightOnDemandLinkedServiceInstance.CoreConfiguration.Add(coreConfigurationKey, coreConfigurationValue);
                                                }
                                            }
                                            
                                            JToken hBaseConfigurationSequenceElement = ((JToken)propertiesValue["hBaseConfiguration"]);
                                            if (hBaseConfigurationSequenceElement != null && hBaseConfigurationSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property3 in hBaseConfigurationSequenceElement)
                                                {
                                                    string hBaseConfigurationKey = ((string)property3.Name);
                                                    string hBaseConfigurationValue = ((string)property3.Value);
                                                    hDInsightOnDemandLinkedServiceInstance.HBaseConfiguration.Add(hBaseConfigurationKey, hBaseConfigurationValue);
                                                }
                                            }
                                            
                                            JToken hdfsConfigurationSequenceElement = ((JToken)propertiesValue["hdfsConfiguration"]);
                                            if (hdfsConfigurationSequenceElement != null && hdfsConfigurationSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property4 in hdfsConfigurationSequenceElement)
                                                {
                                                    string hdfsConfigurationKey = ((string)property4.Name);
                                                    string hdfsConfigurationValue = ((string)property4.Value);
                                                    hDInsightOnDemandLinkedServiceInstance.HdfsConfiguration.Add(hdfsConfigurationKey, hdfsConfigurationValue);
                                                }
                                            }
                                            
                                            JToken hiveConfigurationSequenceElement = ((JToken)propertiesValue["hiveConfiguration"]);
                                            if (hiveConfigurationSequenceElement != null && hiveConfigurationSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property5 in hiveConfigurationSequenceElement)
                                                {
                                                    string hiveConfigurationKey = ((string)property5.Name);
                                                    string hiveConfigurationValue = ((string)property5.Value);
                                                    hDInsightOnDemandLinkedServiceInstance.HiveConfiguration.Add(hiveConfigurationKey, hiveConfigurationValue);
                                                }
                                            }
                                            
                                            JToken mapReduceConfigurationSequenceElement = ((JToken)propertiesValue["mapReduceConfiguration"]);
                                            if (mapReduceConfigurationSequenceElement != null && mapReduceConfigurationSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property6 in mapReduceConfigurationSequenceElement)
                                                {
                                                    string mapReduceConfigurationKey = ((string)property6.Name);
                                                    string mapReduceConfigurationValue = ((string)property6.Value);
                                                    hDInsightOnDemandLinkedServiceInstance.MapReduceConfiguration.Add(mapReduceConfigurationKey, mapReduceConfigurationValue);
                                                }
                                            }
                                            
                                            JToken oozieConfigurationSequenceElement = ((JToken)propertiesValue["oozieConfiguration"]);
                                            if (oozieConfigurationSequenceElement != null && oozieConfigurationSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property7 in oozieConfigurationSequenceElement)
                                                {
                                                    string oozieConfigurationKey = ((string)property7.Name);
                                                    string oozieConfigurationValue = ((string)property7.Value);
                                                    hDInsightOnDemandLinkedServiceInstance.OozieConfiguration.Add(oozieConfigurationKey, oozieConfigurationValue);
                                                }
                                            }
                                            
                                            JToken stormConfigurationSequenceElement = ((JToken)propertiesValue["stormConfiguration"]);
                                            if (stormConfigurationSequenceElement != null && stormConfigurationSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property8 in stormConfigurationSequenceElement)
                                                {
                                                    string stormConfigurationKey = ((string)property8.Name);
                                                    string stormConfigurationValue = ((string)property8.Value);
                                                    hDInsightOnDemandLinkedServiceInstance.StormConfiguration.Add(stormConfigurationKey, stormConfigurationValue);
                                                }
                                            }
                                            
                                            JToken sparkConfigurationSequenceElement = ((JToken)propertiesValue["sparkConfiguration"]);
                                            if (sparkConfigurationSequenceElement != null && sparkConfigurationSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property9 in sparkConfigurationSequenceElement)
                                                {
                                                    string sparkConfigurationKey = ((string)property9.Name);
                                                    string sparkConfigurationValue = ((string)property9.Value);
                                                    hDInsightOnDemandLinkedServiceInstance.SparkConfiguration.Add(sparkConfigurationKey, sparkConfigurationValue);
                                                }
                                            }
                                            
                                            JToken yarnConfigurationSequenceElement = ((JToken)propertiesValue["yarnConfiguration"]);
                                            if (yarnConfigurationSequenceElement != null && yarnConfigurationSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property10 in yarnConfigurationSequenceElement)
                                                {
                                                    string yarnConfigurationKey = ((string)property10.Name);
                                                    string yarnConfigurationValue = ((string)property10.Value);
                                                    hDInsightOnDemandLinkedServiceInstance.YarnConfiguration.Add(yarnConfigurationKey, yarnConfigurationValue);
                                                }
                                            }
                                            
                                            JToken additionalLinkedServiceNamesArray = propertiesValue["additionalLinkedServiceNames"];
                                            if (additionalLinkedServiceNamesArray != null && additionalLinkedServiceNamesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken additionalLinkedServiceNamesValue in ((JArray)additionalLinkedServiceNamesArray))
                                                {
                                                    hDInsightOnDemandLinkedServiceInstance.AdditionalLinkedServiceNames.Add(((string)additionalLinkedServiceNamesValue));
                                                }
                                            }
                                            
                                            JToken hcatalogValue2 = propertiesValue["hcatalog"];
                                            if (hcatalogValue2 != null && hcatalogValue2.Type != JTokenType.Null)
                                            {
                                                HCatalogProperties hcatalogInstance2 = new HCatalogProperties();
                                                hDInsightOnDemandLinkedServiceInstance.Hcatalog = hcatalogInstance2;
                                                
                                                JToken linkedServiceNameValue5 = hcatalogValue2["linkedServiceName"];
                                                if (linkedServiceNameValue5 != null && linkedServiceNameValue5.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance5 = ((string)linkedServiceNameValue5);
                                                    hcatalogInstance2.LinkedServiceName = linkedServiceNameInstance5;
                                                }
                                                
                                                JToken recoverPartitionsValue2 = hcatalogValue2["recoverPartitions"];
                                                if (recoverPartitionsValue2 != null && recoverPartitionsValue2.Type != JTokenType.Null)
                                                {
                                                    bool recoverPartitionsInstance2 = ((bool)recoverPartitionsValue2);
                                                    hcatalogInstance2.RecoverPartitions = recoverPartitionsInstance2;
                                                }
                                                
                                                JToken alterSchemaValue2 = hcatalogValue2["alterSchema"];
                                                if (alterSchemaValue2 != null && alterSchemaValue2.Type != JTokenType.Null)
                                                {
                                                    bool alterSchemaInstance2 = ((bool)alterSchemaValue2);
                                                    hcatalogInstance2.AlterSchema = alterSchemaInstance2;
                                                }
                                            }
                                            
                                            JToken dataNodeSizeValue = propertiesValue["dataNodeSize"];
                                            if (dataNodeSizeValue != null && dataNodeSizeValue.Type != JTokenType.Null)
                                            {
                                                string dataNodeSizeInstance = ((string)dataNodeSizeValue);
                                                hDInsightOnDemandLinkedServiceInstance.DataNodeSize = dataNodeSizeInstance;
                                            }
                                            
                                            JToken headNodeSizeValue = propertiesValue["headNodeSize"];
                                            if (headNodeSizeValue != null && headNodeSizeValue.Type != JTokenType.Null)
                                            {
                                                string headNodeSizeInstance = ((string)headNodeSizeValue);
                                                hDInsightOnDemandLinkedServiceInstance.HeadNodeSize = headNodeSizeInstance;
                                            }
                                            
                                            JToken zookeeperNodeSizeValue = propertiesValue["zookeeperNodeSize"];
                                            if (zookeeperNodeSizeValue != null && zookeeperNodeSizeValue.Type != JTokenType.Null)
                                            {
                                                string zookeeperNodeSizeInstance = ((string)zookeeperNodeSizeValue);
                                                hDInsightOnDemandLinkedServiceInstance.ZookeeperNodeSize = zookeeperNodeSizeInstance;
                                            }
                                            
                                            JToken osTypeValue = propertiesValue["osType"];
                                            if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                            {
                                                string osTypeInstance = ((string)osTypeValue);
                                                hDInsightOnDemandLinkedServiceInstance.OSType = osTypeInstance;
                                            }
                                            
                                            JToken sshPasswordValue = propertiesValue["sshPassword"];
                                            if (sshPasswordValue != null && sshPasswordValue.Type != JTokenType.Null)
                                            {
                                                string sshPasswordInstance = ((string)sshPasswordValue);
                                                hDInsightOnDemandLinkedServiceInstance.SshPassword = sshPasswordInstance;
                                            }
                                            
                                            JToken sshPublicKeyValue = propertiesValue["sshPublicKey"];
                                            if (sshPublicKeyValue != null && sshPublicKeyValue.Type != JTokenType.Null)
                                            {
                                                string sshPublicKeyInstance = ((string)sshPublicKeyValue);
                                                hDInsightOnDemandLinkedServiceInstance.SshPublicKey = sshPublicKeyInstance;
                                            }
                                            
                                            JToken sshUserNameValue = propertiesValue["sshUserName"];
                                            if (sshUserNameValue != null && sshUserNameValue.Type != JTokenType.Null)
                                            {
                                                string sshUserNameInstance = ((string)sshUserNameValue);
                                                hDInsightOnDemandLinkedServiceInstance.SshUserName = sshUserNameInstance;
                                            }
                                            
                                            JToken descriptionValue7 = propertiesValue["description"];
                                            if (descriptionValue7 != null && descriptionValue7.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance7 = ((string)descriptionValue7);
                                                hDInsightOnDemandLinkedServiceInstance.Description = descriptionInstance7;
                                            }
                                            
                                            JToken provisioningStateValue7 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue7 != null && provisioningStateValue7.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance7 = ((string)provisioningStateValue7);
                                                hDInsightOnDemandLinkedServiceInstance.ProvisioningState = provisioningStateInstance7;
                                            }
                                            
                                            JToken hubNameValue7 = propertiesValue["hubName"];
                                            if (hubNameValue7 != null && hubNameValue7.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance7 = ((string)hubNameValue7);
                                                hDInsightOnDemandLinkedServiceInstance.HubName = hubNameInstance7;
                                            }
                                            
                                            JToken errorMessageValue7 = propertiesValue["errorMessage"];
                                            if (errorMessageValue7 != null && errorMessageValue7.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance7 = ((string)errorMessageValue7);
                                                hDInsightOnDemandLinkedServiceInstance.ErrorMessage = errorMessageInstance7;
                                            }
                                            linkedServiceInstance.Properties = hDInsightOnDemandLinkedServiceInstance;
                                        }
                                        if (typeName == "OnPremisesDb2LinkedService")
                                        {
                                            OnPremisesDb2LinkedService onPremisesDb2LinkedServiceInstance = new OnPremisesDb2LinkedService();
                                            
                                            JToken serverValue = propertiesValue["server"];
                                            if (serverValue != null && serverValue.Type != JTokenType.Null)
                                            {
                                                string serverInstance = ((string)serverValue);
                                                onPremisesDb2LinkedServiceInstance.Server = serverInstance;
                                            }
                                            
                                            JToken databaseValue = propertiesValue["database"];
                                            if (databaseValue != null && databaseValue.Type != JTokenType.Null)
                                            {
                                                string databaseInstance = ((string)databaseValue);
                                                onPremisesDb2LinkedServiceInstance.Database = databaseInstance;
                                            }
                                            
                                            JToken schemaValue = propertiesValue["schema"];
                                            if (schemaValue != null && schemaValue.Type != JTokenType.Null)
                                            {
                                                string schemaInstance = ((string)schemaValue);
                                                onPremisesDb2LinkedServiceInstance.Schema = schemaInstance;
                                            }
                                            
                                            JToken authenticationTypeValue = propertiesValue["authenticationType"];
                                            if (authenticationTypeValue != null && authenticationTypeValue.Type != JTokenType.Null)
                                            {
                                                string authenticationTypeInstance = ((string)authenticationTypeValue);
                                                onPremisesDb2LinkedServiceInstance.AuthenticationType = authenticationTypeInstance;
                                            }
                                            
                                            JToken usernameValue = propertiesValue["username"];
                                            if (usernameValue != null && usernameValue.Type != JTokenType.Null)
                                            {
                                                string usernameInstance = ((string)usernameValue);
                                                onPremisesDb2LinkedServiceInstance.Username = usernameInstance;
                                            }
                                            
                                            JToken passwordValue2 = propertiesValue["password"];
                                            if (passwordValue2 != null && passwordValue2.Type != JTokenType.Null)
                                            {
                                                string passwordInstance2 = ((string)passwordValue2);
                                                onPremisesDb2LinkedServiceInstance.Password = passwordInstance2;
                                            }
                                            
                                            JToken gatewayNameValue = propertiesValue["gatewayName"];
                                            if (gatewayNameValue != null && gatewayNameValue.Type != JTokenType.Null)
                                            {
                                                string gatewayNameInstance = ((string)gatewayNameValue);
                                                onPremisesDb2LinkedServiceInstance.GatewayName = gatewayNameInstance;
                                            }
                                            
                                            JToken encryptedCredentialValue = propertiesValue["encryptedCredential"];
                                            if (encryptedCredentialValue != null && encryptedCredentialValue.Type != JTokenType.Null)
                                            {
                                                string encryptedCredentialInstance = ((string)encryptedCredentialValue);
                                                onPremisesDb2LinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance;
                                            }
                                            
                                            JToken descriptionValue8 = propertiesValue["description"];
                                            if (descriptionValue8 != null && descriptionValue8.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance8 = ((string)descriptionValue8);
                                                onPremisesDb2LinkedServiceInstance.Description = descriptionInstance8;
                                            }
                                            
                                            JToken provisioningStateValue8 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue8 != null && provisioningStateValue8.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance8 = ((string)provisioningStateValue8);
                                                onPremisesDb2LinkedServiceInstance.ProvisioningState = provisioningStateInstance8;
                                            }
                                            
                                            JToken hubNameValue8 = propertiesValue["hubName"];
                                            if (hubNameValue8 != null && hubNameValue8.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance8 = ((string)hubNameValue8);
                                                onPremisesDb2LinkedServiceInstance.HubName = hubNameInstance8;
                                            }
                                            
                                            JToken errorMessageValue8 = propertiesValue["errorMessage"];
                                            if (errorMessageValue8 != null && errorMessageValue8.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance8 = ((string)errorMessageValue8);
                                                onPremisesDb2LinkedServiceInstance.ErrorMessage = errorMessageInstance8;
                                            }
                                            linkedServiceInstance.Properties = onPremisesDb2LinkedServiceInstance;
                                        }
                                        if (typeName == "OnPremisesFileSystemLinkedService")
                                        {
                                            OnPremisesFileSystemLinkedService onPremisesFileSystemLinkedServiceInstance = new OnPremisesFileSystemLinkedService();
                                            
                                            JToken hostValue = propertiesValue["host"];
                                            if (hostValue != null && hostValue.Type != JTokenType.Null)
                                            {
                                                string hostInstance = ((string)hostValue);
                                                onPremisesFileSystemLinkedServiceInstance.Host = hostInstance;
                                            }
                                            
                                            JToken gatewayNameValue2 = propertiesValue["gatewayName"];
                                            if (gatewayNameValue2 != null && gatewayNameValue2.Type != JTokenType.Null)
                                            {
                                                string gatewayNameInstance2 = ((string)gatewayNameValue2);
                                                onPremisesFileSystemLinkedServiceInstance.GatewayName = gatewayNameInstance2;
                                            }
                                            
                                            JToken userIdValue = propertiesValue["userId"];
                                            if (userIdValue != null && userIdValue.Type != JTokenType.Null)
                                            {
                                                string userIdInstance = ((string)userIdValue);
                                                onPremisesFileSystemLinkedServiceInstance.UserId = userIdInstance;
                                            }
                                            
                                            JToken passwordValue3 = propertiesValue["password"];
                                            if (passwordValue3 != null && passwordValue3.Type != JTokenType.Null)
                                            {
                                                string passwordInstance3 = ((string)passwordValue3);
                                                onPremisesFileSystemLinkedServiceInstance.Password = passwordInstance3;
                                            }
                                            
                                            JToken encryptedCredentialValue2 = propertiesValue["encryptedCredential"];
                                            if (encryptedCredentialValue2 != null && encryptedCredentialValue2.Type != JTokenType.Null)
                                            {
                                                string encryptedCredentialInstance2 = ((string)encryptedCredentialValue2);
                                                onPremisesFileSystemLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance2;
                                            }
                                            
                                            JToken descriptionValue9 = propertiesValue["description"];
                                            if (descriptionValue9 != null && descriptionValue9.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance9 = ((string)descriptionValue9);
                                                onPremisesFileSystemLinkedServiceInstance.Description = descriptionInstance9;
                                            }
                                            
                                            JToken provisioningStateValue9 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue9 != null && provisioningStateValue9.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance9 = ((string)provisioningStateValue9);
                                                onPremisesFileSystemLinkedServiceInstance.ProvisioningState = provisioningStateInstance9;
                                            }
                                            
                                            JToken hubNameValue9 = propertiesValue["hubName"];
                                            if (hubNameValue9 != null && hubNameValue9.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance9 = ((string)hubNameValue9);
                                                onPremisesFileSystemLinkedServiceInstance.HubName = hubNameInstance9;
                                            }
                                            
                                            JToken errorMessageValue9 = propertiesValue["errorMessage"];
                                            if (errorMessageValue9 != null && errorMessageValue9.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance9 = ((string)errorMessageValue9);
                                                onPremisesFileSystemLinkedServiceInstance.ErrorMessage = errorMessageInstance9;
                                            }
                                            linkedServiceInstance.Properties = onPremisesFileSystemLinkedServiceInstance;
                                        }
                                        if (typeName == "OnPremisesMySqlLinkedService")
                                        {
                                            OnPremisesMySqlLinkedService onPremisesMySqlLinkedServiceInstance = new OnPremisesMySqlLinkedService();
                                            
                                            JToken serverValue2 = propertiesValue["server"];
                                            if (serverValue2 != null && serverValue2.Type != JTokenType.Null)
                                            {
                                                string serverInstance2 = ((string)serverValue2);
                                                onPremisesMySqlLinkedServiceInstance.Server = serverInstance2;
                                            }
                                            
                                            JToken databaseValue2 = propertiesValue["database"];
                                            if (databaseValue2 != null && databaseValue2.Type != JTokenType.Null)
                                            {
                                                string databaseInstance2 = ((string)databaseValue2);
                                                onPremisesMySqlLinkedServiceInstance.Database = databaseInstance2;
                                            }
                                            
                                            JToken schemaValue2 = propertiesValue["schema"];
                                            if (schemaValue2 != null && schemaValue2.Type != JTokenType.Null)
                                            {
                                                string schemaInstance2 = ((string)schemaValue2);
                                                onPremisesMySqlLinkedServiceInstance.Schema = schemaInstance2;
                                            }
                                            
                                            JToken authenticationTypeValue2 = propertiesValue["authenticationType"];
                                            if (authenticationTypeValue2 != null && authenticationTypeValue2.Type != JTokenType.Null)
                                            {
                                                string authenticationTypeInstance2 = ((string)authenticationTypeValue2);
                                                onPremisesMySqlLinkedServiceInstance.AuthenticationType = authenticationTypeInstance2;
                                            }
                                            
                                            JToken usernameValue2 = propertiesValue["username"];
                                            if (usernameValue2 != null && usernameValue2.Type != JTokenType.Null)
                                            {
                                                string usernameInstance2 = ((string)usernameValue2);
                                                onPremisesMySqlLinkedServiceInstance.Username = usernameInstance2;
                                            }
                                            
                                            JToken passwordValue4 = propertiesValue["password"];
                                            if (passwordValue4 != null && passwordValue4.Type != JTokenType.Null)
                                            {
                                                string passwordInstance4 = ((string)passwordValue4);
                                                onPremisesMySqlLinkedServiceInstance.Password = passwordInstance4;
                                            }
                                            
                                            JToken gatewayNameValue3 = propertiesValue["gatewayName"];
                                            if (gatewayNameValue3 != null && gatewayNameValue3.Type != JTokenType.Null)
                                            {
                                                string gatewayNameInstance3 = ((string)gatewayNameValue3);
                                                onPremisesMySqlLinkedServiceInstance.GatewayName = gatewayNameInstance3;
                                            }
                                            
                                            JToken encryptedCredentialValue3 = propertiesValue["encryptedCredential"];
                                            if (encryptedCredentialValue3 != null && encryptedCredentialValue3.Type != JTokenType.Null)
                                            {
                                                string encryptedCredentialInstance3 = ((string)encryptedCredentialValue3);
                                                onPremisesMySqlLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance3;
                                            }
                                            
                                            JToken descriptionValue10 = propertiesValue["description"];
                                            if (descriptionValue10 != null && descriptionValue10.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance10 = ((string)descriptionValue10);
                                                onPremisesMySqlLinkedServiceInstance.Description = descriptionInstance10;
                                            }
                                            
                                            JToken provisioningStateValue10 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue10 != null && provisioningStateValue10.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance10 = ((string)provisioningStateValue10);
                                                onPremisesMySqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance10;
                                            }
                                            
                                            JToken hubNameValue10 = propertiesValue["hubName"];
                                            if (hubNameValue10 != null && hubNameValue10.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance10 = ((string)hubNameValue10);
                                                onPremisesMySqlLinkedServiceInstance.HubName = hubNameInstance10;
                                            }
                                            
                                            JToken errorMessageValue10 = propertiesValue["errorMessage"];
                                            if (errorMessageValue10 != null && errorMessageValue10.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance10 = ((string)errorMessageValue10);
                                                onPremisesMySqlLinkedServiceInstance.ErrorMessage = errorMessageInstance10;
                                            }
                                            linkedServiceInstance.Properties = onPremisesMySqlLinkedServiceInstance;
                                        }
                                        if (typeName == "OnPremisesOracleLinkedService")
                                        {
                                            OnPremisesOracleLinkedService onPremisesOracleLinkedServiceInstance = new OnPremisesOracleLinkedService();
                                            
                                            JToken connectionStringValue3 = propertiesValue["connectionString"];
                                            if (connectionStringValue3 != null && connectionStringValue3.Type != JTokenType.Null)
                                            {
                                                string connectionStringInstance3 = ((string)connectionStringValue3);
                                                onPremisesOracleLinkedServiceInstance.ConnectionString = connectionStringInstance3;
                                            }
                                            
                                            JToken gatewayNameValue4 = propertiesValue["gatewayName"];
                                            if (gatewayNameValue4 != null && gatewayNameValue4.Type != JTokenType.Null)
                                            {
                                                string gatewayNameInstance4 = ((string)gatewayNameValue4);
                                                onPremisesOracleLinkedServiceInstance.GatewayName = gatewayNameInstance4;
                                            }
                                            
                                            JToken userNameValue2 = propertiesValue["userName"];
                                            if (userNameValue2 != null && userNameValue2.Type != JTokenType.Null)
                                            {
                                                string userNameInstance2 = ((string)userNameValue2);
                                                onPremisesOracleLinkedServiceInstance.UserName = userNameInstance2;
                                            }
                                            
                                            JToken passwordValue5 = propertiesValue["password"];
                                            if (passwordValue5 != null && passwordValue5.Type != JTokenType.Null)
                                            {
                                                string passwordInstance5 = ((string)passwordValue5);
                                                onPremisesOracleLinkedServiceInstance.Password = passwordInstance5;
                                            }
                                            
                                            JToken descriptionValue11 = propertiesValue["description"];
                                            if (descriptionValue11 != null && descriptionValue11.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance11 = ((string)descriptionValue11);
                                                onPremisesOracleLinkedServiceInstance.Description = descriptionInstance11;
                                            }
                                            
                                            JToken provisioningStateValue11 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue11 != null && provisioningStateValue11.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance11 = ((string)provisioningStateValue11);
                                                onPremisesOracleLinkedServiceInstance.ProvisioningState = provisioningStateInstance11;
                                            }
                                            
                                            JToken hubNameValue11 = propertiesValue["hubName"];
                                            if (hubNameValue11 != null && hubNameValue11.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance11 = ((string)hubNameValue11);
                                                onPremisesOracleLinkedServiceInstance.HubName = hubNameInstance11;
                                            }
                                            
                                            JToken errorMessageValue11 = propertiesValue["errorMessage"];
                                            if (errorMessageValue11 != null && errorMessageValue11.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance11 = ((string)errorMessageValue11);
                                                onPremisesOracleLinkedServiceInstance.ErrorMessage = errorMessageInstance11;
                                            }
                                            linkedServiceInstance.Properties = onPremisesOracleLinkedServiceInstance;
                                        }
                                        if (typeName == "OnPremisesPostgreSqlLinkedService")
                                        {
                                            OnPremisesPostgreSqlLinkedService onPremisesPostgreSqlLinkedServiceInstance = new OnPremisesPostgreSqlLinkedService();
                                            
                                            JToken serverValue3 = propertiesValue["server"];
                                            if (serverValue3 != null && serverValue3.Type != JTokenType.Null)
                                            {
                                                string serverInstance3 = ((string)serverValue3);
                                                onPremisesPostgreSqlLinkedServiceInstance.Server = serverInstance3;
                                            }
                                            
                                            JToken databaseValue3 = propertiesValue["database"];
                                            if (databaseValue3 != null && databaseValue3.Type != JTokenType.Null)
                                            {
                                                string databaseInstance3 = ((string)databaseValue3);
                                                onPremisesPostgreSqlLinkedServiceInstance.Database = databaseInstance3;
                                            }
                                            
                                            JToken schemaValue3 = propertiesValue["schema"];
                                            if (schemaValue3 != null && schemaValue3.Type != JTokenType.Null)
                                            {
                                                string schemaInstance3 = ((string)schemaValue3);
                                                onPremisesPostgreSqlLinkedServiceInstance.Schema = schemaInstance3;
                                            }
                                            
                                            JToken authenticationTypeValue3 = propertiesValue["authenticationType"];
                                            if (authenticationTypeValue3 != null && authenticationTypeValue3.Type != JTokenType.Null)
                                            {
                                                string authenticationTypeInstance3 = ((string)authenticationTypeValue3);
                                                onPremisesPostgreSqlLinkedServiceInstance.AuthenticationType = authenticationTypeInstance3;
                                            }
                                            
                                            JToken usernameValue3 = propertiesValue["username"];
                                            if (usernameValue3 != null && usernameValue3.Type != JTokenType.Null)
                                            {
                                                string usernameInstance3 = ((string)usernameValue3);
                                                onPremisesPostgreSqlLinkedServiceInstance.Username = usernameInstance3;
                                            }
                                            
                                            JToken passwordValue6 = propertiesValue["password"];
                                            if (passwordValue6 != null && passwordValue6.Type != JTokenType.Null)
                                            {
                                                string passwordInstance6 = ((string)passwordValue6);
                                                onPremisesPostgreSqlLinkedServiceInstance.Password = passwordInstance6;
                                            }
                                            
                                            JToken gatewayNameValue5 = propertiesValue["gatewayName"];
                                            if (gatewayNameValue5 != null && gatewayNameValue5.Type != JTokenType.Null)
                                            {
                                                string gatewayNameInstance5 = ((string)gatewayNameValue5);
                                                onPremisesPostgreSqlLinkedServiceInstance.GatewayName = gatewayNameInstance5;
                                            }
                                            
                                            JToken encryptedCredentialValue4 = propertiesValue["encryptedCredential"];
                                            if (encryptedCredentialValue4 != null && encryptedCredentialValue4.Type != JTokenType.Null)
                                            {
                                                string encryptedCredentialInstance4 = ((string)encryptedCredentialValue4);
                                                onPremisesPostgreSqlLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance4;
                                            }
                                            
                                            JToken descriptionValue12 = propertiesValue["description"];
                                            if (descriptionValue12 != null && descriptionValue12.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance12 = ((string)descriptionValue12);
                                                onPremisesPostgreSqlLinkedServiceInstance.Description = descriptionInstance12;
                                            }
                                            
                                            JToken provisioningStateValue12 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue12 != null && provisioningStateValue12.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance12 = ((string)provisioningStateValue12);
                                                onPremisesPostgreSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance12;
                                            }
                                            
                                            JToken hubNameValue12 = propertiesValue["hubName"];
                                            if (hubNameValue12 != null && hubNameValue12.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance12 = ((string)hubNameValue12);
                                                onPremisesPostgreSqlLinkedServiceInstance.HubName = hubNameInstance12;
                                            }
                                            
                                            JToken errorMessageValue12 = propertiesValue["errorMessage"];
                                            if (errorMessageValue12 != null && errorMessageValue12.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance12 = ((string)errorMessageValue12);
                                                onPremisesPostgreSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance12;
                                            }
                                            linkedServiceInstance.Properties = onPremisesPostgreSqlLinkedServiceInstance;
                                        }
                                        if (typeName == "OnPremisesSqlLinkedService")
                                        {
                                            OnPremisesSqlLinkedService onPremisesSqlLinkedServiceInstance = new OnPremisesSqlLinkedService();
                                            
                                            JToken connectionStringValue4 = propertiesValue["connectionString"];
                                            if (connectionStringValue4 != null && connectionStringValue4.Type != JTokenType.Null)
                                            {
                                                string connectionStringInstance4 = ((string)connectionStringValue4);
                                                onPremisesSqlLinkedServiceInstance.ConnectionString = connectionStringInstance4;
                                            }
                                            
                                            JToken gatewayNameValue6 = propertiesValue["gatewayName"];
                                            if (gatewayNameValue6 != null && gatewayNameValue6.Type != JTokenType.Null)
                                            {
                                                string gatewayNameInstance6 = ((string)gatewayNameValue6);
                                                onPremisesSqlLinkedServiceInstance.GatewayName = gatewayNameInstance6;
                                            }
                                            
                                            JToken userNameValue3 = propertiesValue["userName"];
                                            if (userNameValue3 != null && userNameValue3.Type != JTokenType.Null)
                                            {
                                                string userNameInstance3 = ((string)userNameValue3);
                                                onPremisesSqlLinkedServiceInstance.UserName = userNameInstance3;
                                            }
                                            
                                            JToken passwordValue7 = propertiesValue["password"];
                                            if (passwordValue7 != null && passwordValue7.Type != JTokenType.Null)
                                            {
                                                string passwordInstance7 = ((string)passwordValue7);
                                                onPremisesSqlLinkedServiceInstance.Password = passwordInstance7;
                                            }
                                            
                                            JToken descriptionValue13 = propertiesValue["description"];
                                            if (descriptionValue13 != null && descriptionValue13.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance13 = ((string)descriptionValue13);
                                                onPremisesSqlLinkedServiceInstance.Description = descriptionInstance13;
                                            }
                                            
                                            JToken provisioningStateValue13 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue13 != null && provisioningStateValue13.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance13 = ((string)provisioningStateValue13);
                                                onPremisesSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance13;
                                            }
                                            
                                            JToken hubNameValue13 = propertiesValue["hubName"];
                                            if (hubNameValue13 != null && hubNameValue13.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance13 = ((string)hubNameValue13);
                                                onPremisesSqlLinkedServiceInstance.HubName = hubNameInstance13;
                                            }
                                            
                                            JToken errorMessageValue13 = propertiesValue["errorMessage"];
                                            if (errorMessageValue13 != null && errorMessageValue13.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance13 = ((string)errorMessageValue13);
                                                onPremisesSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance13;
                                            }
                                            linkedServiceInstance.Properties = onPremisesSqlLinkedServiceInstance;
                                        }
                                        if (typeName == "OnPremisesSybaseLinkedService")
                                        {
                                            OnPremisesSybaseLinkedService onPremisesSybaseLinkedServiceInstance = new OnPremisesSybaseLinkedService();
                                            
                                            JToken serverValue4 = propertiesValue["server"];
                                            if (serverValue4 != null && serverValue4.Type != JTokenType.Null)
                                            {
                                                string serverInstance4 = ((string)serverValue4);
                                                onPremisesSybaseLinkedServiceInstance.Server = serverInstance4;
                                            }
                                            
                                            JToken databaseValue4 = propertiesValue["database"];
                                            if (databaseValue4 != null && databaseValue4.Type != JTokenType.Null)
                                            {
                                                string databaseInstance4 = ((string)databaseValue4);
                                                onPremisesSybaseLinkedServiceInstance.Database = databaseInstance4;
                                            }
                                            
                                            JToken schemaValue4 = propertiesValue["schema"];
                                            if (schemaValue4 != null && schemaValue4.Type != JTokenType.Null)
                                            {
                                                string schemaInstance4 = ((string)schemaValue4);
                                                onPremisesSybaseLinkedServiceInstance.Schema = schemaInstance4;
                                            }
                                            
                                            JToken authenticationTypeValue4 = propertiesValue["authenticationType"];
                                            if (authenticationTypeValue4 != null && authenticationTypeValue4.Type != JTokenType.Null)
                                            {
                                                string authenticationTypeInstance4 = ((string)authenticationTypeValue4);
                                                onPremisesSybaseLinkedServiceInstance.AuthenticationType = authenticationTypeInstance4;
                                            }
                                            
                                            JToken usernameValue4 = propertiesValue["username"];
                                            if (usernameValue4 != null && usernameValue4.Type != JTokenType.Null)
                                            {
                                                string usernameInstance4 = ((string)usernameValue4);
                                                onPremisesSybaseLinkedServiceInstance.Username = usernameInstance4;
                                            }
                                            
                                            JToken passwordValue8 = propertiesValue["password"];
                                            if (passwordValue8 != null && passwordValue8.Type != JTokenType.Null)
                                            {
                                                string passwordInstance8 = ((string)passwordValue8);
                                                onPremisesSybaseLinkedServiceInstance.Password = passwordInstance8;
                                            }
                                            
                                            JToken gatewayNameValue7 = propertiesValue["gatewayName"];
                                            if (gatewayNameValue7 != null && gatewayNameValue7.Type != JTokenType.Null)
                                            {
                                                string gatewayNameInstance7 = ((string)gatewayNameValue7);
                                                onPremisesSybaseLinkedServiceInstance.GatewayName = gatewayNameInstance7;
                                            }
                                            
                                            JToken encryptedCredentialValue5 = propertiesValue["encryptedCredential"];
                                            if (encryptedCredentialValue5 != null && encryptedCredentialValue5.Type != JTokenType.Null)
                                            {
                                                string encryptedCredentialInstance5 = ((string)encryptedCredentialValue5);
                                                onPremisesSybaseLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance5;
                                            }
                                            
                                            JToken descriptionValue14 = propertiesValue["description"];
                                            if (descriptionValue14 != null && descriptionValue14.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance14 = ((string)descriptionValue14);
                                                onPremisesSybaseLinkedServiceInstance.Description = descriptionInstance14;
                                            }
                                            
                                            JToken provisioningStateValue14 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue14 != null && provisioningStateValue14.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance14 = ((string)provisioningStateValue14);
                                                onPremisesSybaseLinkedServiceInstance.ProvisioningState = provisioningStateInstance14;
                                            }
                                            
                                            JToken hubNameValue14 = propertiesValue["hubName"];
                                            if (hubNameValue14 != null && hubNameValue14.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance14 = ((string)hubNameValue14);
                                                onPremisesSybaseLinkedServiceInstance.HubName = hubNameInstance14;
                                            }
                                            
                                            JToken errorMessageValue14 = propertiesValue["errorMessage"];
                                            if (errorMessageValue14 != null && errorMessageValue14.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance14 = ((string)errorMessageValue14);
                                                onPremisesSybaseLinkedServiceInstance.ErrorMessage = errorMessageInstance14;
                                            }
                                            linkedServiceInstance.Properties = onPremisesSybaseLinkedServiceInstance;
                                        }
                                        if (typeName == "OnPremisesTeradataLinkedService")
                                        {
                                            OnPremisesTeradataLinkedService onPremisesTeradataLinkedServiceInstance = new OnPremisesTeradataLinkedService();
                                            
                                            JToken serverValue5 = propertiesValue["server"];
                                            if (serverValue5 != null && serverValue5.Type != JTokenType.Null)
                                            {
                                                string serverInstance5 = ((string)serverValue5);
                                                onPremisesTeradataLinkedServiceInstance.Server = serverInstance5;
                                            }
                                            
                                            JToken databaseValue5 = propertiesValue["database"];
                                            if (databaseValue5 != null && databaseValue5.Type != JTokenType.Null)
                                            {
                                                string databaseInstance5 = ((string)databaseValue5);
                                                onPremisesTeradataLinkedServiceInstance.Database = databaseInstance5;
                                            }
                                            
                                            JToken schemaValue5 = propertiesValue["schema"];
                                            if (schemaValue5 != null && schemaValue5.Type != JTokenType.Null)
                                            {
                                                string schemaInstance5 = ((string)schemaValue5);
                                                onPremisesTeradataLinkedServiceInstance.Schema = schemaInstance5;
                                            }
                                            
                                            JToken authenticationTypeValue5 = propertiesValue["authenticationType"];
                                            if (authenticationTypeValue5 != null && authenticationTypeValue5.Type != JTokenType.Null)
                                            {
                                                string authenticationTypeInstance5 = ((string)authenticationTypeValue5);
                                                onPremisesTeradataLinkedServiceInstance.AuthenticationType = authenticationTypeInstance5;
                                            }
                                            
                                            JToken usernameValue5 = propertiesValue["username"];
                                            if (usernameValue5 != null && usernameValue5.Type != JTokenType.Null)
                                            {
                                                string usernameInstance5 = ((string)usernameValue5);
                                                onPremisesTeradataLinkedServiceInstance.Username = usernameInstance5;
                                            }
                                            
                                            JToken passwordValue9 = propertiesValue["password"];
                                            if (passwordValue9 != null && passwordValue9.Type != JTokenType.Null)
                                            {
                                                string passwordInstance9 = ((string)passwordValue9);
                                                onPremisesTeradataLinkedServiceInstance.Password = passwordInstance9;
                                            }
                                            
                                            JToken gatewayNameValue8 = propertiesValue["gatewayName"];
                                            if (gatewayNameValue8 != null && gatewayNameValue8.Type != JTokenType.Null)
                                            {
                                                string gatewayNameInstance8 = ((string)gatewayNameValue8);
                                                onPremisesTeradataLinkedServiceInstance.GatewayName = gatewayNameInstance8;
                                            }
                                            
                                            JToken encryptedCredentialValue6 = propertiesValue["encryptedCredential"];
                                            if (encryptedCredentialValue6 != null && encryptedCredentialValue6.Type != JTokenType.Null)
                                            {
                                                string encryptedCredentialInstance6 = ((string)encryptedCredentialValue6);
                                                onPremisesTeradataLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance6;
                                            }
                                            
                                            JToken descriptionValue15 = propertiesValue["description"];
                                            if (descriptionValue15 != null && descriptionValue15.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance15 = ((string)descriptionValue15);
                                                onPremisesTeradataLinkedServiceInstance.Description = descriptionInstance15;
                                            }
                                            
                                            JToken provisioningStateValue15 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue15 != null && provisioningStateValue15.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance15 = ((string)provisioningStateValue15);
                                                onPremisesTeradataLinkedServiceInstance.ProvisioningState = provisioningStateInstance15;
                                            }
                                            
                                            JToken hubNameValue15 = propertiesValue["hubName"];
                                            if (hubNameValue15 != null && hubNameValue15.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance15 = ((string)hubNameValue15);
                                                onPremisesTeradataLinkedServiceInstance.HubName = hubNameInstance15;
                                            }
                                            
                                            JToken errorMessageValue15 = propertiesValue["errorMessage"];
                                            if (errorMessageValue15 != null && errorMessageValue15.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance15 = ((string)errorMessageValue15);
                                                onPremisesTeradataLinkedServiceInstance.ErrorMessage = errorMessageInstance15;
                                            }
                                            linkedServiceInstance.Properties = onPremisesTeradataLinkedServiceInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["@odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = ((string)odatanextLinkValue);
                                result.NextLink = odatanextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the next page of linked service instances with the link to the
        /// next page.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The url to the next linked services page.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List data factory linkedServices operation response.
        /// </returns>
        public async Task<LinkedServiceListResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LinkedServiceListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new LinkedServiceListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    LinkedService linkedServiceInstance = new LinkedService();
                                    result.LinkedServices.Add(linkedServiceInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        linkedServiceInstance.Name = nameInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        string typeName = ((string)propertiesValue["type"]);
                                        if (typeName == "AzureBatchLinkedService")
                                        {
                                            AzureBatchLinkedService azureBatchLinkedServiceInstance = new AzureBatchLinkedService();
                                            
                                            JToken accountNameValue = propertiesValue["accountName"];
                                            if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                            {
                                                string accountNameInstance = ((string)accountNameValue);
                                                azureBatchLinkedServiceInstance.AccountName = accountNameInstance;
                                            }
                                            
                                            JToken accessKeyValue = propertiesValue["accessKey"];
                                            if (accessKeyValue != null && accessKeyValue.Type != JTokenType.Null)
                                            {
                                                string accessKeyInstance = ((string)accessKeyValue);
                                                azureBatchLinkedServiceInstance.AccessKey = accessKeyInstance;
                                            }
                                            
                                            JToken poolNameValue = propertiesValue["poolName"];
                                            if (poolNameValue != null && poolNameValue.Type != JTokenType.Null)
                                            {
                                                string poolNameInstance = ((string)poolNameValue);
                                                azureBatchLinkedServiceInstance.PoolName = poolNameInstance;
                                            }
                                            
                                            JToken linkedServiceNameValue = propertiesValue["linkedServiceName"];
                                            if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                                azureBatchLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance;
                                            }
                                            
                                            JToken descriptionValue = propertiesValue["description"];
                                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance = ((string)descriptionValue);
                                                azureBatchLinkedServiceInstance.Description = descriptionInstance;
                                            }
                                            
                                            JToken provisioningStateValue = propertiesValue["provisioningState"];
                                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance = ((string)provisioningStateValue);
                                                azureBatchLinkedServiceInstance.ProvisioningState = provisioningStateInstance;
                                            }
                                            
                                            JToken hubNameValue = propertiesValue["hubName"];
                                            if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance = ((string)hubNameValue);
                                                azureBatchLinkedServiceInstance.HubName = hubNameInstance;
                                            }
                                            
                                            JToken errorMessageValue = propertiesValue["errorMessage"];
                                            if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance = ((string)errorMessageValue);
                                                azureBatchLinkedServiceInstance.ErrorMessage = errorMessageInstance;
                                            }
                                            linkedServiceInstance.Properties = azureBatchLinkedServiceInstance;
                                        }
                                        if (typeName == "AzureMLLinkedService")
                                        {
                                            AzureMLLinkedService azureMLLinkedServiceInstance = new AzureMLLinkedService();
                                            
                                            JToken mlEndpointValue = propertiesValue["mlEndpoint"];
                                            if (mlEndpointValue != null && mlEndpointValue.Type != JTokenType.Null)
                                            {
                                                string mlEndpointInstance = ((string)mlEndpointValue);
                                                azureMLLinkedServiceInstance.MlEndpoint = mlEndpointInstance;
                                            }
                                            
                                            JToken apiKeyValue = propertiesValue["apiKey"];
                                            if (apiKeyValue != null && apiKeyValue.Type != JTokenType.Null)
                                            {
                                                string apiKeyInstance = ((string)apiKeyValue);
                                                azureMLLinkedServiceInstance.ApiKey = apiKeyInstance;
                                            }
                                            
                                            JToken descriptionValue2 = propertiesValue["description"];
                                            if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance2 = ((string)descriptionValue2);
                                                azureMLLinkedServiceInstance.Description = descriptionInstance2;
                                            }
                                            
                                            JToken provisioningStateValue2 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                                azureMLLinkedServiceInstance.ProvisioningState = provisioningStateInstance2;
                                            }
                                            
                                            JToken hubNameValue2 = propertiesValue["hubName"];
                                            if (hubNameValue2 != null && hubNameValue2.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance2 = ((string)hubNameValue2);
                                                azureMLLinkedServiceInstance.HubName = hubNameInstance2;
                                            }
                                            
                                            JToken errorMessageValue2 = propertiesValue["errorMessage"];
                                            if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance2 = ((string)errorMessageValue2);
                                                azureMLLinkedServiceInstance.ErrorMessage = errorMessageInstance2;
                                            }
                                            linkedServiceInstance.Properties = azureMLLinkedServiceInstance;
                                        }
                                        if (typeName == "AzureSqlLinkedService")
                                        {
                                            AzureSqlLinkedService azureSqlLinkedServiceInstance = new AzureSqlLinkedService();
                                            
                                            JToken connectionStringValue = propertiesValue["connectionString"];
                                            if (connectionStringValue != null && connectionStringValue.Type != JTokenType.Null)
                                            {
                                                string connectionStringInstance = ((string)connectionStringValue);
                                                azureSqlLinkedServiceInstance.ConnectionString = connectionStringInstance;
                                            }
                                            
                                            JToken descriptionValue3 = propertiesValue["description"];
                                            if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance3 = ((string)descriptionValue3);
                                                azureSqlLinkedServiceInstance.Description = descriptionInstance3;
                                            }
                                            
                                            JToken provisioningStateValue3 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue3 != null && provisioningStateValue3.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance3 = ((string)provisioningStateValue3);
                                                azureSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance3;
                                            }
                                            
                                            JToken hubNameValue3 = propertiesValue["hubName"];
                                            if (hubNameValue3 != null && hubNameValue3.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance3 = ((string)hubNameValue3);
                                                azureSqlLinkedServiceInstance.HubName = hubNameInstance3;
                                            }
                                            
                                            JToken errorMessageValue3 = propertiesValue["errorMessage"];
                                            if (errorMessageValue3 != null && errorMessageValue3.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance3 = ((string)errorMessageValue3);
                                                azureSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance3;
                                            }
                                            linkedServiceInstance.Properties = azureSqlLinkedServiceInstance;
                                        }
                                        if (typeName == "AzureStorageLinkedService")
                                        {
                                            AzureStorageLinkedService azureStorageLinkedServiceInstance = new AzureStorageLinkedService();
                                            
                                            JToken connectionStringValue2 = propertiesValue["connectionString"];
                                            if (connectionStringValue2 != null && connectionStringValue2.Type != JTokenType.Null)
                                            {
                                                string connectionStringInstance2 = ((string)connectionStringValue2);
                                                azureStorageLinkedServiceInstance.ConnectionString = connectionStringInstance2;
                                            }
                                            
                                            JToken descriptionValue4 = propertiesValue["description"];
                                            if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance4 = ((string)descriptionValue4);
                                                azureStorageLinkedServiceInstance.Description = descriptionInstance4;
                                            }
                                            
                                            JToken provisioningStateValue4 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue4 != null && provisioningStateValue4.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance4 = ((string)provisioningStateValue4);
                                                azureStorageLinkedServiceInstance.ProvisioningState = provisioningStateInstance4;
                                            }
                                            
                                            JToken hubNameValue4 = propertiesValue["hubName"];
                                            if (hubNameValue4 != null && hubNameValue4.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance4 = ((string)hubNameValue4);
                                                azureStorageLinkedServiceInstance.HubName = hubNameInstance4;
                                            }
                                            
                                            JToken errorMessageValue4 = propertiesValue["errorMessage"];
                                            if (errorMessageValue4 != null && errorMessageValue4.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance4 = ((string)errorMessageValue4);
                                                azureStorageLinkedServiceInstance.ErrorMessage = errorMessageInstance4;
                                            }
                                            linkedServiceInstance.Properties = azureStorageLinkedServiceInstance;
                                        }
                                        if (typeName == "CustomLinkedService")
                                        {
                                            CustomLinkedService customLinkedServiceInstance = new CustomLinkedService();
                                            
                                            JToken extendedPropertiesSequenceElement = ((JToken)propertiesValue["extendedProperties"]);
                                            if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property in extendedPropertiesSequenceElement)
                                                {
                                                    string extendedPropertiesKey = ((string)property.Name);
                                                    string extendedPropertiesValue = ((string)property.Value);
                                                    customLinkedServiceInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                                }
                                            }
                                            
                                            JToken descriptionValue5 = propertiesValue["description"];
                                            if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance5 = ((string)descriptionValue5);
                                                customLinkedServiceInstance.Description = descriptionInstance5;
                                            }
                                            
                                            JToken provisioningStateValue5 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue5 != null && provisioningStateValue5.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance5 = ((string)provisioningStateValue5);
                                                customLinkedServiceInstance.ProvisioningState = provisioningStateInstance5;
                                            }
                                            
                                            JToken hubNameValue5 = propertiesValue["hubName"];
                                            if (hubNameValue5 != null && hubNameValue5.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance5 = ((string)hubNameValue5);
                                                customLinkedServiceInstance.HubName = hubNameInstance5;
                                            }
                                            
                                            JToken errorMessageValue5 = propertiesValue["errorMessage"];
                                            if (errorMessageValue5 != null && errorMessageValue5.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance5 = ((string)errorMessageValue5);
                                                customLinkedServiceInstance.ErrorMessage = errorMessageInstance5;
                                            }
                                            linkedServiceInstance.Properties = customLinkedServiceInstance;
                                        }
                                        if (typeName == "HDInsightBYOCLinkedService")
                                        {
                                            HDInsightBYOCLinkedService hDInsightBYOCLinkedServiceInstance = new HDInsightBYOCLinkedService();
                                            
                                            JToken clusterUriValue = propertiesValue["clusterUri"];
                                            if (clusterUriValue != null && clusterUriValue.Type != JTokenType.Null)
                                            {
                                                string clusterUriInstance = ((string)clusterUriValue);
                                                hDInsightBYOCLinkedServiceInstance.ClusterUri = clusterUriInstance;
                                            }
                                            
                                            JToken userNameValue = propertiesValue["userName"];
                                            if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                            {
                                                string userNameInstance = ((string)userNameValue);
                                                hDInsightBYOCLinkedServiceInstance.UserName = userNameInstance;
                                            }
                                            
                                            JToken passwordValue = propertiesValue["password"];
                                            if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                            {
                                                string passwordInstance = ((string)passwordValue);
                                                hDInsightBYOCLinkedServiceInstance.Password = passwordInstance;
                                            }
                                            
                                            JToken linkedServiceNameValue2 = propertiesValue["linkedServiceName"];
                                            if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                                hDInsightBYOCLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance2;
                                            }
                                            
                                            JToken hcatalogValue = propertiesValue["hcatalog"];
                                            if (hcatalogValue != null && hcatalogValue.Type != JTokenType.Null)
                                            {
                                                HCatalogProperties hcatalogInstance = new HCatalogProperties();
                                                hDInsightBYOCLinkedServiceInstance.Hcatalog = hcatalogInstance;
                                                
                                                JToken linkedServiceNameValue3 = hcatalogValue["linkedServiceName"];
                                                if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                                    hcatalogInstance.LinkedServiceName = linkedServiceNameInstance3;
                                                }
                                                
                                                JToken recoverPartitionsValue = hcatalogValue["recoverPartitions"];
                                                if (recoverPartitionsValue != null && recoverPartitionsValue.Type != JTokenType.Null)
                                                {
                                                    bool recoverPartitionsInstance = ((bool)recoverPartitionsValue);
                                                    hcatalogInstance.RecoverPartitions = recoverPartitionsInstance;
                                                }
                                                
                                                JToken alterSchemaValue = hcatalogValue["alterSchema"];
                                                if (alterSchemaValue != null && alterSchemaValue.Type != JTokenType.Null)
                                                {
                                                    bool alterSchemaInstance = ((bool)alterSchemaValue);
                                                    hcatalogInstance.AlterSchema = alterSchemaInstance;
                                                }
                                            }
                                            
                                            JToken descriptionValue6 = propertiesValue["description"];
                                            if (descriptionValue6 != null && descriptionValue6.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance6 = ((string)descriptionValue6);
                                                hDInsightBYOCLinkedServiceInstance.Description = descriptionInstance6;
                                            }
                                            
                                            JToken provisioningStateValue6 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue6 != null && provisioningStateValue6.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance6 = ((string)provisioningStateValue6);
                                                hDInsightBYOCLinkedServiceInstance.ProvisioningState = provisioningStateInstance6;
                                            }
                                            
                                            JToken hubNameValue6 = propertiesValue["hubName"];
                                            if (hubNameValue6 != null && hubNameValue6.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance6 = ((string)hubNameValue6);
                                                hDInsightBYOCLinkedServiceInstance.HubName = hubNameInstance6;
                                            }
                                            
                                            JToken errorMessageValue6 = propertiesValue["errorMessage"];
                                            if (errorMessageValue6 != null && errorMessageValue6.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance6 = ((string)errorMessageValue6);
                                                hDInsightBYOCLinkedServiceInstance.ErrorMessage = errorMessageInstance6;
                                            }
                                            linkedServiceInstance.Properties = hDInsightBYOCLinkedServiceInstance;
                                        }
                                        if (typeName == "HDInsightOnDemandLinkedService")
                                        {
                                            HDInsightOnDemandLinkedService hDInsightOnDemandLinkedServiceInstance = new HDInsightOnDemandLinkedService();
                                            
                                            JToken versionValue = propertiesValue["version"];
                                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                                            {
                                                string versionInstance = ((string)versionValue);
                                                hDInsightOnDemandLinkedServiceInstance.Version = versionInstance;
                                            }
                                            
                                            JToken clusterTypeValue = propertiesValue["clusterType"];
                                            if (clusterTypeValue != null && clusterTypeValue.Type != JTokenType.Null)
                                            {
                                                string clusterTypeInstance = ((string)clusterTypeValue);
                                                hDInsightOnDemandLinkedServiceInstance.ClusterType = clusterTypeInstance;
                                            }
                                            
                                            JToken clusterSizeValue = propertiesValue["clusterSize"];
                                            if (clusterSizeValue != null && clusterSizeValue.Type != JTokenType.Null)
                                            {
                                                int clusterSizeInstance = ((int)clusterSizeValue);
                                                hDInsightOnDemandLinkedServiceInstance.ClusterSize = clusterSizeInstance;
                                            }
                                            
                                            JToken timeToLiveValue = propertiesValue["timeToLive"];
                                            if (timeToLiveValue != null && timeToLiveValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeToLiveInstance = TimeSpan.Parse(((string)timeToLiveValue), CultureInfo.InvariantCulture);
                                                hDInsightOnDemandLinkedServiceInstance.TimeToLive = timeToLiveInstance;
                                            }
                                            
                                            JToken linkedServiceNameValue4 = propertiesValue["linkedServiceName"];
                                            if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                                hDInsightOnDemandLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance4;
                                            }
                                            
                                            JToken hiveCustomLibrariesContainerValue = propertiesValue["hiveCustomLibrariesContainer"];
                                            if (hiveCustomLibrariesContainerValue != null && hiveCustomLibrariesContainerValue.Type != JTokenType.Null)
                                            {
                                                string hiveCustomLibrariesContainerInstance = ((string)hiveCustomLibrariesContainerValue);
                                                hDInsightOnDemandLinkedServiceInstance.HiveCustomLibrariesContainer = hiveCustomLibrariesContainerInstance;
                                            }
                                            
                                            JToken coreConfigurationSequenceElement = ((JToken)propertiesValue["coreConfiguration"]);
                                            if (coreConfigurationSequenceElement != null && coreConfigurationSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property2 in coreConfigurationSequenceElement)
                                                {
                                                    string coreConfigurationKey = ((string)property2.Name);
                                                    string coreConfigurationValue = ((string)property2.Value);
                                                    hDInsightOnDemandLinkedServiceInstance.CoreConfiguration.Add(coreConfigurationKey, coreConfigurationValue);
                                                }
                                            }
                                            
                                            JToken hBaseConfigurationSequenceElement = ((JToken)propertiesValue["hBaseConfiguration"]);
                                            if (hBaseConfigurationSequenceElement != null && hBaseConfigurationSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property3 in hBaseConfigurationSequenceElement)
                                                {
                                                    string hBaseConfigurationKey = ((string)property3.Name);
                                                    string hBaseConfigurationValue = ((string)property3.Value);
                                                    hDInsightOnDemandLinkedServiceInstance.HBaseConfiguration.Add(hBaseConfigurationKey, hBaseConfigurationValue);
                                                }
                                            }
                                            
                                            JToken hdfsConfigurationSequenceElement = ((JToken)propertiesValue["hdfsConfiguration"]);
                                            if (hdfsConfigurationSequenceElement != null && hdfsConfigurationSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property4 in hdfsConfigurationSequenceElement)
                                                {
                                                    string hdfsConfigurationKey = ((string)property4.Name);
                                                    string hdfsConfigurationValue = ((string)property4.Value);
                                                    hDInsightOnDemandLinkedServiceInstance.HdfsConfiguration.Add(hdfsConfigurationKey, hdfsConfigurationValue);
                                                }
                                            }
                                            
                                            JToken hiveConfigurationSequenceElement = ((JToken)propertiesValue["hiveConfiguration"]);
                                            if (hiveConfigurationSequenceElement != null && hiveConfigurationSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property5 in hiveConfigurationSequenceElement)
                                                {
                                                    string hiveConfigurationKey = ((string)property5.Name);
                                                    string hiveConfigurationValue = ((string)property5.Value);
                                                    hDInsightOnDemandLinkedServiceInstance.HiveConfiguration.Add(hiveConfigurationKey, hiveConfigurationValue);
                                                }
                                            }
                                            
                                            JToken mapReduceConfigurationSequenceElement = ((JToken)propertiesValue["mapReduceConfiguration"]);
                                            if (mapReduceConfigurationSequenceElement != null && mapReduceConfigurationSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property6 in mapReduceConfigurationSequenceElement)
                                                {
                                                    string mapReduceConfigurationKey = ((string)property6.Name);
                                                    string mapReduceConfigurationValue = ((string)property6.Value);
                                                    hDInsightOnDemandLinkedServiceInstance.MapReduceConfiguration.Add(mapReduceConfigurationKey, mapReduceConfigurationValue);
                                                }
                                            }
                                            
                                            JToken oozieConfigurationSequenceElement = ((JToken)propertiesValue["oozieConfiguration"]);
                                            if (oozieConfigurationSequenceElement != null && oozieConfigurationSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property7 in oozieConfigurationSequenceElement)
                                                {
                                                    string oozieConfigurationKey = ((string)property7.Name);
                                                    string oozieConfigurationValue = ((string)property7.Value);
                                                    hDInsightOnDemandLinkedServiceInstance.OozieConfiguration.Add(oozieConfigurationKey, oozieConfigurationValue);
                                                }
                                            }
                                            
                                            JToken stormConfigurationSequenceElement = ((JToken)propertiesValue["stormConfiguration"]);
                                            if (stormConfigurationSequenceElement != null && stormConfigurationSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property8 in stormConfigurationSequenceElement)
                                                {
                                                    string stormConfigurationKey = ((string)property8.Name);
                                                    string stormConfigurationValue = ((string)property8.Value);
                                                    hDInsightOnDemandLinkedServiceInstance.StormConfiguration.Add(stormConfigurationKey, stormConfigurationValue);
                                                }
                                            }
                                            
                                            JToken sparkConfigurationSequenceElement = ((JToken)propertiesValue["sparkConfiguration"]);
                                            if (sparkConfigurationSequenceElement != null && sparkConfigurationSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property9 in sparkConfigurationSequenceElement)
                                                {
                                                    string sparkConfigurationKey = ((string)property9.Name);
                                                    string sparkConfigurationValue = ((string)property9.Value);
                                                    hDInsightOnDemandLinkedServiceInstance.SparkConfiguration.Add(sparkConfigurationKey, sparkConfigurationValue);
                                                }
                                            }
                                            
                                            JToken yarnConfigurationSequenceElement = ((JToken)propertiesValue["yarnConfiguration"]);
                                            if (yarnConfigurationSequenceElement != null && yarnConfigurationSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property10 in yarnConfigurationSequenceElement)
                                                {
                                                    string yarnConfigurationKey = ((string)property10.Name);
                                                    string yarnConfigurationValue = ((string)property10.Value);
                                                    hDInsightOnDemandLinkedServiceInstance.YarnConfiguration.Add(yarnConfigurationKey, yarnConfigurationValue);
                                                }
                                            }
                                            
                                            JToken additionalLinkedServiceNamesArray = propertiesValue["additionalLinkedServiceNames"];
                                            if (additionalLinkedServiceNamesArray != null && additionalLinkedServiceNamesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken additionalLinkedServiceNamesValue in ((JArray)additionalLinkedServiceNamesArray))
                                                {
                                                    hDInsightOnDemandLinkedServiceInstance.AdditionalLinkedServiceNames.Add(((string)additionalLinkedServiceNamesValue));
                                                }
                                            }
                                            
                                            JToken hcatalogValue2 = propertiesValue["hcatalog"];
                                            if (hcatalogValue2 != null && hcatalogValue2.Type != JTokenType.Null)
                                            {
                                                HCatalogProperties hcatalogInstance2 = new HCatalogProperties();
                                                hDInsightOnDemandLinkedServiceInstance.Hcatalog = hcatalogInstance2;
                                                
                                                JToken linkedServiceNameValue5 = hcatalogValue2["linkedServiceName"];
                                                if (linkedServiceNameValue5 != null && linkedServiceNameValue5.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance5 = ((string)linkedServiceNameValue5);
                                                    hcatalogInstance2.LinkedServiceName = linkedServiceNameInstance5;
                                                }
                                                
                                                JToken recoverPartitionsValue2 = hcatalogValue2["recoverPartitions"];
                                                if (recoverPartitionsValue2 != null && recoverPartitionsValue2.Type != JTokenType.Null)
                                                {
                                                    bool recoverPartitionsInstance2 = ((bool)recoverPartitionsValue2);
                                                    hcatalogInstance2.RecoverPartitions = recoverPartitionsInstance2;
                                                }
                                                
                                                JToken alterSchemaValue2 = hcatalogValue2["alterSchema"];
                                                if (alterSchemaValue2 != null && alterSchemaValue2.Type != JTokenType.Null)
                                                {
                                                    bool alterSchemaInstance2 = ((bool)alterSchemaValue2);
                                                    hcatalogInstance2.AlterSchema = alterSchemaInstance2;
                                                }
                                            }
                                            
                                            JToken dataNodeSizeValue = propertiesValue["dataNodeSize"];
                                            if (dataNodeSizeValue != null && dataNodeSizeValue.Type != JTokenType.Null)
                                            {
                                                string dataNodeSizeInstance = ((string)dataNodeSizeValue);
                                                hDInsightOnDemandLinkedServiceInstance.DataNodeSize = dataNodeSizeInstance;
                                            }
                                            
                                            JToken headNodeSizeValue = propertiesValue["headNodeSize"];
                                            if (headNodeSizeValue != null && headNodeSizeValue.Type != JTokenType.Null)
                                            {
                                                string headNodeSizeInstance = ((string)headNodeSizeValue);
                                                hDInsightOnDemandLinkedServiceInstance.HeadNodeSize = headNodeSizeInstance;
                                            }
                                            
                                            JToken zookeeperNodeSizeValue = propertiesValue["zookeeperNodeSize"];
                                            if (zookeeperNodeSizeValue != null && zookeeperNodeSizeValue.Type != JTokenType.Null)
                                            {
                                                string zookeeperNodeSizeInstance = ((string)zookeeperNodeSizeValue);
                                                hDInsightOnDemandLinkedServiceInstance.ZookeeperNodeSize = zookeeperNodeSizeInstance;
                                            }
                                            
                                            JToken osTypeValue = propertiesValue["osType"];
                                            if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                            {
                                                string osTypeInstance = ((string)osTypeValue);
                                                hDInsightOnDemandLinkedServiceInstance.OSType = osTypeInstance;
                                            }
                                            
                                            JToken sshPasswordValue = propertiesValue["sshPassword"];
                                            if (sshPasswordValue != null && sshPasswordValue.Type != JTokenType.Null)
                                            {
                                                string sshPasswordInstance = ((string)sshPasswordValue);
                                                hDInsightOnDemandLinkedServiceInstance.SshPassword = sshPasswordInstance;
                                            }
                                            
                                            JToken sshPublicKeyValue = propertiesValue["sshPublicKey"];
                                            if (sshPublicKeyValue != null && sshPublicKeyValue.Type != JTokenType.Null)
                                            {
                                                string sshPublicKeyInstance = ((string)sshPublicKeyValue);
                                                hDInsightOnDemandLinkedServiceInstance.SshPublicKey = sshPublicKeyInstance;
                                            }
                                            
                                            JToken sshUserNameValue = propertiesValue["sshUserName"];
                                            if (sshUserNameValue != null && sshUserNameValue.Type != JTokenType.Null)
                                            {
                                                string sshUserNameInstance = ((string)sshUserNameValue);
                                                hDInsightOnDemandLinkedServiceInstance.SshUserName = sshUserNameInstance;
                                            }
                                            
                                            JToken descriptionValue7 = propertiesValue["description"];
                                            if (descriptionValue7 != null && descriptionValue7.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance7 = ((string)descriptionValue7);
                                                hDInsightOnDemandLinkedServiceInstance.Description = descriptionInstance7;
                                            }
                                            
                                            JToken provisioningStateValue7 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue7 != null && provisioningStateValue7.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance7 = ((string)provisioningStateValue7);
                                                hDInsightOnDemandLinkedServiceInstance.ProvisioningState = provisioningStateInstance7;
                                            }
                                            
                                            JToken hubNameValue7 = propertiesValue["hubName"];
                                            if (hubNameValue7 != null && hubNameValue7.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance7 = ((string)hubNameValue7);
                                                hDInsightOnDemandLinkedServiceInstance.HubName = hubNameInstance7;
                                            }
                                            
                                            JToken errorMessageValue7 = propertiesValue["errorMessage"];
                                            if (errorMessageValue7 != null && errorMessageValue7.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance7 = ((string)errorMessageValue7);
                                                hDInsightOnDemandLinkedServiceInstance.ErrorMessage = errorMessageInstance7;
                                            }
                                            linkedServiceInstance.Properties = hDInsightOnDemandLinkedServiceInstance;
                                        }
                                        if (typeName == "OnPremisesDb2LinkedService")
                                        {
                                            OnPremisesDb2LinkedService onPremisesDb2LinkedServiceInstance = new OnPremisesDb2LinkedService();
                                            
                                            JToken serverValue = propertiesValue["server"];
                                            if (serverValue != null && serverValue.Type != JTokenType.Null)
                                            {
                                                string serverInstance = ((string)serverValue);
                                                onPremisesDb2LinkedServiceInstance.Server = serverInstance;
                                            }
                                            
                                            JToken databaseValue = propertiesValue["database"];
                                            if (databaseValue != null && databaseValue.Type != JTokenType.Null)
                                            {
                                                string databaseInstance = ((string)databaseValue);
                                                onPremisesDb2LinkedServiceInstance.Database = databaseInstance;
                                            }
                                            
                                            JToken schemaValue = propertiesValue["schema"];
                                            if (schemaValue != null && schemaValue.Type != JTokenType.Null)
                                            {
                                                string schemaInstance = ((string)schemaValue);
                                                onPremisesDb2LinkedServiceInstance.Schema = schemaInstance;
                                            }
                                            
                                            JToken authenticationTypeValue = propertiesValue["authenticationType"];
                                            if (authenticationTypeValue != null && authenticationTypeValue.Type != JTokenType.Null)
                                            {
                                                string authenticationTypeInstance = ((string)authenticationTypeValue);
                                                onPremisesDb2LinkedServiceInstance.AuthenticationType = authenticationTypeInstance;
                                            }
                                            
                                            JToken usernameValue = propertiesValue["username"];
                                            if (usernameValue != null && usernameValue.Type != JTokenType.Null)
                                            {
                                                string usernameInstance = ((string)usernameValue);
                                                onPremisesDb2LinkedServiceInstance.Username = usernameInstance;
                                            }
                                            
                                            JToken passwordValue2 = propertiesValue["password"];
                                            if (passwordValue2 != null && passwordValue2.Type != JTokenType.Null)
                                            {
                                                string passwordInstance2 = ((string)passwordValue2);
                                                onPremisesDb2LinkedServiceInstance.Password = passwordInstance2;
                                            }
                                            
                                            JToken gatewayNameValue = propertiesValue["gatewayName"];
                                            if (gatewayNameValue != null && gatewayNameValue.Type != JTokenType.Null)
                                            {
                                                string gatewayNameInstance = ((string)gatewayNameValue);
                                                onPremisesDb2LinkedServiceInstance.GatewayName = gatewayNameInstance;
                                            }
                                            
                                            JToken encryptedCredentialValue = propertiesValue["encryptedCredential"];
                                            if (encryptedCredentialValue != null && encryptedCredentialValue.Type != JTokenType.Null)
                                            {
                                                string encryptedCredentialInstance = ((string)encryptedCredentialValue);
                                                onPremisesDb2LinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance;
                                            }
                                            
                                            JToken descriptionValue8 = propertiesValue["description"];
                                            if (descriptionValue8 != null && descriptionValue8.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance8 = ((string)descriptionValue8);
                                                onPremisesDb2LinkedServiceInstance.Description = descriptionInstance8;
                                            }
                                            
                                            JToken provisioningStateValue8 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue8 != null && provisioningStateValue8.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance8 = ((string)provisioningStateValue8);
                                                onPremisesDb2LinkedServiceInstance.ProvisioningState = provisioningStateInstance8;
                                            }
                                            
                                            JToken hubNameValue8 = propertiesValue["hubName"];
                                            if (hubNameValue8 != null && hubNameValue8.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance8 = ((string)hubNameValue8);
                                                onPremisesDb2LinkedServiceInstance.HubName = hubNameInstance8;
                                            }
                                            
                                            JToken errorMessageValue8 = propertiesValue["errorMessage"];
                                            if (errorMessageValue8 != null && errorMessageValue8.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance8 = ((string)errorMessageValue8);
                                                onPremisesDb2LinkedServiceInstance.ErrorMessage = errorMessageInstance8;
                                            }
                                            linkedServiceInstance.Properties = onPremisesDb2LinkedServiceInstance;
                                        }
                                        if (typeName == "OnPremisesFileSystemLinkedService")
                                        {
                                            OnPremisesFileSystemLinkedService onPremisesFileSystemLinkedServiceInstance = new OnPremisesFileSystemLinkedService();
                                            
                                            JToken hostValue = propertiesValue["host"];
                                            if (hostValue != null && hostValue.Type != JTokenType.Null)
                                            {
                                                string hostInstance = ((string)hostValue);
                                                onPremisesFileSystemLinkedServiceInstance.Host = hostInstance;
                                            }
                                            
                                            JToken gatewayNameValue2 = propertiesValue["gatewayName"];
                                            if (gatewayNameValue2 != null && gatewayNameValue2.Type != JTokenType.Null)
                                            {
                                                string gatewayNameInstance2 = ((string)gatewayNameValue2);
                                                onPremisesFileSystemLinkedServiceInstance.GatewayName = gatewayNameInstance2;
                                            }
                                            
                                            JToken userIdValue = propertiesValue["userId"];
                                            if (userIdValue != null && userIdValue.Type != JTokenType.Null)
                                            {
                                                string userIdInstance = ((string)userIdValue);
                                                onPremisesFileSystemLinkedServiceInstance.UserId = userIdInstance;
                                            }
                                            
                                            JToken passwordValue3 = propertiesValue["password"];
                                            if (passwordValue3 != null && passwordValue3.Type != JTokenType.Null)
                                            {
                                                string passwordInstance3 = ((string)passwordValue3);
                                                onPremisesFileSystemLinkedServiceInstance.Password = passwordInstance3;
                                            }
                                            
                                            JToken encryptedCredentialValue2 = propertiesValue["encryptedCredential"];
                                            if (encryptedCredentialValue2 != null && encryptedCredentialValue2.Type != JTokenType.Null)
                                            {
                                                string encryptedCredentialInstance2 = ((string)encryptedCredentialValue2);
                                                onPremisesFileSystemLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance2;
                                            }
                                            
                                            JToken descriptionValue9 = propertiesValue["description"];
                                            if (descriptionValue9 != null && descriptionValue9.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance9 = ((string)descriptionValue9);
                                                onPremisesFileSystemLinkedServiceInstance.Description = descriptionInstance9;
                                            }
                                            
                                            JToken provisioningStateValue9 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue9 != null && provisioningStateValue9.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance9 = ((string)provisioningStateValue9);
                                                onPremisesFileSystemLinkedServiceInstance.ProvisioningState = provisioningStateInstance9;
                                            }
                                            
                                            JToken hubNameValue9 = propertiesValue["hubName"];
                                            if (hubNameValue9 != null && hubNameValue9.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance9 = ((string)hubNameValue9);
                                                onPremisesFileSystemLinkedServiceInstance.HubName = hubNameInstance9;
                                            }
                                            
                                            JToken errorMessageValue9 = propertiesValue["errorMessage"];
                                            if (errorMessageValue9 != null && errorMessageValue9.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance9 = ((string)errorMessageValue9);
                                                onPremisesFileSystemLinkedServiceInstance.ErrorMessage = errorMessageInstance9;
                                            }
                                            linkedServiceInstance.Properties = onPremisesFileSystemLinkedServiceInstance;
                                        }
                                        if (typeName == "OnPremisesMySqlLinkedService")
                                        {
                                            OnPremisesMySqlLinkedService onPremisesMySqlLinkedServiceInstance = new OnPremisesMySqlLinkedService();
                                            
                                            JToken serverValue2 = propertiesValue["server"];
                                            if (serverValue2 != null && serverValue2.Type != JTokenType.Null)
                                            {
                                                string serverInstance2 = ((string)serverValue2);
                                                onPremisesMySqlLinkedServiceInstance.Server = serverInstance2;
                                            }
                                            
                                            JToken databaseValue2 = propertiesValue["database"];
                                            if (databaseValue2 != null && databaseValue2.Type != JTokenType.Null)
                                            {
                                                string databaseInstance2 = ((string)databaseValue2);
                                                onPremisesMySqlLinkedServiceInstance.Database = databaseInstance2;
                                            }
                                            
                                            JToken schemaValue2 = propertiesValue["schema"];
                                            if (schemaValue2 != null && schemaValue2.Type != JTokenType.Null)
                                            {
                                                string schemaInstance2 = ((string)schemaValue2);
                                                onPremisesMySqlLinkedServiceInstance.Schema = schemaInstance2;
                                            }
                                            
                                            JToken authenticationTypeValue2 = propertiesValue["authenticationType"];
                                            if (authenticationTypeValue2 != null && authenticationTypeValue2.Type != JTokenType.Null)
                                            {
                                                string authenticationTypeInstance2 = ((string)authenticationTypeValue2);
                                                onPremisesMySqlLinkedServiceInstance.AuthenticationType = authenticationTypeInstance2;
                                            }
                                            
                                            JToken usernameValue2 = propertiesValue["username"];
                                            if (usernameValue2 != null && usernameValue2.Type != JTokenType.Null)
                                            {
                                                string usernameInstance2 = ((string)usernameValue2);
                                                onPremisesMySqlLinkedServiceInstance.Username = usernameInstance2;
                                            }
                                            
                                            JToken passwordValue4 = propertiesValue["password"];
                                            if (passwordValue4 != null && passwordValue4.Type != JTokenType.Null)
                                            {
                                                string passwordInstance4 = ((string)passwordValue4);
                                                onPremisesMySqlLinkedServiceInstance.Password = passwordInstance4;
                                            }
                                            
                                            JToken gatewayNameValue3 = propertiesValue["gatewayName"];
                                            if (gatewayNameValue3 != null && gatewayNameValue3.Type != JTokenType.Null)
                                            {
                                                string gatewayNameInstance3 = ((string)gatewayNameValue3);
                                                onPremisesMySqlLinkedServiceInstance.GatewayName = gatewayNameInstance3;
                                            }
                                            
                                            JToken encryptedCredentialValue3 = propertiesValue["encryptedCredential"];
                                            if (encryptedCredentialValue3 != null && encryptedCredentialValue3.Type != JTokenType.Null)
                                            {
                                                string encryptedCredentialInstance3 = ((string)encryptedCredentialValue3);
                                                onPremisesMySqlLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance3;
                                            }
                                            
                                            JToken descriptionValue10 = propertiesValue["description"];
                                            if (descriptionValue10 != null && descriptionValue10.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance10 = ((string)descriptionValue10);
                                                onPremisesMySqlLinkedServiceInstance.Description = descriptionInstance10;
                                            }
                                            
                                            JToken provisioningStateValue10 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue10 != null && provisioningStateValue10.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance10 = ((string)provisioningStateValue10);
                                                onPremisesMySqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance10;
                                            }
                                            
                                            JToken hubNameValue10 = propertiesValue["hubName"];
                                            if (hubNameValue10 != null && hubNameValue10.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance10 = ((string)hubNameValue10);
                                                onPremisesMySqlLinkedServiceInstance.HubName = hubNameInstance10;
                                            }
                                            
                                            JToken errorMessageValue10 = propertiesValue["errorMessage"];
                                            if (errorMessageValue10 != null && errorMessageValue10.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance10 = ((string)errorMessageValue10);
                                                onPremisesMySqlLinkedServiceInstance.ErrorMessage = errorMessageInstance10;
                                            }
                                            linkedServiceInstance.Properties = onPremisesMySqlLinkedServiceInstance;
                                        }
                                        if (typeName == "OnPremisesOracleLinkedService")
                                        {
                                            OnPremisesOracleLinkedService onPremisesOracleLinkedServiceInstance = new OnPremisesOracleLinkedService();
                                            
                                            JToken connectionStringValue3 = propertiesValue["connectionString"];
                                            if (connectionStringValue3 != null && connectionStringValue3.Type != JTokenType.Null)
                                            {
                                                string connectionStringInstance3 = ((string)connectionStringValue3);
                                                onPremisesOracleLinkedServiceInstance.ConnectionString = connectionStringInstance3;
                                            }
                                            
                                            JToken gatewayNameValue4 = propertiesValue["gatewayName"];
                                            if (gatewayNameValue4 != null && gatewayNameValue4.Type != JTokenType.Null)
                                            {
                                                string gatewayNameInstance4 = ((string)gatewayNameValue4);
                                                onPremisesOracleLinkedServiceInstance.GatewayName = gatewayNameInstance4;
                                            }
                                            
                                            JToken userNameValue2 = propertiesValue["userName"];
                                            if (userNameValue2 != null && userNameValue2.Type != JTokenType.Null)
                                            {
                                                string userNameInstance2 = ((string)userNameValue2);
                                                onPremisesOracleLinkedServiceInstance.UserName = userNameInstance2;
                                            }
                                            
                                            JToken passwordValue5 = propertiesValue["password"];
                                            if (passwordValue5 != null && passwordValue5.Type != JTokenType.Null)
                                            {
                                                string passwordInstance5 = ((string)passwordValue5);
                                                onPremisesOracleLinkedServiceInstance.Password = passwordInstance5;
                                            }
                                            
                                            JToken descriptionValue11 = propertiesValue["description"];
                                            if (descriptionValue11 != null && descriptionValue11.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance11 = ((string)descriptionValue11);
                                                onPremisesOracleLinkedServiceInstance.Description = descriptionInstance11;
                                            }
                                            
                                            JToken provisioningStateValue11 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue11 != null && provisioningStateValue11.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance11 = ((string)provisioningStateValue11);
                                                onPremisesOracleLinkedServiceInstance.ProvisioningState = provisioningStateInstance11;
                                            }
                                            
                                            JToken hubNameValue11 = propertiesValue["hubName"];
                                            if (hubNameValue11 != null && hubNameValue11.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance11 = ((string)hubNameValue11);
                                                onPremisesOracleLinkedServiceInstance.HubName = hubNameInstance11;
                                            }
                                            
                                            JToken errorMessageValue11 = propertiesValue["errorMessage"];
                                            if (errorMessageValue11 != null && errorMessageValue11.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance11 = ((string)errorMessageValue11);
                                                onPremisesOracleLinkedServiceInstance.ErrorMessage = errorMessageInstance11;
                                            }
                                            linkedServiceInstance.Properties = onPremisesOracleLinkedServiceInstance;
                                        }
                                        if (typeName == "OnPremisesPostgreSqlLinkedService")
                                        {
                                            OnPremisesPostgreSqlLinkedService onPremisesPostgreSqlLinkedServiceInstance = new OnPremisesPostgreSqlLinkedService();
                                            
                                            JToken serverValue3 = propertiesValue["server"];
                                            if (serverValue3 != null && serverValue3.Type != JTokenType.Null)
                                            {
                                                string serverInstance3 = ((string)serverValue3);
                                                onPremisesPostgreSqlLinkedServiceInstance.Server = serverInstance3;
                                            }
                                            
                                            JToken databaseValue3 = propertiesValue["database"];
                                            if (databaseValue3 != null && databaseValue3.Type != JTokenType.Null)
                                            {
                                                string databaseInstance3 = ((string)databaseValue3);
                                                onPremisesPostgreSqlLinkedServiceInstance.Database = databaseInstance3;
                                            }
                                            
                                            JToken schemaValue3 = propertiesValue["schema"];
                                            if (schemaValue3 != null && schemaValue3.Type != JTokenType.Null)
                                            {
                                                string schemaInstance3 = ((string)schemaValue3);
                                                onPremisesPostgreSqlLinkedServiceInstance.Schema = schemaInstance3;
                                            }
                                            
                                            JToken authenticationTypeValue3 = propertiesValue["authenticationType"];
                                            if (authenticationTypeValue3 != null && authenticationTypeValue3.Type != JTokenType.Null)
                                            {
                                                string authenticationTypeInstance3 = ((string)authenticationTypeValue3);
                                                onPremisesPostgreSqlLinkedServiceInstance.AuthenticationType = authenticationTypeInstance3;
                                            }
                                            
                                            JToken usernameValue3 = propertiesValue["username"];
                                            if (usernameValue3 != null && usernameValue3.Type != JTokenType.Null)
                                            {
                                                string usernameInstance3 = ((string)usernameValue3);
                                                onPremisesPostgreSqlLinkedServiceInstance.Username = usernameInstance3;
                                            }
                                            
                                            JToken passwordValue6 = propertiesValue["password"];
                                            if (passwordValue6 != null && passwordValue6.Type != JTokenType.Null)
                                            {
                                                string passwordInstance6 = ((string)passwordValue6);
                                                onPremisesPostgreSqlLinkedServiceInstance.Password = passwordInstance6;
                                            }
                                            
                                            JToken gatewayNameValue5 = propertiesValue["gatewayName"];
                                            if (gatewayNameValue5 != null && gatewayNameValue5.Type != JTokenType.Null)
                                            {
                                                string gatewayNameInstance5 = ((string)gatewayNameValue5);
                                                onPremisesPostgreSqlLinkedServiceInstance.GatewayName = gatewayNameInstance5;
                                            }
                                            
                                            JToken encryptedCredentialValue4 = propertiesValue["encryptedCredential"];
                                            if (encryptedCredentialValue4 != null && encryptedCredentialValue4.Type != JTokenType.Null)
                                            {
                                                string encryptedCredentialInstance4 = ((string)encryptedCredentialValue4);
                                                onPremisesPostgreSqlLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance4;
                                            }
                                            
                                            JToken descriptionValue12 = propertiesValue["description"];
                                            if (descriptionValue12 != null && descriptionValue12.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance12 = ((string)descriptionValue12);
                                                onPremisesPostgreSqlLinkedServiceInstance.Description = descriptionInstance12;
                                            }
                                            
                                            JToken provisioningStateValue12 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue12 != null && provisioningStateValue12.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance12 = ((string)provisioningStateValue12);
                                                onPremisesPostgreSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance12;
                                            }
                                            
                                            JToken hubNameValue12 = propertiesValue["hubName"];
                                            if (hubNameValue12 != null && hubNameValue12.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance12 = ((string)hubNameValue12);
                                                onPremisesPostgreSqlLinkedServiceInstance.HubName = hubNameInstance12;
                                            }
                                            
                                            JToken errorMessageValue12 = propertiesValue["errorMessage"];
                                            if (errorMessageValue12 != null && errorMessageValue12.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance12 = ((string)errorMessageValue12);
                                                onPremisesPostgreSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance12;
                                            }
                                            linkedServiceInstance.Properties = onPremisesPostgreSqlLinkedServiceInstance;
                                        }
                                        if (typeName == "OnPremisesSqlLinkedService")
                                        {
                                            OnPremisesSqlLinkedService onPremisesSqlLinkedServiceInstance = new OnPremisesSqlLinkedService();
                                            
                                            JToken connectionStringValue4 = propertiesValue["connectionString"];
                                            if (connectionStringValue4 != null && connectionStringValue4.Type != JTokenType.Null)
                                            {
                                                string connectionStringInstance4 = ((string)connectionStringValue4);
                                                onPremisesSqlLinkedServiceInstance.ConnectionString = connectionStringInstance4;
                                            }
                                            
                                            JToken gatewayNameValue6 = propertiesValue["gatewayName"];
                                            if (gatewayNameValue6 != null && gatewayNameValue6.Type != JTokenType.Null)
                                            {
                                                string gatewayNameInstance6 = ((string)gatewayNameValue6);
                                                onPremisesSqlLinkedServiceInstance.GatewayName = gatewayNameInstance6;
                                            }
                                            
                                            JToken userNameValue3 = propertiesValue["userName"];
                                            if (userNameValue3 != null && userNameValue3.Type != JTokenType.Null)
                                            {
                                                string userNameInstance3 = ((string)userNameValue3);
                                                onPremisesSqlLinkedServiceInstance.UserName = userNameInstance3;
                                            }
                                            
                                            JToken passwordValue7 = propertiesValue["password"];
                                            if (passwordValue7 != null && passwordValue7.Type != JTokenType.Null)
                                            {
                                                string passwordInstance7 = ((string)passwordValue7);
                                                onPremisesSqlLinkedServiceInstance.Password = passwordInstance7;
                                            }
                                            
                                            JToken descriptionValue13 = propertiesValue["description"];
                                            if (descriptionValue13 != null && descriptionValue13.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance13 = ((string)descriptionValue13);
                                                onPremisesSqlLinkedServiceInstance.Description = descriptionInstance13;
                                            }
                                            
                                            JToken provisioningStateValue13 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue13 != null && provisioningStateValue13.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance13 = ((string)provisioningStateValue13);
                                                onPremisesSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance13;
                                            }
                                            
                                            JToken hubNameValue13 = propertiesValue["hubName"];
                                            if (hubNameValue13 != null && hubNameValue13.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance13 = ((string)hubNameValue13);
                                                onPremisesSqlLinkedServiceInstance.HubName = hubNameInstance13;
                                            }
                                            
                                            JToken errorMessageValue13 = propertiesValue["errorMessage"];
                                            if (errorMessageValue13 != null && errorMessageValue13.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance13 = ((string)errorMessageValue13);
                                                onPremisesSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance13;
                                            }
                                            linkedServiceInstance.Properties = onPremisesSqlLinkedServiceInstance;
                                        }
                                        if (typeName == "OnPremisesSybaseLinkedService")
                                        {
                                            OnPremisesSybaseLinkedService onPremisesSybaseLinkedServiceInstance = new OnPremisesSybaseLinkedService();
                                            
                                            JToken serverValue4 = propertiesValue["server"];
                                            if (serverValue4 != null && serverValue4.Type != JTokenType.Null)
                                            {
                                                string serverInstance4 = ((string)serverValue4);
                                                onPremisesSybaseLinkedServiceInstance.Server = serverInstance4;
                                            }
                                            
                                            JToken databaseValue4 = propertiesValue["database"];
                                            if (databaseValue4 != null && databaseValue4.Type != JTokenType.Null)
                                            {
                                                string databaseInstance4 = ((string)databaseValue4);
                                                onPremisesSybaseLinkedServiceInstance.Database = databaseInstance4;
                                            }
                                            
                                            JToken schemaValue4 = propertiesValue["schema"];
                                            if (schemaValue4 != null && schemaValue4.Type != JTokenType.Null)
                                            {
                                                string schemaInstance4 = ((string)schemaValue4);
                                                onPremisesSybaseLinkedServiceInstance.Schema = schemaInstance4;
                                            }
                                            
                                            JToken authenticationTypeValue4 = propertiesValue["authenticationType"];
                                            if (authenticationTypeValue4 != null && authenticationTypeValue4.Type != JTokenType.Null)
                                            {
                                                string authenticationTypeInstance4 = ((string)authenticationTypeValue4);
                                                onPremisesSybaseLinkedServiceInstance.AuthenticationType = authenticationTypeInstance4;
                                            }
                                            
                                            JToken usernameValue4 = propertiesValue["username"];
                                            if (usernameValue4 != null && usernameValue4.Type != JTokenType.Null)
                                            {
                                                string usernameInstance4 = ((string)usernameValue4);
                                                onPremisesSybaseLinkedServiceInstance.Username = usernameInstance4;
                                            }
                                            
                                            JToken passwordValue8 = propertiesValue["password"];
                                            if (passwordValue8 != null && passwordValue8.Type != JTokenType.Null)
                                            {
                                                string passwordInstance8 = ((string)passwordValue8);
                                                onPremisesSybaseLinkedServiceInstance.Password = passwordInstance8;
                                            }
                                            
                                            JToken gatewayNameValue7 = propertiesValue["gatewayName"];
                                            if (gatewayNameValue7 != null && gatewayNameValue7.Type != JTokenType.Null)
                                            {
                                                string gatewayNameInstance7 = ((string)gatewayNameValue7);
                                                onPremisesSybaseLinkedServiceInstance.GatewayName = gatewayNameInstance7;
                                            }
                                            
                                            JToken encryptedCredentialValue5 = propertiesValue["encryptedCredential"];
                                            if (encryptedCredentialValue5 != null && encryptedCredentialValue5.Type != JTokenType.Null)
                                            {
                                                string encryptedCredentialInstance5 = ((string)encryptedCredentialValue5);
                                                onPremisesSybaseLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance5;
                                            }
                                            
                                            JToken descriptionValue14 = propertiesValue["description"];
                                            if (descriptionValue14 != null && descriptionValue14.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance14 = ((string)descriptionValue14);
                                                onPremisesSybaseLinkedServiceInstance.Description = descriptionInstance14;
                                            }
                                            
                                            JToken provisioningStateValue14 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue14 != null && provisioningStateValue14.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance14 = ((string)provisioningStateValue14);
                                                onPremisesSybaseLinkedServiceInstance.ProvisioningState = provisioningStateInstance14;
                                            }
                                            
                                            JToken hubNameValue14 = propertiesValue["hubName"];
                                            if (hubNameValue14 != null && hubNameValue14.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance14 = ((string)hubNameValue14);
                                                onPremisesSybaseLinkedServiceInstance.HubName = hubNameInstance14;
                                            }
                                            
                                            JToken errorMessageValue14 = propertiesValue["errorMessage"];
                                            if (errorMessageValue14 != null && errorMessageValue14.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance14 = ((string)errorMessageValue14);
                                                onPremisesSybaseLinkedServiceInstance.ErrorMessage = errorMessageInstance14;
                                            }
                                            linkedServiceInstance.Properties = onPremisesSybaseLinkedServiceInstance;
                                        }
                                        if (typeName == "OnPremisesTeradataLinkedService")
                                        {
                                            OnPremisesTeradataLinkedService onPremisesTeradataLinkedServiceInstance = new OnPremisesTeradataLinkedService();
                                            
                                            JToken serverValue5 = propertiesValue["server"];
                                            if (serverValue5 != null && serverValue5.Type != JTokenType.Null)
                                            {
                                                string serverInstance5 = ((string)serverValue5);
                                                onPremisesTeradataLinkedServiceInstance.Server = serverInstance5;
                                            }
                                            
                                            JToken databaseValue5 = propertiesValue["database"];
                                            if (databaseValue5 != null && databaseValue5.Type != JTokenType.Null)
                                            {
                                                string databaseInstance5 = ((string)databaseValue5);
                                                onPremisesTeradataLinkedServiceInstance.Database = databaseInstance5;
                                            }
                                            
                                            JToken schemaValue5 = propertiesValue["schema"];
                                            if (schemaValue5 != null && schemaValue5.Type != JTokenType.Null)
                                            {
                                                string schemaInstance5 = ((string)schemaValue5);
                                                onPremisesTeradataLinkedServiceInstance.Schema = schemaInstance5;
                                            }
                                            
                                            JToken authenticationTypeValue5 = propertiesValue["authenticationType"];
                                            if (authenticationTypeValue5 != null && authenticationTypeValue5.Type != JTokenType.Null)
                                            {
                                                string authenticationTypeInstance5 = ((string)authenticationTypeValue5);
                                                onPremisesTeradataLinkedServiceInstance.AuthenticationType = authenticationTypeInstance5;
                                            }
                                            
                                            JToken usernameValue5 = propertiesValue["username"];
                                            if (usernameValue5 != null && usernameValue5.Type != JTokenType.Null)
                                            {
                                                string usernameInstance5 = ((string)usernameValue5);
                                                onPremisesTeradataLinkedServiceInstance.Username = usernameInstance5;
                                            }
                                            
                                            JToken passwordValue9 = propertiesValue["password"];
                                            if (passwordValue9 != null && passwordValue9.Type != JTokenType.Null)
                                            {
                                                string passwordInstance9 = ((string)passwordValue9);
                                                onPremisesTeradataLinkedServiceInstance.Password = passwordInstance9;
                                            }
                                            
                                            JToken gatewayNameValue8 = propertiesValue["gatewayName"];
                                            if (gatewayNameValue8 != null && gatewayNameValue8.Type != JTokenType.Null)
                                            {
                                                string gatewayNameInstance8 = ((string)gatewayNameValue8);
                                                onPremisesTeradataLinkedServiceInstance.GatewayName = gatewayNameInstance8;
                                            }
                                            
                                            JToken encryptedCredentialValue6 = propertiesValue["encryptedCredential"];
                                            if (encryptedCredentialValue6 != null && encryptedCredentialValue6.Type != JTokenType.Null)
                                            {
                                                string encryptedCredentialInstance6 = ((string)encryptedCredentialValue6);
                                                onPremisesTeradataLinkedServiceInstance.EncryptedCredential = encryptedCredentialInstance6;
                                            }
                                            
                                            JToken descriptionValue15 = propertiesValue["description"];
                                            if (descriptionValue15 != null && descriptionValue15.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance15 = ((string)descriptionValue15);
                                                onPremisesTeradataLinkedServiceInstance.Description = descriptionInstance15;
                                            }
                                            
                                            JToken provisioningStateValue15 = propertiesValue["provisioningState"];
                                            if (provisioningStateValue15 != null && provisioningStateValue15.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance15 = ((string)provisioningStateValue15);
                                                onPremisesTeradataLinkedServiceInstance.ProvisioningState = provisioningStateInstance15;
                                            }
                                            
                                            JToken hubNameValue15 = propertiesValue["hubName"];
                                            if (hubNameValue15 != null && hubNameValue15.Type != JTokenType.Null)
                                            {
                                                string hubNameInstance15 = ((string)hubNameValue15);
                                                onPremisesTeradataLinkedServiceInstance.HubName = hubNameInstance15;
                                            }
                                            
                                            JToken errorMessageValue15 = propertiesValue["errorMessage"];
                                            if (errorMessageValue15 != null && errorMessageValue15.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance15 = ((string)errorMessageValue15);
                                                onPremisesTeradataLinkedServiceInstance.ErrorMessage = errorMessageInstance15;
                                            }
                                            linkedServiceInstance.Properties = onPremisesTeradataLinkedServiceInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["@odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = ((string)odatanextLinkValue);
                                result.NextLink = odatanextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
