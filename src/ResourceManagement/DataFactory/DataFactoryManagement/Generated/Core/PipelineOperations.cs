// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.DataFactories.Common.Models;
using Microsoft.Azure.Management.DataFactories.Core;
using Microsoft.Azure.Management.DataFactories.Core.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.DataFactories.Core
{
    /// <summary>
    /// Operations for managing pipelines.
    /// </summary>
    internal partial class PipelineOperations : IServiceOperations<DataFactoryManagementClient>, IPipelineOperations
    {
        /// <summary>
        /// Initializes a new instance of the PipelineOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal PipelineOperations(DataFactoryManagementClient client)
        {
            this._client = client;
        }
        
        private DataFactoryManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.DataFactories.Core.DataFactoryManagementClient.
        /// </summary>
        public DataFactoryManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Create or update a pipeline instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update pipeline operation response.
        /// </returns>
        public async Task<PipelineCreateOrUpdateResponse> BeginCreateOrUpdateAsync(string resourceGroupName, string dataFactoryName, PipelineCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Pipeline != null)
            {
                if (parameters.Pipeline.Name == null)
                {
                    throw new ArgumentNullException("parameters.Pipeline.Name");
                }
                if (parameters.Pipeline.Name != null && parameters.Pipeline.Name.Length > 260)
                {
                    throw new ArgumentOutOfRangeException("parameters.Pipeline.Name");
                }
                if (Regex.IsMatch(parameters.Pipeline.Name, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
                {
                    throw new ArgumentOutOfRangeException("parameters.Pipeline.Name");
                }
                if (parameters.Pipeline.Properties == null)
                {
                    throw new ArgumentNullException("parameters.Pipeline.Properties");
                }
                if (parameters.Pipeline.Properties.Activities == null)
                {
                    throw new ArgumentNullException("parameters.Pipeline.Properties.Activities");
                }
                if (parameters.Pipeline.Properties.Activities != null)
                {
                    foreach (Activity activitiesParameterItem in parameters.Pipeline.Properties.Activities)
                    {
                        if (activitiesParameterItem.Inputs != null)
                        {
                            foreach (ActivityInput inputsParameterItem in activitiesParameterItem.Inputs)
                            {
                                if (inputsParameterItem.Name == null)
                                {
                                    throw new ArgumentNullException("parameters.Pipeline.Properties.Activities.Inputs.Name");
                                }
                            }
                        }
                        if (activitiesParameterItem.Name == null)
                        {
                            throw new ArgumentNullException("parameters.Pipeline.Properties.Activities.Name");
                        }
                        if (activitiesParameterItem.Outputs != null)
                        {
                            foreach (ActivityOutput outputsParameterItem in activitiesParameterItem.Outputs)
                            {
                                if (outputsParameterItem.Name == null)
                                {
                                    throw new ArgumentNullException("parameters.Pipeline.Properties.Activities.Outputs.Name");
                                }
                            }
                        }
                        if (activitiesParameterItem.Type == null)
                        {
                            throw new ArgumentNullException("parameters.Pipeline.Properties.Activities.Type");
                        }
                        if (activitiesParameterItem.TypeProperties == null)
                        {
                            throw new ArgumentNullException("parameters.Pipeline.Properties.Activities.TypeProperties");
                        }
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/datapipelines/";
            if (parameters.Pipeline != null && parameters.Pipeline.Name != null)
            {
                url = url + Uri.EscapeDataString(parameters.Pipeline.Name);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-07-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject pipelineCreateOrUpdateParametersValue = new JObject();
                requestDoc = pipelineCreateOrUpdateParametersValue;
                
                if (parameters.Pipeline != null)
                {
                    pipelineCreateOrUpdateParametersValue["name"] = parameters.Pipeline.Name;
                    
                    JObject propertiesValue = new JObject();
                    pipelineCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Pipeline.Properties.Description != null)
                    {
                        propertiesValue["description"] = parameters.Pipeline.Properties.Description;
                    }
                    
                    if (parameters.Pipeline.Properties.Activities != null)
                    {
                        if (parameters.Pipeline.Properties.Activities is ILazyCollection == false || ((ILazyCollection)parameters.Pipeline.Properties.Activities).IsInitialized)
                        {
                            JArray activitiesArray = new JArray();
                            foreach (Activity activitiesItem in parameters.Pipeline.Properties.Activities)
                            {
                                JObject activityValue = new JObject();
                                activitiesArray.Add(activityValue);
                                
                                activityValue["name"] = activitiesItem.Name;
                                
                                activityValue["type"] = activitiesItem.Type;
                                
                                activityValue["typeProperties"] = JObject.Parse(activitiesItem.TypeProperties);
                                
                                if (activitiesItem.Description != null)
                                {
                                    activityValue["description"] = activitiesItem.Description;
                                }
                                
                                if (activitiesItem.LinkedServiceName != null)
                                {
                                    activityValue["linkedServiceName"] = activitiesItem.LinkedServiceName;
                                }
                                
                                if (activitiesItem.Policy != null)
                                {
                                    JObject policyValue = new JObject();
                                    activityValue["policy"] = policyValue;
                                    
                                    if (activitiesItem.Policy.Timeout != null)
                                    {
                                        policyValue["timeout"] = activitiesItem.Policy.Timeout.Value.ToString();
                                    }
                                    
                                    if (activitiesItem.Policy.Delay != null)
                                    {
                                        policyValue["delay"] = activitiesItem.Policy.Delay.Value.ToString();
                                    }
                                    
                                    if (activitiesItem.Policy.Concurrency != null)
                                    {
                                        policyValue["concurrency"] = activitiesItem.Policy.Concurrency.Value;
                                    }
                                    
                                    if (activitiesItem.Policy.ExecutionPriorityOrder != null)
                                    {
                                        policyValue["executionPriorityOrder"] = activitiesItem.Policy.ExecutionPriorityOrder;
                                    }
                                    
                                    if (activitiesItem.Policy.Retry != null)
                                    {
                                        policyValue["retry"] = activitiesItem.Policy.Retry.Value;
                                    }
                                    
                                    if (activitiesItem.Policy.LongRetry != null)
                                    {
                                        policyValue["longRetry"] = activitiesItem.Policy.LongRetry.Value;
                                    }
                                    
                                    if (activitiesItem.Policy.LongRetryInterval != null)
                                    {
                                        policyValue["longRetryInterval"] = activitiesItem.Policy.LongRetryInterval.Value.ToString();
                                    }
                                }
                                
                                if (activitiesItem.Inputs != null)
                                {
                                    if (activitiesItem.Inputs is ILazyCollection == false || ((ILazyCollection)activitiesItem.Inputs).IsInitialized)
                                    {
                                        JArray inputsArray = new JArray();
                                        foreach (ActivityInput inputsItem in activitiesItem.Inputs)
                                        {
                                            JObject activityInputValue = new JObject();
                                            inputsArray.Add(activityInputValue);
                                            
                                            if (inputsItem.StartTime != null)
                                            {
                                                activityInputValue["startTime"] = inputsItem.StartTime;
                                            }
                                            
                                            if (inputsItem.EndTime != null)
                                            {
                                                activityInputValue["endTime"] = inputsItem.EndTime;
                                            }
                                            
                                            if (inputsItem.Length != null)
                                            {
                                                activityInputValue["length"] = inputsItem.Length.Value.ToString();
                                            }
                                            
                                            activityInputValue["name"] = inputsItem.Name;
                                        }
                                        activityValue["inputs"] = inputsArray;
                                    }
                                }
                                
                                if (activitiesItem.Outputs != null)
                                {
                                    if (activitiesItem.Outputs is ILazyCollection == false || ((ILazyCollection)activitiesItem.Outputs).IsInitialized)
                                    {
                                        JArray outputsArray = new JArray();
                                        foreach (ActivityOutput outputsItem in activitiesItem.Outputs)
                                        {
                                            JObject activityOutputValue = new JObject();
                                            outputsArray.Add(activityOutputValue);
                                            
                                            activityOutputValue["name"] = outputsItem.Name;
                                        }
                                        activityValue["outputs"] = outputsArray;
                                    }
                                }
                            }
                            propertiesValue["activities"] = activitiesArray;
                        }
                    }
                    
                    if (parameters.Pipeline.Properties.Start != null)
                    {
                        propertiesValue["start"] = parameters.Pipeline.Properties.Start.Value;
                    }
                    
                    if (parameters.Pipeline.Properties.End != null)
                    {
                        propertiesValue["end"] = parameters.Pipeline.Properties.End.Value;
                    }
                    
                    if (parameters.Pipeline.Properties.IsPaused != null)
                    {
                        propertiesValue["isPaused"] = parameters.Pipeline.Properties.IsPaused.Value;
                    }
                    
                    if (parameters.Pipeline.Properties.RuntimeInfo != null)
                    {
                        JObject runtimeInfoValue = new JObject();
                        propertiesValue["runtimeInfo"] = runtimeInfoValue;
                        
                        runtimeInfoValue["deploymentTime"] = parameters.Pipeline.Properties.RuntimeInfo.DeploymentTime;
                    }
                    
                    if (parameters.Pipeline.Properties.ProvisioningState != null)
                    {
                        propertiesValue["provisioningState"] = parameters.Pipeline.Properties.ProvisioningState;
                    }
                    
                    if (parameters.Pipeline.Properties.ErrorMessage != null)
                    {
                        propertiesValue["errorMessage"] = parameters.Pipeline.Properties.ErrorMessage;
                    }
                    
                    if (parameters.Pipeline.Properties.HubName != null)
                    {
                        propertiesValue["hubName"] = parameters.Pipeline.Properties.HubName;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    PipelineCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new PipelineCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Pipeline pipelineInstance = new Pipeline();
                            result.Pipeline = pipelineInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                pipelineInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                PipelineProperties propertiesInstance = new PipelineProperties();
                                pipelineInstance.Properties = propertiesInstance;
                                
                                JToken descriptionValue = propertiesValue2["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                                
                                JToken activitiesArray2 = propertiesValue2["activities"];
                                if (activitiesArray2 != null && activitiesArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken activitiesValue in ((JArray)activitiesArray2))
                                    {
                                        Activity activityInstance = new Activity();
                                        propertiesInstance.Activities.Add(activityInstance);
                                        
                                        JToken nameValue2 = activitiesValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            activityInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken typeValue = activitiesValue["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            activityInstance.Type = typeInstance;
                                        }
                                        
                                        JToken typePropertiesValue = activitiesValue["typeProperties"];
                                        if (typePropertiesValue != null && typePropertiesValue.Type != JTokenType.Null)
                                        {
                                            string typePropertiesInstance = typePropertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                            activityInstance.TypeProperties = typePropertiesInstance;
                                        }
                                        
                                        JToken descriptionValue2 = activitiesValue["description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            activityInstance.Description = descriptionInstance2;
                                        }
                                        
                                        JToken linkedServiceNameValue = activitiesValue["linkedServiceName"];
                                        if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                            activityInstance.LinkedServiceName = linkedServiceNameInstance;
                                        }
                                        
                                        JToken policyValue2 = activitiesValue["policy"];
                                        if (policyValue2 != null && policyValue2.Type != JTokenType.Null)
                                        {
                                            ActivityPolicy policyInstance = new ActivityPolicy();
                                            activityInstance.Policy = policyInstance;
                                            
                                            JToken timeoutValue = policyValue2["timeout"];
                                            if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                policyInstance.Timeout = timeoutInstance;
                                            }
                                            
                                            JToken delayValue = policyValue2["delay"];
                                            if (delayValue != null && delayValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan delayInstance = TimeSpan.Parse(((string)delayValue), CultureInfo.InvariantCulture);
                                                policyInstance.Delay = delayInstance;
                                            }
                                            
                                            JToken concurrencyValue = policyValue2["concurrency"];
                                            if (concurrencyValue != null && concurrencyValue.Type != JTokenType.Null)
                                            {
                                                uint concurrencyInstance = ((uint)concurrencyValue);
                                                policyInstance.Concurrency = concurrencyInstance;
                                            }
                                            
                                            JToken executionPriorityOrderValue = policyValue2["executionPriorityOrder"];
                                            if (executionPriorityOrderValue != null && executionPriorityOrderValue.Type != JTokenType.Null)
                                            {
                                                string executionPriorityOrderInstance = ((string)executionPriorityOrderValue);
                                                policyInstance.ExecutionPriorityOrder = executionPriorityOrderInstance;
                                            }
                                            
                                            JToken retryValue = policyValue2["retry"];
                                            if (retryValue != null && retryValue.Type != JTokenType.Null)
                                            {
                                                int retryInstance = ((int)retryValue);
                                                policyInstance.Retry = retryInstance;
                                            }
                                            
                                            JToken longRetryValue = policyValue2["longRetry"];
                                            if (longRetryValue != null && longRetryValue.Type != JTokenType.Null)
                                            {
                                                int longRetryInstance = ((int)longRetryValue);
                                                policyInstance.LongRetry = longRetryInstance;
                                            }
                                            
                                            JToken longRetryIntervalValue = policyValue2["longRetryInterval"];
                                            if (longRetryIntervalValue != null && longRetryIntervalValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan longRetryIntervalInstance = TimeSpan.Parse(((string)longRetryIntervalValue), CultureInfo.InvariantCulture);
                                                policyInstance.LongRetryInterval = longRetryIntervalInstance;
                                            }
                                        }
                                        
                                        JToken inputsArray2 = activitiesValue["inputs"];
                                        if (inputsArray2 != null && inputsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputsValue in ((JArray)inputsArray2))
                                            {
                                                ActivityInput activityInputInstance = new ActivityInput();
                                                activityInstance.Inputs.Add(activityInputInstance);
                                                
                                                JToken startTimeValue = inputsValue["startTime"];
                                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                {
                                                    string startTimeInstance = ((string)startTimeValue);
                                                    activityInputInstance.StartTime = startTimeInstance;
                                                }
                                                
                                                JToken endTimeValue = inputsValue["endTime"];
                                                if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                {
                                                    string endTimeInstance = ((string)endTimeValue);
                                                    activityInputInstance.EndTime = endTimeInstance;
                                                }
                                                
                                                JToken lengthValue = inputsValue["length"];
                                                if (lengthValue != null && lengthValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan lengthInstance = TimeSpan.Parse(((string)lengthValue), CultureInfo.InvariantCulture);
                                                    activityInputInstance.Length = lengthInstance;
                                                }
                                                
                                                JToken nameValue3 = inputsValue["name"];
                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                {
                                                    string nameInstance3 = ((string)nameValue3);
                                                    activityInputInstance.Name = nameInstance3;
                                                }
                                            }
                                        }
                                        
                                        JToken outputsArray2 = activitiesValue["outputs"];
                                        if (outputsArray2 != null && outputsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputsValue in ((JArray)outputsArray2))
                                            {
                                                ActivityOutput activityOutputInstance = new ActivityOutput();
                                                activityInstance.Outputs.Add(activityOutputInstance);
                                                
                                                JToken nameValue4 = outputsValue["name"];
                                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                {
                                                    string nameInstance4 = ((string)nameValue4);
                                                    activityOutputInstance.Name = nameInstance4;
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken startValue = propertiesValue2["start"];
                                if (startValue != null && startValue.Type != JTokenType.Null)
                                {
                                    DateTime startInstance = ((DateTime)startValue);
                                    propertiesInstance.Start = startInstance;
                                }
                                
                                JToken endValue = propertiesValue2["end"];
                                if (endValue != null && endValue.Type != JTokenType.Null)
                                {
                                    DateTime endInstance = ((DateTime)endValue);
                                    propertiesInstance.End = endInstance;
                                }
                                
                                JToken isPausedValue = propertiesValue2["isPaused"];
                                if (isPausedValue != null && isPausedValue.Type != JTokenType.Null)
                                {
                                    bool isPausedInstance = ((bool)isPausedValue);
                                    propertiesInstance.IsPaused = isPausedInstance;
                                }
                                
                                JToken runtimeInfoValue2 = propertiesValue2["runtimeInfo"];
                                if (runtimeInfoValue2 != null && runtimeInfoValue2.Type != JTokenType.Null)
                                {
                                    PipelineRuntimeInfo runtimeInfoInstance = new PipelineRuntimeInfo();
                                    propertiesInstance.RuntimeInfo = runtimeInfoInstance;
                                    
                                    JToken deploymentTimeValue = runtimeInfoValue2["deploymentTime"];
                                    if (deploymentTimeValue != null && deploymentTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime deploymentTimeInstance = ((DateTime)deploymentTimeValue);
                                        runtimeInfoInstance.DeploymentTime = deploymentTimeInstance;
                                    }
                                }
                                
                                JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken errorMessageValue = propertiesValue2["errorMessage"];
                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance = ((string)errorMessageValue);
                                    propertiesInstance.ErrorMessage = errorMessageInstance;
                                }
                                
                                JToken hubNameValue = propertiesValue2["hubName"];
                                if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                                {
                                    string hubNameInstance = ((string)hubNameValue);
                                    propertiesInstance.HubName = hubNameInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    result.Location = url;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create a new pipeline instance with raw json content.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='dataPipelineName'>
        /// Required. A unique pipeline instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create a pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update pipeline operation response.
        /// </returns>
        public async Task<PipelineCreateOrUpdateResponse> BeginCreateOrUpdateWithRawJsonContentAsync(string resourceGroupName, string dataFactoryName, string dataPipelineName, PipelineCreateOrUpdateWithRawJsonContentParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (dataPipelineName == null)
            {
                throw new ArgumentNullException("dataPipelineName");
            }
            if (dataPipelineName != null && dataPipelineName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("dataPipelineName");
            }
            if (Regex.IsMatch(dataPipelineName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataPipelineName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Content == null)
            {
                throw new ArgumentNullException("parameters.Content");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("dataPipelineName", dataPipelineName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateOrUpdateWithRawJsonContentAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/datapipelines/";
            url = url + Uri.EscapeDataString(dataPipelineName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-07-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = parameters.Content;
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    PipelineCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new PipelineCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Pipeline pipelineInstance = new Pipeline();
                            result.Pipeline = pipelineInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                pipelineInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                PipelineProperties propertiesInstance = new PipelineProperties();
                                pipelineInstance.Properties = propertiesInstance;
                                
                                JToken descriptionValue = propertiesValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                                
                                JToken activitiesArray = propertiesValue["activities"];
                                if (activitiesArray != null && activitiesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken activitiesValue in ((JArray)activitiesArray))
                                    {
                                        Activity activityInstance = new Activity();
                                        propertiesInstance.Activities.Add(activityInstance);
                                        
                                        JToken nameValue2 = activitiesValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            activityInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken typeValue = activitiesValue["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            activityInstance.Type = typeInstance;
                                        }
                                        
                                        JToken typePropertiesValue = activitiesValue["typeProperties"];
                                        if (typePropertiesValue != null && typePropertiesValue.Type != JTokenType.Null)
                                        {
                                            string typePropertiesInstance = typePropertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                            activityInstance.TypeProperties = typePropertiesInstance;
                                        }
                                        
                                        JToken descriptionValue2 = activitiesValue["description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            activityInstance.Description = descriptionInstance2;
                                        }
                                        
                                        JToken linkedServiceNameValue = activitiesValue["linkedServiceName"];
                                        if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                            activityInstance.LinkedServiceName = linkedServiceNameInstance;
                                        }
                                        
                                        JToken policyValue = activitiesValue["policy"];
                                        if (policyValue != null && policyValue.Type != JTokenType.Null)
                                        {
                                            ActivityPolicy policyInstance = new ActivityPolicy();
                                            activityInstance.Policy = policyInstance;
                                            
                                            JToken timeoutValue = policyValue["timeout"];
                                            if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                policyInstance.Timeout = timeoutInstance;
                                            }
                                            
                                            JToken delayValue = policyValue["delay"];
                                            if (delayValue != null && delayValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan delayInstance = TimeSpan.Parse(((string)delayValue), CultureInfo.InvariantCulture);
                                                policyInstance.Delay = delayInstance;
                                            }
                                            
                                            JToken concurrencyValue = policyValue["concurrency"];
                                            if (concurrencyValue != null && concurrencyValue.Type != JTokenType.Null)
                                            {
                                                uint concurrencyInstance = ((uint)concurrencyValue);
                                                policyInstance.Concurrency = concurrencyInstance;
                                            }
                                            
                                            JToken executionPriorityOrderValue = policyValue["executionPriorityOrder"];
                                            if (executionPriorityOrderValue != null && executionPriorityOrderValue.Type != JTokenType.Null)
                                            {
                                                string executionPriorityOrderInstance = ((string)executionPriorityOrderValue);
                                                policyInstance.ExecutionPriorityOrder = executionPriorityOrderInstance;
                                            }
                                            
                                            JToken retryValue = policyValue["retry"];
                                            if (retryValue != null && retryValue.Type != JTokenType.Null)
                                            {
                                                int retryInstance = ((int)retryValue);
                                                policyInstance.Retry = retryInstance;
                                            }
                                            
                                            JToken longRetryValue = policyValue["longRetry"];
                                            if (longRetryValue != null && longRetryValue.Type != JTokenType.Null)
                                            {
                                                int longRetryInstance = ((int)longRetryValue);
                                                policyInstance.LongRetry = longRetryInstance;
                                            }
                                            
                                            JToken longRetryIntervalValue = policyValue["longRetryInterval"];
                                            if (longRetryIntervalValue != null && longRetryIntervalValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan longRetryIntervalInstance = TimeSpan.Parse(((string)longRetryIntervalValue), CultureInfo.InvariantCulture);
                                                policyInstance.LongRetryInterval = longRetryIntervalInstance;
                                            }
                                        }
                                        
                                        JToken inputsArray = activitiesValue["inputs"];
                                        if (inputsArray != null && inputsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputsValue in ((JArray)inputsArray))
                                            {
                                                ActivityInput activityInputInstance = new ActivityInput();
                                                activityInstance.Inputs.Add(activityInputInstance);
                                                
                                                JToken startTimeValue = inputsValue["startTime"];
                                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                {
                                                    string startTimeInstance = ((string)startTimeValue);
                                                    activityInputInstance.StartTime = startTimeInstance;
                                                }
                                                
                                                JToken endTimeValue = inputsValue["endTime"];
                                                if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                {
                                                    string endTimeInstance = ((string)endTimeValue);
                                                    activityInputInstance.EndTime = endTimeInstance;
                                                }
                                                
                                                JToken lengthValue = inputsValue["length"];
                                                if (lengthValue != null && lengthValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan lengthInstance = TimeSpan.Parse(((string)lengthValue), CultureInfo.InvariantCulture);
                                                    activityInputInstance.Length = lengthInstance;
                                                }
                                                
                                                JToken nameValue3 = inputsValue["name"];
                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                {
                                                    string nameInstance3 = ((string)nameValue3);
                                                    activityInputInstance.Name = nameInstance3;
                                                }
                                            }
                                        }
                                        
                                        JToken outputsArray = activitiesValue["outputs"];
                                        if (outputsArray != null && outputsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputsValue in ((JArray)outputsArray))
                                            {
                                                ActivityOutput activityOutputInstance = new ActivityOutput();
                                                activityInstance.Outputs.Add(activityOutputInstance);
                                                
                                                JToken nameValue4 = outputsValue["name"];
                                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                {
                                                    string nameInstance4 = ((string)nameValue4);
                                                    activityOutputInstance.Name = nameInstance4;
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken startValue = propertiesValue["start"];
                                if (startValue != null && startValue.Type != JTokenType.Null)
                                {
                                    DateTime startInstance = ((DateTime)startValue);
                                    propertiesInstance.Start = startInstance;
                                }
                                
                                JToken endValue = propertiesValue["end"];
                                if (endValue != null && endValue.Type != JTokenType.Null)
                                {
                                    DateTime endInstance = ((DateTime)endValue);
                                    propertiesInstance.End = endInstance;
                                }
                                
                                JToken isPausedValue = propertiesValue["isPaused"];
                                if (isPausedValue != null && isPausedValue.Type != JTokenType.Null)
                                {
                                    bool isPausedInstance = ((bool)isPausedValue);
                                    propertiesInstance.IsPaused = isPausedInstance;
                                }
                                
                                JToken runtimeInfoValue = propertiesValue["runtimeInfo"];
                                if (runtimeInfoValue != null && runtimeInfoValue.Type != JTokenType.Null)
                                {
                                    PipelineRuntimeInfo runtimeInfoInstance = new PipelineRuntimeInfo();
                                    propertiesInstance.RuntimeInfo = runtimeInfoInstance;
                                    
                                    JToken deploymentTimeValue = runtimeInfoValue["deploymentTime"];
                                    if (deploymentTimeValue != null && deploymentTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime deploymentTimeInstance = ((DateTime)deploymentTimeValue);
                                        runtimeInfoInstance.DeploymentTime = deploymentTimeInstance;
                                    }
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken errorMessageValue = propertiesValue["errorMessage"];
                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance = ((string)errorMessageValue);
                                    propertiesInstance.ErrorMessage = errorMessageInstance;
                                }
                                
                                JToken hubNameValue = propertiesValue["hubName"];
                                if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                                {
                                    string hubNameInstance = ((string)hubNameValue);
                                    propertiesInstance.HubName = hubNameInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    result.Location = url;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete a pipeline instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='dataPipelineName'>
        /// Required. Name of the data pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginDeleteAsync(string resourceGroupName, string dataFactoryName, string dataPipelineName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (dataPipelineName == null)
            {
                throw new ArgumentNullException("dataPipelineName");
            }
            if (dataPipelineName != null && dataPipelineName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("dataPipelineName");
            }
            if (Regex.IsMatch(dataPipelineName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataPipelineName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("dataPipelineName", dataPipelineName);
                TracingAdapter.Enter(invocationId, this, "BeginDeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/datapipelines/";
            url = url + Uri.EscapeDataString(dataPipelineName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-07-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create or update a pipeline instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update pipeline operation response.
        /// </returns>
        public async Task<PipelineCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string dataFactoryName, PipelineCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            DataFactoryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            PipelineCreateOrUpdateResponse response = await client.Pipelines.BeginCreateOrUpdateAsync(resourceGroupName, dataFactoryName, parameters, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            PipelineCreateOrUpdateResponse result = await client.Pipelines.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 5;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.Pipelines.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 5;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Create a new pipeline instance with raw json content.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='dataPipelineName'>
        /// Required. A unique pipeline instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update pipeline operation response.
        /// </returns>
        public async Task<PipelineCreateOrUpdateResponse> CreateOrUpdateWithRawJsonContentAsync(string resourceGroupName, string dataFactoryName, string dataPipelineName, PipelineCreateOrUpdateWithRawJsonContentParameters parameters, CancellationToken cancellationToken)
        {
            DataFactoryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("dataPipelineName", dataPipelineName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateWithRawJsonContentAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            PipelineCreateOrUpdateResponse response = await client.Pipelines.BeginCreateOrUpdateWithRawJsonContentAsync(resourceGroupName, dataFactoryName, dataPipelineName, parameters, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            PipelineCreateOrUpdateResponse result = await client.Pipelines.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 5;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.Pipelines.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 5;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Delete a pipeline instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='dataPipelineName'>
        /// Required. Name of the data pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> DeleteAsync(string resourceGroupName, string dataFactoryName, string dataPipelineName, CancellationToken cancellationToken)
        {
            DataFactoryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("dataPipelineName", dataPipelineName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.Pipelines.BeginDeleteAsync(resourceGroupName, dataFactoryName, dataPipelineName, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Gets a pipeline instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='dataPipelineName'>
        /// Required. Name of the data pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get pipeline operation response.
        /// </returns>
        public async Task<PipelineGetResponse> GetAsync(string resourceGroupName, string dataFactoryName, string dataPipelineName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (dataPipelineName == null)
            {
                throw new ArgumentNullException("dataPipelineName");
            }
            if (dataPipelineName != null && dataPipelineName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("dataPipelineName");
            }
            if (Regex.IsMatch(dataPipelineName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataPipelineName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("dataPipelineName", dataPipelineName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/datapipelines/";
            url = url + Uri.EscapeDataString(dataPipelineName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-07-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    PipelineGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new PipelineGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Pipeline pipelineInstance = new Pipeline();
                            result.Pipeline = pipelineInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                pipelineInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                PipelineProperties propertiesInstance = new PipelineProperties();
                                pipelineInstance.Properties = propertiesInstance;
                                
                                JToken descriptionValue = propertiesValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                                
                                JToken activitiesArray = propertiesValue["activities"];
                                if (activitiesArray != null && activitiesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken activitiesValue in ((JArray)activitiesArray))
                                    {
                                        Activity activityInstance = new Activity();
                                        propertiesInstance.Activities.Add(activityInstance);
                                        
                                        JToken nameValue2 = activitiesValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            activityInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken typeValue = activitiesValue["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            activityInstance.Type = typeInstance;
                                        }
                                        
                                        JToken typePropertiesValue = activitiesValue["typeProperties"];
                                        if (typePropertiesValue != null && typePropertiesValue.Type != JTokenType.Null)
                                        {
                                            string typePropertiesInstance = typePropertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                            activityInstance.TypeProperties = typePropertiesInstance;
                                        }
                                        
                                        JToken descriptionValue2 = activitiesValue["description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            activityInstance.Description = descriptionInstance2;
                                        }
                                        
                                        JToken linkedServiceNameValue = activitiesValue["linkedServiceName"];
                                        if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                            activityInstance.LinkedServiceName = linkedServiceNameInstance;
                                        }
                                        
                                        JToken policyValue = activitiesValue["policy"];
                                        if (policyValue != null && policyValue.Type != JTokenType.Null)
                                        {
                                            ActivityPolicy policyInstance = new ActivityPolicy();
                                            activityInstance.Policy = policyInstance;
                                            
                                            JToken timeoutValue = policyValue["timeout"];
                                            if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                policyInstance.Timeout = timeoutInstance;
                                            }
                                            
                                            JToken delayValue = policyValue["delay"];
                                            if (delayValue != null && delayValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan delayInstance = TimeSpan.Parse(((string)delayValue), CultureInfo.InvariantCulture);
                                                policyInstance.Delay = delayInstance;
                                            }
                                            
                                            JToken concurrencyValue = policyValue["concurrency"];
                                            if (concurrencyValue != null && concurrencyValue.Type != JTokenType.Null)
                                            {
                                                uint concurrencyInstance = ((uint)concurrencyValue);
                                                policyInstance.Concurrency = concurrencyInstance;
                                            }
                                            
                                            JToken executionPriorityOrderValue = policyValue["executionPriorityOrder"];
                                            if (executionPriorityOrderValue != null && executionPriorityOrderValue.Type != JTokenType.Null)
                                            {
                                                string executionPriorityOrderInstance = ((string)executionPriorityOrderValue);
                                                policyInstance.ExecutionPriorityOrder = executionPriorityOrderInstance;
                                            }
                                            
                                            JToken retryValue = policyValue["retry"];
                                            if (retryValue != null && retryValue.Type != JTokenType.Null)
                                            {
                                                int retryInstance = ((int)retryValue);
                                                policyInstance.Retry = retryInstance;
                                            }
                                            
                                            JToken longRetryValue = policyValue["longRetry"];
                                            if (longRetryValue != null && longRetryValue.Type != JTokenType.Null)
                                            {
                                                int longRetryInstance = ((int)longRetryValue);
                                                policyInstance.LongRetry = longRetryInstance;
                                            }
                                            
                                            JToken longRetryIntervalValue = policyValue["longRetryInterval"];
                                            if (longRetryIntervalValue != null && longRetryIntervalValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan longRetryIntervalInstance = TimeSpan.Parse(((string)longRetryIntervalValue), CultureInfo.InvariantCulture);
                                                policyInstance.LongRetryInterval = longRetryIntervalInstance;
                                            }
                                        }
                                        
                                        JToken inputsArray = activitiesValue["inputs"];
                                        if (inputsArray != null && inputsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputsValue in ((JArray)inputsArray))
                                            {
                                                ActivityInput activityInputInstance = new ActivityInput();
                                                activityInstance.Inputs.Add(activityInputInstance);
                                                
                                                JToken startTimeValue = inputsValue["startTime"];
                                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                {
                                                    string startTimeInstance = ((string)startTimeValue);
                                                    activityInputInstance.StartTime = startTimeInstance;
                                                }
                                                
                                                JToken endTimeValue = inputsValue["endTime"];
                                                if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                {
                                                    string endTimeInstance = ((string)endTimeValue);
                                                    activityInputInstance.EndTime = endTimeInstance;
                                                }
                                                
                                                JToken lengthValue = inputsValue["length"];
                                                if (lengthValue != null && lengthValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan lengthInstance = TimeSpan.Parse(((string)lengthValue), CultureInfo.InvariantCulture);
                                                    activityInputInstance.Length = lengthInstance;
                                                }
                                                
                                                JToken nameValue3 = inputsValue["name"];
                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                {
                                                    string nameInstance3 = ((string)nameValue3);
                                                    activityInputInstance.Name = nameInstance3;
                                                }
                                            }
                                        }
                                        
                                        JToken outputsArray = activitiesValue["outputs"];
                                        if (outputsArray != null && outputsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputsValue in ((JArray)outputsArray))
                                            {
                                                ActivityOutput activityOutputInstance = new ActivityOutput();
                                                activityInstance.Outputs.Add(activityOutputInstance);
                                                
                                                JToken nameValue4 = outputsValue["name"];
                                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                {
                                                    string nameInstance4 = ((string)nameValue4);
                                                    activityOutputInstance.Name = nameInstance4;
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken startValue = propertiesValue["start"];
                                if (startValue != null && startValue.Type != JTokenType.Null)
                                {
                                    DateTime startInstance = ((DateTime)startValue);
                                    propertiesInstance.Start = startInstance;
                                }
                                
                                JToken endValue = propertiesValue["end"];
                                if (endValue != null && endValue.Type != JTokenType.Null)
                                {
                                    DateTime endInstance = ((DateTime)endValue);
                                    propertiesInstance.End = endInstance;
                                }
                                
                                JToken isPausedValue = propertiesValue["isPaused"];
                                if (isPausedValue != null && isPausedValue.Type != JTokenType.Null)
                                {
                                    bool isPausedInstance = ((bool)isPausedValue);
                                    propertiesInstance.IsPaused = isPausedInstance;
                                }
                                
                                JToken runtimeInfoValue = propertiesValue["runtimeInfo"];
                                if (runtimeInfoValue != null && runtimeInfoValue.Type != JTokenType.Null)
                                {
                                    PipelineRuntimeInfo runtimeInfoInstance = new PipelineRuntimeInfo();
                                    propertiesInstance.RuntimeInfo = runtimeInfoInstance;
                                    
                                    JToken deploymentTimeValue = runtimeInfoValue["deploymentTime"];
                                    if (deploymentTimeValue != null && deploymentTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime deploymentTimeInstance = ((DateTime)deploymentTimeValue);
                                        runtimeInfoInstance.DeploymentTime = deploymentTimeInstance;
                                    }
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken errorMessageValue = propertiesValue["errorMessage"];
                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance = ((string)errorMessageValue);
                                    propertiesInstance.ErrorMessage = errorMessageInstance;
                                }
                                
                                JToken hubNameValue = propertiesValue["hubName"];
                                if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                                {
                                    string hubNameInstance = ((string)hubNameValue);
                                    propertiesInstance.HubName = hubNameInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update pipeline operation response.
        /// </returns>
        public async Task<PipelineCreateOrUpdateResponse> GetCreateOrUpdateStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetCreateOrUpdateStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-07-01-preview");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    PipelineCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new PipelineCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Pipeline pipelineInstance = new Pipeline();
                            result.Pipeline = pipelineInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                pipelineInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                PipelineProperties propertiesInstance = new PipelineProperties();
                                pipelineInstance.Properties = propertiesInstance;
                                
                                JToken descriptionValue = propertiesValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                                
                                JToken activitiesArray = propertiesValue["activities"];
                                if (activitiesArray != null && activitiesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken activitiesValue in ((JArray)activitiesArray))
                                    {
                                        Activity activityInstance = new Activity();
                                        propertiesInstance.Activities.Add(activityInstance);
                                        
                                        JToken nameValue2 = activitiesValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            activityInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken typeValue = activitiesValue["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            activityInstance.Type = typeInstance;
                                        }
                                        
                                        JToken typePropertiesValue = activitiesValue["typeProperties"];
                                        if (typePropertiesValue != null && typePropertiesValue.Type != JTokenType.Null)
                                        {
                                            string typePropertiesInstance = typePropertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                            activityInstance.TypeProperties = typePropertiesInstance;
                                        }
                                        
                                        JToken descriptionValue2 = activitiesValue["description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            activityInstance.Description = descriptionInstance2;
                                        }
                                        
                                        JToken linkedServiceNameValue = activitiesValue["linkedServiceName"];
                                        if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                            activityInstance.LinkedServiceName = linkedServiceNameInstance;
                                        }
                                        
                                        JToken policyValue = activitiesValue["policy"];
                                        if (policyValue != null && policyValue.Type != JTokenType.Null)
                                        {
                                            ActivityPolicy policyInstance = new ActivityPolicy();
                                            activityInstance.Policy = policyInstance;
                                            
                                            JToken timeoutValue = policyValue["timeout"];
                                            if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                policyInstance.Timeout = timeoutInstance;
                                            }
                                            
                                            JToken delayValue = policyValue["delay"];
                                            if (delayValue != null && delayValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan delayInstance = TimeSpan.Parse(((string)delayValue), CultureInfo.InvariantCulture);
                                                policyInstance.Delay = delayInstance;
                                            }
                                            
                                            JToken concurrencyValue = policyValue["concurrency"];
                                            if (concurrencyValue != null && concurrencyValue.Type != JTokenType.Null)
                                            {
                                                uint concurrencyInstance = ((uint)concurrencyValue);
                                                policyInstance.Concurrency = concurrencyInstance;
                                            }
                                            
                                            JToken executionPriorityOrderValue = policyValue["executionPriorityOrder"];
                                            if (executionPriorityOrderValue != null && executionPriorityOrderValue.Type != JTokenType.Null)
                                            {
                                                string executionPriorityOrderInstance = ((string)executionPriorityOrderValue);
                                                policyInstance.ExecutionPriorityOrder = executionPriorityOrderInstance;
                                            }
                                            
                                            JToken retryValue = policyValue["retry"];
                                            if (retryValue != null && retryValue.Type != JTokenType.Null)
                                            {
                                                int retryInstance = ((int)retryValue);
                                                policyInstance.Retry = retryInstance;
                                            }
                                            
                                            JToken longRetryValue = policyValue["longRetry"];
                                            if (longRetryValue != null && longRetryValue.Type != JTokenType.Null)
                                            {
                                                int longRetryInstance = ((int)longRetryValue);
                                                policyInstance.LongRetry = longRetryInstance;
                                            }
                                            
                                            JToken longRetryIntervalValue = policyValue["longRetryInterval"];
                                            if (longRetryIntervalValue != null && longRetryIntervalValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan longRetryIntervalInstance = TimeSpan.Parse(((string)longRetryIntervalValue), CultureInfo.InvariantCulture);
                                                policyInstance.LongRetryInterval = longRetryIntervalInstance;
                                            }
                                        }
                                        
                                        JToken inputsArray = activitiesValue["inputs"];
                                        if (inputsArray != null && inputsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputsValue in ((JArray)inputsArray))
                                            {
                                                ActivityInput activityInputInstance = new ActivityInput();
                                                activityInstance.Inputs.Add(activityInputInstance);
                                                
                                                JToken startTimeValue = inputsValue["startTime"];
                                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                {
                                                    string startTimeInstance = ((string)startTimeValue);
                                                    activityInputInstance.StartTime = startTimeInstance;
                                                }
                                                
                                                JToken endTimeValue = inputsValue["endTime"];
                                                if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                {
                                                    string endTimeInstance = ((string)endTimeValue);
                                                    activityInputInstance.EndTime = endTimeInstance;
                                                }
                                                
                                                JToken lengthValue = inputsValue["length"];
                                                if (lengthValue != null && lengthValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan lengthInstance = TimeSpan.Parse(((string)lengthValue), CultureInfo.InvariantCulture);
                                                    activityInputInstance.Length = lengthInstance;
                                                }
                                                
                                                JToken nameValue3 = inputsValue["name"];
                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                {
                                                    string nameInstance3 = ((string)nameValue3);
                                                    activityInputInstance.Name = nameInstance3;
                                                }
                                            }
                                        }
                                        
                                        JToken outputsArray = activitiesValue["outputs"];
                                        if (outputsArray != null && outputsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputsValue in ((JArray)outputsArray))
                                            {
                                                ActivityOutput activityOutputInstance = new ActivityOutput();
                                                activityInstance.Outputs.Add(activityOutputInstance);
                                                
                                                JToken nameValue4 = outputsValue["name"];
                                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                {
                                                    string nameInstance4 = ((string)nameValue4);
                                                    activityOutputInstance.Name = nameInstance4;
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken startValue = propertiesValue["start"];
                                if (startValue != null && startValue.Type != JTokenType.Null)
                                {
                                    DateTime startInstance = ((DateTime)startValue);
                                    propertiesInstance.Start = startInstance;
                                }
                                
                                JToken endValue = propertiesValue["end"];
                                if (endValue != null && endValue.Type != JTokenType.Null)
                                {
                                    DateTime endInstance = ((DateTime)endValue);
                                    propertiesInstance.End = endInstance;
                                }
                                
                                JToken isPausedValue = propertiesValue["isPaused"];
                                if (isPausedValue != null && isPausedValue.Type != JTokenType.Null)
                                {
                                    bool isPausedInstance = ((bool)isPausedValue);
                                    propertiesInstance.IsPaused = isPausedInstance;
                                }
                                
                                JToken runtimeInfoValue = propertiesValue["runtimeInfo"];
                                if (runtimeInfoValue != null && runtimeInfoValue.Type != JTokenType.Null)
                                {
                                    PipelineRuntimeInfo runtimeInfoInstance = new PipelineRuntimeInfo();
                                    propertiesInstance.RuntimeInfo = runtimeInfoInstance;
                                    
                                    JToken deploymentTimeValue = runtimeInfoValue["deploymentTime"];
                                    if (deploymentTimeValue != null && deploymentTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime deploymentTimeInstance = ((DateTime)deploymentTimeValue);
                                        runtimeInfoInstance.DeploymentTime = deploymentTimeInstance;
                                    }
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken errorMessageValue = propertiesValue["errorMessage"];
                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance = ((string)errorMessageValue);
                                    propertiesInstance.ErrorMessage = errorMessageInstance;
                                }
                                
                                JToken hubNameValue = propertiesValue["hubName"];
                                if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                                {
                                    string hubNameInstance = ((string)hubNameValue);
                                    propertiesInstance.HubName = hubNameInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    result.Location = url;
                    if (result.Pipeline != null && result.Pipeline.Properties != null && result.Pipeline.Properties.ProvisioningState == "Failed")
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (result.Pipeline != null && result.Pipeline.Properties != null && result.Pipeline.Properties.ProvisioningState == "Succeeded")
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the first page of pipeline instances with the link to the next
        /// page.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List pipeline operation response.
        /// </returns>
        public async Task<PipelineListResponse> ListAsync(string resourceGroupName, string dataFactoryName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/datapipelines";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-07-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    PipelineListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new PipelineListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Pipeline pipelineInstance = new Pipeline();
                                    result.Pipelines.Add(pipelineInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        pipelineInstance.Name = nameInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        PipelineProperties propertiesInstance = new PipelineProperties();
                                        pipelineInstance.Properties = propertiesInstance;
                                        
                                        JToken descriptionValue = propertiesValue["description"];
                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance = ((string)descriptionValue);
                                            propertiesInstance.Description = descriptionInstance;
                                        }
                                        
                                        JToken activitiesArray = propertiesValue["activities"];
                                        if (activitiesArray != null && activitiesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken activitiesValue in ((JArray)activitiesArray))
                                            {
                                                Activity activityInstance = new Activity();
                                                propertiesInstance.Activities.Add(activityInstance);
                                                
                                                JToken nameValue2 = activitiesValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    activityInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken typeValue = activitiesValue["type"];
                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                {
                                                    string typeInstance = ((string)typeValue);
                                                    activityInstance.Type = typeInstance;
                                                }
                                                
                                                JToken typePropertiesValue = activitiesValue["typeProperties"];
                                                if (typePropertiesValue != null && typePropertiesValue.Type != JTokenType.Null)
                                                {
                                                    string typePropertiesInstance = typePropertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                    activityInstance.TypeProperties = typePropertiesInstance;
                                                }
                                                
                                                JToken descriptionValue2 = activitiesValue["description"];
                                                if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                                {
                                                    string descriptionInstance2 = ((string)descriptionValue2);
                                                    activityInstance.Description = descriptionInstance2;
                                                }
                                                
                                                JToken linkedServiceNameValue = activitiesValue["linkedServiceName"];
                                                if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                                    activityInstance.LinkedServiceName = linkedServiceNameInstance;
                                                }
                                                
                                                JToken policyValue = activitiesValue["policy"];
                                                if (policyValue != null && policyValue.Type != JTokenType.Null)
                                                {
                                                    ActivityPolicy policyInstance = new ActivityPolicy();
                                                    activityInstance.Policy = policyInstance;
                                                    
                                                    JToken timeoutValue = policyValue["timeout"];
                                                    if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                        policyInstance.Timeout = timeoutInstance;
                                                    }
                                                    
                                                    JToken delayValue = policyValue["delay"];
                                                    if (delayValue != null && delayValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan delayInstance = TimeSpan.Parse(((string)delayValue), CultureInfo.InvariantCulture);
                                                        policyInstance.Delay = delayInstance;
                                                    }
                                                    
                                                    JToken concurrencyValue = policyValue["concurrency"];
                                                    if (concurrencyValue != null && concurrencyValue.Type != JTokenType.Null)
                                                    {
                                                        uint concurrencyInstance = ((uint)concurrencyValue);
                                                        policyInstance.Concurrency = concurrencyInstance;
                                                    }
                                                    
                                                    JToken executionPriorityOrderValue = policyValue["executionPriorityOrder"];
                                                    if (executionPriorityOrderValue != null && executionPriorityOrderValue.Type != JTokenType.Null)
                                                    {
                                                        string executionPriorityOrderInstance = ((string)executionPriorityOrderValue);
                                                        policyInstance.ExecutionPriorityOrder = executionPriorityOrderInstance;
                                                    }
                                                    
                                                    JToken retryValue = policyValue["retry"];
                                                    if (retryValue != null && retryValue.Type != JTokenType.Null)
                                                    {
                                                        int retryInstance = ((int)retryValue);
                                                        policyInstance.Retry = retryInstance;
                                                    }
                                                    
                                                    JToken longRetryValue = policyValue["longRetry"];
                                                    if (longRetryValue != null && longRetryValue.Type != JTokenType.Null)
                                                    {
                                                        int longRetryInstance = ((int)longRetryValue);
                                                        policyInstance.LongRetry = longRetryInstance;
                                                    }
                                                    
                                                    JToken longRetryIntervalValue = policyValue["longRetryInterval"];
                                                    if (longRetryIntervalValue != null && longRetryIntervalValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan longRetryIntervalInstance = TimeSpan.Parse(((string)longRetryIntervalValue), CultureInfo.InvariantCulture);
                                                        policyInstance.LongRetryInterval = longRetryIntervalInstance;
                                                    }
                                                }
                                                
                                                JToken inputsArray = activitiesValue["inputs"];
                                                if (inputsArray != null && inputsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken inputsValue in ((JArray)inputsArray))
                                                    {
                                                        ActivityInput activityInputInstance = new ActivityInput();
                                                        activityInstance.Inputs.Add(activityInputInstance);
                                                        
                                                        JToken startTimeValue = inputsValue["startTime"];
                                                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                        {
                                                            string startTimeInstance = ((string)startTimeValue);
                                                            activityInputInstance.StartTime = startTimeInstance;
                                                        }
                                                        
                                                        JToken endTimeValue = inputsValue["endTime"];
                                                        if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                        {
                                                            string endTimeInstance = ((string)endTimeValue);
                                                            activityInputInstance.EndTime = endTimeInstance;
                                                        }
                                                        
                                                        JToken lengthValue = inputsValue["length"];
                                                        if (lengthValue != null && lengthValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan lengthInstance = TimeSpan.Parse(((string)lengthValue), CultureInfo.InvariantCulture);
                                                            activityInputInstance.Length = lengthInstance;
                                                        }
                                                        
                                                        JToken nameValue3 = inputsValue["name"];
                                                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance3 = ((string)nameValue3);
                                                            activityInputInstance.Name = nameInstance3;
                                                        }
                                                    }
                                                }
                                                
                                                JToken outputsArray = activitiesValue["outputs"];
                                                if (outputsArray != null && outputsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken outputsValue in ((JArray)outputsArray))
                                                    {
                                                        ActivityOutput activityOutputInstance = new ActivityOutput();
                                                        activityInstance.Outputs.Add(activityOutputInstance);
                                                        
                                                        JToken nameValue4 = outputsValue["name"];
                                                        if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance4 = ((string)nameValue4);
                                                            activityOutputInstance.Name = nameInstance4;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken startValue = propertiesValue["start"];
                                        if (startValue != null && startValue.Type != JTokenType.Null)
                                        {
                                            DateTime startInstance = ((DateTime)startValue);
                                            propertiesInstance.Start = startInstance;
                                        }
                                        
                                        JToken endValue = propertiesValue["end"];
                                        if (endValue != null && endValue.Type != JTokenType.Null)
                                        {
                                            DateTime endInstance = ((DateTime)endValue);
                                            propertiesInstance.End = endInstance;
                                        }
                                        
                                        JToken isPausedValue = propertiesValue["isPaused"];
                                        if (isPausedValue != null && isPausedValue.Type != JTokenType.Null)
                                        {
                                            bool isPausedInstance = ((bool)isPausedValue);
                                            propertiesInstance.IsPaused = isPausedInstance;
                                        }
                                        
                                        JToken runtimeInfoValue = propertiesValue["runtimeInfo"];
                                        if (runtimeInfoValue != null && runtimeInfoValue.Type != JTokenType.Null)
                                        {
                                            PipelineRuntimeInfo runtimeInfoInstance = new PipelineRuntimeInfo();
                                            propertiesInstance.RuntimeInfo = runtimeInfoInstance;
                                            
                                            JToken deploymentTimeValue = runtimeInfoValue["deploymentTime"];
                                            if (deploymentTimeValue != null && deploymentTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime deploymentTimeInstance = ((DateTime)deploymentTimeValue);
                                                runtimeInfoInstance.DeploymentTime = deploymentTimeInstance;
                                            }
                                        }
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance = ((string)provisioningStateValue);
                                            propertiesInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken errorMessageValue = propertiesValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            propertiesInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken hubNameValue = propertiesValue["hubName"];
                                        if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                                        {
                                            string hubNameInstance = ((string)hubNameValue);
                                            propertiesInstance.HubName = hubNameInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the next page of pipeline instances with the link to the next
        /// page.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The url to the next pipelines page.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List pipeline operation response.
        /// </returns>
        public async Task<PipelineListResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    PipelineListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new PipelineListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Pipeline pipelineInstance = new Pipeline();
                                    result.Pipelines.Add(pipelineInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        pipelineInstance.Name = nameInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        PipelineProperties propertiesInstance = new PipelineProperties();
                                        pipelineInstance.Properties = propertiesInstance;
                                        
                                        JToken descriptionValue = propertiesValue["description"];
                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance = ((string)descriptionValue);
                                            propertiesInstance.Description = descriptionInstance;
                                        }
                                        
                                        JToken activitiesArray = propertiesValue["activities"];
                                        if (activitiesArray != null && activitiesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken activitiesValue in ((JArray)activitiesArray))
                                            {
                                                Activity activityInstance = new Activity();
                                                propertiesInstance.Activities.Add(activityInstance);
                                                
                                                JToken nameValue2 = activitiesValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    activityInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken typeValue = activitiesValue["type"];
                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                {
                                                    string typeInstance = ((string)typeValue);
                                                    activityInstance.Type = typeInstance;
                                                }
                                                
                                                JToken typePropertiesValue = activitiesValue["typeProperties"];
                                                if (typePropertiesValue != null && typePropertiesValue.Type != JTokenType.Null)
                                                {
                                                    string typePropertiesInstance = typePropertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                    activityInstance.TypeProperties = typePropertiesInstance;
                                                }
                                                
                                                JToken descriptionValue2 = activitiesValue["description"];
                                                if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                                {
                                                    string descriptionInstance2 = ((string)descriptionValue2);
                                                    activityInstance.Description = descriptionInstance2;
                                                }
                                                
                                                JToken linkedServiceNameValue = activitiesValue["linkedServiceName"];
                                                if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                                    activityInstance.LinkedServiceName = linkedServiceNameInstance;
                                                }
                                                
                                                JToken policyValue = activitiesValue["policy"];
                                                if (policyValue != null && policyValue.Type != JTokenType.Null)
                                                {
                                                    ActivityPolicy policyInstance = new ActivityPolicy();
                                                    activityInstance.Policy = policyInstance;
                                                    
                                                    JToken timeoutValue = policyValue["timeout"];
                                                    if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                        policyInstance.Timeout = timeoutInstance;
                                                    }
                                                    
                                                    JToken delayValue = policyValue["delay"];
                                                    if (delayValue != null && delayValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan delayInstance = TimeSpan.Parse(((string)delayValue), CultureInfo.InvariantCulture);
                                                        policyInstance.Delay = delayInstance;
                                                    }
                                                    
                                                    JToken concurrencyValue = policyValue["concurrency"];
                                                    if (concurrencyValue != null && concurrencyValue.Type != JTokenType.Null)
                                                    {
                                                        uint concurrencyInstance = ((uint)concurrencyValue);
                                                        policyInstance.Concurrency = concurrencyInstance;
                                                    }
                                                    
                                                    JToken executionPriorityOrderValue = policyValue["executionPriorityOrder"];
                                                    if (executionPriorityOrderValue != null && executionPriorityOrderValue.Type != JTokenType.Null)
                                                    {
                                                        string executionPriorityOrderInstance = ((string)executionPriorityOrderValue);
                                                        policyInstance.ExecutionPriorityOrder = executionPriorityOrderInstance;
                                                    }
                                                    
                                                    JToken retryValue = policyValue["retry"];
                                                    if (retryValue != null && retryValue.Type != JTokenType.Null)
                                                    {
                                                        int retryInstance = ((int)retryValue);
                                                        policyInstance.Retry = retryInstance;
                                                    }
                                                    
                                                    JToken longRetryValue = policyValue["longRetry"];
                                                    if (longRetryValue != null && longRetryValue.Type != JTokenType.Null)
                                                    {
                                                        int longRetryInstance = ((int)longRetryValue);
                                                        policyInstance.LongRetry = longRetryInstance;
                                                    }
                                                    
                                                    JToken longRetryIntervalValue = policyValue["longRetryInterval"];
                                                    if (longRetryIntervalValue != null && longRetryIntervalValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan longRetryIntervalInstance = TimeSpan.Parse(((string)longRetryIntervalValue), CultureInfo.InvariantCulture);
                                                        policyInstance.LongRetryInterval = longRetryIntervalInstance;
                                                    }
                                                }
                                                
                                                JToken inputsArray = activitiesValue["inputs"];
                                                if (inputsArray != null && inputsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken inputsValue in ((JArray)inputsArray))
                                                    {
                                                        ActivityInput activityInputInstance = new ActivityInput();
                                                        activityInstance.Inputs.Add(activityInputInstance);
                                                        
                                                        JToken startTimeValue = inputsValue["startTime"];
                                                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                        {
                                                            string startTimeInstance = ((string)startTimeValue);
                                                            activityInputInstance.StartTime = startTimeInstance;
                                                        }
                                                        
                                                        JToken endTimeValue = inputsValue["endTime"];
                                                        if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                        {
                                                            string endTimeInstance = ((string)endTimeValue);
                                                            activityInputInstance.EndTime = endTimeInstance;
                                                        }
                                                        
                                                        JToken lengthValue = inputsValue["length"];
                                                        if (lengthValue != null && lengthValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan lengthInstance = TimeSpan.Parse(((string)lengthValue), CultureInfo.InvariantCulture);
                                                            activityInputInstance.Length = lengthInstance;
                                                        }
                                                        
                                                        JToken nameValue3 = inputsValue["name"];
                                                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance3 = ((string)nameValue3);
                                                            activityInputInstance.Name = nameInstance3;
                                                        }
                                                    }
                                                }
                                                
                                                JToken outputsArray = activitiesValue["outputs"];
                                                if (outputsArray != null && outputsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken outputsValue in ((JArray)outputsArray))
                                                    {
                                                        ActivityOutput activityOutputInstance = new ActivityOutput();
                                                        activityInstance.Outputs.Add(activityOutputInstance);
                                                        
                                                        JToken nameValue4 = outputsValue["name"];
                                                        if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance4 = ((string)nameValue4);
                                                            activityOutputInstance.Name = nameInstance4;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken startValue = propertiesValue["start"];
                                        if (startValue != null && startValue.Type != JTokenType.Null)
                                        {
                                            DateTime startInstance = ((DateTime)startValue);
                                            propertiesInstance.Start = startInstance;
                                        }
                                        
                                        JToken endValue = propertiesValue["end"];
                                        if (endValue != null && endValue.Type != JTokenType.Null)
                                        {
                                            DateTime endInstance = ((DateTime)endValue);
                                            propertiesInstance.End = endInstance;
                                        }
                                        
                                        JToken isPausedValue = propertiesValue["isPaused"];
                                        if (isPausedValue != null && isPausedValue.Type != JTokenType.Null)
                                        {
                                            bool isPausedInstance = ((bool)isPausedValue);
                                            propertiesInstance.IsPaused = isPausedInstance;
                                        }
                                        
                                        JToken runtimeInfoValue = propertiesValue["runtimeInfo"];
                                        if (runtimeInfoValue != null && runtimeInfoValue.Type != JTokenType.Null)
                                        {
                                            PipelineRuntimeInfo runtimeInfoInstance = new PipelineRuntimeInfo();
                                            propertiesInstance.RuntimeInfo = runtimeInfoInstance;
                                            
                                            JToken deploymentTimeValue = runtimeInfoValue["deploymentTime"];
                                            if (deploymentTimeValue != null && deploymentTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime deploymentTimeInstance = ((DateTime)deploymentTimeValue);
                                                runtimeInfoInstance.DeploymentTime = deploymentTimeInstance;
                                            }
                                        }
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance = ((string)provisioningStateValue);
                                            propertiesInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken errorMessageValue = propertiesValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            propertiesInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken hubNameValue = propertiesValue["hubName"];
                                        if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                                        {
                                            string hubNameInstance = ((string)hubNameValue);
                                            propertiesInstance.HubName = hubNameInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Resume a suspended pipeline.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='dataPipelineName'>
        /// Required. Name of the data pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> ResumeAsync(string resourceGroupName, string dataFactoryName, string dataPipelineName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (dataPipelineName == null)
            {
                throw new ArgumentNullException("dataPipelineName");
            }
            if (dataPipelineName != null && dataPipelineName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("dataPipelineName");
            }
            if (Regex.IsMatch(dataPipelineName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataPipelineName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("dataPipelineName", dataPipelineName);
                TracingAdapter.Enter(invocationId, this, "ResumeAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/datapipelines/";
            url = url + Uri.EscapeDataString(dataPipelineName);
            url = url + "/resume";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-07-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Sets the active period of a pipeline.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='dataPipelineName'>
        /// Required. Name of the data pipeline.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters required to set the active period of a
        /// pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> SetActivePeriodAsync(string resourceGroupName, string dataFactoryName, string dataPipelineName, PipelineSetActivePeriodParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (dataPipelineName == null)
            {
                throw new ArgumentNullException("dataPipelineName");
            }
            if (dataPipelineName != null && dataPipelineName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("dataPipelineName");
            }
            if (Regex.IsMatch(dataPipelineName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataPipelineName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ActivePeriodEndTime == null)
            {
                throw new ArgumentNullException("parameters.ActivePeriodEndTime");
            }
            if (parameters.ActivePeriodStartTime == null)
            {
                throw new ArgumentNullException("parameters.ActivePeriodStartTime");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("dataPipelineName", dataPipelineName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "SetActivePeriodAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/datapipelines/";
            url = url + Uri.EscapeDataString(dataPipelineName);
            url = url + "/update";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("start=" + Uri.EscapeDataString(parameters.ActivePeriodStartTime));
            queryParameters.Add("end=" + Uri.EscapeDataString(parameters.ActivePeriodEndTime));
            queryParameters.Add("autoResolve=" + Uri.EscapeDataString(parameters.AutoResolve.ToString().ToLower()));
            queryParameters.Add("forceRecalc=" + Uri.EscapeDataString(parameters.ForceRecalc.ToString().ToLower()));
            queryParameters.Add("api-version=2015-07-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Suspend a running pipeline.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='dataPipelineName'>
        /// Required. Name of the data pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> SuspendAsync(string resourceGroupName, string dataFactoryName, string dataPipelineName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (dataPipelineName == null)
            {
                throw new ArgumentNullException("dataPipelineName");
            }
            if (dataPipelineName != null && dataPipelineName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("dataPipelineName");
            }
            if (Regex.IsMatch(dataPipelineName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataPipelineName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("dataPipelineName", dataPipelineName);
                TracingAdapter.Enter(invocationId, this, "SuspendAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/datapipelines/";
            url = url + Uri.EscapeDataString(dataPipelineName);
            url = url + "/pause";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-07-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
