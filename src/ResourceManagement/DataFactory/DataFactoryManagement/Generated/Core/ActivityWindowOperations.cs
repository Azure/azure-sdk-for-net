// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure.Management.DataFactories.Core;
using Microsoft.Azure.Management.DataFactories.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.DataFactories.Core
{
    /// <summary>
    /// Operations for activity windows.
    /// </summary>
    internal partial class ActivityWindowOperations : IServiceOperations<DataFactoryManagementClient>, IActivityWindowOperations
    {
        /// <summary>
        /// Initializes a new instance of the ActivityWindowOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ActivityWindowOperations(DataFactoryManagementClient client)
        {
            this._client = client;
        }
        
        private DataFactoryManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.DataFactories.Core.DataFactoryManagementClient.
        /// </summary>
        public DataFactoryManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Gets the first page of activity window instances for a data factory
        /// with the link to the next page.
        /// </summary>
        /// <param name='parameters'>
        /// Required. Filter parameters for activity windows list.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List activity windows operation response.
        /// </returns>
        public async Task<ActivityWindowListResponse> ListByDataFactoryAsync(ActivityWindowsByDataFactoryListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.DataFactoryName == null)
            {
                throw new ArgumentNullException("parameters.DataFactoryName");
            }
            if (parameters.DataFactoryName != null && parameters.DataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("parameters.DataFactoryName");
            }
            if (Regex.IsMatch(parameters.DataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.DataFactoryName");
            }
            if (parameters.ResourceGroupName == null)
            {
                throw new ArgumentNullException("parameters.ResourceGroupName");
            }
            if (parameters.ResourceGroupName != null && parameters.ResourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("parameters.ResourceGroupName");
            }
            if (Regex.IsMatch(parameters.ResourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.ResourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListByDataFactoryAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(parameters.ResourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(parameters.DataFactoryName);
            url = url + "/activitywindows";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject activityWindowsByDataFactoryListParametersValue = new JObject();
                requestDoc = activityWindowsByDataFactoryListParametersValue;
                
                if (parameters.Top != null)
                {
                    activityWindowsByDataFactoryListParametersValue["top"] = parameters.Top.Value;
                }
                
                if (parameters.RunStart != null)
                {
                    activityWindowsByDataFactoryListParametersValue["runStart"] = parameters.RunStart.Value;
                }
                
                if (parameters.RunEnd != null)
                {
                    activityWindowsByDataFactoryListParametersValue["runEnd"] = parameters.RunEnd.Value;
                }
                
                if (parameters.WindowStart != null)
                {
                    activityWindowsByDataFactoryListParametersValue["windowStart"] = parameters.WindowStart.Value;
                }
                
                if (parameters.WindowEnd != null)
                {
                    activityWindowsByDataFactoryListParametersValue["windowEnd"] = parameters.WindowEnd.Value;
                }
                
                if (parameters.WindowState != null)
                {
                    activityWindowsByDataFactoryListParametersValue["windowState"] = parameters.WindowState;
                }
                
                if (parameters.WindowSubstate != null)
                {
                    activityWindowsByDataFactoryListParametersValue["windowSubstate"] = parameters.WindowSubstate;
                }
                
                if (parameters.OrderBy != null)
                {
                    activityWindowsByDataFactoryListParametersValue["orderBy"] = parameters.OrderBy;
                }
                
                if (parameters.Filter != null)
                {
                    activityWindowsByDataFactoryListParametersValue["filter"] = parameters.Filter;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ActivityWindowListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ActivityWindowListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueValue = responseDoc["value"];
                            if (valueValue != null && valueValue.Type != JTokenType.Null)
                            {
                                ActivityWindowListResponseValue valueInstance = new ActivityWindowListResponseValue();
                                result.ActivityWindowListResponseValue = valueInstance;
                                
                                JToken activityWindowsArray = valueValue["activityWindows"];
                                if (activityWindowsArray != null && activityWindowsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken activityWindowsValue in ((JArray)activityWindowsArray))
                                    {
                                        ActivityWindow activityWindowInstance = new ActivityWindow();
                                        valueInstance.ActivityWindows.Add(activityWindowInstance);
                                        
                                        JToken resourceGroupNameValue = activityWindowsValue["resourceGroupName"];
                                        if (resourceGroupNameValue != null && resourceGroupNameValue.Type != JTokenType.Null)
                                        {
                                            string resourceGroupNameInstance = ((string)resourceGroupNameValue);
                                            activityWindowInstance.ResourceGroupName = resourceGroupNameInstance;
                                        }
                                        
                                        JToken dataFactoryNameValue = activityWindowsValue["dataFactoryName"];
                                        if (dataFactoryNameValue != null && dataFactoryNameValue.Type != JTokenType.Null)
                                        {
                                            string dataFactoryNameInstance = ((string)dataFactoryNameValue);
                                            activityWindowInstance.DataFactoryName = dataFactoryNameInstance;
                                        }
                                        
                                        JToken pipelineNameValue = activityWindowsValue["pipelineName"];
                                        if (pipelineNameValue != null && pipelineNameValue.Type != JTokenType.Null)
                                        {
                                            string pipelineNameInstance = ((string)pipelineNameValue);
                                            activityWindowInstance.PipelineName = pipelineNameInstance;
                                        }
                                        
                                        JToken activityNameValue = activityWindowsValue["activityName"];
                                        if (activityNameValue != null && activityNameValue.Type != JTokenType.Null)
                                        {
                                            string activityNameInstance = ((string)activityNameValue);
                                            activityWindowInstance.ActivityName = activityNameInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue = activityWindowsValue["linkedServiceName"];
                                        if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                            activityWindowInstance.LinkedServiceName = linkedServiceNameInstance;
                                        }
                                        
                                        JToken activityTypeValue = activityWindowsValue["activityType"];
                                        if (activityTypeValue != null && activityTypeValue.Type != JTokenType.Null)
                                        {
                                            string activityTypeInstance = ((string)activityTypeValue);
                                            activityWindowInstance.ActivityType = activityTypeInstance;
                                        }
                                        
                                        JToken runAttemptsValue = activityWindowsValue["runAttempts"];
                                        if (runAttemptsValue != null && runAttemptsValue.Type != JTokenType.Null)
                                        {
                                            int runAttemptsInstance = ((int)runAttemptsValue);
                                            activityWindowInstance.RunAttempts = runAttemptsInstance;
                                        }
                                        
                                        JToken runStartValue = activityWindowsValue["runStart"];
                                        if (runStartValue != null && runStartValue.Type != JTokenType.Null)
                                        {
                                            DateTime runStartInstance = ((DateTime)runStartValue);
                                            activityWindowInstance.RunStart = runStartInstance;
                                        }
                                        
                                        JToken runEndValue = activityWindowsValue["runEnd"];
                                        if (runEndValue != null && runEndValue.Type != JTokenType.Null)
                                        {
                                            DateTime runEndInstance = ((DateTime)runEndValue);
                                            activityWindowInstance.RunEnd = runEndInstance;
                                        }
                                        
                                        JToken durationValue = activityWindowsValue["duration"];
                                        if (durationValue != null && durationValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan durationInstance = TimeSpan.Parse(((string)durationValue), CultureInfo.InvariantCulture);
                                            activityWindowInstance.Duration = durationInstance;
                                        }
                                        
                                        JToken percentCompleteValue = activityWindowsValue["percentComplete"];
                                        if (percentCompleteValue != null && percentCompleteValue.Type != JTokenType.Null)
                                        {
                                            int percentCompleteInstance = ((int)percentCompleteValue);
                                            activityWindowInstance.PercentComplete = percentCompleteInstance;
                                        }
                                        
                                        JToken windowStartValue = activityWindowsValue["windowStart"];
                                        if (windowStartValue != null && windowStartValue.Type != JTokenType.Null)
                                        {
                                            DateTime windowStartInstance = ((DateTime)windowStartValue);
                                            activityWindowInstance.WindowStart = windowStartInstance;
                                        }
                                        
                                        JToken windowEndValue = activityWindowsValue["windowEnd"];
                                        if (windowEndValue != null && windowEndValue.Type != JTokenType.Null)
                                        {
                                            DateTime windowEndInstance = ((DateTime)windowEndValue);
                                            activityWindowInstance.WindowEnd = windowEndInstance;
                                        }
                                        
                                        JToken windowStateValue = activityWindowsValue["windowState"];
                                        if (windowStateValue != null && windowStateValue.Type != JTokenType.Null)
                                        {
                                            string windowStateInstance = ((string)windowStateValue);
                                            activityWindowInstance.WindowState = windowStateInstance;
                                        }
                                        
                                        JToken windowSubstateValue = activityWindowsValue["windowSubstate"];
                                        if (windowSubstateValue != null && windowSubstateValue.Type != JTokenType.Null)
                                        {
                                            string windowSubstateInstance = ((string)windowSubstateValue);
                                            activityWindowInstance.WindowSubstate = windowSubstateInstance;
                                        }
                                        
                                        JToken inputDatasetsArray = activityWindowsValue["inputDatasets"];
                                        if (inputDatasetsArray != null && inputDatasetsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputDatasetsValue in ((JArray)inputDatasetsArray))
                                            {
                                                activityWindowInstance.InputDatasets.Add(((string)inputDatasetsValue));
                                            }
                                        }
                                        
                                        JToken outputDatasetsArray = activityWindowsValue["outputDatasets"];
                                        if (outputDatasetsArray != null && outputDatasetsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputDatasetsValue in ((JArray)outputDatasetsArray))
                                            {
                                                activityWindowInstance.OutputDatasets.Add(((string)outputDatasetsValue));
                                            }
                                        }
                                    }
                                }
                                
                                JToken lastUpdateValue = valueValue["lastUpdate"];
                                if (lastUpdateValue != null && lastUpdateValue.Type != JTokenType.Null)
                                {
                                    string lastUpdateInstance = ((string)lastUpdateValue);
                                    valueInstance.LastUpdate = lastUpdateInstance;
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the first page of activity window instances for a dataset with
        /// the link to the next page.
        /// </summary>
        /// <param name='parameters'>
        /// Required. Filter parameters for activity windows list.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List activity windows operation response.
        /// </returns>
        public async Task<ActivityWindowListResponse> ListByDatasetAsync(ActivityWindowsByDatasetListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.DataFactoryName == null)
            {
                throw new ArgumentNullException("parameters.DataFactoryName");
            }
            if (parameters.DataFactoryName != null && parameters.DataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("parameters.DataFactoryName");
            }
            if (Regex.IsMatch(parameters.DataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.DataFactoryName");
            }
            if (parameters.DatasetName == null)
            {
                throw new ArgumentNullException("parameters.DatasetName");
            }
            if (parameters.DatasetName != null && parameters.DatasetName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("parameters.DatasetName");
            }
            if (Regex.IsMatch(parameters.DatasetName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.DatasetName");
            }
            if (parameters.ResourceGroupName == null)
            {
                throw new ArgumentNullException("parameters.ResourceGroupName");
            }
            if (parameters.ResourceGroupName != null && parameters.ResourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("parameters.ResourceGroupName");
            }
            if (Regex.IsMatch(parameters.ResourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.ResourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListByDatasetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(parameters.ResourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(parameters.DataFactoryName);
            url = url + "/datasets/";
            url = url + Uri.EscapeDataString(parameters.DatasetName);
            url = url + "/activitywindows";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject activityWindowsByDatasetListParametersValue = new JObject();
                requestDoc = activityWindowsByDatasetListParametersValue;
                
                if (parameters.Top != null)
                {
                    activityWindowsByDatasetListParametersValue["top"] = parameters.Top.Value;
                }
                
                if (parameters.RunStart != null)
                {
                    activityWindowsByDatasetListParametersValue["runStart"] = parameters.RunStart.Value;
                }
                
                if (parameters.RunEnd != null)
                {
                    activityWindowsByDatasetListParametersValue["runEnd"] = parameters.RunEnd.Value;
                }
                
                if (parameters.WindowStart != null)
                {
                    activityWindowsByDatasetListParametersValue["windowStart"] = parameters.WindowStart.Value;
                }
                
                if (parameters.WindowEnd != null)
                {
                    activityWindowsByDatasetListParametersValue["windowEnd"] = parameters.WindowEnd.Value;
                }
                
                if (parameters.WindowState != null)
                {
                    activityWindowsByDatasetListParametersValue["windowState"] = parameters.WindowState;
                }
                
                if (parameters.WindowSubstate != null)
                {
                    activityWindowsByDatasetListParametersValue["windowSubstate"] = parameters.WindowSubstate;
                }
                
                if (parameters.OrderBy != null)
                {
                    activityWindowsByDatasetListParametersValue["orderBy"] = parameters.OrderBy;
                }
                
                if (parameters.Filter != null)
                {
                    activityWindowsByDatasetListParametersValue["filter"] = parameters.Filter;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ActivityWindowListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ActivityWindowListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueValue = responseDoc["value"];
                            if (valueValue != null && valueValue.Type != JTokenType.Null)
                            {
                                ActivityWindowListResponseValue valueInstance = new ActivityWindowListResponseValue();
                                result.ActivityWindowListResponseValue = valueInstance;
                                
                                JToken activityWindowsArray = valueValue["activityWindows"];
                                if (activityWindowsArray != null && activityWindowsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken activityWindowsValue in ((JArray)activityWindowsArray))
                                    {
                                        ActivityWindow activityWindowInstance = new ActivityWindow();
                                        valueInstance.ActivityWindows.Add(activityWindowInstance);
                                        
                                        JToken resourceGroupNameValue = activityWindowsValue["resourceGroupName"];
                                        if (resourceGroupNameValue != null && resourceGroupNameValue.Type != JTokenType.Null)
                                        {
                                            string resourceGroupNameInstance = ((string)resourceGroupNameValue);
                                            activityWindowInstance.ResourceGroupName = resourceGroupNameInstance;
                                        }
                                        
                                        JToken dataFactoryNameValue = activityWindowsValue["dataFactoryName"];
                                        if (dataFactoryNameValue != null && dataFactoryNameValue.Type != JTokenType.Null)
                                        {
                                            string dataFactoryNameInstance = ((string)dataFactoryNameValue);
                                            activityWindowInstance.DataFactoryName = dataFactoryNameInstance;
                                        }
                                        
                                        JToken pipelineNameValue = activityWindowsValue["pipelineName"];
                                        if (pipelineNameValue != null && pipelineNameValue.Type != JTokenType.Null)
                                        {
                                            string pipelineNameInstance = ((string)pipelineNameValue);
                                            activityWindowInstance.PipelineName = pipelineNameInstance;
                                        }
                                        
                                        JToken activityNameValue = activityWindowsValue["activityName"];
                                        if (activityNameValue != null && activityNameValue.Type != JTokenType.Null)
                                        {
                                            string activityNameInstance = ((string)activityNameValue);
                                            activityWindowInstance.ActivityName = activityNameInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue = activityWindowsValue["linkedServiceName"];
                                        if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                            activityWindowInstance.LinkedServiceName = linkedServiceNameInstance;
                                        }
                                        
                                        JToken activityTypeValue = activityWindowsValue["activityType"];
                                        if (activityTypeValue != null && activityTypeValue.Type != JTokenType.Null)
                                        {
                                            string activityTypeInstance = ((string)activityTypeValue);
                                            activityWindowInstance.ActivityType = activityTypeInstance;
                                        }
                                        
                                        JToken runAttemptsValue = activityWindowsValue["runAttempts"];
                                        if (runAttemptsValue != null && runAttemptsValue.Type != JTokenType.Null)
                                        {
                                            int runAttemptsInstance = ((int)runAttemptsValue);
                                            activityWindowInstance.RunAttempts = runAttemptsInstance;
                                        }
                                        
                                        JToken runStartValue = activityWindowsValue["runStart"];
                                        if (runStartValue != null && runStartValue.Type != JTokenType.Null)
                                        {
                                            DateTime runStartInstance = ((DateTime)runStartValue);
                                            activityWindowInstance.RunStart = runStartInstance;
                                        }
                                        
                                        JToken runEndValue = activityWindowsValue["runEnd"];
                                        if (runEndValue != null && runEndValue.Type != JTokenType.Null)
                                        {
                                            DateTime runEndInstance = ((DateTime)runEndValue);
                                            activityWindowInstance.RunEnd = runEndInstance;
                                        }
                                        
                                        JToken durationValue = activityWindowsValue["duration"];
                                        if (durationValue != null && durationValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan durationInstance = TimeSpan.Parse(((string)durationValue), CultureInfo.InvariantCulture);
                                            activityWindowInstance.Duration = durationInstance;
                                        }
                                        
                                        JToken percentCompleteValue = activityWindowsValue["percentComplete"];
                                        if (percentCompleteValue != null && percentCompleteValue.Type != JTokenType.Null)
                                        {
                                            int percentCompleteInstance = ((int)percentCompleteValue);
                                            activityWindowInstance.PercentComplete = percentCompleteInstance;
                                        }
                                        
                                        JToken windowStartValue = activityWindowsValue["windowStart"];
                                        if (windowStartValue != null && windowStartValue.Type != JTokenType.Null)
                                        {
                                            DateTime windowStartInstance = ((DateTime)windowStartValue);
                                            activityWindowInstance.WindowStart = windowStartInstance;
                                        }
                                        
                                        JToken windowEndValue = activityWindowsValue["windowEnd"];
                                        if (windowEndValue != null && windowEndValue.Type != JTokenType.Null)
                                        {
                                            DateTime windowEndInstance = ((DateTime)windowEndValue);
                                            activityWindowInstance.WindowEnd = windowEndInstance;
                                        }
                                        
                                        JToken windowStateValue = activityWindowsValue["windowState"];
                                        if (windowStateValue != null && windowStateValue.Type != JTokenType.Null)
                                        {
                                            string windowStateInstance = ((string)windowStateValue);
                                            activityWindowInstance.WindowState = windowStateInstance;
                                        }
                                        
                                        JToken windowSubstateValue = activityWindowsValue["windowSubstate"];
                                        if (windowSubstateValue != null && windowSubstateValue.Type != JTokenType.Null)
                                        {
                                            string windowSubstateInstance = ((string)windowSubstateValue);
                                            activityWindowInstance.WindowSubstate = windowSubstateInstance;
                                        }
                                        
                                        JToken inputDatasetsArray = activityWindowsValue["inputDatasets"];
                                        if (inputDatasetsArray != null && inputDatasetsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputDatasetsValue in ((JArray)inputDatasetsArray))
                                            {
                                                activityWindowInstance.InputDatasets.Add(((string)inputDatasetsValue));
                                            }
                                        }
                                        
                                        JToken outputDatasetsArray = activityWindowsValue["outputDatasets"];
                                        if (outputDatasetsArray != null && outputDatasetsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputDatasetsValue in ((JArray)outputDatasetsArray))
                                            {
                                                activityWindowInstance.OutputDatasets.Add(((string)outputDatasetsValue));
                                            }
                                        }
                                    }
                                }
                                
                                JToken lastUpdateValue = valueValue["lastUpdate"];
                                if (lastUpdateValue != null && lastUpdateValue.Type != JTokenType.Null)
                                {
                                    string lastUpdateInstance = ((string)lastUpdateValue);
                                    valueInstance.LastUpdate = lastUpdateInstance;
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the first page of activity window instances for a pipeline
        /// with the link to the next page.
        /// </summary>
        /// <param name='parameters'>
        /// Required. Filter parameters for activity windows list.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List activity windows operation response.
        /// </returns>
        public async Task<ActivityWindowListResponse> ListByPipelineAsync(ActivityWindowsByPipelineListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.DataFactoryName == null)
            {
                throw new ArgumentNullException("parameters.DataFactoryName");
            }
            if (parameters.DataFactoryName != null && parameters.DataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("parameters.DataFactoryName");
            }
            if (Regex.IsMatch(parameters.DataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.DataFactoryName");
            }
            if (parameters.PipelineName == null)
            {
                throw new ArgumentNullException("parameters.PipelineName");
            }
            if (parameters.PipelineName != null && parameters.PipelineName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("parameters.PipelineName");
            }
            if (Regex.IsMatch(parameters.PipelineName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.PipelineName");
            }
            if (parameters.ResourceGroupName == null)
            {
                throw new ArgumentNullException("parameters.ResourceGroupName");
            }
            if (parameters.ResourceGroupName != null && parameters.ResourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("parameters.ResourceGroupName");
            }
            if (Regex.IsMatch(parameters.ResourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.ResourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListByPipelineAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(parameters.ResourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(parameters.DataFactoryName);
            url = url + "/pipelines/";
            url = url + Uri.EscapeDataString(parameters.PipelineName);
            url = url + "/activitywindows";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject activityWindowsByPipelineListParametersValue = new JObject();
                requestDoc = activityWindowsByPipelineListParametersValue;
                
                if (parameters.Top != null)
                {
                    activityWindowsByPipelineListParametersValue["top"] = parameters.Top.Value;
                }
                
                if (parameters.RunStart != null)
                {
                    activityWindowsByPipelineListParametersValue["runStart"] = parameters.RunStart.Value;
                }
                
                if (parameters.RunEnd != null)
                {
                    activityWindowsByPipelineListParametersValue["runEnd"] = parameters.RunEnd.Value;
                }
                
                if (parameters.WindowStart != null)
                {
                    activityWindowsByPipelineListParametersValue["windowStart"] = parameters.WindowStart.Value;
                }
                
                if (parameters.WindowEnd != null)
                {
                    activityWindowsByPipelineListParametersValue["windowEnd"] = parameters.WindowEnd.Value;
                }
                
                if (parameters.WindowState != null)
                {
                    activityWindowsByPipelineListParametersValue["windowState"] = parameters.WindowState;
                }
                
                if (parameters.WindowSubstate != null)
                {
                    activityWindowsByPipelineListParametersValue["windowSubstate"] = parameters.WindowSubstate;
                }
                
                if (parameters.OrderBy != null)
                {
                    activityWindowsByPipelineListParametersValue["orderBy"] = parameters.OrderBy;
                }
                
                if (parameters.Filter != null)
                {
                    activityWindowsByPipelineListParametersValue["filter"] = parameters.Filter;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ActivityWindowListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ActivityWindowListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueValue = responseDoc["value"];
                            if (valueValue != null && valueValue.Type != JTokenType.Null)
                            {
                                ActivityWindowListResponseValue valueInstance = new ActivityWindowListResponseValue();
                                result.ActivityWindowListResponseValue = valueInstance;
                                
                                JToken activityWindowsArray = valueValue["activityWindows"];
                                if (activityWindowsArray != null && activityWindowsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken activityWindowsValue in ((JArray)activityWindowsArray))
                                    {
                                        ActivityWindow activityWindowInstance = new ActivityWindow();
                                        valueInstance.ActivityWindows.Add(activityWindowInstance);
                                        
                                        JToken resourceGroupNameValue = activityWindowsValue["resourceGroupName"];
                                        if (resourceGroupNameValue != null && resourceGroupNameValue.Type != JTokenType.Null)
                                        {
                                            string resourceGroupNameInstance = ((string)resourceGroupNameValue);
                                            activityWindowInstance.ResourceGroupName = resourceGroupNameInstance;
                                        }
                                        
                                        JToken dataFactoryNameValue = activityWindowsValue["dataFactoryName"];
                                        if (dataFactoryNameValue != null && dataFactoryNameValue.Type != JTokenType.Null)
                                        {
                                            string dataFactoryNameInstance = ((string)dataFactoryNameValue);
                                            activityWindowInstance.DataFactoryName = dataFactoryNameInstance;
                                        }
                                        
                                        JToken pipelineNameValue = activityWindowsValue["pipelineName"];
                                        if (pipelineNameValue != null && pipelineNameValue.Type != JTokenType.Null)
                                        {
                                            string pipelineNameInstance = ((string)pipelineNameValue);
                                            activityWindowInstance.PipelineName = pipelineNameInstance;
                                        }
                                        
                                        JToken activityNameValue = activityWindowsValue["activityName"];
                                        if (activityNameValue != null && activityNameValue.Type != JTokenType.Null)
                                        {
                                            string activityNameInstance = ((string)activityNameValue);
                                            activityWindowInstance.ActivityName = activityNameInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue = activityWindowsValue["linkedServiceName"];
                                        if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                            activityWindowInstance.LinkedServiceName = linkedServiceNameInstance;
                                        }
                                        
                                        JToken activityTypeValue = activityWindowsValue["activityType"];
                                        if (activityTypeValue != null && activityTypeValue.Type != JTokenType.Null)
                                        {
                                            string activityTypeInstance = ((string)activityTypeValue);
                                            activityWindowInstance.ActivityType = activityTypeInstance;
                                        }
                                        
                                        JToken runAttemptsValue = activityWindowsValue["runAttempts"];
                                        if (runAttemptsValue != null && runAttemptsValue.Type != JTokenType.Null)
                                        {
                                            int runAttemptsInstance = ((int)runAttemptsValue);
                                            activityWindowInstance.RunAttempts = runAttemptsInstance;
                                        }
                                        
                                        JToken runStartValue = activityWindowsValue["runStart"];
                                        if (runStartValue != null && runStartValue.Type != JTokenType.Null)
                                        {
                                            DateTime runStartInstance = ((DateTime)runStartValue);
                                            activityWindowInstance.RunStart = runStartInstance;
                                        }
                                        
                                        JToken runEndValue = activityWindowsValue["runEnd"];
                                        if (runEndValue != null && runEndValue.Type != JTokenType.Null)
                                        {
                                            DateTime runEndInstance = ((DateTime)runEndValue);
                                            activityWindowInstance.RunEnd = runEndInstance;
                                        }
                                        
                                        JToken durationValue = activityWindowsValue["duration"];
                                        if (durationValue != null && durationValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan durationInstance = TimeSpan.Parse(((string)durationValue), CultureInfo.InvariantCulture);
                                            activityWindowInstance.Duration = durationInstance;
                                        }
                                        
                                        JToken percentCompleteValue = activityWindowsValue["percentComplete"];
                                        if (percentCompleteValue != null && percentCompleteValue.Type != JTokenType.Null)
                                        {
                                            int percentCompleteInstance = ((int)percentCompleteValue);
                                            activityWindowInstance.PercentComplete = percentCompleteInstance;
                                        }
                                        
                                        JToken windowStartValue = activityWindowsValue["windowStart"];
                                        if (windowStartValue != null && windowStartValue.Type != JTokenType.Null)
                                        {
                                            DateTime windowStartInstance = ((DateTime)windowStartValue);
                                            activityWindowInstance.WindowStart = windowStartInstance;
                                        }
                                        
                                        JToken windowEndValue = activityWindowsValue["windowEnd"];
                                        if (windowEndValue != null && windowEndValue.Type != JTokenType.Null)
                                        {
                                            DateTime windowEndInstance = ((DateTime)windowEndValue);
                                            activityWindowInstance.WindowEnd = windowEndInstance;
                                        }
                                        
                                        JToken windowStateValue = activityWindowsValue["windowState"];
                                        if (windowStateValue != null && windowStateValue.Type != JTokenType.Null)
                                        {
                                            string windowStateInstance = ((string)windowStateValue);
                                            activityWindowInstance.WindowState = windowStateInstance;
                                        }
                                        
                                        JToken windowSubstateValue = activityWindowsValue["windowSubstate"];
                                        if (windowSubstateValue != null && windowSubstateValue.Type != JTokenType.Null)
                                        {
                                            string windowSubstateInstance = ((string)windowSubstateValue);
                                            activityWindowInstance.WindowSubstate = windowSubstateInstance;
                                        }
                                        
                                        JToken inputDatasetsArray = activityWindowsValue["inputDatasets"];
                                        if (inputDatasetsArray != null && inputDatasetsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputDatasetsValue in ((JArray)inputDatasetsArray))
                                            {
                                                activityWindowInstance.InputDatasets.Add(((string)inputDatasetsValue));
                                            }
                                        }
                                        
                                        JToken outputDatasetsArray = activityWindowsValue["outputDatasets"];
                                        if (outputDatasetsArray != null && outputDatasetsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputDatasetsValue in ((JArray)outputDatasetsArray))
                                            {
                                                activityWindowInstance.OutputDatasets.Add(((string)outputDatasetsValue));
                                            }
                                        }
                                    }
                                }
                                
                                JToken lastUpdateValue = valueValue["lastUpdate"];
                                if (lastUpdateValue != null && lastUpdateValue.Type != JTokenType.Null)
                                {
                                    string lastUpdateInstance = ((string)lastUpdateValue);
                                    valueInstance.LastUpdate = lastUpdateInstance;
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the first page of activity window instances for a pipeline
        /// activity with the link to the next page.
        /// </summary>
        /// <param name='parameters'>
        /// Required. Filter parameters for activity windows list.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List activity windows operation response.
        /// </returns>
        public async Task<ActivityWindowListResponse> ListByPipelineActivityAsync(ActivityWindowsByActivityListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ActivityName == null)
            {
                throw new ArgumentNullException("parameters.ActivityName");
            }
            if (parameters.ActivityName != null && parameters.ActivityName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("parameters.ActivityName");
            }
            if (Regex.IsMatch(parameters.ActivityName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.ActivityName");
            }
            if (parameters.DataFactoryName == null)
            {
                throw new ArgumentNullException("parameters.DataFactoryName");
            }
            if (parameters.DataFactoryName != null && parameters.DataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("parameters.DataFactoryName");
            }
            if (Regex.IsMatch(parameters.DataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.DataFactoryName");
            }
            if (parameters.PipelineName == null)
            {
                throw new ArgumentNullException("parameters.PipelineName");
            }
            if (parameters.PipelineName != null && parameters.PipelineName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("parameters.PipelineName");
            }
            if (Regex.IsMatch(parameters.PipelineName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.PipelineName");
            }
            if (parameters.ResourceGroupName == null)
            {
                throw new ArgumentNullException("parameters.ResourceGroupName");
            }
            if (parameters.ResourceGroupName != null && parameters.ResourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("parameters.ResourceGroupName");
            }
            if (Regex.IsMatch(parameters.ResourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.ResourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListByPipelineActivityAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(parameters.ResourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(parameters.DataFactoryName);
            url = url + "/pipelines/";
            url = url + Uri.EscapeDataString(parameters.PipelineName);
            url = url + "/activities/";
            url = url + Uri.EscapeDataString(parameters.ActivityName);
            url = url + "/activitywindows";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject activityWindowsByActivityListParametersValue = new JObject();
                requestDoc = activityWindowsByActivityListParametersValue;
                
                if (parameters.Top != null)
                {
                    activityWindowsByActivityListParametersValue["top"] = parameters.Top.Value;
                }
                
                if (parameters.RunStart != null)
                {
                    activityWindowsByActivityListParametersValue["runStart"] = parameters.RunStart.Value;
                }
                
                if (parameters.RunEnd != null)
                {
                    activityWindowsByActivityListParametersValue["runEnd"] = parameters.RunEnd.Value;
                }
                
                if (parameters.WindowStart != null)
                {
                    activityWindowsByActivityListParametersValue["windowStart"] = parameters.WindowStart.Value;
                }
                
                if (parameters.WindowEnd != null)
                {
                    activityWindowsByActivityListParametersValue["windowEnd"] = parameters.WindowEnd.Value;
                }
                
                if (parameters.WindowState != null)
                {
                    activityWindowsByActivityListParametersValue["windowState"] = parameters.WindowState;
                }
                
                if (parameters.WindowSubstate != null)
                {
                    activityWindowsByActivityListParametersValue["windowSubstate"] = parameters.WindowSubstate;
                }
                
                if (parameters.OrderBy != null)
                {
                    activityWindowsByActivityListParametersValue["orderBy"] = parameters.OrderBy;
                }
                
                if (parameters.Filter != null)
                {
                    activityWindowsByActivityListParametersValue["filter"] = parameters.Filter;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ActivityWindowListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ActivityWindowListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueValue = responseDoc["value"];
                            if (valueValue != null && valueValue.Type != JTokenType.Null)
                            {
                                ActivityWindowListResponseValue valueInstance = new ActivityWindowListResponseValue();
                                result.ActivityWindowListResponseValue = valueInstance;
                                
                                JToken activityWindowsArray = valueValue["activityWindows"];
                                if (activityWindowsArray != null && activityWindowsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken activityWindowsValue in ((JArray)activityWindowsArray))
                                    {
                                        ActivityWindow activityWindowInstance = new ActivityWindow();
                                        valueInstance.ActivityWindows.Add(activityWindowInstance);
                                        
                                        JToken resourceGroupNameValue = activityWindowsValue["resourceGroupName"];
                                        if (resourceGroupNameValue != null && resourceGroupNameValue.Type != JTokenType.Null)
                                        {
                                            string resourceGroupNameInstance = ((string)resourceGroupNameValue);
                                            activityWindowInstance.ResourceGroupName = resourceGroupNameInstance;
                                        }
                                        
                                        JToken dataFactoryNameValue = activityWindowsValue["dataFactoryName"];
                                        if (dataFactoryNameValue != null && dataFactoryNameValue.Type != JTokenType.Null)
                                        {
                                            string dataFactoryNameInstance = ((string)dataFactoryNameValue);
                                            activityWindowInstance.DataFactoryName = dataFactoryNameInstance;
                                        }
                                        
                                        JToken pipelineNameValue = activityWindowsValue["pipelineName"];
                                        if (pipelineNameValue != null && pipelineNameValue.Type != JTokenType.Null)
                                        {
                                            string pipelineNameInstance = ((string)pipelineNameValue);
                                            activityWindowInstance.PipelineName = pipelineNameInstance;
                                        }
                                        
                                        JToken activityNameValue = activityWindowsValue["activityName"];
                                        if (activityNameValue != null && activityNameValue.Type != JTokenType.Null)
                                        {
                                            string activityNameInstance = ((string)activityNameValue);
                                            activityWindowInstance.ActivityName = activityNameInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue = activityWindowsValue["linkedServiceName"];
                                        if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                            activityWindowInstance.LinkedServiceName = linkedServiceNameInstance;
                                        }
                                        
                                        JToken activityTypeValue = activityWindowsValue["activityType"];
                                        if (activityTypeValue != null && activityTypeValue.Type != JTokenType.Null)
                                        {
                                            string activityTypeInstance = ((string)activityTypeValue);
                                            activityWindowInstance.ActivityType = activityTypeInstance;
                                        }
                                        
                                        JToken runAttemptsValue = activityWindowsValue["runAttempts"];
                                        if (runAttemptsValue != null && runAttemptsValue.Type != JTokenType.Null)
                                        {
                                            int runAttemptsInstance = ((int)runAttemptsValue);
                                            activityWindowInstance.RunAttempts = runAttemptsInstance;
                                        }
                                        
                                        JToken runStartValue = activityWindowsValue["runStart"];
                                        if (runStartValue != null && runStartValue.Type != JTokenType.Null)
                                        {
                                            DateTime runStartInstance = ((DateTime)runStartValue);
                                            activityWindowInstance.RunStart = runStartInstance;
                                        }
                                        
                                        JToken runEndValue = activityWindowsValue["runEnd"];
                                        if (runEndValue != null && runEndValue.Type != JTokenType.Null)
                                        {
                                            DateTime runEndInstance = ((DateTime)runEndValue);
                                            activityWindowInstance.RunEnd = runEndInstance;
                                        }
                                        
                                        JToken durationValue = activityWindowsValue["duration"];
                                        if (durationValue != null && durationValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan durationInstance = TimeSpan.Parse(((string)durationValue), CultureInfo.InvariantCulture);
                                            activityWindowInstance.Duration = durationInstance;
                                        }
                                        
                                        JToken percentCompleteValue = activityWindowsValue["percentComplete"];
                                        if (percentCompleteValue != null && percentCompleteValue.Type != JTokenType.Null)
                                        {
                                            int percentCompleteInstance = ((int)percentCompleteValue);
                                            activityWindowInstance.PercentComplete = percentCompleteInstance;
                                        }
                                        
                                        JToken windowStartValue = activityWindowsValue["windowStart"];
                                        if (windowStartValue != null && windowStartValue.Type != JTokenType.Null)
                                        {
                                            DateTime windowStartInstance = ((DateTime)windowStartValue);
                                            activityWindowInstance.WindowStart = windowStartInstance;
                                        }
                                        
                                        JToken windowEndValue = activityWindowsValue["windowEnd"];
                                        if (windowEndValue != null && windowEndValue.Type != JTokenType.Null)
                                        {
                                            DateTime windowEndInstance = ((DateTime)windowEndValue);
                                            activityWindowInstance.WindowEnd = windowEndInstance;
                                        }
                                        
                                        JToken windowStateValue = activityWindowsValue["windowState"];
                                        if (windowStateValue != null && windowStateValue.Type != JTokenType.Null)
                                        {
                                            string windowStateInstance = ((string)windowStateValue);
                                            activityWindowInstance.WindowState = windowStateInstance;
                                        }
                                        
                                        JToken windowSubstateValue = activityWindowsValue["windowSubstate"];
                                        if (windowSubstateValue != null && windowSubstateValue.Type != JTokenType.Null)
                                        {
                                            string windowSubstateInstance = ((string)windowSubstateValue);
                                            activityWindowInstance.WindowSubstate = windowSubstateInstance;
                                        }
                                        
                                        JToken inputDatasetsArray = activityWindowsValue["inputDatasets"];
                                        if (inputDatasetsArray != null && inputDatasetsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputDatasetsValue in ((JArray)inputDatasetsArray))
                                            {
                                                activityWindowInstance.InputDatasets.Add(((string)inputDatasetsValue));
                                            }
                                        }
                                        
                                        JToken outputDatasetsArray = activityWindowsValue["outputDatasets"];
                                        if (outputDatasetsArray != null && outputDatasetsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputDatasetsValue in ((JArray)outputDatasetsArray))
                                            {
                                                activityWindowInstance.OutputDatasets.Add(((string)outputDatasetsValue));
                                            }
                                        }
                                    }
                                }
                                
                                JToken lastUpdateValue = valueValue["lastUpdate"];
                                if (lastUpdateValue != null && lastUpdateValue.Type != JTokenType.Null)
                                {
                                    string lastUpdateInstance = ((string)lastUpdateValue);
                                    valueInstance.LastUpdate = lastUpdateInstance;
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the next page of activity window instances with the link to
        /// the next page.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The URL to the next page of activity windows.
        /// </param>
        /// <param name='parameters'>
        /// Required. Filter parameters for activity windows list.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List activity windows operation response.
        /// </returns>
        public async Task<ActivityWindowListResponse> ListNextByDataFactoryAsync(string nextLink, ActivityWindowsByDataFactoryListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.DataFactoryName == null)
            {
                throw new ArgumentNullException("parameters.DataFactoryName");
            }
            if (parameters.DataFactoryName != null && parameters.DataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("parameters.DataFactoryName");
            }
            if (Regex.IsMatch(parameters.DataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.DataFactoryName");
            }
            if (parameters.ResourceGroupName == null)
            {
                throw new ArgumentNullException("parameters.ResourceGroupName");
            }
            if (parameters.ResourceGroupName != null && parameters.ResourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("parameters.ResourceGroupName");
            }
            if (Regex.IsMatch(parameters.ResourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.ResourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListNextByDataFactoryAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject activityWindowsByDataFactoryListParametersValue = new JObject();
                requestDoc = activityWindowsByDataFactoryListParametersValue;
                
                if (parameters.Top != null)
                {
                    activityWindowsByDataFactoryListParametersValue["top"] = parameters.Top.Value;
                }
                
                if (parameters.RunStart != null)
                {
                    activityWindowsByDataFactoryListParametersValue["runStart"] = parameters.RunStart.Value;
                }
                
                if (parameters.RunEnd != null)
                {
                    activityWindowsByDataFactoryListParametersValue["runEnd"] = parameters.RunEnd.Value;
                }
                
                if (parameters.WindowStart != null)
                {
                    activityWindowsByDataFactoryListParametersValue["windowStart"] = parameters.WindowStart.Value;
                }
                
                if (parameters.WindowEnd != null)
                {
                    activityWindowsByDataFactoryListParametersValue["windowEnd"] = parameters.WindowEnd.Value;
                }
                
                if (parameters.WindowState != null)
                {
                    activityWindowsByDataFactoryListParametersValue["windowState"] = parameters.WindowState;
                }
                
                if (parameters.WindowSubstate != null)
                {
                    activityWindowsByDataFactoryListParametersValue["windowSubstate"] = parameters.WindowSubstate;
                }
                
                if (parameters.OrderBy != null)
                {
                    activityWindowsByDataFactoryListParametersValue["orderBy"] = parameters.OrderBy;
                }
                
                if (parameters.Filter != null)
                {
                    activityWindowsByDataFactoryListParametersValue["filter"] = parameters.Filter;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ActivityWindowListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ActivityWindowListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueValue = responseDoc["value"];
                            if (valueValue != null && valueValue.Type != JTokenType.Null)
                            {
                                ActivityWindowListResponseValue valueInstance = new ActivityWindowListResponseValue();
                                result.ActivityWindowListResponseValue = valueInstance;
                                
                                JToken activityWindowsArray = valueValue["activityWindows"];
                                if (activityWindowsArray != null && activityWindowsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken activityWindowsValue in ((JArray)activityWindowsArray))
                                    {
                                        ActivityWindow activityWindowInstance = new ActivityWindow();
                                        valueInstance.ActivityWindows.Add(activityWindowInstance);
                                        
                                        JToken resourceGroupNameValue = activityWindowsValue["resourceGroupName"];
                                        if (resourceGroupNameValue != null && resourceGroupNameValue.Type != JTokenType.Null)
                                        {
                                            string resourceGroupNameInstance = ((string)resourceGroupNameValue);
                                            activityWindowInstance.ResourceGroupName = resourceGroupNameInstance;
                                        }
                                        
                                        JToken dataFactoryNameValue = activityWindowsValue["dataFactoryName"];
                                        if (dataFactoryNameValue != null && dataFactoryNameValue.Type != JTokenType.Null)
                                        {
                                            string dataFactoryNameInstance = ((string)dataFactoryNameValue);
                                            activityWindowInstance.DataFactoryName = dataFactoryNameInstance;
                                        }
                                        
                                        JToken pipelineNameValue = activityWindowsValue["pipelineName"];
                                        if (pipelineNameValue != null && pipelineNameValue.Type != JTokenType.Null)
                                        {
                                            string pipelineNameInstance = ((string)pipelineNameValue);
                                            activityWindowInstance.PipelineName = pipelineNameInstance;
                                        }
                                        
                                        JToken activityNameValue = activityWindowsValue["activityName"];
                                        if (activityNameValue != null && activityNameValue.Type != JTokenType.Null)
                                        {
                                            string activityNameInstance = ((string)activityNameValue);
                                            activityWindowInstance.ActivityName = activityNameInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue = activityWindowsValue["linkedServiceName"];
                                        if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                            activityWindowInstance.LinkedServiceName = linkedServiceNameInstance;
                                        }
                                        
                                        JToken activityTypeValue = activityWindowsValue["activityType"];
                                        if (activityTypeValue != null && activityTypeValue.Type != JTokenType.Null)
                                        {
                                            string activityTypeInstance = ((string)activityTypeValue);
                                            activityWindowInstance.ActivityType = activityTypeInstance;
                                        }
                                        
                                        JToken runAttemptsValue = activityWindowsValue["runAttempts"];
                                        if (runAttemptsValue != null && runAttemptsValue.Type != JTokenType.Null)
                                        {
                                            int runAttemptsInstance = ((int)runAttemptsValue);
                                            activityWindowInstance.RunAttempts = runAttemptsInstance;
                                        }
                                        
                                        JToken runStartValue = activityWindowsValue["runStart"];
                                        if (runStartValue != null && runStartValue.Type != JTokenType.Null)
                                        {
                                            DateTime runStartInstance = ((DateTime)runStartValue);
                                            activityWindowInstance.RunStart = runStartInstance;
                                        }
                                        
                                        JToken runEndValue = activityWindowsValue["runEnd"];
                                        if (runEndValue != null && runEndValue.Type != JTokenType.Null)
                                        {
                                            DateTime runEndInstance = ((DateTime)runEndValue);
                                            activityWindowInstance.RunEnd = runEndInstance;
                                        }
                                        
                                        JToken durationValue = activityWindowsValue["duration"];
                                        if (durationValue != null && durationValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan durationInstance = TimeSpan.Parse(((string)durationValue), CultureInfo.InvariantCulture);
                                            activityWindowInstance.Duration = durationInstance;
                                        }
                                        
                                        JToken percentCompleteValue = activityWindowsValue["percentComplete"];
                                        if (percentCompleteValue != null && percentCompleteValue.Type != JTokenType.Null)
                                        {
                                            int percentCompleteInstance = ((int)percentCompleteValue);
                                            activityWindowInstance.PercentComplete = percentCompleteInstance;
                                        }
                                        
                                        JToken windowStartValue = activityWindowsValue["windowStart"];
                                        if (windowStartValue != null && windowStartValue.Type != JTokenType.Null)
                                        {
                                            DateTime windowStartInstance = ((DateTime)windowStartValue);
                                            activityWindowInstance.WindowStart = windowStartInstance;
                                        }
                                        
                                        JToken windowEndValue = activityWindowsValue["windowEnd"];
                                        if (windowEndValue != null && windowEndValue.Type != JTokenType.Null)
                                        {
                                            DateTime windowEndInstance = ((DateTime)windowEndValue);
                                            activityWindowInstance.WindowEnd = windowEndInstance;
                                        }
                                        
                                        JToken windowStateValue = activityWindowsValue["windowState"];
                                        if (windowStateValue != null && windowStateValue.Type != JTokenType.Null)
                                        {
                                            string windowStateInstance = ((string)windowStateValue);
                                            activityWindowInstance.WindowState = windowStateInstance;
                                        }
                                        
                                        JToken windowSubstateValue = activityWindowsValue["windowSubstate"];
                                        if (windowSubstateValue != null && windowSubstateValue.Type != JTokenType.Null)
                                        {
                                            string windowSubstateInstance = ((string)windowSubstateValue);
                                            activityWindowInstance.WindowSubstate = windowSubstateInstance;
                                        }
                                        
                                        JToken inputDatasetsArray = activityWindowsValue["inputDatasets"];
                                        if (inputDatasetsArray != null && inputDatasetsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputDatasetsValue in ((JArray)inputDatasetsArray))
                                            {
                                                activityWindowInstance.InputDatasets.Add(((string)inputDatasetsValue));
                                            }
                                        }
                                        
                                        JToken outputDatasetsArray = activityWindowsValue["outputDatasets"];
                                        if (outputDatasetsArray != null && outputDatasetsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputDatasetsValue in ((JArray)outputDatasetsArray))
                                            {
                                                activityWindowInstance.OutputDatasets.Add(((string)outputDatasetsValue));
                                            }
                                        }
                                    }
                                }
                                
                                JToken lastUpdateValue = valueValue["lastUpdate"];
                                if (lastUpdateValue != null && lastUpdateValue.Type != JTokenType.Null)
                                {
                                    string lastUpdateInstance = ((string)lastUpdateValue);
                                    valueInstance.LastUpdate = lastUpdateInstance;
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the next page of activity window instances with the link to
        /// the next page.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The URL to the next page of activity windows.
        /// </param>
        /// <param name='parameters'>
        /// Required. Filter parameters for activity windows list.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List activity windows operation response.
        /// </returns>
        public async Task<ActivityWindowListResponse> ListNextByDatasetAsync(string nextLink, ActivityWindowsByDatasetListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.DataFactoryName == null)
            {
                throw new ArgumentNullException("parameters.DataFactoryName");
            }
            if (parameters.DataFactoryName != null && parameters.DataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("parameters.DataFactoryName");
            }
            if (Regex.IsMatch(parameters.DataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.DataFactoryName");
            }
            if (parameters.DatasetName == null)
            {
                throw new ArgumentNullException("parameters.DatasetName");
            }
            if (parameters.DatasetName != null && parameters.DatasetName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("parameters.DatasetName");
            }
            if (Regex.IsMatch(parameters.DatasetName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.DatasetName");
            }
            if (parameters.ResourceGroupName == null)
            {
                throw new ArgumentNullException("parameters.ResourceGroupName");
            }
            if (parameters.ResourceGroupName != null && parameters.ResourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("parameters.ResourceGroupName");
            }
            if (Regex.IsMatch(parameters.ResourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.ResourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListNextByDatasetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject activityWindowsByDatasetListParametersValue = new JObject();
                requestDoc = activityWindowsByDatasetListParametersValue;
                
                if (parameters.Top != null)
                {
                    activityWindowsByDatasetListParametersValue["top"] = parameters.Top.Value;
                }
                
                if (parameters.RunStart != null)
                {
                    activityWindowsByDatasetListParametersValue["runStart"] = parameters.RunStart.Value;
                }
                
                if (parameters.RunEnd != null)
                {
                    activityWindowsByDatasetListParametersValue["runEnd"] = parameters.RunEnd.Value;
                }
                
                if (parameters.WindowStart != null)
                {
                    activityWindowsByDatasetListParametersValue["windowStart"] = parameters.WindowStart.Value;
                }
                
                if (parameters.WindowEnd != null)
                {
                    activityWindowsByDatasetListParametersValue["windowEnd"] = parameters.WindowEnd.Value;
                }
                
                if (parameters.WindowState != null)
                {
                    activityWindowsByDatasetListParametersValue["windowState"] = parameters.WindowState;
                }
                
                if (parameters.WindowSubstate != null)
                {
                    activityWindowsByDatasetListParametersValue["windowSubstate"] = parameters.WindowSubstate;
                }
                
                if (parameters.OrderBy != null)
                {
                    activityWindowsByDatasetListParametersValue["orderBy"] = parameters.OrderBy;
                }
                
                if (parameters.Filter != null)
                {
                    activityWindowsByDatasetListParametersValue["filter"] = parameters.Filter;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ActivityWindowListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ActivityWindowListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueValue = responseDoc["value"];
                            if (valueValue != null && valueValue.Type != JTokenType.Null)
                            {
                                ActivityWindowListResponseValue valueInstance = new ActivityWindowListResponseValue();
                                result.ActivityWindowListResponseValue = valueInstance;
                                
                                JToken activityWindowsArray = valueValue["activityWindows"];
                                if (activityWindowsArray != null && activityWindowsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken activityWindowsValue in ((JArray)activityWindowsArray))
                                    {
                                        ActivityWindow activityWindowInstance = new ActivityWindow();
                                        valueInstance.ActivityWindows.Add(activityWindowInstance);
                                        
                                        JToken resourceGroupNameValue = activityWindowsValue["resourceGroupName"];
                                        if (resourceGroupNameValue != null && resourceGroupNameValue.Type != JTokenType.Null)
                                        {
                                            string resourceGroupNameInstance = ((string)resourceGroupNameValue);
                                            activityWindowInstance.ResourceGroupName = resourceGroupNameInstance;
                                        }
                                        
                                        JToken dataFactoryNameValue = activityWindowsValue["dataFactoryName"];
                                        if (dataFactoryNameValue != null && dataFactoryNameValue.Type != JTokenType.Null)
                                        {
                                            string dataFactoryNameInstance = ((string)dataFactoryNameValue);
                                            activityWindowInstance.DataFactoryName = dataFactoryNameInstance;
                                        }
                                        
                                        JToken pipelineNameValue = activityWindowsValue["pipelineName"];
                                        if (pipelineNameValue != null && pipelineNameValue.Type != JTokenType.Null)
                                        {
                                            string pipelineNameInstance = ((string)pipelineNameValue);
                                            activityWindowInstance.PipelineName = pipelineNameInstance;
                                        }
                                        
                                        JToken activityNameValue = activityWindowsValue["activityName"];
                                        if (activityNameValue != null && activityNameValue.Type != JTokenType.Null)
                                        {
                                            string activityNameInstance = ((string)activityNameValue);
                                            activityWindowInstance.ActivityName = activityNameInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue = activityWindowsValue["linkedServiceName"];
                                        if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                            activityWindowInstance.LinkedServiceName = linkedServiceNameInstance;
                                        }
                                        
                                        JToken activityTypeValue = activityWindowsValue["activityType"];
                                        if (activityTypeValue != null && activityTypeValue.Type != JTokenType.Null)
                                        {
                                            string activityTypeInstance = ((string)activityTypeValue);
                                            activityWindowInstance.ActivityType = activityTypeInstance;
                                        }
                                        
                                        JToken runAttemptsValue = activityWindowsValue["runAttempts"];
                                        if (runAttemptsValue != null && runAttemptsValue.Type != JTokenType.Null)
                                        {
                                            int runAttemptsInstance = ((int)runAttemptsValue);
                                            activityWindowInstance.RunAttempts = runAttemptsInstance;
                                        }
                                        
                                        JToken runStartValue = activityWindowsValue["runStart"];
                                        if (runStartValue != null && runStartValue.Type != JTokenType.Null)
                                        {
                                            DateTime runStartInstance = ((DateTime)runStartValue);
                                            activityWindowInstance.RunStart = runStartInstance;
                                        }
                                        
                                        JToken runEndValue = activityWindowsValue["runEnd"];
                                        if (runEndValue != null && runEndValue.Type != JTokenType.Null)
                                        {
                                            DateTime runEndInstance = ((DateTime)runEndValue);
                                            activityWindowInstance.RunEnd = runEndInstance;
                                        }
                                        
                                        JToken durationValue = activityWindowsValue["duration"];
                                        if (durationValue != null && durationValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan durationInstance = TimeSpan.Parse(((string)durationValue), CultureInfo.InvariantCulture);
                                            activityWindowInstance.Duration = durationInstance;
                                        }
                                        
                                        JToken percentCompleteValue = activityWindowsValue["percentComplete"];
                                        if (percentCompleteValue != null && percentCompleteValue.Type != JTokenType.Null)
                                        {
                                            int percentCompleteInstance = ((int)percentCompleteValue);
                                            activityWindowInstance.PercentComplete = percentCompleteInstance;
                                        }
                                        
                                        JToken windowStartValue = activityWindowsValue["windowStart"];
                                        if (windowStartValue != null && windowStartValue.Type != JTokenType.Null)
                                        {
                                            DateTime windowStartInstance = ((DateTime)windowStartValue);
                                            activityWindowInstance.WindowStart = windowStartInstance;
                                        }
                                        
                                        JToken windowEndValue = activityWindowsValue["windowEnd"];
                                        if (windowEndValue != null && windowEndValue.Type != JTokenType.Null)
                                        {
                                            DateTime windowEndInstance = ((DateTime)windowEndValue);
                                            activityWindowInstance.WindowEnd = windowEndInstance;
                                        }
                                        
                                        JToken windowStateValue = activityWindowsValue["windowState"];
                                        if (windowStateValue != null && windowStateValue.Type != JTokenType.Null)
                                        {
                                            string windowStateInstance = ((string)windowStateValue);
                                            activityWindowInstance.WindowState = windowStateInstance;
                                        }
                                        
                                        JToken windowSubstateValue = activityWindowsValue["windowSubstate"];
                                        if (windowSubstateValue != null && windowSubstateValue.Type != JTokenType.Null)
                                        {
                                            string windowSubstateInstance = ((string)windowSubstateValue);
                                            activityWindowInstance.WindowSubstate = windowSubstateInstance;
                                        }
                                        
                                        JToken inputDatasetsArray = activityWindowsValue["inputDatasets"];
                                        if (inputDatasetsArray != null && inputDatasetsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputDatasetsValue in ((JArray)inputDatasetsArray))
                                            {
                                                activityWindowInstance.InputDatasets.Add(((string)inputDatasetsValue));
                                            }
                                        }
                                        
                                        JToken outputDatasetsArray = activityWindowsValue["outputDatasets"];
                                        if (outputDatasetsArray != null && outputDatasetsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputDatasetsValue in ((JArray)outputDatasetsArray))
                                            {
                                                activityWindowInstance.OutputDatasets.Add(((string)outputDatasetsValue));
                                            }
                                        }
                                    }
                                }
                                
                                JToken lastUpdateValue = valueValue["lastUpdate"];
                                if (lastUpdateValue != null && lastUpdateValue.Type != JTokenType.Null)
                                {
                                    string lastUpdateInstance = ((string)lastUpdateValue);
                                    valueInstance.LastUpdate = lastUpdateInstance;
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the next page of activity window instances with the link to
        /// the next page.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The URL to the next page of activity windows.
        /// </param>
        /// <param name='parameters'>
        /// Required. Filter parameters for activity windows list.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List activity windows operation response.
        /// </returns>
        public async Task<ActivityWindowListResponse> ListNextByPipelineAsync(string nextLink, ActivityWindowsByPipelineListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.DataFactoryName == null)
            {
                throw new ArgumentNullException("parameters.DataFactoryName");
            }
            if (parameters.DataFactoryName != null && parameters.DataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("parameters.DataFactoryName");
            }
            if (Regex.IsMatch(parameters.DataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.DataFactoryName");
            }
            if (parameters.PipelineName == null)
            {
                throw new ArgumentNullException("parameters.PipelineName");
            }
            if (parameters.PipelineName != null && parameters.PipelineName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("parameters.PipelineName");
            }
            if (Regex.IsMatch(parameters.PipelineName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.PipelineName");
            }
            if (parameters.ResourceGroupName == null)
            {
                throw new ArgumentNullException("parameters.ResourceGroupName");
            }
            if (parameters.ResourceGroupName != null && parameters.ResourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("parameters.ResourceGroupName");
            }
            if (Regex.IsMatch(parameters.ResourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.ResourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListNextByPipelineAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject activityWindowsByPipelineListParametersValue = new JObject();
                requestDoc = activityWindowsByPipelineListParametersValue;
                
                if (parameters.Top != null)
                {
                    activityWindowsByPipelineListParametersValue["top"] = parameters.Top.Value;
                }
                
                if (parameters.RunStart != null)
                {
                    activityWindowsByPipelineListParametersValue["runStart"] = parameters.RunStart.Value;
                }
                
                if (parameters.RunEnd != null)
                {
                    activityWindowsByPipelineListParametersValue["runEnd"] = parameters.RunEnd.Value;
                }
                
                if (parameters.WindowStart != null)
                {
                    activityWindowsByPipelineListParametersValue["windowStart"] = parameters.WindowStart.Value;
                }
                
                if (parameters.WindowEnd != null)
                {
                    activityWindowsByPipelineListParametersValue["windowEnd"] = parameters.WindowEnd.Value;
                }
                
                if (parameters.WindowState != null)
                {
                    activityWindowsByPipelineListParametersValue["windowState"] = parameters.WindowState;
                }
                
                if (parameters.WindowSubstate != null)
                {
                    activityWindowsByPipelineListParametersValue["windowSubstate"] = parameters.WindowSubstate;
                }
                
                if (parameters.OrderBy != null)
                {
                    activityWindowsByPipelineListParametersValue["orderBy"] = parameters.OrderBy;
                }
                
                if (parameters.Filter != null)
                {
                    activityWindowsByPipelineListParametersValue["filter"] = parameters.Filter;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ActivityWindowListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ActivityWindowListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueValue = responseDoc["value"];
                            if (valueValue != null && valueValue.Type != JTokenType.Null)
                            {
                                ActivityWindowListResponseValue valueInstance = new ActivityWindowListResponseValue();
                                result.ActivityWindowListResponseValue = valueInstance;
                                
                                JToken activityWindowsArray = valueValue["activityWindows"];
                                if (activityWindowsArray != null && activityWindowsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken activityWindowsValue in ((JArray)activityWindowsArray))
                                    {
                                        ActivityWindow activityWindowInstance = new ActivityWindow();
                                        valueInstance.ActivityWindows.Add(activityWindowInstance);
                                        
                                        JToken resourceGroupNameValue = activityWindowsValue["resourceGroupName"];
                                        if (resourceGroupNameValue != null && resourceGroupNameValue.Type != JTokenType.Null)
                                        {
                                            string resourceGroupNameInstance = ((string)resourceGroupNameValue);
                                            activityWindowInstance.ResourceGroupName = resourceGroupNameInstance;
                                        }
                                        
                                        JToken dataFactoryNameValue = activityWindowsValue["dataFactoryName"];
                                        if (dataFactoryNameValue != null && dataFactoryNameValue.Type != JTokenType.Null)
                                        {
                                            string dataFactoryNameInstance = ((string)dataFactoryNameValue);
                                            activityWindowInstance.DataFactoryName = dataFactoryNameInstance;
                                        }
                                        
                                        JToken pipelineNameValue = activityWindowsValue["pipelineName"];
                                        if (pipelineNameValue != null && pipelineNameValue.Type != JTokenType.Null)
                                        {
                                            string pipelineNameInstance = ((string)pipelineNameValue);
                                            activityWindowInstance.PipelineName = pipelineNameInstance;
                                        }
                                        
                                        JToken activityNameValue = activityWindowsValue["activityName"];
                                        if (activityNameValue != null && activityNameValue.Type != JTokenType.Null)
                                        {
                                            string activityNameInstance = ((string)activityNameValue);
                                            activityWindowInstance.ActivityName = activityNameInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue = activityWindowsValue["linkedServiceName"];
                                        if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                            activityWindowInstance.LinkedServiceName = linkedServiceNameInstance;
                                        }
                                        
                                        JToken activityTypeValue = activityWindowsValue["activityType"];
                                        if (activityTypeValue != null && activityTypeValue.Type != JTokenType.Null)
                                        {
                                            string activityTypeInstance = ((string)activityTypeValue);
                                            activityWindowInstance.ActivityType = activityTypeInstance;
                                        }
                                        
                                        JToken runAttemptsValue = activityWindowsValue["runAttempts"];
                                        if (runAttemptsValue != null && runAttemptsValue.Type != JTokenType.Null)
                                        {
                                            int runAttemptsInstance = ((int)runAttemptsValue);
                                            activityWindowInstance.RunAttempts = runAttemptsInstance;
                                        }
                                        
                                        JToken runStartValue = activityWindowsValue["runStart"];
                                        if (runStartValue != null && runStartValue.Type != JTokenType.Null)
                                        {
                                            DateTime runStartInstance = ((DateTime)runStartValue);
                                            activityWindowInstance.RunStart = runStartInstance;
                                        }
                                        
                                        JToken runEndValue = activityWindowsValue["runEnd"];
                                        if (runEndValue != null && runEndValue.Type != JTokenType.Null)
                                        {
                                            DateTime runEndInstance = ((DateTime)runEndValue);
                                            activityWindowInstance.RunEnd = runEndInstance;
                                        }
                                        
                                        JToken durationValue = activityWindowsValue["duration"];
                                        if (durationValue != null && durationValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan durationInstance = TimeSpan.Parse(((string)durationValue), CultureInfo.InvariantCulture);
                                            activityWindowInstance.Duration = durationInstance;
                                        }
                                        
                                        JToken percentCompleteValue = activityWindowsValue["percentComplete"];
                                        if (percentCompleteValue != null && percentCompleteValue.Type != JTokenType.Null)
                                        {
                                            int percentCompleteInstance = ((int)percentCompleteValue);
                                            activityWindowInstance.PercentComplete = percentCompleteInstance;
                                        }
                                        
                                        JToken windowStartValue = activityWindowsValue["windowStart"];
                                        if (windowStartValue != null && windowStartValue.Type != JTokenType.Null)
                                        {
                                            DateTime windowStartInstance = ((DateTime)windowStartValue);
                                            activityWindowInstance.WindowStart = windowStartInstance;
                                        }
                                        
                                        JToken windowEndValue = activityWindowsValue["windowEnd"];
                                        if (windowEndValue != null && windowEndValue.Type != JTokenType.Null)
                                        {
                                            DateTime windowEndInstance = ((DateTime)windowEndValue);
                                            activityWindowInstance.WindowEnd = windowEndInstance;
                                        }
                                        
                                        JToken windowStateValue = activityWindowsValue["windowState"];
                                        if (windowStateValue != null && windowStateValue.Type != JTokenType.Null)
                                        {
                                            string windowStateInstance = ((string)windowStateValue);
                                            activityWindowInstance.WindowState = windowStateInstance;
                                        }
                                        
                                        JToken windowSubstateValue = activityWindowsValue["windowSubstate"];
                                        if (windowSubstateValue != null && windowSubstateValue.Type != JTokenType.Null)
                                        {
                                            string windowSubstateInstance = ((string)windowSubstateValue);
                                            activityWindowInstance.WindowSubstate = windowSubstateInstance;
                                        }
                                        
                                        JToken inputDatasetsArray = activityWindowsValue["inputDatasets"];
                                        if (inputDatasetsArray != null && inputDatasetsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputDatasetsValue in ((JArray)inputDatasetsArray))
                                            {
                                                activityWindowInstance.InputDatasets.Add(((string)inputDatasetsValue));
                                            }
                                        }
                                        
                                        JToken outputDatasetsArray = activityWindowsValue["outputDatasets"];
                                        if (outputDatasetsArray != null && outputDatasetsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputDatasetsValue in ((JArray)outputDatasetsArray))
                                            {
                                                activityWindowInstance.OutputDatasets.Add(((string)outputDatasetsValue));
                                            }
                                        }
                                    }
                                }
                                
                                JToken lastUpdateValue = valueValue["lastUpdate"];
                                if (lastUpdateValue != null && lastUpdateValue.Type != JTokenType.Null)
                                {
                                    string lastUpdateInstance = ((string)lastUpdateValue);
                                    valueInstance.LastUpdate = lastUpdateInstance;
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the next page of activity window instances with the link to
        /// the next page.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The URL to the next page of activity windows.
        /// </param>
        /// <param name='parameters'>
        /// Required. Filter parameters for activity windows list.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List activity windows operation response.
        /// </returns>
        public async Task<ActivityWindowListResponse> ListNextByPipelineActivityAsync(string nextLink, ActivityWindowsByActivityListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ActivityName == null)
            {
                throw new ArgumentNullException("parameters.ActivityName");
            }
            if (parameters.ActivityName != null && parameters.ActivityName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("parameters.ActivityName");
            }
            if (Regex.IsMatch(parameters.ActivityName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.ActivityName");
            }
            if (parameters.DataFactoryName == null)
            {
                throw new ArgumentNullException("parameters.DataFactoryName");
            }
            if (parameters.DataFactoryName != null && parameters.DataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("parameters.DataFactoryName");
            }
            if (Regex.IsMatch(parameters.DataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.DataFactoryName");
            }
            if (parameters.PipelineName == null)
            {
                throw new ArgumentNullException("parameters.PipelineName");
            }
            if (parameters.PipelineName != null && parameters.PipelineName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("parameters.PipelineName");
            }
            if (Regex.IsMatch(parameters.PipelineName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.PipelineName");
            }
            if (parameters.ResourceGroupName == null)
            {
                throw new ArgumentNullException("parameters.ResourceGroupName");
            }
            if (parameters.ResourceGroupName != null && parameters.ResourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("parameters.ResourceGroupName");
            }
            if (Regex.IsMatch(parameters.ResourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.ResourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListNextByPipelineActivityAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject activityWindowsByActivityListParametersValue = new JObject();
                requestDoc = activityWindowsByActivityListParametersValue;
                
                if (parameters.Top != null)
                {
                    activityWindowsByActivityListParametersValue["top"] = parameters.Top.Value;
                }
                
                if (parameters.RunStart != null)
                {
                    activityWindowsByActivityListParametersValue["runStart"] = parameters.RunStart.Value;
                }
                
                if (parameters.RunEnd != null)
                {
                    activityWindowsByActivityListParametersValue["runEnd"] = parameters.RunEnd.Value;
                }
                
                if (parameters.WindowStart != null)
                {
                    activityWindowsByActivityListParametersValue["windowStart"] = parameters.WindowStart.Value;
                }
                
                if (parameters.WindowEnd != null)
                {
                    activityWindowsByActivityListParametersValue["windowEnd"] = parameters.WindowEnd.Value;
                }
                
                if (parameters.WindowState != null)
                {
                    activityWindowsByActivityListParametersValue["windowState"] = parameters.WindowState;
                }
                
                if (parameters.WindowSubstate != null)
                {
                    activityWindowsByActivityListParametersValue["windowSubstate"] = parameters.WindowSubstate;
                }
                
                if (parameters.OrderBy != null)
                {
                    activityWindowsByActivityListParametersValue["orderBy"] = parameters.OrderBy;
                }
                
                if (parameters.Filter != null)
                {
                    activityWindowsByActivityListParametersValue["filter"] = parameters.Filter;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ActivityWindowListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ActivityWindowListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueValue = responseDoc["value"];
                            if (valueValue != null && valueValue.Type != JTokenType.Null)
                            {
                                ActivityWindowListResponseValue valueInstance = new ActivityWindowListResponseValue();
                                result.ActivityWindowListResponseValue = valueInstance;
                                
                                JToken activityWindowsArray = valueValue["activityWindows"];
                                if (activityWindowsArray != null && activityWindowsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken activityWindowsValue in ((JArray)activityWindowsArray))
                                    {
                                        ActivityWindow activityWindowInstance = new ActivityWindow();
                                        valueInstance.ActivityWindows.Add(activityWindowInstance);
                                        
                                        JToken resourceGroupNameValue = activityWindowsValue["resourceGroupName"];
                                        if (resourceGroupNameValue != null && resourceGroupNameValue.Type != JTokenType.Null)
                                        {
                                            string resourceGroupNameInstance = ((string)resourceGroupNameValue);
                                            activityWindowInstance.ResourceGroupName = resourceGroupNameInstance;
                                        }
                                        
                                        JToken dataFactoryNameValue = activityWindowsValue["dataFactoryName"];
                                        if (dataFactoryNameValue != null && dataFactoryNameValue.Type != JTokenType.Null)
                                        {
                                            string dataFactoryNameInstance = ((string)dataFactoryNameValue);
                                            activityWindowInstance.DataFactoryName = dataFactoryNameInstance;
                                        }
                                        
                                        JToken pipelineNameValue = activityWindowsValue["pipelineName"];
                                        if (pipelineNameValue != null && pipelineNameValue.Type != JTokenType.Null)
                                        {
                                            string pipelineNameInstance = ((string)pipelineNameValue);
                                            activityWindowInstance.PipelineName = pipelineNameInstance;
                                        }
                                        
                                        JToken activityNameValue = activityWindowsValue["activityName"];
                                        if (activityNameValue != null && activityNameValue.Type != JTokenType.Null)
                                        {
                                            string activityNameInstance = ((string)activityNameValue);
                                            activityWindowInstance.ActivityName = activityNameInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue = activityWindowsValue["linkedServiceName"];
                                        if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                            activityWindowInstance.LinkedServiceName = linkedServiceNameInstance;
                                        }
                                        
                                        JToken activityTypeValue = activityWindowsValue["activityType"];
                                        if (activityTypeValue != null && activityTypeValue.Type != JTokenType.Null)
                                        {
                                            string activityTypeInstance = ((string)activityTypeValue);
                                            activityWindowInstance.ActivityType = activityTypeInstance;
                                        }
                                        
                                        JToken runAttemptsValue = activityWindowsValue["runAttempts"];
                                        if (runAttemptsValue != null && runAttemptsValue.Type != JTokenType.Null)
                                        {
                                            int runAttemptsInstance = ((int)runAttemptsValue);
                                            activityWindowInstance.RunAttempts = runAttemptsInstance;
                                        }
                                        
                                        JToken runStartValue = activityWindowsValue["runStart"];
                                        if (runStartValue != null && runStartValue.Type != JTokenType.Null)
                                        {
                                            DateTime runStartInstance = ((DateTime)runStartValue);
                                            activityWindowInstance.RunStart = runStartInstance;
                                        }
                                        
                                        JToken runEndValue = activityWindowsValue["runEnd"];
                                        if (runEndValue != null && runEndValue.Type != JTokenType.Null)
                                        {
                                            DateTime runEndInstance = ((DateTime)runEndValue);
                                            activityWindowInstance.RunEnd = runEndInstance;
                                        }
                                        
                                        JToken durationValue = activityWindowsValue["duration"];
                                        if (durationValue != null && durationValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan durationInstance = TimeSpan.Parse(((string)durationValue), CultureInfo.InvariantCulture);
                                            activityWindowInstance.Duration = durationInstance;
                                        }
                                        
                                        JToken percentCompleteValue = activityWindowsValue["percentComplete"];
                                        if (percentCompleteValue != null && percentCompleteValue.Type != JTokenType.Null)
                                        {
                                            int percentCompleteInstance = ((int)percentCompleteValue);
                                            activityWindowInstance.PercentComplete = percentCompleteInstance;
                                        }
                                        
                                        JToken windowStartValue = activityWindowsValue["windowStart"];
                                        if (windowStartValue != null && windowStartValue.Type != JTokenType.Null)
                                        {
                                            DateTime windowStartInstance = ((DateTime)windowStartValue);
                                            activityWindowInstance.WindowStart = windowStartInstance;
                                        }
                                        
                                        JToken windowEndValue = activityWindowsValue["windowEnd"];
                                        if (windowEndValue != null && windowEndValue.Type != JTokenType.Null)
                                        {
                                            DateTime windowEndInstance = ((DateTime)windowEndValue);
                                            activityWindowInstance.WindowEnd = windowEndInstance;
                                        }
                                        
                                        JToken windowStateValue = activityWindowsValue["windowState"];
                                        if (windowStateValue != null && windowStateValue.Type != JTokenType.Null)
                                        {
                                            string windowStateInstance = ((string)windowStateValue);
                                            activityWindowInstance.WindowState = windowStateInstance;
                                        }
                                        
                                        JToken windowSubstateValue = activityWindowsValue["windowSubstate"];
                                        if (windowSubstateValue != null && windowSubstateValue.Type != JTokenType.Null)
                                        {
                                            string windowSubstateInstance = ((string)windowSubstateValue);
                                            activityWindowInstance.WindowSubstate = windowSubstateInstance;
                                        }
                                        
                                        JToken inputDatasetsArray = activityWindowsValue["inputDatasets"];
                                        if (inputDatasetsArray != null && inputDatasetsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken inputDatasetsValue in ((JArray)inputDatasetsArray))
                                            {
                                                activityWindowInstance.InputDatasets.Add(((string)inputDatasetsValue));
                                            }
                                        }
                                        
                                        JToken outputDatasetsArray = activityWindowsValue["outputDatasets"];
                                        if (outputDatasetsArray != null && outputDatasetsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputDatasetsValue in ((JArray)outputDatasetsArray))
                                            {
                                                activityWindowInstance.OutputDatasets.Add(((string)outputDatasetsValue));
                                            }
                                        }
                                    }
                                }
                                
                                JToken lastUpdateValue = valueValue["lastUpdate"];
                                if (lastUpdateValue != null && lastUpdateValue.Type != JTokenType.Null)
                                {
                                    string lastUpdateInstance = ((string)lastUpdateValue);
                                    valueInstance.LastUpdate = lastUpdateInstance;
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
