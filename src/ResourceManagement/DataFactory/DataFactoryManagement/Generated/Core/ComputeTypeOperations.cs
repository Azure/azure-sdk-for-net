// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.DataFactories.Common.Models;
using Microsoft.Azure.Management.DataFactories.Core;
using Microsoft.Azure.Management.DataFactories.Core.Registration.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.DataFactories.Core
{
    /// <summary>
    /// Operations for managing data factory ComputeTypes.
    /// </summary>
    internal partial class ComputeTypeOperations : IServiceOperations<DataFactoryManagementClient>, IComputeTypeOperations
    {
        /// <summary>
        /// Initializes a new instance of the ComputeTypeOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ComputeTypeOperations(DataFactoryManagementClient client)
        {
            this._client = client;
        }
        
        private DataFactoryManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.DataFactories.Core.DataFactoryManagementClient.
        /// </summary>
        public DataFactoryManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Delete a ComputeType instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. The name of the data factory.
        /// </param>
        /// <param name='computeTypeName'>
        /// Required. The name of the computeType.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginDeleteAsync(string resourceGroupName, string dataFactoryName, string computeTypeName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (computeTypeName == null)
            {
                throw new ArgumentNullException("computeTypeName");
            }
            if (computeTypeName != null && computeTypeName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("computeTypeName");
            }
            if (Regex.IsMatch(computeTypeName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("computeTypeName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("computeTypeName", computeTypeName);
                TracingAdapter.Enter(invocationId, this, "BeginDeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/computeTypes/";
            url = url + Uri.EscapeDataString(computeTypeName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create or update a ComputeType.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. The name of the data factory.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a ComputeType
        /// definition.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update ComputeType operation response.
        /// </returns>
        public async Task<ComputeTypeCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string dataFactoryName, ComputeTypeCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ComputeType == null)
            {
                throw new ArgumentNullException("parameters.ComputeType");
            }
            if (parameters.ComputeType.Name == null)
            {
                throw new ArgumentNullException("parameters.ComputeType.Name");
            }
            if (parameters.ComputeType.Name != null && parameters.ComputeType.Name.Length > 260)
            {
                throw new ArgumentOutOfRangeException("parameters.ComputeType.Name");
            }
            if (Regex.IsMatch(parameters.ComputeType.Name, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.ComputeType.Name");
            }
            if (parameters.ComputeType.Properties == null)
            {
                throw new ArgumentNullException("parameters.ComputeType.Properties");
            }
            if (parameters.ComputeType.Properties.Schema == null)
            {
                throw new ArgumentNullException("parameters.ComputeType.Properties.Schema");
            }
            if (parameters.ComputeType.Properties.Scope == null)
            {
                throw new ArgumentNullException("parameters.ComputeType.Properties.Scope");
            }
            if (parameters.ComputeType.Properties.SupportedActivities == null)
            {
                throw new ArgumentNullException("parameters.ComputeType.Properties.SupportedActivities");
            }
            if (parameters.ComputeType.Properties.Transport == null)
            {
                throw new ArgumentNullException("parameters.ComputeType.Properties.Transport");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/computeTypes/";
            url = url + Uri.EscapeDataString(parameters.ComputeType.Name);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject computeTypeCreateOrUpdateParametersValue = new JObject();
                requestDoc = computeTypeCreateOrUpdateParametersValue;
                
                computeTypeCreateOrUpdateParametersValue["name"] = parameters.ComputeType.Name;
                
                JObject propertiesValue = new JObject();
                computeTypeCreateOrUpdateParametersValue["properties"] = propertiesValue;
                
                propertiesValue["scope"] = parameters.ComputeType.Properties.Scope;
                
                JObject transportValue = new JObject();
                propertiesValue["transport"] = transportValue;
                if (parameters.ComputeType.Properties.Transport is ServiceBusReferenceTransport)
                {
                    transportValue["type"] = "ServiceBusReference";
                    ServiceBusReferenceTransport derived = ((ServiceBusReferenceTransport)parameters.ComputeType.Properties.Transport);
                    
                    if (derived.TransportProtocolVersion != null)
                    {
                        transportValue["transportProtocolVersion"] = derived.TransportProtocolVersion;
                    }
                }
                if (parameters.ComputeType.Properties.Transport is ServiceBusTransport)
                {
                    transportValue["type"] = "ServiceBus";
                    ServiceBusTransport derived2 = ((ServiceBusTransport)parameters.ComputeType.Properties.Transport);
                    
                    transportValue["activityRequestQueue"] = derived2.ActivityRequestQueue;
                    
                    transportValue["activityStatusQueue"] = derived2.ActivityStatusQueue;
                    
                    transportValue["serviceBusEndpoint"] = derived2.ServiceBusEndpoint;
                    
                    transportValue["serviceBusSharedAccessKeyName"] = derived2.ServiceBusSharedAccessKeyName;
                    
                    transportValue["serviceBusSharedAccessKey"] = derived2.ServiceBusSharedAccessKey;
                    
                    if (derived2.TransportProtocolVersion != null)
                    {
                        transportValue["transportProtocolVersion"] = derived2.TransportProtocolVersion;
                    }
                }
                
                if (parameters.ComputeType.Properties.SupportedActivities != null)
                {
                    if (parameters.ComputeType.Properties.SupportedActivities is ILazyCollection == false || ((ILazyCollection)parameters.ComputeType.Properties.SupportedActivities).IsInitialized)
                    {
                        JArray supportedActivitiesArray = new JArray();
                        foreach (string supportedActivitiesItem in parameters.ComputeType.Properties.SupportedActivities)
                        {
                            supportedActivitiesArray.Add(supportedActivitiesItem);
                        }
                        propertiesValue["supportedActivities"] = supportedActivitiesArray;
                    }
                }
                
                propertiesValue["schema"] = JObject.Parse(parameters.ComputeType.Properties.Schema);
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeTypeCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ComputeTypeCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ComputeType computeTypeInstance = new ComputeType();
                            result.ComputeType = computeTypeInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                computeTypeInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                ComputeTypeProperties propertiesInstance = new ComputeTypeProperties();
                                computeTypeInstance.Properties = propertiesInstance;
                                
                                JToken scopeValue = propertiesValue2["scope"];
                                if (scopeValue != null && scopeValue.Type != JTokenType.Null)
                                {
                                    string scopeInstance = ((string)scopeValue);
                                    propertiesInstance.Scope = scopeInstance;
                                }
                                
                                JToken transportValue2 = propertiesValue2["transport"];
                                if (transportValue2 != null && transportValue2.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)transportValue2["type"]);
                                    if (typeName == "ServiceBusReference")
                                    {
                                        ServiceBusReferenceTransport serviceBusReferenceTransportInstance = new ServiceBusReferenceTransport();
                                        
                                        JToken transportProtocolVersionValue = transportValue2["transportProtocolVersion"];
                                        if (transportProtocolVersionValue != null && transportProtocolVersionValue.Type != JTokenType.Null)
                                        {
                                            string transportProtocolVersionInstance = ((string)transportProtocolVersionValue);
                                            serviceBusReferenceTransportInstance.TransportProtocolVersion = transportProtocolVersionInstance;
                                        }
                                        propertiesInstance.Transport = serviceBusReferenceTransportInstance;
                                    }
                                    if (typeName == "ServiceBus")
                                    {
                                        ServiceBusTransport serviceBusTransportInstance = new ServiceBusTransport();
                                        
                                        JToken activityRequestQueueValue = transportValue2["activityRequestQueue"];
                                        if (activityRequestQueueValue != null && activityRequestQueueValue.Type != JTokenType.Null)
                                        {
                                            string activityRequestQueueInstance = ((string)activityRequestQueueValue);
                                            serviceBusTransportInstance.ActivityRequestQueue = activityRequestQueueInstance;
                                        }
                                        
                                        JToken activityStatusQueueValue = transportValue2["activityStatusQueue"];
                                        if (activityStatusQueueValue != null && activityStatusQueueValue.Type != JTokenType.Null)
                                        {
                                            string activityStatusQueueInstance = ((string)activityStatusQueueValue);
                                            serviceBusTransportInstance.ActivityStatusQueue = activityStatusQueueInstance;
                                        }
                                        
                                        JToken serviceBusEndpointValue = transportValue2["serviceBusEndpoint"];
                                        if (serviceBusEndpointValue != null && serviceBusEndpointValue.Type != JTokenType.Null)
                                        {
                                            string serviceBusEndpointInstance = ((string)serviceBusEndpointValue);
                                            serviceBusTransportInstance.ServiceBusEndpoint = serviceBusEndpointInstance;
                                        }
                                        
                                        JToken serviceBusSharedAccessKeyNameValue = transportValue2["serviceBusSharedAccessKeyName"];
                                        if (serviceBusSharedAccessKeyNameValue != null && serviceBusSharedAccessKeyNameValue.Type != JTokenType.Null)
                                        {
                                            string serviceBusSharedAccessKeyNameInstance = ((string)serviceBusSharedAccessKeyNameValue);
                                            serviceBusTransportInstance.ServiceBusSharedAccessKeyName = serviceBusSharedAccessKeyNameInstance;
                                        }
                                        
                                        JToken serviceBusSharedAccessKeyValue = transportValue2["serviceBusSharedAccessKey"];
                                        if (serviceBusSharedAccessKeyValue != null && serviceBusSharedAccessKeyValue.Type != JTokenType.Null)
                                        {
                                            string serviceBusSharedAccessKeyInstance = ((string)serviceBusSharedAccessKeyValue);
                                            serviceBusTransportInstance.ServiceBusSharedAccessKey = serviceBusSharedAccessKeyInstance;
                                        }
                                        
                                        JToken transportProtocolVersionValue2 = transportValue2["transportProtocolVersion"];
                                        if (transportProtocolVersionValue2 != null && transportProtocolVersionValue2.Type != JTokenType.Null)
                                        {
                                            string transportProtocolVersionInstance2 = ((string)transportProtocolVersionValue2);
                                            serviceBusTransportInstance.TransportProtocolVersion = transportProtocolVersionInstance2;
                                        }
                                        propertiesInstance.Transport = serviceBusTransportInstance;
                                    }
                                }
                                
                                JToken supportedActivitiesArray2 = propertiesValue2["supportedActivities"];
                                if (supportedActivitiesArray2 != null && supportedActivitiesArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken supportedActivitiesValue in ((JArray)supportedActivitiesArray2))
                                    {
                                        propertiesInstance.SupportedActivities.Add(((string)supportedActivitiesValue));
                                    }
                                }
                                
                                JToken schemaValue = propertiesValue2["schema"];
                                if (schemaValue != null && schemaValue.Type != JTokenType.Null)
                                {
                                    string schemaInstance = schemaValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                    propertiesInstance.Schema = schemaInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create or update a ComputeType.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. The name of the data factory.
        /// </param>
        /// <param name='computeTypeName'>
        /// Required. A ComputeType name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a ComputeType
        /// definition.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update ComputeType operation response.
        /// </returns>
        public async Task<ComputeTypeCreateOrUpdateResponse> CreateOrUpdateWithRawJsonContentAsync(string resourceGroupName, string dataFactoryName, string computeTypeName, ComputeTypeCreateOrUpdateWithRawJsonContentParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (computeTypeName == null)
            {
                throw new ArgumentNullException("computeTypeName");
            }
            if (computeTypeName != null && computeTypeName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("computeTypeName");
            }
            if (Regex.IsMatch(computeTypeName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("computeTypeName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Content == null)
            {
                throw new ArgumentNullException("parameters.Content");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("computeTypeName", computeTypeName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateWithRawJsonContentAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/computeTypes/";
            url = url + Uri.EscapeDataString(computeTypeName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = parameters.Content;
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeTypeCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ComputeTypeCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ComputeType computeTypeInstance = new ComputeType();
                            result.ComputeType = computeTypeInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                computeTypeInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ComputeTypeProperties propertiesInstance = new ComputeTypeProperties();
                                computeTypeInstance.Properties = propertiesInstance;
                                
                                JToken scopeValue = propertiesValue["scope"];
                                if (scopeValue != null && scopeValue.Type != JTokenType.Null)
                                {
                                    string scopeInstance = ((string)scopeValue);
                                    propertiesInstance.Scope = scopeInstance;
                                }
                                
                                JToken transportValue = propertiesValue["transport"];
                                if (transportValue != null && transportValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)transportValue["type"]);
                                    if (typeName == "ServiceBusReference")
                                    {
                                        ServiceBusReferenceTransport serviceBusReferenceTransportInstance = new ServiceBusReferenceTransport();
                                        
                                        JToken transportProtocolVersionValue = transportValue["transportProtocolVersion"];
                                        if (transportProtocolVersionValue != null && transportProtocolVersionValue.Type != JTokenType.Null)
                                        {
                                            string transportProtocolVersionInstance = ((string)transportProtocolVersionValue);
                                            serviceBusReferenceTransportInstance.TransportProtocolVersion = transportProtocolVersionInstance;
                                        }
                                        propertiesInstance.Transport = serviceBusReferenceTransportInstance;
                                    }
                                    if (typeName == "ServiceBus")
                                    {
                                        ServiceBusTransport serviceBusTransportInstance = new ServiceBusTransport();
                                        
                                        JToken activityRequestQueueValue = transportValue["activityRequestQueue"];
                                        if (activityRequestQueueValue != null && activityRequestQueueValue.Type != JTokenType.Null)
                                        {
                                            string activityRequestQueueInstance = ((string)activityRequestQueueValue);
                                            serviceBusTransportInstance.ActivityRequestQueue = activityRequestQueueInstance;
                                        }
                                        
                                        JToken activityStatusQueueValue = transportValue["activityStatusQueue"];
                                        if (activityStatusQueueValue != null && activityStatusQueueValue.Type != JTokenType.Null)
                                        {
                                            string activityStatusQueueInstance = ((string)activityStatusQueueValue);
                                            serviceBusTransportInstance.ActivityStatusQueue = activityStatusQueueInstance;
                                        }
                                        
                                        JToken serviceBusEndpointValue = transportValue["serviceBusEndpoint"];
                                        if (serviceBusEndpointValue != null && serviceBusEndpointValue.Type != JTokenType.Null)
                                        {
                                            string serviceBusEndpointInstance = ((string)serviceBusEndpointValue);
                                            serviceBusTransportInstance.ServiceBusEndpoint = serviceBusEndpointInstance;
                                        }
                                        
                                        JToken serviceBusSharedAccessKeyNameValue = transportValue["serviceBusSharedAccessKeyName"];
                                        if (serviceBusSharedAccessKeyNameValue != null && serviceBusSharedAccessKeyNameValue.Type != JTokenType.Null)
                                        {
                                            string serviceBusSharedAccessKeyNameInstance = ((string)serviceBusSharedAccessKeyNameValue);
                                            serviceBusTransportInstance.ServiceBusSharedAccessKeyName = serviceBusSharedAccessKeyNameInstance;
                                        }
                                        
                                        JToken serviceBusSharedAccessKeyValue = transportValue["serviceBusSharedAccessKey"];
                                        if (serviceBusSharedAccessKeyValue != null && serviceBusSharedAccessKeyValue.Type != JTokenType.Null)
                                        {
                                            string serviceBusSharedAccessKeyInstance = ((string)serviceBusSharedAccessKeyValue);
                                            serviceBusTransportInstance.ServiceBusSharedAccessKey = serviceBusSharedAccessKeyInstance;
                                        }
                                        
                                        JToken transportProtocolVersionValue2 = transportValue["transportProtocolVersion"];
                                        if (transportProtocolVersionValue2 != null && transportProtocolVersionValue2.Type != JTokenType.Null)
                                        {
                                            string transportProtocolVersionInstance2 = ((string)transportProtocolVersionValue2);
                                            serviceBusTransportInstance.TransportProtocolVersion = transportProtocolVersionInstance2;
                                        }
                                        propertiesInstance.Transport = serviceBusTransportInstance;
                                    }
                                }
                                
                                JToken supportedActivitiesArray = propertiesValue["supportedActivities"];
                                if (supportedActivitiesArray != null && supportedActivitiesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken supportedActivitiesValue in ((JArray)supportedActivitiesArray))
                                    {
                                        propertiesInstance.SupportedActivities.Add(((string)supportedActivitiesValue));
                                    }
                                }
                                
                                JToken schemaValue = propertiesValue["schema"];
                                if (schemaValue != null && schemaValue.Type != JTokenType.Null)
                                {
                                    string schemaInstance = schemaValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                    propertiesInstance.Schema = schemaInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete a ComputeType instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. The name of the data factory.
        /// </param>
        /// <param name='computeTypeName'>
        /// Required. The name of the computeType.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> DeleteAsync(string resourceGroupName, string dataFactoryName, string computeTypeName, CancellationToken cancellationToken)
        {
            DataFactoryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("computeTypeName", computeTypeName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.ComputeTypes.BeginDeleteAsync(resourceGroupName, dataFactoryName, computeTypeName, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Gets a ComputeType instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. The name of the data factory.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters specifying how to get a ComputeType definition.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get ComputeType operation response.
        /// </returns>
        public async Task<ComputeTypeGetResponse> GetAsync(string resourceGroupName, string dataFactoryName, ComputeTypeGetParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ComputeTypeName == null)
            {
                throw new ArgumentNullException("parameters.ComputeTypeName");
            }
            if (parameters.ComputeTypeName != null && parameters.ComputeTypeName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("parameters.ComputeTypeName");
            }
            if (Regex.IsMatch(parameters.ComputeTypeName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("parameters.ComputeTypeName");
            }
            if (parameters.RegistrationScope == null)
            {
                throw new ArgumentNullException("parameters.RegistrationScope");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/computeTypes/";
            url = url + Uri.EscapeDataString(parameters.ComputeTypeName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            queryParameters.Add("scope=" + Uri.EscapeDataString(parameters.RegistrationScope));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeTypeGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ComputeTypeGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ComputeType computeTypeInstance = new ComputeType();
                            result.ComputeType = computeTypeInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                computeTypeInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ComputeTypeProperties propertiesInstance = new ComputeTypeProperties();
                                computeTypeInstance.Properties = propertiesInstance;
                                
                                JToken scopeValue = propertiesValue["scope"];
                                if (scopeValue != null && scopeValue.Type != JTokenType.Null)
                                {
                                    string scopeInstance = ((string)scopeValue);
                                    propertiesInstance.Scope = scopeInstance;
                                }
                                
                                JToken transportValue = propertiesValue["transport"];
                                if (transportValue != null && transportValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)transportValue["type"]);
                                    if (typeName == "ServiceBusReference")
                                    {
                                        ServiceBusReferenceTransport serviceBusReferenceTransportInstance = new ServiceBusReferenceTransport();
                                        
                                        JToken transportProtocolVersionValue = transportValue["transportProtocolVersion"];
                                        if (transportProtocolVersionValue != null && transportProtocolVersionValue.Type != JTokenType.Null)
                                        {
                                            string transportProtocolVersionInstance = ((string)transportProtocolVersionValue);
                                            serviceBusReferenceTransportInstance.TransportProtocolVersion = transportProtocolVersionInstance;
                                        }
                                        propertiesInstance.Transport = serviceBusReferenceTransportInstance;
                                    }
                                    if (typeName == "ServiceBus")
                                    {
                                        ServiceBusTransport serviceBusTransportInstance = new ServiceBusTransport();
                                        
                                        JToken activityRequestQueueValue = transportValue["activityRequestQueue"];
                                        if (activityRequestQueueValue != null && activityRequestQueueValue.Type != JTokenType.Null)
                                        {
                                            string activityRequestQueueInstance = ((string)activityRequestQueueValue);
                                            serviceBusTransportInstance.ActivityRequestQueue = activityRequestQueueInstance;
                                        }
                                        
                                        JToken activityStatusQueueValue = transportValue["activityStatusQueue"];
                                        if (activityStatusQueueValue != null && activityStatusQueueValue.Type != JTokenType.Null)
                                        {
                                            string activityStatusQueueInstance = ((string)activityStatusQueueValue);
                                            serviceBusTransportInstance.ActivityStatusQueue = activityStatusQueueInstance;
                                        }
                                        
                                        JToken serviceBusEndpointValue = transportValue["serviceBusEndpoint"];
                                        if (serviceBusEndpointValue != null && serviceBusEndpointValue.Type != JTokenType.Null)
                                        {
                                            string serviceBusEndpointInstance = ((string)serviceBusEndpointValue);
                                            serviceBusTransportInstance.ServiceBusEndpoint = serviceBusEndpointInstance;
                                        }
                                        
                                        JToken serviceBusSharedAccessKeyNameValue = transportValue["serviceBusSharedAccessKeyName"];
                                        if (serviceBusSharedAccessKeyNameValue != null && serviceBusSharedAccessKeyNameValue.Type != JTokenType.Null)
                                        {
                                            string serviceBusSharedAccessKeyNameInstance = ((string)serviceBusSharedAccessKeyNameValue);
                                            serviceBusTransportInstance.ServiceBusSharedAccessKeyName = serviceBusSharedAccessKeyNameInstance;
                                        }
                                        
                                        JToken serviceBusSharedAccessKeyValue = transportValue["serviceBusSharedAccessKey"];
                                        if (serviceBusSharedAccessKeyValue != null && serviceBusSharedAccessKeyValue.Type != JTokenType.Null)
                                        {
                                            string serviceBusSharedAccessKeyInstance = ((string)serviceBusSharedAccessKeyValue);
                                            serviceBusTransportInstance.ServiceBusSharedAccessKey = serviceBusSharedAccessKeyInstance;
                                        }
                                        
                                        JToken transportProtocolVersionValue2 = transportValue["transportProtocolVersion"];
                                        if (transportProtocolVersionValue2 != null && transportProtocolVersionValue2.Type != JTokenType.Null)
                                        {
                                            string transportProtocolVersionInstance2 = ((string)transportProtocolVersionValue2);
                                            serviceBusTransportInstance.TransportProtocolVersion = transportProtocolVersionInstance2;
                                        }
                                        propertiesInstance.Transport = serviceBusTransportInstance;
                                    }
                                }
                                
                                JToken supportedActivitiesArray = propertiesValue["supportedActivities"];
                                if (supportedActivitiesArray != null && supportedActivitiesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken supportedActivitiesValue in ((JArray)supportedActivitiesArray))
                                    {
                                        propertiesInstance.SupportedActivities.Add(((string)supportedActivitiesValue));
                                    }
                                }
                                
                                JToken schemaValue = propertiesValue["schema"];
                                if (schemaValue != null && schemaValue.Type != JTokenType.Null)
                                {
                                    string schemaInstance = schemaValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                    propertiesInstance.Schema = schemaInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets a ComputeType instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. The name of the data factory.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters specifying how to return a list of ComputeType
        /// definitions for a List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List ComputeType operation response.
        /// </returns>
        public async Task<ComputeTypeListResponse> ListAsync(string resourceGroupName, string dataFactoryName, ComputeTypeListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.RegistrationScope == null)
            {
                throw new ArgumentNullException("parameters.RegistrationScope");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/computeTypes";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (parameters.ComputeTypeName != null)
            {
                queryParameters.Add("name=" + Uri.EscapeDataString(parameters.ComputeTypeName));
            }
            queryParameters.Add("scope=" + Uri.EscapeDataString(parameters.RegistrationScope));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeTypeListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ComputeTypeListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ComputeType computeTypeInstance = new ComputeType();
                                    result.ComputeTypes.Add(computeTypeInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        computeTypeInstance.Name = nameInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        ComputeTypeProperties propertiesInstance = new ComputeTypeProperties();
                                        computeTypeInstance.Properties = propertiesInstance;
                                        
                                        JToken scopeValue = propertiesValue["scope"];
                                        if (scopeValue != null && scopeValue.Type != JTokenType.Null)
                                        {
                                            string scopeInstance = ((string)scopeValue);
                                            propertiesInstance.Scope = scopeInstance;
                                        }
                                        
                                        JToken transportValue = propertiesValue["transport"];
                                        if (transportValue != null && transportValue.Type != JTokenType.Null)
                                        {
                                            string typeName = ((string)transportValue["type"]);
                                            if (typeName == "ServiceBusReference")
                                            {
                                                ServiceBusReferenceTransport serviceBusReferenceTransportInstance = new ServiceBusReferenceTransport();
                                                
                                                JToken transportProtocolVersionValue = transportValue["transportProtocolVersion"];
                                                if (transportProtocolVersionValue != null && transportProtocolVersionValue.Type != JTokenType.Null)
                                                {
                                                    string transportProtocolVersionInstance = ((string)transportProtocolVersionValue);
                                                    serviceBusReferenceTransportInstance.TransportProtocolVersion = transportProtocolVersionInstance;
                                                }
                                                propertiesInstance.Transport = serviceBusReferenceTransportInstance;
                                            }
                                            if (typeName == "ServiceBus")
                                            {
                                                ServiceBusTransport serviceBusTransportInstance = new ServiceBusTransport();
                                                
                                                JToken activityRequestQueueValue = transportValue["activityRequestQueue"];
                                                if (activityRequestQueueValue != null && activityRequestQueueValue.Type != JTokenType.Null)
                                                {
                                                    string activityRequestQueueInstance = ((string)activityRequestQueueValue);
                                                    serviceBusTransportInstance.ActivityRequestQueue = activityRequestQueueInstance;
                                                }
                                                
                                                JToken activityStatusQueueValue = transportValue["activityStatusQueue"];
                                                if (activityStatusQueueValue != null && activityStatusQueueValue.Type != JTokenType.Null)
                                                {
                                                    string activityStatusQueueInstance = ((string)activityStatusQueueValue);
                                                    serviceBusTransportInstance.ActivityStatusQueue = activityStatusQueueInstance;
                                                }
                                                
                                                JToken serviceBusEndpointValue = transportValue["serviceBusEndpoint"];
                                                if (serviceBusEndpointValue != null && serviceBusEndpointValue.Type != JTokenType.Null)
                                                {
                                                    string serviceBusEndpointInstance = ((string)serviceBusEndpointValue);
                                                    serviceBusTransportInstance.ServiceBusEndpoint = serviceBusEndpointInstance;
                                                }
                                                
                                                JToken serviceBusSharedAccessKeyNameValue = transportValue["serviceBusSharedAccessKeyName"];
                                                if (serviceBusSharedAccessKeyNameValue != null && serviceBusSharedAccessKeyNameValue.Type != JTokenType.Null)
                                                {
                                                    string serviceBusSharedAccessKeyNameInstance = ((string)serviceBusSharedAccessKeyNameValue);
                                                    serviceBusTransportInstance.ServiceBusSharedAccessKeyName = serviceBusSharedAccessKeyNameInstance;
                                                }
                                                
                                                JToken serviceBusSharedAccessKeyValue = transportValue["serviceBusSharedAccessKey"];
                                                if (serviceBusSharedAccessKeyValue != null && serviceBusSharedAccessKeyValue.Type != JTokenType.Null)
                                                {
                                                    string serviceBusSharedAccessKeyInstance = ((string)serviceBusSharedAccessKeyValue);
                                                    serviceBusTransportInstance.ServiceBusSharedAccessKey = serviceBusSharedAccessKeyInstance;
                                                }
                                                
                                                JToken transportProtocolVersionValue2 = transportValue["transportProtocolVersion"];
                                                if (transportProtocolVersionValue2 != null && transportProtocolVersionValue2.Type != JTokenType.Null)
                                                {
                                                    string transportProtocolVersionInstance2 = ((string)transportProtocolVersionValue2);
                                                    serviceBusTransportInstance.TransportProtocolVersion = transportProtocolVersionInstance2;
                                                }
                                                propertiesInstance.Transport = serviceBusTransportInstance;
                                            }
                                        }
                                        
                                        JToken supportedActivitiesArray = propertiesValue["supportedActivities"];
                                        if (supportedActivitiesArray != null && supportedActivitiesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken supportedActivitiesValue in ((JArray)supportedActivitiesArray))
                                            {
                                                propertiesInstance.SupportedActivities.Add(((string)supportedActivitiesValue));
                                            }
                                        }
                                        
                                        JToken schemaValue = propertiesValue["schema"];
                                        if (schemaValue != null && schemaValue.Type != JTokenType.Null)
                                        {
                                            string schemaInstance = schemaValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                            propertiesInstance.Schema = schemaInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the next page of ComputeType instances with the link to the
        /// next page.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The url to the next ComputeTypes page.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List ComputeType operation response.
        /// </returns>
        public async Task<ComputeTypeListResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ComputeTypeListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ComputeTypeListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ComputeType computeTypeInstance = new ComputeType();
                                    result.ComputeTypes.Add(computeTypeInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        computeTypeInstance.Name = nameInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        ComputeTypeProperties propertiesInstance = new ComputeTypeProperties();
                                        computeTypeInstance.Properties = propertiesInstance;
                                        
                                        JToken scopeValue = propertiesValue["scope"];
                                        if (scopeValue != null && scopeValue.Type != JTokenType.Null)
                                        {
                                            string scopeInstance = ((string)scopeValue);
                                            propertiesInstance.Scope = scopeInstance;
                                        }
                                        
                                        JToken transportValue = propertiesValue["transport"];
                                        if (transportValue != null && transportValue.Type != JTokenType.Null)
                                        {
                                            string typeName = ((string)transportValue["type"]);
                                            if (typeName == "ServiceBusReference")
                                            {
                                                ServiceBusReferenceTransport serviceBusReferenceTransportInstance = new ServiceBusReferenceTransport();
                                                
                                                JToken transportProtocolVersionValue = transportValue["transportProtocolVersion"];
                                                if (transportProtocolVersionValue != null && transportProtocolVersionValue.Type != JTokenType.Null)
                                                {
                                                    string transportProtocolVersionInstance = ((string)transportProtocolVersionValue);
                                                    serviceBusReferenceTransportInstance.TransportProtocolVersion = transportProtocolVersionInstance;
                                                }
                                                propertiesInstance.Transport = serviceBusReferenceTransportInstance;
                                            }
                                            if (typeName == "ServiceBus")
                                            {
                                                ServiceBusTransport serviceBusTransportInstance = new ServiceBusTransport();
                                                
                                                JToken activityRequestQueueValue = transportValue["activityRequestQueue"];
                                                if (activityRequestQueueValue != null && activityRequestQueueValue.Type != JTokenType.Null)
                                                {
                                                    string activityRequestQueueInstance = ((string)activityRequestQueueValue);
                                                    serviceBusTransportInstance.ActivityRequestQueue = activityRequestQueueInstance;
                                                }
                                                
                                                JToken activityStatusQueueValue = transportValue["activityStatusQueue"];
                                                if (activityStatusQueueValue != null && activityStatusQueueValue.Type != JTokenType.Null)
                                                {
                                                    string activityStatusQueueInstance = ((string)activityStatusQueueValue);
                                                    serviceBusTransportInstance.ActivityStatusQueue = activityStatusQueueInstance;
                                                }
                                                
                                                JToken serviceBusEndpointValue = transportValue["serviceBusEndpoint"];
                                                if (serviceBusEndpointValue != null && serviceBusEndpointValue.Type != JTokenType.Null)
                                                {
                                                    string serviceBusEndpointInstance = ((string)serviceBusEndpointValue);
                                                    serviceBusTransportInstance.ServiceBusEndpoint = serviceBusEndpointInstance;
                                                }
                                                
                                                JToken serviceBusSharedAccessKeyNameValue = transportValue["serviceBusSharedAccessKeyName"];
                                                if (serviceBusSharedAccessKeyNameValue != null && serviceBusSharedAccessKeyNameValue.Type != JTokenType.Null)
                                                {
                                                    string serviceBusSharedAccessKeyNameInstance = ((string)serviceBusSharedAccessKeyNameValue);
                                                    serviceBusTransportInstance.ServiceBusSharedAccessKeyName = serviceBusSharedAccessKeyNameInstance;
                                                }
                                                
                                                JToken serviceBusSharedAccessKeyValue = transportValue["serviceBusSharedAccessKey"];
                                                if (serviceBusSharedAccessKeyValue != null && serviceBusSharedAccessKeyValue.Type != JTokenType.Null)
                                                {
                                                    string serviceBusSharedAccessKeyInstance = ((string)serviceBusSharedAccessKeyValue);
                                                    serviceBusTransportInstance.ServiceBusSharedAccessKey = serviceBusSharedAccessKeyInstance;
                                                }
                                                
                                                JToken transportProtocolVersionValue2 = transportValue["transportProtocolVersion"];
                                                if (transportProtocolVersionValue2 != null && transportProtocolVersionValue2.Type != JTokenType.Null)
                                                {
                                                    string transportProtocolVersionInstance2 = ((string)transportProtocolVersionValue2);
                                                    serviceBusTransportInstance.TransportProtocolVersion = transportProtocolVersionInstance2;
                                                }
                                                propertiesInstance.Transport = serviceBusTransportInstance;
                                            }
                                        }
                                        
                                        JToken supportedActivitiesArray = propertiesValue["supportedActivities"];
                                        if (supportedActivitiesArray != null && supportedActivitiesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken supportedActivitiesValue in ((JArray)supportedActivitiesArray))
                                            {
                                                propertiesInstance.SupportedActivities.Add(((string)supportedActivitiesValue));
                                            }
                                        }
                                        
                                        JToken schemaValue = propertiesValue["schema"];
                                        if (schemaValue != null && schemaValue.Type != JTokenType.Null)
                                        {
                                            string schemaInstance = schemaValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                            propertiesInstance.Schema = schemaInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
