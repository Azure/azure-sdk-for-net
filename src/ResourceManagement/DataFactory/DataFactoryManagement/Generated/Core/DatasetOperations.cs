// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.DataFactories.Common.Models;
using Microsoft.Azure.Management.DataFactories.Core;
using Microsoft.Azure.Management.DataFactories.Core.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.DataFactories.Core
{
    /// <summary>
    /// Operations for managing datasets.
    /// </summary>
    internal partial class DatasetOperations : IServiceOperations<DataFactoryManagementClient>, IDatasetOperations
    {
        /// <summary>
        /// Initializes a new instance of the DatasetOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal DatasetOperations(DataFactoryManagementClient client)
        {
            this._client = client;
        }
        
        private DataFactoryManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.DataFactories.Core.DataFactoryManagementClient.
        /// </summary>
        public DataFactoryManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Create a new dataset instance or update an existing instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a dataset.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The CreateOrUpdate dataset operation response.
        /// </returns>
        public async Task<DatasetCreateOrUpdateResponse> BeginCreateOrUpdateAsync(string resourceGroupName, string dataFactoryName, DatasetCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Dataset != null)
            {
                if (parameters.Dataset.Name == null)
                {
                    throw new ArgumentNullException("parameters.Dataset.Name");
                }
                if (parameters.Dataset.Name != null && parameters.Dataset.Name.Length > 260)
                {
                    throw new ArgumentOutOfRangeException("parameters.Dataset.Name");
                }
                if (Regex.IsMatch(parameters.Dataset.Name, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
                {
                    throw new ArgumentOutOfRangeException("parameters.Dataset.Name");
                }
                if (parameters.Dataset.Properties == null)
                {
                    throw new ArgumentNullException("parameters.Dataset.Properties");
                }
                if (parameters.Dataset.Properties.Availability == null)
                {
                    throw new ArgumentNullException("parameters.Dataset.Properties.Availability");
                }
                if (parameters.Dataset.Properties.Availability.Frequency == null)
                {
                    throw new ArgumentNullException("parameters.Dataset.Properties.Availability.Frequency");
                }
                if (parameters.Dataset.Properties.LinkedServiceName == null)
                {
                    throw new ArgumentNullException("parameters.Dataset.Properties.LinkedServiceName");
                }
                if (parameters.Dataset.Properties.Type == null)
                {
                    throw new ArgumentNullException("parameters.Dataset.Properties.Type");
                }
                if (parameters.Dataset.Properties.TypeProperties == null)
                {
                    throw new ArgumentNullException("parameters.Dataset.Properties.TypeProperties");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/datasets/";
            if (parameters.Dataset != null && parameters.Dataset.Name != null)
            {
                url = url + Uri.EscapeDataString(parameters.Dataset.Name);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject datasetCreateOrUpdateParametersValue = new JObject();
                requestDoc = datasetCreateOrUpdateParametersValue;
                
                if (parameters.Dataset != null)
                {
                    datasetCreateOrUpdateParametersValue["name"] = parameters.Dataset.Name;
                    
                    JObject propertiesValue = new JObject();
                    datasetCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    propertiesValue["type"] = parameters.Dataset.Properties.Type;
                    
                    propertiesValue["typeProperties"] = JObject.Parse(parameters.Dataset.Properties.TypeProperties);
                    
                    propertiesValue["linkedServiceName"] = parameters.Dataset.Properties.LinkedServiceName;
                    
                    if (parameters.Dataset.Properties.Description != null)
                    {
                        propertiesValue["description"] = parameters.Dataset.Properties.Description;
                    }
                    
                    if (parameters.Dataset.Properties.Structure != null)
                    {
                        if (parameters.Dataset.Properties.Structure is ILazyCollection == false || ((ILazyCollection)parameters.Dataset.Properties.Structure).IsInitialized)
                        {
                            JArray structureArray = new JArray();
                            foreach (DataElement structureItem in parameters.Dataset.Properties.Structure)
                            {
                                JObject dataElementValue = new JObject();
                                structureArray.Add(dataElementValue);
                                
                                if (structureItem.Name != null)
                                {
                                    dataElementValue["name"] = structureItem.Name;
                                }
                                
                                if (structureItem.Description != null)
                                {
                                    dataElementValue["description"] = structureItem.Description;
                                }
                                
                                if (structureItem.Type != null)
                                {
                                    dataElementValue["type"] = structureItem.Type;
                                }
                                
                                if (structureItem.Culture != null)
                                {
                                    dataElementValue["culture"] = structureItem.Culture;
                                }
                                
                                if (structureItem.Format != null)
                                {
                                    dataElementValue["format"] = structureItem.Format;
                                }
                            }
                            propertiesValue["structure"] = structureArray;
                        }
                    }
                    
                    JObject availabilityValue = new JObject();
                    propertiesValue["availability"] = availabilityValue;
                    
                    availabilityValue["frequency"] = parameters.Dataset.Properties.Availability.Frequency;
                    
                    availabilityValue["interval"] = parameters.Dataset.Properties.Availability.Interval;
                    
                    if (parameters.Dataset.Properties.Availability.AnchorDateTime != null)
                    {
                        availabilityValue["anchorDateTime"] = parameters.Dataset.Properties.Availability.AnchorDateTime.Value;
                    }
                    
                    if (parameters.Dataset.Properties.Availability.Offset != null)
                    {
                        availabilityValue["offset"] = parameters.Dataset.Properties.Availability.Offset.Value.ToString();
                    }
                    
                    if (parameters.Dataset.Properties.Availability.Style != null)
                    {
                        availabilityValue["style"] = parameters.Dataset.Properties.Availability.Style;
                    }
                    
                    if (parameters.Dataset.Properties.Policy != null)
                    {
                        JObject policyValue = new JObject();
                        propertiesValue["policy"] = policyValue;
                        
                        if (parameters.Dataset.Properties.Policy.Validation != null)
                        {
                            JObject validationValue = new JObject();
                            policyValue["validation"] = validationValue;
                            
                            if (parameters.Dataset.Properties.Policy.Validation.MinimumRows != null)
                            {
                                validationValue["minimumRows"] = parameters.Dataset.Properties.Policy.Validation.MinimumRows.Value;
                            }
                            
                            if (parameters.Dataset.Properties.Policy.Validation.MinimumSizeMB != null)
                            {
                                validationValue["minimumSizeMB"] = parameters.Dataset.Properties.Policy.Validation.MinimumSizeMB.Value;
                            }
                            
                            if (parameters.Dataset.Properties.Policy.Validation.ValidationPriorityOrder != null)
                            {
                                validationValue["validationPriorityOrder"] = parameters.Dataset.Properties.Policy.Validation.ValidationPriorityOrder;
                            }
                        }
                        
                        if (parameters.Dataset.Properties.Policy.Latency != null)
                        {
                            JObject latencyValue = new JObject();
                            policyValue["latency"] = latencyValue;
                            
                            if (parameters.Dataset.Properties.Policy.Latency.LatencyLength != null)
                            {
                                latencyValue["latencyLength"] = parameters.Dataset.Properties.Policy.Latency.LatencyLength.Value.ToString();
                            }
                        }
                        
                        if (parameters.Dataset.Properties.Policy.ExternalData != null)
                        {
                            JObject externalDataValue = new JObject();
                            policyValue["externalData"] = externalDataValue;
                            
                            if (parameters.Dataset.Properties.Policy.ExternalData.DataDelay != null)
                            {
                                externalDataValue["dataDelay"] = parameters.Dataset.Properties.Policy.ExternalData.DataDelay.Value.ToString();
                            }
                            
                            if (parameters.Dataset.Properties.Policy.ExternalData.RetryInterval != null)
                            {
                                externalDataValue["retryInterval"] = parameters.Dataset.Properties.Policy.ExternalData.RetryInterval.Value.ToString();
                            }
                            
                            if (parameters.Dataset.Properties.Policy.ExternalData.RetryTimeout != null)
                            {
                                externalDataValue["retryTimeout"] = parameters.Dataset.Properties.Policy.ExternalData.RetryTimeout.Value.ToString();
                            }
                            
                            if (parameters.Dataset.Properties.Policy.ExternalData.MaximumRetry != null)
                            {
                                externalDataValue["maximumRetry"] = parameters.Dataset.Properties.Policy.ExternalData.MaximumRetry.Value;
                            }
                        }
                    }
                    
                    if (parameters.Dataset.Properties.External != null)
                    {
                        propertiesValue["external"] = parameters.Dataset.Properties.External.Value;
                    }
                    
                    if (parameters.Dataset.Properties.CreateTime != null)
                    {
                        propertiesValue["createTime"] = parameters.Dataset.Properties.CreateTime.Value;
                    }
                    
                    if (parameters.Dataset.Properties.ProvisioningState != null)
                    {
                        propertiesValue["provisioningState"] = parameters.Dataset.Properties.ProvisioningState;
                    }
                    
                    if (parameters.Dataset.Properties.ErrorMessage != null)
                    {
                        propertiesValue["errorMessage"] = parameters.Dataset.Properties.ErrorMessage;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DatasetCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DatasetCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Dataset datasetInstance = new Dataset();
                            result.Dataset = datasetInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                datasetInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                DatasetProperties propertiesInstance = new DatasetProperties();
                                datasetInstance.Properties = propertiesInstance;
                                
                                JToken typeValue = propertiesValue2["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    propertiesInstance.Type = typeInstance;
                                }
                                
                                JToken typePropertiesValue = propertiesValue2["typeProperties"];
                                if (typePropertiesValue != null && typePropertiesValue.Type != JTokenType.Null)
                                {
                                    string typePropertiesInstance = typePropertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                    propertiesInstance.TypeProperties = typePropertiesInstance;
                                }
                                
                                JToken linkedServiceNameValue = propertiesValue2["linkedServiceName"];
                                if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                {
                                    string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                    propertiesInstance.LinkedServiceName = linkedServiceNameInstance;
                                }
                                
                                JToken descriptionValue = propertiesValue2["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                                
                                JToken structureArray2 = propertiesValue2["structure"];
                                if (structureArray2 != null && structureArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken structureValue in ((JArray)structureArray2))
                                    {
                                        DataElement dataElementInstance = new DataElement();
                                        propertiesInstance.Structure.Add(dataElementInstance);
                                        
                                        JToken nameValue2 = structureValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            dataElementInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken descriptionValue2 = structureValue["description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            dataElementInstance.Description = descriptionInstance2;
                                        }
                                        
                                        JToken typeValue2 = structureValue["type"];
                                        if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                        {
                                            string typeInstance2 = ((string)typeValue2);
                                            dataElementInstance.Type = typeInstance2;
                                        }
                                        
                                        JToken cultureValue = structureValue["culture"];
                                        if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                                        {
                                            string cultureInstance = ((string)cultureValue);
                                            dataElementInstance.Culture = cultureInstance;
                                        }
                                        
                                        JToken formatValue = structureValue["format"];
                                        if (formatValue != null && formatValue.Type != JTokenType.Null)
                                        {
                                            string formatInstance = ((string)formatValue);
                                            dataElementInstance.Format = formatInstance;
                                        }
                                    }
                                }
                                
                                JToken availabilityValue2 = propertiesValue2["availability"];
                                if (availabilityValue2 != null && availabilityValue2.Type != JTokenType.Null)
                                {
                                    Availability availabilityInstance = new Availability();
                                    propertiesInstance.Availability = availabilityInstance;
                                    
                                    JToken frequencyValue = availabilityValue2["frequency"];
                                    if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                    {
                                        string frequencyInstance = ((string)frequencyValue);
                                        availabilityInstance.Frequency = frequencyInstance;
                                    }
                                    
                                    JToken intervalValue = availabilityValue2["interval"];
                                    if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                    {
                                        uint intervalInstance = ((uint)intervalValue);
                                        availabilityInstance.Interval = intervalInstance;
                                    }
                                    
                                    JToken anchorDateTimeValue = availabilityValue2["anchorDateTime"];
                                    if (anchorDateTimeValue != null && anchorDateTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime anchorDateTimeInstance = ((DateTime)anchorDateTimeValue);
                                        availabilityInstance.AnchorDateTime = anchorDateTimeInstance;
                                    }
                                    
                                    JToken offsetValue = availabilityValue2["offset"];
                                    if (offsetValue != null && offsetValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan offsetInstance = TimeSpan.Parse(((string)offsetValue), CultureInfo.InvariantCulture);
                                        availabilityInstance.Offset = offsetInstance;
                                    }
                                    
                                    JToken styleValue = availabilityValue2["style"];
                                    if (styleValue != null && styleValue.Type != JTokenType.Null)
                                    {
                                        string styleInstance = ((string)styleValue);
                                        availabilityInstance.Style = styleInstance;
                                    }
                                }
                                
                                JToken policyValue2 = propertiesValue2["policy"];
                                if (policyValue2 != null && policyValue2.Type != JTokenType.Null)
                                {
                                    Policy policyInstance = new Policy();
                                    propertiesInstance.Policy = policyInstance;
                                    
                                    JToken validationValue2 = policyValue2["validation"];
                                    if (validationValue2 != null && validationValue2.Type != JTokenType.Null)
                                    {
                                        ValidationPolicy validationInstance = new ValidationPolicy();
                                        policyInstance.Validation = validationInstance;
                                        
                                        JToken minimumRowsValue = validationValue2["minimumRows"];
                                        if (minimumRowsValue != null && minimumRowsValue.Type != JTokenType.Null)
                                        {
                                            long minimumRowsInstance = ((long)minimumRowsValue);
                                            validationInstance.MinimumRows = minimumRowsInstance;
                                        }
                                        
                                        JToken minimumSizeMBValue = validationValue2["minimumSizeMB"];
                                        if (minimumSizeMBValue != null && minimumSizeMBValue.Type != JTokenType.Null)
                                        {
                                            double minimumSizeMBInstance = ((double)minimumSizeMBValue);
                                            validationInstance.MinimumSizeMB = minimumSizeMBInstance;
                                        }
                                        
                                        JToken validationPriorityOrderValue = validationValue2["validationPriorityOrder"];
                                        if (validationPriorityOrderValue != null && validationPriorityOrderValue.Type != JTokenType.Null)
                                        {
                                            string validationPriorityOrderInstance = ((string)validationPriorityOrderValue);
                                            validationInstance.ValidationPriorityOrder = validationPriorityOrderInstance;
                                        }
                                    }
                                    
                                    JToken latencyValue2 = policyValue2["latency"];
                                    if (latencyValue2 != null && latencyValue2.Type != JTokenType.Null)
                                    {
                                        LatencyPolicy latencyInstance = new LatencyPolicy();
                                        policyInstance.Latency = latencyInstance;
                                        
                                        JToken latencyLengthValue = latencyValue2["latencyLength"];
                                        if (latencyLengthValue != null && latencyLengthValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan latencyLengthInstance = TimeSpan.Parse(((string)latencyLengthValue), CultureInfo.InvariantCulture);
                                            latencyInstance.LatencyLength = latencyLengthInstance;
                                        }
                                    }
                                    
                                    JToken externalDataValue2 = policyValue2["externalData"];
                                    if (externalDataValue2 != null && externalDataValue2.Type != JTokenType.Null)
                                    {
                                        ExternalDataPolicy externalDataInstance = new ExternalDataPolicy();
                                        policyInstance.ExternalData = externalDataInstance;
                                        
                                        JToken dataDelayValue = externalDataValue2["dataDelay"];
                                        if (dataDelayValue != null && dataDelayValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan dataDelayInstance = TimeSpan.Parse(((string)dataDelayValue), CultureInfo.InvariantCulture);
                                            externalDataInstance.DataDelay = dataDelayInstance;
                                        }
                                        
                                        JToken retryIntervalValue = externalDataValue2["retryInterval"];
                                        if (retryIntervalValue != null && retryIntervalValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan retryIntervalInstance = TimeSpan.Parse(((string)retryIntervalValue), CultureInfo.InvariantCulture);
                                            externalDataInstance.RetryInterval = retryIntervalInstance;
                                        }
                                        
                                        JToken retryTimeoutValue = externalDataValue2["retryTimeout"];
                                        if (retryTimeoutValue != null && retryTimeoutValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan retryTimeoutInstance = TimeSpan.Parse(((string)retryTimeoutValue), CultureInfo.InvariantCulture);
                                            externalDataInstance.RetryTimeout = retryTimeoutInstance;
                                        }
                                        
                                        JToken maximumRetryValue = externalDataValue2["maximumRetry"];
                                        if (maximumRetryValue != null && maximumRetryValue.Type != JTokenType.Null)
                                        {
                                            int maximumRetryInstance = ((int)maximumRetryValue);
                                            externalDataInstance.MaximumRetry = maximumRetryInstance;
                                        }
                                    }
                                }
                                
                                JToken externalValue = propertiesValue2["external"];
                                if (externalValue != null && externalValue.Type != JTokenType.Null)
                                {
                                    bool externalInstance = ((bool)externalValue);
                                    propertiesInstance.External = externalInstance;
                                }
                                
                                JToken createTimeValue = propertiesValue2["createTime"];
                                if (createTimeValue != null && createTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime createTimeInstance = ((DateTime)createTimeValue);
                                    propertiesInstance.CreateTime = createTimeInstance;
                                }
                                
                                JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken errorMessageValue = propertiesValue2["errorMessage"];
                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance = ((string)errorMessageValue);
                                    propertiesInstance.ErrorMessage = errorMessageInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    result.Location = url;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create a new dataset instance or update an existing instance with
        /// raw json content.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='datasetName'>
        /// Required. A unique dataset instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a dataset.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The CreateOrUpdate dataset operation response.
        /// </returns>
        public async Task<DatasetCreateOrUpdateResponse> BeginCreateOrUpdateWithRawJsonContentAsync(string resourceGroupName, string dataFactoryName, string datasetName, DatasetCreateOrUpdateWithRawJsonContentParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (datasetName == null)
            {
                throw new ArgumentNullException("datasetName");
            }
            if (datasetName != null && datasetName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("datasetName");
            }
            if (Regex.IsMatch(datasetName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("datasetName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Content == null)
            {
                throw new ArgumentNullException("parameters.Content");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("datasetName", datasetName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateOrUpdateWithRawJsonContentAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/datasets/";
            url = url + Uri.EscapeDataString(datasetName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = parameters.Content;
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DatasetCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DatasetCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Dataset datasetInstance = new Dataset();
                            result.Dataset = datasetInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                datasetInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                DatasetProperties propertiesInstance = new DatasetProperties();
                                datasetInstance.Properties = propertiesInstance;
                                
                                JToken typeValue = propertiesValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    propertiesInstance.Type = typeInstance;
                                }
                                
                                JToken typePropertiesValue = propertiesValue["typeProperties"];
                                if (typePropertiesValue != null && typePropertiesValue.Type != JTokenType.Null)
                                {
                                    string typePropertiesInstance = typePropertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                    propertiesInstance.TypeProperties = typePropertiesInstance;
                                }
                                
                                JToken linkedServiceNameValue = propertiesValue["linkedServiceName"];
                                if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                {
                                    string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                    propertiesInstance.LinkedServiceName = linkedServiceNameInstance;
                                }
                                
                                JToken descriptionValue = propertiesValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                                
                                JToken structureArray = propertiesValue["structure"];
                                if (structureArray != null && structureArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken structureValue in ((JArray)structureArray))
                                    {
                                        DataElement dataElementInstance = new DataElement();
                                        propertiesInstance.Structure.Add(dataElementInstance);
                                        
                                        JToken nameValue2 = structureValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            dataElementInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken descriptionValue2 = structureValue["description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            dataElementInstance.Description = descriptionInstance2;
                                        }
                                        
                                        JToken typeValue2 = structureValue["type"];
                                        if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                        {
                                            string typeInstance2 = ((string)typeValue2);
                                            dataElementInstance.Type = typeInstance2;
                                        }
                                        
                                        JToken cultureValue = structureValue["culture"];
                                        if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                                        {
                                            string cultureInstance = ((string)cultureValue);
                                            dataElementInstance.Culture = cultureInstance;
                                        }
                                        
                                        JToken formatValue = structureValue["format"];
                                        if (formatValue != null && formatValue.Type != JTokenType.Null)
                                        {
                                            string formatInstance = ((string)formatValue);
                                            dataElementInstance.Format = formatInstance;
                                        }
                                    }
                                }
                                
                                JToken availabilityValue = propertiesValue["availability"];
                                if (availabilityValue != null && availabilityValue.Type != JTokenType.Null)
                                {
                                    Availability availabilityInstance = new Availability();
                                    propertiesInstance.Availability = availabilityInstance;
                                    
                                    JToken frequencyValue = availabilityValue["frequency"];
                                    if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                    {
                                        string frequencyInstance = ((string)frequencyValue);
                                        availabilityInstance.Frequency = frequencyInstance;
                                    }
                                    
                                    JToken intervalValue = availabilityValue["interval"];
                                    if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                    {
                                        uint intervalInstance = ((uint)intervalValue);
                                        availabilityInstance.Interval = intervalInstance;
                                    }
                                    
                                    JToken anchorDateTimeValue = availabilityValue["anchorDateTime"];
                                    if (anchorDateTimeValue != null && anchorDateTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime anchorDateTimeInstance = ((DateTime)anchorDateTimeValue);
                                        availabilityInstance.AnchorDateTime = anchorDateTimeInstance;
                                    }
                                    
                                    JToken offsetValue = availabilityValue["offset"];
                                    if (offsetValue != null && offsetValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan offsetInstance = TimeSpan.Parse(((string)offsetValue), CultureInfo.InvariantCulture);
                                        availabilityInstance.Offset = offsetInstance;
                                    }
                                    
                                    JToken styleValue = availabilityValue["style"];
                                    if (styleValue != null && styleValue.Type != JTokenType.Null)
                                    {
                                        string styleInstance = ((string)styleValue);
                                        availabilityInstance.Style = styleInstance;
                                    }
                                }
                                
                                JToken policyValue = propertiesValue["policy"];
                                if (policyValue != null && policyValue.Type != JTokenType.Null)
                                {
                                    Policy policyInstance = new Policy();
                                    propertiesInstance.Policy = policyInstance;
                                    
                                    JToken validationValue = policyValue["validation"];
                                    if (validationValue != null && validationValue.Type != JTokenType.Null)
                                    {
                                        ValidationPolicy validationInstance = new ValidationPolicy();
                                        policyInstance.Validation = validationInstance;
                                        
                                        JToken minimumRowsValue = validationValue["minimumRows"];
                                        if (minimumRowsValue != null && minimumRowsValue.Type != JTokenType.Null)
                                        {
                                            long minimumRowsInstance = ((long)minimumRowsValue);
                                            validationInstance.MinimumRows = minimumRowsInstance;
                                        }
                                        
                                        JToken minimumSizeMBValue = validationValue["minimumSizeMB"];
                                        if (minimumSizeMBValue != null && minimumSizeMBValue.Type != JTokenType.Null)
                                        {
                                            double minimumSizeMBInstance = ((double)minimumSizeMBValue);
                                            validationInstance.MinimumSizeMB = minimumSizeMBInstance;
                                        }
                                        
                                        JToken validationPriorityOrderValue = validationValue["validationPriorityOrder"];
                                        if (validationPriorityOrderValue != null && validationPriorityOrderValue.Type != JTokenType.Null)
                                        {
                                            string validationPriorityOrderInstance = ((string)validationPriorityOrderValue);
                                            validationInstance.ValidationPriorityOrder = validationPriorityOrderInstance;
                                        }
                                    }
                                    
                                    JToken latencyValue = policyValue["latency"];
                                    if (latencyValue != null && latencyValue.Type != JTokenType.Null)
                                    {
                                        LatencyPolicy latencyInstance = new LatencyPolicy();
                                        policyInstance.Latency = latencyInstance;
                                        
                                        JToken latencyLengthValue = latencyValue["latencyLength"];
                                        if (latencyLengthValue != null && latencyLengthValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan latencyLengthInstance = TimeSpan.Parse(((string)latencyLengthValue), CultureInfo.InvariantCulture);
                                            latencyInstance.LatencyLength = latencyLengthInstance;
                                        }
                                    }
                                    
                                    JToken externalDataValue = policyValue["externalData"];
                                    if (externalDataValue != null && externalDataValue.Type != JTokenType.Null)
                                    {
                                        ExternalDataPolicy externalDataInstance = new ExternalDataPolicy();
                                        policyInstance.ExternalData = externalDataInstance;
                                        
                                        JToken dataDelayValue = externalDataValue["dataDelay"];
                                        if (dataDelayValue != null && dataDelayValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan dataDelayInstance = TimeSpan.Parse(((string)dataDelayValue), CultureInfo.InvariantCulture);
                                            externalDataInstance.DataDelay = dataDelayInstance;
                                        }
                                        
                                        JToken retryIntervalValue = externalDataValue["retryInterval"];
                                        if (retryIntervalValue != null && retryIntervalValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan retryIntervalInstance = TimeSpan.Parse(((string)retryIntervalValue), CultureInfo.InvariantCulture);
                                            externalDataInstance.RetryInterval = retryIntervalInstance;
                                        }
                                        
                                        JToken retryTimeoutValue = externalDataValue["retryTimeout"];
                                        if (retryTimeoutValue != null && retryTimeoutValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan retryTimeoutInstance = TimeSpan.Parse(((string)retryTimeoutValue), CultureInfo.InvariantCulture);
                                            externalDataInstance.RetryTimeout = retryTimeoutInstance;
                                        }
                                        
                                        JToken maximumRetryValue = externalDataValue["maximumRetry"];
                                        if (maximumRetryValue != null && maximumRetryValue.Type != JTokenType.Null)
                                        {
                                            int maximumRetryInstance = ((int)maximumRetryValue);
                                            externalDataInstance.MaximumRetry = maximumRetryInstance;
                                        }
                                    }
                                }
                                
                                JToken externalValue = propertiesValue["external"];
                                if (externalValue != null && externalValue.Type != JTokenType.Null)
                                {
                                    bool externalInstance = ((bool)externalValue);
                                    propertiesInstance.External = externalInstance;
                                }
                                
                                JToken createTimeValue = propertiesValue["createTime"];
                                if (createTimeValue != null && createTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime createTimeInstance = ((DateTime)createTimeValue);
                                    propertiesInstance.CreateTime = createTimeInstance;
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken errorMessageValue = propertiesValue["errorMessage"];
                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance = ((string)errorMessageValue);
                                    propertiesInstance.ErrorMessage = errorMessageInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    result.Location = url;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete a dataset instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='datasetName'>
        /// Required. Name of the dataset.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginDeleteAsync(string resourceGroupName, string dataFactoryName, string datasetName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (datasetName == null)
            {
                throw new ArgumentNullException("datasetName");
            }
            if (datasetName != null && datasetName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("datasetName");
            }
            if (Regex.IsMatch(datasetName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("datasetName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("datasetName", datasetName);
                TracingAdapter.Enter(invocationId, this, "BeginDeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/datasets/";
            url = url + Uri.EscapeDataString(datasetName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create a new dataset instance or update an existing instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a dataset.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The CreateOrUpdate dataset operation response.
        /// </returns>
        public async Task<DatasetCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string dataFactoryName, DatasetCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            DataFactoryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            DatasetCreateOrUpdateResponse response = await client.Datasets.BeginCreateOrUpdateAsync(resourceGroupName, dataFactoryName, parameters, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            DatasetCreateOrUpdateResponse result = await client.Datasets.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 5;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.Datasets.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 5;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Create a new dataset instance or update an existing instance with
        /// raw json content.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='datasetName'>
        /// Required. A unique dataset instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a dataset.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The CreateOrUpdate dataset operation response.
        /// </returns>
        public async Task<DatasetCreateOrUpdateResponse> CreateOrUpdateWithRawJsonContentAsync(string resourceGroupName, string dataFactoryName, string datasetName, DatasetCreateOrUpdateWithRawJsonContentParameters parameters, CancellationToken cancellationToken)
        {
            DataFactoryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("datasetName", datasetName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateWithRawJsonContentAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            DatasetCreateOrUpdateResponse response = await client.Datasets.BeginCreateOrUpdateWithRawJsonContentAsync(resourceGroupName, dataFactoryName, datasetName, parameters, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            DatasetCreateOrUpdateResponse result = await client.Datasets.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 5;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.Datasets.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 5;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Delete a dataset instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='datasetName'>
        /// Required. Name of the dataset.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> DeleteAsync(string resourceGroupName, string dataFactoryName, string datasetName, CancellationToken cancellationToken)
        {
            DataFactoryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("datasetName", datasetName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.Datasets.BeginDeleteAsync(resourceGroupName, dataFactoryName, datasetName, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Gets a dataset instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='datasetName'>
        /// Required. Name of the dataset.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get dataset operation response.
        /// </returns>
        public async Task<DatasetGetResponse> GetAsync(string resourceGroupName, string dataFactoryName, string datasetName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (datasetName == null)
            {
                throw new ArgumentNullException("datasetName");
            }
            if (datasetName != null && datasetName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("datasetName");
            }
            if (Regex.IsMatch(datasetName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("datasetName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("datasetName", datasetName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/datasets/";
            url = url + Uri.EscapeDataString(datasetName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DatasetGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DatasetGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Dataset datasetInstance = new Dataset();
                            result.Dataset = datasetInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                datasetInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                DatasetProperties propertiesInstance = new DatasetProperties();
                                datasetInstance.Properties = propertiesInstance;
                                
                                JToken typeValue = propertiesValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    propertiesInstance.Type = typeInstance;
                                }
                                
                                JToken typePropertiesValue = propertiesValue["typeProperties"];
                                if (typePropertiesValue != null && typePropertiesValue.Type != JTokenType.Null)
                                {
                                    string typePropertiesInstance = typePropertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                    propertiesInstance.TypeProperties = typePropertiesInstance;
                                }
                                
                                JToken linkedServiceNameValue = propertiesValue["linkedServiceName"];
                                if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                {
                                    string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                    propertiesInstance.LinkedServiceName = linkedServiceNameInstance;
                                }
                                
                                JToken descriptionValue = propertiesValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                                
                                JToken structureArray = propertiesValue["structure"];
                                if (structureArray != null && structureArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken structureValue in ((JArray)structureArray))
                                    {
                                        DataElement dataElementInstance = new DataElement();
                                        propertiesInstance.Structure.Add(dataElementInstance);
                                        
                                        JToken nameValue2 = structureValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            dataElementInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken descriptionValue2 = structureValue["description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            dataElementInstance.Description = descriptionInstance2;
                                        }
                                        
                                        JToken typeValue2 = structureValue["type"];
                                        if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                        {
                                            string typeInstance2 = ((string)typeValue2);
                                            dataElementInstance.Type = typeInstance2;
                                        }
                                        
                                        JToken cultureValue = structureValue["culture"];
                                        if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                                        {
                                            string cultureInstance = ((string)cultureValue);
                                            dataElementInstance.Culture = cultureInstance;
                                        }
                                        
                                        JToken formatValue = structureValue["format"];
                                        if (formatValue != null && formatValue.Type != JTokenType.Null)
                                        {
                                            string formatInstance = ((string)formatValue);
                                            dataElementInstance.Format = formatInstance;
                                        }
                                    }
                                }
                                
                                JToken availabilityValue = propertiesValue["availability"];
                                if (availabilityValue != null && availabilityValue.Type != JTokenType.Null)
                                {
                                    Availability availabilityInstance = new Availability();
                                    propertiesInstance.Availability = availabilityInstance;
                                    
                                    JToken frequencyValue = availabilityValue["frequency"];
                                    if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                    {
                                        string frequencyInstance = ((string)frequencyValue);
                                        availabilityInstance.Frequency = frequencyInstance;
                                    }
                                    
                                    JToken intervalValue = availabilityValue["interval"];
                                    if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                    {
                                        uint intervalInstance = ((uint)intervalValue);
                                        availabilityInstance.Interval = intervalInstance;
                                    }
                                    
                                    JToken anchorDateTimeValue = availabilityValue["anchorDateTime"];
                                    if (anchorDateTimeValue != null && anchorDateTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime anchorDateTimeInstance = ((DateTime)anchorDateTimeValue);
                                        availabilityInstance.AnchorDateTime = anchorDateTimeInstance;
                                    }
                                    
                                    JToken offsetValue = availabilityValue["offset"];
                                    if (offsetValue != null && offsetValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan offsetInstance = TimeSpan.Parse(((string)offsetValue), CultureInfo.InvariantCulture);
                                        availabilityInstance.Offset = offsetInstance;
                                    }
                                    
                                    JToken styleValue = availabilityValue["style"];
                                    if (styleValue != null && styleValue.Type != JTokenType.Null)
                                    {
                                        string styleInstance = ((string)styleValue);
                                        availabilityInstance.Style = styleInstance;
                                    }
                                }
                                
                                JToken policyValue = propertiesValue["policy"];
                                if (policyValue != null && policyValue.Type != JTokenType.Null)
                                {
                                    Policy policyInstance = new Policy();
                                    propertiesInstance.Policy = policyInstance;
                                    
                                    JToken validationValue = policyValue["validation"];
                                    if (validationValue != null && validationValue.Type != JTokenType.Null)
                                    {
                                        ValidationPolicy validationInstance = new ValidationPolicy();
                                        policyInstance.Validation = validationInstance;
                                        
                                        JToken minimumRowsValue = validationValue["minimumRows"];
                                        if (minimumRowsValue != null && minimumRowsValue.Type != JTokenType.Null)
                                        {
                                            long minimumRowsInstance = ((long)minimumRowsValue);
                                            validationInstance.MinimumRows = minimumRowsInstance;
                                        }
                                        
                                        JToken minimumSizeMBValue = validationValue["minimumSizeMB"];
                                        if (minimumSizeMBValue != null && minimumSizeMBValue.Type != JTokenType.Null)
                                        {
                                            double minimumSizeMBInstance = ((double)minimumSizeMBValue);
                                            validationInstance.MinimumSizeMB = minimumSizeMBInstance;
                                        }
                                        
                                        JToken validationPriorityOrderValue = validationValue["validationPriorityOrder"];
                                        if (validationPriorityOrderValue != null && validationPriorityOrderValue.Type != JTokenType.Null)
                                        {
                                            string validationPriorityOrderInstance = ((string)validationPriorityOrderValue);
                                            validationInstance.ValidationPriorityOrder = validationPriorityOrderInstance;
                                        }
                                    }
                                    
                                    JToken latencyValue = policyValue["latency"];
                                    if (latencyValue != null && latencyValue.Type != JTokenType.Null)
                                    {
                                        LatencyPolicy latencyInstance = new LatencyPolicy();
                                        policyInstance.Latency = latencyInstance;
                                        
                                        JToken latencyLengthValue = latencyValue["latencyLength"];
                                        if (latencyLengthValue != null && latencyLengthValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan latencyLengthInstance = TimeSpan.Parse(((string)latencyLengthValue), CultureInfo.InvariantCulture);
                                            latencyInstance.LatencyLength = latencyLengthInstance;
                                        }
                                    }
                                    
                                    JToken externalDataValue = policyValue["externalData"];
                                    if (externalDataValue != null && externalDataValue.Type != JTokenType.Null)
                                    {
                                        ExternalDataPolicy externalDataInstance = new ExternalDataPolicy();
                                        policyInstance.ExternalData = externalDataInstance;
                                        
                                        JToken dataDelayValue = externalDataValue["dataDelay"];
                                        if (dataDelayValue != null && dataDelayValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan dataDelayInstance = TimeSpan.Parse(((string)dataDelayValue), CultureInfo.InvariantCulture);
                                            externalDataInstance.DataDelay = dataDelayInstance;
                                        }
                                        
                                        JToken retryIntervalValue = externalDataValue["retryInterval"];
                                        if (retryIntervalValue != null && retryIntervalValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan retryIntervalInstance = TimeSpan.Parse(((string)retryIntervalValue), CultureInfo.InvariantCulture);
                                            externalDataInstance.RetryInterval = retryIntervalInstance;
                                        }
                                        
                                        JToken retryTimeoutValue = externalDataValue["retryTimeout"];
                                        if (retryTimeoutValue != null && retryTimeoutValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan retryTimeoutInstance = TimeSpan.Parse(((string)retryTimeoutValue), CultureInfo.InvariantCulture);
                                            externalDataInstance.RetryTimeout = retryTimeoutInstance;
                                        }
                                        
                                        JToken maximumRetryValue = externalDataValue["maximumRetry"];
                                        if (maximumRetryValue != null && maximumRetryValue.Type != JTokenType.Null)
                                        {
                                            int maximumRetryInstance = ((int)maximumRetryValue);
                                            externalDataInstance.MaximumRetry = maximumRetryInstance;
                                        }
                                    }
                                }
                                
                                JToken externalValue = propertiesValue["external"];
                                if (externalValue != null && externalValue.Type != JTokenType.Null)
                                {
                                    bool externalInstance = ((bool)externalValue);
                                    propertiesInstance.External = externalInstance;
                                }
                                
                                JToken createTimeValue = propertiesValue["createTime"];
                                if (createTimeValue != null && createTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime createTimeInstance = ((DateTime)createTimeValue);
                                    propertiesInstance.CreateTime = createTimeInstance;
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken errorMessageValue = propertiesValue["errorMessage"];
                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance = ((string)errorMessageValue);
                                    propertiesInstance.ErrorMessage = errorMessageInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The CreateOrUpdate dataset operation response.
        /// </returns>
        public async Task<DatasetCreateOrUpdateResponse> GetCreateOrUpdateStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetCreateOrUpdateStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-10-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DatasetCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DatasetCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Dataset datasetInstance = new Dataset();
                            result.Dataset = datasetInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                datasetInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                DatasetProperties propertiesInstance = new DatasetProperties();
                                datasetInstance.Properties = propertiesInstance;
                                
                                JToken typeValue = propertiesValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    propertiesInstance.Type = typeInstance;
                                }
                                
                                JToken typePropertiesValue = propertiesValue["typeProperties"];
                                if (typePropertiesValue != null && typePropertiesValue.Type != JTokenType.Null)
                                {
                                    string typePropertiesInstance = typePropertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                    propertiesInstance.TypeProperties = typePropertiesInstance;
                                }
                                
                                JToken linkedServiceNameValue = propertiesValue["linkedServiceName"];
                                if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                {
                                    string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                    propertiesInstance.LinkedServiceName = linkedServiceNameInstance;
                                }
                                
                                JToken descriptionValue = propertiesValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                                
                                JToken structureArray = propertiesValue["structure"];
                                if (structureArray != null && structureArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken structureValue in ((JArray)structureArray))
                                    {
                                        DataElement dataElementInstance = new DataElement();
                                        propertiesInstance.Structure.Add(dataElementInstance);
                                        
                                        JToken nameValue2 = structureValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            dataElementInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken descriptionValue2 = structureValue["description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            dataElementInstance.Description = descriptionInstance2;
                                        }
                                        
                                        JToken typeValue2 = structureValue["type"];
                                        if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                        {
                                            string typeInstance2 = ((string)typeValue2);
                                            dataElementInstance.Type = typeInstance2;
                                        }
                                        
                                        JToken cultureValue = structureValue["culture"];
                                        if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                                        {
                                            string cultureInstance = ((string)cultureValue);
                                            dataElementInstance.Culture = cultureInstance;
                                        }
                                        
                                        JToken formatValue = structureValue["format"];
                                        if (formatValue != null && formatValue.Type != JTokenType.Null)
                                        {
                                            string formatInstance = ((string)formatValue);
                                            dataElementInstance.Format = formatInstance;
                                        }
                                    }
                                }
                                
                                JToken availabilityValue = propertiesValue["availability"];
                                if (availabilityValue != null && availabilityValue.Type != JTokenType.Null)
                                {
                                    Availability availabilityInstance = new Availability();
                                    propertiesInstance.Availability = availabilityInstance;
                                    
                                    JToken frequencyValue = availabilityValue["frequency"];
                                    if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                    {
                                        string frequencyInstance = ((string)frequencyValue);
                                        availabilityInstance.Frequency = frequencyInstance;
                                    }
                                    
                                    JToken intervalValue = availabilityValue["interval"];
                                    if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                    {
                                        uint intervalInstance = ((uint)intervalValue);
                                        availabilityInstance.Interval = intervalInstance;
                                    }
                                    
                                    JToken anchorDateTimeValue = availabilityValue["anchorDateTime"];
                                    if (anchorDateTimeValue != null && anchorDateTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime anchorDateTimeInstance = ((DateTime)anchorDateTimeValue);
                                        availabilityInstance.AnchorDateTime = anchorDateTimeInstance;
                                    }
                                    
                                    JToken offsetValue = availabilityValue["offset"];
                                    if (offsetValue != null && offsetValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan offsetInstance = TimeSpan.Parse(((string)offsetValue), CultureInfo.InvariantCulture);
                                        availabilityInstance.Offset = offsetInstance;
                                    }
                                    
                                    JToken styleValue = availabilityValue["style"];
                                    if (styleValue != null && styleValue.Type != JTokenType.Null)
                                    {
                                        string styleInstance = ((string)styleValue);
                                        availabilityInstance.Style = styleInstance;
                                    }
                                }
                                
                                JToken policyValue = propertiesValue["policy"];
                                if (policyValue != null && policyValue.Type != JTokenType.Null)
                                {
                                    Policy policyInstance = new Policy();
                                    propertiesInstance.Policy = policyInstance;
                                    
                                    JToken validationValue = policyValue["validation"];
                                    if (validationValue != null && validationValue.Type != JTokenType.Null)
                                    {
                                        ValidationPolicy validationInstance = new ValidationPolicy();
                                        policyInstance.Validation = validationInstance;
                                        
                                        JToken minimumRowsValue = validationValue["minimumRows"];
                                        if (minimumRowsValue != null && minimumRowsValue.Type != JTokenType.Null)
                                        {
                                            long minimumRowsInstance = ((long)minimumRowsValue);
                                            validationInstance.MinimumRows = minimumRowsInstance;
                                        }
                                        
                                        JToken minimumSizeMBValue = validationValue["minimumSizeMB"];
                                        if (minimumSizeMBValue != null && minimumSizeMBValue.Type != JTokenType.Null)
                                        {
                                            double minimumSizeMBInstance = ((double)minimumSizeMBValue);
                                            validationInstance.MinimumSizeMB = minimumSizeMBInstance;
                                        }
                                        
                                        JToken validationPriorityOrderValue = validationValue["validationPriorityOrder"];
                                        if (validationPriorityOrderValue != null && validationPriorityOrderValue.Type != JTokenType.Null)
                                        {
                                            string validationPriorityOrderInstance = ((string)validationPriorityOrderValue);
                                            validationInstance.ValidationPriorityOrder = validationPriorityOrderInstance;
                                        }
                                    }
                                    
                                    JToken latencyValue = policyValue["latency"];
                                    if (latencyValue != null && latencyValue.Type != JTokenType.Null)
                                    {
                                        LatencyPolicy latencyInstance = new LatencyPolicy();
                                        policyInstance.Latency = latencyInstance;
                                        
                                        JToken latencyLengthValue = latencyValue["latencyLength"];
                                        if (latencyLengthValue != null && latencyLengthValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan latencyLengthInstance = TimeSpan.Parse(((string)latencyLengthValue), CultureInfo.InvariantCulture);
                                            latencyInstance.LatencyLength = latencyLengthInstance;
                                        }
                                    }
                                    
                                    JToken externalDataValue = policyValue["externalData"];
                                    if (externalDataValue != null && externalDataValue.Type != JTokenType.Null)
                                    {
                                        ExternalDataPolicy externalDataInstance = new ExternalDataPolicy();
                                        policyInstance.ExternalData = externalDataInstance;
                                        
                                        JToken dataDelayValue = externalDataValue["dataDelay"];
                                        if (dataDelayValue != null && dataDelayValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan dataDelayInstance = TimeSpan.Parse(((string)dataDelayValue), CultureInfo.InvariantCulture);
                                            externalDataInstance.DataDelay = dataDelayInstance;
                                        }
                                        
                                        JToken retryIntervalValue = externalDataValue["retryInterval"];
                                        if (retryIntervalValue != null && retryIntervalValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan retryIntervalInstance = TimeSpan.Parse(((string)retryIntervalValue), CultureInfo.InvariantCulture);
                                            externalDataInstance.RetryInterval = retryIntervalInstance;
                                        }
                                        
                                        JToken retryTimeoutValue = externalDataValue["retryTimeout"];
                                        if (retryTimeoutValue != null && retryTimeoutValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan retryTimeoutInstance = TimeSpan.Parse(((string)retryTimeoutValue), CultureInfo.InvariantCulture);
                                            externalDataInstance.RetryTimeout = retryTimeoutInstance;
                                        }
                                        
                                        JToken maximumRetryValue = externalDataValue["maximumRetry"];
                                        if (maximumRetryValue != null && maximumRetryValue.Type != JTokenType.Null)
                                        {
                                            int maximumRetryInstance = ((int)maximumRetryValue);
                                            externalDataInstance.MaximumRetry = maximumRetryInstance;
                                        }
                                    }
                                }
                                
                                JToken externalValue = propertiesValue["external"];
                                if (externalValue != null && externalValue.Type != JTokenType.Null)
                                {
                                    bool externalInstance = ((bool)externalValue);
                                    propertiesInstance.External = externalInstance;
                                }
                                
                                JToken createTimeValue = propertiesValue["createTime"];
                                if (createTimeValue != null && createTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime createTimeInstance = ((DateTime)createTimeValue);
                                    propertiesInstance.CreateTime = createTimeInstance;
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken errorMessageValue = propertiesValue["errorMessage"];
                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance = ((string)errorMessageValue);
                                    propertiesInstance.ErrorMessage = errorMessageInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    result.Location = url;
                    if (result.Dataset != null && result.Dataset.Properties != null && result.Dataset.Properties.ProvisioningState == "Failed")
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (result.Dataset != null && result.Dataset.Properties != null && result.Dataset.Properties.ProvisioningState == "Succeeded")
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets all the dataset instances in a data factory with the link to
        /// the next page.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List datasets operation response.
        /// </returns>
        public async Task<DatasetListResponse> ListAsync(string resourceGroupName, string dataFactoryName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/datasets";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DatasetListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DatasetListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Dataset datasetInstance = new Dataset();
                                    result.Datasets.Add(datasetInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        datasetInstance.Name = nameInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        DatasetProperties propertiesInstance = new DatasetProperties();
                                        datasetInstance.Properties = propertiesInstance;
                                        
                                        JToken typeValue = propertiesValue["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            propertiesInstance.Type = typeInstance;
                                        }
                                        
                                        JToken typePropertiesValue = propertiesValue["typeProperties"];
                                        if (typePropertiesValue != null && typePropertiesValue.Type != JTokenType.Null)
                                        {
                                            string typePropertiesInstance = typePropertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                            propertiesInstance.TypeProperties = typePropertiesInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue = propertiesValue["linkedServiceName"];
                                        if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                            propertiesInstance.LinkedServiceName = linkedServiceNameInstance;
                                        }
                                        
                                        JToken descriptionValue = propertiesValue["description"];
                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance = ((string)descriptionValue);
                                            propertiesInstance.Description = descriptionInstance;
                                        }
                                        
                                        JToken structureArray = propertiesValue["structure"];
                                        if (structureArray != null && structureArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken structureValue in ((JArray)structureArray))
                                            {
                                                DataElement dataElementInstance = new DataElement();
                                                propertiesInstance.Structure.Add(dataElementInstance);
                                                
                                                JToken nameValue2 = structureValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    dataElementInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken descriptionValue2 = structureValue["description"];
                                                if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                                {
                                                    string descriptionInstance2 = ((string)descriptionValue2);
                                                    dataElementInstance.Description = descriptionInstance2;
                                                }
                                                
                                                JToken typeValue2 = structureValue["type"];
                                                if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                {
                                                    string typeInstance2 = ((string)typeValue2);
                                                    dataElementInstance.Type = typeInstance2;
                                                }
                                                
                                                JToken cultureValue = structureValue["culture"];
                                                if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                                                {
                                                    string cultureInstance = ((string)cultureValue);
                                                    dataElementInstance.Culture = cultureInstance;
                                                }
                                                
                                                JToken formatValue = structureValue["format"];
                                                if (formatValue != null && formatValue.Type != JTokenType.Null)
                                                {
                                                    string formatInstance = ((string)formatValue);
                                                    dataElementInstance.Format = formatInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken availabilityValue = propertiesValue["availability"];
                                        if (availabilityValue != null && availabilityValue.Type != JTokenType.Null)
                                        {
                                            Availability availabilityInstance = new Availability();
                                            propertiesInstance.Availability = availabilityInstance;
                                            
                                            JToken frequencyValue = availabilityValue["frequency"];
                                            if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                            {
                                                string frequencyInstance = ((string)frequencyValue);
                                                availabilityInstance.Frequency = frequencyInstance;
                                            }
                                            
                                            JToken intervalValue = availabilityValue["interval"];
                                            if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                            {
                                                uint intervalInstance = ((uint)intervalValue);
                                                availabilityInstance.Interval = intervalInstance;
                                            }
                                            
                                            JToken anchorDateTimeValue = availabilityValue["anchorDateTime"];
                                            if (anchorDateTimeValue != null && anchorDateTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime anchorDateTimeInstance = ((DateTime)anchorDateTimeValue);
                                                availabilityInstance.AnchorDateTime = anchorDateTimeInstance;
                                            }
                                            
                                            JToken offsetValue = availabilityValue["offset"];
                                            if (offsetValue != null && offsetValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan offsetInstance = TimeSpan.Parse(((string)offsetValue), CultureInfo.InvariantCulture);
                                                availabilityInstance.Offset = offsetInstance;
                                            }
                                            
                                            JToken styleValue = availabilityValue["style"];
                                            if (styleValue != null && styleValue.Type != JTokenType.Null)
                                            {
                                                string styleInstance = ((string)styleValue);
                                                availabilityInstance.Style = styleInstance;
                                            }
                                        }
                                        
                                        JToken policyValue = propertiesValue["policy"];
                                        if (policyValue != null && policyValue.Type != JTokenType.Null)
                                        {
                                            Policy policyInstance = new Policy();
                                            propertiesInstance.Policy = policyInstance;
                                            
                                            JToken validationValue = policyValue["validation"];
                                            if (validationValue != null && validationValue.Type != JTokenType.Null)
                                            {
                                                ValidationPolicy validationInstance = new ValidationPolicy();
                                                policyInstance.Validation = validationInstance;
                                                
                                                JToken minimumRowsValue = validationValue["minimumRows"];
                                                if (minimumRowsValue != null && minimumRowsValue.Type != JTokenType.Null)
                                                {
                                                    long minimumRowsInstance = ((long)minimumRowsValue);
                                                    validationInstance.MinimumRows = minimumRowsInstance;
                                                }
                                                
                                                JToken minimumSizeMBValue = validationValue["minimumSizeMB"];
                                                if (minimumSizeMBValue != null && minimumSizeMBValue.Type != JTokenType.Null)
                                                {
                                                    double minimumSizeMBInstance = ((double)minimumSizeMBValue);
                                                    validationInstance.MinimumSizeMB = minimumSizeMBInstance;
                                                }
                                                
                                                JToken validationPriorityOrderValue = validationValue["validationPriorityOrder"];
                                                if (validationPriorityOrderValue != null && validationPriorityOrderValue.Type != JTokenType.Null)
                                                {
                                                    string validationPriorityOrderInstance = ((string)validationPriorityOrderValue);
                                                    validationInstance.ValidationPriorityOrder = validationPriorityOrderInstance;
                                                }
                                            }
                                            
                                            JToken latencyValue = policyValue["latency"];
                                            if (latencyValue != null && latencyValue.Type != JTokenType.Null)
                                            {
                                                LatencyPolicy latencyInstance = new LatencyPolicy();
                                                policyInstance.Latency = latencyInstance;
                                                
                                                JToken latencyLengthValue = latencyValue["latencyLength"];
                                                if (latencyLengthValue != null && latencyLengthValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan latencyLengthInstance = TimeSpan.Parse(((string)latencyLengthValue), CultureInfo.InvariantCulture);
                                                    latencyInstance.LatencyLength = latencyLengthInstance;
                                                }
                                            }
                                            
                                            JToken externalDataValue = policyValue["externalData"];
                                            if (externalDataValue != null && externalDataValue.Type != JTokenType.Null)
                                            {
                                                ExternalDataPolicy externalDataInstance = new ExternalDataPolicy();
                                                policyInstance.ExternalData = externalDataInstance;
                                                
                                                JToken dataDelayValue = externalDataValue["dataDelay"];
                                                if (dataDelayValue != null && dataDelayValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan dataDelayInstance = TimeSpan.Parse(((string)dataDelayValue), CultureInfo.InvariantCulture);
                                                    externalDataInstance.DataDelay = dataDelayInstance;
                                                }
                                                
                                                JToken retryIntervalValue = externalDataValue["retryInterval"];
                                                if (retryIntervalValue != null && retryIntervalValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan retryIntervalInstance = TimeSpan.Parse(((string)retryIntervalValue), CultureInfo.InvariantCulture);
                                                    externalDataInstance.RetryInterval = retryIntervalInstance;
                                                }
                                                
                                                JToken retryTimeoutValue = externalDataValue["retryTimeout"];
                                                if (retryTimeoutValue != null && retryTimeoutValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan retryTimeoutInstance = TimeSpan.Parse(((string)retryTimeoutValue), CultureInfo.InvariantCulture);
                                                    externalDataInstance.RetryTimeout = retryTimeoutInstance;
                                                }
                                                
                                                JToken maximumRetryValue = externalDataValue["maximumRetry"];
                                                if (maximumRetryValue != null && maximumRetryValue.Type != JTokenType.Null)
                                                {
                                                    int maximumRetryInstance = ((int)maximumRetryValue);
                                                    externalDataInstance.MaximumRetry = maximumRetryInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken externalValue = propertiesValue["external"];
                                        if (externalValue != null && externalValue.Type != JTokenType.Null)
                                        {
                                            bool externalInstance = ((bool)externalValue);
                                            propertiesInstance.External = externalInstance;
                                        }
                                        
                                        JToken createTimeValue = propertiesValue["createTime"];
                                        if (createTimeValue != null && createTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime createTimeInstance = ((DateTime)createTimeValue);
                                            propertiesInstance.CreateTime = createTimeInstance;
                                        }
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance = ((string)provisioningStateValue);
                                            propertiesInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken errorMessageValue = propertiesValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            propertiesInstance.ErrorMessage = errorMessageInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the next page of dataset instances with the link to the next
        /// page.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The url to the next datasets page.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List datasets operation response.
        /// </returns>
        public async Task<DatasetListResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DatasetListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DatasetListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Dataset datasetInstance = new Dataset();
                                    result.Datasets.Add(datasetInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        datasetInstance.Name = nameInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        DatasetProperties propertiesInstance = new DatasetProperties();
                                        datasetInstance.Properties = propertiesInstance;
                                        
                                        JToken typeValue = propertiesValue["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            propertiesInstance.Type = typeInstance;
                                        }
                                        
                                        JToken typePropertiesValue = propertiesValue["typeProperties"];
                                        if (typePropertiesValue != null && typePropertiesValue.Type != JTokenType.Null)
                                        {
                                            string typePropertiesInstance = typePropertiesValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                            propertiesInstance.TypeProperties = typePropertiesInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue = propertiesValue["linkedServiceName"];
                                        if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                            propertiesInstance.LinkedServiceName = linkedServiceNameInstance;
                                        }
                                        
                                        JToken descriptionValue = propertiesValue["description"];
                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance = ((string)descriptionValue);
                                            propertiesInstance.Description = descriptionInstance;
                                        }
                                        
                                        JToken structureArray = propertiesValue["structure"];
                                        if (structureArray != null && structureArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken structureValue in ((JArray)structureArray))
                                            {
                                                DataElement dataElementInstance = new DataElement();
                                                propertiesInstance.Structure.Add(dataElementInstance);
                                                
                                                JToken nameValue2 = structureValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    dataElementInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken descriptionValue2 = structureValue["description"];
                                                if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                                {
                                                    string descriptionInstance2 = ((string)descriptionValue2);
                                                    dataElementInstance.Description = descriptionInstance2;
                                                }
                                                
                                                JToken typeValue2 = structureValue["type"];
                                                if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                {
                                                    string typeInstance2 = ((string)typeValue2);
                                                    dataElementInstance.Type = typeInstance2;
                                                }
                                                
                                                JToken cultureValue = structureValue["culture"];
                                                if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                                                {
                                                    string cultureInstance = ((string)cultureValue);
                                                    dataElementInstance.Culture = cultureInstance;
                                                }
                                                
                                                JToken formatValue = structureValue["format"];
                                                if (formatValue != null && formatValue.Type != JTokenType.Null)
                                                {
                                                    string formatInstance = ((string)formatValue);
                                                    dataElementInstance.Format = formatInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken availabilityValue = propertiesValue["availability"];
                                        if (availabilityValue != null && availabilityValue.Type != JTokenType.Null)
                                        {
                                            Availability availabilityInstance = new Availability();
                                            propertiesInstance.Availability = availabilityInstance;
                                            
                                            JToken frequencyValue = availabilityValue["frequency"];
                                            if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                            {
                                                string frequencyInstance = ((string)frequencyValue);
                                                availabilityInstance.Frequency = frequencyInstance;
                                            }
                                            
                                            JToken intervalValue = availabilityValue["interval"];
                                            if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                            {
                                                uint intervalInstance = ((uint)intervalValue);
                                                availabilityInstance.Interval = intervalInstance;
                                            }
                                            
                                            JToken anchorDateTimeValue = availabilityValue["anchorDateTime"];
                                            if (anchorDateTimeValue != null && anchorDateTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime anchorDateTimeInstance = ((DateTime)anchorDateTimeValue);
                                                availabilityInstance.AnchorDateTime = anchorDateTimeInstance;
                                            }
                                            
                                            JToken offsetValue = availabilityValue["offset"];
                                            if (offsetValue != null && offsetValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan offsetInstance = TimeSpan.Parse(((string)offsetValue), CultureInfo.InvariantCulture);
                                                availabilityInstance.Offset = offsetInstance;
                                            }
                                            
                                            JToken styleValue = availabilityValue["style"];
                                            if (styleValue != null && styleValue.Type != JTokenType.Null)
                                            {
                                                string styleInstance = ((string)styleValue);
                                                availabilityInstance.Style = styleInstance;
                                            }
                                        }
                                        
                                        JToken policyValue = propertiesValue["policy"];
                                        if (policyValue != null && policyValue.Type != JTokenType.Null)
                                        {
                                            Policy policyInstance = new Policy();
                                            propertiesInstance.Policy = policyInstance;
                                            
                                            JToken validationValue = policyValue["validation"];
                                            if (validationValue != null && validationValue.Type != JTokenType.Null)
                                            {
                                                ValidationPolicy validationInstance = new ValidationPolicy();
                                                policyInstance.Validation = validationInstance;
                                                
                                                JToken minimumRowsValue = validationValue["minimumRows"];
                                                if (minimumRowsValue != null && minimumRowsValue.Type != JTokenType.Null)
                                                {
                                                    long minimumRowsInstance = ((long)minimumRowsValue);
                                                    validationInstance.MinimumRows = minimumRowsInstance;
                                                }
                                                
                                                JToken minimumSizeMBValue = validationValue["minimumSizeMB"];
                                                if (minimumSizeMBValue != null && minimumSizeMBValue.Type != JTokenType.Null)
                                                {
                                                    double minimumSizeMBInstance = ((double)minimumSizeMBValue);
                                                    validationInstance.MinimumSizeMB = minimumSizeMBInstance;
                                                }
                                                
                                                JToken validationPriorityOrderValue = validationValue["validationPriorityOrder"];
                                                if (validationPriorityOrderValue != null && validationPriorityOrderValue.Type != JTokenType.Null)
                                                {
                                                    string validationPriorityOrderInstance = ((string)validationPriorityOrderValue);
                                                    validationInstance.ValidationPriorityOrder = validationPriorityOrderInstance;
                                                }
                                            }
                                            
                                            JToken latencyValue = policyValue["latency"];
                                            if (latencyValue != null && latencyValue.Type != JTokenType.Null)
                                            {
                                                LatencyPolicy latencyInstance = new LatencyPolicy();
                                                policyInstance.Latency = latencyInstance;
                                                
                                                JToken latencyLengthValue = latencyValue["latencyLength"];
                                                if (latencyLengthValue != null && latencyLengthValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan latencyLengthInstance = TimeSpan.Parse(((string)latencyLengthValue), CultureInfo.InvariantCulture);
                                                    latencyInstance.LatencyLength = latencyLengthInstance;
                                                }
                                            }
                                            
                                            JToken externalDataValue = policyValue["externalData"];
                                            if (externalDataValue != null && externalDataValue.Type != JTokenType.Null)
                                            {
                                                ExternalDataPolicy externalDataInstance = new ExternalDataPolicy();
                                                policyInstance.ExternalData = externalDataInstance;
                                                
                                                JToken dataDelayValue = externalDataValue["dataDelay"];
                                                if (dataDelayValue != null && dataDelayValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan dataDelayInstance = TimeSpan.Parse(((string)dataDelayValue), CultureInfo.InvariantCulture);
                                                    externalDataInstance.DataDelay = dataDelayInstance;
                                                }
                                                
                                                JToken retryIntervalValue = externalDataValue["retryInterval"];
                                                if (retryIntervalValue != null && retryIntervalValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan retryIntervalInstance = TimeSpan.Parse(((string)retryIntervalValue), CultureInfo.InvariantCulture);
                                                    externalDataInstance.RetryInterval = retryIntervalInstance;
                                                }
                                                
                                                JToken retryTimeoutValue = externalDataValue["retryTimeout"];
                                                if (retryTimeoutValue != null && retryTimeoutValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan retryTimeoutInstance = TimeSpan.Parse(((string)retryTimeoutValue), CultureInfo.InvariantCulture);
                                                    externalDataInstance.RetryTimeout = retryTimeoutInstance;
                                                }
                                                
                                                JToken maximumRetryValue = externalDataValue["maximumRetry"];
                                                if (maximumRetryValue != null && maximumRetryValue.Type != JTokenType.Null)
                                                {
                                                    int maximumRetryInstance = ((int)maximumRetryValue);
                                                    externalDataInstance.MaximumRetry = maximumRetryInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken externalValue = propertiesValue["external"];
                                        if (externalValue != null && externalValue.Type != JTokenType.Null)
                                        {
                                            bool externalInstance = ((bool)externalValue);
                                            propertiesInstance.External = externalInstance;
                                        }
                                        
                                        JToken createTimeValue = propertiesValue["createTime"];
                                        if (createTimeValue != null && createTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime createTimeInstance = ((DateTime)createTimeValue);
                                            propertiesInstance.CreateTime = createTimeInstance;
                                        }
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance = ((string)provisioningStateValue);
                                            propertiesInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken errorMessageValue = propertiesValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            propertiesInstance.ErrorMessage = errorMessageInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
