// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.Azure.Management.DataFactories.Core;
using Microsoft.Azure.Management.DataFactories.Models;

namespace Microsoft.Azure.Management.DataFactories.Core
{
    public static partial class DataSliceOperationsExtensions
    {
        /// <summary>
        /// Gets the first page of data slice instances with the link to the
        /// next page.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataFactories.Core.IDataSliceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='datasetName'>
        /// Required. A unique dataset instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters specifying how to list data slices of the
        /// dataset.
        /// </param>
        /// <returns>
        /// The List data slices operation response.
        /// </returns>
        public static DataSliceListResponse List(this IDataSliceOperations operations, string resourceGroupName, string dataFactoryName, string datasetName, DataSliceListParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSliceOperations)s).ListAsync(resourceGroupName, dataFactoryName, datasetName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the first page of data slice instances with the link to the
        /// next page.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataFactories.Core.IDataSliceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='datasetName'>
        /// Required. A unique dataset instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters specifying how to list data slices of the
        /// dataset.
        /// </param>
        /// <returns>
        /// The List data slices operation response.
        /// </returns>
        public static Task<DataSliceListResponse> ListAsync(this IDataSliceOperations operations, string resourceGroupName, string dataFactoryName, string datasetName, DataSliceListParameters parameters)
        {
            return operations.ListAsync(resourceGroupName, dataFactoryName, datasetName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the next page of data slice instances with the link to the
        /// next page.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataFactories.Core.IDataSliceOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The url to the next data slices page.
        /// </param>
        /// <returns>
        /// The List data slices operation response.
        /// </returns>
        public static DataSliceListResponse ListNext(this IDataSliceOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSliceOperations)s).ListNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the next page of data slice instances with the link to the
        /// next page.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataFactories.Core.IDataSliceOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The url to the next data slices page.
        /// </param>
        /// <returns>
        /// The List data slices operation response.
        /// </returns>
        public static Task<DataSliceListResponse> ListNextAsync(this IDataSliceOperations operations, string nextLink)
        {
            return operations.ListNextAsync(nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Sets status of data slices over a time range for a specific dataset.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataFactories.Core.IDataSliceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='datasetName'>
        /// Required. A unique dataset instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to set status of data slices.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse SetStatus(this IDataSliceOperations operations, string resourceGroupName, string dataFactoryName, string datasetName, DataSliceSetStatusParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSliceOperations)s).SetStatusAsync(resourceGroupName, dataFactoryName, datasetName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Sets status of data slices over a time range for a specific dataset.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataFactories.Core.IDataSliceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='datasetName'>
        /// Required. A unique dataset instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to set status of data slices.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> SetStatusAsync(this IDataSliceOperations operations, string resourceGroupName, string dataFactoryName, string datasetName, DataSliceSetStatusParameters parameters)
        {
            return operations.SetStatusAsync(resourceGroupName, dataFactoryName, datasetName, parameters, CancellationToken.None);
        }
    }
}
